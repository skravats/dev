
C10GX_SoM_Rev2_Demo.elf:     file format elf32-littlenios2
C10GX_SoM_Rev2_Demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00035b90 memsz 0x00035b90 flags r-x
    LOAD off    0x00036bb0 vaddr 0x00035bb0 paddr 0x000379f0 align 2**12
         filesz 0x00001e40 memsz 0x00001e40 flags rw-
    LOAD off    0x00039830 vaddr 0x00039830 paddr 0x00039830 align 2**12
         filesz 0x00000000 memsz 0x08069dc0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00031448  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004524  0003168c  0003168c  0003268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e40  00035bb0  000379f0  00036bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          08069e41  00039830  00039830  00039830  2**2
                  ALLOC, SMALL_DATA
  6 .ddr3_ctrl_amm_0 00000000  080a35f0  080a35f0  000389f0  2**0
                  CONTENTS
  7 .qspi_controller2_0_avl_mem 00000000  80000000  80000000  000389f0  2**0
                  CONTENTS
  8 .mcu_subsystem_ram_0 00000000  88020000  88020000  000389f0  2**0
                  CONTENTS
  9 .comment      0000002c  00000000  00000000  000389f0  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001938  00000000  00000000  00038a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0007dcd2  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00017419  00000000  00000000  000b802a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cc3a  00000000  00000000  000cf443  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006334  00000000  00000000  000ec080  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a9c2  00000000  00000000  000f23b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020668  00000000  00000000  000fcd76  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  0011d3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002160  00000000  00000000  0011d440  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  001271b1  2**0
                  CONTENTS, READONLY
 20 .cpu          00000013  00000000  00000000  001271b4  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  001271c7  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  001271c8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  001271c9  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  001271d4  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  001271df  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  001271ea  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000033  00000000  00000000  001271f7  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     003346ff  00000000  00000000  0012722a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0003168c l    d  .rodata	00000000 .rodata
00035bb0 l    d  .rwdata	00000000 .rwdata
00039830 l    d  .bss	00000000 .bss
080a35f0 l    d  .ddr3_ctrl_amm_0	00000000 .ddr3_ctrl_amm_0
80000000 l    d  .qspi_controller2_0_avl_mem	00000000 .qspi_controller2_0_avl_mem
88020000 l    d  .mcu_subsystem_ram_0	00000000 .mcu_subsystem_ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Git/ArrowESC/Cyclone10GX_Rev2_Demo/software/C10GX_SoM_Rev2_Demo_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 crc.c
00000000 l    df *ABS*	00000000 ethernet.c
00039880 l     O .bss	00066838 network_ctx
000005b4 l     F .text	000000cc link_status_read
00000b10 l     F .text	000000dc mac_compare
00001270 l     F .text	000005b4 arp_process_rx
00001d70 l     F .text	00000438 ip_process_rx
00000de8 l     F .text	000002c4 tx_send
000011ec l     F .text	00000084 arp_packet_check
00002c74 l     F .text	00000200 arp_register
000018f0 l     F .text	000000c8 checksum16
000019b8 l     F .text	00000298 icmp_process
00001c50 l     F .text	00000120 udp_process_rx
00002bf0 l     F .text	00000084 mac_addr_compare
00002ebc l     F .text	0000011c get_arp
00000000 l    df *ABS*	00000000 ad9144.c
0003172c l     O .rodata	00000032 ad9144_jesd204_link_modes
0003175e l     O .rodata	00000014 ad9144_required_device_config
00031772 l     O .rodata	0000003c ad9144_optimal_serdes_settings
000317ae l     O .rodata	00000034 ad9144_pll_fixed_writes
000047f0 l     F .text	000002b0 ad9144_pll_setup
000319c8 l     O .rodata	00000011 __func__.3523
000319dc l     O .rodata	0000000d __func__.3535
000319ec l     O .rodata	00000015 __func__.3547
00031a04 l     O .rodata	0000000e __func__.3561
00031a14 l     O .rodata	0000001a __func__.3570
00031a30 l     O .rodata	0000001a __func__.3583
00000000 l    df *ABS*	00000000 ad9523.c
00000000 l    df *ABS*	00000000 ad9680.c
00000000 l    df *ABS*	00000000 adc_core.c
00031c4c l     O .rodata	0000000a __func__.3465
00031c58 l     O .rodata	00000014 __func__.3498
00031c6c l     O .rodata	0000000e __func__.3548
00000000 l    df *ABS*	00000000 Communication.c
00000000 l    df *ABS*	00000000 dac_buffer.c
00031c7c l     O .rodata	00000800 sine_lut
00000000 l    df *ABS*	00000000 dac_core.c
00032504 l     O .rodata	0000000e __func__.3491
00032514 l     O .rodata	0000000a __func__.3508
00000000 l    df *ABS*	00000000 dmac_core.c
00032540 l     O .rodata	00000017 __func__.3438
00000000 l    df *ABS*	00000000 fru_tools.c
00032b30 l     O .rodata	0000000a __func__.3336
0000a998 l     F .text	00000268 insert_str
00000000 l    df *ABS*	00000000 jesd_core.c
00035bb0 l     O .rwdata	00000010 axi_jesd204_rx_link_status_label
00035bc0 l     O .rwdata	00000010 axi_jesd204_tx_link_status_label
00035bd0 l     O .rwdata	00000010 axi_jesd204_rx_lane_status_label
00032e1c l     O .rodata	0000000c __func__.3471
00000000 l    df *ABS*	00000000 platform_drivers.c
00000000 l    df *ABS*	00000000 xcvr_core.c
00033078 l     O .rodata	0000000b __func__.3550
00000000 l    df *ABS*	00000000 altera_a10_atx_pll.c
00000000 l    df *ABS*	00000000 altera_a10_fpll.c
00000000 l    df *ABS*	00000000 altera_a10_xcvr_channel.c
00000000 l    df *ABS*	00000000 altera_pll_common.c
000331c8 l     O .rodata	0000001f __func__.3468
000331e8 l     O .rodata	00000016 __func__.3489
00033200 l     O .rodata	0000000f __func__.3500
00033210 l     O .rodata	0000000b __func__.3511
0003321c l     O .rodata	0000000c __func__.3521
00000000 l    df *ABS*	00000000 xilinx_qpll.c
00000000 l    df *ABS*	00000000 xilinx_xcvr_channel.c
00000000 l    df *ABS*	00000000 iioscope.c
000a00b8 l     O .bss	0000001c app_ctx
000a00d4 l     O .bss	00001388 iio_buffer_tx
000a145c l     O .bss	00001388 iio_buffer_rx
00000000 l    df *ABS*	00000000 jesd204b.c
000a27e4 l     O .bss	080003ec fmcdaq2_ctx
00033568 l     O .rodata	0000000a __func__.3946
00011acc l     F .text	00000044 axi_jesd204_tx_irq
00011b10 l     F .text	00000044 axi_jesd204_rx_irq
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00035be0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mktime.c
00015cac l     F .text	000002b0 validate_structure
000336ec l     O .rodata	00000030 DAYS_IN_MONTH
000336bc l     O .rodata	00000030 _DAYS_BEFORE_MONTH
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00033772 l     O .rodata	00000010 blanks.4636
00033762 l     O .rodata	00000010 zeroes.4637
00000000 l    df *ABS*	00000000 tzcalc_limits.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzset.c
00000000 l    df *ABS*	00000000 tzset_r.c
00039840 l     O .bss	00000004 prev_tzenv
080a2c03 l     O .bss	0000000b __tzname_std
080a2bf8 l     O .bss	0000000b __tzname_dst
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001aee8 l     F .text	000000c0 __sbprintf
000337e7 l     O .rodata	00000010 blanks.4651
000337d7 l     O .rodata	00000010 zeroes.4652
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 div.c
00000000 l    df *ABS*	00000000 dtoa.c
0001b1c4 l     F .text	000001f8 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001cd0c l     F .text	00000008 __fp_lock
0001cd20 l     F .text	00000184 __sinit.part.0
0001cea4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 gettzinfo.c
00036578 l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 month_lengths.c
00000000 l    df *ABS*	00000000 mprec.c
00033ae8 l     O .rodata	0000000c p05.3456
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0001f634 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 siscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtoul.c
0001fb08 l     F .text	00000254 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00033c1c l     O .rodata	00000010 blanks.4616
00033c0c l     O .rodata	00000010 zeroes.4617
00000000 l    df *ABS*	00000000 vfscanf.c
00033c2c l     O .rodata	00000022 basefix.4209
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
000223ec l     F .text	000000f4 __sprint_r.part.0
00033c5e l     O .rodata	00000010 blanks.4632
00033c4e l     O .rodata	00000010 zeroes.4633
00023730 l     F .text	000000c0 __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
00039850 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtol.c
00024104 l     F .text	00000230 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 strtoll.c
000243dc l     F .text	000002f4 _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00024778 l     F .text	00000324 _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00024f14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
00025098 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000250f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00025220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00025600 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000256e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000257d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00025c00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000379c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00025e70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00036760 l     O .rwdata	00000038 i2c
00036798 l     O .rwdata	00001060 jtag_uart_0
000377f8 l     O .rwdata	000000dc qspi_controller2_0
000378d4 l     O .rwdata	00000060 ethernet_dma_tx
00037934 l     O .rwdata	00000060 ethernet_dma_rx
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
000260bc l     F .text	00000110 optional_irq_callback
0002621c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00027ef0 l     F .text	00000210 altera_avalon_jtag_uart_irq
00028100 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00028740 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
0003986e l     O .bss	00000001 tse_system_count.4376
0003986f l     O .bss	00000001 is_init.4458
00000000 l    df *ABS*	00000000 altera_avalon_tse_system_info.c
00000000 l    df *ABS*	00000000 altera_generic_quad_spi_controller2.c
0002e4ac l     F .text	0000007c alt_qspi_poll_for_write_in_progress
0002e410 l     F .text	0000009c alt_qspi_validate_read_write_arguments
00000000 l    df *ABS*	00000000 altera_msgdma.c
0002e528 l     F .text	0000003c alt_get_errno
0002e564 l     F .text	00000094 alt_msgdma_write_standard_descriptor
0002e5f8 l     F .text	0000012c alt_msgdma_write_extended_descriptor
0002e724 l     F .text	00000184 alt_msgdma_irq
0002e8a8 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
0002e934 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
0002ea88 l     F .text	000002d4 alt_msgdma_descriptor_async_transfer
0002ed5c l     F .text	00000380 alt_msgdma_descriptor_sync_transfer
0002f3ac l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
0002f450 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00030c14 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00030d40 l     F .text	0000003c alt_get_errno
00030d7c l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00039870 g     O .bss	00000004 alt_instruction_exception_handler
000303f4 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
0001638c g     F .text	00000018 putchar
000003e8 g     F .text	000000a4 tse_mmd_writereg
0000fdc8 g     F .text	000000e8 altera_a10_acquire_arbitration
0001edbc g     F .text	00000074 _mprec_log10
00029b9c g     F .text	000000cc alt_tse_get_mac_info
0000822c g     F .text	00000044 I2C_Read
0001ee9c g     F .text	00000074 __any_on
00023d6c g     F .text	00000058 _isatty_r
00033af4 g     O .rodata	00000028 __mprec_tinytens
000104b8 g     F .text	00000024 get_adc_buffer
0000ba30 g     F .text	000003d8 axi_jesd204_rx_laneinfo_read
000258e0 g     F .text	0000007c alt_main
000166e0 g     F .text	0000008c strcpy
000163a4 g     F .text	000000cc _puts_r
000007e4 g     F .text	00000024 rx_ethernet_isr
080a34b0 g     O .bss	00000100 alt_irq
0000b630 g     F .text	000001f8 axi_jesd204_rx_status_read
00023e04 g     F .text	00000064 _lseek_r
0000a834 g     F .text	00000164 free_FRU
00006ec8 g     F .text	00000088 ad9680_spi_read
0002d75c g     F .text	000000f0 marvell_cfg_rgmii
000379f0 g       *ABS*	00000000 __flash_rwdata_start
0000d0fc g     F .text	00000214 atx_lookup_cp_current
0000fd44 g     F .text	00000084 pll_update
00024c98 g     F .text	00000080 .hidden __eqdf2
000255d4 g     F .text	0000002c alt_instruction_exception_register
00000000 g       *ABS*	00000000 __alt_mem_ddr3_ctrl_amm_0
0002f18c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
0002adb0 g     F .text	000001d0 alt_tse_phy_print_profile
080a35f0 g       *ABS*	00000000 __alt_heap_start
00005e6c g     F .text	000000e4 ad9523_sync
0002d4fc g     F .text	00000098 marvell_phy_cfg
0000ca28 g     F .text	000000c0 xcvr_reset
0000b52c g     F .text	00000104 jesd_status
0001634c g     F .text	00000038 printf
00024b44 g     F .text	000000a8 _wcrtomb_r
000033e0 g     F .text	000000b4 close_socket
0001f9e0 g     F .text	0000005c __sseek
0001d024 g     F .text	00000010 __sinit
000237f0 g     F .text	00000148 __swbuf_r
00039848 g     O .bss	00000004 _daylight
0002d8c4 g     F .text	0000005c PEF7071_config
00015184 g     F .text	0000007c _setlocale_r
0001ceac g     F .text	00000068 __sfmoreglue
00026918 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001022c g     F .text	000000c4 iioscope_init
000223d8 g     F .text	00000014 ungetc
00006fcc g     F .text	000000b4 ad9680_check_pdwn
00018ef8 g     F .text	00000024 _tzset_r
00000534 g     F .text	00000080 phy_ethernet_reset
00025980 g     F .text	00000024 __malloc_unlock
00024ad0 g     F .text	00000030 strtoull_l
0000a660 g     F .text	000001d4 parse_FRU
0000d310 g     F .text	00000184 atx_lookup_lf_resistance
0000daa0 g     F .text	000001b0 atx_pll_recalc_rate
00027b28 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00029dd4 g     F .text	00000a78 getPHYSpeed
00026698 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00039868 g     O .bss	00000004 altera_avalon_timer_ts_freq
0002d9c0 g     F .text	000000fc alt_qspi_controller2_lock
00021148 g     F .text	000000f8 _sfread_r
0001de98 g     F .text	0000011c memmove
00002e74 g     F .text	00000024 get_free_port
0001d010 g     F .text	00000014 _cleanup
00033084 g     O .rodata	00000050 atx_bands
00015228 g     F .text	00000020 __locale_ctype_ptr
0002737c g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
0001dfb4 g     F .text	000000a4 _Balloc
0002f0dc g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
0002c76c g     F .text	000001c4 alt_tse_phy_set_adv_1000
0000c774 g     F .text	00000048 xcvr_write
000379d4 g     O .rwdata	00000001 max_mac_system
00028fb0 g     F .text	000008cc alt_tse_system_add_sys
00013c9c g     F .text	000000e0 .hidden __gtdf2
00031150 g     F .text	00000024 altera_nios2_gen2_irq_init
0000be54 g     F .text	0000003c i2c_write
00000000 g     F .entry	0000001c __reset
0001db98 g     F .text	00000008 __localeconv_l
00005c3c g     F .text	000000dc ad9523_calibrate
00002fd8 g     F .text	00000408 open_socket
00008cf8 g     F .text	0000020c dac_data_setup
00000020 g       *ABS*	00000000 __flash_exceptions_start
00023d0c g     F .text	00000060 _fstat_r
080a2c10 g     O .bss	00000260 tse_mac_device
0003984c g     O .bss	00000004 errno
000164f4 g     F .text	00000010 __srget
0001f95c g     F .text	00000008 __seofread
0001ffc4 g     F .text	00001024 ___svfiprintf_internal_r
0002d04c g     F .text	000004b0 alt_tse_phy_set_common_speed
080a35b0 g     O .bss	00000020 pmac_groups
0003985c g     O .bss	00000004 alt_argv
0003f994 g       *ABS*	00000000 _gp
00025e40 g     F .text	00000030 usleep
00027b6c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00011d3c g     F .text	00000028 .hidden __bswapsi2
00026828 g     F .text	00000044 alt_avalon_i2c_is_busy
00028ac8 g     F .text	00000060 tse_mac_initTransInfo2
0002fc74 g     F .text	0000014c alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00005670 g     F .text	0000017c ad9144_datapath_prbs_test
000365e0 g     O .rwdata	00000180 alt_fd_list
00007478 g     F .text	00000184 adc_setup
0000bf90 g     F .text	00000034 spi_remove
00015078 g     F .text	0000007c _getc_r
0000938c g     F .text	00000074 min2date
000150f4 g     F .text	00000090 getc
00007a98 g     F .text	000000b8 adc_set_pnsel
00000368 g     F .text	0000003c swap16
00016384 g     F .text	00000008 _putchar_r
000265cc g     F .text	000000cc alt_avalon_i2c_master_config_set
0003089c g     F .text	00000160 alt_find_dev
0000e92c g     F .text	000001cc fpll_recalc_rate
00015ac0 g     F .text	000000f0 memcpy
00028d58 g     F .text	00000054 tse_mac_setMIImode
0002dabc g     F .text	0000008c alt_qspi_controller2_get_info
0002a84c g     F .text	00000048 alt_tse_phy_rd_mdio_addr
0001179c g     F .text	0000016c daq2_transaction_adc
0001cd14 g     F .text	0000000c _cleanup_r
00024e4c g     F .text	000000c8 .hidden __floatsidf
00028b28 g     F .text	000000c8 tse_mac_sTxWrite
00030cc4 g     F .text	0000007c alt_io_redirect
00024d18 g     F .text	000000e0 .hidden __ltdf2
00007380 g     F .text	00000048 ad9680_remove
00024704 g     F .text	00000030 strtoll_l
00000808 g     F .text	00000204 rx_dma_rearm
0003168c g       *ABS*	00000000 __DTOR_END__
00030130 g     F .text	000000b0 alt_msgdma_start_prefetcher_with_extd_desc_list
00030430 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
000303a0 g     F .text	00000054 alt_msgdma_register_callback
000271c0 g     F .text	000001bc alt_avalon_i2c_master_transmit
00016470 g     F .text	00000010 puts
00030b7c g     F .text	00000098 alt_exception_cause_generated_bad_addr
88020000 g       *ABS*	00000000 __alt_mem_mcu_subsystem_ram_0
0000fca8 g     F .text	00000050 a10_pll_read
00023f18 g     F .text	000000b8 mbrtowc
0001ed14 g     F .text	000000a8 __ratio
00023718 g     F .text	00000018 __vfiprintf_internal
00028300 g     F .text	0000021c altera_avalon_jtag_uart_read
0001525c g     F .text	00000010 malloc
0002f8dc g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
0001631c g     F .text	00000030 _printf_r
00012a54 g     F .text	00000064 .hidden __udivsi3
0002563c g     F .text	000000a8 isatty
0002987c g     F .text	00000144 alt_tse_sys_enable_mdio_sharing
00023dc4 g     F .text	00000040 iswspace
0000becc g     F .text	000000c4 spi_init
00033b44 g     O .rodata	000000c8 __mprec_tens
00029b20 g     F .text	0000007c alt_tse_get_mac_info_index
00024734 g     F .text	00000044 strtoll
00011d64 g     F .text	00000074 .hidden __fixunsdfsi
00007cd4 g     F .text	000004f0 adc_ramp_test
00030aec g     F .text	00000090 alt_icache_flush
00026438 g     F .text	00000098 alt_avalon_i2c_enable
0003983c g     O .bss	00000004 __malloc_top_pad
000210d8 g     F .text	00000070 __ssrefill_r
0001fdc0 g     F .text	00000044 strtoul
00027a54 g     F .text	0000006c alt_avalon_i2c_int_disable
0000be30 g     F .text	00000024 i2c_remove
00000bec g     F .text	000001fc tcp_ip_process_stack
0001dba0 g     F .text	00000020 _localeconv_r
00024a9c g     F .text	00000034 _strtoull_r
0001e3b4 g     F .text	00000034 __i2b
0001d478 g     F .text	000004a0 __sfvwrite_r
00005d18 g     F .text	00000154 ad9523_status
0002a8ec g     F .text	0000012c alt_tse_phy_wr_mdio_reg
00016504 g     F .text	00000058 _sbrk_r
0002af80 g     F .text	00000698 alt_tse_mac_group_init
0000e2a4 g     F .text	00000374 fpll_calc_params
00023fd0 g     F .text	00000064 _read_r
00025020 g     F .text	00000078 alt_dcache_flush
000379c0 g     O .rwdata	00000004 alt_max_fd
0000eec0 g     F .text	0000039c altera_a10_cdr_lookup_cp_current_pfd
00028c60 g     F .text	00000070 tse_mac_aTxWrite
00010070 g     F .text	0000009c pll_is_enabled
00023a08 g     F .text	000000f0 _fclose_r
000102f0 g     F .text	0000003c iioscope_process_rx
0001cce4 g     F .text	00000028 fflush
0000c7bc g     F .text	0000017c xcvr_setup
00039838 g     O .bss	00000004 __malloc_max_sbrked_mem
00027584 g     F .text	0000020c alt_avalon_i2c_master_receive
00014e48 g     F .text	0000010c .hidden __extendsfdf2
00012b10 g     F .text	000008c0 .hidden __adddf3
0001eac8 g     F .text	00000104 __b2d
0002f63c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
00012400 g     F .text	00000554 .hidden __umoddi3
0002580c g     F .text	000000d4 lseek
0002aae8 g     F .text	000002c8 alt_tse_phy_add_profile_default
00027ac0 g     F .text	00000068 alt_avalon_i2c_int_enable
0002c1d8 g     F .text	00000594 alt_tse_phy_get_cap
0000b3a8 g     F .text	00000048 jesd_write
00037994 g     O .rwdata	00000004 _global_impure_ptr
0001f0bc g     F .text	00000578 _realloc_r
80000000 g       *ABS*	00000000 __alt_exception_stack_pointer
080a35f0 g       *ABS*	00000000 __bss_end
000254f0 g     F .text	000000e4 alt_iic_isr_register
00008648 g     F .text	000001b4 dds_set_frequency
00024368 g     F .text	00000030 strtol_l
0002dcb8 g     F .text	0000026c alt_qspi_controller2_write_block
00031024 g     F .text	0000012c alt_tick
00030238 g     F .text	00000168 alt_msgdma_init
0000d6b4 g     F .text	00000138 atx_pll_round_rate
00011e68 g     F .text	00000598 .hidden __udivdi3
0000e744 g     F .text	000001e8 fpll_set_rate
0002797c g     F .text	00000058 alt_avalon_i2c_int_status_get
00023c6c g     F .text	00000024 _fputwc_r
0002c050 g     F .text	00000188 alt_tse_phy_check_link
00033b1c g     O .rodata	00000028 __mprec_bigtens
0001e190 g     F .text	00000110 __s2b
00014dac g     F .text	0000009c .hidden __floatunsidf
0002d678 g     F .text	000000e4 marvell_cfg_sgmii
0002be8c g     F .text	000001c4 alt_tse_phy_restart_an
0001e84c g     F .text	00000058 __mcmp
000304a8 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
00007080 g     F .text	000000c4 ad9680_test
0001d044 g     F .text	00000014 __fp_lock_all
00009cdc g     F .text	000004a8 parse_board_area
000254a4 g     F .text	0000004c alt_ic_irq_enabled
000081e8 g     F .text	00000044 I2C_Write
080a35d0 g     O .bss	00000020 pphy_profiles
0000ecc0 g     F .text	0000008c altera_a10_cdr_lookup_lf_resistor_pd
00030f88 g     F .text	0000009c alt_alarm_stop
00024398 g     F .text	00000044 strtol
0000c650 g     F .text	00000038 ad_platform_close
000262b8 g     F .text	00000054 alt_avalon_i2c_register_callback
0002630c g     F .text	000000ec alt_avalon_i2c_init
00039854 g     O .bss	00000004 alt_irq_active
00003a44 g     F .text	0000051c network_init
000081c4 g     F .text	00000024 I2C_Init
00004430 g     F .text	00000094 ad9144_spi_write_seq
00011a08 g     F .text	0000007c mem_reading
00000108 g     F .exceptions	000000c8 alt_irq_handler
000365b8 g     O .rwdata	00000028 alt_dev_null
0002f274 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
000021a8 g     F .text	000002d0 udp_checksum
0002bd80 g     F .text	0000010c alt_tse_phy_init
0002db48 g     F .text	00000170 alt_qspi_controller2_erase_block
0000b35c g     F .text	0000004c jesd_read
00010b54 g     F .text	00000098 daq2_deinit
000189dc g     F .text	00000004 __tz_unlock
00030080 g     F .text	000000b0 alt_msgdma_start_prefetcher_with_std_desc_list
00030794 g     F .text	00000048 alt_dcache_flush_all
0001e2a0 g     F .text	00000064 __hi0bits
00014d2c g     F .text	00000080 .hidden __fixdfsi
00014fa8 g     F .text	00000014 calloc
000073c8 g     F .text	00000068 adc_read
000379f0 g       *ABS*	00000000 __ram_rwdata_end
000379b8 g     O .rwdata	00000008 alt_dev_list
00025eac g     F .text	000000f8 write
0001ef10 g     F .text	000000cc _putc_r
00026c54 g     F .text	0000004c alt_avalon_i2c_check_arblost
00028a78 g     F .text	00000020 alt_timestamp_freq
000379a4 g     O .rwdata	00000008 _tzname
00027a18 g     F .text	0000003c alt_avalon_i2c_int_clear
000379ac g     O .rwdata	00000004 environ
00035bb0 g       *ABS*	00000000 __ram_rodata_end
0002525c g     F .text	000000b0 fstat
00024d18 g     F .text	000000e0 .hidden __ledf2
0002d84c g     F .text	00000078 DP83848C_link_status_read
000379cc g     O .rwdata	00000008 alt_avalon_i2c_list
0001e5e4 g     F .text	00000124 __pow5mult
000224f8 g     F .text	00001220 ___vfiprintf_internal_r
000010ac g     F .text	00000024 net_deinitialize
00012ab8 g     F .text	00000058 .hidden __umodsi3
000057ec g     F .text	000000f0 ad9523_spi_read
0000c1e4 g     F .text	00000028 gpio_get_direction
00011bec g     F .text	000000f0 cmp_s
0002f694 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
080a35f0 g       *ABS*	00000000 end
0000fb94 g     F .text	00000114 altera_a10_calib_tx_pll
000250c4 g     F .text	00000034 alt_dev_reg
0001f890 g     F .text	00000078 _siscanf_r
0000d494 g     F .text	00000220 atx_calc_params
0000ff08 g     F .text	00000168 pll_calibration_check
00005448 g     F .text	00000228 ad9144_short_pattern_test
00028dfc g     F .text	000001b4 alt_tse_phy_add_profile
00006f50 g     F .text	0000007c ad9680_spi_write
00027e30 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000263f8 g     F .text	00000040 alt_avalon_i2c_open
0003168c g       *ABS*	00000000 __CTOR_LIST__
7ffe0000 g       *ABS*	00000000 __alt_stack_pointer
00026dd4 g     F .text	000000e8 alt_avalon_i2c_master_tx
000287b8 g     F .text	0000007c alt_avalon_timer_sc_init
00014f54 g     F .text	00000054 .hidden __clzsi2
0002851c g     F .text	00000224 altera_avalon_jtag_uart_write
0001d034 g     F .text	00000004 __sfp_lock_acquire
0001ddb0 g     F .text	000000e8 memchr
00018f1c g     F .text	00001fb4 ___vfprintf_internal_r
0001655c g     F .text	00000054 _sprintf_r
0001d188 g     F .text	000002f0 _free_r
000259a4 g     F .text	0000022c alt_printf
0000c0b0 g     F .text	000000b0 gpio_get
00008f50 g     F .text	00000048 dmac_write
000338f8 g     O .rodata	00000180 _ctype_b
000075fc g     F .text	0000011c adc_set_delay
00015200 g     F .text	00000020 __locale_mb_cur_max
000314ec g     F .text	0000016c __call_exitprocs
00016480 g     F .text	00000074 __srget_r
000034d0 g     F .text	00000024 get_net_context
0000c630 g     F .text	00000020 ad_platform_init
0000f25c g     F .text	000002a8 altera_a10_cdr_calc_params
00008590 g     F .text	0000006c dac_read
00020fe8 g     F .text	000000f0 _sungetc_r
000261cc g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00015f5c g     F .text	000003c0 mktime
0003799c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
0000ac00 g     F .text	0000075c build_FRU_blob
00039874 g     O .bss	00000004 _alt_tick_rate
000246d0 g     F .text	00000034 _strtoll_r
00027790 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
00027bb8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0001e708 g     F .text	00000144 __lshift
00011a84 g     F .text	00000048 mem_testing
00006220 g     F .text	00000c60 ad9523_setup
00039878 g     O .bss	00000008 _alt_nticks
0002f134 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
0002aa18 g     F .text	000000d0 alt_tse_phy_rd_mdio_reg
00025c3c g     F .text	000000fc read
00025fdc g     F .text	000000e0 alt_sys_init
0001fe04 g     F .text	000001c0 __ssprint_r
0000d01c g     F .text	0000008c atx_lookup_band
00003604 g     F .text	00000334 ethernet_init
00010bec g     F .text	00000bb0 daq2_init
000313e0 g     F .text	0000010c __register_exitproc
0003986c g     O .bss	00000001 phy_profile_count
0001fa44 g     F .text	000000c4 strncmp
00007144 g     F .text	0000023c ad9680_setup
00029ab4 g     F .text	0000006c alt_tse_get_mac_group_index
00026ff8 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0000c43c g     F .text	000000a8 ad_gpio_get_range
0001e3e8 g     F .text	000001fc __multiply
0000c1b8 g     F .text	0000002c gpio_direction_output
000003a4 g     F .text	00000044 swap32
000281a8 g     F .text	00000068 altera_avalon_jtag_uart_close
0000c20c g     F .text	000000e8 gpio_set_value
00035bb0 g       *ABS*	00000000 __ram_rwdata_start
0003168c g       *ABS*	00000000 __ram_rodata_start
00033a88 g     O .rodata	00000060 __month_lengths
0000c37c g     F .text	000000c0 ad_gpio_set_range
080a2bd0 g     O .bss	00000028 __malloc_current_mallinfo
00003f60 g     F .text	00000320 network_task
0001ebcc g     F .text	00000148 __d2b
00008324 g     F .text	0000026c dac_buffer_load
0002a894 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
000058dc g     F .text	000000d4 ad9523_spi_write
00027ccc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001fd5c g     F .text	00000034 _strtoul_r
000312f8 g     F .text	000000a0 alt_get_fd
00011988 g     F .text	00000080 mem_writing
0003063c g     F .text	00000158 alt_busy_sleep
0000048c g     F .text	000000a8 tse_mmd_readreg
000239b0 g     F .text	00000058 _close_r
00001824 g     F .text	000000cc icmp_checksum
0002cd2c g     F .text	00000320 alt_tse_phy_get_common_speed
0002f5e4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
00008f04 g     F .text	0000004c dmac_read
000059ec g     F .text	00000250 ad9523_vco_out_map
0002686c g     F .text	000000ac alt_avalon_i2c_rx_read_available
00027d8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080a35f0 g       *ABS*	00000000 __alt_stack_base
00027ddc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0003986d g     O .bss	00000001 mac_group_count
0000b828 g     F .text	00000208 axi_jesd204_tx_status_read
0002f6ec g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
0001aff8 g     F .text	00000158 __swsetup_r
000133d0 g     F .text	000008cc .hidden __divdf3
0001cf14 g     F .text	000000fc __sfp
0001ee30 g     F .text	0000006c __copybits
00036170 g     O .rwdata	00000408 __malloc_av_
0001d040 g     F .text	00000004 __sinit_lock_release
00013d7c g     F .text	000006dc .hidden __muldf3
00000680 g     F .text	00000090 phy_cfg
0001f908 g     F .text	00000054 __sread
0002b618 g     F .text	00000400 alt_tse_mac_get_phy
00010368 g     F .text	00000150 iioscope_process
0000c194 g     F .text	00000024 gpio_direction_input
0000c4e4 g     F .text	000000bc do_div
00031174 g     F .text	00000184 alt_find_file
00025134 g     F .text	000000a4 alt_dev_llist_insert
0002595c g     F .text	00000024 __malloc_lock
00025d90 g     F .text	000000b0 sbrk
000167fc g     F .text	00001fb4 ___svfprintf_internal_r
00026ca0 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
00026c08 g     F .text	0000004c alt_avalon_i2c_check_nack
0001cc84 g     F .text	00000060 _fflush_r
00029d48 g     F .text	0000008c alt_tse_mac_set_duplex
00000aec g     F .text	00000024 udp_initialise
00030ab8 g     F .text	00000034 alt_flash_device_register
0000eaf8 g     F .text	00000054 altera_a10_cdr_lookup_vco_speed
00014fbc g     F .text	000000bc _calloc_r
000379e0 g     O .rwdata	00000008 alt_flash_dev_list
00024b00 g     F .text	00000044 strtoull
000189d8 g     F .text	00000004 __tz_lock
0000fcf8 g     F .text	0000004c a10_pll_write
00039830 g       *ABS*	00000000 __bss_start
00015bb0 g     F .text	000000fc memset
000301e0 g     F .text	00000058 alt_msgdma_open
00011b84 g     F .text	00000068 main
00026bd4 g     F .text	00000034 alt_avalon_i2c_master_target_set
00039860 g     O .bss	00000004 alt_envp
00039834 g     O .bss	00000004 __malloc_max_total_mem
0002f9cc g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
00027d2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000be90 g     F .text	0000003c i2c_read
00023938 g     F .text	00000014 __swbuf
0000c728 g     F .text	0000004c xcvr_read
000279d4 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0000ec00 g     F .text	0000004c altera_a10_cdr_lookup_cp_current_pd
0000feb0 g     F .text	00000058 altera_a10_release_arbitration
0001fa3c g     F .text	00000008 __sclose
7ffe0000 g       *ABS*	00000000 __alt_heap_limit
000087fc g     F .text	00000168 dds_set_phase
00023af8 g     F .text	00000010 fclose
00024334 g     F .text	00000034 _strtol_r
00028834 g     F .text	00000098 alt_timestamp_start
0001da70 g     F .text	00000100 _findenv_r
0001b3bc g     F .text	000016a8 _dtoa_r
0002fdc0 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
0001527c g     F .text	000007d8 _malloc_r
0001afc8 g     F .text	00000030 __ascii_wctomb
00028cd0 g     F .text	00000088 tse_mac_SwReset
0001019c g     F .text	00000090 pll_disable
00008ae4 g     F .text	00000114 dac_data_src_sel
000379c4 g     O .rwdata	00000004 alt_errno
0002f824 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
000096e4 g     F .text	00000248 six2ascii
00022180 g     F .text	000000d4 __submore
0000d7ec g     F .text	000002b4 atx_pll_set_rate
000251fc g     F .text	00000024 __env_unlock
0001d918 g     F .text	000000a4 _fwalk
00015a54 g     F .text	00000028 _mbtowc_r
0001efdc g     F .text	000000e0 putc
00012954 g     F .text	00000088 .hidden __divsi3
00029a00 g     F .text	00000048 alt_tse_mac_set_common_speed
0001d06c g     F .text	0000011c _malloc_trim_r
0003168c g       *ABS*	00000000 __CTOR_END__
0000cae8 g     F .text	000003c4 dump_registers
00000710 g     F .text	0000008c hw_ethernet_reset
00004280 g     F .text	00000088 ad9144_spi_read
00003494 g     F .text	0000003c close_all_sockets
000189e0 g     F .text	0000000c _tzset_unlocked
00016614 g     F .text	000000cc strcmp
0000c2f4 g     F .text	00000088 gpio_get_value
0001f818 g     F .text	00000078 siscanf
0003168c g       *ABS*	00000000 __flash_rodata_start
000044c4 g     F .text	0000032c ad9144_setup_jesd204_link
0003168c g       *ABS*	00000000 __DTOR_LIST__
0001fd90 g     F .text	00000030 strtoul_l
0000ec4c g     F .text	0000003c altera_a10_cdr_lookup_clklow_div
00024c98 g     F .text	00000080 .hidden __nedf2
00011dd8 g     F .text	00000090 .hidden __fixunsdfdi
00025fa4 g     F .text	00000038 alt_irq_init
000299c0 g     F .text	00000040 alt_tse_mac_get_common_speed
00025d38 g     F .text	00000058 alt_release_fd
000059b0 g     F .text	0000003c ad9523_io_update
0003046c g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
000082ec g     F .text	00000038 SPI_Write
000165b0 g     F .text	00000064 sprintf
000335ab g     O .rodata	00000100 .hidden __clz_tab
0000c938 g     F .text	000000f0 xcvr_getconfig
00039830 g     O .bss	00000004 _PathLocale
00031398 g     F .text	00000014 atexit
00008964 g     F .text	00000180 dds_set_scale
0002394c g     F .text	00000064 _write_r
00000a84 g     F .text	00000068 arp_initialise
00002478 g     F .text	00000778 udp_send
00015248 g     F .text	00000014 setlocale
0002f78c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
0000f504 g     F .text	00000150 altera_a10_cdr_pll_round_rate
080a2e70 g     O .bss	00000640 frame
0002d920 g     F .text	000000a0 PEF7071_link_status_read
00005f50 g     F .text	000002d0 ad9523_init
00037998 g     O .rwdata	00000004 _impure_ptr
00008f98 g     F .text	0000038c dmac_start_transaction
00039858 g     O .bss	00000004 alt_argc
0001ca64 g     F .text	00000220 __sflush_r
00023e68 g     F .text	000000b0 _mbrtowc_r
0000355c g     F .text	000000a8 ethernet_enable
00039864 g     O .bss	00000004 altera_avalon_timer_ts_base
0003083c g     F .text	00000060 _do_dtors
00026b9c g     F .text	00000038 alt_avalon_i2c_master_target_get
00004aa0 g     F .text	000005f4 ad9144_setup
00026aac g     F .text	000000f0 alt_avalon_i2c_send_address
0000be08 g     F .text	00000028 i2c_init
0001f650 g     F .text	000001c8 __srefill_r
00004308 g     F .text	0000007c ad9144_spi_write
000010d0 g     F .text	0000011c net_initialize
00000020 g       .exceptions	00000000 alt_irq_entry
00015a7c g     F .text	00000044 __ascii_mbtowc
00005094 g     F .text	0000013c ad9144_dac_calibrate
0001ea64 g     F .text	00000064 __ulp
0001d058 g     F .text	00000014 __fp_unlock_all
000379b0 g     O .rwdata	00000008 alt_fs_list
0002e10c g     F .text	000000ac alt_qspi_controller2_read
0000b490 g     F .text	0000009c jesd_sysref_control
0000079c g     F .text	00000024 ethernet_configure
000034f4 g     F .text	00000034 register_rx_dma
00039844 g     O .bss	00000004 _timezone
00006e80 g     F .text	00000048 ad9523_remove
000106d8 g     F .text	0000047c fmcdaq2_reconfig
00021240 g     F .text	00000f40 __ssvfiscanf_r
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001dbc0 g     F .text	00000020 localeconv
000288cc g     F .text	000001ac alt_timestamp
000085fc g     F .text	0000004c dac_write
0001010c g     F .text	00000090 pll_enable
0000a184 g     F .text	000004dc parse_multiboard_area
0001dbe0 g     F .text	00000094 __swhatbuf_r
00027c68 g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002cb84 g     F .text	000001a8 alt_tse_phy_set_adv_10
00011908 g     F .text	00000080 daq2_transaction_dac
000264d0 g     F .text	0000004c alt_avalon_i2c_disable
00025340 g     F .text	00000050 alt_ic_isr_register
0000bfc4 g     F .text	000000ec spi_write_and_read
00004384 g     F .text	000000ac ad9144_spi_check_status
000379f0 g       *ABS*	00000000 _edata
0000b3f0 g     F .text	000000a0 jesd_setup
0000c5a0 g     F .text	00000090 ad_reg_write_16
080a35f0 g       *ABS*	00000000 _end
000309fc g     F .text	00000068 alt_flash_open_dev
0002ba18 g     F .text	00000240 alt_tse_mac_associate_phy
00023b08 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00028210 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00018a10 g     F .text	000004e8 _tzset_unlocked_r
0000c6c8 g     F .text	00000060 ad_pow2
00002e98 g     F .text	00000024 ip_task
0000ed4c g     F .text	00000174 altera_a10_cdr_lookup_lf_resistor_pfd
000007c0 g     F .text	00000024 tx_ethernet_isr
0002651c g     F .text	000000b0 alt_avalon_i2c_master_config_get
00007718 g     F .text	00000380 adc_delay_calibrate
00025418 g     F .text	0000008c alt_ic_irq_disable
0002df24 g     F .text	000001e8 alt_qspi_controller2_write
0001f964 g     F .text	0000007c __swrite
000379a0 g     O .rwdata	00000004 __malloc_trim_threshold
000313ac g     F .text	00000034 exit
0001d9bc g     F .text	000000b4 _fwalk_reent
0002fb64 g     F .text	00000110 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
0001e8a4 g     F .text	000001c0 __mdiff
0001032c g     F .text	0000003c iioscope_process_ctrl_rx
0000d0a8 g     F .text	00000054 atx_lookup_tank
00030a64 g     F .text	00000054 alt_flash_close_dev
000129dc g     F .text	00000078 .hidden __modsi3
00028dac g     F .text	00000050 tse_mac_setGMIImode
0002d594 g     F .text	000000e4 marvell_cfg_gmii
7ffe0000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0001d038 g     F .text	00000004 __sfp_lock_release
0002f304 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
0002bc58 g     F .text	00000128 alt_tse_phy_cfg_pcs
00024034 g     F .text	000000d0 __sccl
0002672c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00003528 g     F .text	00000034 register_tx_dma
0000c160 g     F .text	00000034 gpio_remove
000337f7 g     O .rodata	00000101 _ctype_
00009324 g     F .text	00000068 calc_zero_checksum
000269c0 g     F .text	000000ec alt_avalon_i2c_cmd_write
00024df8 g     F .text	00000054 .hidden __unorddf2
0002f1e4 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
0002e1b8 g     F .text	00000258 altera_qspi_controller2_init
0000f654 g     F .text	00000540 altera_a10_cdr_pll_set_rate
0000ec88 g     F .text	00000038 altera_a10_cdr_lookup_fastlock
00031658 g     F .text	00000034 _exit
0000c688 g     F .text	00000040 ad_uart_read
000304e4 g     F .text	00000158 alt_alarm_start
000104dc g     F .text	000001fc memory_testing
00011cdc g     F .text	00000060 .hidden __muldi3
80000000 g       *ABS*	00000000 __alt_mem_qspi_controller2_0_avl_mem
0000dd48 g     F .text	0000055c fpll_lookup_cp_current
0001dc74 g     F .text	0000013c __smakebuf_r
000379d8 g     O .rwdata	00000008 alt_msgdma_list
0001676c g     F .text	00000090 strlen
00015220 g     F .text	00000008 __locale_ctype_ptr_l
00030e34 g     F .text	00000154 open
00013c9c g     F .text	000000e0 .hidden __gedf2
0000dc50 g     F .text	000000f8 fpll_lookup_lf_resistance
00025bd0 g     F .text	00000030 alt_putchar
00008bf8 g     F .text	00000100 dac_setup
0001b150 g     F .text	00000074 div
00005218 g     F .text	00000230 ad9144_status
000224e0 g     F .text	00000018 __sprint_r
00028bf0 g     F .text	00000070 tse_mac_aRxRead
0002530c g     F .text	00000034 alt_icache_flush_all
00008270 g     F .text	00000044 SPI_Init
00009400 g     F .text	000002e4 ascii2six
00000a0c g     F .text	00000078 tx_dma_rearm
00025390 g     F .text	00000088 alt_ic_irq_enable
0001aed0 g     F .text	00000018 __vfprintf_internal
0000eb4c g     F .text	000000b4 altera_a10_cdr_lookup_vco_speed_fix
00007b50 g     F .text	00000184 adc_pn_mon
0001afa8 g     F .text	00000020 _wctomb_r
000251d8 g     F .text	00000024 __env_lock
00029c68 g     F .text	000000e0 alt_tse_mac_set_speed
00014458 g     F .text	000008d4 .hidden __subdf3
0000992c g     F .text	000003b0 parse_string
000189ec g     F .text	00000024 tzset
000082b4 g     F .text	00000038 SPI_Read
0000e618 g     F .text	0000012c fpll_round_rate
0001e304 g     F .text	000000b0 __lo0bits
000051d0 g     F .text	00000048 ad9144_remove
000187b0 g     F .text	00000228 __tzcalc_limits
000379e8 g     O .rwdata	00000008 alt_alarm_list
00022254 g     F .text	00000184 _ungetc_r
000307dc g     F .text	00000060 _do_ctors
0002c930 g     F .text	00000254 alt_tse_phy_set_adv_100
00024bec g     F .text	000000ac wcrtomb
00024f50 g     F .text	000000d0 close
00036004 g     O .rwdata	0000016c __global_locale
00027c1c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00007430 g     F .text	00000048 adc_write
0002574c g     F .text	00000084 alt_load
00026ebc g     F .text	0000013c alt_avalon_i2c_master_rx
00029a48 g     F .text	0000006c alt_tse_get_system_index
00011b54 g     F .text	00000030 exception_handler
00023c90 g     F .text	0000007c fputwc
0001db8c g     F .text	0000000c __gettzinfo
0001526c g     F .text	00000010 free
0001d03c g     F .text	00000004 __sinit_lock_acquire
00003938 g     F .text	0000010c phy_init
00000290 g     F .text	000000d8 fcs_crc32
0001e07c g     F .text	00000114 __multadd
0001e058 g     F .text	00000024 _Bfree
00028a98 g     F .text	00000030 no_printf
0001db70 g     F .text	0000001c _getenv_r
0000ceac g     F .text	00000170 xcvr_finalize_lane_rate_change



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_mcu_subsystem_ram_0+0x77fe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	061ffff4 	movhi	et,32767
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffc15 	stw	r2,-16(fp)

  return active;
 124:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0ffff17 	ldw	r3,-4(fp)
 13c:	e0bffe17 	ldw	r2,-8(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001126 	beq	r2,zero,18c <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	e0bffd17 	ldw	r2,-12(fp)
 14c:	100690fa 	slli	r3,r2,3
 150:	008202b4 	movhi	r2,2058
 154:	1885883a 	add	r2,r3,r2
 158:	10cd2c17 	ldw	r3,13488(r2)
 15c:	e0bffd17 	ldw	r2,-12(fp)
 160:	100890fa 	slli	r4,r2,3
 164:	008202b4 	movhi	r2,2058
 168:	2085883a 	add	r2,r4,r2
 16c:	108d2d17 	ldw	r2,13492(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bffb15 	stw	r2,-20(fp)
  return active;
 184:	e0bffb17 	ldw	r2,-20(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 18c:	e0bffe17 	ldw	r2,-8(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 1a4:	003fe406 	br	138 <__alt_mem_mcu_subsystem_ram_0+0x77fe0138>

    } while (1);

    active = alt_irq_pending ();
 1a8:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1ac:	e0bfff17 	ldw	r2,-4(fp)
 1b0:	103fde1e 	bne	r2,zero,12c <__alt_mem_mcu_subsystem_ram_0+0x77fe012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bfff17 	ldw	r2,-4(fp)
 1f0:	1004d0ba 	srli	r2,r2,2
 1f4:	108007cc 	andi	r2,r2,31
 1f8:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a7b717 	ldw	r2,-24868(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a7b717 	ldw	r2,-24868(gp)
 210:	e0ffff17 	ldw	r3,-4(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17ffd17 	ldw	r5,-12(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_mcu_subsystem_ram_0+0x77fe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06dfffb4 	movhi	sp,32766
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     260:	d6be6514 	ori	gp,gp,63892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     268:	10a60c14 	ori	r2,r2,38960

    movhi r3, %hi(__bss_end)
     26c:	00c202b4 	movhi	r3,2058
    ori r3, r3, %lo(__bss_end)
     270:	18cd7c14 	ori	r3,r3,13808

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_mcu_subsystem_ram_0+0x77fe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	002574c0 	call	2574c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00258e00 	call	258e0 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_mcu_subsystem_ram_0+0x77fe028c>

00000290 <fcs_crc32>:
#include "crc.h"


// used for calculating checksum in ethernet frame
uint32_t fcs_crc32(uint8_t *buffer, uint16_t size)
{
     290:	defff804 	addi	sp,sp,-32
     294:	df000715 	stw	fp,28(sp)
     298:	df000704 	addi	fp,sp,28
     29c:	e13ffa15 	stw	r4,-24(fp)
     2a0:	2805883a 	mov	r2,r5
     2a4:	e0bff90d 	sth	r2,-28(fp)
   uint32_t byte, crc = 0xFFFFFFFF, mask = 0xFFFFFFFF;
     2a8:	00bfffc4 	movi	r2,-1
     2ac:	e0bfff15 	stw	r2,-4(fp)
     2b0:	00bfffc4 	movi	r2,-1
     2b4:	e0bffc15 	stw	r2,-16(fp)
   int i = 0, j;
     2b8:	e03ffe15 	stw	zero,-8(fp)
   while (i < size)
     2bc:	00002106 	br	344 <fcs_crc32+0xb4>
   {
      byte = buffer[i];
     2c0:	e0bffe17 	ldw	r2,-8(fp)
     2c4:	e0fffa17 	ldw	r3,-24(fp)
     2c8:	1885883a 	add	r2,r3,r2
     2cc:	10800003 	ldbu	r2,0(r2)
     2d0:	10803fcc 	andi	r2,r2,255
     2d4:	e0bffb15 	stw	r2,-20(fp)
      crc = crc ^ byte;
     2d8:	e0ffff17 	ldw	r3,-4(fp)
     2dc:	e0bffb17 	ldw	r2,-20(fp)
     2e0:	1884f03a 	xor	r2,r3,r2
     2e4:	e0bfff15 	stw	r2,-4(fp)
      for (j = 7; j >= 0; j--)
     2e8:	008001c4 	movi	r2,7
     2ec:	e0bffd15 	stw	r2,-12(fp)
     2f0:	00000f06 	br	330 <fcs_crc32+0xa0>
      {
         mask = (uint32_t)(-((int)(crc & (uint32_t)0x1)));
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	1080004c 	andi	r2,r2,1
     2fc:	0085c83a 	sub	r2,zero,r2
     300:	e0bffc15 	stw	r2,-16(fp)
         crc = (crc >> 1) ^ (0xEDB88320 & mask);
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	1006d07a 	srli	r3,r2,1
     30c:	e13ffc17 	ldw	r4,-16(fp)
     310:	00bb6e74 	movhi	r2,60857
     314:	10a0c804 	addi	r2,r2,-31968
     318:	2084703a 	and	r2,r4,r2
     31c:	1884f03a 	xor	r2,r3,r2
     320:	e0bfff15 	stw	r2,-4(fp)
      for (j = 7; j >= 0; j--)
     324:	e0bffd17 	ldw	r2,-12(fp)
     328:	10bfffc4 	addi	r2,r2,-1
     32c:	e0bffd15 	stw	r2,-12(fp)
     330:	e0bffd17 	ldw	r2,-12(fp)
     334:	103fef0e 	bge	r2,zero,2f4 <__alt_mem_mcu_subsystem_ram_0+0x77fe02f4>
      }
      i++;
     338:	e0bffe17 	ldw	r2,-8(fp)
     33c:	10800044 	addi	r2,r2,1
     340:	e0bffe15 	stw	r2,-8(fp)
   while (i < size)
     344:	e0bff90b 	ldhu	r2,-28(fp)
     348:	e0fffe17 	ldw	r3,-8(fp)
     34c:	18bfdc16 	blt	r3,r2,2c0 <__alt_mem_mcu_subsystem_ram_0+0x77fe02c0>
   }
   return ~crc;
     350:	e0bfff17 	ldw	r2,-4(fp)
     354:	0084303a 	nor	r2,zero,r2
}
     358:	e037883a 	mov	sp,fp
     35c:	df000017 	ldw	fp,0(sp)
     360:	dec00104 	addi	sp,sp,4
     364:	f800283a 	ret

00000368 <swap16>:
#include "iioscope.h"

static network_ctx_t network_ctx __attribute__((aligned (4)));

uint16_t swap16(uint16_t value)
{
     368:	defffe04 	addi	sp,sp,-8
     36c:	df000115 	stw	fp,4(sp)
     370:	df000104 	addi	fp,sp,4
     374:	2005883a 	mov	r2,r4
     378:	e0bfff0d 	sth	r2,-4(fp)
   return ((value >> 8) | (value << 8));
     37c:	e0bfff0b 	ldhu	r2,-4(fp)
     380:	1004d23a 	srli	r2,r2,8
     384:	1007883a 	mov	r3,r2
     388:	e0bfff0b 	ldhu	r2,-4(fp)
     38c:	1004923a 	slli	r2,r2,8
     390:	1884b03a 	or	r2,r3,r2
}
     394:	e037883a 	mov	sp,fp
     398:	df000017 	ldw	fp,0(sp)
     39c:	dec00104 	addi	sp,sp,4
     3a0:	f800283a 	ret

000003a4 <swap32>:

uint32_t swap32(uint32_t value)
{
     3a4:	defffe04 	addi	sp,sp,-8
     3a8:	df000115 	stw	fp,4(sp)
     3ac:	df000104 	addi	fp,sp,4
     3b0:	e13fff15 	stw	r4,-4(fp)
   // inp: d3 d2 d1 d0
   // out: d0 d1 d2 d3
   return ((value << 24) & (0xff000000)) | ((value << 8) & 0x00ff0000) | ((value > 8) & 0x0000ff00) | ((value >> 24) & 0x000000ff);
     3b4:	e0bfff17 	ldw	r2,-4(fp)
     3b8:	1006963a 	slli	r3,r2,24
     3bc:	e0bfff17 	ldw	r2,-4(fp)
     3c0:	1004923a 	slli	r2,r2,8
     3c4:	10803fec 	andhi	r2,r2,255
     3c8:	1886b03a 	or	r3,r3,r2
     3cc:	e0bfff17 	ldw	r2,-4(fp)
     3d0:	1004d63a 	srli	r2,r2,24
     3d4:	1884b03a 	or	r2,r3,r2
}
     3d8:	e037883a 	mov	sp,fp
     3dc:	df000017 	ldw	fp,0(sp)
     3e0:	dec00104 	addi	sp,sp,4
     3e4:	f800283a 	ret

000003e8 <tse_mmd_writereg>:

//alt_sgdma_descriptor eth1_rx_descriptor;


void tse_mmd_writereg(np_tse_mac *pmac, alt_u32 mdio, alt_u32 mmd_addr, alt_u32 mmd_reg, alt_u32 mmd_value)
{
     3e8:	defffb04 	addi	sp,sp,-20
     3ec:	df000415 	stw	fp,16(sp)
     3f0:	df000404 	addi	fp,sp,16
     3f4:	e13fff15 	stw	r4,-4(fp)
     3f8:	e17ffe15 	stw	r5,-8(fp)
     3fc:	e1bffd15 	stw	r6,-12(fp)
     400:	e1fffc15 	stw	r7,-16(fp)
   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0d, mmd_addr);
     404:	e0bffe17 	ldw	r2,-8(fp)
     408:	100491fa 	slli	r2,r2,7
     40c:	10808d04 	addi	r2,r2,564
     410:	e0ffff17 	ldw	r3,-4(fp)
     414:	1885883a 	add	r2,r3,r2
     418:	e0fffd17 	ldw	r3,-12(fp)
     41c:	10c0002d 	sthio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0e, mmd_reg);
     420:	e0bffe17 	ldw	r2,-8(fp)
     424:	100491fa 	slli	r2,r2,7
     428:	10808e04 	addi	r2,r2,568
     42c:	e0ffff17 	ldw	r3,-4(fp)
     430:	1885883a 	add	r2,r3,r2
     434:	e0fffc17 	ldw	r3,-16(fp)
     438:	10c0002d 	sthio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0d, mmd_addr | 0x4000);
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	100491fa 	slli	r2,r2,7
     444:	10808d04 	addi	r2,r2,564
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	1885883a 	add	r2,r3,r2
     450:	e0fffd17 	ldw	r3,-12(fp)
     454:	18d00014 	ori	r3,r3,16384
     458:	10c0002d 	sthio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0e, 0x0001);
     45c:	e0bffe17 	ldw	r2,-8(fp)
     460:	100491fa 	slli	r2,r2,7
     464:	10808e04 	addi	r2,r2,568
     468:	e0ffff17 	ldw	r3,-4(fp)
     46c:	1885883a 	add	r2,r3,r2
     470:	00c00044 	movi	r3,1
     474:	10c0002d 	sthio	r3,0(r2)
}
     478:	0001883a 	nop
     47c:	e037883a 	mov	sp,fp
     480:	df000017 	ldw	fp,0(sp)
     484:	dec00104 	addi	sp,sp,4
     488:	f800283a 	ret

0000048c <tse_mmd_readreg>:

uint32_t tse_mmd_readreg(np_tse_mac *pmac, alt_u32 mdio, alt_u32 mmd_addr, alt_u32 mmd_reg)
{
     48c:	defffa04 	addi	sp,sp,-24
     490:	df000515 	stw	fp,20(sp)
     494:	df000504 	addi	fp,sp,20
     498:	e13ffe15 	stw	r4,-8(fp)
     49c:	e17ffd15 	stw	r5,-12(fp)
     4a0:	e1bffc15 	stw	r6,-16(fp)
     4a4:	e1fffb15 	stw	r7,-20(fp)
   uint32_t result;

   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0d, mmd_addr);
     4a8:	e0bffd17 	ldw	r2,-12(fp)
     4ac:	100491fa 	slli	r2,r2,7
     4b0:	10808d04 	addi	r2,r2,564
     4b4:	e0fffe17 	ldw	r3,-8(fp)
     4b8:	1885883a 	add	r2,r3,r2
     4bc:	e0fffc17 	ldw	r3,-16(fp)
     4c0:	10c0002d 	sthio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0e, mmd_reg);
     4c4:	e0bffd17 	ldw	r2,-12(fp)
     4c8:	100491fa 	slli	r2,r2,7
     4cc:	10808e04 	addi	r2,r2,568
     4d0:	e0fffe17 	ldw	r3,-8(fp)
     4d4:	1885883a 	add	r2,r3,r2
     4d8:	e0fffb17 	ldw	r3,-20(fp)
     4dc:	10c0002d 	sthio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0d, mmd_addr | 0x8000);
     4e0:	e0bffd17 	ldw	r2,-12(fp)
     4e4:	100491fa 	slli	r2,r2,7
     4e8:	10808d04 	addi	r2,r2,564
     4ec:	e0fffe17 	ldw	r3,-8(fp)
     4f0:	1885883a 	add	r2,r3,r2
     4f4:	e0fffc17 	ldw	r3,-16(fp)
     4f8:	18e00014 	ori	r3,r3,32768
     4fc:	10c0002d 	sthio	r3,0(r2)
   result = IORD_ALTERA_TSEMAC_MDIO(pmac, mdio, 0x0e);
     500:	e0bffd17 	ldw	r2,-12(fp)
     504:	100491fa 	slli	r2,r2,7
     508:	10808e04 	addi	r2,r2,568
     50c:	e0fffe17 	ldw	r3,-8(fp)
     510:	1885883a 	add	r2,r3,r2
     514:	1080002b 	ldhuio	r2,0(r2)
     518:	10bfffcc 	andi	r2,r2,65535
     51c:	e0bfff15 	stw	r2,-4(fp)


   return result;
     520:	e0bfff17 	ldw	r2,-4(fp)
}
     524:	e037883a 	mov	sp,fp
     528:	df000017 	ldw	fp,0(sp)
     52c:	dec00104 	addi	sp,sp,4
     530:	f800283a 	ret

00000534 <phy_ethernet_reset>:


void phy_ethernet_reset(uint32_t reset)
{
     534:	defffc04 	addi	sp,sp,-16
     538:	dfc00315 	stw	ra,12(sp)
     53c:	df000215 	stw	fp,8(sp)
     540:	df000204 	addi	fp,sp,8
     544:	e13ffe15 	stw	r4,-8(fp)
   uint32_t direction = IORD_ALTERA_AVALON_PIO_DIRECTION(GPIO_BASE);
     548:	00a20234 	movhi	r2,34824
     54c:	10a64937 	ldwio	r2,-26332(r2)
     550:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALTERA_AVALON_PIO_DIRECTION(GPIO_BASE, direction | (1<<31));
     554:	e0bfff17 	ldw	r2,-4(fp)
     558:	10a00034 	orhi	r2,r2,32768
     55c:	1007883a 	mov	r3,r2
     560:	00a20234 	movhi	r2,34824
     564:	10e64935 	stwio	r3,-26332(r2)

   if(reset == 0)
     568:	e0bffe17 	ldw	r2,-8(fp)
     56c:	1000061e 	bne	r2,zero,588 <phy_ethernet_reset+0x54>
   {
      IOWR_ALTERA_AVALON_PIO_SET_BITS(GPIO_BASE, (1<<31));
     570:	00e00034 	movhi	r3,32768
     574:	00a20234 	movhi	r2,34824
     578:	10e64c35 	stwio	r3,-26320(r2)
      usleep(1000); // 10ms
     57c:	0100fa04 	movi	r4,1000
     580:	0025e400 	call	25e40 <usleep>
   else
   {
      usleep(1000); // 10ms
      IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(GPIO_BASE, (1<<31));
   }
}
     584:	00000506 	br	59c <phy_ethernet_reset+0x68>
      usleep(1000); // 10ms
     588:	0100fa04 	movi	r4,1000
     58c:	0025e400 	call	25e40 <usleep>
      IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(GPIO_BASE, (1<<31));
     590:	00e00034 	movhi	r3,32768
     594:	00a20234 	movhi	r2,34824
     598:	10e64d35 	stwio	r3,-26316(r2)
}
     59c:	0001883a 	nop
     5a0:	e037883a 	mov	sp,fp
     5a4:	dfc00117 	ldw	ra,4(sp)
     5a8:	df000017 	ldw	fp,0(sp)
     5ac:	dec00204 	addi	sp,sp,8
     5b0:	f800283a 	ret

000005b4 <link_status_read>:
  * |    1  | 1: 1000 Mbps link                                                      |
  * |    0  | 1: Full Duplex                    0: Half Duplex                       |
  * ----------------------------------------------------------------------------------
  */
static alt_u32 link_status_read(np_tse_mac *pmac)
{
     5b4:	defffc04 	addi	sp,sp,-16
     5b8:	df000315 	stw	fp,12(sp)
     5bc:	df000304 	addi	fp,sp,12
     5c0:	e13ffd15 	stw	r4,-12(fp)
   alt_u32 result = 0;
     5c4:	e03fff15 	stw	zero,-4(fp)
   alt_u32 status;

   status = IORD(&pmac->mdio0, 1);
     5c8:	e0bffd17 	ldw	r2,-12(fp)
     5cc:	10808004 	addi	r2,r2,512
     5d0:	10800104 	addi	r2,r2,4
     5d4:	10800037 	ldwio	r2,0(r2)
     5d8:	e0bffe15 	stw	r2,-8(fp)
   if(status == 0xffff)
     5dc:	e0fffe17 	ldw	r3,-8(fp)
     5e0:	00bfffd4 	movui	r2,65535
     5e4:	1880031e 	bne	r3,r2,5f4 <link_status_read+0x40>
   {
      result = (1 << 16);
     5e8:	00800074 	movhi	r2,1
     5ec:	e0bfff15 	stw	r2,-4(fp)
     5f0:	00001e06 	br	66c <link_status_read+0xb8>
   }
   else
   {
      result |= ((result & (1<<8)) == (1<<8)) ? (1<<0) : 0x00000000;
     5f4:	e0bfff17 	ldw	r2,-4(fp)
     5f8:	1004d23a 	srli	r2,r2,8
     5fc:	1080004c 	andi	r2,r2,1
     600:	e0ffff17 	ldw	r3,-4(fp)
     604:	1884b03a 	or	r2,r3,r2
     608:	e0bfff15 	stw	r2,-4(fp)

      switch(((result >> 13) | (result >> 5)) & 0x3)
     60c:	e0bfff17 	ldw	r2,-4(fp)
     610:	1006d37a 	srli	r3,r2,13
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	1004d17a 	srli	r2,r2,5
     61c:	1884b03a 	or	r2,r3,r2
     620:	108000cc 	andi	r2,r2,3
     624:	10c00060 	cmpeqi	r3,r2,1
     628:	1800081e 	bne	r3,zero,64c <link_status_read+0x98>
     62c:	0080032e 	bgeu	zero,r2,63c <link_status_read+0x88>
     630:	108000a0 	cmpeqi	r2,r2,2
     634:	1000091e 	bne	r2,zero,65c <link_status_read+0xa8>
     638:	00000c06 	br	66c <link_status_read+0xb8>
      {
         case 0x00:
            result |= (1<<3);
     63c:	e0bfff17 	ldw	r2,-4(fp)
     640:	10800214 	ori	r2,r2,8
     644:	e0bfff15 	stw	r2,-4(fp)
            break;
     648:	00000806 	br	66c <link_status_read+0xb8>
         case 0x01:
            result |= (1<<2);
     64c:	e0bfff17 	ldw	r2,-4(fp)
     650:	10800114 	ori	r2,r2,4
     654:	e0bfff15 	stw	r2,-4(fp)
            break;
     658:	00000406 	br	66c <link_status_read+0xb8>
         case 0x02:
            result |= (1<<1);
     65c:	e0bfff17 	ldw	r2,-4(fp)
     660:	10800094 	ori	r2,r2,2
     664:	e0bfff15 	stw	r2,-4(fp)
            break;
     668:	0001883a 	nop
      }

   }
   return result;
     66c:	e0bfff17 	ldw	r2,-4(fp)
}
     670:	e037883a 	mov	sp,fp
     674:	df000017 	ldw	fp,0(sp)
     678:	dec00104 	addi	sp,sp,4
     67c:	f800283a 	ret

00000680 <phy_cfg>:

alt_32 phy_cfg(np_tse_mac *pmac)
{
     680:	defffc04 	addi	sp,sp,-16
     684:	dfc00315 	stw	ra,12(sp)
     688:	df000215 	stw	fp,8(sp)
     68c:	df000204 	addi	fp,sp,8
     690:	e13ffe15 	stw	r4,-8(fp)
   alt_32 result = 0;
     694:	e03fff15 	stw	zero,-4(fp)

   result = IORD(&pmac->mdio0, 1);
     698:	e0bffe17 	ldw	r2,-8(fp)
     69c:	10808004 	addi	r2,r2,512
     6a0:	10800104 	addi	r2,r2,4
     6a4:	10800037 	ldwio	r2,0(r2)
     6a8:	e0bfff15 	stw	r2,-4(fp)
   result |= 0x00000001;
     6ac:	e0bfff17 	ldw	r2,-4(fp)
     6b0:	10800054 	ori	r2,r2,1
     6b4:	e0bfff15 	stw	r2,-4(fp)
   IOWR(&pmac->mdio0, 1, result);
     6b8:	e0bffe17 	ldw	r2,-8(fp)
     6bc:	10808004 	addi	r2,r2,512
     6c0:	10800104 	addi	r2,r2,4
     6c4:	e0ffff17 	ldw	r3,-4(fp)
     6c8:	10c00035 	stwio	r3,0(r2)
   usleep(10000);
     6cc:	0109c404 	movi	r4,10000
     6d0:	0025e400 	call	25e40 <usleep>
   result &= (~0x00000001);
     6d4:	e0ffff17 	ldw	r3,-4(fp)
     6d8:	00bfff84 	movi	r2,-2
     6dc:	1884703a 	and	r2,r3,r2
     6e0:	e0bfff15 	stw	r2,-4(fp)
   IOWR(&pmac->mdio0, 1, result);
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	10808004 	addi	r2,r2,512
     6ec:	10800104 	addi	r2,r2,4
     6f0:	e0ffff17 	ldw	r3,-4(fp)
     6f4:	10c00035 	stwio	r3,0(r2)

   return result;
     6f8:	e0bfff17 	ldw	r2,-4(fp)
}
     6fc:	e037883a 	mov	sp,fp
     700:	dfc00117 	ldw	ra,4(sp)
     704:	df000017 	ldw	fp,0(sp)
     708:	dec00204 	addi	sp,sp,8
     70c:	f800283a 	ret

00000710 <hw_ethernet_reset>:

void hw_ethernet_reset(void)
{
     710:	deffe604 	addi	sp,sp,-104
     714:	df001915 	stw	fp,100(sp)
     718:	df001904 	addi	fp,sp,100
   alt_tse_phy_profile profile;

   sprintf(profile.name, "%s", "Microchip KSZ9031MNX");
     71c:	e0bfe704 	addi	r2,fp,-100
     720:	00dc98f4 	movhi	r3,29283
     724:	18da5344 	addi	r3,r3,26957
     728:	10c00015 	stw	r3,0(r2)
     72c:	00da5a34 	movhi	r3,26984
     730:	18d8dbc4 	addi	r3,r3,25455
     734:	10c00115 	stw	r3,4(r2)
     738:	00d4d2f4 	movhi	r3,21323
     73c:	18c81c04 	addi	r3,r3,8304
     740:	10c00215 	stw	r3,8(r2)
     744:	00cccc34 	movhi	r3,13104
     748:	18ce5684 	addi	r3,r3,14682
     74c:	10c00315 	stw	r3,12(r2)
     750:	00d613b4 	movhi	r3,22606
     754:	18d34c44 	addi	r3,r3,19761
     758:	10c00415 	stw	r3,16(r2)
     75c:	10000505 	stb	zero,20(r2)
   profile.model_number = 1;
     760:	00800044 	movi	r2,1
     764:	e0bffc05 	stb	r2,-16(fp)
   profile.revision_number = 2;
     768:	00800084 	movi	r2,2
     76c:	e0bffc45 	stb	r2,-15(fp)
   profile.link_status_read = link_status_read;
     770:	00800034 	movhi	r2,0
     774:	10816d04 	addi	r2,r2,1460
     778:	e0bfff15 	stw	r2,-4(fp)
   profile.phy_cfg = phy_cfg;
     77c:	00800034 	movhi	r2,0
     780:	1081a004 	addi	r2,r2,1664
     784:	e0bffe15 	stw	r2,-8(fp)
}
     788:	0001883a 	nop
     78c:	e037883a 	mov	sp,fp
     790:	df000017 	ldw	fp,0(sp)
     794:	dec00104 	addi	sp,sp,4
     798:	f800283a 	ret

0000079c <ethernet_configure>:

void ethernet_configure(uint32_t ctx)
{
     79c:	defffe04 	addi	sp,sp,-8
     7a0:	df000115 	stw	fp,4(sp)
     7a4:	df000104 	addi	fp,sp,4
     7a8:	e13fff15 	stw	r4,-4(fp)
   ctx->ethernet_straps[1].iso = 0;
   ctx->ethernet_straps[1].nand_tree = 0;
   ctx->ethernet_straps[1].phy_address = 0x00;
   ctx->ethernet_straps[1].speed = 1;
   */
}
     7ac:	0001883a 	nop
     7b0:	e037883a 	mov	sp,fp
     7b4:	df000017 	ldw	fp,0(sp)
     7b8:	dec00104 	addi	sp,sp,4
     7bc:	f800283a 	ret

000007c0 <tx_ethernet_isr>:

// Transmit Frame function: Here we have defined and initialized the transmit functions and used for transmission of data via 'tx_frame' function
void tx_ethernet_isr (void *context)
{
     7c0:	defffe04 	addi	sp,sp,-8
     7c4:	df000115 	stw	fp,4(sp)
     7c8:	df000104 	addi	fp,sp,4
     7cc:	e13fff15 	stw	r4,-4(fp)
      value = IORD_ALTERA_MSGDMA_CSR_CONTROL(net->dma_tx_dev->csr_base);
      value |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
      IOWR_ALTERA_MSGDMA_CSR_CONTROL(net->dma_tx_dev->csr_base, value);
   }
   */
}
     7d0:	0001883a 	nop
     7d4:	e037883a 	mov	sp,fp
     7d8:	df000017 	ldw	fp,0(sp)
     7dc:	dec00104 	addi	sp,sp,4
     7e0:	f800283a 	ret

000007e4 <rx_ethernet_isr>:


//////////////////////////////////////////////////////////////////////////////////
// DMA RX ISR Receiver function
void rx_ethernet_isr (void *context)
{
     7e4:	defffe04 	addi	sp,sp,-8
     7e8:	df000115 	stw	fp,4(sp)
     7ec:	df000104 	addi	fp,sp,4
     7f0:	e13fff15 	stw	r4,-4(fp)
      }
      count--;
   }
   ctx->rx_descriptor_idx_wr = idx_wr;
   */
}
     7f4:	0001883a 	nop
     7f8:	e037883a 	mov	sp,fp
     7fc:	df000017 	ldw	fp,0(sp)
     800:	dec00104 	addi	sp,sp,4
     804:	f800283a 	ret

00000808 <rx_dma_rearm>:
//////////////////////////////////////////////////////////////////////////////////
uint32_t rx_dma_rearm(network_ctx_t *ctx)
{
     808:	defff304 	addi	sp,sp,-52
     80c:	dfc00c15 	stw	ra,48(sp)
     810:	df000b15 	stw	fp,44(sp)
     814:	df000b04 	addi	fp,sp,44
     818:	e13ff915 	stw	r4,-28(fp)
   uint32_t result = 0, counter = 0, status, limit, dma_rx_seq, idx_wr;
     81c:	e03ffb15 	stw	zero,-20(fp)
     820:	e03fff15 	stw	zero,-4(fp)
   uint32_t error, bytes;
   // check FIFO in MAC device, if not full then insert new descriptors
   status = IORD_ALTERA_MSGDMA_CSR_STATUS(ctx->dma_rx_dev->csr_base);
     824:	e0bff917 	ldw	r2,-28(fp)
     828:	10800517 	ldw	r2,20(r2)
     82c:	10800317 	ldw	r2,12(r2)
     830:	10800037 	ldwio	r2,0(r2)
     834:	e0bffa15 	stw	r2,-24(fp)
   if((status & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK) == 0x00)
     838:	e0bffa17 	ldw	r2,-24(fp)
     83c:	1080010c 	andi	r2,r2,4
     840:	1000651e 	bne	r2,zero,9d8 <rx_dma_rearm+0x1d0>
   {
      status = IORD_ALTERA_MSGDMA_CSR_WR_FILL_LEVEL(ctx->dma_rx_dev);
     844:	e0bff917 	ldw	r2,-28(fp)
     848:	10800517 	ldw	r2,20(r2)
     84c:	10800317 	ldw	r2,12(r2)
     850:	10800204 	addi	r2,r2,8
     854:	10800037 	ldwio	r2,0(r2)
     858:	e0bffa15 	stw	r2,-24(fp)
      status >>= 16;
     85c:	e0bffa17 	ldw	r2,-24(fp)
     860:	1004d43a 	srli	r2,r2,16
     864:	e0bffa15 	stw	r2,-24(fp)
      status &= 0x00000ff;
     868:	e0bffa17 	ldw	r2,-24(fp)
     86c:	10803fcc 	andi	r2,r2,255
     870:	e0bffa15 	stw	r2,-24(fp)

      // no of available space for new descriptors
      limit = ETHERNET_BUF_NUM - status - 1;
     874:	00c01fc4 	movi	r3,127
     878:	e0bffa17 	ldw	r2,-24(fp)
     87c:	1885c83a 	sub	r2,r3,r2
     880:	e0bffe15 	stw	r2,-8(fp)

      dma_rx_seq  = ctx->dma_rx_seq;
     884:	e0bff917 	ldw	r2,-28(fp)
     888:	10800617 	ldw	r2,24(r2)
     88c:	e0bffd15 	stw	r2,-12(fp)
      idx_wr      = ctx->rx_descriptor_idx_wr;
     890:	e0bff917 	ldw	r2,-28(fp)
     894:	10840917 	ldw	r2,4132(r2)
     898:	e0bffc15 	stw	r2,-16(fp)

      while(limit > 0)
     89c:	00004406 	br	9b0 <rx_dma_rearm+0x1a8>
      {
         result = alt_msgdma_construct_extended_st_to_mm_descriptor(
     8a0:	e0bff917 	ldw	r2,-28(fp)
     8a4:	11000517 	ldw	r4,20(r2)
     8a8:	e0bffc17 	ldw	r2,-16(fp)
     8ac:	10800044 	addi	r2,r2,1
     8b0:	1004917a 	slli	r2,r2,5
     8b4:	e0fff917 	ldw	r3,-28(fp)
     8b8:	188b883a 	add	r5,r3,r2
               ctx->dma_rx_dev,
               &(ctx->rx_descriptor[idx_wr]),
               (alt_u32*)(&(ctx->rx_frame[idx_wr * ETHERNET_BUF_SIZE])),
     8bc:	e0bffc17 	ldw	r2,-16(fp)
     8c0:	10819024 	muli	r2,r2,1600
     8c4:	1088b604 	addi	r2,r2,8920
     8c8:	e0fff917 	ldw	r3,-28(fp)
     8cc:	1887883a 	add	r3,r3,r2
         result = alt_msgdma_construct_extended_st_to_mm_descriptor(
     8d0:	e0bffd17 	ldw	r2,-12(fp)
     8d4:	10bfffcc 	andi	r2,r2,65535
     8d8:	d8000315 	stw	zero,12(sp)
     8dc:	d8000215 	stw	zero,8(sp)
     8e0:	d8800115 	stw	r2,4(sp)
     8e4:	00803ff4 	movhi	r2,255
     8e8:	10840004 	addi	r2,r2,4096
     8ec:	d8800015 	stw	r2,0(sp)
     8f0:	01c19004 	movi	r7,1600
     8f4:	180d883a 	mov	r6,r3
     8f8:	002f1e40 	call	2f1e4 <alt_msgdma_construct_extended_st_to_mm_descriptor>
     8fc:	e0bffb15 	stw	r2,-20(fp)
               ETHERNET_BUF_SIZE,
               ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ERROR_IRQ_MASK |
               ALTERA_MSGDMA_DESCRIPTOR_CONTROL_END_ON_EOP_MASK,
               dma_rx_seq, 0, 0);

         if(result == 0)
     900:	e0bffb17 	ldw	r2,-20(fp)
     904:	1000271e 	bne	r2,zero,9a4 <rx_dma_rearm+0x19c>
         {
            result = alt_msgdma_extended_descriptor_async_transfer(ctx->dma_rx_dev, &(ctx->rx_descriptor[idx_wr]));
     908:	e0bff917 	ldw	r2,-28(fp)
     90c:	11000517 	ldw	r4,20(r2)
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	10800044 	addi	r2,r2,1
     918:	1004917a 	slli	r2,r2,5
     91c:	e0fff917 	ldw	r3,-28(fp)
     920:	1885883a 	add	r2,r3,r2
     924:	100b883a 	mov	r5,r2
     928:	00304300 	call	30430 <alt_msgdma_extended_descriptor_async_transfer>
     92c:	e0bffb15 	stw	r2,-20(fp)
            if(result == 0)
     930:	e0bffb17 	ldw	r2,-20(fp)
     934:	10001b1e 	bne	r2,zero,9a4 <rx_dma_rearm+0x19c>
            {
               status = IORD_ALTERA_MSGDMA_CSR_WR_FILL_LEVEL(ctx->dma_rx_dev);
     938:	e0bff917 	ldw	r2,-28(fp)
     93c:	10800517 	ldw	r2,20(r2)
     940:	10800317 	ldw	r2,12(r2)
     944:	10800204 	addi	r2,r2,8
     948:	10800037 	ldwio	r2,0(r2)
     94c:	e0bffa15 	stw	r2,-24(fp)
               status >>= 16;
     950:	e0bffa17 	ldw	r2,-24(fp)
     954:	1004d43a 	srli	r2,r2,16
     958:	e0bffa15 	stw	r2,-24(fp)
               status &= 0x00000ff;
     95c:	e0bffa17 	ldw	r2,-24(fp)
     960:	10803fcc 	andi	r2,r2,255
     964:	e0bffa15 	stw	r2,-24(fp)

               counter++;
     968:	e0bfff17 	ldw	r2,-4(fp)
     96c:	10800044 	addi	r2,r2,1
     970:	e0bfff15 	stw	r2,-4(fp)
               dma_rx_seq++;
     974:	e0bffd17 	ldw	r2,-12(fp)
     978:	10800044 	addi	r2,r2,1
     97c:	e0bffd15 	stw	r2,-12(fp)
               dma_rx_seq &= 0x0000ffff;
     980:	e0bffd17 	ldw	r2,-12(fp)
     984:	10bfffcc 	andi	r2,r2,65535
     988:	e0bffd15 	stw	r2,-12(fp)

               idx_wr++;
     98c:	e0bffc17 	ldw	r2,-16(fp)
     990:	10800044 	addi	r2,r2,1
     994:	e0bffc15 	stw	r2,-16(fp)
               idx_wr &= (ETHERNET_BUF_NUM-1);
     998:	e0bffc17 	ldw	r2,-16(fp)
     99c:	10801fcc 	andi	r2,r2,127
     9a0:	e0bffc15 	stw	r2,-16(fp)
            }
         }
         limit--;
     9a4:	e0bffe17 	ldw	r2,-8(fp)
     9a8:	10bfffc4 	addi	r2,r2,-1
     9ac:	e0bffe15 	stw	r2,-8(fp)
      while(limit > 0)
     9b0:	e0bffe17 	ldw	r2,-8(fp)
     9b4:	103fba1e 	bne	r2,zero,8a0 <__alt_mem_mcu_subsystem_ram_0+0x77fe08a0>
      }
      if(counter > 0)
     9b8:	e0bfff17 	ldw	r2,-4(fp)
     9bc:	10000626 	beq	r2,zero,9d8 <rx_dma_rearm+0x1d0>
      {
         ctx->rx_descriptor_idx_wr  = idx_wr;
     9c0:	e0bff917 	ldw	r2,-28(fp)
     9c4:	e0fffc17 	ldw	r3,-16(fp)
     9c8:	10c40915 	stw	r3,4132(r2)
         ctx->dma_rx_seq            = dma_rx_seq;
     9cc:	e0bff917 	ldw	r2,-28(fp)
     9d0:	e0fffd17 	ldw	r3,-12(fp)
     9d4:	10c00615 	stw	r3,24(r2)
      }
   }
   status = IORD_ALTERA_MSGDMA_CSR_STATUS(ctx->dma_rx_dev->csr_base);
     9d8:	e0bff917 	ldw	r2,-28(fp)
     9dc:	10800517 	ldw	r2,20(r2)
     9e0:	10800317 	ldw	r2,12(r2)
     9e4:	10800037 	ldwio	r2,0(r2)
     9e8:	e0bffa15 	stw	r2,-24(fp)

   result = counter;
     9ec:	e0bfff17 	ldw	r2,-4(fp)
     9f0:	e0bffb15 	stw	r2,-20(fp)

   return result;
     9f4:	e0bffb17 	ldw	r2,-20(fp)
}
     9f8:	e037883a 	mov	sp,fp
     9fc:	dfc00117 	ldw	ra,4(sp)
     a00:	df000017 	ldw	fp,0(sp)
     a04:	dec00204 	addi	sp,sp,8
     a08:	f800283a 	ret

00000a0c <tx_dma_rearm>:

uint32_t tx_dma_rearm(network_ctx_t *ctx)
{
     a0c:	defffc04 	addi	sp,sp,-16
     a10:	df000315 	stw	fp,12(sp)
     a14:	df000304 	addi	fp,sp,12
     a18:	e13ffd15 	stw	r4,-12(fp)
   int result = 0;
     a1c:	e03fff15 	stw	zero,-4(fp)
   uint32_t count;
   count = IORD_ALTERA_MSGDMA_CSR_WR_FILL_LEVEL(ctx->dma_tx_dev);
     a20:	e0bffd17 	ldw	r2,-12(fp)
     a24:	10800417 	ldw	r2,16(r2)
     a28:	10800317 	ldw	r2,12(r2)
     a2c:	10800204 	addi	r2,r2,8
     a30:	10800037 	ldwio	r2,0(r2)
     a34:	e0bffe15 	stw	r2,-8(fp)

   if(count == 0)
     a38:	e0bffe17 	ldw	r2,-8(fp)
     a3c:	1000051e 	bne	r2,zero,a54 <tx_dma_rearm+0x48>
   {
      ctx->tx_descriptor_idx_rd = ctx->tx_descriptor_idx_wr;
     a40:	e0bffd17 	ldw	r2,-12(fp)
     a44:	10c80c17 	ldw	r3,8240(r2)
     a48:	e0bffd17 	ldw	r2,-12(fp)
     a4c:	10c80b15 	stw	r3,8236(r2)
     a50:	00000706 	br	a70 <tx_dma_rearm+0x64>
   }
   else
   {
      ctx->tx_descriptor_idx_rd = (ctx->tx_descriptor_idx_wr - count) & (ETHERNET_BUF_NUM-1);
     a54:	e0bffd17 	ldw	r2,-12(fp)
     a58:	10c80c17 	ldw	r3,8240(r2)
     a5c:	e0bffe17 	ldw	r2,-8(fp)
     a60:	1885c83a 	sub	r2,r3,r2
     a64:	10c01fcc 	andi	r3,r2,127
     a68:	e0bffd17 	ldw	r2,-12(fp)
     a6c:	10c80b15 	stw	r3,8236(r2)
   }

   return result;
     a70:	e0bfff17 	ldw	r2,-4(fp)
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <arp_initialise>:


void arp_initialise(uint32_t handle)
{
     a84:	defffc04 	addi	sp,sp,-16
     a88:	df000315 	stw	fp,12(sp)
     a8c:	df000304 	addi	fp,sp,12
     a90:	e13ffd15 	stw	r4,-12(fp)
   network_ctx_t *ctx = (network_ctx_t*)handle;
     a94:	e0bffd17 	ldw	r2,-12(fp)
     a98:	e0bffe15 	stw	r2,-8(fp)
   uint32_t i;
   ctx->sm_arp = SM_ARP_IDLE;
     a9c:	e0bffe17 	ldw	r2,-8(fp)
     aa0:	10081215 	stw	zero,8264(r2)

   for(i = 0; i < ARP_TABLE_NUM; i++)
     aa4:	e03fff15 	stw	zero,-4(fp)
     aa8:	00000806 	br	acc <arp_initialise+0x48>
   {
      ctx->arp_ipv4_table[i].enabled = 0;
     aac:	e0fffe17 	ldw	r3,-8(fp)
     ab0:	e0bfff17 	ldw	r2,-4(fp)
     ab4:	10800524 	muli	r2,r2,20
     ab8:	1885883a 	add	r2,r3,r2
     abc:	10081705 	stb	zero,8284(r2)
   for(i = 0; i < ARP_TABLE_NUM; i++)
     ac0:	e0bfff17 	ldw	r2,-4(fp)
     ac4:	10800044 	addi	r2,r2,1
     ac8:	e0bfff15 	stw	r2,-4(fp)
     acc:	e0bfff17 	ldw	r2,-4(fp)
     ad0:	10800830 	cmpltui	r2,r2,32
     ad4:	103ff51e 	bne	r2,zero,aac <__alt_mem_mcu_subsystem_ram_0+0x77fe0aac>
   }
}
     ad8:	0001883a 	nop
     adc:	e037883a 	mov	sp,fp
     ae0:	df000017 	ldw	fp,0(sp)
     ae4:	dec00104 	addi	sp,sp,4
     ae8:	f800283a 	ret

00000aec <udp_initialise>:

void udp_initialise (uint32_t handle)
{
     aec:	defffe04 	addi	sp,sp,-8
     af0:	df000115 	stw	fp,4(sp)
     af4:	df000104 	addi	fp,sp,4
     af8:	e13fff15 	stw	r4,-4(fp)

}
     afc:	0001883a 	nop
     b00:	e037883a 	mov	sp,fp
     b04:	df000017 	ldw	fp,0(sp)
     b08:	dec00104 	addi	sp,sp,4
     b0c:	f800283a 	ret

00000b10 <mac_compare>:

static inline int32_t mac_compare(mac_addr_t *addr1, mac_addr_t *addr2)
{
     b10:	defffc04 	addi	sp,sp,-16
     b14:	df000315 	stw	fp,12(sp)
     b18:	df000304 	addi	fp,sp,12
     b1c:	e13ffe15 	stw	r4,-8(fp)
     b20:	e17ffd15 	stw	r5,-12(fp)
   int32_t result = 0;
     b24:	e03fff15 	stw	zero,-4(fp)
   if((addr1->address[0] == addr2->address[0]) &&
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	10c00003 	ldbu	r3,0(r2)
     b30:	e0bffd17 	ldw	r2,-12(fp)
     b34:	10800003 	ldbu	r2,0(r2)
     b38:	18c03fcc 	andi	r3,r3,255
     b3c:	10803fcc 	andi	r2,r2,255
     b40:	1880251e 	bne	r3,r2,bd8 <mac_compare+0xc8>
   (addr1->address[1] == addr2->address[1]) &&
     b44:	e0bffe17 	ldw	r2,-8(fp)
     b48:	10c00043 	ldbu	r3,1(r2)
     b4c:	e0bffd17 	ldw	r2,-12(fp)
     b50:	10800043 	ldbu	r2,1(r2)
   if((addr1->address[0] == addr2->address[0]) &&
     b54:	18c03fcc 	andi	r3,r3,255
     b58:	10803fcc 	andi	r2,r2,255
     b5c:	18801e1e 	bne	r3,r2,bd8 <mac_compare+0xc8>
   (addr1->address[2] == addr2->address[2]) &&
     b60:	e0bffe17 	ldw	r2,-8(fp)
     b64:	10c00083 	ldbu	r3,2(r2)
     b68:	e0bffd17 	ldw	r2,-12(fp)
     b6c:	10800083 	ldbu	r2,2(r2)
   (addr1->address[1] == addr2->address[1]) &&
     b70:	18c03fcc 	andi	r3,r3,255
     b74:	10803fcc 	andi	r2,r2,255
     b78:	1880171e 	bne	r3,r2,bd8 <mac_compare+0xc8>
   (addr1->address[3] == addr2->address[3]) &&
     b7c:	e0bffe17 	ldw	r2,-8(fp)
     b80:	10c000c3 	ldbu	r3,3(r2)
     b84:	e0bffd17 	ldw	r2,-12(fp)
     b88:	108000c3 	ldbu	r2,3(r2)
   (addr1->address[2] == addr2->address[2]) &&
     b8c:	18c03fcc 	andi	r3,r3,255
     b90:	10803fcc 	andi	r2,r2,255
     b94:	1880101e 	bne	r3,r2,bd8 <mac_compare+0xc8>
   (addr1->address[4] == addr2->address[4]) &&
     b98:	e0bffe17 	ldw	r2,-8(fp)
     b9c:	10c00103 	ldbu	r3,4(r2)
     ba0:	e0bffd17 	ldw	r2,-12(fp)
     ba4:	10800103 	ldbu	r2,4(r2)
   (addr1->address[3] == addr2->address[3]) &&
     ba8:	18c03fcc 	andi	r3,r3,255
     bac:	10803fcc 	andi	r2,r2,255
     bb0:	1880091e 	bne	r3,r2,bd8 <mac_compare+0xc8>
   (addr1->address[5] == addr2->address[5]))
     bb4:	e0bffe17 	ldw	r2,-8(fp)
     bb8:	10c00143 	ldbu	r3,5(r2)
     bbc:	e0bffd17 	ldw	r2,-12(fp)
     bc0:	10800143 	ldbu	r2,5(r2)
   (addr1->address[4] == addr2->address[4]) &&
     bc4:	18c03fcc 	andi	r3,r3,255
     bc8:	10803fcc 	andi	r2,r2,255
     bcc:	1880021e 	bne	r3,r2,bd8 <mac_compare+0xc8>
   {
      result = 1;
     bd0:	00800044 	movi	r2,1
     bd4:	e0bfff15 	stw	r2,-4(fp)
   }
   return result;
     bd8:	e0bfff17 	ldw	r2,-4(fp)
}
     bdc:	e037883a 	mov	sp,fp
     be0:	df000017 	ldw	fp,0(sp)
     be4:	dec00104 	addi	sp,sp,4
     be8:	f800283a 	ret

00000bec <tcp_ip_process_stack>:

void tcp_ip_process_stack (uint32_t handle)
{
     bec:	defff504 	addi	sp,sp,-44
     bf0:	dfc00a15 	stw	ra,40(sp)
     bf4:	df000915 	stw	fp,36(sp)
     bf8:	df000904 	addi	fp,sp,36
     bfc:	e13ff715 	stw	r4,-36(fp)
   void *ptr;
   uint32_t bytes, error, count, status, idx_rd;
   eth_hdr_t *eth_hdr;
   network_ctx_t *ctx = (network_ctx_t*)handle;
     c00:	e0bff717 	ldw	r2,-36(fp)
     c04:	e0bffd15 	stw	r2,-12(fp)

   status = IORD_ALTERA_MSGDMA_CSR_STATUS(ctx->dma_rx_dev->csr_base);
     c08:	e0bffd17 	ldw	r2,-12(fp)
     c0c:	10800517 	ldw	r2,20(r2)
     c10:	10800317 	ldw	r2,12(r2)
     c14:	10800037 	ldwio	r2,0(r2)
     c18:	e0bffc15 	stw	r2,-16(fp)

   // response buffer is not empty
   if((status & ALTERA_MSGDMA_CSR_RESPONSE_BUFFER_EMPTY_MASK) != ALTERA_MSGDMA_CSR_RESPONSE_BUFFER_EMPTY_MASK)
     c1c:	e0bffc17 	ldw	r2,-16(fp)
     c20:	1080020c 	andi	r2,r2,8
     c24:	10006a1e 	bne	r2,zero,dd0 <tcp_ip_process_stack+0x1e4>
   {
      idx_rd = ctx->rx_descriptor_idx_rd;
     c28:	e0bffd17 	ldw	r2,-12(fp)
     c2c:	10840817 	ldw	r2,4128(r2)
     c30:	e0bffe15 	stw	r2,-8(fp)
      count = IORD_ALTERA_MSGDMA_CSR_FILL_LEVEL(ctx->dma_rx_dev);
     c34:	e0bffd17 	ldw	r2,-12(fp)
     c38:	10800517 	ldw	r2,20(r2)
     c3c:	10800317 	ldw	r2,12(r2)
     c40:	10800304 	addi	r2,r2,12
     c44:	10800037 	ldwio	r2,0(r2)
     c48:	e0bfff15 	stw	r2,-4(fp)
      if(count > 0)
     c4c:	e0bfff17 	ldw	r2,-4(fp)
     c50:	10005f26 	beq	r2,zero,dd0 <tcp_ip_process_stack+0x1e4>
      {
         while(count)
     c54:	00005906 	br	dbc <tcp_ip_process_stack+0x1d0>
         {
            bytes = IORD_ALTERA_MSGDMA_BYTES_TANSFERRED(ctx->dma_rx_dev);
     c58:	e0bffd17 	ldw	r2,-12(fp)
     c5c:	10800517 	ldw	r2,20(r2)
     c60:	10800517 	ldw	r2,20(r2)
     c64:	10800037 	ldwio	r2,0(r2)
     c68:	e0bffb15 	stw	r2,-20(fp)
            error = IORD_ALTERA_MSGDMA_RESPONSE_STATUS(ctx->dma_rx_dev);
     c6c:	e0bffd17 	ldw	r2,-12(fp)
     c70:	10800517 	ldw	r2,20(r2)
     c74:	10800517 	ldw	r2,20(r2)
     c78:	10800104 	addi	r2,r2,4
     c7c:	10800037 	ldwio	r2,0(r2)
     c80:	e0bffa15 	stw	r2,-24(fp)

            ////////////////////////////////////////////////////////////////////////////
            // processing frame
            if(bytes >= (64+ETHERNET_HEADER_MAC_REMOVE-4))
     c84:	e0bffb17 	ldw	r2,-20(fp)
     c88:	10800fb0 	cmpltui	r2,r2,62
     c8c:	10003e1e 	bne	r2,zero,d88 <tcp_ip_process_stack+0x19c>
            {
               if(bytes < ETHERNET_BUF_SIZE)
     c90:	e0bffb17 	ldw	r2,-20(fp)
     c94:	10819028 	cmpgeui	r2,r2,1600
     c98:	1000361e 	bne	r2,zero,d74 <tcp_ip_process_stack+0x188>
               {
                  ptr = (void*)(&(ctx->rx_frame[idx_rd * ETHERNET_BUF_SIZE + ETHERNET_HEADER_MAC_REMOVE]));
     c9c:	e0bffe17 	ldw	r2,-8(fp)
     ca0:	10819024 	muli	r2,r2,1600
     ca4:	10800084 	addi	r2,r2,2
     ca8:	1088b604 	addi	r2,r2,8920
     cac:	e0fffd17 	ldw	r3,-12(fp)
     cb0:	1885883a 	add	r2,r3,r2
     cb4:	e0bff915 	stw	r2,-28(fp)
                  alt_dcache_flush(ptr, bytes);
     cb8:	e17ffb17 	ldw	r5,-20(fp)
     cbc:	e13ff917 	ldw	r4,-28(fp)
     cc0:	00250200 	call	25020 <alt_dcache_flush>
                  eth_hdr = (eth_hdr_t*)ptr;
     cc4:	e0bff917 	ldw	r2,-28(fp)
     cc8:	e0bff815 	stw	r2,-32(fp)

                  //if(eth_hdr->destination)

                  switch(eth_hdr->type)
     ccc:	e0bff817 	ldw	r2,-32(fp)
     cd0:	10c00303 	ldbu	r3,12(r2)
     cd4:	10800343 	ldbu	r2,13(r2)
     cd8:	1004923a 	slli	r2,r2,8
     cdc:	10c4b03a 	or	r2,r2,r3
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	10c00220 	cmpeqi	r3,r2,8
     ce8:	18000d1e 	bne	r3,zero,d20 <tcp_ip_process_stack+0x134>
     cec:	10818220 	cmpeqi	r2,r2,1544
     cf0:	10001d26 	beq	r2,zero,d68 <tcp_ip_process_stack+0x17c>
                  {
                     // ARP packet
                     case LEW2BEW(0x0806):
                        ctx->sm_ethernet_stack = SM_ETH_STACK_ARP;
     cf4:	e0bffd17 	ldw	r2,-12(fp)
     cf8:	00c00044 	movi	r3,1
     cfc:	10c81315 	stw	r3,8268(r2)
                        status = arp_process_rx(ctx, eth_hdr, bytes - ETHERNET_HEADER_MAC_REMOVE);
     d00:	e0bffb17 	ldw	r2,-20(fp)
     d04:	10bfff84 	addi	r2,r2,-2
     d08:	100d883a 	mov	r6,r2
     d0c:	e17ff817 	ldw	r5,-32(fp)
     d10:	e13ffd17 	ldw	r4,-12(fp)
     d14:	00012700 	call	1270 <arp_process_rx>
     d18:	e0bffc15 	stw	r2,-16(fp)
                        break;
     d1c:	00002006 	br	da0 <tcp_ip_process_stack+0x1b4>

                     // IP packet
                     case LEW2BEW(0x0800):
                        if(mac_compare(&(eth_hdr->destination), &(ctx->local_device_info.mac_addr)))
     d20:	e0fff817 	ldw	r3,-32(fp)
     d24:	e0bffd17 	ldw	r2,-12(fp)
     d28:	10880d04 	addi	r2,r2,8244
     d2c:	100b883a 	mov	r5,r2
     d30:	1809883a 	mov	r4,r3
     d34:	0000b100 	call	b10 <mac_compare>
     d38:	10001826 	beq	r2,zero,d9c <tcp_ip_process_stack+0x1b0>
                        {
                           ctx->sm_ethernet_stack = SM_ETH_STACK_IP;
     d3c:	e0bffd17 	ldw	r2,-12(fp)
     d40:	00c00084 	movi	r3,2
     d44:	10c81315 	stw	r3,8268(r2)
                           status = ip_process_rx(ctx, eth_hdr, bytes - ETHERNET_HEADER_MAC_REMOVE);
     d48:	e0bffb17 	ldw	r2,-20(fp)
     d4c:	10bfff84 	addi	r2,r2,-2
     d50:	100d883a 	mov	r6,r2
     d54:	e17ff817 	ldw	r5,-32(fp)
     d58:	e13ffd17 	ldw	r4,-12(fp)
     d5c:	0001d700 	call	1d70 <ip_process_rx>
     d60:	e0bffc15 	stw	r2,-16(fp)
                        }
                        break;
     d64:	00000d06 	br	d9c <tcp_ip_process_stack+0x1b0>

                     // unknown packet
                     default:
                        status = 0;
     d68:	e03ffc15 	stw	zero,-16(fp)
                        break;
     d6c:	0001883a 	nop
     d70:	00000b06 	br	da0 <tcp_ip_process_stack+0x1b4>
                  }
               }
               else
               {
                  // error
                  printf("Error: length is invalid (0x%x)\n", bytes);
     d74:	e17ffb17 	ldw	r5,-20(fp)
     d78:	010000f4 	movhi	r4,3
     d7c:	2105a304 	addi	r4,r4,5772
     d80:	001634c0 	call	1634c <printf>
     d84:	00000606 	br	da0 <tcp_ip_process_stack+0x1b4>
               }
            }
            else
            {
               printf("Short frame: %d\n", bytes);
     d88:	e17ffb17 	ldw	r5,-20(fp)
     d8c:	010000f4 	movhi	r4,3
     d90:	2105ac04 	addi	r4,r4,5808
     d94:	001634c0 	call	1634c <printf>
     d98:	00000106 	br	da0 <tcp_ip_process_stack+0x1b4>
                        break;
     d9c:	0001883a 	nop
            }
            ////////////////////////////////////////////////////////////////////////////
            count--;
     da0:	e0bfff17 	ldw	r2,-4(fp)
     da4:	10bfffc4 	addi	r2,r2,-1
     da8:	e0bfff15 	stw	r2,-4(fp)
            idx_rd = ((idx_rd + 1) & (ETHERNET_BUF_NUM - 1));
     dac:	e0bffe17 	ldw	r2,-8(fp)
     db0:	10800044 	addi	r2,r2,1
     db4:	10801fcc 	andi	r2,r2,127
     db8:	e0bffe15 	stw	r2,-8(fp)
         while(count)
     dbc:	e0bfff17 	ldw	r2,-4(fp)
     dc0:	103fa51e 	bne	r2,zero,c58 <__alt_mem_mcu_subsystem_ram_0+0x77fe0c58>
         }
         ctx->rx_descriptor_idx_rd = idx_rd;
     dc4:	e0bffd17 	ldw	r2,-12(fp)
     dc8:	e0fffe17 	ldw	r3,-8(fp)
     dcc:	10c40815 	stw	r3,4128(r2)
      }
   }
}
     dd0:	0001883a 	nop
     dd4:	e037883a 	mov	sp,fp
     dd8:	dfc00117 	ldw	ra,4(sp)
     ddc:	df000017 	ldw	fp,0(sp)
     de0:	dec00204 	addi	sp,sp,8
     de4:	f800283a 	ret

00000de8 <tx_send>:




static int32_t tx_send(void *ctx, uint8_t *buffer, uint32_t len)
{
     de8:	deffee04 	addi	sp,sp,-72
     dec:	dfc01115 	stw	ra,68(sp)
     df0:	df001015 	stw	fp,64(sp)
     df4:	df001004 	addi	fp,sp,64
     df8:	e13ff615 	stw	r4,-40(fp)
     dfc:	e17ff515 	stw	r5,-44(fp)
     e00:	e1bff415 	stw	r6,-48(fp)
   uint8_t *__restrict ptr;
   uint32_t idx_wr, idx_rd, i, fcs, padding = 0, dma_tx_seq;
     e04:	e03ffd15 	stw	zero,-12(fp)
   network_ctx_t *net = (network_ctx_t*)ctx;
     e08:	e0bff617 	ldw	r2,-40(fp)
     e0c:	e0bffc15 	stw	r2,-16(fp)
   int32_t result = 0;
     e10:	e03ffe15 	stw	zero,-8(fp)

   idx_wr         = net->tx_descriptor_idx_wr;
     e14:	e0bffc17 	ldw	r2,-16(fp)
     e18:	10880c17 	ldw	r2,8240(r2)
     e1c:	e0bffb15 	stw	r2,-20(fp)
   idx_rd         = net->tx_descriptor_idx_rd;
     e20:	e0bffc17 	ldw	r2,-16(fp)
     e24:	10880b17 	ldw	r2,8236(r2)
     e28:	e0bffa15 	stw	r2,-24(fp)
   dma_tx_seq     = net->dma_tx_seq;
     e2c:	e0bffc17 	ldw	r2,-16(fp)
     e30:	10800717 	ldw	r2,28(r2)
     e34:	e0bff915 	stw	r2,-28(fp)

   if(((idx_wr + 1) & (ETHERNET_BUF_NUM-1)) != idx_rd)
     e38:	e0bffb17 	ldw	r2,-20(fp)
     e3c:	10800044 	addi	r2,r2,1
     e40:	10801fcc 	andi	r2,r2,127
     e44:	e0fffa17 	ldw	r3,-24(fp)
     e48:	18809026 	beq	r3,r2,108c <tx_send+0x2a4>
   {
      ptr         = &(net->tx_frame[idx_wr * ETHERNET_BUF_SIZE]);
     e4c:	e0bffb17 	ldw	r2,-20(fp)
     e50:	10c19024 	muli	r3,r2,1600
     e54:	008000f4 	movhi	r2,3
     e58:	1090b604 	addi	r2,r2,17112
     e5c:	1885883a 	add	r2,r3,r2
     e60:	e0fffc17 	ldw	r3,-16(fp)
     e64:	1885883a 	add	r2,r3,r2
     e68:	e0bff815 	stw	r2,-32(fp)

      for(i = 0; i < ETHERNET_HEADER_MAC_REMOVE; i ++)
     e6c:	e03fff15 	stw	zero,-4(fp)
     e70:	00000706 	br	e90 <tx_send+0xa8>
      {
         ptr[i] = 0;
     e74:	e0fff817 	ldw	r3,-32(fp)
     e78:	e0bfff17 	ldw	r2,-4(fp)
     e7c:	1885883a 	add	r2,r3,r2
     e80:	10000005 	stb	zero,0(r2)
      for(i = 0; i < ETHERNET_HEADER_MAC_REMOVE; i ++)
     e84:	e0bfff17 	ldw	r2,-4(fp)
     e88:	10800044 	addi	r2,r2,1
     e8c:	e0bfff15 	stw	r2,-4(fp)
     e90:	e0bfff17 	ldw	r2,-4(fp)
     e94:	108000b0 	cmpltui	r2,r2,2
     e98:	103ff61e 	bne	r2,zero,e74 <__alt_mem_mcu_subsystem_ram_0+0x77fe0e74>
      }
      ptr += ETHERNET_HEADER_MAC_REMOVE;
     e9c:	e0bff817 	ldw	r2,-32(fp)
     ea0:	10800084 	addi	r2,r2,2
     ea4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, buffer, len);
     ea8:	e1bff417 	ldw	r6,-48(fp)
     eac:	e17ff517 	ldw	r5,-44(fp)
     eb0:	e13ff817 	ldw	r4,-32(fp)
     eb4:	0015ac00 	call	15ac0 <memcpy>
      if(len < 60)
     eb8:	e0bff417 	ldw	r2,-48(fp)
     ebc:	10800f28 	cmpgeui	r2,r2,60
     ec0:	10000d1e 	bne	r2,zero,ef8 <tx_send+0x110>
      {
         padding = 60 - len;
     ec4:	00c00f04 	movi	r3,60
     ec8:	e0bff417 	ldw	r2,-48(fp)
     ecc:	1885c83a 	sub	r2,r3,r2
     ed0:	e0bffd15 	stw	r2,-12(fp)
         memset(ptr+len, 0x00, padding);
     ed4:	e0fff817 	ldw	r3,-32(fp)
     ed8:	e0bff417 	ldw	r2,-48(fp)
     edc:	1885883a 	add	r2,r3,r2
     ee0:	e1bffd17 	ldw	r6,-12(fp)
     ee4:	000b883a 	mov	r5,zero
     ee8:	1009883a 	mov	r4,r2
     eec:	0015bb00 	call	15bb0 <memset>
         len = 60;
     ef0:	00800f04 	movi	r2,60
     ef4:	e0bff415 	stw	r2,-48(fp)
      }

      fcs = fcs_crc32(ptr, len);
     ef8:	e0bff417 	ldw	r2,-48(fp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	100b883a 	mov	r5,r2
     f04:	e13ff817 	ldw	r4,-32(fp)
     f08:	00002900 	call	290 <fcs_crc32>
     f0c:	e0bff715 	stw	r2,-36(fp)

      ptr[len++] = ((uint8_t)(fcs >> 0))  & 0xff;
     f10:	e0bff417 	ldw	r2,-48(fp)
     f14:	10c00044 	addi	r3,r2,1
     f18:	e0fff415 	stw	r3,-48(fp)
     f1c:	e0fff817 	ldw	r3,-32(fp)
     f20:	1885883a 	add	r2,r3,r2
     f24:	e0fff717 	ldw	r3,-36(fp)
     f28:	10c00005 	stb	r3,0(r2)
      ptr[len++] = ((uint8_t)(fcs >> 8))  & 0xff;
     f2c:	e0bff717 	ldw	r2,-36(fp)
     f30:	1008d23a 	srli	r4,r2,8
     f34:	e0bff417 	ldw	r2,-48(fp)
     f38:	10c00044 	addi	r3,r2,1
     f3c:	e0fff415 	stw	r3,-48(fp)
     f40:	e0fff817 	ldw	r3,-32(fp)
     f44:	1885883a 	add	r2,r3,r2
     f48:	2007883a 	mov	r3,r4
     f4c:	10c00005 	stb	r3,0(r2)
      ptr[len++] = ((uint8_t)(fcs >> 16)) & 0xff;
     f50:	e0bff717 	ldw	r2,-36(fp)
     f54:	1008d43a 	srli	r4,r2,16
     f58:	e0bff417 	ldw	r2,-48(fp)
     f5c:	10c00044 	addi	r3,r2,1
     f60:	e0fff415 	stw	r3,-48(fp)
     f64:	e0fff817 	ldw	r3,-32(fp)
     f68:	1885883a 	add	r2,r3,r2
     f6c:	2007883a 	mov	r3,r4
     f70:	10c00005 	stb	r3,0(r2)
      ptr[len++] = ((uint8_t)(fcs >> 24)) & 0xff;
     f74:	e0bff717 	ldw	r2,-36(fp)
     f78:	1008d63a 	srli	r4,r2,24
     f7c:	e0bff417 	ldw	r2,-48(fp)
     f80:	10c00044 	addi	r3,r2,1
     f84:	e0fff415 	stw	r3,-48(fp)
     f88:	e0fff817 	ldw	r3,-32(fp)
     f8c:	1885883a 	add	r2,r3,r2
     f90:	2007883a 	mov	r3,r4
     f94:	10c00005 	stb	r3,0(r2)

      result = alt_msgdma_construct_extended_mm_to_st_descriptor(
     f98:	e0bffc17 	ldw	r2,-16(fp)
     f9c:	11000417 	ldw	r4,16(r2)
     fa0:	e0bffb17 	ldw	r2,-20(fp)
     fa4:	1004917a 	slli	r2,r2,5
     fa8:	10840b04 	addi	r2,r2,4140
     fac:	e0fffc17 	ldw	r3,-16(fp)
     fb0:	188b883a 	add	r5,r3,r2
            net->dma_tx_dev,
            &(net->tx_descriptor[idx_wr]),
            (alt_u32*)(&(net->tx_frame[idx_wr * ETHERNET_BUF_SIZE])),
     fb4:	e0bffb17 	ldw	r2,-20(fp)
     fb8:	10c19024 	muli	r3,r2,1600
     fbc:	008000f4 	movhi	r2,3
     fc0:	1090b604 	addi	r2,r2,17112
     fc4:	1885883a 	add	r2,r3,r2
     fc8:	e0fffc17 	ldw	r3,-16(fp)
     fcc:	1887883a 	add	r3,r3,r2
      result = alt_msgdma_construct_extended_mm_to_st_descriptor(
     fd0:	e0bff417 	ldw	r2,-48(fp)
     fd4:	11800084 	addi	r6,r2,2
     fd8:	e0bff917 	ldw	r2,-28(fp)
     fdc:	10bfffcc 	andi	r2,r2,65535
     fe0:	d8000315 	stw	zero,12(sp)
     fe4:	d8000215 	stw	zero,8(sp)
     fe8:	d8800115 	stw	r2,4(sp)
     fec:	0090c004 	movi	r2,17152
     ff0:	d8800015 	stw	r2,0(sp)
     ff4:	300f883a 	mov	r7,r6
     ff8:	180d883a 	mov	r6,r3
     ffc:	002f2740 	call	2f274 <alt_msgdma_construct_extended_mm_to_st_descriptor>
    1000:	e0bffe15 	stw	r2,-8(fp)
            ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_SOP_MASK |
            ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MASK |
            ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK,
            dma_tx_seq, 0, 0);

      if(result == 0)
    1004:	e0bffe17 	ldw	r2,-8(fp)
    1008:	1000221e 	bne	r2,zero,1094 <tx_send+0x2ac>
      {
         alt_dcache_flush(((void*)(&(net->tx_frame[idx_wr * ETHERNET_BUF_SIZE]))), (alt_u32)(len+2));
    100c:	e0bffb17 	ldw	r2,-20(fp)
    1010:	10c19024 	muli	r3,r2,1600
    1014:	008000f4 	movhi	r2,3
    1018:	1090b604 	addi	r2,r2,17112
    101c:	1885883a 	add	r2,r3,r2
    1020:	e0fffc17 	ldw	r3,-16(fp)
    1024:	1887883a 	add	r3,r3,r2
    1028:	e0bff417 	ldw	r2,-48(fp)
    102c:	10800084 	addi	r2,r2,2
    1030:	100b883a 	mov	r5,r2
    1034:	1809883a 	mov	r4,r3
    1038:	00250200 	call	25020 <alt_dcache_flush>
         result = alt_msgdma_extended_descriptor_async_transfer(net->dma_tx_dev, &(net->tx_descriptor[idx_wr]));
    103c:	e0bffc17 	ldw	r2,-16(fp)
    1040:	11000417 	ldw	r4,16(r2)
    1044:	e0bffb17 	ldw	r2,-20(fp)
    1048:	1004917a 	slli	r2,r2,5
    104c:	10840b04 	addi	r2,r2,4140
    1050:	e0fffc17 	ldw	r3,-16(fp)
    1054:	1885883a 	add	r2,r3,r2
    1058:	100b883a 	mov	r5,r2
    105c:	00304300 	call	30430 <alt_msgdma_extended_descriptor_async_transfer>
    1060:	e0bffe15 	stw	r2,-8(fp)
         if(result == 0)
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10000a1e 	bne	r2,zero,1094 <tx_send+0x2ac>
         {
            idx_wr = ((idx_wr + 1) & (ETHERNET_BUF_NUM - 1));
    106c:	e0bffb17 	ldw	r2,-20(fp)
    1070:	10800044 	addi	r2,r2,1
    1074:	10801fcc 	andi	r2,r2,127
    1078:	e0bffb15 	stw	r2,-20(fp)
            net->tx_descriptor_idx_wr = idx_wr;
    107c:	e0bffc17 	ldw	r2,-16(fp)
    1080:	e0fffb17 	ldw	r3,-20(fp)
    1084:	10c80c15 	stw	r3,8240(r2)
    1088:	00000206 	br	1094 <tx_send+0x2ac>
         }
      }
   }
   else
   {
      result = -1;
    108c:	00bfffc4 	movi	r2,-1
    1090:	e0bffe15 	stw	r2,-8(fp)
   }

   return result;
    1094:	e0bffe17 	ldw	r2,-8(fp)
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <net_deinitialize>:

void net_deinitialize(network_ctx_t *ctx)
{
    10ac:	defffe04 	addi	sp,sp,-8
    10b0:	df000115 	stw	fp,4(sp)
    10b4:	df000104 	addi	fp,sp,4
    10b8:	e13fff15 	stw	r4,-4(fp)
   //alt_uncached_free(ctx->rx_frame);
   //alt_uncached_free(ctx->tx_frame);
   //alt_uncached_free(ctx->rx_frame_transferred);
   //alt_uncached_free(ctx->tx_frame_transferred);
}
    10bc:	0001883a 	nop
    10c0:	e037883a 	mov	sp,fp
    10c4:	df000017 	ldw	fp,0(sp)
    10c8:	dec00104 	addi	sp,sp,4
    10cc:	f800283a 	ret

000010d0 <net_initialize>:

void net_initialize(uint32_t handle)
{
    10d0:	defffc04 	addi	sp,sp,-16
    10d4:	dfc00315 	stw	ra,12(sp)
    10d8:	df000215 	stw	fp,8(sp)
    10dc:	df000204 	addi	fp,sp,8
    10e0:	e13ffe15 	stw	r4,-8(fp)
   network_ctx_t *ctx = (network_ctx_t*)handle;
    10e4:	e0bffe17 	ldw	r2,-8(fp)
    10e8:	e0bfff15 	stw	r2,-4(fp)
   memset((void*)handle, 0, sizeof(network_ctx));
    10ec:	e0bffe17 	ldw	r2,-8(fp)
    10f0:	018001b4 	movhi	r6,6
    10f4:	319a0e04 	addi	r6,r6,26680
    10f8:	000b883a 	mov	r5,zero
    10fc:	1009883a 	mov	r4,r2
    1100:	0015bb00 	call	15bb0 <memset>

   ctx->tx_send                                 = tx_send;
    1104:	e0ffff17 	ldw	r3,-4(fp)
    1108:	00800034 	movhi	r2,0
    110c:	10837a04 	addi	r2,r2,3560
    1110:	1888b415 	stw	r2,8912(r3)
   ctx->local_device_info.ip_addr.addr32        = 0x690aa8c0;
    1114:	e0bfff17 	ldw	r2,-4(fp)
    1118:	10c80e8b 	ldhu	r3,8250(r2)
    111c:	1806703a 	and	r3,r3,zero
    1120:	1809883a 	mov	r4,r3
    1124:	00ea3004 	movi	r3,-22336
    1128:	20c6b03a 	or	r3,r4,r3
    112c:	10c80e8d 	sth	r3,8250(r2)
    1130:	10c80f0b 	ldhu	r3,8252(r2)
    1134:	1806703a 	and	r3,r3,zero
    1138:	18da4294 	ori	r3,r3,26890
    113c:	10c80f0d 	sth	r3,8252(r2)
   ctx->local_device_info.mac_addr.address[0]   = 0x00;
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	10080d05 	stb	zero,8244(r2)
   ctx->local_device_info.mac_addr.address[1]   = 0x1c;
    1148:	e0bfff17 	ldw	r2,-4(fp)
    114c:	00c00704 	movi	r3,28
    1150:	10c80d45 	stb	r3,8245(r2)
   ctx->local_device_info.mac_addr.address[2]   = 0x23;
    1154:	e0bfff17 	ldw	r2,-4(fp)
    1158:	00c008c4 	movi	r3,35
    115c:	10c80d85 	stb	r3,8246(r2)
   ctx->local_device_info.mac_addr.address[3]   = 0x17;
    1160:	e0bfff17 	ldw	r2,-4(fp)
    1164:	00c005c4 	movi	r3,23
    1168:	10c80dc5 	stb	r3,8247(r2)
   ctx->local_device_info.mac_addr.address[4]   = 0x4a;
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	00c01284 	movi	r3,74
    1174:	10c80e05 	stb	r3,8248(r2)
   ctx->local_device_info.mac_addr.address[5]   = 0xcb;
    1178:	e0bfff17 	ldw	r2,-4(fp)
    117c:	00fff2c4 	movi	r3,-53
    1180:	10c80e45 	stb	r3,8249(r2)


   ctx->ip_mask.mask32                          = 0xffffff00;
    1184:	e0bfff17 	ldw	r2,-4(fp)
    1188:	00ffc004 	movi	r3,-256
    118c:	10c81115 	stw	r3,8260(r2)
   ctx->gw_ip_addr.addr32                       = 0xc0a80801;
    1190:	e0ffff17 	ldw	r3,-4(fp)
    1194:	00b02a34 	movhi	r2,49320
    1198:	10820044 	addi	r2,r2,2049
    119c:	18881015 	stw	r2,8256(r3)

   ctx->sm_ethernet_stack                       = SM_ETH_STACK_IDLE;
    11a0:	e0bfff17 	ldw	r2,-4(fp)
    11a4:	10081315 	stw	zero,8268(r2)

   ctx->mtu                                     = 1518;
    11a8:	e0bfff17 	ldw	r2,-4(fp)
    11ac:	00c17b84 	movi	r3,1518
    11b0:	10c8b515 	stw	r3,8916(r2)

   memset(&ctx->sockets_items, 0, sizeof(ctx->sockets_items));
    11b4:	e0ffff17 	ldw	r3,-4(fp)
    11b8:	008001b4 	movhi	r2,6
    11bc:	1099bd44 	addi	r2,r2,26357
    11c0:	1885883a 	add	r2,r3,r2
    11c4:	01805004 	movi	r6,320
    11c8:	000b883a 	mov	r5,zero
    11cc:	1009883a 	mov	r4,r2
    11d0:	0015bb00 	call	15bb0 <memset>
}
    11d4:	0001883a 	nop
    11d8:	e037883a 	mov	sp,fp
    11dc:	dfc00117 	ldw	ra,4(sp)
    11e0:	df000017 	ldw	fp,0(sp)
    11e4:	dec00204 	addi	sp,sp,8
    11e8:	f800283a 	ret

000011ec <arp_packet_check>:


// validation if incoming arp request should be processed or dropped
static int32_t arp_packet_check(network_ctx_t *ctx, arp_packet_t *arp_packet)
{
    11ec:	defffc04 	addi	sp,sp,-16
    11f0:	df000315 	stw	fp,12(sp)
    11f4:	df000304 	addi	fp,sp,12
    11f8:	e13ffe15 	stw	r4,-8(fp)
    11fc:	e17ffd15 	stw	r5,-12(fp)
   int32_t result = 0;
    1200:	e03fff15 	stw	zero,-4(fp)
   if(arp_packet->arp_hdr.target_ip_addr.addr32 == ctx->local_device_info.ip_addr.addr32)
    1204:	e0bffd17 	ldw	r2,-12(fp)
    1208:	10c00983 	ldbu	r3,38(r2)
    120c:	110009c3 	ldbu	r4,39(r2)
    1210:	2008923a 	slli	r4,r4,8
    1214:	20c6b03a 	or	r3,r4,r3
    1218:	11000a03 	ldbu	r4,40(r2)
    121c:	2008943a 	slli	r4,r4,16
    1220:	20c6b03a 	or	r3,r4,r3
    1224:	10800a43 	ldbu	r2,41(r2)
    1228:	1004963a 	slli	r2,r2,24
    122c:	10c4b03a 	or	r2,r2,r3
    1230:	1009883a 	mov	r4,r2
    1234:	e0bffe17 	ldw	r2,-8(fp)
    1238:	10c80e17 	ldw	r3,8248(r2)
    123c:	1806d43a 	srli	r3,r3,16
    1240:	10880f17 	ldw	r2,8252(r2)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	1004943a 	slli	r2,r2,16
    124c:	10c4b03a 	or	r2,r2,r3
    1250:	2080021e 	bne	r4,r2,125c <arp_packet_check+0x70>
   {
      result = 1;
    1254:	00800044 	movi	r2,1
    1258:	e0bfff15 	stw	r2,-4(fp)
   }
   return result;
    125c:	e0bfff17 	ldw	r2,-4(fp)
}
    1260:	e037883a 	mov	sp,fp
    1264:	df000017 	ldw	fp,0(sp)
    1268:	dec00104 	addi	sp,sp,4
    126c:	f800283a 	ret

00001270 <arp_process_rx>:


static int32_t arp_process_rx(network_ctx_t *ctx, void *buffer, uint32_t len)
{
    1270:	defdf604 	addi	sp,sp,-2088
    1274:	dfc20915 	stw	ra,2084(sp)
    1278:	df020815 	stw	fp,2080(sp)
    127c:	df020804 	addi	fp,sp,2080
    1280:	e13dfa15 	stw	r4,-2072(fp)
    1284:	e17df915 	stw	r5,-2076(fp)
    1288:	e1bdf815 	stw	r6,-2080(fp)
   int32_t result = 0;
    128c:	e03fff15 	stw	zero,-4(fp)
   uint32_t tx_len = 0, i;
    1290:	e03ffd15 	stw	zero,-12(fp)
   char out[2048];
   arp_packet_t *arp_packet = (arp_packet_t*)buffer;
    1294:	e0bdf917 	ldw	r2,-2076(fp)
    1298:	e0bffc15 	stw	r2,-16(fp)
   arp_packet_t *arp_reply = (arp_packet_t*)out;
    129c:	e0bdfb04 	addi	r2,fp,-2068
    12a0:	e0bffb15 	stw	r2,-20(fp)

   if(arp_packet_check(ctx, arp_packet) == 1)
    12a4:	e17ffc17 	ldw	r5,-16(fp)
    12a8:	e13dfa17 	ldw	r4,-2072(fp)
    12ac:	00011ec0 	call	11ec <arp_packet_check>
    12b0:	10800058 	cmpnei	r2,r2,1
    12b4:	1001551e 	bne	r2,zero,180c <arp_process_rx+0x59c>
   {
      switch(arp_packet->arp_hdr.op_code)
    12b8:	e0bffc17 	ldw	r2,-16(fp)
    12bc:	10c00503 	ldbu	r3,20(r2)
    12c0:	10800543 	ldbu	r2,21(r2)
    12c4:	1004923a 	slli	r2,r2,8
    12c8:	10c4b03a 	or	r2,r2,r3
    12cc:	10bfffcc 	andi	r2,r2,65535
    12d0:	10c04020 	cmpeqi	r3,r2,256
    12d4:	1800031e 	bne	r3,zero,12e4 <arp_process_rx+0x74>
    12d8:	10808020 	cmpeqi	r2,r2,512
    12dc:	1000f21e 	bne	r2,zero,16a8 <arp_process_rx+0x438>
    12e0:	00014a06 	br	180c <arp_process_rx+0x59c>
      {
         case ARP_REQUEST:
            // send back ARP response
            memcpy(arp_reply->eth_hdr.destination.address, arp_packet->eth_hdr.source.address, 6);
    12e4:	e0fffb17 	ldw	r3,-20(fp)
    12e8:	e0bffc17 	ldw	r2,-16(fp)
    12ec:	10800184 	addi	r2,r2,6
    12f0:	01800184 	movi	r6,6
    12f4:	100b883a 	mov	r5,r2
    12f8:	1809883a 	mov	r4,r3
    12fc:	0015ac00 	call	15ac0 <memcpy>
            memcpy(arp_reply->eth_hdr.source.address, ctx->local_device_info.mac_addr.address, 6);
    1300:	e0bffb17 	ldw	r2,-20(fp)
    1304:	10c00184 	addi	r3,r2,6
    1308:	e0bdfa17 	ldw	r2,-2072(fp)
    130c:	10880d04 	addi	r2,r2,8244
    1310:	01800184 	movi	r6,6
    1314:	100b883a 	mov	r5,r2
    1318:	1809883a 	mov	r4,r3
    131c:	0015ac00 	call	15ac0 <memcpy>

            arp_reply->eth_hdr.type = LEW2BEW(0x0806);
    1320:	e0bffb17 	ldw	r2,-20(fp)
    1324:	10c00303 	ldbu	r3,12(r2)
    1328:	1806703a 	and	r3,r3,zero
    132c:	18c00214 	ori	r3,r3,8
    1330:	10c00305 	stb	r3,12(r2)
    1334:	10c00343 	ldbu	r3,13(r2)
    1338:	1806703a 	and	r3,r3,zero
    133c:	18c00194 	ori	r3,r3,6
    1340:	10c00345 	stb	r3,13(r2)
            arp_reply->arp_hdr.hw_type = arp_packet->arp_hdr.hw_type;
    1344:	e0bffc17 	ldw	r2,-16(fp)
    1348:	10c00383 	ldbu	r3,14(r2)
    134c:	108003c3 	ldbu	r2,15(r2)
    1350:	1004923a 	slli	r2,r2,8
    1354:	10c4b03a 	or	r2,r2,r3
    1358:	100d883a 	mov	r6,r2
    135c:	e0bffb17 	ldw	r2,-20(fp)
    1360:	30ffffcc 	andi	r3,r6,65535
    1364:	19403fcc 	andi	r5,r3,255
    1368:	10c00383 	ldbu	r3,14(r2)
    136c:	1806703a 	and	r3,r3,zero
    1370:	1809883a 	mov	r4,r3
    1374:	2807883a 	mov	r3,r5
    1378:	20c6b03a 	or	r3,r4,r3
    137c:	10c00385 	stb	r3,14(r2)
    1380:	30ffffcc 	andi	r3,r6,65535
    1384:	1806d23a 	srli	r3,r3,8
    1388:	197fffcc 	andi	r5,r3,65535
    138c:	10c003c3 	ldbu	r3,15(r2)
    1390:	1806703a 	and	r3,r3,zero
    1394:	1809883a 	mov	r4,r3
    1398:	2807883a 	mov	r3,r5
    139c:	20c6b03a 	or	r3,r4,r3
    13a0:	10c003c5 	stb	r3,15(r2)
            arp_reply->arp_hdr.mac_addr_len = MAC_ADDR_LENGTH;
    13a4:	e0bffb17 	ldw	r2,-20(fp)
    13a8:	00c00184 	movi	r3,6
    13ac:	10c00485 	stb	r3,18(r2)
            arp_reply->arp_hdr.op_code = 0x0200;
    13b0:	e0bffb17 	ldw	r2,-20(fp)
    13b4:	10c00503 	ldbu	r3,20(r2)
    13b8:	1806703a 	and	r3,r3,zero
    13bc:	10c00505 	stb	r3,20(r2)
    13c0:	10c00543 	ldbu	r3,21(r2)
    13c4:	1806703a 	and	r3,r3,zero
    13c8:	18c00094 	ori	r3,r3,2
    13cc:	10c00545 	stb	r3,21(r2)
            arp_reply->arp_hdr.protocol = arp_packet->arp_hdr.protocol;
    13d0:	e0bffc17 	ldw	r2,-16(fp)
    13d4:	10c00403 	ldbu	r3,16(r2)
    13d8:	10800443 	ldbu	r2,17(r2)
    13dc:	1004923a 	slli	r2,r2,8
    13e0:	10c4b03a 	or	r2,r2,r3
    13e4:	100d883a 	mov	r6,r2
    13e8:	e0bffb17 	ldw	r2,-20(fp)
    13ec:	30ffffcc 	andi	r3,r6,65535
    13f0:	19403fcc 	andi	r5,r3,255
    13f4:	10c00403 	ldbu	r3,16(r2)
    13f8:	1806703a 	and	r3,r3,zero
    13fc:	1809883a 	mov	r4,r3
    1400:	2807883a 	mov	r3,r5
    1404:	20c6b03a 	or	r3,r4,r3
    1408:	10c00405 	stb	r3,16(r2)
    140c:	30ffffcc 	andi	r3,r6,65535
    1410:	1806d23a 	srli	r3,r3,8
    1414:	197fffcc 	andi	r5,r3,65535
    1418:	10c00443 	ldbu	r3,17(r2)
    141c:	1806703a 	and	r3,r3,zero
    1420:	1809883a 	mov	r4,r3
    1424:	2807883a 	mov	r3,r5
    1428:	20c6b03a 	or	r3,r4,r3
    142c:	10c00445 	stb	r3,17(r2)
            arp_reply->arp_hdr.protocol_len = IP_ADDR_LENGTH;
    1430:	e0bffb17 	ldw	r2,-20(fp)
    1434:	00c00104 	movi	r3,4
    1438:	10c004c5 	stb	r3,19(r2)

            arp_reply->arp_hdr.sender_ip_addr.addr32 = ctx->local_device_info.ip_addr.addr32;
    143c:	e0bdfa17 	ldw	r2,-2072(fp)
    1440:	10c80e17 	ldw	r3,8248(r2)
    1444:	1806d43a 	srli	r3,r3,16
    1448:	10880f17 	ldw	r2,8252(r2)
    144c:	10bfffcc 	andi	r2,r2,65535
    1450:	1004943a 	slli	r2,r2,16
    1454:	10c4b03a 	or	r2,r2,r3
    1458:	1007883a 	mov	r3,r2
    145c:	e0bffb17 	ldw	r2,-20(fp)
    1460:	19803fcc 	andi	r6,r3,255
    1464:	11000703 	ldbu	r4,28(r2)
    1468:	2008703a 	and	r4,r4,zero
    146c:	200b883a 	mov	r5,r4
    1470:	3009883a 	mov	r4,r6
    1474:	2908b03a 	or	r4,r5,r4
    1478:	11000705 	stb	r4,28(r2)
    147c:	1808d23a 	srli	r4,r3,8
    1480:	21803fcc 	andi	r6,r4,255
    1484:	11000743 	ldbu	r4,29(r2)
    1488:	2008703a 	and	r4,r4,zero
    148c:	200b883a 	mov	r5,r4
    1490:	3009883a 	mov	r4,r6
    1494:	2908b03a 	or	r4,r5,r4
    1498:	11000745 	stb	r4,29(r2)
    149c:	1808d43a 	srli	r4,r3,16
    14a0:	21803fcc 	andi	r6,r4,255
    14a4:	11000783 	ldbu	r4,30(r2)
    14a8:	2008703a 	and	r4,r4,zero
    14ac:	200b883a 	mov	r5,r4
    14b0:	3009883a 	mov	r4,r6
    14b4:	2908b03a 	or	r4,r5,r4
    14b8:	11000785 	stb	r4,30(r2)
    14bc:	180ad63a 	srli	r5,r3,24
    14c0:	10c007c3 	ldbu	r3,31(r2)
    14c4:	1806703a 	and	r3,r3,zero
    14c8:	1809883a 	mov	r4,r3
    14cc:	2807883a 	mov	r3,r5
    14d0:	20c6b03a 	or	r3,r4,r3
    14d4:	10c007c5 	stb	r3,31(r2)
            memcpy(arp_reply->arp_hdr.sender_mac_addr.address, ctx->local_device_info.mac_addr.address, 6);
    14d8:	e0bffb17 	ldw	r2,-20(fp)
    14dc:	10c00584 	addi	r3,r2,22
    14e0:	e0bdfa17 	ldw	r2,-2072(fp)
    14e4:	10880d04 	addi	r2,r2,8244
    14e8:	01800184 	movi	r6,6
    14ec:	100b883a 	mov	r5,r2
    14f0:	1809883a 	mov	r4,r3
    14f4:	0015ac00 	call	15ac0 <memcpy>

            arp_reply->arp_hdr.target_ip_addr.addr32 = arp_packet->arp_hdr.sender_ip_addr.addr32;
    14f8:	e0bffc17 	ldw	r2,-16(fp)
    14fc:	10c00703 	ldbu	r3,28(r2)
    1500:	11000743 	ldbu	r4,29(r2)
    1504:	2008923a 	slli	r4,r4,8
    1508:	20c6b03a 	or	r3,r4,r3
    150c:	11000783 	ldbu	r4,30(r2)
    1510:	2008943a 	slli	r4,r4,16
    1514:	20c6b03a 	or	r3,r4,r3
    1518:	108007c3 	ldbu	r2,31(r2)
    151c:	1004963a 	slli	r2,r2,24
    1520:	10c4b03a 	or	r2,r2,r3
    1524:	1007883a 	mov	r3,r2
    1528:	e0bffb17 	ldw	r2,-20(fp)
    152c:	19803fcc 	andi	r6,r3,255
    1530:	11000983 	ldbu	r4,38(r2)
    1534:	2008703a 	and	r4,r4,zero
    1538:	200b883a 	mov	r5,r4
    153c:	3009883a 	mov	r4,r6
    1540:	2908b03a 	or	r4,r5,r4
    1544:	11000985 	stb	r4,38(r2)
    1548:	1808d23a 	srli	r4,r3,8
    154c:	21803fcc 	andi	r6,r4,255
    1550:	110009c3 	ldbu	r4,39(r2)
    1554:	2008703a 	and	r4,r4,zero
    1558:	200b883a 	mov	r5,r4
    155c:	3009883a 	mov	r4,r6
    1560:	2908b03a 	or	r4,r5,r4
    1564:	110009c5 	stb	r4,39(r2)
    1568:	1808d43a 	srli	r4,r3,16
    156c:	21803fcc 	andi	r6,r4,255
    1570:	11000a03 	ldbu	r4,40(r2)
    1574:	2008703a 	and	r4,r4,zero
    1578:	200b883a 	mov	r5,r4
    157c:	3009883a 	mov	r4,r6
    1580:	2908b03a 	or	r4,r5,r4
    1584:	11000a05 	stb	r4,40(r2)
    1588:	180ad63a 	srli	r5,r3,24
    158c:	10c00a43 	ldbu	r3,41(r2)
    1590:	1806703a 	and	r3,r3,zero
    1594:	1809883a 	mov	r4,r3
    1598:	2807883a 	mov	r3,r5
    159c:	20c6b03a 	or	r3,r4,r3
    15a0:	10c00a45 	stb	r3,41(r2)
            memcpy(arp_reply->arp_hdr.target_mac_addr.address, arp_packet->eth_hdr.source.address, 6);
    15a4:	e0bffb17 	ldw	r2,-20(fp)
    15a8:	10c00804 	addi	r3,r2,32
    15ac:	e0bffc17 	ldw	r2,-16(fp)
    15b0:	10800184 	addi	r2,r2,6
    15b4:	01800184 	movi	r6,6
    15b8:	100b883a 	mov	r5,r2
    15bc:	1809883a 	mov	r4,r3
    15c0:	0015ac00 	call	15ac0 <memcpy>
            memset(arp_reply->data, 0, 32);
    15c4:	e0bffb17 	ldw	r2,-20(fp)
    15c8:	10800a84 	addi	r2,r2,42
    15cc:	01800804 	movi	r6,32
    15d0:	000b883a 	mov	r5,zero
    15d4:	1009883a 	mov	r4,r2
    15d8:	0015bb00 	call	15bb0 <memset>

            tx_len = sizeof(arp_packet_t);
    15dc:	00800a84 	movi	r2,42
    15e0:	e0bffd15 	stw	r2,-12(fp)
            if(ctx->tx_send)
    15e4:	e0bdfa17 	ldw	r2,-2072(fp)
    15e8:	1088b417 	ldw	r2,8912(r2)
    15ec:	10000726 	beq	r2,zero,160c <arp_process_rx+0x39c>
            {
               result = ctx->tx_send((void*)ctx, (uint8_t*)arp_reply, tx_len);
    15f0:	e0bdfa17 	ldw	r2,-2072(fp)
    15f4:	1088b417 	ldw	r2,8912(r2)
    15f8:	e1bffd17 	ldw	r6,-12(fp)
    15fc:	e17ffb17 	ldw	r5,-20(fp)
    1600:	e13dfa17 	ldw	r4,-2072(fp)
    1604:	103ee83a 	callr	r2
    1608:	e0bfff15 	stw	r2,-4(fp)
            }
            arp_register(ctx, arp_packet->eth_hdr.source, arp_packet->arp_hdr.sender_ip_addr.addr32);
    160c:	e0bffc17 	ldw	r2,-16(fp)
    1610:	10c00703 	ldbu	r3,28(r2)
    1614:	11000743 	ldbu	r4,29(r2)
    1618:	2008923a 	slli	r4,r4,8
    161c:	20c6b03a 	or	r3,r4,r3
    1620:	11000783 	ldbu	r4,30(r2)
    1624:	2008943a 	slli	r4,r4,16
    1628:	20c6b03a 	or	r3,r4,r3
    162c:	108007c3 	ldbu	r2,31(r2)
    1630:	1004963a 	slli	r2,r2,24
    1634:	10c4b03a 	or	r2,r2,r3
    1638:	100b883a 	mov	r5,r2
    163c:	e0bffc17 	ldw	r2,-16(fp)
    1640:	10c00183 	ldbu	r3,6(r2)
    1644:	110001c3 	ldbu	r4,7(r2)
    1648:	2008923a 	slli	r4,r4,8
    164c:	20c6b03a 	or	r3,r4,r3
    1650:	11000203 	ldbu	r4,8(r2)
    1654:	2008943a 	slli	r4,r4,16
    1658:	20c6b03a 	or	r3,r4,r3
    165c:	11000243 	ldbu	r4,9(r2)
    1660:	2008963a 	slli	r4,r4,24
    1664:	20c6b03a 	or	r3,r4,r3
    1668:	0009883a 	mov	r4,zero
    166c:	1809883a 	mov	r4,r3
    1670:	10c00283 	ldbu	r3,10(r2)
    1674:	108002c3 	ldbu	r2,11(r2)
    1678:	1004923a 	slli	r2,r2,8
    167c:	10c6b03a 	or	r3,r2,r3
    1680:	0005883a 	mov	r2,zero
    1684:	18ffffcc 	andi	r3,r3,65535
    1688:	10bfffec 	andhi	r2,r2,65535
    168c:	10c4b03a 	or	r2,r2,r3
    1690:	280f883a 	mov	r7,r5
    1694:	200b883a 	mov	r5,r4
    1698:	100d883a 	mov	r6,r2
    169c:	e13dfa17 	ldw	r4,-2072(fp)
    16a0:	0002c740 	call	2c74 <arp_register>
            break;
    16a4:	00005906 	br	180c <arp_process_rx+0x59c>

         case ARP_REPLY:
            for(i = 0; i < SOCKET_MAX_ITEMS; i++)
    16a8:	e03ffe15 	stw	zero,-8(fp)
    16ac:	00005306 	br	17fc <arp_process_rx+0x58c>
            {
               if(ctx->sockets_items[i].enabled == 1)
    16b0:	e0fdfa17 	ldw	r3,-2072(fp)
    16b4:	e0bffe17 	ldw	r2,-8(fp)
    16b8:	10800a24 	muli	r2,r2,40
    16bc:	1887883a 	add	r3,r3,r2
    16c0:	008001b4 	movhi	r2,6
    16c4:	1099c704 	addi	r2,r2,26396
    16c8:	1885883a 	add	r2,r3,r2
    16cc:	10800003 	ldbu	r2,0(r2)
    16d0:	10803fcc 	andi	r2,r2,255
    16d4:	10800058 	cmpnei	r2,r2,1
    16d8:	1000451e 	bne	r2,zero,17f0 <arp_process_rx+0x580>
               {
                  if(ctx->sockets_items[i].socket.arp_request == 1)
    16dc:	e0fdfa17 	ldw	r3,-2072(fp)
    16e0:	e0bffe17 	ldw	r2,-8(fp)
    16e4:	10800a24 	muli	r2,r2,40
    16e8:	1887883a 	add	r3,r3,r2
    16ec:	008001b4 	movhi	r2,6
    16f0:	1099c584 	addi	r2,r2,26390
    16f4:	1885883a 	add	r2,r3,r2
    16f8:	10800003 	ldbu	r2,0(r2)
    16fc:	10803fcc 	andi	r2,r2,255
    1700:	10800058 	cmpnei	r2,r2,1
    1704:	10003a1e 	bne	r2,zero,17f0 <arp_process_rx+0x580>
                  {
                     if(ctx->sockets_items[i].socket.destination.ip_addr.addr32 == arp_packet->arp_hdr.sender_ip_addr.addr32)
    1708:	e0fdfa17 	ldw	r3,-2072(fp)
    170c:	e0bffe17 	ldw	r2,-8(fp)
    1710:	10800a24 	muli	r2,r2,40
    1714:	1887883a 	add	r3,r3,r2
    1718:	008001b4 	movhi	r2,6
    171c:	1099bf04 	addi	r2,r2,26364
    1720:	1885883a 	add	r2,r3,r2
    1724:	10c00017 	ldw	r3,0(r2)
    1728:	1806d63a 	srli	r3,r3,24
    172c:	11000117 	ldw	r4,4(r2)
    1730:	00804034 	movhi	r2,256
    1734:	10bfffc4 	addi	r2,r2,-1
    1738:	2084703a 	and	r2,r4,r2
    173c:	1004923a 	slli	r2,r2,8
    1740:	10c4b03a 	or	r2,r2,r3
    1744:	100b883a 	mov	r5,r2
    1748:	e0bffc17 	ldw	r2,-16(fp)
    174c:	10c00703 	ldbu	r3,28(r2)
    1750:	11000743 	ldbu	r4,29(r2)
    1754:	2008923a 	slli	r4,r4,8
    1758:	20c6b03a 	or	r3,r4,r3
    175c:	11000783 	ldbu	r4,30(r2)
    1760:	2008943a 	slli	r4,r4,16
    1764:	20c6b03a 	or	r3,r4,r3
    1768:	108007c3 	ldbu	r2,31(r2)
    176c:	1004963a 	slli	r2,r2,24
    1770:	10c4b03a 	or	r2,r2,r3
    1774:	28801e1e 	bne	r5,r2,17f0 <arp_process_rx+0x580>
                     {
                        ctx->sockets_items[i].enabled = 0;
    1778:	e0fdfa17 	ldw	r3,-2072(fp)
    177c:	e0bffe17 	ldw	r2,-8(fp)
    1780:	10800a24 	muli	r2,r2,40
    1784:	1887883a 	add	r3,r3,r2
    1788:	008001b4 	movhi	r2,6
    178c:	1099c704 	addi	r2,r2,26396
    1790:	1885883a 	add	r2,r3,r2
    1794:	10000005 	stb	zero,0(r2)
                        ctx->sockets_items[i].socket.destination.mac_addr = arp_packet->eth_hdr.source;
    1798:	e0fdfa17 	ldw	r3,-2072(fp)
    179c:	e0bffe17 	ldw	r2,-8(fp)
    17a0:	10800a24 	muli	r2,r2,40
    17a4:	1887883a 	add	r3,r3,r2
    17a8:	008001b4 	movhi	r2,6
    17ac:	1099be04 	addi	r2,r2,26360
    17b0:	1885883a 	add	r2,r3,r2
    17b4:	e0fffc17 	ldw	r3,-16(fp)
    17b8:	19000183 	ldbu	r4,6(r3)
    17bc:	11000045 	stb	r4,1(r2)
    17c0:	190001c3 	ldbu	r4,7(r3)
    17c4:	11000085 	stb	r4,2(r2)
    17c8:	19000203 	ldbu	r4,8(r3)
    17cc:	110000c5 	stb	r4,3(r2)
    17d0:	19000243 	ldbu	r4,9(r3)
    17d4:	11000105 	stb	r4,4(r2)
    17d8:	19000283 	ldbu	r4,10(r3)
    17dc:	11000145 	stb	r4,5(r2)
    17e0:	18c002c3 	ldbu	r3,11(r3)
    17e4:	10c00185 	stb	r3,6(r2)
                        break;
    17e8:	0001883a 	nop
                     }
                  }
               }
            }
            break;
    17ec:	00000606 	br	1808 <arp_process_rx+0x598>
            for(i = 0; i < SOCKET_MAX_ITEMS; i++)
    17f0:	e0bffe17 	ldw	r2,-8(fp)
    17f4:	10800044 	addi	r2,r2,1
    17f8:	e0bffe15 	stw	r2,-8(fp)
    17fc:	e0bffe17 	ldw	r2,-8(fp)
    1800:	10800230 	cmpltui	r2,r2,8
    1804:	103faa1e 	bne	r2,zero,16b0 <__alt_mem_mcu_subsystem_ram_0+0x77fe16b0>
            break;
    1808:	0001883a 	nop
      }
   }

   return result;
    180c:	e0bfff17 	ldw	r2,-4(fp)
}
    1810:	e037883a 	mov	sp,fp
    1814:	dfc00117 	ldw	ra,4(sp)
    1818:	df000017 	ldw	fp,0(sp)
    181c:	dec00204 	addi	sp,sp,8
    1820:	f800283a 	ret

00001824 <icmp_checksum>:

uint16_t icmp_checksum(icmp_hdr_t *icmp_hdr, uint32_t len)
{
    1824:	defffa04 	addi	sp,sp,-24
    1828:	df000515 	stw	fp,20(sp)
    182c:	dc800415 	stw	r18,16(sp)
    1830:	dc400315 	stw	r17,12(sp)
    1834:	dc000215 	stw	r16,8(sp)
    1838:	df000504 	addi	fp,sp,20
    183c:	e13ffc15 	stw	r4,-16(fp)
    1840:	e17ffb15 	stw	r5,-20(fp)
   register uint8_t *ptr = ((uint8_t*)icmp_hdr);
    1844:	e4bffc17 	ldw	r18,-16(fp)
   register uint32_t result = 0, i, carry;
    1848:	0021883a 	mov	r16,zero

   for(i = 4; i < len; i++)
    184c:	04400104 	movi	r17,4
    1850:	00000c06 	br	1884 <icmp_checksum+0x60>
   {
      result += (i%2==1) ? ((uint32_t)ptr[i]) : (((uint32_t)ptr[i]) << 8);
    1854:	8880004c 	andi	r2,r17,1
    1858:	10000426 	beq	r2,zero,186c <icmp_checksum+0x48>
    185c:	9445883a 	add	r2,r18,r17
    1860:	10800003 	ldbu	r2,0(r2)
    1864:	10803fcc 	andi	r2,r2,255
    1868:	00000406 	br	187c <icmp_checksum+0x58>
    186c:	9445883a 	add	r2,r18,r17
    1870:	10800003 	ldbu	r2,0(r2)
    1874:	10803fcc 	andi	r2,r2,255
    1878:	1004923a 	slli	r2,r2,8
    187c:	80a1883a 	add	r16,r16,r2
   for(i = 4; i < len; i++)
    1880:	8c400044 	addi	r17,r17,1
    1884:	e0bffb17 	ldw	r2,-20(fp)
    1888:	88bff236 	bltu	r17,r2,1854 <__alt_mem_mcu_subsystem_ram_0+0x77fe1854>
   }
   result += ((uint32_t)ptr[0]) << 8;
    188c:	90800003 	ldbu	r2,0(r18)
    1890:	10803fcc 	andi	r2,r2,255
    1894:	1004923a 	slli	r2,r2,8
    1898:	80a1883a 	add	r16,r16,r2
   result += ((uint32_t)ptr[1]);
    189c:	90800044 	addi	r2,r18,1
    18a0:	10800003 	ldbu	r2,0(r2)
    18a4:	10803fcc 	andi	r2,r2,255
    18a8:	80a1883a 	add	r16,r16,r2


   while(result & 0xffff0000)
    18ac:	00000306 	br	18bc <icmp_checksum+0x98>
   {
      carry = ((result >> 16) & 0x0000ffff);
    18b0:	8022d43a 	srli	r17,r16,16
      result &= 0x0000ffff;
    18b4:	843fffcc 	andi	r16,r16,65535
      result += carry;
    18b8:	8461883a 	add	r16,r16,r17
   while(result & 0xffff0000)
    18bc:	80bfffec 	andhi	r2,r16,65535
    18c0:	103ffb1e 	bne	r2,zero,18b0 <__alt_mem_mcu_subsystem_ram_0+0x77fe18b0>
   }
   result = (0x0000ffff - result) & 0x0000ffff;
    18c4:	00bfffd4 	movui	r2,65535
    18c8:	1405c83a 	sub	r2,r2,r16
    18cc:	143fffcc 	andi	r16,r2,65535
   return (uint16_t)result;
    18d0:	8005883a 	mov	r2,r16
}
    18d4:	e6fffd04 	addi	sp,fp,-12
    18d8:	df000317 	ldw	fp,12(sp)
    18dc:	dc800217 	ldw	r18,8(sp)
    18e0:	dc400117 	ldw	r17,4(sp)
    18e4:	dc000017 	ldw	r16,0(sp)
    18e8:	dec00404 	addi	sp,sp,16
    18ec:	f800283a 	ret

000018f0 <checksum16>:

static uint16_t checksum16(void *ptr, uint32_t len)
{
    18f0:	defff904 	addi	sp,sp,-28
    18f4:	df000615 	stw	fp,24(sp)
    18f8:	dc800515 	stw	r18,20(sp)
    18fc:	dc400415 	stw	r17,16(sp)
    1900:	dc000315 	stw	r16,12(sp)
    1904:	df000604 	addi	fp,sp,24
    1908:	e13ffb15 	stw	r4,-20(fp)
    190c:	e17ffa15 	stw	r5,-24(fp)
   uint32_t result = 0;
    1910:	e03ffc15 	stw	zero,-16(fp)
   register uint32_t value = 0, carry = 0;
    1914:	0021883a 	mov	r16,zero
    1918:	0023883a 	mov	r17,zero
   register uint32_t i = 0;
    191c:	0023883a 	mov	r17,zero
   register uint8_t *buf = (uint8_t*)ptr;
    1920:	e4bffb17 	ldw	r18,-20(fp)
   for(i = 0; i < len; i+=2)
    1924:	0023883a 	mov	r17,zero
    1928:	00000f06 	br	1968 <checksum16+0x78>
   {
      if(i == 10) continue;
    192c:	88800298 	cmpnei	r2,r17,10
    1930:	10000b26 	beq	r2,zero,1960 <checksum16+0x70>
      value +=  ((((uint32_t)buf[i]) << 8) | ((uint32_t)buf[i+1]));
    1934:	9445883a 	add	r2,r18,r17
    1938:	10800003 	ldbu	r2,0(r2)
    193c:	10803fcc 	andi	r2,r2,255
    1940:	1006923a 	slli	r3,r2,8
    1944:	88800044 	addi	r2,r17,1
    1948:	9085883a 	add	r2,r18,r2
    194c:	10800003 	ldbu	r2,0(r2)
    1950:	10803fcc 	andi	r2,r2,255
    1954:	1884b03a 	or	r2,r3,r2
    1958:	80a1883a 	add	r16,r16,r2
    195c:	00000106 	br	1964 <checksum16+0x74>
      if(i == 10) continue;
    1960:	0001883a 	nop
   for(i = 0; i < len; i+=2)
    1964:	8c400084 	addi	r17,r17,2
    1968:	e0bffa17 	ldw	r2,-24(fp)
    196c:	88bfef36 	bltu	r17,r2,192c <__alt_mem_mcu_subsystem_ram_0+0x77fe192c>
   }

   while(value & 0xffff0000)
    1970:	00000306 	br	1980 <checksum16+0x90>
   {
      carry = ((value >> 16) & 0x0000ffff);
    1974:	8022d43a 	srli	r17,r16,16
      value &= 0x0000ffff;
    1978:	843fffcc 	andi	r16,r16,65535
      value += carry;
    197c:	8461883a 	add	r16,r16,r17
   while(value & 0xffff0000)
    1980:	80bfffec 	andhi	r2,r16,65535
    1984:	103ffb1e 	bne	r2,zero,1974 <__alt_mem_mcu_subsystem_ram_0+0x77fe1974>
   }
   result = (0x0000ffff - value) & 0x0000ffff;
    1988:	00bfffd4 	movui	r2,65535
    198c:	1405c83a 	sub	r2,r2,r16
    1990:	10bfffcc 	andi	r2,r2,65535
    1994:	e0bffc15 	stw	r2,-16(fp)

   return (uint16_t)result;
    1998:	e0bffc17 	ldw	r2,-16(fp)
}
    199c:	e6fffd04 	addi	sp,fp,-12
    19a0:	df000317 	ldw	fp,12(sp)
    19a4:	dc800217 	ldw	r18,8(sp)
    19a8:	dc400117 	ldw	r17,4(sp)
    19ac:	dc000017 	ldw	r16,0(sp)
    19b0:	dec00404 	addi	sp,sp,16
    19b4:	f800283a 	ret

000019b8 <icmp_process>:


static int32_t icmp_process(network_ctx_t *ctx, icmp_packet_t *packet, uint32_t len, icmp_packet_t* out)
{
    19b8:	defff804 	addi	sp,sp,-32
    19bc:	dfc00715 	stw	ra,28(sp)
    19c0:	df000615 	stw	fp,24(sp)
    19c4:	dc000515 	stw	r16,20(sp)
    19c8:	df000604 	addi	fp,sp,24
    19cc:	e13ffd15 	stw	r4,-12(fp)
    19d0:	e17ffc15 	stw	r5,-16(fp)
    19d4:	e1bffb15 	stw	r6,-20(fp)
    19d8:	e1fffa15 	stw	r7,-24(fp)
   int32_t result = 0;
    19dc:	e03ffe15 	stw	zero,-8(fp)
   switch(packet->icmp_hdr.type)
    19e0:	e0bffc17 	ldw	r2,-16(fp)
    19e4:	10800883 	ldbu	r2,34(r2)
    19e8:	10803fcc 	andi	r2,r2,255
    19ec:	10800220 	cmpeqi	r2,r2,8
    19f0:	10009026 	beq	r2,zero,1c34 <icmp_process+0x27c>
   {
      // echo request
      case 8:
         out->icmp_hdr.type = 0;
    19f4:	e0bffa17 	ldw	r2,-24(fp)
    19f8:	10000885 	stb	zero,34(r2)
         out->icmp_hdr.code = 0;
    19fc:	e0bffa17 	ldw	r2,-24(fp)
    1a00:	100008c5 	stb	zero,35(r2)
         out->icmp_hdr.id = packet->icmp_hdr.id;
    1a04:	e0bffc17 	ldw	r2,-16(fp)
    1a08:	10c00983 	ldbu	r3,38(r2)
    1a0c:	108009c3 	ldbu	r2,39(r2)
    1a10:	1004923a 	slli	r2,r2,8
    1a14:	10c4b03a 	or	r2,r2,r3
    1a18:	100d883a 	mov	r6,r2
    1a1c:	e0bffa17 	ldw	r2,-24(fp)
    1a20:	30ffffcc 	andi	r3,r6,65535
    1a24:	19403fcc 	andi	r5,r3,255
    1a28:	10c00983 	ldbu	r3,38(r2)
    1a2c:	1806703a 	and	r3,r3,zero
    1a30:	1809883a 	mov	r4,r3
    1a34:	2807883a 	mov	r3,r5
    1a38:	20c6b03a 	or	r3,r4,r3
    1a3c:	10c00985 	stb	r3,38(r2)
    1a40:	30ffffcc 	andi	r3,r6,65535
    1a44:	1806d23a 	srli	r3,r3,8
    1a48:	197fffcc 	andi	r5,r3,65535
    1a4c:	10c009c3 	ldbu	r3,39(r2)
    1a50:	1806703a 	and	r3,r3,zero
    1a54:	1809883a 	mov	r4,r3
    1a58:	2807883a 	mov	r3,r5
    1a5c:	20c6b03a 	or	r3,r4,r3
    1a60:	10c009c5 	stb	r3,39(r2)
         out->icmp_hdr.sequence = packet->icmp_hdr.sequence;
    1a64:	e0bffc17 	ldw	r2,-16(fp)
    1a68:	10c00a03 	ldbu	r3,40(r2)
    1a6c:	10800a43 	ldbu	r2,41(r2)
    1a70:	1004923a 	slli	r2,r2,8
    1a74:	10c4b03a 	or	r2,r2,r3
    1a78:	100d883a 	mov	r6,r2
    1a7c:	e0bffa17 	ldw	r2,-24(fp)
    1a80:	30ffffcc 	andi	r3,r6,65535
    1a84:	19403fcc 	andi	r5,r3,255
    1a88:	10c00a03 	ldbu	r3,40(r2)
    1a8c:	1806703a 	and	r3,r3,zero
    1a90:	1809883a 	mov	r4,r3
    1a94:	2807883a 	mov	r3,r5
    1a98:	20c6b03a 	or	r3,r4,r3
    1a9c:	10c00a05 	stb	r3,40(r2)
    1aa0:	30ffffcc 	andi	r3,r6,65535
    1aa4:	1806d23a 	srli	r3,r3,8
    1aa8:	197fffcc 	andi	r5,r3,65535
    1aac:	10c00a43 	ldbu	r3,41(r2)
    1ab0:	1806703a 	and	r3,r3,zero
    1ab4:	1809883a 	mov	r4,r3
    1ab8:	2807883a 	mov	r3,r5
    1abc:	20c6b03a 	or	r3,r4,r3
    1ac0:	10c00a45 	stb	r3,41(r2)
         memcpy(out->data, packet->data, len - sizeof(icmp_packet_t) + sizeof(icmp_hdr_t));
    1ac4:	e0bffa17 	ldw	r2,-24(fp)
    1ac8:	10c00a84 	addi	r3,r2,42
    1acc:	e0bffc17 	ldw	r2,-16(fp)
    1ad0:	11000a84 	addi	r4,r2,42
    1ad4:	e0bffb17 	ldw	r2,-20(fp)
    1ad8:	10bff784 	addi	r2,r2,-34
    1adc:	100d883a 	mov	r6,r2
    1ae0:	200b883a 	mov	r5,r4
    1ae4:	1809883a 	mov	r4,r3
    1ae8:	0015ac00 	call	15ac0 <memcpy>
         out->icmp_hdr.checksum = LEW2BEW(icmp_checksum(&out->icmp_hdr, (len - sizeof(icmp_packet_t) + sizeof(icmp_hdr_t))));
    1aec:	e0bffa17 	ldw	r2,-24(fp)
    1af0:	10c00884 	addi	r3,r2,34
    1af4:	e0bffb17 	ldw	r2,-20(fp)
    1af8:	10bff784 	addi	r2,r2,-34
    1afc:	100b883a 	mov	r5,r2
    1b00:	1809883a 	mov	r4,r3
    1b04:	00018240 	call	1824 <icmp_checksum>
    1b08:	10bfffcc 	andi	r2,r2,65535
    1b0c:	1004923a 	slli	r2,r2,8
    1b10:	1021883a 	mov	r16,r2
    1b14:	e0bffa17 	ldw	r2,-24(fp)
    1b18:	10c00884 	addi	r3,r2,34
    1b1c:	e0bffb17 	ldw	r2,-20(fp)
    1b20:	10bff784 	addi	r2,r2,-34
    1b24:	100b883a 	mov	r5,r2
    1b28:	1809883a 	mov	r4,r3
    1b2c:	00018240 	call	1824 <icmp_checksum>
    1b30:	10bfffcc 	andi	r2,r2,65535
    1b34:	1005d23a 	srai	r2,r2,8
    1b38:	10803fcc 	andi	r2,r2,255
    1b3c:	8084b03a 	or	r2,r16,r2
    1b40:	100d883a 	mov	r6,r2
    1b44:	e0bffa17 	ldw	r2,-24(fp)
    1b48:	30ffffcc 	andi	r3,r6,65535
    1b4c:	19403fcc 	andi	r5,r3,255
    1b50:	10c00903 	ldbu	r3,36(r2)
    1b54:	1806703a 	and	r3,r3,zero
    1b58:	1809883a 	mov	r4,r3
    1b5c:	2807883a 	mov	r3,r5
    1b60:	20c6b03a 	or	r3,r4,r3
    1b64:	10c00905 	stb	r3,36(r2)
    1b68:	30ffffcc 	andi	r3,r6,65535
    1b6c:	1806d23a 	srli	r3,r3,8
    1b70:	197fffcc 	andi	r5,r3,65535
    1b74:	10c00943 	ldbu	r3,37(r2)
    1b78:	1806703a 	and	r3,r3,zero
    1b7c:	1809883a 	mov	r4,r3
    1b80:	2807883a 	mov	r3,r5
    1b84:	20c6b03a 	or	r3,r4,r3
    1b88:	10c00945 	stb	r3,37(r2)
         result = 8 + (len - sizeof(icmp_packet_t));
    1b8c:	e0bffb17 	ldw	r2,-20(fp)
    1b90:	10bff784 	addi	r2,r2,-34
    1b94:	e0bffe15 	stw	r2,-8(fp)

         arp_register(ctx, packet->eth_hdr.source, packet->ipv4_hdr.sender_ip_addr.addr32);
    1b98:	e0bffc17 	ldw	r2,-16(fp)
    1b9c:	10c00683 	ldbu	r3,26(r2)
    1ba0:	110006c3 	ldbu	r4,27(r2)
    1ba4:	2008923a 	slli	r4,r4,8
    1ba8:	20c6b03a 	or	r3,r4,r3
    1bac:	11000703 	ldbu	r4,28(r2)
    1bb0:	2008943a 	slli	r4,r4,16
    1bb4:	20c6b03a 	or	r3,r4,r3
    1bb8:	10800743 	ldbu	r2,29(r2)
    1bbc:	1004963a 	slli	r2,r2,24
    1bc0:	10c4b03a 	or	r2,r2,r3
    1bc4:	100b883a 	mov	r5,r2
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	10c00183 	ldbu	r3,6(r2)
    1bd0:	110001c3 	ldbu	r4,7(r2)
    1bd4:	2008923a 	slli	r4,r4,8
    1bd8:	20c6b03a 	or	r3,r4,r3
    1bdc:	11000203 	ldbu	r4,8(r2)
    1be0:	2008943a 	slli	r4,r4,16
    1be4:	20c6b03a 	or	r3,r4,r3
    1be8:	11000243 	ldbu	r4,9(r2)
    1bec:	2008963a 	slli	r4,r4,24
    1bf0:	20c6b03a 	or	r3,r4,r3
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	1809883a 	mov	r4,r3
    1bfc:	10c00283 	ldbu	r3,10(r2)
    1c00:	108002c3 	ldbu	r2,11(r2)
    1c04:	1004923a 	slli	r2,r2,8
    1c08:	10c6b03a 	or	r3,r2,r3
    1c0c:	0005883a 	mov	r2,zero
    1c10:	18ffffcc 	andi	r3,r3,65535
    1c14:	10bfffec 	andhi	r2,r2,65535
    1c18:	10c4b03a 	or	r2,r2,r3
    1c1c:	280f883a 	mov	r7,r5
    1c20:	200b883a 	mov	r5,r4
    1c24:	100d883a 	mov	r6,r2
    1c28:	e13ffd17 	ldw	r4,-12(fp)
    1c2c:	0002c740 	call	2c74 <arp_register>
         break;
    1c30:	0001883a 	nop
   }
   return result;
    1c34:	e0bffe17 	ldw	r2,-8(fp)
}
    1c38:	e6ffff04 	addi	sp,fp,-4
    1c3c:	dfc00217 	ldw	ra,8(sp)
    1c40:	df000117 	ldw	fp,4(sp)
    1c44:	dc000017 	ldw	r16,0(sp)
    1c48:	dec00304 	addi	sp,sp,12
    1c4c:	f800283a 	ret

00001c50 <udp_process_rx>:

static int32_t udp_process_rx(network_ctx_t *ctx, eth_udp_packet_t *packet, uint32_t len)
{
    1c50:	defffa04 	addi	sp,sp,-24
    1c54:	dfc00515 	stw	ra,20(sp)
    1c58:	df000415 	stw	fp,16(sp)
    1c5c:	df000404 	addi	fp,sp,16
    1c60:	e13ffe15 	stw	r4,-8(fp)
    1c64:	e17ffd15 	stw	r5,-12(fp)
    1c68:	e1bffc15 	stw	r6,-16(fp)
   uint32_t i;
   for(i = 0; i < SOCKET_MAX_ITEMS; i ++)
    1c6c:	e03fff15 	stw	zero,-4(fp)
    1c70:	00003606 	br	1d4c <udp_process_rx+0xfc>
   {
      if(ctx->sockets_items[i].enabled != 0)
    1c74:	e0fffe17 	ldw	r3,-8(fp)
    1c78:	e0bfff17 	ldw	r2,-4(fp)
    1c7c:	10800a24 	muli	r2,r2,40
    1c80:	1887883a 	add	r3,r3,r2
    1c84:	008001b4 	movhi	r2,6
    1c88:	1099c704 	addi	r2,r2,26396
    1c8c:	1885883a 	add	r2,r3,r2
    1c90:	10800003 	ldbu	r2,0(r2)
    1c94:	10803fcc 	andi	r2,r2,255
    1c98:	10002926 	beq	r2,zero,1d40 <udp_process_rx+0xf0>
      {
         if(ctx->sockets_items[i].socket.src_port == packet->udp_hdr.dst_port)
    1c9c:	e0fffe17 	ldw	r3,-8(fp)
    1ca0:	e0bfff17 	ldw	r2,-4(fp)
    1ca4:	10800a24 	muli	r2,r2,40
    1ca8:	1887883a 	add	r3,r3,r2
    1cac:	008001b4 	movhi	r2,6
    1cb0:	1099c304 	addi	r2,r2,26380
    1cb4:	1885883a 	add	r2,r3,r2
    1cb8:	10800017 	ldw	r2,0(r2)
    1cbc:	1004d23a 	srli	r2,r2,8
    1cc0:	1007883a 	mov	r3,r2
    1cc4:	00bfffc4 	movi	r2,-1
    1cc8:	1884703a 	and	r2,r3,r2
    1ccc:	1009883a 	mov	r4,r2
    1cd0:	e0bffd17 	ldw	r2,-12(fp)
    1cd4:	10c00903 	ldbu	r3,36(r2)
    1cd8:	10800943 	ldbu	r2,37(r2)
    1cdc:	1004923a 	slli	r2,r2,8
    1ce0:	10c4b03a 	or	r2,r2,r3
    1ce4:	20ffffcc 	andi	r3,r4,65535
    1ce8:	10bfffcc 	andi	r2,r2,65535
    1cec:	1880141e 	bne	r3,r2,1d40 <udp_process_rx+0xf0>
         {
            if(ctx->sockets_items[i].socket.rx_cb)
    1cf0:	e0fffe17 	ldw	r3,-8(fp)
    1cf4:	e0bfff17 	ldw	r2,-4(fp)
    1cf8:	10800a24 	muli	r2,r2,40
    1cfc:	1887883a 	add	r3,r3,r2
    1d00:	008001b4 	movhi	r2,6
    1d04:	1099c604 	addi	r2,r2,26392
    1d08:	1885883a 	add	r2,r3,r2
    1d0c:	10800017 	ldw	r2,0(r2)
    1d10:	10000b26 	beq	r2,zero,1d40 <udp_process_rx+0xf0>
            {
               (*ctx->sockets_items[i].socket.rx_cb)((uint8_t*)packet, len);
    1d14:	e0fffe17 	ldw	r3,-8(fp)
    1d18:	e0bfff17 	ldw	r2,-4(fp)
    1d1c:	10800a24 	muli	r2,r2,40
    1d20:	1887883a 	add	r3,r3,r2
    1d24:	008001b4 	movhi	r2,6
    1d28:	1099c604 	addi	r2,r2,26392
    1d2c:	1885883a 	add	r2,r3,r2
    1d30:	10800017 	ldw	r2,0(r2)
    1d34:	e17ffc17 	ldw	r5,-16(fp)
    1d38:	e13ffd17 	ldw	r4,-12(fp)
    1d3c:	103ee83a 	callr	r2
   for(i = 0; i < SOCKET_MAX_ITEMS; i ++)
    1d40:	e0bfff17 	ldw	r2,-4(fp)
    1d44:	10800044 	addi	r2,r2,1
    1d48:	e0bfff15 	stw	r2,-4(fp)
    1d4c:	e0bfff17 	ldw	r2,-4(fp)
    1d50:	10800230 	cmpltui	r2,r2,8
    1d54:	103fc71e 	bne	r2,zero,1c74 <__alt_mem_mcu_subsystem_ram_0+0x77fe1c74>
            }
         }
      }
   }
   return 0;
    1d58:	0005883a 	mov	r2,zero
}
    1d5c:	e037883a 	mov	sp,fp
    1d60:	dfc00117 	ldw	ra,4(sp)
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00204 	addi	sp,sp,8
    1d6c:	f800283a 	ret

00001d70 <ip_process_rx>:

static int32_t ip_process_rx(network_ctx_t *ctx, void *buffer, uint32_t len)
{
    1d70:	defe6504 	addi	sp,sp,-1644
    1d74:	dfc19a15 	stw	ra,1640(sp)
    1d78:	df019915 	stw	fp,1636(sp)
    1d7c:	dc019815 	stw	r16,1632(sp)
    1d80:	df019904 	addi	fp,sp,1636
    1d84:	e13e6915 	stw	r4,-1628(fp)
    1d88:	e17e6815 	stw	r5,-1632(fp)
    1d8c:	e1be6715 	stw	r6,-1636(fp)
   int32_t result = 0;
    1d90:	e03ffe15 	stw	zero,-8(fp)
   uint8_t buf[1600];
   ipv4_packet_t *ipv4_packet = (ipv4_packet_t*)buffer;
    1d94:	e0be6817 	ldw	r2,-1632(fp)
    1d98:	e0bffd15 	stw	r2,-12(fp)
   ipv4_packet_t *ipv4_respon = (ipv4_packet_t*)buf;
    1d9c:	e0be6a04 	addi	r2,fp,-1624
    1da0:	e0bffc15 	stw	r2,-16(fp)
   icmp_packet_t *icmp;
   eth_udp_packet_t *udp;

   switch(ipv4_packet->ipv4_hdr.protocol)
    1da4:	e0bffd17 	ldw	r2,-12(fp)
    1da8:	108005c3 	ldbu	r2,23(r2)
    1dac:	10803fcc 	andi	r2,r2,255
    1db0:	10c00060 	cmpeqi	r3,r2,1
    1db4:	1800031e 	bne	r3,zero,1dc4 <ip_process_rx+0x54>
    1db8:	10800460 	cmpeqi	r2,r2,17
    1dbc:	10000a1e 	bne	r2,zero,1de8 <ip_process_rx+0x78>
         result = udp_process_rx(ctx, udp, len);
         break;

      default:
         //ipv4_packet->ipv4_hdr
         break;
    1dc0:	00001106 	br	1e08 <ip_process_rx+0x98>
         icmp = (icmp_packet_t*)buf;
    1dc4:	e0be6a04 	addi	r2,fp,-1624
    1dc8:	e0bffa15 	stw	r2,-24(fp)
         result = icmp_process(ctx, (icmp_packet_t*)ipv4_packet, len, icmp);
    1dcc:	e1fffa17 	ldw	r7,-24(fp)
    1dd0:	e1be6717 	ldw	r6,-1636(fp)
    1dd4:	e17ffd17 	ldw	r5,-12(fp)
    1dd8:	e13e6917 	ldw	r4,-1628(fp)
    1ddc:	00019b80 	call	19b8 <icmp_process>
    1de0:	e0bffe15 	stw	r2,-8(fp)
         break;
    1de4:	00000806 	br	1e08 <ip_process_rx+0x98>
         udp = (eth_udp_packet_t*)buffer;
    1de8:	e0be6817 	ldw	r2,-1632(fp)
    1dec:	e0bffb15 	stw	r2,-20(fp)
         result = udp_process_rx(ctx, udp, len);
    1df0:	e1be6717 	ldw	r6,-1636(fp)
    1df4:	e17ffb17 	ldw	r5,-20(fp)
    1df8:	e13e6917 	ldw	r4,-1628(fp)
    1dfc:	0001c500 	call	1c50 <udp_process_rx>
    1e00:	e0bffe15 	stw	r2,-8(fp)
         break;
    1e04:	0001883a 	nop
   }

   if(result > 0)
    1e08:	e0bffe17 	ldw	r2,-8(fp)
    1e0c:	0080df0e 	bge	zero,r2,218c <ip_process_rx+0x41c>
   {
      /////////////////////////////////////////////////////////////
      // ethernet header
      memcpy(ipv4_respon->eth_hdr.destination.address, ipv4_packet->eth_hdr.source.address, MAC_ADDR_LENGTH);
    1e10:	e0fffc17 	ldw	r3,-16(fp)
    1e14:	e0bffd17 	ldw	r2,-12(fp)
    1e18:	10800184 	addi	r2,r2,6
    1e1c:	01800184 	movi	r6,6
    1e20:	100b883a 	mov	r5,r2
    1e24:	1809883a 	mov	r4,r3
    1e28:	0015ac00 	call	15ac0 <memcpy>
      memcpy(ipv4_respon->eth_hdr.source.address, ipv4_packet->eth_hdr.destination.address, MAC_ADDR_LENGTH);
    1e2c:	e0bffc17 	ldw	r2,-16(fp)
    1e30:	10800184 	addi	r2,r2,6
    1e34:	e0fffd17 	ldw	r3,-12(fp)
    1e38:	01800184 	movi	r6,6
    1e3c:	180b883a 	mov	r5,r3
    1e40:	1009883a 	mov	r4,r2
    1e44:	0015ac00 	call	15ac0 <memcpy>
      ipv4_respon->eth_hdr.type = ipv4_packet->eth_hdr.type;
    1e48:	e0bffd17 	ldw	r2,-12(fp)
    1e4c:	10c00303 	ldbu	r3,12(r2)
    1e50:	10800343 	ldbu	r2,13(r2)
    1e54:	1004923a 	slli	r2,r2,8
    1e58:	10c4b03a 	or	r2,r2,r3
    1e5c:	100d883a 	mov	r6,r2
    1e60:	e0bffc17 	ldw	r2,-16(fp)
    1e64:	30ffffcc 	andi	r3,r6,65535
    1e68:	19403fcc 	andi	r5,r3,255
    1e6c:	10c00303 	ldbu	r3,12(r2)
    1e70:	1806703a 	and	r3,r3,zero
    1e74:	1809883a 	mov	r4,r3
    1e78:	2807883a 	mov	r3,r5
    1e7c:	20c6b03a 	or	r3,r4,r3
    1e80:	10c00305 	stb	r3,12(r2)
    1e84:	30ffffcc 	andi	r3,r6,65535
    1e88:	1806d23a 	srli	r3,r3,8
    1e8c:	197fffcc 	andi	r5,r3,65535
    1e90:	10c00343 	ldbu	r3,13(r2)
    1e94:	1806703a 	and	r3,r3,zero
    1e98:	1809883a 	mov	r4,r3
    1e9c:	2807883a 	mov	r3,r5
    1ea0:	20c6b03a 	or	r3,r4,r3
    1ea4:	10c00345 	stb	r3,13(r2)

      /////////////////////////////////////////////////////////////
      // IPv4 header
      ipv4_respon->ipv4_hdr.version = ipv4_packet->ipv4_hdr.version;
    1ea8:	e0bffd17 	ldw	r2,-12(fp)
    1eac:	10800383 	ldbu	r2,14(r2)
    1eb0:	1004d13a 	srli	r2,r2,4
    1eb4:	1007883a 	mov	r3,r2
    1eb8:	e0bffc17 	ldw	r2,-16(fp)
    1ebc:	180a913a 	slli	r5,r3,4
    1ec0:	10c00383 	ldbu	r3,14(r2)
    1ec4:	18c003cc 	andi	r3,r3,15
    1ec8:	1809883a 	mov	r4,r3
    1ecc:	2807883a 	mov	r3,r5
    1ed0:	20c6b03a 	or	r3,r4,r3
    1ed4:	10c00385 	stb	r3,14(r2)
      ipv4_respon->ipv4_hdr.hdr_len = ipv4_packet->ipv4_hdr.hdr_len;
    1ed8:	e0bffd17 	ldw	r2,-12(fp)
    1edc:	10800383 	ldbu	r2,14(r2)
    1ee0:	108003cc 	andi	r2,r2,15
    1ee4:	1007883a 	mov	r3,r2
    1ee8:	e0bffc17 	ldw	r2,-16(fp)
    1eec:	194003cc 	andi	r5,r3,15
    1ef0:	11000383 	ldbu	r4,14(r2)
    1ef4:	00fffc04 	movi	r3,-16
    1ef8:	20c6703a 	and	r3,r4,r3
    1efc:	1809883a 	mov	r4,r3
    1f00:	2807883a 	mov	r3,r5
    1f04:	20c6b03a 	or	r3,r4,r3
    1f08:	10c00385 	stb	r3,14(r2)
      ipv4_respon->ipv4_hdr.type = ipv4_packet->ipv4_hdr.type;
    1f0c:	e0bffd17 	ldw	r2,-12(fp)
    1f10:	10c003c3 	ldbu	r3,15(r2)
    1f14:	e0bffc17 	ldw	r2,-16(fp)
    1f18:	10c003c5 	stb	r3,15(r2)
      ipv4_respon->ipv4_hdr.len = ipv4_packet->ipv4_hdr.len;
    1f1c:	e0bffd17 	ldw	r2,-12(fp)
    1f20:	10c00403 	ldbu	r3,16(r2)
    1f24:	10800443 	ldbu	r2,17(r2)
    1f28:	1004923a 	slli	r2,r2,8
    1f2c:	10c4b03a 	or	r2,r2,r3
    1f30:	100d883a 	mov	r6,r2
    1f34:	e0bffc17 	ldw	r2,-16(fp)
    1f38:	30ffffcc 	andi	r3,r6,65535
    1f3c:	19403fcc 	andi	r5,r3,255
    1f40:	10c00403 	ldbu	r3,16(r2)
    1f44:	1806703a 	and	r3,r3,zero
    1f48:	1809883a 	mov	r4,r3
    1f4c:	2807883a 	mov	r3,r5
    1f50:	20c6b03a 	or	r3,r4,r3
    1f54:	10c00405 	stb	r3,16(r2)
    1f58:	30ffffcc 	andi	r3,r6,65535
    1f5c:	1806d23a 	srli	r3,r3,8
    1f60:	197fffcc 	andi	r5,r3,65535
    1f64:	10c00443 	ldbu	r3,17(r2)
    1f68:	1806703a 	and	r3,r3,zero
    1f6c:	1809883a 	mov	r4,r3
    1f70:	2807883a 	mov	r3,r5
    1f74:	20c6b03a 	or	r3,r4,r3
    1f78:	10c00445 	stb	r3,17(r2)
      ipv4_respon->ipv4_hdr.identification = ipv4_packet->ipv4_hdr.identification;
    1f7c:	e0bffd17 	ldw	r2,-12(fp)
    1f80:	10c00483 	ldbu	r3,18(r2)
    1f84:	108004c3 	ldbu	r2,19(r2)
    1f88:	1004923a 	slli	r2,r2,8
    1f8c:	10c4b03a 	or	r2,r2,r3
    1f90:	100d883a 	mov	r6,r2
    1f94:	e0bffc17 	ldw	r2,-16(fp)
    1f98:	30ffffcc 	andi	r3,r6,65535
    1f9c:	19403fcc 	andi	r5,r3,255
    1fa0:	10c00483 	ldbu	r3,18(r2)
    1fa4:	1806703a 	and	r3,r3,zero
    1fa8:	1809883a 	mov	r4,r3
    1fac:	2807883a 	mov	r3,r5
    1fb0:	20c6b03a 	or	r3,r4,r3
    1fb4:	10c00485 	stb	r3,18(r2)
    1fb8:	30ffffcc 	andi	r3,r6,65535
    1fbc:	1806d23a 	srli	r3,r3,8
    1fc0:	197fffcc 	andi	r5,r3,65535
    1fc4:	10c004c3 	ldbu	r3,19(r2)
    1fc8:	1806703a 	and	r3,r3,zero
    1fcc:	1809883a 	mov	r4,r3
    1fd0:	2807883a 	mov	r3,r5
    1fd4:	20c6b03a 	or	r3,r4,r3
    1fd8:	10c004c5 	stb	r3,19(r2)
      ipv4_respon->ipv4_hdr.flags = ipv4_packet->ipv4_hdr.flags;
    1fdc:	e0bffd17 	ldw	r2,-12(fp)
    1fe0:	10c00503 	ldbu	r3,20(r2)
    1fe4:	10800543 	ldbu	r2,21(r2)
    1fe8:	1004923a 	slli	r2,r2,8
    1fec:	10c4b03a 	or	r2,r2,r3
    1ff0:	100d883a 	mov	r6,r2
    1ff4:	e0bffc17 	ldw	r2,-16(fp)
    1ff8:	30ffffcc 	andi	r3,r6,65535
    1ffc:	19403fcc 	andi	r5,r3,255
    2000:	10c00503 	ldbu	r3,20(r2)
    2004:	1806703a 	and	r3,r3,zero
    2008:	1809883a 	mov	r4,r3
    200c:	2807883a 	mov	r3,r5
    2010:	20c6b03a 	or	r3,r4,r3
    2014:	10c00505 	stb	r3,20(r2)
    2018:	30ffffcc 	andi	r3,r6,65535
    201c:	1806d23a 	srli	r3,r3,8
    2020:	197fffcc 	andi	r5,r3,65535
    2024:	10c00543 	ldbu	r3,21(r2)
    2028:	1806703a 	and	r3,r3,zero
    202c:	1809883a 	mov	r4,r3
    2030:	2807883a 	mov	r3,r5
    2034:	20c6b03a 	or	r3,r4,r3
    2038:	10c00545 	stb	r3,21(r2)
      ipv4_respon->ipv4_hdr.ttl = ipv4_packet->ipv4_hdr.ttl;
    203c:	e0bffd17 	ldw	r2,-12(fp)
    2040:	10c00583 	ldbu	r3,22(r2)
    2044:	e0bffc17 	ldw	r2,-16(fp)
    2048:	10c00585 	stb	r3,22(r2)
      ipv4_respon->ipv4_hdr.protocol = ipv4_packet->ipv4_hdr.protocol;
    204c:	e0bffd17 	ldw	r2,-12(fp)
    2050:	10c005c3 	ldbu	r3,23(r2)
    2054:	e0bffc17 	ldw	r2,-16(fp)
    2058:	10c005c5 	stb	r3,23(r2)
      ipv4_respon->ipv4_hdr.sender_ip_addr = ipv4_packet->ipv4_hdr.target_ip_addr;
    205c:	e0bffc17 	ldw	r2,-16(fp)
    2060:	e0fffd17 	ldw	r3,-12(fp)
    2064:	19000783 	ldbu	r4,30(r3)
    2068:	11000685 	stb	r4,26(r2)
    206c:	190007c3 	ldbu	r4,31(r3)
    2070:	110006c5 	stb	r4,27(r2)
    2074:	19000803 	ldbu	r4,32(r3)
    2078:	11000705 	stb	r4,28(r2)
    207c:	18c00843 	ldbu	r3,33(r3)
    2080:	10c00745 	stb	r3,29(r2)
      ipv4_respon->ipv4_hdr.target_ip_addr = ipv4_packet->ipv4_hdr.sender_ip_addr;
    2084:	e0bffc17 	ldw	r2,-16(fp)
    2088:	e0fffd17 	ldw	r3,-12(fp)
    208c:	19000683 	ldbu	r4,26(r3)
    2090:	11000785 	stb	r4,30(r2)
    2094:	190006c3 	ldbu	r4,27(r3)
    2098:	110007c5 	stb	r4,31(r2)
    209c:	19000703 	ldbu	r4,28(r3)
    20a0:	11000805 	stb	r4,32(r2)
    20a4:	18c00743 	ldbu	r3,29(r3)
    20a8:	10c00845 	stb	r3,33(r2)

      ipv4_respon->ipv4_hdr.checksum = 0;
    20ac:	e0bffc17 	ldw	r2,-16(fp)
    20b0:	10c00603 	ldbu	r3,24(r2)
    20b4:	1806703a 	and	r3,r3,zero
    20b8:	10c00605 	stb	r3,24(r2)
    20bc:	10c00643 	ldbu	r3,25(r2)
    20c0:	1806703a 	and	r3,r3,zero
    20c4:	10c00645 	stb	r3,25(r2)
      ipv4_respon->ipv4_hdr.checksum = BEW2LEW(checksum16(&ipv4_respon->ipv4_hdr, sizeof(ipv4_hdr_t)));
    20c8:	e0bffc17 	ldw	r2,-16(fp)
    20cc:	10800384 	addi	r2,r2,14
    20d0:	01400504 	movi	r5,20
    20d4:	1009883a 	mov	r4,r2
    20d8:	00018f00 	call	18f0 <checksum16>
    20dc:	10bfffcc 	andi	r2,r2,65535
    20e0:	1004923a 	slli	r2,r2,8
    20e4:	1021883a 	mov	r16,r2
    20e8:	e0bffc17 	ldw	r2,-16(fp)
    20ec:	10800384 	addi	r2,r2,14
    20f0:	01400504 	movi	r5,20
    20f4:	1009883a 	mov	r4,r2
    20f8:	00018f00 	call	18f0 <checksum16>
    20fc:	10bfffcc 	andi	r2,r2,65535
    2100:	1005d23a 	srai	r2,r2,8
    2104:	10803fcc 	andi	r2,r2,255
    2108:	8084b03a 	or	r2,r16,r2
    210c:	100d883a 	mov	r6,r2
    2110:	e0bffc17 	ldw	r2,-16(fp)
    2114:	30ffffcc 	andi	r3,r6,65535
    2118:	19403fcc 	andi	r5,r3,255
    211c:	10c00603 	ldbu	r3,24(r2)
    2120:	1806703a 	and	r3,r3,zero
    2124:	1809883a 	mov	r4,r3
    2128:	2807883a 	mov	r3,r5
    212c:	20c6b03a 	or	r3,r4,r3
    2130:	10c00605 	stb	r3,24(r2)
    2134:	30ffffcc 	andi	r3,r6,65535
    2138:	1806d23a 	srli	r3,r3,8
    213c:	197fffcc 	andi	r5,r3,65535
    2140:	10c00643 	ldbu	r3,25(r2)
    2144:	1806703a 	and	r3,r3,zero
    2148:	1809883a 	mov	r4,r3
    214c:	2807883a 	mov	r3,r5
    2150:	20c6b03a 	or	r3,r4,r3
    2154:	10c00645 	stb	r3,25(r2)


      if(ctx->tx_send)
    2158:	e0be6917 	ldw	r2,-1628(fp)
    215c:	1088b417 	ldw	r2,8912(r2)
    2160:	10000a26 	beq	r2,zero,218c <ip_process_rx+0x41c>
      {
         result = ctx->tx_send((void*)ctx, buf, result + sizeof(ipv4_packet_t)); // icmp len + eth hdr + ipv4 hdr
    2164:	e0be6917 	ldw	r2,-1628(fp)
    2168:	1088b417 	ldw	r2,8912(r2)
    216c:	e0fffe17 	ldw	r3,-8(fp)
    2170:	19000884 	addi	r4,r3,34
    2174:	e0fe6a04 	addi	r3,fp,-1624
    2178:	200d883a 	mov	r6,r4
    217c:	180b883a 	mov	r5,r3
    2180:	e13e6917 	ldw	r4,-1628(fp)
    2184:	103ee83a 	callr	r2
    2188:	e0bffe15 	stw	r2,-8(fp)
      }
   }

   return result;
    218c:	e0bffe17 	ldw	r2,-8(fp)
}
    2190:	e6ffff04 	addi	sp,fp,-4
    2194:	dfc00217 	ldw	ra,8(sp)
    2198:	df000117 	ldw	fp,4(sp)
    219c:	dc000017 	ldw	r16,0(sp)
    21a0:	dec00304 	addi	sp,sp,12
    21a4:	f800283a 	ret

000021a8 <udp_checksum>:

uint16_t udp_checksum(eth_udp_packet_t *ipv4_packet)
{
    21a8:	defffb04 	addi	sp,sp,-20
    21ac:	df000415 	stw	fp,16(sp)
    21b0:	df000404 	addi	fp,sp,16
    21b4:	e13ffc15 	stw	r4,-16(fp)
   uint32_t result = 0, len, idx;
    21b8:	e03fff15 	stw	zero,-4(fp)
   len = BEW2LEW(ipv4_packet->udp_hdr.len);
    21bc:	e0bffc17 	ldw	r2,-16(fp)
    21c0:	10c00983 	ldbu	r3,38(r2)
    21c4:	108009c3 	ldbu	r2,39(r2)
    21c8:	1004923a 	slli	r2,r2,8
    21cc:	10c4b03a 	or	r2,r2,r3
    21d0:	10bfffcc 	andi	r2,r2,65535
    21d4:	1006923a 	slli	r3,r2,8
    21d8:	e0bffc17 	ldw	r2,-16(fp)
    21dc:	11000983 	ldbu	r4,38(r2)
    21e0:	108009c3 	ldbu	r2,39(r2)
    21e4:	1004923a 	slli	r2,r2,8
    21e8:	1104b03a 	or	r2,r2,r4
    21ec:	10bfffcc 	andi	r2,r2,65535
    21f0:	1004d23a 	srli	r2,r2,8
    21f4:	10bfffcc 	andi	r2,r2,65535
    21f8:	1884b03a 	or	r2,r3,r2
    21fc:	10bfffcc 	andi	r2,r2,65535
    2200:	e0bffd15 	stw	r2,-12(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.sender_ip_addr.addr8[0]) << 8;
    2204:	e0bffc17 	ldw	r2,-16(fp)
    2208:	10800683 	ldbu	r2,26(r2)
    220c:	10803fcc 	andi	r2,r2,255
    2210:	1004923a 	slli	r2,r2,8
    2214:	e0ffff17 	ldw	r3,-4(fp)
    2218:	1885883a 	add	r2,r3,r2
    221c:	e0bfff15 	stw	r2,-4(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.sender_ip_addr.addr8[1]);
    2220:	e0bffc17 	ldw	r2,-16(fp)
    2224:	108006c3 	ldbu	r2,27(r2)
    2228:	10803fcc 	andi	r2,r2,255
    222c:	e0ffff17 	ldw	r3,-4(fp)
    2230:	1885883a 	add	r2,r3,r2
    2234:	e0bfff15 	stw	r2,-4(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.sender_ip_addr.addr8[2]) << 8;
    2238:	e0bffc17 	ldw	r2,-16(fp)
    223c:	10800703 	ldbu	r2,28(r2)
    2240:	10803fcc 	andi	r2,r2,255
    2244:	1004923a 	slli	r2,r2,8
    2248:	e0ffff17 	ldw	r3,-4(fp)
    224c:	1885883a 	add	r2,r3,r2
    2250:	e0bfff15 	stw	r2,-4(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.sender_ip_addr.addr8[3]);
    2254:	e0bffc17 	ldw	r2,-16(fp)
    2258:	10800743 	ldbu	r2,29(r2)
    225c:	10803fcc 	andi	r2,r2,255
    2260:	e0ffff17 	ldw	r3,-4(fp)
    2264:	1885883a 	add	r2,r3,r2
    2268:	e0bfff15 	stw	r2,-4(fp)

   result += ((uint32_t)ipv4_packet->ipv4_hdr.target_ip_addr.addr8[0]) << 8;
    226c:	e0bffc17 	ldw	r2,-16(fp)
    2270:	10800783 	ldbu	r2,30(r2)
    2274:	10803fcc 	andi	r2,r2,255
    2278:	1004923a 	slli	r2,r2,8
    227c:	e0ffff17 	ldw	r3,-4(fp)
    2280:	1885883a 	add	r2,r3,r2
    2284:	e0bfff15 	stw	r2,-4(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.target_ip_addr.addr8[1]);
    2288:	e0bffc17 	ldw	r2,-16(fp)
    228c:	108007c3 	ldbu	r2,31(r2)
    2290:	10803fcc 	andi	r2,r2,255
    2294:	e0ffff17 	ldw	r3,-4(fp)
    2298:	1885883a 	add	r2,r3,r2
    229c:	e0bfff15 	stw	r2,-4(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.target_ip_addr.addr8[2]) << 8;
    22a0:	e0bffc17 	ldw	r2,-16(fp)
    22a4:	10800803 	ldbu	r2,32(r2)
    22a8:	10803fcc 	andi	r2,r2,255
    22ac:	1004923a 	slli	r2,r2,8
    22b0:	e0ffff17 	ldw	r3,-4(fp)
    22b4:	1885883a 	add	r2,r3,r2
    22b8:	e0bfff15 	stw	r2,-4(fp)
   result += ((uint32_t)ipv4_packet->ipv4_hdr.target_ip_addr.addr8[3]);
    22bc:	e0bffc17 	ldw	r2,-16(fp)
    22c0:	10800843 	ldbu	r2,33(r2)
    22c4:	10803fcc 	andi	r2,r2,255
    22c8:	e0ffff17 	ldw	r3,-4(fp)
    22cc:	1885883a 	add	r2,r3,r2
    22d0:	e0bfff15 	stw	r2,-4(fp)

   result += BEW2LEW((uint32_t)ipv4_packet->udp_hdr.dst_port);
    22d4:	e0bffc17 	ldw	r2,-16(fp)
    22d8:	10c00903 	ldbu	r3,36(r2)
    22dc:	10800943 	ldbu	r2,37(r2)
    22e0:	1004923a 	slli	r2,r2,8
    22e4:	10c4b03a 	or	r2,r2,r3
    22e8:	10bfffcc 	andi	r2,r2,65535
    22ec:	1006923a 	slli	r3,r2,8
    22f0:	e0bffc17 	ldw	r2,-16(fp)
    22f4:	11000903 	ldbu	r4,36(r2)
    22f8:	10800943 	ldbu	r2,37(r2)
    22fc:	1004923a 	slli	r2,r2,8
    2300:	1104b03a 	or	r2,r2,r4
    2304:	10bfffcc 	andi	r2,r2,65535
    2308:	1004d23a 	srli	r2,r2,8
    230c:	10bfffcc 	andi	r2,r2,65535
    2310:	1884b03a 	or	r2,r3,r2
    2314:	10bfffcc 	andi	r2,r2,65535
    2318:	e0ffff17 	ldw	r3,-4(fp)
    231c:	1885883a 	add	r2,r3,r2
    2320:	e0bfff15 	stw	r2,-4(fp)

   result += BEW2LEW((uint32_t)ipv4_packet->udp_hdr.src_port);
    2324:	e0bffc17 	ldw	r2,-16(fp)
    2328:	10c00883 	ldbu	r3,34(r2)
    232c:	108008c3 	ldbu	r2,35(r2)
    2330:	1004923a 	slli	r2,r2,8
    2334:	10c4b03a 	or	r2,r2,r3
    2338:	10bfffcc 	andi	r2,r2,65535
    233c:	1006923a 	slli	r3,r2,8
    2340:	e0bffc17 	ldw	r2,-16(fp)
    2344:	11000883 	ldbu	r4,34(r2)
    2348:	108008c3 	ldbu	r2,35(r2)
    234c:	1004923a 	slli	r2,r2,8
    2350:	1104b03a 	or	r2,r2,r4
    2354:	10bfffcc 	andi	r2,r2,65535
    2358:	1004d23a 	srli	r2,r2,8
    235c:	10bfffcc 	andi	r2,r2,65535
    2360:	1884b03a 	or	r2,r3,r2
    2364:	10bfffcc 	andi	r2,r2,65535
    2368:	e0ffff17 	ldw	r3,-4(fp)
    236c:	1885883a 	add	r2,r3,r2
    2370:	e0bfff15 	stw	r2,-4(fp)

   result += ipv4_packet->ipv4_hdr.protocol;
    2374:	e0bffc17 	ldw	r2,-16(fp)
    2378:	108005c3 	ldbu	r2,23(r2)
    237c:	10803fcc 	andi	r2,r2,255
    2380:	e0ffff17 	ldw	r3,-4(fp)
    2384:	1885883a 	add	r2,r3,r2
    2388:	e0bfff15 	stw	r2,-4(fp)
   result += len;
    238c:	e0ffff17 	ldw	r3,-4(fp)
    2390:	e0bffd17 	ldw	r2,-12(fp)
    2394:	1885883a 	add	r2,r3,r2
    2398:	e0bfff15 	stw	r2,-4(fp)
   result += len;
    239c:	e0ffff17 	ldw	r3,-4(fp)
    23a0:	e0bffd17 	ldw	r2,-12(fp)
    23a4:	1885883a 	add	r2,r3,r2
    23a8:	e0bfff15 	stw	r2,-4(fp)

   len -= sizeof(udp_hdr_t);
    23ac:	e0bffd17 	ldw	r2,-12(fp)
    23b0:	10bffe04 	addi	r2,r2,-8
    23b4:	e0bffd15 	stw	r2,-12(fp)
   idx = 0;
    23b8:	e03ffe15 	stw	zero,-8(fp)
   while(idx < len)
    23bc:	00001806 	br	2420 <udp_checksum+0x278>
   {
      if(idx %2 == 0)
    23c0:	e0bffe17 	ldw	r2,-8(fp)
    23c4:	1080004c 	andi	r2,r2,1
    23c8:	10000a1e 	bne	r2,zero,23f4 <udp_checksum+0x24c>
      {
         result += ((uint32_t)ipv4_packet->data[idx]) << 8;
    23cc:	e0fffc17 	ldw	r3,-16(fp)
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	1885883a 	add	r2,r3,r2
    23d8:	10800a83 	ldbu	r2,42(r2)
    23dc:	10803fcc 	andi	r2,r2,255
    23e0:	1004923a 	slli	r2,r2,8
    23e4:	e0ffff17 	ldw	r3,-4(fp)
    23e8:	1885883a 	add	r2,r3,r2
    23ec:	e0bfff15 	stw	r2,-4(fp)
    23f0:	00000806 	br	2414 <udp_checksum+0x26c>
      }
      else
      {
         result += ((uint32_t)ipv4_packet->data[idx]);
    23f4:	e0fffc17 	ldw	r3,-16(fp)
    23f8:	e0bffe17 	ldw	r2,-8(fp)
    23fc:	1885883a 	add	r2,r3,r2
    2400:	10800a83 	ldbu	r2,42(r2)
    2404:	10803fcc 	andi	r2,r2,255
    2408:	e0ffff17 	ldw	r3,-4(fp)
    240c:	1885883a 	add	r2,r3,r2
    2410:	e0bfff15 	stw	r2,-4(fp)
      }
      idx++;
    2414:	e0bffe17 	ldw	r2,-8(fp)
    2418:	10800044 	addi	r2,r2,1
    241c:	e0bffe15 	stw	r2,-8(fp)
   while(idx < len)
    2420:	e0fffe17 	ldw	r3,-8(fp)
    2424:	e0bffd17 	ldw	r2,-12(fp)
    2428:	18bfe536 	bltu	r3,r2,23c0 <__alt_mem_mcu_subsystem_ram_0+0x77fe23c0>
   }

   while((result & 0xFFFF0000) != 0)
    242c:	00000606 	br	2448 <udp_checksum+0x2a0>
   {
      result = (result & 0x0000FFFF) + ((result >> 16) & 0x0000FFFF);
    2430:	e0bfff17 	ldw	r2,-4(fp)
    2434:	10ffffcc 	andi	r3,r2,65535
    2438:	e0bfff17 	ldw	r2,-4(fp)
    243c:	1004d43a 	srli	r2,r2,16
    2440:	1885883a 	add	r2,r3,r2
    2444:	e0bfff15 	stw	r2,-4(fp)
   while((result & 0xFFFF0000) != 0)
    2448:	e0bfff17 	ldw	r2,-4(fp)
    244c:	10bfffec 	andhi	r2,r2,65535
    2450:	103ff71e 	bne	r2,zero,2430 <__alt_mem_mcu_subsystem_ram_0+0x77fe2430>
   }
   result = 0xFFFF - result;
    2454:	00ffffd4 	movui	r3,65535
    2458:	e0bfff17 	ldw	r2,-4(fp)
    245c:	1885c83a 	sub	r2,r3,r2
    2460:	e0bfff15 	stw	r2,-4(fp)

   return (uint16_t)result;
    2464:	e0bfff17 	ldw	r2,-4(fp)
}
    2468:	e037883a 	mov	sp,fp
    246c:	df000017 	ldw	fp,0(sp)
    2470:	dec00104 	addi	sp,sp,4
    2474:	f800283a 	ret

00002478 <udp_send>:

uint8_t frame[ETHERNET_BUF_SIZE];

int32_t udp_send(uint32_t handle, uint8_t* buffer, uint32_t len)
{
    2478:	defff004 	addi	sp,sp,-64
    247c:	dfc00f15 	stw	ra,60(sp)
    2480:	df000e15 	stw	fp,56(sp)
    2484:	dc000d15 	stw	r16,52(sp)
    2488:	df000e04 	addi	fp,sp,56
    248c:	e13ff415 	stw	r4,-48(fp)
    2490:	e17ff315 	stw	r5,-52(fp)
    2494:	e1bff215 	stw	r6,-56(fp)
   network_ctx_t *ctx;
   int32_t result = 0, repeat;
    2498:	e03ffe15 	stw	zero,-8(fp)
   uint32_t i, tx_len, tx_rest = len, udp_max, idx = 0, fragment;
    249c:	e0bff217 	ldw	r2,-56(fp)
    24a0:	e0bffc15 	stw	r2,-16(fp)
    24a4:	e03ffb15 	stw	zero,-20(fp)

   ipv4_socket_t *socket = (ipv4_socket_t*)handle;
    24a8:	e0bff417 	ldw	r2,-48(fp)
    24ac:	e0bff915 	stw	r2,-28(fp)
   eth_udp_packet_t *ipv4_packet = (eth_udp_packet_t*)frame;
    24b0:	008202b4 	movhi	r2,2058
    24b4:	108b9c04 	addi	r2,r2,11888
    24b8:	e0bff815 	stw	r2,-32(fp)

   ctx = (network_ctx_t*)(socket->net_ctx);
    24bc:	e0bff917 	ldw	r2,-28(fp)
    24c0:	10c00003 	ldbu	r3,0(r2)
    24c4:	11000043 	ldbu	r4,1(r2)
    24c8:	2008923a 	slli	r4,r4,8
    24cc:	20c6b03a 	or	r3,r4,r3
    24d0:	11000083 	ldbu	r4,2(r2)
    24d4:	2008943a 	slli	r4,r4,16
    24d8:	20c6b03a 	or	r3,r4,r3
    24dc:	108000c3 	ldbu	r2,3(r2)
    24e0:	1004963a 	slli	r2,r2,24
    24e4:	10c4b03a 	or	r2,r2,r3
    24e8:	e0bff715 	stw	r2,-36(fp)
   udp_max = ctx->mtu - sizeof(eth_udp_packet_t) - 4 - 4;
    24ec:	e0bff717 	ldw	r2,-36(fp)
    24f0:	1088b517 	ldw	r2,8916(r2)
    24f4:	10bff384 	addi	r2,r2,-50
    24f8:	e0bff615 	stw	r2,-40(fp)

   tx_rest = len;
    24fc:	e0bff217 	ldw	r2,-56(fp)
    2500:	e0bffc15 	stw	r2,-16(fp)

   // ethernet header
   ipv4_packet->eth_hdr.destination       = socket->destination.mac_addr;
    2504:	e0bff817 	ldw	r2,-32(fp)
    2508:	e0fff917 	ldw	r3,-28(fp)
    250c:	19000103 	ldbu	r4,4(r3)
    2510:	11000005 	stb	r4,0(r2)
    2514:	19000143 	ldbu	r4,5(r3)
    2518:	11000045 	stb	r4,1(r2)
    251c:	19000183 	ldbu	r4,6(r3)
    2520:	11000085 	stb	r4,2(r2)
    2524:	190001c3 	ldbu	r4,7(r3)
    2528:	110000c5 	stb	r4,3(r2)
    252c:	19000203 	ldbu	r4,8(r3)
    2530:	11000105 	stb	r4,4(r2)
    2534:	18c00243 	ldbu	r3,9(r3)
    2538:	10c00145 	stb	r3,5(r2)
   ipv4_packet->eth_hdr.source            = ((network_ctx_t*)socket->net_ctx)->local_device_info.mac_addr;
    253c:	e0bff917 	ldw	r2,-28(fp)
    2540:	10c00003 	ldbu	r3,0(r2)
    2544:	11000043 	ldbu	r4,1(r2)
    2548:	2008923a 	slli	r4,r4,8
    254c:	20c6b03a 	or	r3,r4,r3
    2550:	11000083 	ldbu	r4,2(r2)
    2554:	2008943a 	slli	r4,r4,16
    2558:	20c6b03a 	or	r3,r4,r3
    255c:	108000c3 	ldbu	r2,3(r2)
    2560:	1004963a 	slli	r2,r2,24
    2564:	10c4b03a 	or	r2,r2,r3
    2568:	1007883a 	mov	r3,r2
    256c:	e0bff817 	ldw	r2,-32(fp)
    2570:	19080d03 	ldbu	r4,8244(r3)
    2574:	11000185 	stb	r4,6(r2)
    2578:	19080d43 	ldbu	r4,8245(r3)
    257c:	110001c5 	stb	r4,7(r2)
    2580:	19080d83 	ldbu	r4,8246(r3)
    2584:	11000205 	stb	r4,8(r2)
    2588:	19080dc3 	ldbu	r4,8247(r3)
    258c:	11000245 	stb	r4,9(r2)
    2590:	19080e03 	ldbu	r4,8248(r3)
    2594:	11000285 	stb	r4,10(r2)
    2598:	18c80e43 	ldbu	r3,8249(r3)
    259c:	10c002c5 	stb	r3,11(r2)
   ipv4_packet->eth_hdr.type              = socket->eth_type;
    25a0:	e0bff917 	ldw	r2,-28(fp)
    25a4:	10c00403 	ldbu	r3,16(r2)
    25a8:	10800443 	ldbu	r2,17(r2)
    25ac:	1004923a 	slli	r2,r2,8
    25b0:	10c4b03a 	or	r2,r2,r3
    25b4:	100d883a 	mov	r6,r2
    25b8:	e0bff817 	ldw	r2,-32(fp)
    25bc:	30ffffcc 	andi	r3,r6,65535
    25c0:	19403fcc 	andi	r5,r3,255
    25c4:	10c00303 	ldbu	r3,12(r2)
    25c8:	1806703a 	and	r3,r3,zero
    25cc:	1809883a 	mov	r4,r3
    25d0:	2807883a 	mov	r3,r5
    25d4:	20c6b03a 	or	r3,r4,r3
    25d8:	10c00305 	stb	r3,12(r2)
    25dc:	30ffffcc 	andi	r3,r6,65535
    25e0:	1806d23a 	srli	r3,r3,8
    25e4:	197fffcc 	andi	r5,r3,65535
    25e8:	10c00343 	ldbu	r3,13(r2)
    25ec:	1806703a 	and	r3,r3,zero
    25f0:	1809883a 	mov	r4,r3
    25f4:	2807883a 	mov	r3,r5
    25f8:	20c6b03a 	or	r3,r4,r3
    25fc:	10c00345 	stb	r3,13(r2)

   // ipv4 header
   ipv4_packet->ipv4_hdr.version          = socket->version;
    2600:	e0bff917 	ldw	r2,-28(fp)
    2604:	108005c3 	ldbu	r2,23(r2)
    2608:	108003cc 	andi	r2,r2,15
    260c:	1007883a 	mov	r3,r2
    2610:	e0bff817 	ldw	r2,-32(fp)
    2614:	180a913a 	slli	r5,r3,4
    2618:	10c00383 	ldbu	r3,14(r2)
    261c:	18c003cc 	andi	r3,r3,15
    2620:	1809883a 	mov	r4,r3
    2624:	2807883a 	mov	r3,r5
    2628:	20c6b03a 	or	r3,r4,r3
    262c:	10c00385 	stb	r3,14(r2)
   ipv4_packet->ipv4_hdr.hdr_len          = socket->hdr_len;
    2630:	e0bff917 	ldw	r2,-28(fp)
    2634:	108005c3 	ldbu	r2,23(r2)
    2638:	1004d13a 	srli	r2,r2,4
    263c:	1007883a 	mov	r3,r2
    2640:	e0bff817 	ldw	r2,-32(fp)
    2644:	194003cc 	andi	r5,r3,15
    2648:	11000383 	ldbu	r4,14(r2)
    264c:	00fffc04 	movi	r3,-16
    2650:	20c6703a 	and	r3,r4,r3
    2654:	1809883a 	mov	r4,r3
    2658:	2807883a 	mov	r3,r5
    265c:	20c6b03a 	or	r3,r4,r3
    2660:	10c00385 	stb	r3,14(r2)
   ipv4_packet->ipv4_hdr.type             = socket->ipv4_type;
    2664:	e0bff917 	ldw	r2,-28(fp)
    2668:	10c00483 	ldbu	r3,18(r2)
    266c:	e0bff817 	ldw	r2,-32(fp)
    2670:	10c003c5 	stb	r3,15(r2)
   //ipv4_packet->ipv4_hdr.len              = LEW2BEW((sizeof(ipv4_hdr_t) + sizeof(udp_hdr_t) + len));
   ipv4_packet->ipv4_hdr.identification   = 0;
    2674:	e0bff817 	ldw	r2,-32(fp)
    2678:	10c00483 	ldbu	r3,18(r2)
    267c:	1806703a 	and	r3,r3,zero
    2680:	10c00485 	stb	r3,18(r2)
    2684:	10c004c3 	ldbu	r3,19(r2)
    2688:	1806703a 	and	r3,r3,zero
    268c:	10c004c5 	stb	r3,19(r2)
   ipv4_packet->ipv4_hdr.flags            = 0;
    2690:	e0bff817 	ldw	r2,-32(fp)
    2694:	10c00503 	ldbu	r3,20(r2)
    2698:	1806703a 	and	r3,r3,zero
    269c:	10c00505 	stb	r3,20(r2)
    26a0:	10c00543 	ldbu	r3,21(r2)
    26a4:	1806703a 	and	r3,r3,zero
    26a8:	10c00545 	stb	r3,21(r2)
   ipv4_packet->ipv4_hdr.ttl              = 0x7f;
    26ac:	e0bff817 	ldw	r2,-32(fp)
    26b0:	00c01fc4 	movi	r3,127
    26b4:	10c00585 	stb	r3,22(r2)
   ipv4_packet->ipv4_hdr.protocol         = socket->protocol;
    26b8:	e0bff917 	ldw	r2,-28(fp)
    26bc:	10c00703 	ldbu	r3,28(r2)
    26c0:	e0bff817 	ldw	r2,-32(fp)
    26c4:	10c005c5 	stb	r3,23(r2)
   ipv4_packet->ipv4_hdr.sender_ip_addr   = ((network_ctx_t*)socket->net_ctx)->local_device_info.ip_addr;
    26c8:	e0bff917 	ldw	r2,-28(fp)
    26cc:	10c00003 	ldbu	r3,0(r2)
    26d0:	11000043 	ldbu	r4,1(r2)
    26d4:	2008923a 	slli	r4,r4,8
    26d8:	20c6b03a 	or	r3,r4,r3
    26dc:	11000083 	ldbu	r4,2(r2)
    26e0:	2008943a 	slli	r4,r4,16
    26e4:	20c6b03a 	or	r3,r4,r3
    26e8:	108000c3 	ldbu	r2,3(r2)
    26ec:	1004963a 	slli	r2,r2,24
    26f0:	10c4b03a 	or	r2,r2,r3
    26f4:	1007883a 	mov	r3,r2
    26f8:	e0bff817 	ldw	r2,-32(fp)
    26fc:	19080e83 	ldbu	r4,8250(r3)
    2700:	11000685 	stb	r4,26(r2)
    2704:	19080ec3 	ldbu	r4,8251(r3)
    2708:	110006c5 	stb	r4,27(r2)
    270c:	19080f03 	ldbu	r4,8252(r3)
    2710:	11000705 	stb	r4,28(r2)
    2714:	18c80f43 	ldbu	r3,8253(r3)
    2718:	10c00745 	stb	r3,29(r2)
   ipv4_packet->ipv4_hdr.target_ip_addr   = socket->destination.ip_addr;
    271c:	e0bff817 	ldw	r2,-32(fp)
    2720:	e0fff917 	ldw	r3,-28(fp)
    2724:	19000283 	ldbu	r4,10(r3)
    2728:	11000785 	stb	r4,30(r2)
    272c:	190002c3 	ldbu	r4,11(r3)
    2730:	110007c5 	stb	r4,31(r2)
    2734:	19000303 	ldbu	r4,12(r3)
    2738:	11000805 	stb	r4,32(r2)
    273c:	18c00343 	ldbu	r3,13(r3)
    2740:	10c00845 	stb	r3,33(r2)
   //ipv4_packet->ipv4_hdr.checksum         = BEW2LEW(checksum16(&ipv4_packet->ipv4_hdr, sizeof(ipv4_hdr_t)));

   // udp header
   ipv4_packet->udp_hdr.src_port          = socket->src_port;
    2744:	e0bff917 	ldw	r2,-28(fp)
    2748:	10c00603 	ldbu	r3,24(r2)
    274c:	10800643 	ldbu	r2,25(r2)
    2750:	1004923a 	slli	r2,r2,8
    2754:	10c4b03a 	or	r2,r2,r3
    2758:	100d883a 	mov	r6,r2
    275c:	e0bff817 	ldw	r2,-32(fp)
    2760:	30ffffcc 	andi	r3,r6,65535
    2764:	19403fcc 	andi	r5,r3,255
    2768:	10c00883 	ldbu	r3,34(r2)
    276c:	1806703a 	and	r3,r3,zero
    2770:	1809883a 	mov	r4,r3
    2774:	2807883a 	mov	r3,r5
    2778:	20c6b03a 	or	r3,r4,r3
    277c:	10c00885 	stb	r3,34(r2)
    2780:	30ffffcc 	andi	r3,r6,65535
    2784:	1806d23a 	srli	r3,r3,8
    2788:	197fffcc 	andi	r5,r3,65535
    278c:	10c008c3 	ldbu	r3,35(r2)
    2790:	1806703a 	and	r3,r3,zero
    2794:	1809883a 	mov	r4,r3
    2798:	2807883a 	mov	r3,r5
    279c:	20c6b03a 	or	r3,r4,r3
    27a0:	10c008c5 	stb	r3,35(r2)
   ipv4_packet->udp_hdr.dst_port          = socket->dst_port;
    27a4:	e0bff917 	ldw	r2,-28(fp)
    27a8:	10c00683 	ldbu	r3,26(r2)
    27ac:	108006c3 	ldbu	r2,27(r2)
    27b0:	1004923a 	slli	r2,r2,8
    27b4:	10c4b03a 	or	r2,r2,r3
    27b8:	100d883a 	mov	r6,r2
    27bc:	e0bff817 	ldw	r2,-32(fp)
    27c0:	30ffffcc 	andi	r3,r6,65535
    27c4:	19403fcc 	andi	r5,r3,255
    27c8:	10c00903 	ldbu	r3,36(r2)
    27cc:	1806703a 	and	r3,r3,zero
    27d0:	1809883a 	mov	r4,r3
    27d4:	2807883a 	mov	r3,r5
    27d8:	20c6b03a 	or	r3,r4,r3
    27dc:	10c00905 	stb	r3,36(r2)
    27e0:	30ffffcc 	andi	r3,r6,65535
    27e4:	1806d23a 	srli	r3,r3,8
    27e8:	197fffcc 	andi	r5,r3,65535
    27ec:	10c00943 	ldbu	r3,37(r2)
    27f0:	1806703a 	and	r3,r3,zero
    27f4:	1809883a 	mov	r4,r3
    27f8:	2807883a 	mov	r3,r5
    27fc:	20c6b03a 	or	r3,r4,r3
    2800:	10c00945 	stb	r3,37(r2)

   if(((network_ctx_t*)socket->net_ctx)->tx_send)
    2804:	e0bff917 	ldw	r2,-28(fp)
    2808:	10c00003 	ldbu	r3,0(r2)
    280c:	11000043 	ldbu	r4,1(r2)
    2810:	2008923a 	slli	r4,r4,8
    2814:	20c6b03a 	or	r3,r4,r3
    2818:	11000083 	ldbu	r4,2(r2)
    281c:	2008943a 	slli	r4,r4,16
    2820:	20c6b03a 	or	r3,r4,r3
    2824:	108000c3 	ldbu	r2,3(r2)
    2828:	1004963a 	slli	r2,r2,24
    282c:	10c4b03a 	or	r2,r2,r3
    2830:	1088b417 	ldw	r2,8912(r2)
    2834:	1000e726 	beq	r2,zero,2bd4 <udp_send+0x75c>
   {
      fragment = 0;
    2838:	e03ffa15 	stw	zero,-24(fp)
      while(tx_rest > 0)
    283c:	0000e306 	br	2bcc <udp_send+0x754>
      {
         tx_len = ((tx_rest > udp_max)? udp_max : tx_rest);
    2840:	e0fff617 	ldw	r3,-40(fp)
    2844:	e0bffc17 	ldw	r2,-16(fp)
    2848:	1880012e 	bgeu	r3,r2,2850 <udp_send+0x3d8>
    284c:	1805883a 	mov	r2,r3
    2850:	e0bff515 	stw	r2,-44(fp)
         tx_rest -= tx_len;
    2854:	e0fffc17 	ldw	r3,-16(fp)
    2858:	e0bff517 	ldw	r2,-44(fp)
    285c:	1885c83a 	sub	r2,r3,r2
    2860:	e0bffc15 	stw	r2,-16(fp)

         ipv4_packet->data[0] = (fragment >> 24) & 0xff;
    2864:	e0bffa17 	ldw	r2,-24(fp)
    2868:	1004d63a 	srli	r2,r2,24
    286c:	1007883a 	mov	r3,r2
    2870:	e0bff817 	ldw	r2,-32(fp)
    2874:	10c00a85 	stb	r3,42(r2)
         ipv4_packet->data[1] = (fragment >> 16) & 0xff;
    2878:	e0bffa17 	ldw	r2,-24(fp)
    287c:	1004d43a 	srli	r2,r2,16
    2880:	1007883a 	mov	r3,r2
    2884:	e0bff817 	ldw	r2,-32(fp)
    2888:	10c00ac5 	stb	r3,43(r2)
         ipv4_packet->data[2] = (fragment >> 8)  & 0xff;
    288c:	e0bffa17 	ldw	r2,-24(fp)
    2890:	1004d23a 	srli	r2,r2,8
    2894:	1007883a 	mov	r3,r2
    2898:	e0bff817 	ldw	r2,-32(fp)
    289c:	10c00b05 	stb	r3,44(r2)
         ipv4_packet->data[3] = (fragment >> 0)  & 0xff;
    28a0:	e0bffa17 	ldw	r2,-24(fp)
    28a4:	1007883a 	mov	r3,r2
    28a8:	e0bff817 	ldw	r2,-32(fp)
    28ac:	10c00b45 	stb	r3,45(r2)
         fragment++;
    28b0:	e0bffa17 	ldw	r2,-24(fp)
    28b4:	10800044 	addi	r2,r2,1
    28b8:	e0bffa15 	stw	r2,-24(fp)

         memcpy((ipv4_packet->data + 4), &(buffer[idx]), tx_len);
    28bc:	e0bff817 	ldw	r2,-32(fp)
    28c0:	10800a84 	addi	r2,r2,42
    28c4:	11000104 	addi	r4,r2,4
    28c8:	e0fff317 	ldw	r3,-52(fp)
    28cc:	e0bffb17 	ldw	r2,-20(fp)
    28d0:	1885883a 	add	r2,r3,r2
    28d4:	e1bff517 	ldw	r6,-44(fp)
    28d8:	100b883a 	mov	r5,r2
    28dc:	0015ac00 	call	15ac0 <memcpy>
         idx += tx_len;
    28e0:	e0fffb17 	ldw	r3,-20(fp)
    28e4:	e0bff517 	ldw	r2,-44(fp)
    28e8:	1885883a 	add	r2,r3,r2
    28ec:	e0bffb15 	stw	r2,-20(fp)

         ipv4_packet->ipv4_hdr.len              = LEW2BEW((sizeof(ipv4_hdr_t) + sizeof(udp_hdr_t) + tx_len + 4));
    28f0:	e0bff517 	ldw	r2,-44(fp)
    28f4:	10800804 	addi	r2,r2,32
    28f8:	1004923a 	slli	r2,r2,8
    28fc:	1007883a 	mov	r3,r2
    2900:	e0bff517 	ldw	r2,-44(fp)
    2904:	10800804 	addi	r2,r2,32
    2908:	1004d23a 	srli	r2,r2,8
    290c:	10803fcc 	andi	r2,r2,255
    2910:	1884b03a 	or	r2,r3,r2
    2914:	100d883a 	mov	r6,r2
    2918:	e0bff817 	ldw	r2,-32(fp)
    291c:	30ffffcc 	andi	r3,r6,65535
    2920:	19403fcc 	andi	r5,r3,255
    2924:	10c00403 	ldbu	r3,16(r2)
    2928:	1806703a 	and	r3,r3,zero
    292c:	1809883a 	mov	r4,r3
    2930:	2807883a 	mov	r3,r5
    2934:	20c6b03a 	or	r3,r4,r3
    2938:	10c00405 	stb	r3,16(r2)
    293c:	30ffffcc 	andi	r3,r6,65535
    2940:	1806d23a 	srli	r3,r3,8
    2944:	197fffcc 	andi	r5,r3,65535
    2948:	10c00443 	ldbu	r3,17(r2)
    294c:	1806703a 	and	r3,r3,zero
    2950:	1809883a 	mov	r4,r3
    2954:	2807883a 	mov	r3,r5
    2958:	20c6b03a 	or	r3,r4,r3
    295c:	10c00445 	stb	r3,17(r2)
         ipv4_packet->ipv4_hdr.checksum         = BEW2LEW(checksum16(&ipv4_packet->ipv4_hdr, sizeof(ipv4_hdr_t)));
    2960:	e0bff817 	ldw	r2,-32(fp)
    2964:	10800384 	addi	r2,r2,14
    2968:	01400504 	movi	r5,20
    296c:	1009883a 	mov	r4,r2
    2970:	00018f00 	call	18f0 <checksum16>
    2974:	10bfffcc 	andi	r2,r2,65535
    2978:	1004923a 	slli	r2,r2,8
    297c:	1021883a 	mov	r16,r2
    2980:	e0bff817 	ldw	r2,-32(fp)
    2984:	10800384 	addi	r2,r2,14
    2988:	01400504 	movi	r5,20
    298c:	1009883a 	mov	r4,r2
    2990:	00018f00 	call	18f0 <checksum16>
    2994:	10bfffcc 	andi	r2,r2,65535
    2998:	1005d23a 	srai	r2,r2,8
    299c:	10803fcc 	andi	r2,r2,255
    29a0:	8084b03a 	or	r2,r16,r2
    29a4:	100d883a 	mov	r6,r2
    29a8:	e0bff817 	ldw	r2,-32(fp)
    29ac:	30ffffcc 	andi	r3,r6,65535
    29b0:	19403fcc 	andi	r5,r3,255
    29b4:	10c00603 	ldbu	r3,24(r2)
    29b8:	1806703a 	and	r3,r3,zero
    29bc:	1809883a 	mov	r4,r3
    29c0:	2807883a 	mov	r3,r5
    29c4:	20c6b03a 	or	r3,r4,r3
    29c8:	10c00605 	stb	r3,24(r2)
    29cc:	30ffffcc 	andi	r3,r6,65535
    29d0:	1806d23a 	srli	r3,r3,8
    29d4:	197fffcc 	andi	r5,r3,65535
    29d8:	10c00643 	ldbu	r3,25(r2)
    29dc:	1806703a 	and	r3,r3,zero
    29e0:	1809883a 	mov	r4,r3
    29e4:	2807883a 	mov	r3,r5
    29e8:	20c6b03a 	or	r3,r4,r3
    29ec:	10c00645 	stb	r3,25(r2)
         ipv4_packet->udp_hdr.len               = LEW2BEW(sizeof(udp_hdr_t) + tx_len + 4);
    29f0:	e0bff517 	ldw	r2,-44(fp)
    29f4:	10800304 	addi	r2,r2,12
    29f8:	1004923a 	slli	r2,r2,8
    29fc:	1007883a 	mov	r3,r2
    2a00:	e0bff517 	ldw	r2,-44(fp)
    2a04:	10800304 	addi	r2,r2,12
    2a08:	1004d23a 	srli	r2,r2,8
    2a0c:	10803fcc 	andi	r2,r2,255
    2a10:	1884b03a 	or	r2,r3,r2
    2a14:	100d883a 	mov	r6,r2
    2a18:	e0bff817 	ldw	r2,-32(fp)
    2a1c:	30ffffcc 	andi	r3,r6,65535
    2a20:	19403fcc 	andi	r5,r3,255
    2a24:	10c00983 	ldbu	r3,38(r2)
    2a28:	1806703a 	and	r3,r3,zero
    2a2c:	1809883a 	mov	r4,r3
    2a30:	2807883a 	mov	r3,r5
    2a34:	20c6b03a 	or	r3,r4,r3
    2a38:	10c00985 	stb	r3,38(r2)
    2a3c:	30ffffcc 	andi	r3,r6,65535
    2a40:	1806d23a 	srli	r3,r3,8
    2a44:	197fffcc 	andi	r5,r3,65535
    2a48:	10c009c3 	ldbu	r3,39(r2)
    2a4c:	1806703a 	and	r3,r3,zero
    2a50:	1809883a 	mov	r4,r3
    2a54:	2807883a 	mov	r3,r5
    2a58:	20c6b03a 	or	r3,r4,r3
    2a5c:	10c009c5 	stb	r3,39(r2)

         ipv4_packet->udp_hdr.checksum          = 0;
    2a60:	e0bff817 	ldw	r2,-32(fp)
    2a64:	10c00a03 	ldbu	r3,40(r2)
    2a68:	1806703a 	and	r3,r3,zero
    2a6c:	10c00a05 	stb	r3,40(r2)
    2a70:	10c00a43 	ldbu	r3,41(r2)
    2a74:	1806703a 	and	r3,r3,zero
    2a78:	10c00a45 	stb	r3,41(r2)
         ipv4_packet->udp_hdr.checksum          = LEW2BEW(udp_checksum(ipv4_packet));
    2a7c:	e13ff817 	ldw	r4,-32(fp)
    2a80:	00021a80 	call	21a8 <udp_checksum>
    2a84:	10bfffcc 	andi	r2,r2,65535
    2a88:	1004923a 	slli	r2,r2,8
    2a8c:	1021883a 	mov	r16,r2
    2a90:	e13ff817 	ldw	r4,-32(fp)
    2a94:	00021a80 	call	21a8 <udp_checksum>
    2a98:	10bfffcc 	andi	r2,r2,65535
    2a9c:	1005d23a 	srai	r2,r2,8
    2aa0:	10803fcc 	andi	r2,r2,255
    2aa4:	8084b03a 	or	r2,r16,r2
    2aa8:	100d883a 	mov	r6,r2
    2aac:	e0bff817 	ldw	r2,-32(fp)
    2ab0:	30ffffcc 	andi	r3,r6,65535
    2ab4:	19403fcc 	andi	r5,r3,255
    2ab8:	10c00a03 	ldbu	r3,40(r2)
    2abc:	1806703a 	and	r3,r3,zero
    2ac0:	1809883a 	mov	r4,r3
    2ac4:	2807883a 	mov	r3,r5
    2ac8:	20c6b03a 	or	r3,r4,r3
    2acc:	10c00a05 	stb	r3,40(r2)
    2ad0:	30ffffcc 	andi	r3,r6,65535
    2ad4:	1806d23a 	srli	r3,r3,8
    2ad8:	197fffcc 	andi	r5,r3,65535
    2adc:	10c00a43 	ldbu	r3,41(r2)
    2ae0:	1806703a 	and	r3,r3,zero
    2ae4:	1809883a 	mov	r4,r3
    2ae8:	2807883a 	mov	r3,r5
    2aec:	20c6b03a 	or	r3,r4,r3
    2af0:	10c00a45 	stb	r3,41(r2)

         repeat = 0;
    2af4:	e03ffd15 	stw	zero,-12(fp)
         while(repeat < socket->repeat_limit)
    2af8:	00002606 	br	2b94 <udp_send+0x71c>
         {
            result = ((network_ctx_t*)socket->net_ctx)->tx_send((void*)(socket->net_ctx), (uint8_t*)frame, tx_len + sizeof(eth_udp_packet_t) + 4);
    2afc:	e0bff917 	ldw	r2,-28(fp)
    2b00:	10c00003 	ldbu	r3,0(r2)
    2b04:	11000043 	ldbu	r4,1(r2)
    2b08:	2008923a 	slli	r4,r4,8
    2b0c:	20c6b03a 	or	r3,r4,r3
    2b10:	11000083 	ldbu	r4,2(r2)
    2b14:	2008943a 	slli	r4,r4,16
    2b18:	20c6b03a 	or	r3,r4,r3
    2b1c:	108000c3 	ldbu	r2,3(r2)
    2b20:	1004963a 	slli	r2,r2,24
    2b24:	10c4b03a 	or	r2,r2,r3
    2b28:	10c8b417 	ldw	r3,8912(r2)
    2b2c:	e0bff917 	ldw	r2,-28(fp)
    2b30:	11000003 	ldbu	r4,0(r2)
    2b34:	11400043 	ldbu	r5,1(r2)
    2b38:	280a923a 	slli	r5,r5,8
    2b3c:	2908b03a 	or	r4,r5,r4
    2b40:	11400083 	ldbu	r5,2(r2)
    2b44:	280a943a 	slli	r5,r5,16
    2b48:	2908b03a 	or	r4,r5,r4
    2b4c:	108000c3 	ldbu	r2,3(r2)
    2b50:	1004963a 	slli	r2,r2,24
    2b54:	1104b03a 	or	r2,r2,r4
    2b58:	1009883a 	mov	r4,r2
    2b5c:	e0bff517 	ldw	r2,-44(fp)
    2b60:	10800b84 	addi	r2,r2,46
    2b64:	100d883a 	mov	r6,r2
    2b68:	014202b4 	movhi	r5,2058
    2b6c:	294b9c04 	addi	r5,r5,11888
    2b70:	183ee83a 	callr	r3
    2b74:	e0bffe15 	stw	r2,-8(fp)
            if(result < 0)
    2b78:	e0bffe17 	ldw	r2,-8(fp)
    2b7c:	1000130e 	bge	r2,zero,2bcc <udp_send+0x754>
            {
               //repeat action
               usleep(100);
    2b80:	01001904 	movi	r4,100
    2b84:	0025e400 	call	25e40 <usleep>
               repeat++;
    2b88:	e0bffd17 	ldw	r2,-12(fp)
    2b8c:	10800044 	addi	r2,r2,1
    2b90:	e0bffd15 	stw	r2,-12(fp)
         while(repeat < socket->repeat_limit)
    2b94:	e0bff917 	ldw	r2,-28(fp)
    2b98:	10c00743 	ldbu	r3,29(r2)
    2b9c:	11000783 	ldbu	r4,30(r2)
    2ba0:	2008923a 	slli	r4,r4,8
    2ba4:	20c6b03a 	or	r3,r4,r3
    2ba8:	110007c3 	ldbu	r4,31(r2)
    2bac:	2008943a 	slli	r4,r4,16
    2bb0:	20c6b03a 	or	r3,r4,r3
    2bb4:	10800803 	ldbu	r2,32(r2)
    2bb8:	1004963a 	slli	r2,r2,24
    2bbc:	10c4b03a 	or	r2,r2,r3
    2bc0:	1007883a 	mov	r3,r2
    2bc4:	e0bffd17 	ldw	r2,-12(fp)
    2bc8:	10ffcc36 	bltu	r2,r3,2afc <__alt_mem_mcu_subsystem_ram_0+0x77fe2afc>
      while(tx_rest > 0)
    2bcc:	e0bffc17 	ldw	r2,-16(fp)
    2bd0:	103f1b1e 	bne	r2,zero,2840 <__alt_mem_mcu_subsystem_ram_0+0x77fe2840>
            }
         }
      }
   }

   return result;
    2bd4:	e0bffe17 	ldw	r2,-8(fp)
}
    2bd8:	e6ffff04 	addi	sp,fp,-4
    2bdc:	dfc00217 	ldw	ra,8(sp)
    2be0:	df000117 	ldw	fp,4(sp)
    2be4:	dc000017 	ldw	r16,0(sp)
    2be8:	dec00304 	addi	sp,sp,12
    2bec:	f800283a 	ret

00002bf0 <mac_addr_compare>:

static uint32_t mac_addr_compare(mac_addr_t mac_addr1, mac_addr_t mac_addr2)
{
    2bf0:	defff904 	addi	sp,sp,-28
    2bf4:	df000615 	stw	fp,24(sp)
    2bf8:	df000604 	addi	fp,sp,24
    2bfc:	e13ffc15 	stw	r4,-16(fp)
    2c00:	e17ffd15 	stw	r5,-12(fp)
    2c04:	e1bffa15 	stw	r6,-24(fp)
    2c08:	e1fffb15 	stw	r7,-20(fp)
   uint32_t result = 1, i;
    2c0c:	00800044 	movi	r2,1
    2c10:	e0bfff15 	stw	r2,-4(fp)
   for(i = 0; i < MAC_ADDR_LENGTH; i++)
    2c14:	e03ffe15 	stw	zero,-8(fp)
    2c18:	00000e06 	br	2c54 <mac_addr_compare+0x64>
   {
      if(mac_addr1.address[i] != mac_addr2.address[i])
    2c1c:	e0bffe17 	ldw	r2,-8(fp)
    2c20:	e085883a 	add	r2,fp,r2
    2c24:	10fffc03 	ldbu	r3,-16(r2)
    2c28:	e0bffe17 	ldw	r2,-8(fp)
    2c2c:	e085883a 	add	r2,fp,r2
    2c30:	10bffa03 	ldbu	r2,-24(r2)
    2c34:	18c03fcc 	andi	r3,r3,255
    2c38:	10803fcc 	andi	r2,r2,255
    2c3c:	18800226 	beq	r3,r2,2c48 <mac_addr_compare+0x58>
      {
         result = 0;
    2c40:	e03fff15 	stw	zero,-4(fp)
         break;
    2c44:	00000606 	br	2c60 <mac_addr_compare+0x70>
   for(i = 0; i < MAC_ADDR_LENGTH; i++)
    2c48:	e0bffe17 	ldw	r2,-8(fp)
    2c4c:	10800044 	addi	r2,r2,1
    2c50:	e0bffe15 	stw	r2,-8(fp)
    2c54:	e0bffe17 	ldw	r2,-8(fp)
    2c58:	108001b0 	cmpltui	r2,r2,6
    2c5c:	103fef1e 	bne	r2,zero,2c1c <__alt_mem_mcu_subsystem_ram_0+0x77fe2c1c>
      }
   }
   return result;
    2c60:	e0bfff17 	ldw	r2,-4(fp)
}
    2c64:	e037883a 	mov	sp,fp
    2c68:	df000017 	ldw	fp,0(sp)
    2c6c:	dec00104 	addi	sp,sp,4
    2c70:	f800283a 	ret

00002c74 <arp_register>:

static int32_t arp_register(network_ctx_t *ctx, mac_addr_t mac_addr, uint32_t ip_addr)
{
    2c74:	defff504 	addi	sp,sp,-44
    2c78:	dfc00a15 	stw	ra,40(sp)
    2c7c:	df000915 	stw	fp,36(sp)
    2c80:	df000904 	addi	fp,sp,36
    2c84:	e13ffa15 	stw	r4,-24(fp)
    2c88:	e17ff815 	stw	r5,-32(fp)
    2c8c:	e1bff915 	stw	r6,-28(fp)
    2c90:	e1fff715 	stw	r7,-36(fp)
   int32_t result = -1;
    2c94:	00bfffc4 	movi	r2,-1
    2c98:	e0bfff15 	stw	r2,-4(fp)
   uint32_t i, j = -1, found = 0, free = 0;
    2c9c:	00bfffc4 	movi	r2,-1
    2ca0:	e0bffd15 	stw	r2,-12(fp)
    2ca4:	e03ffc15 	stw	zero,-16(fp)
    2ca8:	e03ffb15 	stw	zero,-20(fp)
   for(i = 0; i < ARP_TABLE_NUM; i++)
    2cac:	e03ffe15 	stw	zero,-8(fp)
    2cb0:	00003b06 	br	2da0 <arp_register+0x12c>
   {
      if(ctx->arp_ipv4_table[i].enabled == 1)
    2cb4:	e0fffa17 	ldw	r3,-24(fp)
    2cb8:	e0bffe17 	ldw	r2,-8(fp)
    2cbc:	10800524 	muli	r2,r2,20
    2cc0:	1885883a 	add	r2,r3,r2
    2cc4:	10881703 	ldbu	r2,8284(r2)
    2cc8:	10803fcc 	andi	r2,r2,255
    2ccc:	10800058 	cmpnei	r2,r2,1
    2cd0:	10002a1e 	bne	r2,zero,2d7c <arp_register+0x108>
      {
         if(ctx->arp_ipv4_table[i].device_info.ip_addr.addr32 == ip_addr)
    2cd4:	e0fffa17 	ldw	r3,-24(fp)
    2cd8:	e0bffe17 	ldw	r2,-8(fp)
    2cdc:	10800524 	muli	r2,r2,20
    2ce0:	1885883a 	add	r2,r3,r2
    2ce4:	10c81517 	ldw	r3,8276(r2)
    2ce8:	1806d43a 	srli	r3,r3,16
    2cec:	10881617 	ldw	r2,8280(r2)
    2cf0:	10bfffcc 	andi	r2,r2,65535
    2cf4:	1004943a 	slli	r2,r2,16
    2cf8:	10c4b03a 	or	r2,r2,r3
    2cfc:	1007883a 	mov	r3,r2
    2d00:	e0bff717 	ldw	r2,-36(fp)
    2d04:	10c0231e 	bne	r2,r3,2d94 <arp_register+0x120>
         {
            if(mac_addr_compare(ctx->arp_ipv4_table[i].device_info.mac_addr, mac_addr) == 1)
    2d08:	e0fffa17 	ldw	r3,-24(fp)
    2d0c:	e0bffe17 	ldw	r2,-8(fp)
    2d10:	10800524 	muli	r2,r2,20
    2d14:	1885883a 	add	r2,r3,r2
    2d18:	e1bff817 	ldw	r6,-32(fp)
    2d1c:	e1fff917 	ldw	r7,-28(fp)
    2d20:	11081417 	ldw	r4,8272(r2)
    2d24:	11481517 	ldw	r5,8276(r2)
    2d28:	0002bf00 	call	2bf0 <mac_addr_compare>
    2d2c:	10800058 	cmpnei	r2,r2,1
    2d30:	1000051e 	bne	r2,zero,2d48 <arp_register+0xd4>
            {
               found = 1;
    2d34:	00800044 	movi	r2,1
    2d38:	e0bffc15 	stw	r2,-16(fp)
               result = i;
    2d3c:	e0bffe17 	ldw	r2,-8(fp)
    2d40:	e0bfff15 	stw	r2,-4(fp)
               break;
    2d44:	00001906 	br	2dac <arp_register+0x138>
            }
            else
            {
               // rewrite mac address
               ctx->arp_ipv4_table[i].device_info.mac_addr = mac_addr;
    2d48:	e0fffa17 	ldw	r3,-24(fp)
    2d4c:	e0bffe17 	ldw	r2,-8(fp)
    2d50:	10800524 	muli	r2,r2,20
    2d54:	1885883a 	add	r2,r3,r2
    2d58:	e0fff817 	ldw	r3,-32(fp)
    2d5c:	10c81415 	stw	r3,8272(r2)
    2d60:	e0fff90b 	ldhu	r3,-28(fp)
    2d64:	10c8150d 	sth	r3,8276(r2)
               found = 1;
    2d68:	00800044 	movi	r2,1
    2d6c:	e0bffc15 	stw	r2,-16(fp)
               result = i;
    2d70:	e0bffe17 	ldw	r2,-8(fp)
    2d74:	e0bfff15 	stw	r2,-4(fp)
               break;
    2d78:	00000c06 	br	2dac <arp_register+0x138>
            }
         }
      }
      else
      {
         if(free == 0)
    2d7c:	e0bffb17 	ldw	r2,-20(fp)
    2d80:	1000041e 	bne	r2,zero,2d94 <arp_register+0x120>
         {
            free = 1;
    2d84:	00800044 	movi	r2,1
    2d88:	e0bffb15 	stw	r2,-20(fp)
            j = i;
    2d8c:	e0bffe17 	ldw	r2,-8(fp)
    2d90:	e0bffd15 	stw	r2,-12(fp)
   for(i = 0; i < ARP_TABLE_NUM; i++)
    2d94:	e0bffe17 	ldw	r2,-8(fp)
    2d98:	10800044 	addi	r2,r2,1
    2d9c:	e0bffe15 	stw	r2,-8(fp)
    2da0:	e0bffe17 	ldw	r2,-8(fp)
    2da4:	10800830 	cmpltui	r2,r2,32
    2da8:	103fc21e 	bne	r2,zero,2cb4 <__alt_mem_mcu_subsystem_ram_0+0x77fe2cb4>
         }
      }
   }
   if(found == 0)
    2dac:	e0bffc17 	ldw	r2,-16(fp)
    2db0:	10002a1e 	bne	r2,zero,2e5c <arp_register+0x1e8>
   {
      if(free == 1)
    2db4:	e0bffb17 	ldw	r2,-20(fp)
    2db8:	10800058 	cmpnei	r2,r2,1
    2dbc:	1000271e 	bne	r2,zero,2e5c <arp_register+0x1e8>
      {
         if(j != -1)
    2dc0:	e0bffd17 	ldw	r2,-12(fp)
    2dc4:	10bfffe0 	cmpeqi	r2,r2,-1
    2dc8:	1000241e 	bne	r2,zero,2e5c <arp_register+0x1e8>
         {
            ctx->arp_ipv4_table[j].enabled = 1;
    2dcc:	e0fffa17 	ldw	r3,-24(fp)
    2dd0:	e0bffd17 	ldw	r2,-12(fp)
    2dd4:	10800524 	muli	r2,r2,20
    2dd8:	1885883a 	add	r2,r3,r2
    2ddc:	00c00044 	movi	r3,1
    2de0:	10c81705 	stb	r3,8284(r2)
            ctx->arp_ipv4_table[j].device_info.mac_addr = mac_addr;
    2de4:	e0fffa17 	ldw	r3,-24(fp)
    2de8:	e0bffd17 	ldw	r2,-12(fp)
    2dec:	10800524 	muli	r2,r2,20
    2df0:	1885883a 	add	r2,r3,r2
    2df4:	e0fff817 	ldw	r3,-32(fp)
    2df8:	10c81415 	stw	r3,8272(r2)
    2dfc:	e0fff90b 	ldhu	r3,-28(fp)
    2e00:	10c8150d 	sth	r3,8276(r2)
            ctx->arp_ipv4_table[j].device_info.ip_addr.addr32 = ip_addr;
    2e04:	e0fffa17 	ldw	r3,-24(fp)
    2e08:	e0bffd17 	ldw	r2,-12(fp)
    2e0c:	10800524 	muli	r2,r2,20
    2e10:	1885883a 	add	r2,r3,r2
    2e14:	e0fff717 	ldw	r3,-36(fp)
    2e18:	197fffcc 	andi	r5,r3,65535
    2e1c:	10c8158b 	ldhu	r3,8278(r2)
    2e20:	1806703a 	and	r3,r3,zero
    2e24:	1809883a 	mov	r4,r3
    2e28:	2807883a 	mov	r3,r5
    2e2c:	20c6b03a 	or	r3,r4,r3
    2e30:	10c8158d 	sth	r3,8278(r2)
    2e34:	e0fff717 	ldw	r3,-36(fp)
    2e38:	180ad43a 	srli	r5,r3,16
    2e3c:	10c8160b 	ldhu	r3,8280(r2)
    2e40:	1806703a 	and	r3,r3,zero
    2e44:	1809883a 	mov	r4,r3
    2e48:	2807883a 	mov	r3,r5
    2e4c:	20c6b03a 	or	r3,r4,r3
    2e50:	10c8160d 	sth	r3,8280(r2)
            result = j;
    2e54:	e0bffd17 	ldw	r2,-12(fp)
    2e58:	e0bfff15 	stw	r2,-4(fp)
         }
      }
   }
   return result;
    2e5c:	e0bfff17 	ldw	r2,-4(fp)
}
    2e60:	e037883a 	mov	sp,fp
    2e64:	dfc00117 	ldw	ra,4(sp)
    2e68:	df000017 	ldw	fp,0(sp)
    2e6c:	dec00204 	addi	sp,sp,8
    2e70:	f800283a 	ret

00002e74 <get_free_port>:

uint16_t get_free_port()
{
    2e74:	defffe04 	addi	sp,sp,-8
    2e78:	df000115 	stw	fp,4(sp)
    2e7c:	df000104 	addi	fp,sp,4
   uint16_t port = 0;
    2e80:	e03fff8d 	sth	zero,-2(fp)

   return port;
    2e84:	e0bfff8b 	ldhu	r2,-2(fp)
}
    2e88:	e037883a 	mov	sp,fp
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00104 	addi	sp,sp,4
    2e94:	f800283a 	ret

00002e98 <ip_task>:

void ip_task(uint32_t handle)
{
    2e98:	defffe04 	addi	sp,sp,-8
    2e9c:	df000115 	stw	fp,4(sp)
    2ea0:	df000104 	addi	fp,sp,4
    2ea4:	e13fff15 	stw	r4,-4(fp)

}
    2ea8:	0001883a 	nop
    2eac:	e037883a 	mov	sp,fp
    2eb0:	df000017 	ldw	fp,0(sp)
    2eb4:	dec00104 	addi	sp,sp,4
    2eb8:	f800283a 	ret

00002ebc <get_arp>:

static uint32_t get_arp(ip_addr_t target_ip, mac_addr_t *mac_addr)
{
    2ebc:	defffb04 	addi	sp,sp,-20
    2ec0:	df000415 	stw	fp,16(sp)
    2ec4:	df000404 	addi	fp,sp,16
    2ec8:	e13ffd15 	stw	r4,-12(fp)
    2ecc:	e17ffc15 	stw	r5,-16(fp)
   uint32_t i;
   uint32_t result = 0;
    2ed0:	e03ffe15 	stw	zero,-8(fp)
   for(i = 0; i < ARP_TABLE_NUM; i++)
    2ed4:	e03fff15 	stw	zero,-4(fp)
    2ed8:	00003706 	br	2fb8 <get_arp+0xfc>
   {
      if(network_ctx.arp_ipv4_table[i].enabled == 1)
    2edc:	e0bfff17 	ldw	r2,-4(fp)
    2ee0:	10c00524 	muli	r3,r2,20
    2ee4:	00800134 	movhi	r2,4
    2ee8:	1885883a 	add	r2,r3,r2
    2eec:	10ae3703 	ldbu	r2,-18212(r2)
    2ef0:	10803fcc 	andi	r2,r2,255
    2ef4:	10800058 	cmpnei	r2,r2,1
    2ef8:	10002c1e 	bne	r2,zero,2fac <get_arp+0xf0>
      {
         if(network_ctx.arp_ipv4_table[i].device_info.ip_addr.addr32 == target_ip.addr32)
    2efc:	e0bfff17 	ldw	r2,-4(fp)
    2f00:	10c00524 	muli	r3,r2,20
    2f04:	00800134 	movhi	r2,4
    2f08:	1885883a 	add	r2,r3,r2
    2f0c:	10ae3517 	ldw	r2,-18220(r2)
    2f10:	1008d43a 	srli	r4,r2,16
    2f14:	00800134 	movhi	r2,4
    2f18:	1885883a 	add	r2,r3,r2
    2f1c:	10ae3617 	ldw	r2,-18216(r2)
    2f20:	10bfffcc 	andi	r2,r2,65535
    2f24:	1004943a 	slli	r2,r2,16
    2f28:	1104b03a 	or	r2,r2,r4
    2f2c:	1007883a 	mov	r3,r2
    2f30:	e0bffd17 	ldw	r2,-12(fp)
    2f34:	18801d1e 	bne	r3,r2,2fac <get_arp+0xf0>
         {
            //
            *mac_addr = network_ctx.arp_ipv4_table[i].device_info.mac_addr;
    2f38:	e0bffc17 	ldw	r2,-16(fp)
    2f3c:	e0ffff17 	ldw	r3,-4(fp)
    2f40:	18c00524 	muli	r3,r3,20
    2f44:	01000134 	movhi	r4,4
    2f48:	1909883a 	add	r4,r3,r4
    2f4c:	212e3403 	ldbu	r4,-18224(r4)
    2f50:	11000005 	stb	r4,0(r2)
    2f54:	01000134 	movhi	r4,4
    2f58:	1909883a 	add	r4,r3,r4
    2f5c:	212e3443 	ldbu	r4,-18223(r4)
    2f60:	11000045 	stb	r4,1(r2)
    2f64:	01000134 	movhi	r4,4
    2f68:	1909883a 	add	r4,r3,r4
    2f6c:	212e3483 	ldbu	r4,-18222(r4)
    2f70:	11000085 	stb	r4,2(r2)
    2f74:	01000134 	movhi	r4,4
    2f78:	1909883a 	add	r4,r3,r4
    2f7c:	212e34c3 	ldbu	r4,-18221(r4)
    2f80:	110000c5 	stb	r4,3(r2)
    2f84:	01000134 	movhi	r4,4
    2f88:	1909883a 	add	r4,r3,r4
    2f8c:	212e3503 	ldbu	r4,-18220(r4)
    2f90:	11000105 	stb	r4,4(r2)
    2f94:	01000134 	movhi	r4,4
    2f98:	1909883a 	add	r4,r3,r4
    2f9c:	20ee3543 	ldbu	r3,-18219(r4)
    2fa0:	10c00145 	stb	r3,5(r2)
            result = 1;
    2fa4:	00800044 	movi	r2,1
    2fa8:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i < ARP_TABLE_NUM; i++)
    2fac:	e0bfff17 	ldw	r2,-4(fp)
    2fb0:	10800044 	addi	r2,r2,1
    2fb4:	e0bfff15 	stw	r2,-4(fp)
    2fb8:	e0bfff17 	ldw	r2,-4(fp)
    2fbc:	10800830 	cmpltui	r2,r2,32
    2fc0:	103fc61e 	bne	r2,zero,2edc <__alt_mem_mcu_subsystem_ram_0+0x77fe2edc>
         }
      }
   }
   return result;
    2fc4:	e0bffe17 	ldw	r2,-8(fp)
}
    2fc8:	e037883a 	mov	sp,fp
    2fcc:	df000017 	ldw	fp,0(sp)
    2fd0:	dec00104 	addi	sp,sp,4
    2fd4:	f800283a 	ret

00002fd8 <open_socket>:

uint32_t open_socket(ip_addr_t target_ip, uint16_t src_port, uint16_t dst_port, uint8_t protocol, ethernet_rx_cb rx_cb)
{
    2fd8:	defff504 	addi	sp,sp,-44
    2fdc:	dfc00a15 	stw	ra,40(sp)
    2fe0:	df000915 	stw	fp,36(sp)
    2fe4:	df000904 	addi	fp,sp,36
    2fe8:	e13ffa15 	stw	r4,-24(fp)
    2fec:	2805883a 	mov	r2,r5
    2ff0:	3009883a 	mov	r4,r6
    2ff4:	3807883a 	mov	r3,r7
    2ff8:	e0bff90d 	sth	r2,-28(fp)
    2ffc:	2005883a 	mov	r2,r4
    3000:	e0bff80d 	sth	r2,-32(fp)
    3004:	1805883a 	mov	r2,r3
    3008:	e0bff705 	stb	r2,-36(fp)
   uint32_t i, status;
   uint32_t handle = 0;
    300c:	e03ffe15 	stw	zero,-8(fp)
   mac_addr_t mac_addr;
   for(i = 0; i < SOCKET_MAX_ITEMS; i++)
    3010:	e03fff15 	stw	zero,-4(fp)
    3014:	0000e706 	br	33b4 <open_socket+0x3dc>
   {
      if(network_ctx.sockets_items[i].enabled == 0)
    3018:	e0bfff17 	ldw	r2,-4(fp)
    301c:	10c00a24 	muli	r3,r2,40
    3020:	008002b4 	movhi	r2,10
    3024:	10bfe704 	addi	r2,r2,-100
    3028:	1885883a 	add	r2,r3,r2
    302c:	10800003 	ldbu	r2,0(r2)
    3030:	10803fcc 	andi	r2,r2,255
    3034:	1000dc1e 	bne	r2,zero,33a8 <open_socket+0x3d0>
      {
         network_ctx.sockets_items[i].socket.net_ctx  = &network_ctx;
    3038:	00c00134 	movhi	r3,4
    303c:	18e62004 	addi	r3,r3,-26496
    3040:	e0bfff17 	ldw	r2,-4(fp)
    3044:	11000a24 	muli	r4,r2,40
    3048:	008002b4 	movhi	r2,10
    304c:	10bfdd04 	addi	r2,r2,-140
    3050:	2085883a 	add	r2,r4,r2
    3054:	19803fcc 	andi	r6,r3,255
    3058:	11000043 	ldbu	r4,1(r2)
    305c:	2008703a 	and	r4,r4,zero
    3060:	200b883a 	mov	r5,r4
    3064:	3009883a 	mov	r4,r6
    3068:	2908b03a 	or	r4,r5,r4
    306c:	11000045 	stb	r4,1(r2)
    3070:	1808d23a 	srli	r4,r3,8
    3074:	21803fcc 	andi	r6,r4,255
    3078:	11000083 	ldbu	r4,2(r2)
    307c:	2008703a 	and	r4,r4,zero
    3080:	200b883a 	mov	r5,r4
    3084:	3009883a 	mov	r4,r6
    3088:	2908b03a 	or	r4,r5,r4
    308c:	11000085 	stb	r4,2(r2)
    3090:	1808d43a 	srli	r4,r3,16
    3094:	21803fcc 	andi	r6,r4,255
    3098:	110000c3 	ldbu	r4,3(r2)
    309c:	2008703a 	and	r4,r4,zero
    30a0:	200b883a 	mov	r5,r4
    30a4:	3009883a 	mov	r4,r6
    30a8:	2908b03a 	or	r4,r5,r4
    30ac:	110000c5 	stb	r4,3(r2)
    30b0:	180ad63a 	srli	r5,r3,24
    30b4:	10c00103 	ldbu	r3,4(r2)
    30b8:	1806703a 	and	r3,r3,zero
    30bc:	1809883a 	mov	r4,r3
    30c0:	2807883a 	mov	r3,r5
    30c4:	20c6b03a 	or	r3,r4,r3
    30c8:	10c00105 	stb	r3,4(r2)

         network_ctx.sockets_items[i].socket.dst_port = LEW2BEW(dst_port);
    30cc:	e0bff80b 	ldhu	r2,-32(fp)
    30d0:	1004923a 	slli	r2,r2,8
    30d4:	1007883a 	mov	r3,r2
    30d8:	e0bff80b 	ldhu	r2,-32(fp)
    30dc:	1004d23a 	srli	r2,r2,8
    30e0:	1884b03a 	or	r2,r3,r2
    30e4:	100d883a 	mov	r6,r2
    30e8:	e0bfff17 	ldw	r2,-4(fp)
    30ec:	10c00a24 	muli	r3,r2,40
    30f0:	008002b4 	movhi	r2,10
    30f4:	10bfe304 	addi	r2,r2,-116
    30f8:	1885883a 	add	r2,r3,r2
    30fc:	30ffffcc 	andi	r3,r6,65535
    3100:	19403fcc 	andi	r5,r3,255
    3104:	10c000c3 	ldbu	r3,3(r2)
    3108:	1806703a 	and	r3,r3,zero
    310c:	1809883a 	mov	r4,r3
    3110:	2807883a 	mov	r3,r5
    3114:	20c6b03a 	or	r3,r4,r3
    3118:	10c000c5 	stb	r3,3(r2)
    311c:	30ffffcc 	andi	r3,r6,65535
    3120:	1806d23a 	srli	r3,r3,8
    3124:	197fffcc 	andi	r5,r3,65535
    3128:	10c00103 	ldbu	r3,4(r2)
    312c:	1806703a 	and	r3,r3,zero
    3130:	1809883a 	mov	r4,r3
    3134:	2807883a 	mov	r3,r5
    3138:	20c6b03a 	or	r3,r4,r3
    313c:	10c00105 	stb	r3,4(r2)
         network_ctx.sockets_items[i].socket.src_port = LEW2BEW(src_port);
    3140:	e0bff90b 	ldhu	r2,-28(fp)
    3144:	1004923a 	slli	r2,r2,8
    3148:	1007883a 	mov	r3,r2
    314c:	e0bff90b 	ldhu	r2,-28(fp)
    3150:	1004d23a 	srli	r2,r2,8
    3154:	1884b03a 	or	r2,r3,r2
    3158:	100d883a 	mov	r6,r2
    315c:	e0bfff17 	ldw	r2,-4(fp)
    3160:	10c00a24 	muli	r3,r2,40
    3164:	008002b4 	movhi	r2,10
    3168:	10bfe304 	addi	r2,r2,-116
    316c:	1885883a 	add	r2,r3,r2
    3170:	30ffffcc 	andi	r3,r6,65535
    3174:	19403fcc 	andi	r5,r3,255
    3178:	10c00043 	ldbu	r3,1(r2)
    317c:	1806703a 	and	r3,r3,zero
    3180:	1809883a 	mov	r4,r3
    3184:	2807883a 	mov	r3,r5
    3188:	20c6b03a 	or	r3,r4,r3
    318c:	10c00045 	stb	r3,1(r2)
    3190:	30ffffcc 	andi	r3,r6,65535
    3194:	1806d23a 	srli	r3,r3,8
    3198:	197fffcc 	andi	r5,r3,65535
    319c:	10c00083 	ldbu	r3,2(r2)
    31a0:	1806703a 	and	r3,r3,zero
    31a4:	1809883a 	mov	r4,r3
    31a8:	2807883a 	mov	r3,r5
    31ac:	20c6b03a 	or	r3,r4,r3
    31b0:	10c00085 	stb	r3,2(r2)

         network_ctx.sockets_items[i].socket.protocol = protocol;
    31b4:	e0bfff17 	ldw	r2,-4(fp)
    31b8:	10c00a24 	muli	r3,r2,40
    31bc:	008002b4 	movhi	r2,10
    31c0:	10bfe444 	addi	r2,r2,-111
    31c4:	1885883a 	add	r2,r3,r2
    31c8:	e0fff703 	ldbu	r3,-36(fp)
    31cc:	10c00005 	stb	r3,0(r2)
         network_ctx.sockets_items[i].socket.version = 4;
    31d0:	e0bfff17 	ldw	r2,-4(fp)
    31d4:	10c00a24 	muli	r3,r2,40
    31d8:	008002b4 	movhi	r2,10
    31dc:	10bfe204 	addi	r2,r2,-120
    31e0:	1885883a 	add	r2,r3,r2
    31e4:	11000103 	ldbu	r4,4(r2)
    31e8:	00fffc04 	movi	r3,-16
    31ec:	20c6703a 	and	r3,r4,r3
    31f0:	18c00114 	ori	r3,r3,4
    31f4:	10c00105 	stb	r3,4(r2)
         network_ctx.sockets_items[i].socket.hdr_len = 5;
    31f8:	e0bfff17 	ldw	r2,-4(fp)
    31fc:	10c00a24 	muli	r3,r2,40
    3200:	008002b4 	movhi	r2,10
    3204:	10bfe204 	addi	r2,r2,-120
    3208:	1885883a 	add	r2,r3,r2
    320c:	10c00103 	ldbu	r3,4(r2)
    3210:	18c003cc 	andi	r3,r3,15
    3214:	18c01414 	ori	r3,r3,80
    3218:	10c00105 	stb	r3,4(r2)
         network_ctx.sockets_items[i].socket.send_cnt = 0;
    321c:	e0bfff17 	ldw	r2,-4(fp)
    3220:	10c00a24 	muli	r3,r2,40
    3224:	008002b4 	movhi	r2,10
    3228:	10bfe204 	addi	r2,r2,-120
    322c:	1885883a 	add	r2,r3,r2
    3230:	10000015 	stw	zero,0(r2)
         network_ctx.sockets_items[i].socket.repeat_limit = 10;
    3234:	e0bfff17 	ldw	r2,-4(fp)
    3238:	10c00a24 	muli	r3,r2,40
    323c:	008002b4 	movhi	r2,10
    3240:	10bfe404 	addi	r2,r2,-112
    3244:	1885883a 	add	r2,r3,r2
    3248:	10c0008b 	ldhu	r3,2(r2)
    324c:	1806703a 	and	r3,r3,zero
    3250:	18c00294 	ori	r3,r3,10
    3254:	10c0008d 	sth	r3,2(r2)
    3258:	10c0010b 	ldhu	r3,4(r2)
    325c:	1806703a 	and	r3,r3,zero
    3260:	10c0010d 	sth	r3,4(r2)
         network_ctx.sockets_items[i].socket.eth_type = 0x0008;
    3264:	e0bfff17 	ldw	r2,-4(fp)
    3268:	10c00a24 	muli	r3,r2,40
    326c:	008002b4 	movhi	r2,10
    3270:	10bfe104 	addi	r2,r2,-124
    3274:	1885883a 	add	r2,r3,r2
    3278:	10c00043 	ldbu	r3,1(r2)
    327c:	1806703a 	and	r3,r3,zero
    3280:	18c00214 	ori	r3,r3,8
    3284:	10c00045 	stb	r3,1(r2)
    3288:	10c00083 	ldbu	r3,2(r2)
    328c:	1806703a 	and	r3,r3,zero
    3290:	10c00085 	stb	r3,2(r2)
         network_ctx.sockets_items[i].socket.ipv4_type = 0;
    3294:	e0bfff17 	ldw	r2,-4(fp)
    3298:	10c00a24 	muli	r3,r2,40
    329c:	008002b4 	movhi	r2,10
    32a0:	10bfe1c4 	addi	r2,r2,-121
    32a4:	1885883a 	add	r2,r3,r2
    32a8:	10000005 	stb	zero,0(r2)
         network_ctx.sockets_items[i].socket.destination.ip_addr = target_ip;
    32ac:	e0bfff17 	ldw	r2,-4(fp)
    32b0:	10c00a24 	muli	r3,r2,40
    32b4:	008002b4 	movhi	r2,10
    32b8:	10bfdf04 	addi	r2,r2,-132
    32bc:	1885883a 	add	r2,r3,r2
    32c0:	e0fffa03 	ldbu	r3,-24(fp)
    32c4:	10c000c5 	stb	r3,3(r2)
    32c8:	e0fffa43 	ldbu	r3,-23(fp)
    32cc:	10c00105 	stb	r3,4(r2)
    32d0:	e0fffa83 	ldbu	r3,-22(fp)
    32d4:	10c00145 	stb	r3,5(r2)
    32d8:	e0fffac3 	ldbu	r3,-21(fp)
    32dc:	10c00185 	stb	r3,6(r2)
         network_ctx.sockets_items[i].socket.rx_cb = rx_cb;
    32e0:	e0bfff17 	ldw	r2,-4(fp)
    32e4:	10c00a24 	muli	r3,r2,40
    32e8:	008002b4 	movhi	r2,10
    32ec:	10bfe604 	addi	r2,r2,-104
    32f0:	1885883a 	add	r2,r3,r2
    32f4:	e0c00217 	ldw	r3,8(fp)
    32f8:	10c00015 	stw	r3,0(r2)
         // check ARP for target
         //
         status = get_arp(target_ip, &mac_addr);
    32fc:	e0bffb84 	addi	r2,fp,-18
    3300:	100b883a 	mov	r5,r2
    3304:	e13ffa17 	ldw	r4,-24(fp)
    3308:	0002ebc0 	call	2ebc <get_arp>
    330c:	e0bffd15 	stw	r2,-12(fp)
         if(status == 1)
    3310:	e0bffd17 	ldw	r2,-12(fp)
    3314:	10800058 	cmpnei	r2,r2,1
    3318:	10002a1e 	bne	r2,zero,33c4 <open_socket+0x3ec>
         {
            network_ctx.sockets_items[i].socket.destination.mac_addr = mac_addr;
    331c:	e0bfff17 	ldw	r2,-4(fp)
    3320:	10c00a24 	muli	r3,r2,40
    3324:	008002b4 	movhi	r2,10
    3328:	10bfde04 	addi	r2,r2,-136
    332c:	1885883a 	add	r2,r3,r2
    3330:	e0fffb83 	ldbu	r3,-18(fp)
    3334:	10c00045 	stb	r3,1(r2)
    3338:	e0fffbc3 	ldbu	r3,-17(fp)
    333c:	10c00085 	stb	r3,2(r2)
    3340:	e0fffc03 	ldbu	r3,-16(fp)
    3344:	10c000c5 	stb	r3,3(r2)
    3348:	e0fffc43 	ldbu	r3,-15(fp)
    334c:	10c00105 	stb	r3,4(r2)
    3350:	e0fffc83 	ldbu	r3,-14(fp)
    3354:	10c00145 	stb	r3,5(r2)
    3358:	e0fffcc3 	ldbu	r3,-13(fp)
    335c:	10c00185 	stb	r3,6(r2)
            network_ctx.sockets_items[i].enabled = 1;
    3360:	e0bfff17 	ldw	r2,-4(fp)
    3364:	10c00a24 	muli	r3,r2,40
    3368:	008002b4 	movhi	r2,10
    336c:	10bfe704 	addi	r2,r2,-100
    3370:	1885883a 	add	r2,r3,r2
    3374:	00c00044 	movi	r3,1
    3378:	10c00005 	stb	r3,0(r2)
            handle = (uint32_t)(&(network_ctx.sockets_items[i].socket));
    337c:	e0bfff17 	ldw	r2,-4(fp)
    3380:	10c00a24 	muli	r3,r2,40
    3384:	008001b4 	movhi	r2,6
    3388:	1099bd04 	addi	r2,r2,26356
    338c:	1887883a 	add	r3,r3,r2
    3390:	00800134 	movhi	r2,4
    3394:	10a62004 	addi	r2,r2,-26496
    3398:	1885883a 	add	r2,r3,r2
    339c:	10800044 	addi	r2,r2,1
    33a0:	e0bffe15 	stw	r2,-8(fp)
         }
         break;
    33a4:	00000706 	br	33c4 <open_socket+0x3ec>
   for(i = 0; i < SOCKET_MAX_ITEMS; i++)
    33a8:	e0bfff17 	ldw	r2,-4(fp)
    33ac:	10800044 	addi	r2,r2,1
    33b0:	e0bfff15 	stw	r2,-4(fp)
    33b4:	e0bfff17 	ldw	r2,-4(fp)
    33b8:	10800230 	cmpltui	r2,r2,8
    33bc:	103f161e 	bne	r2,zero,3018 <__alt_mem_mcu_subsystem_ram_0+0x77fe3018>
    33c0:	00000106 	br	33c8 <open_socket+0x3f0>
         break;
    33c4:	0001883a 	nop
      }
   }

   return handle;
    33c8:	e0bffe17 	ldw	r2,-8(fp)
}
    33cc:	e037883a 	mov	sp,fp
    33d0:	dfc00117 	ldw	ra,4(sp)
    33d4:	df000017 	ldw	fp,0(sp)
    33d8:	dec00204 	addi	sp,sp,8
    33dc:	f800283a 	ret

000033e0 <close_socket>:

void close_socket(uint32_t handle)
{
    33e0:	defffc04 	addi	sp,sp,-16
    33e4:	dfc00315 	stw	ra,12(sp)
    33e8:	df000215 	stw	fp,8(sp)
    33ec:	df000204 	addi	fp,sp,8
    33f0:	e13ffe15 	stw	r4,-8(fp)
   uint32_t i;
   for(i = 0; i < SOCKET_MAX_ITEMS; i++)
    33f4:	e03fff15 	stw	zero,-4(fp)
    33f8:	00001d06 	br	3470 <close_socket+0x90>
   {
      if(((uint32_t)&(network_ctx.sockets_items[i].socket)) == handle)
    33fc:	e0bfff17 	ldw	r2,-4(fp)
    3400:	10c00a24 	muli	r3,r2,40
    3404:	008001b4 	movhi	r2,6
    3408:	1099bd04 	addi	r2,r2,26356
    340c:	1887883a 	add	r3,r3,r2
    3410:	00800134 	movhi	r2,4
    3414:	10a62004 	addi	r2,r2,-26496
    3418:	1885883a 	add	r2,r3,r2
    341c:	10800044 	addi	r2,r2,1
    3420:	1007883a 	mov	r3,r2
    3424:	e0bffe17 	ldw	r2,-8(fp)
    3428:	10c00e1e 	bne	r2,r3,3464 <close_socket+0x84>
      {
         memset(&(network_ctx.sockets_items[i]), 0, sizeof(ipv4_socket_item_t));
    342c:	e0bfff17 	ldw	r2,-4(fp)
    3430:	10c00a24 	muli	r3,r2,40
    3434:	008001b4 	movhi	r2,6
    3438:	1099bd04 	addi	r2,r2,26356
    343c:	1887883a 	add	r3,r3,r2
    3440:	00800134 	movhi	r2,4
    3444:	10a62004 	addi	r2,r2,-26496
    3448:	1885883a 	add	r2,r3,r2
    344c:	10800044 	addi	r2,r2,1
    3450:	01800a04 	movi	r6,40
    3454:	000b883a 	mov	r5,zero
    3458:	1009883a 	mov	r4,r2
    345c:	0015bb00 	call	15bb0 <memset>
         break;
    3460:	00000606 	br	347c <close_socket+0x9c>
   for(i = 0; i < SOCKET_MAX_ITEMS; i++)
    3464:	e0bfff17 	ldw	r2,-4(fp)
    3468:	10800044 	addi	r2,r2,1
    346c:	e0bfff15 	stw	r2,-4(fp)
    3470:	e0bfff17 	ldw	r2,-4(fp)
    3474:	10800230 	cmpltui	r2,r2,8
    3478:	103fe01e 	bne	r2,zero,33fc <__alt_mem_mcu_subsystem_ram_0+0x77fe33fc>
      }
   }
}
    347c:	0001883a 	nop
    3480:	e037883a 	mov	sp,fp
    3484:	dfc00117 	ldw	ra,4(sp)
    3488:	df000017 	ldw	fp,0(sp)
    348c:	dec00204 	addi	sp,sp,8
    3490:	f800283a 	ret

00003494 <close_all_sockets>:

void close_all_sockets()
{
    3494:	defffe04 	addi	sp,sp,-8
    3498:	dfc00115 	stw	ra,4(sp)
    349c:	df000015 	stw	fp,0(sp)
    34a0:	d839883a 	mov	fp,sp
   memset(&network_ctx.sockets_items, 0, sizeof(network_ctx.sockets_items));
    34a4:	01805004 	movi	r6,320
    34a8:	000b883a 	mov	r5,zero
    34ac:	010002b4 	movhi	r4,10
    34b0:	213fdd44 	addi	r4,r4,-139
    34b4:	0015bb00 	call	15bb0 <memset>
}
    34b8:	0001883a 	nop
    34bc:	e037883a 	mov	sp,fp
    34c0:	dfc00117 	ldw	ra,4(sp)
    34c4:	df000017 	ldw	fp,0(sp)
    34c8:	dec00204 	addi	sp,sp,8
    34cc:	f800283a 	ret

000034d0 <get_net_context>:


uint32_t get_net_context()
{
    34d0:	deffff04 	addi	sp,sp,-4
    34d4:	df000015 	stw	fp,0(sp)
    34d8:	d839883a 	mov	fp,sp
   return (uint32_t)(&network_ctx);
    34dc:	00800134 	movhi	r2,4
    34e0:	10a62004 	addi	r2,r2,-26496
}
    34e4:	e037883a 	mov	sp,fp
    34e8:	df000017 	ldw	fp,0(sp)
    34ec:	dec00104 	addi	sp,sp,4
    34f0:	f800283a 	ret

000034f4 <register_rx_dma>:

void register_rx_dma(uint32_t handle, alt_msgdma_dev *dev)
{
    34f4:	defffd04 	addi	sp,sp,-12
    34f8:	df000215 	stw	fp,8(sp)
    34fc:	df000204 	addi	fp,sp,8
    3500:	e13fff15 	stw	r4,-4(fp)
    3504:	e17ffe15 	stw	r5,-8(fp)
   ((network_ctx_t*)handle)->dma_rx_dev = dev;
    3508:	e0bfff17 	ldw	r2,-4(fp)
    350c:	e0fffe17 	ldw	r3,-8(fp)
    3510:	10c00515 	stw	r3,20(r2)
}
    3514:	0001883a 	nop
    3518:	e037883a 	mov	sp,fp
    351c:	df000017 	ldw	fp,0(sp)
    3520:	dec00104 	addi	sp,sp,4
    3524:	f800283a 	ret

00003528 <register_tx_dma>:

void register_tx_dma(uint32_t handle, alt_msgdma_dev *dev)
{
    3528:	defffd04 	addi	sp,sp,-12
    352c:	df000215 	stw	fp,8(sp)
    3530:	df000204 	addi	fp,sp,8
    3534:	e13fff15 	stw	r4,-4(fp)
    3538:	e17ffe15 	stw	r5,-8(fp)
   ((network_ctx_t*)handle)->dma_tx_dev = dev;
    353c:	e0bfff17 	ldw	r2,-4(fp)
    3540:	e0fffe17 	ldw	r3,-8(fp)
    3544:	10c00415 	stw	r3,16(r2)
}
    3548:	0001883a 	nop
    354c:	e037883a 	mov	sp,fp
    3550:	df000017 	ldw	fp,0(sp)
    3554:	dec00104 	addi	sp,sp,4
    3558:	f800283a 	ret

0000355c <ethernet_enable>:

void ethernet_enable(np_tse_mac *tse, uint32_t enabled)
{
    355c:	defffb04 	addi	sp,sp,-20
    3560:	dfc00415 	stw	ra,16(sp)
    3564:	df000315 	stw	fp,12(sp)
    3568:	df000304 	addi	fp,sp,12
    356c:	e13ffe15 	stw	r4,-8(fp)
    3570:	e17ffd15 	stw	r5,-12(fp)
   if(enabled == 0)
    3574:	e0bffd17 	ldw	r2,-12(fp)
    3578:	1000021e 	bne	r2,zero,3584 <ethernet_enable+0x28>
   {
      phy_ethernet_reset(1);
    357c:	01000044 	movi	r4,1
    3580:	00005340 	call	534 <phy_ethernet_reset>
   }

   tse_mac_SwReset(tse);
    3584:	e13ffe17 	ldw	r4,-8(fp)
    3588:	0028cd00 	call	28cd0 <tse_mac_SwReset>

   uint32_t value;
   value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    358c:	e0bffe17 	ldw	r2,-8(fp)
    3590:	10800204 	addi	r2,r2,8
    3594:	10800037 	ldwio	r2,0(r2)
    3598:	e0bfff15 	stw	r2,-4(fp)
   if(enabled == 0)
    359c:	e0bffd17 	ldw	r2,-12(fp)
    35a0:	1000051e 	bne	r2,zero,35b8 <ethernet_enable+0x5c>
   {
      value &= ~(ALTERA_TSEMAC_CMD_TX_ENA_MSK | ALTERA_TSEMAC_CMD_RX_ENA_MSK);
    35a4:	e0ffff17 	ldw	r3,-4(fp)
    35a8:	00bfff04 	movi	r2,-4
    35ac:	1884703a 	and	r2,r3,r2
    35b0:	e0bfff15 	stw	r2,-4(fp)
    35b4:	00000506 	br	35cc <ethernet_enable+0x70>
   }
   else
   {
      value |= (ALTERA_TSEMAC_CMD_TX_ENA_MSK | ALTERA_TSEMAC_CMD_RX_ENA_MSK | ALTERA_TSEMAC_CMD_DISABLE_READ_TIMEOUT_MSK);
    35b8:	e0ffff17 	ldw	r3,-4(fp)
    35bc:	00820034 	movhi	r2,2048
    35c0:	108000c4 	addi	r2,r2,3
    35c4:	1884b03a 	or	r2,r3,r2
    35c8:	e0bfff15 	stw	r2,-4(fp)
   }

   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, value);
    35cc:	e0bffe17 	ldw	r2,-8(fp)
    35d0:	10800204 	addi	r2,r2,8
    35d4:	e0ffff17 	ldw	r3,-4(fp)
    35d8:	10c00035 	stwio	r3,0(r2)

   if(enabled != 0)
    35dc:	e0bffd17 	ldw	r2,-12(fp)
    35e0:	10000226 	beq	r2,zero,35ec <ethernet_enable+0x90>
   {
      phy_ethernet_reset(0);
    35e4:	0009883a 	mov	r4,zero
    35e8:	00005340 	call	534 <phy_ethernet_reset>
   }
}
    35ec:	0001883a 	nop
    35f0:	e037883a 	mov	sp,fp
    35f4:	dfc00117 	ldw	ra,4(sp)
    35f8:	df000017 	ldw	fp,0(sp)
    35fc:	dec00204 	addi	sp,sp,8
    3600:	f800283a 	ret

00003604 <ethernet_init>:

int ethernet_init(network_ctx_t *ctx, np_tse_mac *tse)
{
    3604:	defffa04 	addi	sp,sp,-24
    3608:	dfc00515 	stw	ra,20(sp)
    360c:	df000415 	stw	fp,16(sp)
    3610:	df000404 	addi	fp,sp,16
    3614:	e13ffd15 	stw	r4,-12(fp)
    3618:	e17ffc15 	stw	r5,-16(fp)
   uint32_t value, i;

   // Specify the addresses of the PHY devices to be accessed through MDIO interface
   IOWR_ALTERA_TSEMAC_MDIO_ADDR0(tse, 0x01);
    361c:	e0bffc17 	ldw	r2,-16(fp)
    3620:	10800f04 	addi	r2,r2,60
    3624:	00c00044 	movi	r3,1
    3628:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_MDIO_ADDR1(tse, 0x01);
    362c:	e0bffc17 	ldw	r2,-16(fp)
    3630:	10801004 	addi	r2,r2,64
    3634:	00c00044 	movi	r3,1
    3638:	10c00035 	stwio	r3,0(r2)

   // Disable read and write transfers and wait
   value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    363c:	e0bffc17 	ldw	r2,-16(fp)
    3640:	10800204 	addi	r2,r2,8
    3644:	10800037 	ldwio	r2,0(r2)
    3648:	e0bfff15 	stw	r2,-4(fp)
   value &= ~(ALTERA_TSEMAC_CMD_RX_ENA_MSK | ALTERA_TSEMAC_CMD_TX_ENA_MSK);
    364c:	e0ffff17 	ldw	r3,-4(fp)
    3650:	00bfff04 	movi	r2,-4
    3654:	1884703a 	and	r2,r3,r2
    3658:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, value);
    365c:	e0bffc17 	ldw	r2,-16(fp)
    3660:	10800204 	addi	r2,r2,8
    3664:	e0ffff17 	ldw	r3,-4(fp)
    3668:	10c00035 	stwio	r3,0(r2)

   usleep(100);
    366c:	01001904 	movi	r4,100
    3670:	0025e400 	call	25e40 <usleep>

   value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    3674:	e0bffc17 	ldw	r2,-16(fp)
    3678:	10800204 	addi	r2,r2,8
    367c:	10800037 	ldwio	r2,0(r2)
    3680:	e0bfff15 	stw	r2,-4(fp)
   if((value & (ALTERA_TSEMAC_CMD_RX_ENA_MSK | ALTERA_TSEMAC_CMD_TX_ENA_MSK)) != 0)
    3684:	e0bfff17 	ldw	r2,-4(fp)
    3688:	108000cc 	andi	r2,r2,3
    368c:	10000526 	beq	r2,zero,36a4 <ethernet_init+0xa0>
   {
      printf("Error: RX/TX are not disabled\n");
    3690:	010000f4 	movhi	r4,3
    3694:	2105b104 	addi	r4,r4,5828
    3698:	00164700 	call	16470 <puts>
      return -1;
    369c:	00bfffc4 	movi	r2,-1
    36a0:	0000a006 	br	3924 <ethernet_init+0x320>
   }

   //MAC FIFO Configuration
   IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(tse, ETHERNET_MAC_TRANSMIT_FIFO_DEPTH-16);
    36a4:	e0bffc17 	ldw	r2,-16(fp)
    36a8:	10800904 	addi	r2,r2,36
    36ac:	00c7fc04 	movi	r3,8176
    36b0:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(tse, 3);
    36b4:	e0bffc17 	ldw	r2,-16(fp)
    36b8:	10800e04 	addi	r2,r2,56
    36bc:	00c000c4 	movi	r3,3
    36c0:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(tse, 8);
    36c4:	e0bffc17 	ldw	r2,-16(fp)
    36c8:	10800d04 	addi	r2,r2,52
    36cc:	00c00204 	movi	r3,8
    36d0:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(tse, ETHERNET_MAC_TRANSMIT_FIFO_DEPTH-16);
    36d4:	e0bffc17 	ldw	r2,-16(fp)
    36d8:	10800704 	addi	r2,r2,28
    36dc:	00c7fc04 	movi	r3,8176
    36e0:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(tse, 8);
    36e4:	e0bffc17 	ldw	r2,-16(fp)
    36e8:	10800c04 	addi	r2,r2,48
    36ec:	00c00204 	movi	r3,8
    36f0:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(tse, 8);
    36f4:	e0bffc17 	ldw	r2,-16(fp)
    36f8:	10800b04 	addi	r2,r2,44
    36fc:	00c00204 	movi	r3,8
    3700:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(tse, 16);
    3704:	e0bffc17 	ldw	r2,-16(fp)
    3708:	10800a04 	addi	r2,r2,40
    370c:	00c00404 	movi	r3,16
    3710:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(tse, 16);
    3714:	e0bffc17 	ldw	r2,-16(fp)
    3718:	10800804 	addi	r2,r2,32
    371c:	00c00404 	movi	r3,16
    3720:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_MAC_0(tse, 0x17231C00);
    3724:	e0bffc17 	ldw	r2,-16(fp)
    3728:	10c00304 	addi	r3,r2,12
    372c:	0085c8f4 	movhi	r2,5923
    3730:	10870004 	addi	r2,r2,7168
    3734:	18800035 	stwio	r2,0(r3)
   IOWR_ALTERA_TSEMAC_MAC_1(tse, 0x0000CB4A);
    3738:	e0bffc17 	ldw	r2,-16(fp)
    373c:	10800404 	addi	r2,r2,16
    3740:	00f2d294 	movui	r3,52042
    3744:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_FRM_LENGTH(tse, ctx->mtu);// 6 bytes (dst mac) + 6 bytes (src mac) + 2 bytes (eth type) + 4 bytes (fcs)
    3748:	e0bffc17 	ldw	r2,-16(fp)
    374c:	10800504 	addi	r2,r2,20
    3750:	e0fffd17 	ldw	r3,-12(fp)
    3754:	18c8b517 	ldw	r3,8916(r3)
    3758:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_TX_IPG_LENGTH(tse, 12);
    375c:	e0bffc17 	ldw	r2,-16(fp)
    3760:	10801704 	addi	r2,r2,92
    3764:	00c00304 	movi	r3,12
    3768:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_PAUSE_QUANT(tse, 0xffff);
    376c:	e0bffc17 	ldw	r2,-16(fp)
    3770:	10800604 	addi	r2,r2,24
    3774:	00ffffd4 	movui	r3,65535
    3778:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, 0x00800220);
    377c:	e0bffc17 	ldw	r2,-16(fp)
    3780:	10c00204 	addi	r3,r2,8
    3784:	00802034 	movhi	r2,128
    3788:	10808804 	addi	r2,r2,544
    378c:	18800035 	stwio	r2,0(r3)

   usleep(1000);
    3790:	0100fa04 	movi	r4,1000
    3794:	0025e400 	call	25e40 <usleep>

   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, 0x00802220);
    3798:	e0bffc17 	ldw	r2,-16(fp)
    379c:	10c00204 	addi	r3,r2,8
    37a0:	00802034 	movhi	r2,128
    37a4:	10888804 	addi	r2,r2,8736
    37a8:	18800035 	stwio	r2,0(r3)

   usleep(1000);
    37ac:	0100fa04 	movi	r4,1000
    37b0:	0025e400 	call	25e40 <usleep>
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, 0x00800220);
    37b4:	e0bffc17 	ldw	r2,-16(fp)
    37b8:	10c00204 	addi	r3,r2,8
    37bc:	00802034 	movhi	r2,128
    37c0:	10808804 	addi	r2,r2,544
    37c4:	18800035 	stwio	r2,0(r3)

   value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    37c8:	e0bffc17 	ldw	r2,-16(fp)
    37cc:	10800204 	addi	r2,r2,8
    37d0:	10800037 	ldwio	r2,0(r2)
    37d4:	e0bfff15 	stw	r2,-4(fp)
   i = 0;
    37d8:	e03ffe15 	stw	zero,-8(fp)
   while((value & 0x00800220) != 0x00800220)
    37dc:	00001106 	br	3824 <ethernet_init+0x220>
   {
      usleep(100);
    37e0:	01001904 	movi	r4,100
    37e4:	0025e400 	call	25e40 <usleep>
      value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    37e8:	e0bffc17 	ldw	r2,-16(fp)
    37ec:	10800204 	addi	r2,r2,8
    37f0:	10800037 	ldwio	r2,0(r2)
    37f4:	e0bfff15 	stw	r2,-4(fp)
      i++;
    37f8:	e0bffe17 	ldw	r2,-8(fp)
    37fc:	10800044 	addi	r2,r2,1
    3800:	e0bffe15 	stw	r2,-8(fp)
      if(i >100)
    3804:	e0bffe17 	ldw	r2,-8(fp)
    3808:	10801970 	cmpltui	r2,r2,101
    380c:	1000051e 	bne	r2,zero,3824 <ethernet_init+0x220>
      {
         printf("Error: timeout\n");
    3810:	010000f4 	movhi	r4,3
    3814:	2105b904 	addi	r4,r4,5860
    3818:	00164700 	call	16470 <puts>
         return -1;
    381c:	00bfffc4 	movi	r2,-1
    3820:	00004006 	br	3924 <ethernet_init+0x320>
   while((value & 0x00800220) != 0x00800220)
    3824:	e0ffff17 	ldw	r3,-4(fp)
    3828:	00802034 	movhi	r2,128
    382c:	10808804 	addi	r2,r2,544
    3830:	1886703a 	and	r3,r3,r2
    3834:	00802034 	movhi	r2,128
    3838:	10808804 	addi	r2,r2,544
    383c:	18bfe81e 	bne	r3,r2,37e0 <__alt_mem_mcu_subsystem_ram_0+0x77fe37e0>
      }
   }

   //value |= 0x3;
   value |= 0x8;
    3840:	e0bfff17 	ldw	r2,-4(fp)
    3844:	10800214 	ori	r2,r2,8
    3848:	e0bfff15 	stw	r2,-4(fp)

   value |= (1<<27);
    384c:	e0bfff17 	ldw	r2,-4(fp)
    3850:	10820034 	orhi	r2,r2,2048
    3854:	e0bfff15 	stw	r2,-4(fp)
   value &= ~ALTERA_TSEMAC_CMD_PROMIS_EN_MSK;
    3858:	e0ffff17 	ldw	r3,-4(fp)
    385c:	00bffbc4 	movi	r2,-17
    3860:	1884703a 	and	r2,r3,r2
    3864:	e0bfff15 	stw	r2,-4(fp)

   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, value);
    3868:	e0bffc17 	ldw	r2,-16(fp)
    386c:	10800204 	addi	r2,r2,8
    3870:	e0ffff17 	ldw	r3,-4(fp)
    3874:	10c00035 	stwio	r3,0(r2)

   usleep(1000);
    3878:	0100fa04 	movi	r4,1000
    387c:	0025e400 	call	25e40 <usleep>

   value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	10800204 	addi	r2,r2,8
    3888:	10800037 	ldwio	r2,0(r2)
    388c:	e0bfff15 	stw	r2,-4(fp)

   value |= 0x8;
    3890:	e0bfff17 	ldw	r2,-4(fp)
    3894:	10800214 	ori	r2,r2,8
    3898:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse, value);
    389c:	e0bffc17 	ldw	r2,-16(fp)
    38a0:	10800204 	addi	r2,r2,8
    38a4:	e0ffff17 	ldw	r3,-4(fp)
    38a8:	10c00035 	stwio	r3,0(r2)

   value = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse);
    38ac:	e0bffc17 	ldw	r2,-16(fp)
    38b0:	10800204 	addi	r2,r2,8
    38b4:	10800037 	ldwio	r2,0(r2)
    38b8:	e0bfff15 	stw	r2,-4(fp)

   // additional
   value = IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse);
    38bc:	e0bffc17 	ldw	r2,-16(fp)
    38c0:	10803a04 	addi	r2,r2,232
    38c4:	10800037 	ldwio	r2,0(r2)
    38c8:	e0bfff15 	stw	r2,-4(fp)
   value |= (1<<17);
    38cc:	e0bfff17 	ldw	r2,-4(fp)
    38d0:	108000b4 	orhi	r2,r2,2
    38d4:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse, value);
    38d8:	e0bffc17 	ldw	r2,-16(fp)
    38dc:	10803a04 	addi	r2,r2,232
    38e0:	e0ffff17 	ldw	r3,-4(fp)
    38e4:	10c00035 	stwio	r3,0(r2)

   value = IORD_32DIRECT(tse, 0xd0 * 4);
    38e8:	e0bffc17 	ldw	r2,-16(fp)
    38ec:	1080d004 	addi	r2,r2,832
    38f0:	10800037 	ldwio	r2,0(r2)
    38f4:	e0bfff15 	stw	r2,-4(fp)
   value |= (0x8 << 16);
    38f8:	e0bfff17 	ldw	r2,-4(fp)
    38fc:	10800234 	orhi	r2,r2,8
    3900:	e0bfff15 	stw	r2,-4(fp)
   value |= 0x8;
    3904:	e0bfff17 	ldw	r2,-4(fp)
    3908:	10800214 	ori	r2,r2,8
    390c:	e0bfff15 	stw	r2,-4(fp)
   IOWR_32DIRECT(tse, 0xd0 * 4, value);
    3910:	e0bffc17 	ldw	r2,-16(fp)
    3914:	1080d004 	addi	r2,r2,832
    3918:	e0ffff17 	ldw	r3,-4(fp)
    391c:	10c00035 	stwio	r3,0(r2)

   return 0;
    3920:	0005883a 	mov	r2,zero
}
    3924:	e037883a 	mov	sp,fp
    3928:	dfc00117 	ldw	ra,4(sp)
    392c:	df000017 	ldw	fp,0(sp)
    3930:	dec00204 	addi	sp,sp,8
    3934:	f800283a 	ret

00003938 <phy_init>:


uint32_t phy_init(np_tse_mac *tse, alt_u32 loopback)
{
    3938:	defffa04 	addi	sp,sp,-24
    393c:	dfc00515 	stw	ra,20(sp)
    3940:	df000415 	stw	fp,16(sp)
    3944:	df000404 	addi	fp,sp,16
    3948:	e13ffe15 	stw	r4,-8(fp)
    394c:	e17ffd15 	stw	r5,-12(fp)
   uint32_t result = 0;
    3950:	e03fff15 	stw	zero,-4(fp)

   //uint32_t tse_mmd_readreg(np_tse_mac *pmac, alt_u32 mdio, alt_u32 mmd_addr, alt_u32 mmd_reg)
   result = tse_mmd_readreg(tse, 0, 0, 3);
    3954:	01c000c4 	movi	r7,3
    3958:	000d883a 	mov	r6,zero
    395c:	000b883a 	mov	r5,zero
    3960:	e13ffe17 	ldw	r4,-8(fp)
    3964:	000048c0 	call	48c <tse_mmd_readreg>
    3968:	e0bfff15 	stw	r2,-4(fp)

   result = tse_mmd_readreg(tse, 0, 2, 1);
    396c:	01c00044 	movi	r7,1
    3970:	01800084 	movi	r6,2
    3974:	000b883a 	mov	r5,zero
    3978:	e13ffe17 	ldw	r4,-8(fp)
    397c:	000048c0 	call	48c <tse_mmd_readreg>
    3980:	e0bfff15 	stw	r2,-4(fp)
   result = tse_mmd_readreg(tse, 0, 2, 0);
    3984:	000f883a 	mov	r7,zero
    3988:	01800084 	movi	r6,2
    398c:	000b883a 	mov	r5,zero
    3990:	e13ffe17 	ldw	r4,-8(fp)
    3994:	000048c0 	call	48c <tse_mmd_readreg>
    3998:	e0bfff15 	stw	r2,-4(fp)


   //tse_mmd_writereg(np_tse_mac *pmac, alt_u32 mdio, alt_u32 mmd_addr, alt_u32 mmd_reg, alt_u32 mmd_value)
   tse_mmd_writereg(tse, 0, 2, 0, result | (1<<4) | (1<<1));
    399c:	e0bfff17 	ldw	r2,-4(fp)
    39a0:	10800494 	ori	r2,r2,18
    39a4:	d8800015 	stw	r2,0(sp)
    39a8:	000f883a 	mov	r7,zero
    39ac:	01800084 	movi	r6,2
    39b0:	000b883a 	mov	r5,zero
    39b4:	e13ffe17 	ldw	r4,-8(fp)
    39b8:	00003e80 	call	3e8 <tse_mmd_writereg>

   result = tse_mmd_readreg(tse, 0, 2, 0);
    39bc:	000f883a 	mov	r7,zero
    39c0:	01800084 	movi	r6,2
    39c4:	000b883a 	mov	r5,zero
    39c8:	e13ffe17 	ldw	r4,-8(fp)
    39cc:	000048c0 	call	48c <tse_mmd_readreg>
    39d0:	e0bfff15 	stw	r2,-4(fp)


   result = IORD_32DIRECT(&tse->mdio0, 0);
    39d4:	e0bffe17 	ldw	r2,-8(fp)
    39d8:	10808004 	addi	r2,r2,512
    39dc:	10800037 	ldwio	r2,0(r2)
    39e0:	e0bfff15 	stw	r2,-4(fp)
   if(loopback == 0)
    39e4:	e0bffd17 	ldw	r2,-12(fp)
    39e8:	1000051e 	bne	r2,zero,3a00 <phy_init+0xc8>
   {
      result &= ~(1<<14);
    39ec:	e0ffff17 	ldw	r3,-4(fp)
    39f0:	00afffc4 	movi	r2,-16385
    39f4:	1884703a 	and	r2,r3,r2
    39f8:	e0bfff15 	stw	r2,-4(fp)
    39fc:	00000306 	br	3a0c <phy_init+0xd4>
   }
   else
   {
      result |= (1<<14);
    3a00:	e0bfff17 	ldw	r2,-4(fp)
    3a04:	10900014 	ori	r2,r2,16384
    3a08:	e0bfff15 	stw	r2,-4(fp)
   }
   IOWR_32DIRECT(&tse->mdio0, 0, result);
    3a0c:	e0bffe17 	ldw	r2,-8(fp)
    3a10:	10808004 	addi	r2,r2,512
    3a14:	e0ffff17 	ldw	r3,-4(fp)
    3a18:	10c00035 	stwio	r3,0(r2)
   result = IORD_32DIRECT(&tse->mdio0, 0);
    3a1c:	e0bffe17 	ldw	r2,-8(fp)
    3a20:	10808004 	addi	r2,r2,512
    3a24:	10800037 	ldwio	r2,0(r2)
    3a28:	e0bfff15 	stw	r2,-4(fp)

   return result;
    3a2c:	e0bfff17 	ldw	r2,-4(fp)
}
    3a30:	e037883a 	mov	sp,fp
    3a34:	dfc00117 	ldw	ra,4(sp)
    3a38:	df000017 	ldw	fp,0(sp)
    3a3c:	dec00204 	addi	sp,sp,8
    3a40:	f800283a 	ret

00003a44 <network_init>:

uint32_t network_init()
{
    3a44:	defff704 	addi	sp,sp,-36
    3a48:	dfc00815 	stw	ra,32(sp)
    3a4c:	df000715 	stw	fp,28(sp)
    3a50:	dc800615 	stw	r18,24(sp)
    3a54:	dc400515 	stw	r17,20(sp)
    3a58:	dc000415 	stw	r16,16(sp)
    3a5c:	df000704 	addi	fp,sp,28
   uint32_t                      handle = 0;
    3a60:	e03ffc15 	stw	zero,-16(fp)
   alt_msgdma_dev                *dma_rx_dev;
   alt_msgdma_dev                *dma_tx_dev;
   np_tse_mac                    *tse = (np_tse_mac *)ETHERNET_MAC_BASE;
    3a64:	00a20234 	movhi	r2,34824
    3a68:	10a40004 	addi	r2,r2,-28672
    3a6c:	e0bffb15 	stw	r2,-20(fp)

   IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0000);
    3a70:	0007883a 	mov	r3,zero
    3a74:	00a20234 	movhi	r2,34824
    3a78:	10e60135 	stwio	r3,-26620(r2)
   IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0000);
    3a7c:	0007883a 	mov	r3,zero
    3a80:	00a20234 	movhi	r2,34824
    3a84:	10e60035 	stwio	r3,-26624(r2)

   handle = get_net_context();
    3a88:	00034d00 	call	34d0 <get_net_context>
    3a8c:	e0bffc15 	stw	r2,-16(fp)

   // network initialization
   net_initialize(handle);
    3a90:	e13ffc17 	ldw	r4,-16(fp)
    3a94:	00010d00 	call	10d0 <net_initialize>
   arp_initialise(handle);
    3a98:	e13ffc17 	ldw	r4,-16(fp)
    3a9c:	0000a840 	call	a84 <arp_initialise>
   udp_initialise(handle);
    3aa0:	e13ffc17 	ldw	r4,-16(fp)
    3aa4:	0000aec0 	call	aec <udp_initialise>

   ethernet_enable(tse, 0);
    3aa8:	000b883a 	mov	r5,zero
    3aac:	e13ffb17 	ldw	r4,-20(fp)
    3ab0:	000355c0 	call	355c <ethernet_enable>

   // Open the sgdma receive device
   dma_rx_dev = alt_msgdma_open (ETHERNET_DMA_RX_CSR_NAME);
    3ab4:	010000f4 	movhi	r4,3
    3ab8:	2105bd04 	addi	r4,r4,5876
    3abc:	00301e00 	call	301e0 <alt_msgdma_open>
    3ac0:	e0bffa15 	stw	r2,-24(fp)
   dma_tx_dev = alt_msgdma_open (ETHERNET_DMA_TX_CSR_NAME);
    3ac4:	010000f4 	movhi	r4,3
    3ac8:	2105c404 	addi	r4,r4,5904
    3acc:	00301e00 	call	301e0 <alt_msgdma_open>
    3ad0:	e0bff915 	stw	r2,-28(fp)

   register_rx_dma(handle, dma_rx_dev);
    3ad4:	e17ffa17 	ldw	r5,-24(fp)
    3ad8:	e13ffc17 	ldw	r4,-16(fp)
    3adc:	00034f40 	call	34f4 <register_rx_dma>
   register_tx_dma(handle, dma_tx_dev);
    3ae0:	e17ff917 	ldw	r5,-28(fp)
    3ae4:	e13ffc17 	ldw	r4,-16(fp)
    3ae8:	00035280 	call	3528 <register_tx_dma>

   // Set interrupts for the sgdma receive device
   alt_msgdma_register_callback(dma_rx_dev, rx_ethernet_isr, ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK, handle);
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	100f883a 	mov	r7,r2
    3af4:	01800404 	movi	r6,16
    3af8:	01400034 	movhi	r5,0
    3afc:	2941f904 	addi	r5,r5,2020
    3b00:	e13ffa17 	ldw	r4,-24(fp)
    3b04:	00303a00 	call	303a0 <alt_msgdma_register_callback>
   alt_msgdma_register_callback(dma_tx_dev, tx_ethernet_isr, ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK, handle);
    3b08:	e0bffc17 	ldw	r2,-16(fp)
    3b0c:	100f883a 	mov	r7,r2
    3b10:	01800404 	movi	r6,16
    3b14:	01400034 	movhi	r5,0
    3b18:	2941f004 	addi	r5,r5,1984
    3b1c:	e13ff917 	ldw	r4,-28(fp)
    3b20:	00303a00 	call	303a0 <alt_msgdma_register_callback>


   hw_ethernet_reset();
    3b24:	00007100 	call	710 <hw_ethernet_reset>
   ethernet_init(handle, tse);
    3b28:	e0bffc17 	ldw	r2,-16(fp)
    3b2c:	e17ffb17 	ldw	r5,-20(fp)
    3b30:	1009883a 	mov	r4,r2
    3b34:	00036040 	call	3604 <ethernet_init>
   usleep(1000);
    3b38:	0100fa04 	movi	r4,1000
    3b3c:	0025e400 	call	25e40 <usleep>
   ethernet_enable(tse, 1);
    3b40:	01400044 	movi	r5,1
    3b44:	e13ffb17 	ldw	r4,-20(fp)
    3b48:	000355c0 	call	355c <ethernet_enable>

   // PHY reconfiguration
   phy_init(tse, 0);
    3b4c:	000b883a 	mov	r5,zero
    3b50:	e13ffb17 	ldw	r4,-20(fp)
    3b54:	00039380 	call	3938 <phy_init>

   alt_timestamp_start();
    3b58:	00288340 	call	28834 <alt_timestamp_start>
   ((network_ctx_t*)handle)->ts_frequency       = alt_timestamp_freq();
    3b5c:	e4bffc17 	ldw	r18,-16(fp)
    3b60:	0028a780 	call	28a78 <alt_timestamp_freq>
    3b64:	1007883a 	mov	r3,r2
    3b68:	008001b4 	movhi	r2,6
    3b6c:	1099bc44 	addi	r2,r2,26353
    3b70:	9085883a 	add	r2,r18,r2
    3b74:	19803fcc 	andi	r6,r3,255
    3b78:	11000003 	ldbu	r4,0(r2)
    3b7c:	2008703a 	and	r4,r4,zero
    3b80:	200b883a 	mov	r5,r4
    3b84:	3009883a 	mov	r4,r6
    3b88:	2908b03a 	or	r4,r5,r4
    3b8c:	11000005 	stb	r4,0(r2)
    3b90:	1808d23a 	srli	r4,r3,8
    3b94:	21803fcc 	andi	r6,r4,255
    3b98:	11000043 	ldbu	r4,1(r2)
    3b9c:	2008703a 	and	r4,r4,zero
    3ba0:	200b883a 	mov	r5,r4
    3ba4:	3009883a 	mov	r4,r6
    3ba8:	2908b03a 	or	r4,r5,r4
    3bac:	11000045 	stb	r4,1(r2)
    3bb0:	1808d43a 	srli	r4,r3,16
    3bb4:	21803fcc 	andi	r6,r4,255
    3bb8:	11000083 	ldbu	r4,2(r2)
    3bbc:	2008703a 	and	r4,r4,zero
    3bc0:	200b883a 	mov	r5,r4
    3bc4:	3009883a 	mov	r4,r6
    3bc8:	2908b03a 	or	r4,r5,r4
    3bcc:	11000085 	stb	r4,2(r2)
    3bd0:	180ad63a 	srli	r5,r3,24
    3bd4:	10c000c3 	ldbu	r3,3(r2)
    3bd8:	1806703a 	and	r3,r3,zero
    3bdc:	1809883a 	mov	r4,r3
    3be0:	2807883a 	mov	r3,r5
    3be4:	20c6b03a 	or	r3,r4,r3
    3be8:	10c000c5 	stb	r3,3(r2)
   ((network_ctx_t*)handle)->app_startup_delay  = APP_STARTUP_DELAY_S;
    3bec:	e0fffc17 	ldw	r3,-16(fp)
    3bf0:	008001b4 	movhi	r2,6
    3bf4:	1099ba44 	addi	r2,r2,26345
    3bf8:	1885883a 	add	r2,r3,r2
    3bfc:	10c00003 	ldbu	r3,0(r2)
    3c00:	1806703a 	and	r3,r3,zero
    3c04:	18c00154 	ori	r3,r3,5
    3c08:	10c00005 	stb	r3,0(r2)
    3c0c:	10c00043 	ldbu	r3,1(r2)
    3c10:	1806703a 	and	r3,r3,zero
    3c14:	10c00045 	stb	r3,1(r2)
    3c18:	10c00083 	ldbu	r3,2(r2)
    3c1c:	1806703a 	and	r3,r3,zero
    3c20:	10c00085 	stb	r3,2(r2)
    3c24:	10c000c3 	ldbu	r3,3(r2)
    3c28:	1806703a 	and	r3,r3,zero
    3c2c:	10c000c5 	stb	r3,3(r2)
    3c30:	10c00103 	ldbu	r3,4(r2)
    3c34:	1806703a 	and	r3,r3,zero
    3c38:	10c00105 	stb	r3,4(r2)
    3c3c:	10c00143 	ldbu	r3,5(r2)
    3c40:	1806703a 	and	r3,r3,zero
    3c44:	10c00145 	stb	r3,5(r2)
    3c48:	10c00183 	ldbu	r3,6(r2)
    3c4c:	1806703a 	and	r3,r3,zero
    3c50:	10c00185 	stb	r3,6(r2)
    3c54:	10c001c3 	ldbu	r3,7(r2)
    3c58:	1806703a 	and	r3,r3,zero
    3c5c:	10c001c5 	stb	r3,7(r2)
   ((network_ctx_t*)handle)->app_startup_delay  *= ((network_ctx_t*)handle)->ts_frequency;
    3c60:	e0bffc17 	ldw	r2,-16(fp)
    3c64:	00c001b4 	movhi	r3,6
    3c68:	18d9ba04 	addi	r3,r3,26344
    3c6c:	10c7883a 	add	r3,r2,r3
    3c70:	18c00017 	ldw	r3,0(r3)
    3c74:	1808d23a 	srli	r4,r3,8
    3c78:	00c001b4 	movhi	r3,6
    3c7c:	18d9bb04 	addi	r3,r3,26348
    3c80:	10c7883a 	add	r3,r2,r3
    3c84:	18c00017 	ldw	r3,0(r3)
    3c88:	18c03fcc 	andi	r3,r3,255
    3c8c:	1806963a 	slli	r3,r3,24
    3c90:	1906b03a 	or	r3,r3,r4
    3c94:	1811883a 	mov	r8,r3
    3c98:	00c001b4 	movhi	r3,6
    3c9c:	18d9bb04 	addi	r3,r3,26348
    3ca0:	10c7883a 	add	r3,r2,r3
    3ca4:	18c00017 	ldw	r3,0(r3)
    3ca8:	1808d23a 	srli	r4,r3,8
    3cac:	00c001b4 	movhi	r3,6
    3cb0:	18d9bc04 	addi	r3,r3,26352
    3cb4:	10c5883a 	add	r2,r2,r3
    3cb8:	10800017 	ldw	r2,0(r2)
    3cbc:	10803fcc 	andi	r2,r2,255
    3cc0:	1004963a 	slli	r2,r2,24
    3cc4:	1104b03a 	or	r2,r2,r4
    3cc8:	1013883a 	mov	r9,r2
    3ccc:	e0fffc17 	ldw	r3,-16(fp)
    3cd0:	008001b4 	movhi	r2,6
    3cd4:	1099bc04 	addi	r2,r2,26352
    3cd8:	1885883a 	add	r2,r3,r2
    3cdc:	10800017 	ldw	r2,0(r2)
    3ce0:	1008d23a 	srli	r4,r2,8
    3ce4:	008001b4 	movhi	r2,6
    3ce8:	1099bd04 	addi	r2,r2,26356
    3cec:	1885883a 	add	r2,r3,r2
    3cf0:	10800017 	ldw	r2,0(r2)
    3cf4:	10803fcc 	andi	r2,r2,255
    3cf8:	1004963a 	slli	r2,r2,24
    3cfc:	1104b03a 	or	r2,r2,r4
    3d00:	1021883a 	mov	r16,r2
    3d04:	0023883a 	mov	r17,zero
    3d08:	e4bffc17 	ldw	r18,-16(fp)
    3d0c:	800d883a 	mov	r6,r16
    3d10:	880f883a 	mov	r7,r17
    3d14:	4009883a 	mov	r4,r8
    3d18:	480b883a 	mov	r5,r9
    3d1c:	0011cdc0 	call	11cdc <__muldi3>
    3d20:	100b883a 	mov	r5,r2
    3d24:	180d883a 	mov	r6,r3
    3d28:	2807883a 	mov	r3,r5
    3d2c:	3009883a 	mov	r4,r6
    3d30:	008001b4 	movhi	r2,6
    3d34:	1099ba44 	addi	r2,r2,26345
    3d38:	9085883a 	add	r2,r18,r2
    3d3c:	19c03fcc 	andi	r7,r3,255
    3d40:	11400003 	ldbu	r5,0(r2)
    3d44:	280a703a 	and	r5,r5,zero
    3d48:	280d883a 	mov	r6,r5
    3d4c:	380b883a 	mov	r5,r7
    3d50:	314ab03a 	or	r5,r6,r5
    3d54:	11400005 	stb	r5,0(r2)
    3d58:	180ad23a 	srli	r5,r3,8
    3d5c:	29c03fcc 	andi	r7,r5,255
    3d60:	11400043 	ldbu	r5,1(r2)
    3d64:	280a703a 	and	r5,r5,zero
    3d68:	280d883a 	mov	r6,r5
    3d6c:	380b883a 	mov	r5,r7
    3d70:	314ab03a 	or	r5,r6,r5
    3d74:	11400045 	stb	r5,1(r2)
    3d78:	180ad43a 	srli	r5,r3,16
    3d7c:	29c03fcc 	andi	r7,r5,255
    3d80:	11400083 	ldbu	r5,2(r2)
    3d84:	280a703a 	and	r5,r5,zero
    3d88:	280d883a 	mov	r6,r5
    3d8c:	380b883a 	mov	r5,r7
    3d90:	314ab03a 	or	r5,r6,r5
    3d94:	11400085 	stb	r5,2(r2)
    3d98:	180ed63a 	srli	r7,r3,24
    3d9c:	114000c3 	ldbu	r5,3(r2)
    3da0:	280a703a 	and	r5,r5,zero
    3da4:	280d883a 	mov	r6,r5
    3da8:	380b883a 	mov	r5,r7
    3dac:	314ab03a 	or	r5,r6,r5
    3db0:	114000c5 	stb	r5,3(r2)
    3db4:	21c03fcc 	andi	r7,r4,255
    3db8:	11400103 	ldbu	r5,4(r2)
    3dbc:	280a703a 	and	r5,r5,zero
    3dc0:	280d883a 	mov	r6,r5
    3dc4:	380b883a 	mov	r5,r7
    3dc8:	314ab03a 	or	r5,r6,r5
    3dcc:	11400105 	stb	r5,4(r2)
    3dd0:	200ad23a 	srli	r5,r4,8
    3dd4:	29c03fcc 	andi	r7,r5,255
    3dd8:	11400143 	ldbu	r5,5(r2)
    3ddc:	280a703a 	and	r5,r5,zero
    3de0:	280d883a 	mov	r6,r5
    3de4:	380b883a 	mov	r5,r7
    3de8:	314ab03a 	or	r5,r6,r5
    3dec:	11400145 	stb	r5,5(r2)
    3df0:	200ad43a 	srli	r5,r4,16
    3df4:	29c03fcc 	andi	r7,r5,255
    3df8:	11400183 	ldbu	r5,6(r2)
    3dfc:	280a703a 	and	r5,r5,zero
    3e00:	280d883a 	mov	r6,r5
    3e04:	380b883a 	mov	r5,r7
    3e08:	314ab03a 	or	r5,r6,r5
    3e0c:	11400185 	stb	r5,6(r2)
    3e10:	200ad63a 	srli	r5,r4,24
    3e14:	10c001c3 	ldbu	r3,7(r2)
    3e18:	1806703a 	and	r3,r3,zero
    3e1c:	1809883a 	mov	r4,r3
    3e20:	2807883a 	mov	r3,r5
    3e24:	20c6b03a 	or	r3,r4,r3
    3e28:	10c001c5 	stb	r3,7(r2)
   ((network_ctx_t*)handle)->ts_start           = alt_timestamp();
    3e2c:	e43ffc17 	ldw	r16,-16(fp)
    3e30:	00288cc0 	call	288cc <alt_timestamp>
    3e34:	1009883a 	mov	r4,r2
    3e38:	180b883a 	mov	r5,r3
    3e3c:	008001b4 	movhi	r2,6
    3e40:	1099b844 	addi	r2,r2,26337
    3e44:	8085883a 	add	r2,r16,r2
    3e48:	21c03fcc 	andi	r7,r4,255
    3e4c:	10c00003 	ldbu	r3,0(r2)
    3e50:	1806703a 	and	r3,r3,zero
    3e54:	180d883a 	mov	r6,r3
    3e58:	3807883a 	mov	r3,r7
    3e5c:	30c6b03a 	or	r3,r6,r3
    3e60:	10c00005 	stb	r3,0(r2)
    3e64:	2006d23a 	srli	r3,r4,8
    3e68:	19c03fcc 	andi	r7,r3,255
    3e6c:	10c00043 	ldbu	r3,1(r2)
    3e70:	1806703a 	and	r3,r3,zero
    3e74:	180d883a 	mov	r6,r3
    3e78:	3807883a 	mov	r3,r7
    3e7c:	30c6b03a 	or	r3,r6,r3
    3e80:	10c00045 	stb	r3,1(r2)
    3e84:	2006d43a 	srli	r3,r4,16
    3e88:	19c03fcc 	andi	r7,r3,255
    3e8c:	10c00083 	ldbu	r3,2(r2)
    3e90:	1806703a 	and	r3,r3,zero
    3e94:	180d883a 	mov	r6,r3
    3e98:	3807883a 	mov	r3,r7
    3e9c:	30c6b03a 	or	r3,r6,r3
    3ea0:	10c00085 	stb	r3,2(r2)
    3ea4:	200ed63a 	srli	r7,r4,24
    3ea8:	10c000c3 	ldbu	r3,3(r2)
    3eac:	1806703a 	and	r3,r3,zero
    3eb0:	180d883a 	mov	r6,r3
    3eb4:	3807883a 	mov	r3,r7
    3eb8:	30c6b03a 	or	r3,r6,r3
    3ebc:	10c000c5 	stb	r3,3(r2)
    3ec0:	29c03fcc 	andi	r7,r5,255
    3ec4:	10c00103 	ldbu	r3,4(r2)
    3ec8:	1806703a 	and	r3,r3,zero
    3ecc:	180d883a 	mov	r6,r3
    3ed0:	3807883a 	mov	r3,r7
    3ed4:	30c6b03a 	or	r3,r6,r3
    3ed8:	10c00105 	stb	r3,4(r2)
    3edc:	2806d23a 	srli	r3,r5,8
    3ee0:	19c03fcc 	andi	r7,r3,255
    3ee4:	10c00143 	ldbu	r3,5(r2)
    3ee8:	1806703a 	and	r3,r3,zero
    3eec:	180d883a 	mov	r6,r3
    3ef0:	3807883a 	mov	r3,r7
    3ef4:	30c6b03a 	or	r3,r6,r3
    3ef8:	10c00145 	stb	r3,5(r2)
    3efc:	2806d43a 	srli	r3,r5,16
    3f00:	19c03fcc 	andi	r7,r3,255
    3f04:	10c00183 	ldbu	r3,6(r2)
    3f08:	1806703a 	and	r3,r3,zero
    3f0c:	180d883a 	mov	r6,r3
    3f10:	3807883a 	mov	r3,r7
    3f14:	30c6b03a 	or	r3,r6,r3
    3f18:	10c00185 	stb	r3,6(r2)
    3f1c:	280ad63a 	srli	r5,r5,24
    3f20:	10c001c3 	ldbu	r3,7(r2)
    3f24:	1806703a 	and	r3,r3,zero
    3f28:	1809883a 	mov	r4,r3
    3f2c:	2807883a 	mov	r3,r5
    3f30:	20c6b03a 	or	r3,r4,r3
    3f34:	10c001c5 	stb	r3,7(r2)
   iioscope_init();
    3f38:	001022c0 	call	1022c <iioscope_init>

   return handle;
    3f3c:	e0bffc17 	ldw	r2,-16(fp)
}
    3f40:	e6fffd04 	addi	sp,fp,-12
    3f44:	dfc00417 	ldw	ra,16(sp)
    3f48:	df000317 	ldw	fp,12(sp)
    3f4c:	dc800217 	ldw	r18,8(sp)
    3f50:	dc400117 	ldw	r17,4(sp)
    3f54:	dc000017 	ldw	r16,0(sp)
    3f58:	dec00504 	addi	sp,sp,20
    3f5c:	f800283a 	ret

00003f60 <network_task>:


void network_task(uint32_t handle)
{
    3f60:	defffb04 	addi	sp,sp,-20
    3f64:	dfc00415 	stw	ra,16(sp)
    3f68:	df000315 	stw	fp,12(sp)
    3f6c:	df000304 	addi	fp,sp,12
    3f70:	e13ffd15 	stw	r4,-12(fp)
   network_ctx_t *ctx = (network_ctx_t*)handle;
    3f74:	e0bffd17 	ldw	r2,-12(fp)
    3f78:	e0bfff15 	stw	r2,-4(fp)
   uint32_t result;

   // RX DMA
   result = rx_dma_rearm(handle);
    3f7c:	e0bffd17 	ldw	r2,-12(fp)
    3f80:	1009883a 	mov	r4,r2
    3f84:	00008080 	call	808 <rx_dma_rearm>
    3f88:	e0bffe15 	stw	r2,-8(fp)

   // TX DMA
   result = tx_dma_rearm(handle);
    3f8c:	e0bffd17 	ldw	r2,-12(fp)
    3f90:	1009883a 	mov	r4,r2
    3f94:	0000a0c0 	call	a0c <tx_dma_rearm>
    3f98:	e0bffe15 	stw	r2,-8(fp)

   // processing
   tcp_ip_process_stack(handle);
    3f9c:	e13ffd17 	ldw	r4,-12(fp)
    3fa0:	0000bec0 	call	bec <tcp_ip_process_stack>

   //
   ip_task(handle);
    3fa4:	e13ffd17 	ldw	r4,-12(fp)
    3fa8:	0002e980 	call	2e98 <ip_task>

   if(ctx->app_enabled == 0)
    3fac:	e0ffff17 	ldw	r3,-4(fp)
    3fb0:	008001b4 	movhi	r2,6
    3fb4:	1099b604 	addi	r2,r2,26328
    3fb8:	1885883a 	add	r2,r3,r2
    3fbc:	10800003 	ldbu	r2,0(r2)
    3fc0:	10803fcc 	andi	r2,r2,255
    3fc4:	1000a61e 	bne	r2,zero,4260 <network_task+0x300>
   {
      ctx->timestamp = alt_timestamp();
    3fc8:	00288cc0 	call	288cc <alt_timestamp>
    3fcc:	1009883a 	mov	r4,r2
    3fd0:	180b883a 	mov	r5,r3
    3fd4:	e0ffff17 	ldw	r3,-4(fp)
    3fd8:	008001b4 	movhi	r2,6
    3fdc:	1099b644 	addi	r2,r2,26329
    3fe0:	1885883a 	add	r2,r3,r2
    3fe4:	21c03fcc 	andi	r7,r4,255
    3fe8:	10c00003 	ldbu	r3,0(r2)
    3fec:	1806703a 	and	r3,r3,zero
    3ff0:	180d883a 	mov	r6,r3
    3ff4:	3807883a 	mov	r3,r7
    3ff8:	30c6b03a 	or	r3,r6,r3
    3ffc:	10c00005 	stb	r3,0(r2)
    4000:	2006d23a 	srli	r3,r4,8
    4004:	19c03fcc 	andi	r7,r3,255
    4008:	10c00043 	ldbu	r3,1(r2)
    400c:	1806703a 	and	r3,r3,zero
    4010:	180d883a 	mov	r6,r3
    4014:	3807883a 	mov	r3,r7
    4018:	30c6b03a 	or	r3,r6,r3
    401c:	10c00045 	stb	r3,1(r2)
    4020:	2006d43a 	srli	r3,r4,16
    4024:	19c03fcc 	andi	r7,r3,255
    4028:	10c00083 	ldbu	r3,2(r2)
    402c:	1806703a 	and	r3,r3,zero
    4030:	180d883a 	mov	r6,r3
    4034:	3807883a 	mov	r3,r7
    4038:	30c6b03a 	or	r3,r6,r3
    403c:	10c00085 	stb	r3,2(r2)
    4040:	200ed63a 	srli	r7,r4,24
    4044:	10c000c3 	ldbu	r3,3(r2)
    4048:	1806703a 	and	r3,r3,zero
    404c:	180d883a 	mov	r6,r3
    4050:	3807883a 	mov	r3,r7
    4054:	30c6b03a 	or	r3,r6,r3
    4058:	10c000c5 	stb	r3,3(r2)
    405c:	29c03fcc 	andi	r7,r5,255
    4060:	10c00103 	ldbu	r3,4(r2)
    4064:	1806703a 	and	r3,r3,zero
    4068:	180d883a 	mov	r6,r3
    406c:	3807883a 	mov	r3,r7
    4070:	30c6b03a 	or	r3,r6,r3
    4074:	10c00105 	stb	r3,4(r2)
    4078:	2806d23a 	srli	r3,r5,8
    407c:	19c03fcc 	andi	r7,r3,255
    4080:	10c00143 	ldbu	r3,5(r2)
    4084:	1806703a 	and	r3,r3,zero
    4088:	180d883a 	mov	r6,r3
    408c:	3807883a 	mov	r3,r7
    4090:	30c6b03a 	or	r3,r6,r3
    4094:	10c00145 	stb	r3,5(r2)
    4098:	2806d43a 	srli	r3,r5,16
    409c:	19c03fcc 	andi	r7,r3,255
    40a0:	10c00183 	ldbu	r3,6(r2)
    40a4:	1806703a 	and	r3,r3,zero
    40a8:	180d883a 	mov	r6,r3
    40ac:	3807883a 	mov	r3,r7
    40b0:	30c6b03a 	or	r3,r6,r3
    40b4:	10c00185 	stb	r3,6(r2)
    40b8:	280ad63a 	srli	r5,r5,24
    40bc:	10c001c3 	ldbu	r3,7(r2)
    40c0:	1806703a 	and	r3,r3,zero
    40c4:	1809883a 	mov	r4,r3
    40c8:	2807883a 	mov	r3,r5
    40cc:	20c6b03a 	or	r3,r4,r3
    40d0:	10c001c5 	stb	r3,7(r2)
      if((ctx->timestamp - ctx->ts_start) > ctx->app_startup_delay)
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	00c001b4 	movhi	r3,6
    40dc:	18d9b604 	addi	r3,r3,26328
    40e0:	10c7883a 	add	r3,r2,r3
    40e4:	18c00017 	ldw	r3,0(r3)
    40e8:	180cd23a 	srli	r6,r3,8
    40ec:	00c001b4 	movhi	r3,6
    40f0:	18d9b704 	addi	r3,r3,26332
    40f4:	10c7883a 	add	r3,r2,r3
    40f8:	18c00017 	ldw	r3,0(r3)
    40fc:	18c03fcc 	andi	r3,r3,255
    4100:	1806963a 	slli	r3,r3,24
    4104:	1986b03a 	or	r3,r3,r6
    4108:	1809883a 	mov	r4,r3
    410c:	00c001b4 	movhi	r3,6
    4110:	18d9b704 	addi	r3,r3,26332
    4114:	10c7883a 	add	r3,r2,r3
    4118:	18c00017 	ldw	r3,0(r3)
    411c:	180cd23a 	srli	r6,r3,8
    4120:	00c001b4 	movhi	r3,6
    4124:	18d9b804 	addi	r3,r3,26336
    4128:	10c5883a 	add	r2,r2,r3
    412c:	10800017 	ldw	r2,0(r2)
    4130:	10803fcc 	andi	r2,r2,255
    4134:	1004963a 	slli	r2,r2,24
    4138:	1184b03a 	or	r2,r2,r6
    413c:	100b883a 	mov	r5,r2
    4140:	e0bfff17 	ldw	r2,-4(fp)
    4144:	00c001b4 	movhi	r3,6
    4148:	18d9b804 	addi	r3,r3,26336
    414c:	10c7883a 	add	r3,r2,r3
    4150:	18c00017 	ldw	r3,0(r3)
    4154:	1810d23a 	srli	r8,r3,8
    4158:	00c001b4 	movhi	r3,6
    415c:	18d9b904 	addi	r3,r3,26340
    4160:	10c7883a 	add	r3,r2,r3
    4164:	18c00017 	ldw	r3,0(r3)
    4168:	18c03fcc 	andi	r3,r3,255
    416c:	1806963a 	slli	r3,r3,24
    4170:	1a06b03a 	or	r3,r3,r8
    4174:	180d883a 	mov	r6,r3
    4178:	00c001b4 	movhi	r3,6
    417c:	18d9b904 	addi	r3,r3,26340
    4180:	10c7883a 	add	r3,r2,r3
    4184:	18c00017 	ldw	r3,0(r3)
    4188:	1810d23a 	srli	r8,r3,8
    418c:	00c001b4 	movhi	r3,6
    4190:	18d9ba04 	addi	r3,r3,26344
    4194:	10c5883a 	add	r2,r2,r3
    4198:	10800017 	ldw	r2,0(r2)
    419c:	10803fcc 	andi	r2,r2,255
    41a0:	1004963a 	slli	r2,r2,24
    41a4:	1204b03a 	or	r2,r2,r8
    41a8:	100f883a 	mov	r7,r2
    41ac:	2185c83a 	sub	r2,r4,r6
    41b0:	2091803a 	cmpltu	r8,r4,r2
    41b4:	29c7c83a 	sub	r3,r5,r7
    41b8:	1a09c83a 	sub	r4,r3,r8
    41bc:	2007883a 	mov	r3,r4
    41c0:	1009883a 	mov	r4,r2
    41c4:	180b883a 	mov	r5,r3
    41c8:	e1bfff17 	ldw	r6,-4(fp)
    41cc:	01c001b4 	movhi	r7,6
    41d0:	39d9ba04 	addi	r7,r7,26344
    41d4:	31cf883a 	add	r7,r6,r7
    41d8:	39c00017 	ldw	r7,0(r7)
    41dc:	3810d23a 	srli	r8,r7,8
    41e0:	01c001b4 	movhi	r7,6
    41e4:	39d9bb04 	addi	r7,r7,26348
    41e8:	31cf883a 	add	r7,r6,r7
    41ec:	39c00017 	ldw	r7,0(r7)
    41f0:	39c03fcc 	andi	r7,r7,255
    41f4:	380e963a 	slli	r7,r7,24
    41f8:	3a0eb03a 	or	r7,r7,r8
    41fc:	3805883a 	mov	r2,r7
    4200:	01c001b4 	movhi	r7,6
    4204:	39d9bb04 	addi	r7,r7,26348
    4208:	31cf883a 	add	r7,r6,r7
    420c:	39c00017 	ldw	r7,0(r7)
    4210:	3810d23a 	srli	r8,r7,8
    4214:	01c001b4 	movhi	r7,6
    4218:	39d9bc04 	addi	r7,r7,26352
    421c:	31cd883a 	add	r6,r6,r7
    4220:	31800017 	ldw	r6,0(r6)
    4224:	31803fcc 	andi	r6,r6,255
    4228:	300c963a 	slli	r6,r6,24
    422c:	320cb03a 	or	r6,r6,r8
    4230:	3007883a 	mov	r3,r6
    4234:	19400336 	bltu	r3,r5,4244 <network_task+0x2e4>
    4238:	28c00b1e 	bne	r5,r3,4268 <network_task+0x308>
    423c:	11000136 	bltu	r2,r4,4244 <network_task+0x2e4>
   }
   else
   {
      iioscope_process(handle);
   }
}
    4240:	00000906 	br	4268 <network_task+0x308>
         ctx->app_enabled = 1;
    4244:	e0ffff17 	ldw	r3,-4(fp)
    4248:	008001b4 	movhi	r2,6
    424c:	1099b604 	addi	r2,r2,26328
    4250:	1885883a 	add	r2,r3,r2
    4254:	00c00044 	movi	r3,1
    4258:	10c00005 	stb	r3,0(r2)
}
    425c:	00000206 	br	4268 <network_task+0x308>
      iioscope_process(handle);
    4260:	e13ffd17 	ldw	r4,-12(fp)
    4264:	00103680 	call	10368 <iioscope_process>
}
    4268:	0001883a 	nop
    426c:	e037883a 	mov	sp,fp
    4270:	dfc00117 	ldw	ra,4(sp)
    4274:	df000017 	ldw	fp,0(sp)
    4278:	dec00204 	addi	sp,sp,8
    427c:	f800283a 	ret

00004280 <ad9144_spi_read>:
 * @brief ad9144_spi_read
 *******************************************************************************/
int32_t ad9144_spi_read(struct ad9144_dev *dev,
			uint16_t reg_addr,
			uint8_t *reg_data)
{
    4280:	defff904 	addi	sp,sp,-28
    4284:	dfc00615 	stw	ra,24(sp)
    4288:	df000515 	stw	fp,20(sp)
    428c:	df000504 	addi	fp,sp,20
    4290:	e13ffd15 	stw	r4,-12(fp)
    4294:	2805883a 	mov	r2,r5
    4298:	e1bffb15 	stw	r6,-20(fp)
    429c:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = 0x80 | (reg_addr >> 8);
    42a0:	e0bffc0b 	ldhu	r2,-16(fp)
    42a4:	1004d23a 	srli	r2,r2,8
    42a8:	1007883a 	mov	r3,r2
    42ac:	00bfe004 	movi	r2,-128
    42b0:	1884b03a 	or	r2,r3,r2
    42b4:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
    42b8:	e0bffc0b 	ldhu	r2,-16(fp)
    42bc:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = 0x00;
    42c0:	e03ffec5 	stb	zero,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
    42c4:	e0bffd17 	ldw	r2,-12(fp)
    42c8:	10800017 	ldw	r2,0(r2)
    42cc:	e0fffe44 	addi	r3,fp,-7
    42d0:	018000c4 	movi	r6,3
    42d4:	180b883a 	mov	r5,r3
    42d8:	1009883a 	mov	r4,r2
    42dc:	000bfc40 	call	bfc4 <spi_write_and_read>
    42e0:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);
	*reg_data = buf[2];
    42e4:	e0fffec3 	ldbu	r3,-5(fp)
    42e8:	e0bffb17 	ldw	r2,-20(fp)
    42ec:	10c00005 	stb	r3,0(r2)

	return ret;
    42f0:	e0bfff17 	ldw	r2,-4(fp)
}
    42f4:	e037883a 	mov	sp,fp
    42f8:	dfc00117 	ldw	ra,4(sp)
    42fc:	df000017 	ldw	fp,0(sp)
    4300:	dec00204 	addi	sp,sp,8
    4304:	f800283a 	ret

00004308 <ad9144_spi_write>:
 * @brief ad9144_spi_write
 *******************************************************************************/
int32_t ad9144_spi_write(struct ad9144_dev *dev,
			 uint16_t reg_addr,
			 uint8_t reg_data)
{
    4308:	defff904 	addi	sp,sp,-28
    430c:	dfc00615 	stw	ra,24(sp)
    4310:	df000515 	stw	fp,20(sp)
    4314:	df000504 	addi	fp,sp,20
    4318:	e13ffd15 	stw	r4,-12(fp)
    431c:	2805883a 	mov	r2,r5
    4320:	3007883a 	mov	r3,r6
    4324:	e0bffc0d 	sth	r2,-16(fp)
    4328:	1805883a 	mov	r2,r3
    432c:	e0bffb05 	stb	r2,-20(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = reg_addr >> 8;
    4330:	e0bffc0b 	ldhu	r2,-16(fp)
    4334:	1004d23a 	srli	r2,r2,8
    4338:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
    433c:	e0bffc0b 	ldhu	r2,-16(fp)
    4340:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = reg_data;
    4344:	e0bffb03 	ldbu	r2,-20(fp)
    4348:	e0bffec5 	stb	r2,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
    434c:	e0bffd17 	ldw	r2,-12(fp)
    4350:	10800017 	ldw	r2,0(r2)
    4354:	e0fffe44 	addi	r3,fp,-7
    4358:	018000c4 	movi	r6,3
    435c:	180b883a 	mov	r5,r3
    4360:	1009883a 	mov	r4,r2
    4364:	000bfc40 	call	bfc4 <spi_write_and_read>
    4368:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);

	return ret;
    436c:	e0bfff17 	ldw	r2,-4(fp)
}
    4370:	e037883a 	mov	sp,fp
    4374:	dfc00117 	ldw	ra,4(sp)
    4378:	df000017 	ldw	fp,0(sp)
    437c:	dec00204 	addi	sp,sp,8
    4380:	f800283a 	ret

00004384 <ad9144_spi_check_status>:
 *******************************************************************************/
int32_t ad9144_spi_check_status(struct ad9144_dev *dev,
				uint16_t reg_addr,
				uint8_t reg_mask,
				uint8_t exp_reg_data)
{
    4384:	defff904 	addi	sp,sp,-28
    4388:	dfc00615 	stw	ra,24(sp)
    438c:	df000515 	stw	fp,20(sp)
    4390:	df000504 	addi	fp,sp,20
    4394:	e13ffe15 	stw	r4,-8(fp)
    4398:	2805883a 	mov	r2,r5
    439c:	3009883a 	mov	r4,r6
    43a0:	3807883a 	mov	r3,r7
    43a4:	e0bffd0d 	sth	r2,-12(fp)
    43a8:	2005883a 	mov	r2,r4
    43ac:	e0bffc05 	stb	r2,-16(fp)
    43b0:	1805883a 	mov	r2,r3
    43b4:	e0bffb05 	stb	r2,-20(fp)
	uint16_t timeout = 0;
    43b8:	e03fff8d 	sth	zero,-2(fp)
	uint8_t status = 0;
    43bc:	e03fff45 	stb	zero,-3(fp)
	do {
		ad9144_spi_read(dev, reg_addr, &status);
    43c0:	e0bffd0b 	ldhu	r2,-12(fp)
    43c4:	e0ffff44 	addi	r3,fp,-3
    43c8:	180d883a 	mov	r6,r3
    43cc:	100b883a 	mov	r5,r2
    43d0:	e13ffe17 	ldw	r4,-8(fp)
    43d4:	00042800 	call	4280 <ad9144_spi_read>
		if ((status & reg_mask) == exp_reg_data) {
    43d8:	e0bfff43 	ldbu	r2,-3(fp)
    43dc:	e0fffc03 	ldbu	r3,-16(fp)
    43e0:	1884703a 	and	r2,r3,r2
    43e4:	e0fffb03 	ldbu	r3,-20(fp)
    43e8:	10803fcc 	andi	r2,r2,255
    43ec:	1880021e 	bne	r3,r2,43f8 <ad9144_spi_check_status+0x74>
			return 0;
    43f0:	0005883a 	mov	r2,zero
    43f4:	00000906 	br	441c <ad9144_spi_check_status+0x98>
		} else {
			timeout++;
    43f8:	e0bfff8b 	ldhu	r2,-2(fp)
    43fc:	10800044 	addi	r2,r2,1
    4400:	e0bfff8d 	sth	r2,-2(fp)
			mdelay(10);
    4404:	0109c404 	movi	r4,10000
    4408:	0025e400 	call	25e40 <usleep>
		}
	} while(timeout < 100);
    440c:	e0bfff8b 	ldhu	r2,-2(fp)
    4410:	10801930 	cmpltui	r2,r2,100
    4414:	103fea1e 	bne	r2,zero,43c0 <__alt_mem_mcu_subsystem_ram_0+0x77fe43c0>

	return -1;
    4418:	00bfffc4 	movi	r2,-1
}
    441c:	e037883a 	mov	sp,fp
    4420:	dfc00117 	ldw	ra,4(sp)
    4424:	df000017 	ldw	fp,0(sp)
    4428:	dec00204 	addi	sp,sp,8
    442c:	f800283a 	ret

00004430 <ad9144_spi_write_seq>:
	uint16_t val;
};

int32_t ad9144_spi_write_seq(struct ad9144_dev *dev,
	const struct ad9144_reg_seq *seq, uint32_t num)
{
    4430:	defffa04 	addi	sp,sp,-24
    4434:	dfc00515 	stw	ra,20(sp)
    4438:	df000415 	stw	fp,16(sp)
    443c:	df000404 	addi	fp,sp,16
    4440:	e13ffe15 	stw	r4,-8(fp)
    4444:	e17ffd15 	stw	r5,-12(fp)
    4448:	e1bffc15 	stw	r6,-16(fp)
	int32_t ret = 0;
    444c:	e03fff15 	stw	zero,-4(fp)

	while (num) {
    4450:	00001406 	br	44a4 <ad9144_spi_write_seq+0x74>
		ret |= ad9144_spi_write(dev, seq->reg, seq->val);
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	1080000b 	ldhu	r2,0(r2)
    445c:	10ffffcc 	andi	r3,r2,65535
    4460:	e0bffd17 	ldw	r2,-12(fp)
    4464:	1080008b 	ldhu	r2,2(r2)
    4468:	10803fcc 	andi	r2,r2,255
    446c:	100d883a 	mov	r6,r2
    4470:	180b883a 	mov	r5,r3
    4474:	e13ffe17 	ldw	r4,-8(fp)
    4478:	00043080 	call	4308 <ad9144_spi_write>
    447c:	1007883a 	mov	r3,r2
    4480:	e0bfff17 	ldw	r2,-4(fp)
    4484:	10c4b03a 	or	r2,r2,r3
    4488:	e0bfff15 	stw	r2,-4(fp)
		num--;
    448c:	e0bffc17 	ldw	r2,-16(fp)
    4490:	10bfffc4 	addi	r2,r2,-1
    4494:	e0bffc15 	stw	r2,-16(fp)
		seq++;
    4498:	e0bffd17 	ldw	r2,-12(fp)
    449c:	10800104 	addi	r2,r2,4
    44a0:	e0bffd15 	stw	r2,-12(fp)
	while (num) {
    44a4:	e0bffc17 	ldw	r2,-16(fp)
    44a8:	103fea1e 	bne	r2,zero,4454 <__alt_mem_mcu_subsystem_ram_0+0x77fe4454>
	}

	return 0;
    44ac:	0005883a 	mov	r2,zero
}
    44b0:	e037883a 	mov	sp,fp
    44b4:	dfc00117 	ldw	ra,4(sp)
    44b8:	df000017 	ldw	fp,0(sp)
    44bc:	dec00204 	addi	sp,sp,8
    44c0:	f800283a 	ret

000044c4 <ad9144_setup_jesd204_link>:
	{ 0x2a0, 0x06 },
};

int32_t ad9144_setup_jesd204_link(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
    44c4:	defff804 	addi	sp,sp,-32
    44c8:	dfc00715 	stw	ra,28(sp)
    44cc:	df000615 	stw	fp,24(sp)
    44d0:	df000604 	addi	fp,sp,24
    44d4:	e13ffb15 	stw	r4,-20(fp)
    44d8:	e17ffa15 	stw	r5,-24(fp)
	const struct ad9144_jesd204_link_mode *link_mode = NULL;
    44dc:	e03fff15 	stw	zero,-4(fp)
	unsigned int lane_mask;
	unsigned int val;
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(ad9144_jesd204_link_modes); i++) {
    44e0:	e03ffd15 	stw	zero,-12(fp)
    44e4:	00001406 	br	4538 <ad9144_setup_jesd204_link+0x74>
		if (ad9144_jesd204_link_modes[i].id == init_param->jesd204_mode) {
    44e8:	e0bffd17 	ldw	r2,-12(fp)
    44ec:	10c00164 	muli	r3,r2,5
    44f0:	008000f4 	movhi	r2,3
    44f4:	1885883a 	add	r2,r3,r2
    44f8:	10c5cb03 	ldbu	r3,5932(r2)
    44fc:	e0bffa17 	ldw	r2,-24(fp)
    4500:	10801703 	ldbu	r2,92(r2)
    4504:	18c03fcc 	andi	r3,r3,255
    4508:	10803fcc 	andi	r2,r2,255
    450c:	1880071e 	bne	r3,r2,452c <ad9144_setup_jesd204_link+0x68>
			link_mode = &ad9144_jesd204_link_modes[i];
    4510:	e0bffd17 	ldw	r2,-12(fp)
    4514:	10c00164 	muli	r3,r2,5
    4518:	008000f4 	movhi	r2,3
    451c:	1085cb04 	addi	r2,r2,5932
    4520:	1885883a 	add	r2,r3,r2
    4524:	e0bfff15 	stw	r2,-4(fp)
			break;
    4528:	00000606 	br	4544 <ad9144_setup_jesd204_link+0x80>
	for (i = 0; i < ARRAY_SIZE(ad9144_jesd204_link_modes); i++) {
    452c:	e0bffd17 	ldw	r2,-12(fp)
    4530:	10800044 	addi	r2,r2,1
    4534:	e0bffd15 	stw	r2,-12(fp)
    4538:	e0bffd17 	ldw	r2,-12(fp)
    453c:	108002b0 	cmpltui	r2,r2,10
    4540:	103fe91e 	bne	r2,zero,44e8 <__alt_mem_mcu_subsystem_ram_0+0x77fe44e8>
		}
	}

	if (!link_mode)
    4544:	e0bfff17 	ldw	r2,-4(fp)
    4548:	1000021e 	bne	r2,zero,4554 <ad9144_setup_jesd204_link+0x90>
		return -1;
    454c:	00bfffc4 	movi	r2,-1
    4550:	0000a206 	br	47dc <ad9144_setup_jesd204_link+0x318>

	lane_mask = (1 << link_mode->L) - 1;
    4554:	e0bfff17 	ldw	r2,-4(fp)
    4558:	10800083 	ldbu	r2,2(r2)
    455c:	10803fcc 	andi	r2,r2,255
    4560:	00c00044 	movi	r3,1
    4564:	1884983a 	sll	r2,r3,r2
    4568:	10bfffc4 	addi	r2,r2,-1
    456c:	e0bffc15 	stw	r2,-16(fp)

	ad9144_spi_write(dev, REG_ILS_DID, 0x00);
    4570:	000d883a 	mov	r6,zero
    4574:	01411404 	movi	r5,1104
    4578:	e13ffb17 	ldw	r4,-20(fp)
    457c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_BID, 0x00);
    4580:	000d883a 	mov	r6,zero
    4584:	01411444 	movi	r5,1105
    4588:	e13ffb17 	ldw	r4,-20(fp)
    458c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_LID0, 0x00);
    4590:	000d883a 	mov	r6,zero
    4594:	01411484 	movi	r5,1106
    4598:	e13ffb17 	ldw	r4,-20(fp)
    459c:	00043080 	call	4308 <ad9144_spi_write>

	val = link_mode->L - 1;
    45a0:	e0bfff17 	ldw	r2,-4(fp)
    45a4:	10800083 	ldbu	r2,2(r2)
    45a8:	10803fcc 	andi	r2,r2,255
    45ac:	10bfffc4 	addi	r2,r2,-1
    45b0:	e0bffe15 	stw	r2,-8(fp)
	if (init_param->jesd204_scrambling)
    45b4:	e0bffa17 	ldw	r2,-24(fp)
    45b8:	10801783 	ldbu	r2,94(r2)
    45bc:	10803fcc 	andi	r2,r2,255
    45c0:	10000326 	beq	r2,zero,45d0 <ad9144_setup_jesd204_link+0x10c>
		val |= 0x80;
    45c4:	e0bffe17 	ldw	r2,-8(fp)
    45c8:	10802014 	ori	r2,r2,128
    45cc:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_SCR_L, val);
    45d0:	e0bffe17 	ldw	r2,-8(fp)
    45d4:	10803fcc 	andi	r2,r2,255
    45d8:	100d883a 	mov	r6,r2
    45dc:	014114c4 	movi	r5,1107
    45e0:	e13ffb17 	ldw	r4,-20(fp)
    45e4:	00043080 	call	4308 <ad9144_spi_write>

	val = link_mode->F - 1;
    45e8:	e0bfff17 	ldw	r2,-4(fp)
    45ec:	108000c3 	ldbu	r2,3(r2)
    45f0:	10803fcc 	andi	r2,r2,255
    45f4:	10bfffc4 	addi	r2,r2,-1
    45f8:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_F, val);
    45fc:	e0bffe17 	ldw	r2,-8(fp)
    4600:	10803fcc 	andi	r2,r2,255
    4604:	100d883a 	mov	r6,r2
    4608:	01411504 	movi	r5,1108
    460c:	e13ffb17 	ldw	r4,-20(fp)
    4610:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_K, 0x1f);
    4614:	018007c4 	movi	r6,31
    4618:	01411544 	movi	r5,1109
    461c:	e13ffb17 	ldw	r4,-20(fp)
    4620:	00043080 	call	4308 <ad9144_spi_write>

	val = link_mode->M - 1;
    4624:	e0bfff17 	ldw	r2,-4(fp)
    4628:	10800043 	ldbu	r2,1(r2)
    462c:	10803fcc 	andi	r2,r2,255
    4630:	10bfffc4 	addi	r2,r2,-1
    4634:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_M, val);
    4638:	e0bffe17 	ldw	r2,-8(fp)
    463c:	10803fcc 	andi	r2,r2,255
    4640:	100d883a 	mov	r6,r2
    4644:	01411584 	movi	r5,1110
    4648:	e13ffb17 	ldw	r4,-20(fp)
    464c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_CS_N, 0x0f); // 16 bits per sample
    4650:	018003c4 	movi	r6,15
    4654:	014115c4 	movi	r5,1111
    4658:	e13ffb17 	ldw	r4,-20(fp)
    465c:	00043080 	call	4308 <ad9144_spi_write>

	val = 0x0f; // 16 bits per sample
    4660:	008003c4 	movi	r2,15
    4664:	e0bffe15 	stw	r2,-8(fp)
	if (init_param->jesd204_subclass == 1)
    4668:	e0bffa17 	ldw	r2,-24(fp)
    466c:	10801743 	ldbu	r2,93(r2)
    4670:	10803fcc 	andi	r2,r2,255
    4674:	10800058 	cmpnei	r2,r2,1
    4678:	1000031e 	bne	r2,zero,4688 <ad9144_setup_jesd204_link+0x1c4>
		val |= 0x20;
    467c:	e0bffe17 	ldw	r2,-8(fp)
    4680:	10800814 	ori	r2,r2,32
    4684:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_NP, val);
    4688:	e0bffe17 	ldw	r2,-8(fp)
    468c:	10803fcc 	andi	r2,r2,255
    4690:	100d883a 	mov	r6,r2
    4694:	01411604 	movi	r5,1112
    4698:	e13ffb17 	ldw	r4,-20(fp)
    469c:	00043080 	call	4308 <ad9144_spi_write>

	val = link_mode->S - 1;
    46a0:	e0bfff17 	ldw	r2,-4(fp)
    46a4:	10800103 	ldbu	r2,4(r2)
    46a8:	10803fcc 	andi	r2,r2,255
    46ac:	10bfffc4 	addi	r2,r2,-1
    46b0:	e0bffe15 	stw	r2,-8(fp)
	val |= 0x20; /* JESD204 version B */
    46b4:	e0bffe17 	ldw	r2,-8(fp)
    46b8:	10800814 	ori	r2,r2,32
    46bc:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_S, val);
    46c0:	e0bffe17 	ldw	r2,-8(fp)
    46c4:	10803fcc 	andi	r2,r2,255
    46c8:	100d883a 	mov	r6,r2
    46cc:	01411644 	movi	r5,1113
    46d0:	e13ffb17 	ldw	r4,-20(fp)
    46d4:	00043080 	call	4308 <ad9144_spi_write>

	val = link_mode->F == 0 ? 0x80 : 0x00;
    46d8:	e0bfff17 	ldw	r2,-4(fp)
    46dc:	108000c3 	ldbu	r2,3(r2)
    46e0:	10803fcc 	andi	r2,r2,255
    46e4:	1000021e 	bne	r2,zero,46f0 <ad9144_setup_jesd204_link+0x22c>
    46e8:	00802004 	movi	r2,128
    46ec:	00000106 	br	46f4 <ad9144_setup_jesd204_link+0x230>
    46f0:	0005883a 	mov	r2,zero
    46f4:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_HD_CF, val);
    46f8:	e0bffe17 	ldw	r2,-8(fp)
    46fc:	10803fcc 	andi	r2,r2,255
    4700:	100d883a 	mov	r6,r2
    4704:	01411684 	movi	r5,1114
    4708:	e13ffb17 	ldw	r4,-20(fp)
    470c:	00043080 	call	4308 <ad9144_spi_write>

	ad9144_spi_write(dev, REG_LANEDESKEW, lane_mask);
    4710:	e0bffc17 	ldw	r2,-16(fp)
    4714:	10803fcc 	andi	r2,r2,255
    4718:	100d883a 	mov	r6,r2
    471c:	01411b04 	movi	r5,1132
    4720:	e13ffb17 	ldw	r4,-20(fp)
    4724:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CTRLREG1, link_mode->F);
    4728:	e0bfff17 	ldw	r2,-4(fp)
    472c:	108000c3 	ldbu	r2,3(r2)
    4730:	10803fcc 	andi	r2,r2,255
    4734:	100d883a 	mov	r6,r2
    4738:	01411d84 	movi	r5,1142
    473c:	e13ffb17 	ldw	r4,-20(fp)
    4740:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LANEENABLE, lane_mask);
    4744:	e0bffc17 	ldw	r2,-16(fp)
    4748:	10803fcc 	andi	r2,r2,255
    474c:	100d883a 	mov	r6,r2
    4750:	01411f44 	movi	r5,1149
    4754:	e13ffb17 	ldw	r4,-20(fp)
    4758:	00043080 	call	4308 <ad9144_spi_write>
	 * JESD204 standard the pulse length should be two frame clock cycles.
	 *
	 * 1 PCLK cycle = 4 octets
	 *   => SYNC~ pulse length = 2 * octets_per_frame / 4
	 */
	switch (link_mode->F) {
    475c:	e0bfff17 	ldw	r2,-4(fp)
    4760:	108000c3 	ldbu	r2,3(r2)
    4764:	10803fcc 	andi	r2,r2,255
    4768:	10c00060 	cmpeqi	r3,r2,1
    476c:	1800031e 	bne	r3,zero,477c <ad9144_setup_jesd204_link+0x2b8>
    4770:	108000a0 	cmpeqi	r2,r2,2
    4774:	1000031e 	bne	r2,zero,4784 <ad9144_setup_jesd204_link+0x2c0>
    4778:	00000506 	br	4790 <ad9144_setup_jesd204_link+0x2cc>
	case 1:
		/* 0.5 PCLK cycles */
		val = 0x0;
    477c:	e03ffe15 	stw	zero,-8(fp)
		break;
    4780:	00000606 	br	479c <ad9144_setup_jesd204_link+0x2d8>
	case 2:
		/* 1 PCLK cycle */
		val = 0x1;
    4784:	00800044 	movi	r2,1
    4788:	e0bffe15 	stw	r2,-8(fp)
		break;
    478c:	00000306 	br	479c <ad9144_setup_jesd204_link+0x2d8>
	default:
		/* 2 PCLK cycles */
		val = 0x2;
    4790:	00800084 	movi	r2,2
    4794:	e0bffe15 	stw	r2,-8(fp)
		break;
    4798:	0001883a 	nop
	}
	ad9144_spi_write(dev, REG_SYNCB_GEN_1, val << 4);
    479c:	e0bffe17 	ldw	r2,-8(fp)
    47a0:	1004913a 	slli	r2,r2,4
    47a4:	10803fcc 	andi	r2,r2,255
    47a8:	100d883a 	mov	r6,r2
    47ac:	0140c484 	movi	r5,786
    47b0:	e13ffb17 	ldw	r4,-20(fp)
    47b4:	00043080 	call	4308 <ad9144_spi_write>

	dev->num_converters = link_mode->M;
    47b8:	e0bfff17 	ldw	r2,-4(fp)
    47bc:	10c00043 	ldbu	r3,1(r2)
    47c0:	e0bffb17 	ldw	r2,-20(fp)
    47c4:	10c00105 	stb	r3,4(r2)
	dev->num_lanes = link_mode->L;
    47c8:	e0bfff17 	ldw	r2,-4(fp)
    47cc:	10c00083 	ldbu	r3,2(r2)
    47d0:	e0bffb17 	ldw	r2,-20(fp)
    47d4:	10c00145 	stb	r3,5(r2)

	return 0;
    47d8:	0005883a 	mov	r2,zero
}
    47dc:	e037883a 	mov	sp,fp
    47e0:	dfc00117 	ldw	ra,4(sp)
    47e4:	df000017 	ldw	fp,0(sp)
    47e8:	dec00204 	addi	sp,sp,8
    47ec:	f800283a 	ret

000047f0 <ad9144_pll_setup>:
	{ 0x1c4, 0x7e },
};

static int32_t ad9144_pll_setup(struct ad9144_dev *dev,
				const struct ad9144_init_param *init_param)
{
    47f0:	defff404 	addi	sp,sp,-48
    47f4:	dfc00b15 	stw	ra,44(sp)
    47f8:	df000a15 	stw	fp,40(sp)
    47fc:	df000a04 	addi	fp,sp,40
    4800:	e13ff715 	stw	r4,-36(fp)
    4804:	e17ff615 	stw	r5,-40(fp)
	uint32_t fref, fdac;
	uint32_t lo_div_mode;
	uint32_t ref_div_mode = 0;
    4808:	e03ffd15 	stw	zero,-12(fp)
	uint8_t vco_param[3];
	uint32_t bcount;
	uint32_t fvco;
	int32_t ret;

	fref = init_param->pll_ref_frequency_khz;
    480c:	e0bff617 	ldw	r2,-40(fp)
    4810:	10801a17 	ldw	r2,104(r2)
    4814:	e0bfff15 	stw	r2,-4(fp)
	fdac = init_param->pll_dac_frequency_khz;
    4818:	e0bff617 	ldw	r2,-40(fp)
    481c:	10801b17 	ldw	r2,108(r2)
    4820:	e0bffb15 	stw	r2,-20(fp)

	if (fref > 1000000 || fref < 35000)
    4824:	e0ffff17 	ldw	r3,-4(fp)
    4828:	008003f4 	movhi	r2,15
    482c:	10909004 	addi	r2,r2,16960
    4830:	10c00336 	bltu	r2,r3,4840 <ad9144_pll_setup+0x50>
    4834:	e0bfff17 	ldw	r2,-4(fp)
    4838:	10a22e28 	cmpgeui	r2,r2,35000
    483c:	1000021e 	bne	r2,zero,4848 <ad9144_pll_setup+0x58>
		return -1;
    4840:	00bfffc4 	movi	r2,-1
    4844:	00009106 	br	4a8c <ad9144_pll_setup+0x29c>

	if (fdac > 2800000 || fdac < 420000)
    4848:	e0fffb17 	ldw	r3,-20(fp)
    484c:	00800af4 	movhi	r2,43
    4850:	10ae6004 	addi	r2,r2,-18048
    4854:	10c00436 	bltu	r2,r3,4868 <ad9144_pll_setup+0x78>
    4858:	e0fffb17 	ldw	r3,-20(fp)
    485c:	008001b4 	movhi	r2,6
    4860:	109a27c4 	addi	r2,r2,26783
    4864:	10c00236 	bltu	r2,r3,4870 <ad9144_pll_setup+0x80>
		return -1;
    4868:	00bfffc4 	movi	r2,-1
    486c:	00008706 	br	4a8c <ad9144_pll_setup+0x29c>

	if (fdac >= 1500000)
    4870:	e0fffb17 	ldw	r3,-20(fp)
    4874:	008005f4 	movhi	r2,23
    4878:	10b8d7c4 	addi	r2,r2,-7329
    487c:	10c0032e 	bgeu	r2,r3,488c <ad9144_pll_setup+0x9c>
		lo_div_mode = 1;
    4880:	00800044 	movi	r2,1
    4884:	e0bffe15 	stw	r2,-8(fp)
    4888:	00001006 	br	48cc <ad9144_pll_setup+0xdc>
	else if (fdac >= 750000)
    488c:	e0fffb17 	ldw	r3,-20(fp)
    4890:	008002f4 	movhi	r2,11
    4894:	109c6bc4 	addi	r2,r2,29103
    4898:	10c0032e 	bgeu	r2,r3,48a8 <ad9144_pll_setup+0xb8>
		lo_div_mode = 2;
    489c:	00800084 	movi	r2,2
    48a0:	e0bffe15 	stw	r2,-8(fp)
    48a4:	00000906 	br	48cc <ad9144_pll_setup+0xdc>
	else
		lo_div_mode = 3;
    48a8:	008000c4 	movi	r2,3
    48ac:	e0bffe15 	stw	r2,-8(fp)

	while (fref > 80000) {
    48b0:	00000606 	br	48cc <ad9144_pll_setup+0xdc>
		ref_div_mode++;
    48b4:	e0bffd17 	ldw	r2,-12(fp)
    48b8:	10800044 	addi	r2,r2,1
    48bc:	e0bffd15 	stw	r2,-12(fp)
		fref /= 2;
    48c0:	e0bfff17 	ldw	r2,-4(fp)
    48c4:	1004d07a 	srli	r2,r2,1
    48c8:	e0bfff15 	stw	r2,-4(fp)
	while (fref > 80000) {
    48cc:	e0ffff17 	ldw	r3,-4(fp)
    48d0:	00800074 	movhi	r2,1
    48d4:	108e2004 	addi	r2,r2,14464
    48d8:	10fff636 	bltu	r2,r3,48b4 <__alt_mem_mcu_subsystem_ram_0+0x77fe48b4>
	}

	fvco = fdac << (lo_div_mode + 1);
    48dc:	e0bffe17 	ldw	r2,-8(fp)
    48e0:	10800044 	addi	r2,r2,1
    48e4:	e0fffb17 	ldw	r3,-20(fp)
    48e8:	1884983a 	sll	r2,r3,r2
    48ec:	e0bffa15 	stw	r2,-24(fp)
	bcount = fdac / (2 * fref);
    48f0:	e0bfff17 	ldw	r2,-4(fp)
    48f4:	1085883a 	add	r2,r2,r2
    48f8:	100b883a 	mov	r5,r2
    48fc:	e13ffb17 	ldw	r4,-20(fp)
    4900:	0012a540 	call	12a54 <__udivsi3>
    4904:	e0bffc15 	stw	r2,-16(fp)
	if (bcount < 6) {
    4908:	e0bffc17 	ldw	r2,-16(fp)
    490c:	108001a8 	cmpgeui	r2,r2,6
    4910:	1000061e 	bne	r2,zero,492c <ad9144_pll_setup+0x13c>
		bcount *= 2;
    4914:	e0bffc17 	ldw	r2,-16(fp)
    4918:	1085883a 	add	r2,r2,r2
    491c:	e0bffc15 	stw	r2,-16(fp)
		ref_div_mode++;
    4920:	e0bffd17 	ldw	r2,-12(fp)
    4924:	10800044 	addi	r2,r2,1
    4928:	e0bffd15 	stw	r2,-12(fp)
	}

	if (fvco < 6300000) {
    492c:	e0fffa17 	ldw	r3,-24(fp)
    4930:	00801834 	movhi	r2,96
    4934:	108857c4 	addi	r2,r2,8543
    4938:	10c00736 	bltu	r2,r3,4958 <ad9144_pll_setup+0x168>
		vco_param[0] = 0x08;
    493c:	00800204 	movi	r2,8
    4940:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x03;
    4944:	008000c4 	movi	r2,3
    4948:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x07;
    494c:	008001c4 	movi	r2,7
    4950:	e0bff8c5 	stb	r2,-29(fp)
    4954:	00001106 	br	499c <ad9144_pll_setup+0x1ac>
	} else if (fvco < 7250000) {
    4958:	e0fffa17 	ldw	r3,-24(fp)
    495c:	00801bf4 	movhi	r2,111
    4960:	10a813c4 	addi	r2,r2,-24497
    4964:	10c00736 	bltu	r2,r3,4984 <ad9144_pll_setup+0x194>
		vco_param[0] = 0x09;
    4968:	00800244 	movi	r2,9
    496c:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x03;
    4970:	008000c4 	movi	r2,3
    4974:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x06;
    4978:	00800184 	movi	r2,6
    497c:	e0bff8c5 	stb	r2,-29(fp)
    4980:	00000606 	br	499c <ad9144_pll_setup+0x1ac>
	} else {
		vco_param[0] = 0x09;
    4984:	00800244 	movi	r2,9
    4988:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x13;
    498c:	008004c4 	movi	r2,19
    4990:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x06;
    4994:	00800184 	movi	r2,6
    4998:	e0bff8c5 	stb	r2,-29(fp)
	}

	ad9144_spi_write_seq(dev, ad9144_pll_fixed_writes,
    499c:	01800344 	movi	r6,13
    49a0:	014000f4 	movhi	r5,3
    49a4:	2945eb84 	addi	r5,r5,6062
    49a8:	e13ff717 	ldw	r4,-36(fp)
    49ac:	00044300 	call	4430 <ad9144_spi_write_seq>
		ARRAY_SIZE(ad9144_pll_fixed_writes));

	ad9144_spi_write(dev, REG_DACLOGENCNTRL, lo_div_mode);
    49b0:	e0bffe17 	ldw	r2,-8(fp)
    49b4:	10803fcc 	andi	r2,r2,255
    49b8:	100d883a 	mov	r6,r2
    49bc:	014022c4 	movi	r5,139
    49c0:	e13ff717 	ldw	r4,-36(fp)
    49c4:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACLDOCNTRL1, ref_div_mode);
    49c8:	e0bffd17 	ldw	r2,-12(fp)
    49cc:	10803fcc 	andi	r2,r2,255
    49d0:	100d883a 	mov	r6,r2
    49d4:	01402304 	movi	r5,140
    49d8:	e13ff717 	ldw	r4,-36(fp)
    49dc:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACINTEGERWORD0, bcount);
    49e0:	e0bffc17 	ldw	r2,-16(fp)
    49e4:	10803fcc 	andi	r2,r2,255
    49e8:	100d883a 	mov	r6,r2
    49ec:	01402144 	movi	r5,133
    49f0:	e13ff717 	ldw	r4,-36(fp)
    49f4:	00043080 	call	4308 <ad9144_spi_write>

	ad9144_spi_write(dev, REG_DACPLLT5, vco_param[0]);
    49f8:	e0bff843 	ldbu	r2,-31(fp)
    49fc:	10803fcc 	andi	r2,r2,255
    4a00:	100d883a 	mov	r6,r2
    4a04:	01406d44 	movi	r5,437
    4a08:	e13ff717 	ldw	r4,-36(fp)
    4a0c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACPLLTB, vco_param[1]);
    4a10:	e0bff883 	ldbu	r2,-30(fp)
    4a14:	10803fcc 	andi	r2,r2,255
    4a18:	100d883a 	mov	r6,r2
    4a1c:	01406ec4 	movi	r5,443
    4a20:	e13ff717 	ldw	r4,-36(fp)
    4a24:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACPLLT18, vco_param[2]);
    4a28:	e0bff8c3 	ldbu	r2,-29(fp)
    4a2c:	10803fcc 	andi	r2,r2,255
    4a30:	100d883a 	mov	r6,r2
    4a34:	01407144 	movi	r5,453
    4a38:	e13ff717 	ldw	r4,-36(fp)
    4a3c:	00043080 	call	4308 <ad9144_spi_write>

	ad9144_spi_write(dev, REG_DACPLLCNTRL, 0x10);
    4a40:	01800404 	movi	r6,16
    4a44:	014020c4 	movi	r5,131
    4a48:	e13ff717 	ldw	r4,-36(fp)
    4a4c:	00043080 	call	4308 <ad9144_spi_write>

	ret = ad9144_spi_check_status(dev, REG_DACPLLSTATUS, 0x22, 0x22);
    4a50:	01c00884 	movi	r7,34
    4a54:	01800884 	movi	r6,34
    4a58:	01402104 	movi	r5,132
    4a5c:	e13ff717 	ldw	r4,-36(fp)
    4a60:	00043840 	call	4384 <ad9144_spi_check_status>
    4a64:	e0bff915 	stw	r2,-28(fp)
	if (ret == -1)
    4a68:	e0bff917 	ldw	r2,-28(fp)
    4a6c:	10bfffd8 	cmpnei	r2,r2,-1
    4a70:	1000051e 	bne	r2,zero,4a88 <ad9144_pll_setup+0x298>
		printf("%s : DAC PLL NOT locked!.\n", __func__);
    4a74:	014000f4 	movhi	r5,3
    4a78:	29467204 	addi	r5,r5,6600
    4a7c:	010000f4 	movhi	r4,3
    4a80:	2105f904 	addi	r4,r4,6116
    4a84:	001634c0 	call	1634c <printf>

	return ret;
    4a88:	e0bff917 	ldw	r2,-28(fp)
}
    4a8c:	e037883a 	mov	sp,fp
    4a90:	dfc00117 	ldw	ra,4(sp)
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00204 	addi	sp,sp,8
    4a9c:	f800283a 	ret

00004aa0 <ad9144_setup>:
/***************************************************************************//**
 * @brief ad9144_setup
********************************************************************************/
int32_t ad9144_setup(struct ad9144_dev **device,
		     const struct ad9144_init_param *init_param)
{
    4aa0:	defff604 	addi	sp,sp,-40
    4aa4:	dfc00915 	stw	ra,36(sp)
    4aa8:	df000815 	stw	fp,32(sp)
    4aac:	df000804 	addi	fp,sp,32
    4ab0:	e13ff915 	stw	r4,-28(fp)
    4ab4:	e17ff815 	stw	r5,-32(fp)
	uint8_t scratchpad;
	uint32_t val;
	int32_t ret;
	struct ad9144_dev *dev;

	dev = (struct ad9144_dev *)malloc(sizeof(*dev));
    4ab8:	01000204 	movi	r4,8
    4abc:	001525c0 	call	1525c <malloc>
    4ac0:	e0bffc15 	stw	r2,-16(fp)
	if (!dev)
    4ac4:	e0bffc17 	ldw	r2,-16(fp)
    4ac8:	1000021e 	bne	r2,zero,4ad4 <ad9144_setup+0x34>
		return -1;
    4acc:	00bfffc4 	movi	r2,-1
    4ad0:	00016b06 	br	5080 <ad9144_setup+0x5e0>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
    4ad4:	e0bffc17 	ldw	r2,-16(fp)
    4ad8:	e0fff817 	ldw	r3,-32(fp)
    4adc:	180b883a 	mov	r5,r3
    4ae0:	1009883a 	mov	r4,r2
    4ae4:	000becc0 	call	becc <spi_init>
    4ae8:	e0bffb15 	stw	r2,-20(fp)
	if (ret == -1)
    4aec:	e0bffb17 	ldw	r2,-20(fp)
    4af0:	10bfffd8 	cmpnei	r2,r2,-1
    4af4:	1000051e 	bne	r2,zero,4b0c <ad9144_setup+0x6c>
		printf("%s : Device descriptor failed!\n", __func__);
    4af8:	014000f4 	movhi	r5,3
    4afc:	29467704 	addi	r5,r5,6620
    4b00:	010000f4 	movhi	r4,3
    4b04:	21060004 	addi	r4,r4,6144
    4b08:	001634c0 	call	1634c <printf>

	// reset
	ad9144_spi_write(dev, REG_SPI_INTFCONFA, SOFTRESET_M | SOFTRESET | (init_param->spi3wire ? 0x00 : 0x18));
    4b0c:	e0bff817 	ldw	r2,-32(fp)
    4b10:	10800403 	ldbu	r2,16(r2)
    4b14:	10803fcc 	andi	r2,r2,255
    4b18:	10000226 	beq	r2,zero,4b24 <ad9144_setup+0x84>
    4b1c:	00802044 	movi	r2,129
    4b20:	00000106 	br	4b28 <ad9144_setup+0x88>
    4b24:	00802644 	movi	r2,153
    4b28:	100d883a 	mov	r6,r2
    4b2c:	000b883a 	mov	r5,zero
    4b30:	e13ffc17 	ldw	r4,-16(fp)
    4b34:	00043080 	call	4308 <ad9144_spi_write>

	ad9144_spi_write(dev, REG_SPI_INTFCONFA, init_param->spi3wire ? 0x00 : 0x18);
    4b38:	e0bff817 	ldw	r2,-32(fp)
    4b3c:	10800403 	ldbu	r2,16(r2)
    4b40:	10803fcc 	andi	r2,r2,255
    4b44:	10000226 	beq	r2,zero,4b50 <ad9144_setup+0xb0>
    4b48:	0005883a 	mov	r2,zero
    4b4c:	00000106 	br	4b54 <ad9144_setup+0xb4>
    4b50:	00800604 	movi	r2,24
    4b54:	100d883a 	mov	r6,r2
    4b58:	000b883a 	mov	r5,zero
    4b5c:	e13ffc17 	ldw	r4,-16(fp)
    4b60:	00043080 	call	4308 <ad9144_spi_write>

	ad9144_spi_write(dev, 0x051, 0x5a);
    4b64:	01801684 	movi	r6,90
    4b68:	01401444 	movi	r5,81
    4b6c:	e13ffc17 	ldw	r4,-16(fp)
    4b70:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_read(dev, 0x051, &chip_id);
    4b74:	e0bffac4 	addi	r2,fp,-21
    4b78:	100d883a 	mov	r6,r2
    4b7c:	01401444 	movi	r5,81
    4b80:	e13ffc17 	ldw	r4,-16(fp)
    4b84:	00042800 	call	4280 <ad9144_spi_read>


	ad9144_spi_read(dev, REG_SPI_PRODIDL, &chip_id);
    4b88:	e0bffac4 	addi	r2,fp,-21
    4b8c:	100d883a 	mov	r6,r2
    4b90:	01400104 	movi	r5,4
    4b94:	e13ffc17 	ldw	r4,-16(fp)
    4b98:	00042800 	call	4280 <ad9144_spi_read>
	if(chip_id != AD9144_CHIP_ID) {
    4b9c:	e0bffac3 	ldbu	r2,-21(fp)
    4ba0:	10803fcc 	andi	r2,r2,255
    4ba4:	10801120 	cmpeqi	r2,r2,68
    4ba8:	10000a1e 	bne	r2,zero,4bd4 <ad9144_setup+0x134>
		printf("%s : Invalid CHIP ID (0x%x).\n", __func__, chip_id);
    4bac:	e0bffac3 	ldbu	r2,-21(fp)
    4bb0:	10803fcc 	andi	r2,r2,255
    4bb4:	100d883a 	mov	r6,r2
    4bb8:	014000f4 	movhi	r5,3
    4bbc:	29467704 	addi	r5,r5,6620
    4bc0:	010000f4 	movhi	r4,3
    4bc4:	21060804 	addi	r4,r4,6176
    4bc8:	001634c0 	call	1634c <printf>
		return -1;
    4bcc:	00bfffc4 	movi	r2,-1
    4bd0:	00012b06 	br	5080 <ad9144_setup+0x5e0>
	}

	ad9144_spi_write(dev, REG_SPI_SCRATCHPAD, 0xAD);
    4bd4:	01802b44 	movi	r6,173
    4bd8:	01400284 	movi	r5,10
    4bdc:	e13ffc17 	ldw	r4,-16(fp)
    4be0:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_read(dev, REG_SPI_SCRATCHPAD, &scratchpad);
    4be4:	e0bffa84 	addi	r2,fp,-22
    4be8:	100d883a 	mov	r6,r2
    4bec:	01400284 	movi	r5,10
    4bf0:	e13ffc17 	ldw	r4,-16(fp)
    4bf4:	00042800 	call	4280 <ad9144_spi_read>
	if(scratchpad != 0xAD) {
    4bf8:	e0bffa83 	ldbu	r2,-22(fp)
    4bfc:	10803fcc 	andi	r2,r2,255
    4c00:	10802b60 	cmpeqi	r2,r2,173
    4c04:	10000a1e 	bne	r2,zero,4c30 <ad9144_setup+0x190>
		printf("%s : scratchpad read-write failed (0x%x)!\n", __func__,
    4c08:	e0bffa83 	ldbu	r2,-22(fp)
    4c0c:	10803fcc 	andi	r2,r2,255
    4c10:	100d883a 	mov	r6,r2
    4c14:	014000f4 	movhi	r5,3
    4c18:	29467704 	addi	r5,r5,6620
    4c1c:	010000f4 	movhi	r4,3
    4c20:	21061004 	addi	r4,r4,6208
    4c24:	001634c0 	call	1634c <printf>
		       scratchpad);
		return -1;
    4c28:	00bfffc4 	movi	r2,-1
    4c2c:	00011406 	br	5080 <ad9144_setup+0x5e0>
	}

	// power-up and dac initialization
	ad9144_spi_write(dev, REG_PWRCNTRL0, 0x00);	// dacs - power up everything
    4c30:	000d883a 	mov	r6,zero
    4c34:	01400444 	movi	r5,17
    4c38:	e13ffc17 	ldw	r4,-16(fp)
    4c3c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CLKCFG0, 0x00);	// clocks - power up everything
    4c40:	000d883a 	mov	r6,zero
    4c44:	01402004 	movi	r5,128
    4c48:	e13ffc17 	ldw	r4,-16(fp)
    4c4c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYSREF_ACTRL0, 0x00);	// sysref - power up/falling edge
    4c50:	000d883a 	mov	r6,zero
    4c54:	01402044 	movi	r5,129
    4c58:	e13ffc17 	ldw	r4,-16(fp)
    4c5c:	00043080 	call	4308 <ad9144_spi_write>

	// required device configurations
	ad9144_spi_write_seq(dev, ad9144_required_device_config, ARRAY_SIZE(ad9144_required_device_config));
    4c60:	01800144 	movi	r6,5
    4c64:	014000f4 	movhi	r5,3
    4c68:	2945d784 	addi	r5,r5,5982
    4c6c:	e13ffc17 	ldw	r4,-16(fp)
    4c70:	00044300 	call	4430 <ad9144_spi_write_seq>
	ad9144_spi_write_seq(dev, ad9144_optimal_serdes_settings, ARRAY_SIZE(ad9144_optimal_serdes_settings));
    4c74:	018003c4 	movi	r6,15
    4c78:	014000f4 	movhi	r5,3
    4c7c:	2945dc84 	addi	r5,r5,6002
    4c80:	e13ffc17 	ldw	r4,-16(fp)
    4c84:	00044300 	call	4430 <ad9144_spi_write_seq>

	if (init_param->pll_enable)
    4c88:	e0bff817 	ldw	r2,-32(fp)
    4c8c:	108019c3 	ldbu	r2,103(r2)
    4c90:	10803fcc 	andi	r2,r2,255
    4c94:	10000326 	beq	r2,zero,4ca4 <ad9144_setup+0x204>
		ad9144_pll_setup(dev, init_param);
    4c98:	e17ff817 	ldw	r5,-32(fp)
    4c9c:	e13ffc17 	ldw	r4,-16(fp)
    4ca0:	00047f00 	call	47f0 <ad9144_pll_setup>

	// digital data path

	switch (init_param->interpolation) {
    4ca4:	e0bff817 	ldw	r2,-32(fp)
    4ca8:	10800443 	ldbu	r2,17(r2)
    4cac:	10803fcc 	andi	r2,r2,255
    4cb0:	10c00120 	cmpeqi	r3,r2,4
    4cb4:	1800071e 	bne	r3,zero,4cd4 <ad9144_setup+0x234>
    4cb8:	10c00220 	cmpeqi	r3,r2,8
    4cbc:	1800081e 	bne	r3,zero,4ce0 <ad9144_setup+0x240>
    4cc0:	108000a0 	cmpeqi	r2,r2,2
    4cc4:	10000926 	beq	r2,zero,4cec <ad9144_setup+0x24c>
	case 2:
		val = 0x01;
    4cc8:	00800044 	movi	r2,1
    4ccc:	e0bffd15 	stw	r2,-12(fp)
		break;
    4cd0:	00000806 	br	4cf4 <ad9144_setup+0x254>
	case 4:
		val = 0x03;
    4cd4:	008000c4 	movi	r2,3
    4cd8:	e0bffd15 	stw	r2,-12(fp)
		break;
    4cdc:	00000506 	br	4cf4 <ad9144_setup+0x254>
	case 8:
		val = 0x04;
    4ce0:	00800104 	movi	r2,4
    4ce4:	e0bffd15 	stw	r2,-12(fp)
		break;
    4ce8:	00000206 	br	4cf4 <ad9144_setup+0x254>
	default:
		val = 0x00;
    4cec:	e03ffd15 	stw	zero,-12(fp)
		break;
    4cf0:	0001883a 	nop
	}

	ad9144_spi_write(dev, REG_INTERP_MODE, val);
    4cf4:	e0bffd17 	ldw	r2,-12(fp)
    4cf8:	10803fcc 	andi	r2,r2,255
    4cfc:	100d883a 	mov	r6,r2
    4d00:	01404484 	movi	r5,274
    4d04:	e13ffc17 	ldw	r4,-16(fp)
    4d08:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DATA_FORMAT, 0x00);	// 2's complement
    4d0c:	000d883a 	mov	r6,zero
    4d10:	01404404 	movi	r5,272
    4d14:	e13ffc17 	ldw	r4,-16(fp)
    4d18:	00043080 	call	4308 <ad9144_spi_write>

	// transport layer

	ad9144_spi_write(dev, REG_MASTER_PD, 0x00);	// phy - power up
    4d1c:	000d883a 	mov	r6,zero
    4d20:	01408004 	movi	r5,512
    4d24:	e13ffc17 	ldw	r4,-16(fp)
    4d28:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_PHY_PD, 0x00);	// phy - power up
    4d2c:	000d883a 	mov	r6,zero
    4d30:	01408044 	movi	r5,513
    4d34:	e13ffc17 	ldw	r4,-16(fp)
    4d38:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_0, 0x00);	// single link - link 0
    4d3c:	000d883a 	mov	r6,zero
    4d40:	0140c004 	movi	r5,768
    4d44:	e13ffc17 	ldw	r4,-16(fp)
    4d48:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_setup_jesd204_link(dev, init_param);
    4d4c:	e17ff817 	ldw	r5,-32(fp)
    4d50:	e13ffc17 	ldw	r4,-16(fp)
    4d54:	00044c40 	call	44c4 <ad9144_setup_jesd204_link>

	// physical layer

	if (init_param->lane_rate_kbps < 2880000) {
    4d58:	e0bff817 	ldw	r2,-32(fp)
    4d5c:	10c01517 	ldw	r3,84(r2)
    4d60:	00800b34 	movhi	r2,44
    4d64:	10bc7fc4 	addi	r2,r2,-3585
    4d68:	10c00536 	bltu	r2,r3,4d80 <ad9144_setup+0x2e0>
		serdes_cdr = 0x0a;
    4d6c:	00800284 	movi	r2,10
    4d70:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x06;
    4d74:	00800184 	movi	r2,6
    4d78:	e0bfff15 	stw	r2,-4(fp)
    4d7c:	00000e06 	br	4db8 <ad9144_setup+0x318>
	} else if (init_param->lane_rate_kbps < 5750000) {
    4d80:	e0bff817 	ldw	r2,-32(fp)
    4d84:	10c01517 	ldw	r3,84(r2)
    4d88:	00801634 	movhi	r2,88
    4d8c:	10af3bc4 	addi	r2,r2,-17169
    4d90:	10c00536 	bltu	r2,r3,4da8 <ad9144_setup+0x308>
		serdes_cdr = 0x08;
    4d94:	00800204 	movi	r2,8
    4d98:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x05;
    4d9c:	00800144 	movi	r2,5
    4da0:	e0bfff15 	stw	r2,-4(fp)
    4da4:	00000406 	br	4db8 <ad9144_setup+0x318>
	} else {
		serdes_cdr = 0x28;
    4da8:	00800a04 	movi	r2,40
    4dac:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x04;
    4db0:	00800104 	movi	r2,4
    4db4:	e0bfff15 	stw	r2,-4(fp)
	}

	ad9144_spi_write(dev, REG_DEV_CONFIG_9, 0xb7);		// jesd termination
    4db8:	01802dc4 	movi	r6,183
    4dbc:	0140aa84 	movi	r5,682
    4dc0:	e13ffc17 	ldw	r4,-16(fp)
    4dc4:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_10, 0x87);		// jesd termination
    4dc8:	018021c4 	movi	r6,135
    4dcc:	0140aac4 	movi	r5,683
    4dd0:	e13ffc17 	ldw	r4,-16(fp)
    4dd4:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_11, 0xb7);		// jesd termination
    4dd8:	01802dc4 	movi	r6,183
    4ddc:	0140ac44 	movi	r5,689
    4de0:	e13ffc17 	ldw	r4,-16(fp)
    4de4:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_12, 0x87);		// jesd termination
    4de8:	018021c4 	movi	r6,135
    4dec:	0140ac84 	movi	r5,690
    4df0:	e13ffc17 	ldw	r4,-16(fp)
    4df4:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_TERM_BLK1_CTRLREG0, 0x01);	// input termination calibration
    4df8:	01800044 	movi	r6,1
    4dfc:	0140a9c4 	movi	r5,679
    4e00:	e13ffc17 	ldw	r4,-16(fp)
    4e04:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_TERM_BLK2_CTRLREG0, 0x01);	// input termination calibration
    4e08:	01800044 	movi	r6,1
    4e0c:	0140ab84 	movi	r5,686
    4e10:	e13ffc17 	ldw	r4,-16(fp)
    4e14:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SERDES_SPI_REG, 0x01);	// pclk == qbd master clock
    4e18:	01800044 	movi	r6,1
    4e1c:	0140c504 	movi	r5,788
    4e20:	e13ffc17 	ldw	r4,-16(fp)
    4e24:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_OPERATING_MODE_REG_0, serdes_cdr);
    4e28:	e0bffe17 	ldw	r2,-8(fp)
    4e2c:	10803fcc 	andi	r2,r2,255
    4e30:	100d883a 	mov	r6,r2
    4e34:	01408c04 	movi	r5,560
    4e38:	e13ffc17 	ldw	r4,-16(fp)
    4e3c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_RESET, 0x00);	// cdr reset
    4e40:	000d883a 	mov	r6,zero
    4e44:	01408184 	movi	r5,518
    4e48:	e13ffc17 	ldw	r4,-16(fp)
    4e4c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_RESET, 0x01);	// cdr reset
    4e50:	01800044 	movi	r6,1
    4e54:	01408184 	movi	r5,518
    4e58:	e13ffc17 	ldw	r4,-16(fp)
    4e5c:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_REF_CLK_DIVIDER_LDO, serdes_plldiv);
    4e60:	e0bfff17 	ldw	r2,-4(fp)
    4e64:	10803fcc 	andi	r2,r2,255
    4e68:	100d883a 	mov	r6,r2
    4e6c:	0140a244 	movi	r5,649
    4e70:	e13ffc17 	ldw	r4,-16(fp)
    4e74:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNTH_ENABLE_CNTRL, 0x01);	// enable serdes pll
    4e78:	01800044 	movi	r6,1
    4e7c:	0140a004 	movi	r5,640
    4e80:	e13ffc17 	ldw	r4,-16(fp)
    4e84:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNTH_ENABLE_CNTRL, 0x05);	// enable serdes calibration
    4e88:	01800144 	movi	r6,5
    4e8c:	0140a004 	movi	r5,640
    4e90:	e13ffc17 	ldw	r4,-16(fp)
    4e94:	00043080 	call	4308 <ad9144_spi_write>

	mdelay(20);
    4e98:	01138804 	movi	r4,20000
    4e9c:	0025e400 	call	25e40 <usleep>

	ret = ad9144_spi_check_status(dev, REG_PLL_STATUS, 0x01, 0x01);
    4ea0:	01c00044 	movi	r7,1
    4ea4:	01800044 	movi	r6,1
    4ea8:	0140a044 	movi	r5,641
    4eac:	e13ffc17 	ldw	r4,-16(fp)
    4eb0:	00043840 	call	4384 <ad9144_spi_check_status>
    4eb4:	e0bffb15 	stw	r2,-20(fp)

	if (ret == -1)
    4eb8:	e0bffb17 	ldw	r2,-20(fp)
    4ebc:	10bfffd8 	cmpnei	r2,r2,-1
    4ec0:	1000051e 	bne	r2,zero,4ed8 <ad9144_setup+0x438>
		printf("%s : PLL NOT locked!.\n", __func__);
    4ec4:	014000f4 	movhi	r5,3
    4ec8:	29467704 	addi	r5,r5,6620
    4ecc:	010000f4 	movhi	r4,3
    4ed0:	21061b04 	addi	r4,r4,6252
    4ed4:	001634c0 	call	1634c <printf>

	ad9144_spi_write(dev, REG_EQ_BIAS_REG, 0x62);	// equalizer
    4ed8:	01801884 	movi	r6,98
    4edc:	01409a04 	movi	r5,616
    4ee0:	e13ffc17 	ldw	r4,-16(fp)
    4ee4:	00043080 	call	4308 <ad9144_spi_write>

	// data link layer

	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_1, 0x01);	// subclass-1
    4ee8:	01800044 	movi	r6,1
    4eec:	0140c044 	movi	r5,769
    4ef0:	e13ffc17 	ldw	r4,-16(fp)
    4ef4:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_DELAY_0, 0x00);	// lmfc delay
    4ef8:	000d883a 	mov	r6,zero
    4efc:	0140c104 	movi	r5,772
    4f00:	e13ffc17 	ldw	r4,-16(fp)
    4f04:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_DELAY_1, 0x00);	// lmfc delay
    4f08:	000d883a 	mov	r6,zero
    4f0c:	0140c144 	movi	r5,773
    4f10:	e13ffc17 	ldw	r4,-16(fp)
    4f14:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_VAR_0, 0x0a);	// receive buffer delay
    4f18:	01800284 	movi	r6,10
    4f1c:	0140c184 	movi	r5,774
    4f20:	e13ffc17 	ldw	r4,-16(fp)
    4f24:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_VAR_1, 0x0a);	// receive buffer delay
    4f28:	01800284 	movi	r6,10
    4f2c:	0140c1c4 	movi	r5,775
    4f30:	e13ffc17 	ldw	r4,-16(fp)
    4f34:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0x01);	// sync-oneshot mode
    4f38:	01800044 	movi	r6,1
    4f3c:	01400e84 	movi	r5,58
    4f40:	e13ffc17 	ldw	r4,-16(fp)
    4f44:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0x81);	// sync-enable
    4f48:	01802044 	movi	r6,129
    4f4c:	01400e84 	movi	r5,58
    4f50:	e13ffc17 	ldw	r4,-16(fp)
    4f54:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0xc1);	// sysref-armed
    4f58:	01803044 	movi	r6,193
    4f5c:	01400e84 	movi	r5,58
    4f60:	e13ffc17 	ldw	r4,-16(fp)
    4f64:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_0_1,
			 SRC_LANE0(init_param->jesd204_lane_xbar[0]) |
    4f68:	e0bff817 	ldw	r2,-32(fp)
    4f6c:	108017c3 	ldbu	r2,95(r2)
    4f70:	108001cc 	andi	r2,r2,7
    4f74:	1007883a 	mov	r3,r2
			 SRC_LANE1(init_param->jesd204_lane_xbar[1]));
    4f78:	e0bff817 	ldw	r2,-32(fp)
    4f7c:	10801803 	ldbu	r2,96(r2)
    4f80:	10803fcc 	andi	r2,r2,255
    4f84:	100490fa 	slli	r2,r2,3
    4f88:	10800e0c 	andi	r2,r2,56
			 SRC_LANE0(init_param->jesd204_lane_xbar[0]) |
    4f8c:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_0_1,
    4f90:	10803fcc 	andi	r2,r2,255
    4f94:	100d883a 	mov	r6,r2
    4f98:	0140c204 	movi	r5,776
    4f9c:	e13ffc17 	ldw	r4,-16(fp)
    4fa0:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_2_3,
			 SRC_LANE2(init_param->jesd204_lane_xbar[2]) |
    4fa4:	e0bff817 	ldw	r2,-32(fp)
    4fa8:	10801843 	ldbu	r2,97(r2)
    4fac:	108001cc 	andi	r2,r2,7
    4fb0:	1007883a 	mov	r3,r2
			 SRC_LANE3(init_param->jesd204_lane_xbar[3]));
    4fb4:	e0bff817 	ldw	r2,-32(fp)
    4fb8:	10801883 	ldbu	r2,98(r2)
    4fbc:	10803fcc 	andi	r2,r2,255
    4fc0:	100490fa 	slli	r2,r2,3
    4fc4:	10800e0c 	andi	r2,r2,56
			 SRC_LANE2(init_param->jesd204_lane_xbar[2]) |
    4fc8:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_2_3,
    4fcc:	10803fcc 	andi	r2,r2,255
    4fd0:	100d883a 	mov	r6,r2
    4fd4:	0140c244 	movi	r5,777
    4fd8:	e13ffc17 	ldw	r4,-16(fp)
    4fdc:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_4_5,
			 SRC_LANE4(init_param->jesd204_lane_xbar[4]) |
    4fe0:	e0bff817 	ldw	r2,-32(fp)
    4fe4:	108018c3 	ldbu	r2,99(r2)
    4fe8:	108001cc 	andi	r2,r2,7
    4fec:	1007883a 	mov	r3,r2
			 SRC_LANE5(init_param->jesd204_lane_xbar[5]));
    4ff0:	e0bff817 	ldw	r2,-32(fp)
    4ff4:	10801903 	ldbu	r2,100(r2)
    4ff8:	10803fcc 	andi	r2,r2,255
    4ffc:	100490fa 	slli	r2,r2,3
    5000:	10800e0c 	andi	r2,r2,56
			 SRC_LANE4(init_param->jesd204_lane_xbar[4]) |
    5004:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_4_5,
    5008:	10803fcc 	andi	r2,r2,255
    500c:	100d883a 	mov	r6,r2
    5010:	0140c284 	movi	r5,778
    5014:	e13ffc17 	ldw	r4,-16(fp)
    5018:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_6_7,
			 SRC_LANE6(init_param->jesd204_lane_xbar[6]) |
    501c:	e0bff817 	ldw	r2,-32(fp)
    5020:	10801943 	ldbu	r2,101(r2)
    5024:	108001cc 	andi	r2,r2,7
    5028:	1007883a 	mov	r3,r2
			 SRC_LANE7(init_param->jesd204_lane_xbar[7]));
    502c:	e0bff817 	ldw	r2,-32(fp)
    5030:	10801983 	ldbu	r2,102(r2)
    5034:	10803fcc 	andi	r2,r2,255
    5038:	100490fa 	slli	r2,r2,3
    503c:	10800e0c 	andi	r2,r2,56
			 SRC_LANE6(init_param->jesd204_lane_xbar[6]) |
    5040:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_6_7,
    5044:	10803fcc 	andi	r2,r2,255
    5048:	100d883a 	mov	r6,r2
    504c:	0140c2c4 	movi	r5,779
    5050:	e13ffc17 	ldw	r4,-16(fp)
    5054:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_0, 0x01);	// enable link
    5058:	01800044 	movi	r6,1
    505c:	0140c004 	movi	r5,768
    5060:	e13ffc17 	ldw	r4,-16(fp)
    5064:	00043080 	call	4308 <ad9144_spi_write>

	// dac calibration
	ad9144_dac_calibrate(dev);
    5068:	e13ffc17 	ldw	r4,-16(fp)
    506c:	00050940 	call	5094 <ad9144_dac_calibrate>

	*device = dev;
    5070:	e0bff917 	ldw	r2,-28(fp)
    5074:	e0fffc17 	ldw	r3,-16(fp)
    5078:	10c00015 	stw	r3,0(r2)

	return ret;
    507c:	e0bffb17 	ldw	r2,-20(fp)
}
    5080:	e037883a 	mov	sp,fp
    5084:	dfc00117 	ldw	ra,4(sp)
    5088:	df000017 	ldw	fp,0(sp)
    508c:	dec00204 	addi	sp,sp,8
    5090:	f800283a 	ret

00005094 <ad9144_dac_calibrate>:

int32_t ad9144_dac_calibrate(struct ad9144_dev *dev)
{
    5094:	defffa04 	addi	sp,sp,-24
    5098:	dfc00515 	stw	ra,20(sp)
    509c:	df000415 	stw	fp,16(sp)
    50a0:	df000404 	addi	fp,sp,16
    50a4:	e13ffc15 	stw	r4,-16(fp)
	uint32_t dac_mask;
	unsigned int i;
	int ret;

	dac_mask = (1 << dev->num_converters) - 1;
    50a8:	e0bffc17 	ldw	r2,-16(fp)
    50ac:	10800103 	ldbu	r2,4(r2)
    50b0:	10803fcc 	andi	r2,r2,255
    50b4:	00c00044 	movi	r3,1
    50b8:	1884983a 	sll	r2,r3,r2
    50bc:	10bfffc4 	addi	r2,r2,-1
    50c0:	e0bffe15 	stw	r2,-8(fp)

	/*
	 * DAC calibration sequence as per table 86 AD9144 datasheet Rev B.
	 */
	ad9144_spi_write(dev, REG_CAL_CLKDIV, 0x38);	// set calibration clock to 1m
    50c4:	01800e04 	movi	r6,56
    50c8:	014039c4 	movi	r5,231
    50cc:	e13ffc17 	ldw	r4,-16(fp)
    50d0:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_INIT, 0xa6);	// use isb reference of 38 to set cal
    50d4:	01802984 	movi	r6,166
    50d8:	01403b44 	movi	r5,237
    50dc:	e13ffc17 	ldw	r4,-16(fp)
    50e0:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_INDX, dac_mask);	// select all active DACs
    50e4:	e0bffe17 	ldw	r2,-8(fp)
    50e8:	10803fcc 	andi	r2,r2,255
    50ec:	100d883a 	mov	r6,r2
    50f0:	01403a04 	movi	r5,232
    50f4:	e13ffc17 	ldw	r4,-16(fp)
    50f8:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_CTRL, 0x01);	// single cal enable
    50fc:	01800044 	movi	r6,1
    5100:	01403a44 	movi	r5,233
    5104:	e13ffc17 	ldw	r4,-16(fp)
    5108:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_CTRL, 0x03);	// single cal start
    510c:	018000c4 	movi	r6,3
    5110:	01403a44 	movi	r5,233
    5114:	e13ffc17 	ldw	r4,-16(fp)
    5118:	00043080 	call	4308 <ad9144_spi_write>
	mdelay(10);
    511c:	0109c404 	movi	r4,10000
    5120:	0025e400 	call	25e40 <usleep>

	for (i = 0; i < dev->num_converters; i++) {
    5124:	e03fff15 	stw	zero,-4(fp)
    5128:	00001a06 	br	5194 <ad9144_dac_calibrate+0x100>
		ad9144_spi_write(dev, REG_CAL_INDX, BIT(i));	// read dac-i
    512c:	00c00044 	movi	r3,1
    5130:	e0bfff17 	ldw	r2,-4(fp)
    5134:	1884983a 	sll	r2,r3,r2
    5138:	10803fcc 	andi	r2,r2,255
    513c:	100d883a 	mov	r6,r2
    5140:	01403a04 	movi	r5,232
    5144:	e13ffc17 	ldw	r4,-16(fp)
    5148:	00043080 	call	4308 <ad9144_spi_write>

		ret = ad9144_spi_check_status(dev, REG_CAL_CTRL, 0xc0, 0x80);
    514c:	01c02004 	movi	r7,128
    5150:	01803004 	movi	r6,192
    5154:	01403a44 	movi	r5,233
    5158:	e13ffc17 	ldw	r4,-16(fp)
    515c:	00043840 	call	4384 <ad9144_spi_check_status>
    5160:	e0bffd15 	stw	r2,-12(fp)
		if (ret == -1)
    5164:	e0bffd17 	ldw	r2,-12(fp)
    5168:	10bfffd8 	cmpnei	r2,r2,-1
    516c:	1000061e 	bne	r2,zero,5188 <ad9144_dac_calibrate+0xf4>
			printf("%s: dac-%d calibration failed!\n", __func__, i);
    5170:	e1bfff17 	ldw	r6,-4(fp)
    5174:	014000f4 	movhi	r5,3
    5178:	29467b04 	addi	r5,r5,6636
    517c:	010000f4 	movhi	r4,3
    5180:	21062104 	addi	r4,r4,6276
    5184:	001634c0 	call	1634c <printf>
	for (i = 0; i < dev->num_converters; i++) {
    5188:	e0bfff17 	ldw	r2,-4(fp)
    518c:	10800044 	addi	r2,r2,1
    5190:	e0bfff15 	stw	r2,-4(fp)
    5194:	e0bffc17 	ldw	r2,-16(fp)
    5198:	10800103 	ldbu	r2,4(r2)
    519c:	10803fcc 	andi	r2,r2,255
    51a0:	e0ffff17 	ldw	r3,-4(fp)
    51a4:	18bfe136 	bltu	r3,r2,512c <__alt_mem_mcu_subsystem_ram_0+0x77fe512c>
	}

	ad9144_spi_write(dev, REG_CAL_CLKDIV, 0x30);	// turn off cal clock
    51a8:	01800c04 	movi	r6,48
    51ac:	014039c4 	movi	r5,231
    51b0:	e13ffc17 	ldw	r4,-16(fp)
    51b4:	00043080 	call	4308 <ad9144_spi_write>

	return 0;
    51b8:	0005883a 	mov	r2,zero
}
    51bc:	e037883a 	mov	sp,fp
    51c0:	dfc00117 	ldw	ra,4(sp)
    51c4:	df000017 	ldw	fp,0(sp)
    51c8:	dec00204 	addi	sp,sp,8
    51cc:	f800283a 	ret

000051d0 <ad9144_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9144_remove(struct ad9144_dev *dev)
{
    51d0:	defffc04 	addi	sp,sp,-16
    51d4:	dfc00315 	stw	ra,12(sp)
    51d8:	df000215 	stw	fp,8(sp)
    51dc:	df000204 	addi	fp,sp,8
    51e0:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
    51e4:	e0bffe17 	ldw	r2,-8(fp)
    51e8:	10800017 	ldw	r2,0(r2)
    51ec:	1009883a 	mov	r4,r2
    51f0:	000bf900 	call	bf90 <spi_remove>
    51f4:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
    51f8:	e13ffe17 	ldw	r4,-8(fp)
    51fc:	001526c0 	call	1526c <free>

	return ret;
    5200:	e0bfff17 	ldw	r2,-4(fp)
}
    5204:	e037883a 	mov	sp,fp
    5208:	dfc00117 	ldw	ra,4(sp)
    520c:	df000017 	ldw	fp,0(sp)
    5210:	dec00204 	addi	sp,sp,8
    5214:	f800283a 	ret

00005218 <ad9144_status>:

/***************************************************************************//**
 * @brief ad9144_status - return the status of the JESD interface
 *******************************************************************************/
int32_t ad9144_status(struct ad9144_dev *dev)
{
    5218:	defffa04 	addi	sp,sp,-24
    521c:	dfc00515 	stw	ra,20(sp)
    5220:	df000415 	stw	fp,16(sp)
    5224:	df000404 	addi	fp,sp,16
    5228:	e13ffc15 	stw	r4,-16(fp)

	uint8_t status = 0;
    522c:	e03ffdc5 	stb	zero,-9(fp)
	int32_t ret = 0;
    5230:	e03fff15 	stw	zero,-4(fp)
	uint32_t lane_mask;

	lane_mask = (1 << dev->num_lanes) - 1;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800143 	ldbu	r2,5(r2)
    523c:	10803fcc 	andi	r2,r2,255
    5240:	00c00044 	movi	r3,1
    5244:	1884983a 	sll	r2,r3,r2
    5248:	10bfffc4 	addi	r2,r2,-1
    524c:	e0bffe15 	stw	r2,-8(fp)

	// check for jesd status on all lanes
	// failures on top are 100% guaranteed to make subsequent status checks fail

	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
    5250:	e0bffdc4 	addi	r2,fp,-9
    5254:	100d883a 	mov	r6,r2
    5258:	01411c04 	movi	r5,1136
    525c:	e13ffc17 	ldw	r4,-16(fp)
    5260:	00042800 	call	4280 <ad9144_spi_read>
	if (status != lane_mask) {
    5264:	e0bffdc3 	ldbu	r2,-9(fp)
    5268:	10803fcc 	andi	r2,r2,255
    526c:	e0fffe17 	ldw	r3,-8(fp)
    5270:	18800a26 	beq	r3,r2,529c <ad9144_status+0x84>
		printf("%s : CGS NOT received (%x)!.\n", __func__, status);
    5274:	e0bffdc3 	ldbu	r2,-9(fp)
    5278:	10803fcc 	andi	r2,r2,255
    527c:	100d883a 	mov	r6,r2
    5280:	014000f4 	movhi	r5,3
    5284:	29468104 	addi	r5,r5,6660
    5288:	010000f4 	movhi	r4,3
    528c:	21062904 	addi	r4,r4,6308
    5290:	001634c0 	call	1634c <printf>
		ret = -1;
    5294:	00bfffc4 	movi	r2,-1
    5298:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_INITLANESYNCFLG, &status);
    529c:	e0bffdc4 	addi	r2,fp,-9
    52a0:	100d883a 	mov	r6,r2
    52a4:	01411cc4 	movi	r5,1139
    52a8:	e13ffc17 	ldw	r4,-16(fp)
    52ac:	00042800 	call	4280 <ad9144_spi_read>
	if (status != lane_mask) {
    52b0:	e0bffdc3 	ldbu	r2,-9(fp)
    52b4:	10803fcc 	andi	r2,r2,255
    52b8:	e0fffe17 	ldw	r3,-8(fp)
    52bc:	18800a26 	beq	r3,r2,52e8 <ad9144_status+0xd0>
		printf("%s : ILAS NOT received (%x)!.\n", __func__, status);
    52c0:	e0bffdc3 	ldbu	r2,-9(fp)
    52c4:	10803fcc 	andi	r2,r2,255
    52c8:	100d883a 	mov	r6,r2
    52cc:	014000f4 	movhi	r5,3
    52d0:	29468104 	addi	r5,r5,6660
    52d4:	010000f4 	movhi	r4,3
    52d8:	21063104 	addi	r4,r4,6340
    52dc:	001634c0 	call	1634c <printf>
		ret = -1;
    52e0:	00bfffc4 	movi	r2,-1
    52e4:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_FRAMESYNCFLG, &status);
    52e8:	e0bffdc4 	addi	r2,fp,-9
    52ec:	100d883a 	mov	r6,r2
    52f0:	01411c44 	movi	r5,1137
    52f4:	e13ffc17 	ldw	r4,-16(fp)
    52f8:	00042800 	call	4280 <ad9144_spi_read>
	if (status != lane_mask) {
    52fc:	e0bffdc3 	ldbu	r2,-9(fp)
    5300:	10803fcc 	andi	r2,r2,255
    5304:	e0fffe17 	ldw	r3,-8(fp)
    5308:	18800a26 	beq	r3,r2,5334 <ad9144_status+0x11c>
		printf("%s : framer OUT OF SYNC (%x)!.\n", __func__, status);
    530c:	e0bffdc3 	ldbu	r2,-9(fp)
    5310:	10803fcc 	andi	r2,r2,255
    5314:	100d883a 	mov	r6,r2
    5318:	014000f4 	movhi	r5,3
    531c:	29468104 	addi	r5,r5,6660
    5320:	010000f4 	movhi	r4,3
    5324:	21063904 	addi	r4,r4,6372
    5328:	001634c0 	call	1634c <printf>
		ret = -1;
    532c:	00bfffc4 	movi	r2,-1
    5330:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_GOODCHKSUMFLG, &status);
    5334:	e0bffdc4 	addi	r2,fp,-9
    5338:	100d883a 	mov	r6,r2
    533c:	01411c84 	movi	r5,1138
    5340:	e13ffc17 	ldw	r4,-16(fp)
    5344:	00042800 	call	4280 <ad9144_spi_read>
	if (status != lane_mask) {
    5348:	e0bffdc3 	ldbu	r2,-9(fp)
    534c:	10803fcc 	andi	r2,r2,255
    5350:	e0fffe17 	ldw	r3,-8(fp)
    5354:	18800a26 	beq	r3,r2,5380 <ad9144_status+0x168>
		printf("%s : check-sum MISMATCH (%x)!.\n", __func__, status);
    5358:	e0bffdc3 	ldbu	r2,-9(fp)
    535c:	10803fcc 	andi	r2,r2,255
    5360:	100d883a 	mov	r6,r2
    5364:	014000f4 	movhi	r5,3
    5368:	29468104 	addi	r5,r5,6660
    536c:	010000f4 	movhi	r4,3
    5370:	21064104 	addi	r4,r4,6404
    5374:	001634c0 	call	1634c <printf>
		ret = -1;
    5378:	00bfffc4 	movi	r2,-1
    537c:	e0bfff15 	stw	r2,-4(fp)
	}

	// R. Gisko
	ad9144_spi_read(dev, REG_IRQ_STATUS0, &status);
    5380:	e0bffdc4 	addi	r2,fp,-9
    5384:	100d883a 	mov	r6,r2
    5388:	014008c4 	movi	r5,35
    538c:	e13ffc17 	ldw	r4,-16(fp)
    5390:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_read(dev, REG_IRQ_STATUS1, &status);
    5394:	e0bffdc4 	addi	r2,fp,-9
    5398:	100d883a 	mov	r6,r2
    539c:	01400904 	movi	r5,36
    53a0:	e13ffc17 	ldw	r4,-16(fp)
    53a4:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_read(dev, REG_IRQ_STATUS2, &status);
    53a8:	e0bffdc4 	addi	r2,fp,-9
    53ac:	100d883a 	mov	r6,r2
    53b0:	01400944 	movi	r5,37
    53b4:	e13ffc17 	ldw	r4,-16(fp)
    53b8:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_read(dev, REG_IRQ_STATUS3, &status);
    53bc:	e0bffdc4 	addi	r2,fp,-9
    53c0:	100d883a 	mov	r6,r2
    53c4:	01400984 	movi	r5,38
    53c8:	e13ffc17 	ldw	r4,-16(fp)
    53cc:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_write(dev, REG_CODEGRPSYNCFLG, 0x80);
    53d0:	01802004 	movi	r6,128
    53d4:	01411c04 	movi	r5,1136
    53d8:	e13ffc17 	ldw	r4,-16(fp)
    53dc:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
    53e0:	e0bffdc4 	addi	r2,fp,-9
    53e4:	100d883a 	mov	r6,r2
    53e8:	01411c04 	movi	r5,1136
    53ec:	e13ffc17 	ldw	r4,-16(fp)
    53f0:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
    53f4:	e0bffdc4 	addi	r2,fp,-9
    53f8:	100d883a 	mov	r6,r2
    53fc:	01411c04 	movi	r5,1136
    5400:	e13ffc17 	ldw	r4,-16(fp)
    5404:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
    5408:	e0bffdc4 	addi	r2,fp,-9
    540c:	100d883a 	mov	r6,r2
    5410:	01411c04 	movi	r5,1136
    5414:	e13ffc17 	ldw	r4,-16(fp)
    5418:	00042800 	call	4280 <ad9144_spi_read>
	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
    541c:	e0bffdc4 	addi	r2,fp,-9
    5420:	100d883a 	mov	r6,r2
    5424:	01411c04 	movi	r5,1136
    5428:	e13ffc17 	ldw	r4,-16(fp)
    542c:	00042800 	call	4280 <ad9144_spi_read>

	return ret;
    5430:	e0bfff17 	ldw	r2,-4(fp)
}
    5434:	e037883a 	mov	sp,fp
    5438:	dfc00117 	ldw	ra,4(sp)
    543c:	df000017 	ldw	fp,0(sp)
    5440:	dec00204 	addi	sp,sp,8
    5444:	f800283a 	ret

00005448 <ad9144_short_pattern_test>:
/***************************************************************************//**
 * @brief ad9144_short_pattern_test
 *******************************************************************************/
int32_t ad9144_short_pattern_test(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
    5448:	defff604 	addi	sp,sp,-40
    544c:	dfc00915 	stw	ra,36(sp)
    5450:	df000815 	stw	fp,32(sp)
    5454:	df000804 	addi	fp,sp,32
    5458:	e13ffb15 	stw	r4,-20(fp)
    545c:	e17ffa15 	stw	r5,-24(fp)
	uint32_t dac = 0;
    5460:	e03fff15 	stw	zero,-4(fp)
	uint32_t sample = 0;
    5464:	e03ffe15 	stw	zero,-8(fp)
	uint8_t status = 0;
    5468:	e03ffdc5 	stb	zero,-9(fp)
	int32_t ret = 0;
    546c:	e03ffc15 	stw	zero,-16(fp)

	for (dac = 0; dac < dev->num_converters; dac++) {
    5470:	e03fff15 	stw	zero,-4(fp)
    5474:	00007306 	br	5644 <ad9144_short_pattern_test+0x1fc>
		for (sample = 0; sample < 4; sample++) {
    5478:	e03ffe15 	stw	zero,-8(fp)
    547c:	00006b06 	br	562c <ad9144_short_pattern_test+0x1e4>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x00));
    5480:	e0bffe17 	ldw	r2,-8(fp)
    5484:	1004913a 	slli	r2,r2,4
    5488:	1007883a 	mov	r3,r2
    548c:	e0bfff17 	ldw	r2,-4(fp)
    5490:	100490ba 	slli	r2,r2,2
    5494:	1884b03a 	or	r2,r3,r2
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    5498:	10803fcc 	andi	r2,r2,255
    549c:	100d883a 	mov	r6,r2
    54a0:	0140cb04 	movi	r5,812
    54a4:	e13ffb17 	ldw	r4,-20(fp)
    54a8:	00043080 	call	4308 <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_2,
					 (init_param->stpl_samples[dac][sample]>>8));
    54ac:	e0fffa17 	ldw	r3,-24(fp)
    54b0:	e0bfff17 	ldw	r2,-4(fp)
    54b4:	100890ba 	slli	r4,r2,2
    54b8:	e0bffe17 	ldw	r2,-8(fp)
    54bc:	2085883a 	add	r2,r4,r2
    54c0:	10800144 	addi	r2,r2,5
    54c4:	100490ba 	slli	r2,r2,2
    54c8:	1885883a 	add	r2,r3,r2
    54cc:	10800017 	ldw	r2,0(r2)
    54d0:	1004d23a 	srli	r2,r2,8
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_2,
    54d4:	10803fcc 	andi	r2,r2,255
    54d8:	100d883a 	mov	r6,r2
    54dc:	0140cb84 	movi	r5,814
    54e0:	e13ffb17 	ldw	r4,-20(fp)
    54e4:	00043080 	call	4308 <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_1,
					 (init_param->stpl_samples[dac][sample]>>0));
    54e8:	e0fffa17 	ldw	r3,-24(fp)
    54ec:	e0bfff17 	ldw	r2,-4(fp)
    54f0:	100890ba 	slli	r4,r2,2
    54f4:	e0bffe17 	ldw	r2,-8(fp)
    54f8:	2085883a 	add	r2,r4,r2
    54fc:	10800144 	addi	r2,r2,5
    5500:	100490ba 	slli	r2,r2,2
    5504:	1885883a 	add	r2,r3,r2
    5508:	10800017 	ldw	r2,0(r2)
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_1,
    550c:	10803fcc 	andi	r2,r2,255
    5510:	100d883a 	mov	r6,r2
    5514:	0140cb44 	movi	r5,813
    5518:	e13ffb17 	ldw	r4,-20(fp)
    551c:	00043080 	call	4308 <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x01));
    5520:	e0bffe17 	ldw	r2,-8(fp)
    5524:	1004913a 	slli	r2,r2,4
    5528:	1007883a 	mov	r3,r2
    552c:	e0bfff17 	ldw	r2,-4(fp)
    5530:	100490ba 	slli	r2,r2,2
    5534:	1884b03a 	or	r2,r3,r2
    5538:	10800054 	ori	r2,r2,1
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    553c:	10803fcc 	andi	r2,r2,255
    5540:	100d883a 	mov	r6,r2
    5544:	0140cb04 	movi	r5,812
    5548:	e13ffb17 	ldw	r4,-20(fp)
    554c:	00043080 	call	4308 <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x03));
    5550:	e0bffe17 	ldw	r2,-8(fp)
    5554:	1004913a 	slli	r2,r2,4
    5558:	1007883a 	mov	r3,r2
    555c:	e0bfff17 	ldw	r2,-4(fp)
    5560:	100490ba 	slli	r2,r2,2
    5564:	1884b03a 	or	r2,r3,r2
    5568:	108000d4 	ori	r2,r2,3
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    556c:	10803fcc 	andi	r2,r2,255
    5570:	100d883a 	mov	r6,r2
    5574:	0140cb04 	movi	r5,812
    5578:	e13ffb17 	ldw	r4,-20(fp)
    557c:	00043080 	call	4308 <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x01));
    5580:	e0bffe17 	ldw	r2,-8(fp)
    5584:	1004913a 	slli	r2,r2,4
    5588:	1007883a 	mov	r3,r2
    558c:	e0bfff17 	ldw	r2,-4(fp)
    5590:	100490ba 	slli	r2,r2,2
    5594:	1884b03a 	or	r2,r3,r2
    5598:	10800054 	ori	r2,r2,1
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    559c:	10803fcc 	andi	r2,r2,255
    55a0:	100d883a 	mov	r6,r2
    55a4:	0140cb04 	movi	r5,812
    55a8:	e13ffb17 	ldw	r4,-20(fp)
    55ac:	00043080 	call	4308 <ad9144_spi_write>

			ret = ad9144_spi_check_status(dev,
    55b0:	000f883a 	mov	r7,zero
    55b4:	01800044 	movi	r6,1
    55b8:	0140cbc4 	movi	r5,815
    55bc:	e13ffb17 	ldw	r4,-20(fp)
    55c0:	00043840 	call	4384 <ad9144_spi_check_status>
    55c4:	e0bffc15 	stw	r2,-16(fp)
						      REG_SHORT_TPL_TEST_3,
						      0x01, 0x00);
			if (ret == -1)
    55c8:	e0bffc17 	ldw	r2,-16(fp)
    55cc:	10bfffd8 	cmpnei	r2,r2,-1
    55d0:	1000131e 	bne	r2,zero,5620 <ad9144_short_pattern_test+0x1d8>
				printf("%s : short-pattern-test mismatch (0x%x, 0x%x 0x%x, 0x%x)!.\n",
    55d4:	e0fffa17 	ldw	r3,-24(fp)
    55d8:	e0bfff17 	ldw	r2,-4(fp)
    55dc:	100890ba 	slli	r4,r2,2
    55e0:	e0bffe17 	ldw	r2,-8(fp)
    55e4:	2085883a 	add	r2,r4,r2
    55e8:	10800144 	addi	r2,r2,5
    55ec:	100490ba 	slli	r2,r2,2
    55f0:	1885883a 	add	r2,r3,r2
    55f4:	10800017 	ldw	r2,0(r2)
    55f8:	e0fffdc3 	ldbu	r3,-9(fp)
    55fc:	d8c00115 	stw	r3,4(sp)
    5600:	d8800015 	stw	r2,0(sp)
    5604:	e1fffe17 	ldw	r7,-8(fp)
    5608:	e1bfff17 	ldw	r6,-4(fp)
    560c:	014000f4 	movhi	r5,3
    5610:	29468504 	addi	r5,r5,6676
    5614:	010000f4 	movhi	r4,3
    5618:	21064904 	addi	r4,r4,6436
    561c:	001634c0 	call	1634c <printf>
		for (sample = 0; sample < 4; sample++) {
    5620:	e0bffe17 	ldw	r2,-8(fp)
    5624:	10800044 	addi	r2,r2,1
    5628:	e0bffe15 	stw	r2,-8(fp)
    562c:	e0bffe17 	ldw	r2,-8(fp)
    5630:	10800130 	cmpltui	r2,r2,4
    5634:	103f921e 	bne	r2,zero,5480 <__alt_mem_mcu_subsystem_ram_0+0x77fe5480>
	for (dac = 0; dac < dev->num_converters; dac++) {
    5638:	e0bfff17 	ldw	r2,-4(fp)
    563c:	10800044 	addi	r2,r2,1
    5640:	e0bfff15 	stw	r2,-4(fp)
    5644:	e0bffb17 	ldw	r2,-20(fp)
    5648:	10800103 	ldbu	r2,4(r2)
    564c:	10803fcc 	andi	r2,r2,255
    5650:	e0ffff17 	ldw	r3,-4(fp)
    5654:	18bf8836 	bltu	r3,r2,5478 <__alt_mem_mcu_subsystem_ram_0+0x77fe5478>
				       __func__, dac, sample,
				       init_param->stpl_samples[dac][sample],
				       status);
		}
	}
	return 0;
    5658:	0005883a 	mov	r2,zero
}
    565c:	e037883a 	mov	sp,fp
    5660:	dfc00117 	ldw	ra,4(sp)
    5664:	df000017 	ldw	fp,0(sp)
    5668:	dec00204 	addi	sp,sp,8
    566c:	f800283a 	ret

00005670 <ad9144_datapath_prbs_test>:
/***************************************************************************//**
 * @brief ad9144_datapath_prbs_test
 *******************************************************************************/
int32_t ad9144_datapath_prbs_test(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
    5670:	defffa04 	addi	sp,sp,-24
    5674:	dfc00515 	stw	ra,20(sp)
    5678:	df000415 	stw	fp,16(sp)
    567c:	df000404 	addi	fp,sp,16
    5680:	e13ffd15 	stw	r4,-12(fp)
    5684:	e17ffc15 	stw	r5,-16(fp)

	uint8_t status = 0;
    5688:	e03ffec5 	stb	zero,-5(fp)
	int32_t ret = 0;
    568c:	e03fff15 	stw	zero,-4(fp)


	ad9144_spi_write(dev, REG_PRBS, ((init_param->prbs_type << 2) | 0x03));
    5690:	e0bffc17 	ldw	r2,-16(fp)
    5694:	10801617 	ldw	r2,88(r2)
    5698:	100490ba 	slli	r2,r2,2
    569c:	108000d4 	ori	r2,r2,3
    56a0:	10803fcc 	andi	r2,r2,255
    56a4:	100d883a 	mov	r6,r2
    56a8:	014052c4 	movi	r5,331
    56ac:	e13ffd17 	ldw	r4,-12(fp)
    56b0:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_write(dev, REG_PRBS, ((init_param->prbs_type << 2) | 0x01));
    56b4:	e0bffc17 	ldw	r2,-16(fp)
    56b8:	10801617 	ldw	r2,88(r2)
    56bc:	100490ba 	slli	r2,r2,2
    56c0:	10800054 	ori	r2,r2,1
    56c4:	10803fcc 	andi	r2,r2,255
    56c8:	100d883a 	mov	r6,r2
    56cc:	014052c4 	movi	r5,331
    56d0:	e13ffd17 	ldw	r4,-12(fp)
    56d4:	00043080 	call	4308 <ad9144_spi_write>
	mdelay(500);
    56d8:	01000234 	movhi	r4,8
    56dc:	21284804 	addi	r4,r4,-24288
    56e0:	0025e400 	call	25e40 <usleep>

	ad9144_spi_write(dev, REG_SPI_PAGEINDX, 0x01);
    56e4:	01800044 	movi	r6,1
    56e8:	01400204 	movi	r5,8
    56ec:	e13ffd17 	ldw	r4,-12(fp)
    56f0:	00043080 	call	4308 <ad9144_spi_write>
	ad9144_spi_read(dev, REG_PRBS, &status);
    56f4:	e0bffec4 	addi	r2,fp,-5
    56f8:	100d883a 	mov	r6,r2
    56fc:	014052c4 	movi	r5,331
    5700:	e13ffd17 	ldw	r4,-12(fp)
    5704:	00042800 	call	4280 <ad9144_spi_read>
	if ((status & 0xc0) != 0xc0) {
    5708:	e0bffec3 	ldbu	r2,-5(fp)
    570c:	10803fcc 	andi	r2,r2,255
    5710:	1080300c 	andi	r2,r2,192
    5714:	10803020 	cmpeqi	r2,r2,192
    5718:	10000a1e 	bne	r2,zero,5744 <ad9144_datapath_prbs_test+0xd4>
		printf("%s : PRBS OUT OF SYNC (%x)!.\n", __func__, status);
    571c:	e0bffec3 	ldbu	r2,-5(fp)
    5720:	10803fcc 	andi	r2,r2,255
    5724:	100d883a 	mov	r6,r2
    5728:	014000f4 	movhi	r5,3
    572c:	29468c04 	addi	r5,r5,6704
    5730:	010000f4 	movhi	r4,3
    5734:	21065804 	addi	r4,r4,6496
    5738:	001634c0 	call	1634c <printf>
		ret = -1;
    573c:	00bfffc4 	movi	r2,-1
    5740:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_PRBS_ERROR_I, &status);
    5744:	e0bffec4 	addi	r2,fp,-5
    5748:	100d883a 	mov	r6,r2
    574c:	01405304 	movi	r5,332
    5750:	e13ffd17 	ldw	r4,-12(fp)
    5754:	00042800 	call	4280 <ad9144_spi_read>
	if (status != 0x00) {
    5758:	e0bffec3 	ldbu	r2,-5(fp)
    575c:	10803fcc 	andi	r2,r2,255
    5760:	10000a26 	beq	r2,zero,578c <ad9144_datapath_prbs_test+0x11c>
		printf("%s : PRBS I channel ERRORS (%x)!.\n", __func__,
    5764:	e0bffec3 	ldbu	r2,-5(fp)
    5768:	10803fcc 	andi	r2,r2,255
    576c:	100d883a 	mov	r6,r2
    5770:	014000f4 	movhi	r5,3
    5774:	29468c04 	addi	r5,r5,6704
    5778:	010000f4 	movhi	r4,3
    577c:	21066004 	addi	r4,r4,6528
    5780:	001634c0 	call	1634c <printf>
		       status);
		ret = -1;
    5784:	00bfffc4 	movi	r2,-1
    5788:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_PRBS_ERROR_Q, &status);
    578c:	e0bffec4 	addi	r2,fp,-5
    5790:	100d883a 	mov	r6,r2
    5794:	01405344 	movi	r5,333
    5798:	e13ffd17 	ldw	r4,-12(fp)
    579c:	00042800 	call	4280 <ad9144_spi_read>
	if (status != 0x00) {
    57a0:	e0bffec3 	ldbu	r2,-5(fp)
    57a4:	10803fcc 	andi	r2,r2,255
    57a8:	10000a26 	beq	r2,zero,57d4 <ad9144_datapath_prbs_test+0x164>
		printf("%s : PRBS Q channel ERRORS (%x)!.\n", __func__,
    57ac:	e0bffec3 	ldbu	r2,-5(fp)
    57b0:	10803fcc 	andi	r2,r2,255
    57b4:	100d883a 	mov	r6,r2
    57b8:	014000f4 	movhi	r5,3
    57bc:	29468c04 	addi	r5,r5,6704
    57c0:	010000f4 	movhi	r4,3
    57c4:	21066904 	addi	r4,r4,6564
    57c8:	001634c0 	call	1634c <printf>
		       status);
		ret = -1;
    57cc:	00bfffc4 	movi	r2,-1
    57d0:	e0bfff15 	stw	r2,-4(fp)
	}

	return ret;
    57d4:	e0bfff17 	ldw	r2,-4(fp)
}
    57d8:	e037883a 	mov	sp,fp
    57dc:	dfc00117 	ldw	ra,4(sp)
    57e0:	df000017 	ldw	fp,0(sp)
    57e4:	dec00204 	addi	sp,sp,8
    57e8:	f800283a 	ret

000057ec <ad9523_spi_read>:
 * @return registerValue - The register's value or negative error code.
 *******************************************************************************/
int32_t ad9523_spi_read(struct ad9523_dev *dev,
			uint32_t reg_addr,
			uint32_t *reg_data)
{
    57ec:	defff904 	addi	sp,sp,-28
    57f0:	dfc00615 	stw	ra,24(sp)
    57f4:	df000515 	stw	fp,20(sp)
    57f8:	df000504 	addi	fp,sp,20
    57fc:	e13ffd15 	stw	r4,-12(fp)
    5800:	e17ffc15 	stw	r5,-16(fp)
    5804:	e1bffb15 	stw	r6,-20(fp)
	uint8_t buf[3];

	int32_t ret = 0;
    5808:	e03fff15 	stw	zero,-4(fp)
	uint8_t index;

	*reg_data = 0;
    580c:	e0bffb17 	ldw	r2,-20(fp)
    5810:	10000015 	stw	zero,0(r2)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    5814:	e03ffec5 	stb	zero,-5(fp)
    5818:	00002606 	br	58b4 <ad9523_spi_read+0xc8>
		buf[0] = 0x80 | (reg_addr >> 8);
    581c:	e0bffc17 	ldw	r2,-16(fp)
    5820:	1004d23a 	srli	r2,r2,8
    5824:	1007883a 	mov	r3,r2
    5828:	00bfe004 	movi	r2,-128
    582c:	1884b03a 	or	r2,r3,r2
    5830:	e0bffe05 	stb	r2,-8(fp)
		buf[1] = reg_addr & 0xFF;
    5834:	e0bffc17 	ldw	r2,-16(fp)
    5838:	e0bffe45 	stb	r2,-7(fp)
		buf[2] = 0x00;
    583c:	e03ffe85 	stb	zero,-6(fp)
		ret |= spi_write_and_read(dev->spi_desc,
    5840:	e0bffd17 	ldw	r2,-12(fp)
    5844:	10800017 	ldw	r2,0(r2)
    5848:	e0fffe04 	addi	r3,fp,-8
    584c:	018000c4 	movi	r6,3
    5850:	180b883a 	mov	r5,r3
    5854:	1009883a 	mov	r4,r2
    5858:	000bfc40 	call	bfc4 <spi_write_and_read>
    585c:	1007883a 	mov	r3,r2
    5860:	e0bfff17 	ldw	r2,-4(fp)
    5864:	10c4b03a 	or	r2,r2,r3
    5868:	e0bfff15 	stw	r2,-4(fp)
					  buf,
					  3);
		reg_addr--;
    586c:	e0bffc17 	ldw	r2,-16(fp)
    5870:	10bfffc4 	addi	r2,r2,-1
    5874:	e0bffc15 	stw	r2,-16(fp)
		*reg_data <<= 8;
    5878:	e0bffb17 	ldw	r2,-20(fp)
    587c:	10800017 	ldw	r2,0(r2)
    5880:	1006923a 	slli	r3,r2,8
    5884:	e0bffb17 	ldw	r2,-20(fp)
    5888:	10c00015 	stw	r3,0(r2)
		*reg_data |= buf[2];
    588c:	e0bffb17 	ldw	r2,-20(fp)
    5890:	10c00017 	ldw	r3,0(r2)
    5894:	e0bffe83 	ldbu	r2,-6(fp)
    5898:	10803fcc 	andi	r2,r2,255
    589c:	1886b03a 	or	r3,r3,r2
    58a0:	e0bffb17 	ldw	r2,-20(fp)
    58a4:	10c00015 	stw	r3,0(r2)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    58a8:	e0bffec3 	ldbu	r2,-5(fp)
    58ac:	10800044 	addi	r2,r2,1
    58b0:	e0bffec5 	stb	r2,-5(fp)
    58b4:	e0fffec3 	ldbu	r3,-5(fp)
    58b8:	e0bffc17 	ldw	r2,-16(fp)
    58bc:	1004d43a 	srli	r2,r2,16
    58c0:	18bfd636 	bltu	r3,r2,581c <__alt_mem_mcu_subsystem_ram_0+0x77fe581c>
	}

	return ret;
    58c4:	e0bfff17 	ldw	r2,-4(fp)
}
    58c8:	e037883a 	mov	sp,fp
    58cc:	dfc00117 	ldw	ra,4(sp)
    58d0:	df000017 	ldw	fp,0(sp)
    58d4:	dec00204 	addi	sp,sp,8
    58d8:	f800283a 	ret

000058dc <ad9523_spi_write>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_spi_write(struct ad9523_dev *dev,
			 uint32_t reg_addr,
			 uint32_t reg_data)
{
    58dc:	defff904 	addi	sp,sp,-28
    58e0:	dfc00615 	stw	ra,24(sp)
    58e4:	df000515 	stw	fp,20(sp)
    58e8:	df000504 	addi	fp,sp,20
    58ec:	e13ffd15 	stw	r4,-12(fp)
    58f0:	e17ffc15 	stw	r5,-16(fp)
    58f4:	e1bffb15 	stw	r6,-20(fp)
	uint8_t buf[3];

	int32_t ret = 0;
    58f8:	e03fff15 	stw	zero,-4(fp)
	uint8_t index;

	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    58fc:	e03ffec5 	stb	zero,-5(fp)
    5900:	00002106 	br	5988 <ad9523_spi_write+0xac>
		buf[0] = reg_addr >> 8;
    5904:	e0bffc17 	ldw	r2,-16(fp)
    5908:	1004d23a 	srli	r2,r2,8
    590c:	e0bffe05 	stb	r2,-8(fp)
		buf[1] = reg_addr & 0xFF;
    5910:	e0bffc17 	ldw	r2,-16(fp)
    5914:	e0bffe45 	stb	r2,-7(fp)
		buf[2] = (reg_data >> ((AD9523_TRANSF_LEN(reg_addr) - index - 1) * 8)) & 0xFF;
    5918:	e0bffc17 	ldw	r2,-16(fp)
    591c:	1006d43a 	srli	r3,r2,16
    5920:	e0bffec3 	ldbu	r2,-5(fp)
    5924:	1887c83a 	sub	r3,r3,r2
    5928:	00880034 	movhi	r2,8192
    592c:	10bfffc4 	addi	r2,r2,-1
    5930:	1885883a 	add	r2,r3,r2
    5934:	100490fa 	slli	r2,r2,3
    5938:	e0fffb17 	ldw	r3,-20(fp)
    593c:	1884d83a 	srl	r2,r3,r2
    5940:	e0bffe85 	stb	r2,-6(fp)
		ret |= spi_write_and_read(dev->spi_desc,
    5944:	e0bffd17 	ldw	r2,-12(fp)
    5948:	10800017 	ldw	r2,0(r2)
    594c:	e0fffe04 	addi	r3,fp,-8
    5950:	018000c4 	movi	r6,3
    5954:	180b883a 	mov	r5,r3
    5958:	1009883a 	mov	r4,r2
    595c:	000bfc40 	call	bfc4 <spi_write_and_read>
    5960:	1007883a 	mov	r3,r2
    5964:	e0bfff17 	ldw	r2,-4(fp)
    5968:	10c4b03a 	or	r2,r2,r3
    596c:	e0bfff15 	stw	r2,-4(fp)
					  buf,
					  3);
		reg_addr--;
    5970:	e0bffc17 	ldw	r2,-16(fp)
    5974:	10bfffc4 	addi	r2,r2,-1
    5978:	e0bffc15 	stw	r2,-16(fp)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    597c:	e0bffec3 	ldbu	r2,-5(fp)
    5980:	10800044 	addi	r2,r2,1
    5984:	e0bffec5 	stb	r2,-5(fp)
    5988:	e0fffec3 	ldbu	r3,-5(fp)
    598c:	e0bffc17 	ldw	r2,-16(fp)
    5990:	1004d43a 	srli	r2,r2,16
    5994:	18bfdb36 	bltu	r3,r2,5904 <__alt_mem_mcu_subsystem_ram_0+0x77fe5904>
	}

	return ret;
    5998:	e0bfff17 	ldw	r2,-4(fp)
}
    599c:	e037883a 	mov	sp,fp
    59a0:	dfc00117 	ldw	ra,4(sp)
    59a4:	df000017 	ldw	fp,0(sp)
    59a8:	dec00204 	addi	sp,sp,8
    59ac:	f800283a 	ret

000059b0 <ad9523_io_update>:
 * @brief Updates the AD9523 configuration
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_io_update(struct ad9523_dev *dev)
{
    59b0:	defffd04 	addi	sp,sp,-12
    59b4:	dfc00215 	stw	ra,8(sp)
    59b8:	df000115 	stw	fp,4(sp)
    59bc:	df000104 	addi	fp,sp,4
    59c0:	e13fff15 	stw	r4,-4(fp)
	return ad9523_spi_write(dev,
    59c4:	01800044 	movi	r6,1
    59c8:	01400074 	movhi	r5,1
    59cc:	29408d04 	addi	r5,r5,564
    59d0:	e13fff17 	ldw	r4,-4(fp)
    59d4:	00058dc0 	call	58dc <ad9523_spi_write>
				AD9523_IO_UPDATE,
				AD9523_IO_UPDATE_EN);
}
    59d8:	e037883a 	mov	sp,fp
    59dc:	dfc00117 	ldw	ra,4(sp)
    59e0:	df000017 	ldw	fp,0(sp)
    59e4:	dec00204 	addi	sp,sp,8
    59e8:	f800283a 	ret

000059ec <ad9523_vco_out_map>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_vco_out_map(struct ad9523_dev *dev,
			   uint32_t ch,
			   uint32_t out)
{
    59ec:	defff804 	addi	sp,sp,-32
    59f0:	dfc00715 	stw	ra,28(sp)
    59f4:	df000615 	stw	fp,24(sp)
    59f8:	df000604 	addi	fp,sp,24
    59fc:	e13ffc15 	stw	r4,-16(fp)
    5a00:	e17ffb15 	stw	r5,-20(fp)
    5a04:	e1bffa15 	stw	r6,-24(fp)
	int32_t ret;
	uint32_t mask;
	uint32_t reg_data;

	switch (ch) {
    5a08:	e0bffb17 	ldw	r2,-20(fp)
    5a0c:	108002a8 	cmpgeui	r2,r2,10
    5a10:	1000771e 	bne	r2,zero,5bf0 <ad9523_vco_out_map+0x204>
    5a14:	e0bffb17 	ldw	r2,-20(fp)
    5a18:	100690ba 	slli	r3,r2,2
    5a1c:	00800034 	movhi	r2,0
    5a20:	1885883a 	add	r2,r3,r2
    5a24:	10968b17 	ldw	r2,23084(r2)
    5a28:	1000683a 	jmp	r2
    5a2c:	00005a54 	movui	zero,361
    5a30:	00005a54 	movui	zero,361
    5a34:	00005a54 	movui	zero,361
    5a38:	00005a54 	movui	zero,361
    5a3c:	00005ae0 	cmpeqi	zero,zero,363
    5a40:	00005ae0 	cmpeqi	zero,zero,363
    5a44:	00005ae0 	cmpeqi	zero,zero,363
    5a48:	00005b68 	cmpgeui	zero,zero,365
    5a4c:	00005b68 	cmpgeui	zero,zero,365
    5a50:	00005b68 	cmpgeui	zero,zero,365
	case 0 ... 3:
		ret = ad9523_spi_read(dev,
    5a54:	e0bffd04 	addi	r2,fp,-12
    5a58:	100d883a 	mov	r6,r2
    5a5c:	01400074 	movhi	r5,1
    5a60:	29406ec4 	addi	r5,r5,443
    5a64:	e13ffc17 	ldw	r4,-16(fp)
    5a68:	00057ec0 	call	57ec <ad9523_spi_read>
    5a6c:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				      &reg_data);
		if (ret < 0)
    5a70:	e0bfff17 	ldw	r2,-4(fp)
    5a74:	10006016 	blt	r2,zero,5bf8 <ad9523_vco_out_map+0x20c>
			break;
		mask = AD9523_PLL1_OUTP_CH_CTRL_VCXO_SRC_SEL_CH0 << ch;
    5a78:	00c00044 	movi	r3,1
    5a7c:	e0bffb17 	ldw	r2,-20(fp)
    5a80:	1884983a 	sll	r2,r3,r2
    5a84:	e0bffe15 	stw	r2,-8(fp)
		if (out) {
    5a88:	e0bffa17 	ldw	r2,-24(fp)
    5a8c:	10000726 	beq	r2,zero,5aac <ad9523_vco_out_map+0xc0>
			reg_data |= mask;
    5a90:	e0fffd17 	ldw	r3,-12(fp)
    5a94:	e0bffe17 	ldw	r2,-8(fp)
    5a98:	1884b03a 	or	r2,r3,r2
    5a9c:	e0bffd15 	stw	r2,-12(fp)
			out = AD9523_VCXO;
    5aa0:	00800084 	movi	r2,2
    5aa4:	e0bffa15 	stw	r2,-24(fp)
    5aa8:	00000506 	br	5ac0 <ad9523_vco_out_map+0xd4>
		} else {
			reg_data &= ~mask;
    5aac:	e0bffe17 	ldw	r2,-8(fp)
    5ab0:	0086303a 	nor	r3,zero,r2
    5ab4:	e0bffd17 	ldw	r2,-12(fp)
    5ab8:	1884703a 	and	r2,r3,r2
    5abc:	e0bffd15 	stw	r2,-12(fp)
		}
		ret = ad9523_spi_write(dev,
    5ac0:	e0bffd17 	ldw	r2,-12(fp)
    5ac4:	100d883a 	mov	r6,r2
    5ac8:	01400074 	movhi	r5,1
    5acc:	29406ec4 	addi	r5,r5,443
    5ad0:	e13ffc17 	ldw	r4,-16(fp)
    5ad4:	00058dc0 	call	58dc <ad9523_spi_write>
    5ad8:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				       reg_data);
		break;
    5adc:	00004b06 	br	5c0c <ad9523_vco_out_map+0x220>
	case 4 ... 6:
		ret = ad9523_spi_read(dev,
    5ae0:	e0bffd04 	addi	r2,fp,-12
    5ae4:	100d883a 	mov	r6,r2
    5ae8:	01400074 	movhi	r5,1
    5aec:	29406e84 	addi	r5,r5,442
    5af0:	e13ffc17 	ldw	r4,-16(fp)
    5af4:	00057ec0 	call	57ec <ad9523_spi_read>
    5af8:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CTRL,
				      &reg_data);
		if (ret < 0)
    5afc:	e0bfff17 	ldw	r2,-4(fp)
    5b00:	10003f16 	blt	r2,zero,5c00 <ad9523_vco_out_map+0x214>
			break;
		mask = AD9523_PLL1_OUTP_CTRL_VCO_DIV_SEL_CH4_M2 << (ch - 4);
    5b04:	e0bffb17 	ldw	r2,-20(fp)
    5b08:	10bfff04 	addi	r2,r2,-4
    5b0c:	00c00804 	movi	r3,32
    5b10:	1884983a 	sll	r2,r3,r2
    5b14:	e0bffe15 	stw	r2,-8(fp)
		if (out)
    5b18:	e0bffa17 	ldw	r2,-24(fp)
    5b1c:	10000526 	beq	r2,zero,5b34 <ad9523_vco_out_map+0x148>
			reg_data |= mask;
    5b20:	e0fffd17 	ldw	r3,-12(fp)
    5b24:	e0bffe17 	ldw	r2,-8(fp)
    5b28:	1884b03a 	or	r2,r3,r2
    5b2c:	e0bffd15 	stw	r2,-12(fp)
    5b30:	00000506 	br	5b48 <ad9523_vco_out_map+0x15c>
		else
			reg_data &= ~mask;
    5b34:	e0bffe17 	ldw	r2,-8(fp)
    5b38:	0086303a 	nor	r3,zero,r2
    5b3c:	e0bffd17 	ldw	r2,-12(fp)
    5b40:	1884703a 	and	r2,r3,r2
    5b44:	e0bffd15 	stw	r2,-12(fp)
		ret = ad9523_spi_write(dev,
    5b48:	e0bffd17 	ldw	r2,-12(fp)
    5b4c:	100d883a 	mov	r6,r2
    5b50:	01400074 	movhi	r5,1
    5b54:	29406e84 	addi	r5,r5,442
    5b58:	e13ffc17 	ldw	r4,-16(fp)
    5b5c:	00058dc0 	call	58dc <ad9523_spi_write>
    5b60:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CTRL,
				       reg_data);
		break;
    5b64:	00002906 	br	5c0c <ad9523_vco_out_map+0x220>
	case 7 ... 9:
		ret = ad9523_spi_read(dev,
    5b68:	e0bffd04 	addi	r2,fp,-12
    5b6c:	100d883a 	mov	r6,r2
    5b70:	01400074 	movhi	r5,1
    5b74:	29406ec4 	addi	r5,r5,443
    5b78:	e13ffc17 	ldw	r4,-16(fp)
    5b7c:	00057ec0 	call	57ec <ad9523_spi_read>
    5b80:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				      &reg_data);
		if (ret < 0)
    5b84:	e0bfff17 	ldw	r2,-4(fp)
    5b88:	10001f16 	blt	r2,zero,5c08 <ad9523_vco_out_map+0x21c>
			break;
		mask = AD9523_PLL1_OUTP_CH_CTRL_VCO_DIV_SEL_CH7_M2 << (ch - 7);
    5b8c:	e0bffb17 	ldw	r2,-20(fp)
    5b90:	10bffe44 	addi	r2,r2,-7
    5b94:	00c00404 	movi	r3,16
    5b98:	1884983a 	sll	r2,r3,r2
    5b9c:	e0bffe15 	stw	r2,-8(fp)
		if (out)
    5ba0:	e0bffa17 	ldw	r2,-24(fp)
    5ba4:	10000526 	beq	r2,zero,5bbc <ad9523_vco_out_map+0x1d0>
			reg_data |= mask;
    5ba8:	e0fffd17 	ldw	r3,-12(fp)
    5bac:	e0bffe17 	ldw	r2,-8(fp)
    5bb0:	1884b03a 	or	r2,r3,r2
    5bb4:	e0bffd15 	stw	r2,-12(fp)
    5bb8:	00000506 	br	5bd0 <ad9523_vco_out_map+0x1e4>
		else
			reg_data &= ~mask;
    5bbc:	e0bffe17 	ldw	r2,-8(fp)
    5bc0:	0086303a 	nor	r3,zero,r2
    5bc4:	e0bffd17 	ldw	r2,-12(fp)
    5bc8:	1884703a 	and	r2,r3,r2
    5bcc:	e0bffd15 	stw	r2,-12(fp)
		ret = ad9523_spi_write(dev,
    5bd0:	e0bffd17 	ldw	r2,-12(fp)
    5bd4:	100d883a 	mov	r6,r2
    5bd8:	01400074 	movhi	r5,1
    5bdc:	29406ec4 	addi	r5,r5,443
    5be0:	e13ffc17 	ldw	r4,-16(fp)
    5be4:	00058dc0 	call	58dc <ad9523_spi_write>
    5be8:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				       reg_data);
		break;
    5bec:	00000706 	br	5c0c <ad9523_vco_out_map+0x220>
	default:
		return 0;
    5bf0:	0005883a 	mov	r2,zero
    5bf4:	00000c06 	br	5c28 <ad9523_vco_out_map+0x23c>
			break;
    5bf8:	0001883a 	nop
    5bfc:	00000306 	br	5c0c <ad9523_vco_out_map+0x220>
			break;
    5c00:	0001883a 	nop
    5c04:	00000106 	br	5c0c <ad9523_vco_out_map+0x220>
			break;
    5c08:	0001883a 	nop
	}

	dev->ad9523_st.vco_out_map[ch] = out;
    5c0c:	e0bffa17 	ldw	r2,-24(fp)
    5c10:	1009883a 	mov	r4,r2
    5c14:	e0fffc17 	ldw	r3,-16(fp)
    5c18:	e0bffb17 	ldw	r2,-20(fp)
    5c1c:	1885883a 	add	r2,r3,r2
    5c20:	11000705 	stb	r4,28(r2)

	return ret;
    5c24:	e0bfff17 	ldw	r2,-4(fp)
}
    5c28:	e037883a 	mov	sp,fp
    5c2c:	dfc00117 	ldw	ra,4(sp)
    5c30:	df000017 	ldw	fp,0(sp)
    5c34:	dec00204 	addi	sp,sp,8
    5c38:	f800283a 	ret

00005c3c <ad9523_calibrate>:

// vco calibration on default setup may not work (as it is a buffered write)
// calibration requires all registers to be written (not in hold registers) first.

int32_t ad9523_calibrate(struct ad9523_dev *dev)
{
    5c3c:	defffb04 	addi	sp,sp,-20
    5c40:	dfc00415 	stw	ra,16(sp)
    5c44:	df000315 	stw	fp,12(sp)
    5c48:	df000304 	addi	fp,sp,12
    5c4c:	e13ffd15 	stw	r4,-12(fp)
	uint32_t reg_data;
	uint32_t timeout;

	ad9523_spi_write(dev,
    5c50:	01800084 	movi	r6,2
    5c54:	01400074 	movhi	r5,1
    5c58:	29403cc4 	addi	r5,r5,243
    5c5c:	e13ffd17 	ldw	r4,-12(fp)
    5c60:	00058dc0 	call	58dc <ad9523_spi_write>
			 AD9523_PLL2_VCO_CTRL,
			 AD9523_PLL2_VCO_CALIBRATE);
	ad9523_io_update(dev);
    5c64:	e13ffd17 	ldw	r4,-12(fp)
    5c68:	00059b00 	call	59b0 <ad9523_io_update>

	timeout = 0;
    5c6c:	e03fff15 	stw	zero,-4(fp)
	while (timeout < 100) {
    5c70:	00000e06 	br	5cac <ad9523_calibrate+0x70>
		mdelay(1);
    5c74:	0100fa04 	movi	r4,1000
    5c78:	0025e400 	call	25e40 <usleep>
		timeout = timeout + 1;
    5c7c:	e0bfff17 	ldw	r2,-4(fp)
    5c80:	10800044 	addi	r2,r2,1
    5c84:	e0bfff15 	stw	r2,-4(fp)
		ad9523_spi_read(dev,
    5c88:	e0bffe04 	addi	r2,fp,-8
    5c8c:	100d883a 	mov	r6,r2
    5c90:	01400074 	movhi	r5,1
    5c94:	29408b44 	addi	r5,r5,557
    5c98:	e13ffd17 	ldw	r4,-12(fp)
    5c9c:	00057ec0 	call	57ec <ad9523_spi_read>
				AD9523_READBACK_1,
				&reg_data);
		if ((reg_data & 0x1) == 0x0)
    5ca0:	e0bffe17 	ldw	r2,-8(fp)
    5ca4:	1080004c 	andi	r2,r2,1
    5ca8:	10000426 	beq	r2,zero,5cbc <ad9523_calibrate+0x80>
	while (timeout < 100) {
    5cac:	e0bfff17 	ldw	r2,-4(fp)
    5cb0:	10801930 	cmpltui	r2,r2,100
    5cb4:	103fef1e 	bne	r2,zero,5c74 <__alt_mem_mcu_subsystem_ram_0+0x77fe5c74>
    5cb8:	00000106 	br	5cc0 <ad9523_calibrate+0x84>
			break;
    5cbc:	0001883a 	nop
	}
	ad9523_spi_read(dev,
    5cc0:	e0bffe04 	addi	r2,fp,-8
    5cc4:	100d883a 	mov	r6,r2
    5cc8:	01400074 	movhi	r5,1
    5ccc:	29408b44 	addi	r5,r5,557
    5cd0:	e13ffd17 	ldw	r4,-12(fp)
    5cd4:	00057ec0 	call	57ec <ad9523_spi_read>
			AD9523_READBACK_1,
			&reg_data);
	if ((reg_data & 0x1) != 0x0) {
    5cd8:	e0bffe17 	ldw	r2,-8(fp)
    5cdc:	1080004c 	andi	r2,r2,1
    5ce0:	10000726 	beq	r2,zero,5d00 <ad9523_calibrate+0xc4>
		printf("AD9523: VCO calibration failed (%x)!\n", reg_data);
    5ce4:	e0bffe17 	ldw	r2,-8(fp)
    5ce8:	100b883a 	mov	r5,r2
    5cec:	010000f4 	movhi	r4,3
    5cf0:	21069304 	addi	r4,r4,6732
    5cf4:	001634c0 	call	1634c <printf>
		return(-1);
    5cf8:	00bfffc4 	movi	r2,-1
    5cfc:	00000106 	br	5d04 <ad9523_calibrate+0xc8>
	}

	return(0);
    5d00:	0005883a 	mov	r2,zero
}
    5d04:	e037883a 	mov	sp,fp
    5d08:	dfc00117 	ldw	ra,4(sp)
    5d0c:	df000017 	ldw	fp,0(sp)
    5d10:	dec00204 	addi	sp,sp,8
    5d14:	f800283a 	ret

00005d18 <ad9523_status>:

// status
// calibration requires all registers to be written (not in hold registers) first.

int32_t ad9523_status(struct ad9523_dev *dev)
{
    5d18:	defff904 	addi	sp,sp,-28
    5d1c:	dfc00615 	stw	ra,24(sp)
    5d20:	df000515 	stw	fp,20(sp)
    5d24:	df000504 	addi	fp,sp,20
    5d28:	e13ffb15 	stw	r4,-20(fp)
	int32_t ret;
	uint32_t reg_data;
	uint32_t status;
	uint32_t timeout;

	status = 0;
    5d2c:	e03ffe15 	stw	zero,-8(fp)

	// vcxo + pll2 must always be okay- (is it not?)

	status = status | AD9523_READBACK_0_STAT_VCXO;
    5d30:	e0bffe17 	ldw	r2,-8(fp)
    5d34:	10800814 	ori	r2,r2,32
    5d38:	e0bffe15 	stw	r2,-8(fp)
	status = status | AD9523_READBACK_0_STAT_PLL2_LD;
    5d3c:	e0bffe17 	ldw	r2,-8(fp)
    5d40:	10800094 	ori	r2,r2,2
    5d44:	e0bffe15 	stw	r2,-8(fp)

	if (dev->pdata->pll1_bypass_en == 0) {
    5d48:	e0bffb17 	ldw	r2,-20(fp)
    5d4c:	10800b17 	ldw	r2,44(r2)
    5d50:	10800603 	ldbu	r2,24(r2)
    5d54:	10803fcc 	andi	r2,r2,255
    5d58:	1000121e 	bne	r2,zero,5da4 <ad9523_status+0x8c>
		status = status | AD9523_READBACK_0_STAT_PLL2_REF_CLK;
    5d5c:	e0bffe17 	ldw	r2,-8(fp)
    5d60:	10802014 	ori	r2,r2,128
    5d64:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_PLL2_FB_CLK;
    5d68:	e0bffe17 	ldw	r2,-8(fp)
    5d6c:	10801014 	ori	r2,r2,64
    5d70:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REF_TEST;
    5d74:	e0bffe17 	ldw	r2,-8(fp)
    5d78:	10800414 	ori	r2,r2,16
    5d7c:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REFB;
    5d80:	e0bffe17 	ldw	r2,-8(fp)
    5d84:	10800214 	ori	r2,r2,8
    5d88:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REFA;
    5d8c:	e0bffe17 	ldw	r2,-8(fp)
    5d90:	10800114 	ori	r2,r2,4
    5d94:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_PLL1_LD;
    5d98:	e0bffe17 	ldw	r2,-8(fp)
    5d9c:	10800054 	ori	r2,r2,1
    5da0:	e0bffe15 	stw	r2,-8(fp)
	}

	timeout = 0;
    5da4:	e03ffd15 	stw	zero,-12(fp)
	while (timeout < 100) {
    5da8:	00001006 	br	5dec <ad9523_status+0xd4>
		mdelay(1);
    5dac:	0100fa04 	movi	r4,1000
    5db0:	0025e400 	call	25e40 <usleep>
		timeout = timeout + 1;
    5db4:	e0bffd17 	ldw	r2,-12(fp)
    5db8:	10800044 	addi	r2,r2,1
    5dbc:	e0bffd15 	stw	r2,-12(fp)
		ad9523_spi_read(dev,
    5dc0:	e0bffc04 	addi	r2,fp,-16
    5dc4:	100d883a 	mov	r6,r2
    5dc8:	01400074 	movhi	r5,1
    5dcc:	29408b04 	addi	r5,r5,556
    5dd0:	e13ffb17 	ldw	r4,-20(fp)
    5dd4:	00057ec0 	call	57ec <ad9523_spi_read>
				AD9523_READBACK_0,
				&reg_data);
		if ((reg_data & status) == status)
    5dd8:	e0fffc17 	ldw	r3,-16(fp)
    5ddc:	e0bffe17 	ldw	r2,-8(fp)
    5de0:	1884703a 	and	r2,r3,r2
    5de4:	e0fffe17 	ldw	r3,-8(fp)
    5de8:	18800426 	beq	r3,r2,5dfc <ad9523_status+0xe4>
	while (timeout < 100) {
    5dec:	e0bffd17 	ldw	r2,-12(fp)
    5df0:	10801930 	cmpltui	r2,r2,100
    5df4:	103fed1e 	bne	r2,zero,5dac <__alt_mem_mcu_subsystem_ram_0+0x77fe5dac>
    5df8:	00000106 	br	5e00 <ad9523_status+0xe8>
			break;
    5dfc:	0001883a 	nop
	}

	ret = 0;
    5e00:	e03fff15 	stw	zero,-4(fp)
	if ((reg_data & AD9523_READBACK_0_STAT_VCXO) != AD9523_READBACK_0_STAT_VCXO) {
    5e04:	e0bffc17 	ldw	r2,-16(fp)
    5e08:	1080080c 	andi	r2,r2,32
    5e0c:	1000071e 	bne	r2,zero,5e2c <ad9523_status+0x114>
		printf("AD9523: VCXO status errors (%x)!\n", reg_data);
    5e10:	e0bffc17 	ldw	r2,-16(fp)
    5e14:	100b883a 	mov	r5,r2
    5e18:	010000f4 	movhi	r4,3
    5e1c:	21069d04 	addi	r4,r4,6772
    5e20:	001634c0 	call	1634c <printf>
		ret = -1;
    5e24:	00bfffc4 	movi	r2,-1
    5e28:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((reg_data & AD9523_READBACK_0_STAT_PLL2_LD) != AD9523_READBACK_0_STAT_PLL2_LD) {
    5e2c:	e0bffc17 	ldw	r2,-16(fp)
    5e30:	1080008c 	andi	r2,r2,2
    5e34:	1000071e 	bne	r2,zero,5e54 <ad9523_status+0x13c>
		printf("AD9523: PLL2 NOT locked (%x)!\n", reg_data);
    5e38:	e0bffc17 	ldw	r2,-16(fp)
    5e3c:	100b883a 	mov	r5,r2
    5e40:	010000f4 	movhi	r4,3
    5e44:	2106a604 	addi	r4,r4,6808
    5e48:	001634c0 	call	1634c <printf>
		ret = -1;
    5e4c:	00bfffc4 	movi	r2,-1
    5e50:	e0bfff15 	stw	r2,-4(fp)
	}
	return(ret);
    5e54:	e0bfff17 	ldw	r2,-4(fp)
}
    5e58:	e037883a 	mov	sp,fp
    5e5c:	dfc00117 	ldw	ra,4(sp)
    5e60:	df000017 	ldw	fp,0(sp)
    5e64:	dec00204 	addi	sp,sp,8
    5e68:	f800283a 	ret

00005e6c <ad9523_sync>:
 * @brief Updates the AD9523 configuration.
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_sync(struct ad9523_dev *dev)
{
    5e6c:	defffa04 	addi	sp,sp,-24
    5e70:	dfc00515 	stw	ra,20(sp)
    5e74:	df000415 	stw	fp,16(sp)
    5e78:	df000404 	addi	fp,sp,16
    5e7c:	e13ffc15 	stw	r4,-16(fp)
	int32_t ret, tmp;
	uint32_t reg_data;

	ret = ad9523_spi_read(dev,
    5e80:	e0bffd04 	addi	r2,fp,-12
    5e84:	100d883a 	mov	r6,r2
    5e88:	014000f4 	movhi	r5,3
    5e8c:	29408c84 	addi	r5,r5,562
    5e90:	e13ffc17 	ldw	r4,-16(fp)
    5e94:	00057ec0 	call	57ec <ad9523_spi_read>
    5e98:	e0bfff15 	stw	r2,-4(fp)
			      AD9523_STATUS_SIGNALS,
			      &reg_data);
	if (ret < 0)
    5e9c:	e0bfff17 	ldw	r2,-4(fp)
    5ea0:	1000020e 	bge	r2,zero,5eac <ad9523_sync+0x40>
		return ret;
    5ea4:	e0bfff17 	ldw	r2,-4(fp)
    5ea8:	00002406 	br	5f3c <ad9523_sync+0xd0>

	tmp = reg_data;
    5eac:	e0bffd17 	ldw	r2,-12(fp)
    5eb0:	e0bffe15 	stw	r2,-8(fp)
	tmp |= AD9523_STATUS_SIGNALS_SYNC_MAN_CTRL;
    5eb4:	e0bffe17 	ldw	r2,-8(fp)
    5eb8:	10800074 	orhi	r2,r2,1
    5ebc:	e0bffe15 	stw	r2,-8(fp)

	ret = ad9523_spi_write(dev,
    5ec0:	e0bffe17 	ldw	r2,-8(fp)
    5ec4:	100d883a 	mov	r6,r2
    5ec8:	014000f4 	movhi	r5,3
    5ecc:	29408c84 	addi	r5,r5,562
    5ed0:	e13ffc17 	ldw	r4,-16(fp)
    5ed4:	00058dc0 	call	58dc <ad9523_spi_write>
    5ed8:	e0bfff15 	stw	r2,-4(fp)
			       AD9523_STATUS_SIGNALS,
			       tmp);
	if (ret < 0)
    5edc:	e0bfff17 	ldw	r2,-4(fp)
    5ee0:	1000020e 	bge	r2,zero,5eec <ad9523_sync+0x80>
		return ret;
    5ee4:	e0bfff17 	ldw	r2,-4(fp)
    5ee8:	00001406 	br	5f3c <ad9523_sync+0xd0>

	ad9523_io_update(dev);
    5eec:	e13ffc17 	ldw	r4,-16(fp)
    5ef0:	00059b00 	call	59b0 <ad9523_io_update>
	tmp &= ~AD9523_STATUS_SIGNALS_SYNC_MAN_CTRL;
    5ef4:	e0fffe17 	ldw	r3,-8(fp)
    5ef8:	00bffff4 	movhi	r2,65535
    5efc:	10bfffc4 	addi	r2,r2,-1
    5f00:	1884703a 	and	r2,r3,r2
    5f04:	e0bffe15 	stw	r2,-8(fp)

	ret = ad9523_spi_write(dev,
    5f08:	e0bffe17 	ldw	r2,-8(fp)
    5f0c:	100d883a 	mov	r6,r2
    5f10:	014000f4 	movhi	r5,3
    5f14:	29408c84 	addi	r5,r5,562
    5f18:	e13ffc17 	ldw	r4,-16(fp)
    5f1c:	00058dc0 	call	58dc <ad9523_spi_write>
    5f20:	e0bfff15 	stw	r2,-4(fp)
			       AD9523_STATUS_SIGNALS,
			       tmp);
	if (ret < 0)
    5f24:	e0bfff17 	ldw	r2,-4(fp)
    5f28:	1000020e 	bge	r2,zero,5f34 <ad9523_sync+0xc8>
		return ret;
    5f2c:	e0bfff17 	ldw	r2,-4(fp)
    5f30:	00000206 	br	5f3c <ad9523_sync+0xd0>

	return ad9523_io_update(dev);
    5f34:	e13ffc17 	ldw	r4,-16(fp)
    5f38:	00059b00 	call	59b0 <ad9523_io_update>

}
    5f3c:	e037883a 	mov	sp,fp
    5f40:	dfc00117 	ldw	ra,4(sp)
    5f44:	df000017 	ldw	fp,0(sp)
    5f48:	dec00204 	addi	sp,sp,8
    5f4c:	f800283a 	ret

00005f50 <ad9523_init>:
 * @brief Initialize the AD9523 data structure with the default register values.
 *
 * @return Always return 0.
 *******************************************************************************/
int32_t ad9523_init(struct ad9523_init_param *init_param)
{
    5f50:	defffd04 	addi	sp,sp,-12
    5f54:	df000215 	stw	fp,8(sp)
    5f58:	df000204 	addi	fp,sp,8
    5f5c:	e13ffe15 	stw	r4,-8(fp)
	int32_t i = 0;
    5f60:	e03fff15 	stw	zero,-4(fp)

	init_param->pdata->vcxo_freq = 0;
    5f64:	e0bffe17 	ldw	r2,-8(fp)
    5f68:	10800417 	ldw	r2,16(r2)
    5f6c:	10000015 	stw	zero,0(r2)
	init_param->pdata->spi3wire = 0;
    5f70:	e0bffe17 	ldw	r2,-8(fp)
    5f74:	10800417 	ldw	r2,16(r2)
    5f78:	10000105 	stb	zero,4(r2)

	/* Differential/ Single-Ended Input Configuration */
	init_param->pdata->refa_diff_rcv_en = 0;
    5f7c:	e0bffe17 	ldw	r2,-8(fp)
    5f80:	10800417 	ldw	r2,16(r2)
    5f84:	10000145 	stb	zero,5(r2)
	init_param->pdata->refb_diff_rcv_en = 0;
    5f88:	e0bffe17 	ldw	r2,-8(fp)
    5f8c:	10800417 	ldw	r2,16(r2)
    5f90:	10000185 	stb	zero,6(r2)
	init_param->pdata->zd_in_diff_en = 0;
    5f94:	e0bffe17 	ldw	r2,-8(fp)
    5f98:	10800417 	ldw	r2,16(r2)
    5f9c:	100001c5 	stb	zero,7(r2)
	init_param->pdata->osc_in_diff_en = 0;
    5fa0:	e0bffe17 	ldw	r2,-8(fp)
    5fa4:	10800417 	ldw	r2,16(r2)
    5fa8:	10000205 	stb	zero,8(r2)

	/*
	 * Valid if differential input disabled
	 * if not true defaults to pos input
	 */
	init_param->pdata->refa_cmos_neg_inp_en = 0;
    5fac:	e0bffe17 	ldw	r2,-8(fp)
    5fb0:	10800417 	ldw	r2,16(r2)
    5fb4:	10000245 	stb	zero,9(r2)
	init_param->pdata->refb_cmos_neg_inp_en = 0;
    5fb8:	e0bffe17 	ldw	r2,-8(fp)
    5fbc:	10800417 	ldw	r2,16(r2)
    5fc0:	10000285 	stb	zero,10(r2)
	init_param->pdata->zd_in_cmos_neg_inp_en = 0;
    5fc4:	e0bffe17 	ldw	r2,-8(fp)
    5fc8:	10800417 	ldw	r2,16(r2)
    5fcc:	100002c5 	stb	zero,11(r2)
	init_param->pdata->osc_in_cmos_neg_inp_en = 0;
    5fd0:	e0bffe17 	ldw	r2,-8(fp)
    5fd4:	10800417 	ldw	r2,16(r2)
    5fd8:	10000305 	stb	zero,12(r2)

	/* PLL1 Setting */
	init_param->pdata->refa_r_div = 1;
    5fdc:	e0bffe17 	ldw	r2,-8(fp)
    5fe0:	10800417 	ldw	r2,16(r2)
    5fe4:	00c00044 	movi	r3,1
    5fe8:	10c0038d 	sth	r3,14(r2)
	init_param->pdata->refb_r_div = 1;
    5fec:	e0bffe17 	ldw	r2,-8(fp)
    5ff0:	10800417 	ldw	r2,16(r2)
    5ff4:	00c00044 	movi	r3,1
    5ff8:	10c0040d 	sth	r3,16(r2)
	init_param->pdata->pll1_feedback_div = 1;
    5ffc:	e0bffe17 	ldw	r2,-8(fp)
    6000:	10800417 	ldw	r2,16(r2)
    6004:	00c00044 	movi	r3,1
    6008:	10c0048d 	sth	r3,18(r2)
	init_param->pdata->pll1_charge_pump_current_nA = 0;
    600c:	e0bffe17 	ldw	r2,-8(fp)
    6010:	10800417 	ldw	r2,16(r2)
    6014:	1000050d 	sth	zero,20(r2)
	init_param->pdata->zero_delay_mode_internal_en = 0;
    6018:	e0bffe17 	ldw	r2,-8(fp)
    601c:	10800417 	ldw	r2,16(r2)
    6020:	10000585 	stb	zero,22(r2)
	init_param->pdata->osc_in_feedback_en = 0;
    6024:	e0bffe17 	ldw	r2,-8(fp)
    6028:	10800417 	ldw	r2,16(r2)
    602c:	100005c5 	stb	zero,23(r2)
	init_param->pdata->pll1_bypass_en = 1;
    6030:	e0bffe17 	ldw	r2,-8(fp)
    6034:	10800417 	ldw	r2,16(r2)
    6038:	00c00044 	movi	r3,1
    603c:	10c00605 	stb	r3,24(r2)
	init_param->pdata->pll1_loop_filter_rzero = 1;
    6040:	e0bffe17 	ldw	r2,-8(fp)
    6044:	10800417 	ldw	r2,16(r2)
    6048:	00c00044 	movi	r3,1
    604c:	10c00645 	stb	r3,25(r2)

	/* Reference */
	init_param->pdata->ref_mode = 0;
    6050:	e0bffe17 	ldw	r2,-8(fp)
    6054:	10800417 	ldw	r2,16(r2)
    6058:	10000685 	stb	zero,26(r2)

	/* PLL2 Setting */
	init_param->pdata->pll2_charge_pump_current_nA = 0;
    605c:	e0bffe17 	ldw	r2,-8(fp)
    6060:	10800417 	ldw	r2,16(r2)
    6064:	10000715 	stw	zero,28(r2)
	init_param->pdata->pll2_ndiv_a_cnt = 0;
    6068:	e0bffe17 	ldw	r2,-8(fp)
    606c:	10800417 	ldw	r2,16(r2)
    6070:	10000805 	stb	zero,32(r2)
	init_param->pdata->pll2_ndiv_b_cnt = 4;
    6074:	e0bffe17 	ldw	r2,-8(fp)
    6078:	10800417 	ldw	r2,16(r2)
    607c:	00c00104 	movi	r3,4
    6080:	10c00845 	stb	r3,33(r2)
	init_param->pdata->pll2_freq_doubler_en = 0;
    6084:	e0bffe17 	ldw	r2,-8(fp)
    6088:	10800417 	ldw	r2,16(r2)
    608c:	10000885 	stb	zero,34(r2)
	init_param->pdata->pll2_r2_div = 0;
    6090:	e0bffe17 	ldw	r2,-8(fp)
    6094:	10800417 	ldw	r2,16(r2)
    6098:	100008c5 	stb	zero,35(r2)
	init_param->pdata->pll2_vco_diff_m1 = 0; /* 3..5 */
    609c:	e0bffe17 	ldw	r2,-8(fp)
    60a0:	10800417 	ldw	r2,16(r2)
    60a4:	10000905 	stb	zero,36(r2)
	init_param->pdata->pll2_vco_diff_m2 = 0; /* 3..5 */
    60a8:	e0bffe17 	ldw	r2,-8(fp)
    60ac:	10800417 	ldw	r2,16(r2)
    60b0:	10000945 	stb	zero,37(r2)

	/* Loop Filter PLL2 */
	init_param->pdata->rpole2 = 0;
    60b4:	e0bffe17 	ldw	r2,-8(fp)
    60b8:	10800417 	ldw	r2,16(r2)
    60bc:	10000985 	stb	zero,38(r2)
	init_param->pdata->rzero = 0;
    60c0:	e0bffe17 	ldw	r2,-8(fp)
    60c4:	10800417 	ldw	r2,16(r2)
    60c8:	100009c5 	stb	zero,39(r2)
	init_param->pdata->cpole1 = 0;
    60cc:	e0bffe17 	ldw	r2,-8(fp)
    60d0:	10800417 	ldw	r2,16(r2)
    60d4:	10000a05 	stb	zero,40(r2)
	init_param->pdata->rzero_bypass_en = 0;
    60d8:	e0bffe17 	ldw	r2,-8(fp)
    60dc:	10800417 	ldw	r2,16(r2)
    60e0:	10000a45 	stb	zero,41(r2)

	/* Output Channel Configuration */
	for (i=0; i < init_param->pdata->num_channels; i++) {
    60e4:	e03fff15 	stw	zero,-4(fp)
    60e8:	00004306 	br	61f8 <ad9523_init+0x2a8>
		(&init_param->pdata->channels[i])->channel_num              = 0;
    60ec:	e0bffe17 	ldw	r2,-8(fp)
    60f0:	10800417 	ldw	r2,16(r2)
    60f4:	10c00c17 	ldw	r3,48(r2)
    60f8:	e0bfff17 	ldw	r2,-4(fp)
    60fc:	108006a4 	muli	r2,r2,26
    6100:	1885883a 	add	r2,r3,r2
    6104:	10000005 	stb	zero,0(r2)
		(&init_param->pdata->channels[i])->divider_output_invert_en = 0;
    6108:	e0bffe17 	ldw	r2,-8(fp)
    610c:	10800417 	ldw	r2,16(r2)
    6110:	10c00c17 	ldw	r3,48(r2)
    6114:	e0bfff17 	ldw	r2,-4(fp)
    6118:	108006a4 	muli	r2,r2,26
    611c:	1885883a 	add	r2,r3,r2
    6120:	10000045 	stb	zero,1(r2)
		(&init_param->pdata->channels[i])->sync_ignore_en           = 0;
    6124:	e0bffe17 	ldw	r2,-8(fp)
    6128:	10800417 	ldw	r2,16(r2)
    612c:	10c00c17 	ldw	r3,48(r2)
    6130:	e0bfff17 	ldw	r2,-4(fp)
    6134:	108006a4 	muli	r2,r2,26
    6138:	1885883a 	add	r2,r3,r2
    613c:	10000085 	stb	zero,2(r2)
		(&init_param->pdata->channels[i])->low_power_mode_en        = 0;
    6140:	e0bffe17 	ldw	r2,-8(fp)
    6144:	10800417 	ldw	r2,16(r2)
    6148:	10c00c17 	ldw	r3,48(r2)
    614c:	e0bfff17 	ldw	r2,-4(fp)
    6150:	108006a4 	muli	r2,r2,26
    6154:	1885883a 	add	r2,r3,r2
    6158:	100000c5 	stb	zero,3(r2)
		(&init_param->pdata->channels[i])->use_alt_clock_src        = 0;
    615c:	e0bffe17 	ldw	r2,-8(fp)
    6160:	10800417 	ldw	r2,16(r2)
    6164:	10c00c17 	ldw	r3,48(r2)
    6168:	e0bfff17 	ldw	r2,-4(fp)
    616c:	108006a4 	muli	r2,r2,26
    6170:	1885883a 	add	r2,r3,r2
    6174:	10000105 	stb	zero,4(r2)
		(&init_param->pdata->channels[i])->output_dis               = 0;
    6178:	e0bffe17 	ldw	r2,-8(fp)
    617c:	10800417 	ldw	r2,16(r2)
    6180:	10c00c17 	ldw	r3,48(r2)
    6184:	e0bfff17 	ldw	r2,-4(fp)
    6188:	108006a4 	muli	r2,r2,26
    618c:	1885883a 	add	r2,r3,r2
    6190:	10000145 	stb	zero,5(r2)
		(&init_param->pdata->channels[i])->driver_mode              = LVDS_7mA;//LVPECL_8mA;
    6194:	e0bffe17 	ldw	r2,-8(fp)
    6198:	10800417 	ldw	r2,16(r2)
    619c:	10c00c17 	ldw	r3,48(r2)
    61a0:	e0bfff17 	ldw	r2,-4(fp)
    61a4:	108006a4 	muli	r2,r2,26
    61a8:	1885883a 	add	r2,r3,r2
    61ac:	00c000c4 	movi	r3,3
    61b0:	10c00185 	stb	r3,6(r2)
		(&init_param->pdata->channels[i])->divider_phase            = 0;
    61b4:	e0bffe17 	ldw	r2,-8(fp)
    61b8:	10800417 	ldw	r2,16(r2)
    61bc:	10c00c17 	ldw	r3,48(r2)
    61c0:	e0bfff17 	ldw	r2,-4(fp)
    61c4:	108006a4 	muli	r2,r2,26
    61c8:	1885883a 	add	r2,r3,r2
    61cc:	100001c5 	stb	zero,7(r2)
		(&init_param->pdata->channels[i])->channel_divider          = 0;
    61d0:	e0bffe17 	ldw	r2,-8(fp)
    61d4:	10800417 	ldw	r2,16(r2)
    61d8:	10c00c17 	ldw	r3,48(r2)
    61dc:	e0bfff17 	ldw	r2,-4(fp)
    61e0:	108006a4 	muli	r2,r2,26
    61e4:	1885883a 	add	r2,r3,r2
    61e8:	1000020d 	sth	zero,8(r2)
	for (i=0; i < init_param->pdata->num_channels; i++) {
    61ec:	e0bfff17 	ldw	r2,-4(fp)
    61f0:	10800044 	addi	r2,r2,1
    61f4:	e0bfff15 	stw	r2,-4(fp)
    61f8:	e0bffe17 	ldw	r2,-8(fp)
    61fc:	10800417 	ldw	r2,16(r2)
    6200:	10800b17 	ldw	r2,44(r2)
    6204:	e0ffff17 	ldw	r3,-4(fp)
    6208:	18bfb816 	blt	r3,r2,60ec <__alt_mem_mcu_subsystem_ram_0+0x77fe60ec>
	}
	return 0;
    620c:	0005883a 	mov	r2,zero
}
    6210:	e037883a 	mov	sp,fp
    6214:	df000017 	ldw	fp,0(sp)
    6218:	dec00104 	addi	sp,sp,4
    621c:	f800283a 	ret

00006220 <ad9523_setup>:
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_setup(struct ad9523_dev **device, const struct ad9523_init_param *init_param)

{
    6220:	defff504 	addi	sp,sp,-44
    6224:	dfc00a15 	stw	ra,40(sp)
    6228:	df000915 	stw	fp,36(sp)
    622c:	df000904 	addi	fp,sp,36
    6230:	e13ff815 	stw	r4,-32(fp)
    6234:	e17ff715 	stw	r5,-36(fp)
	struct ad9523_channel_spec *chan;
	uint32_t active_mask = 0;
    6238:	e03fff15 	stw	zero,-4(fp)
	int32_t ret, i;
	uint32_t reg_data;
	uint32_t version_id;
	struct ad9523_dev *dev;

	dev = (struct ad9523_dev *)malloc(sizeof(*dev));
    623c:	01000c04 	movi	r4,48
    6240:	001525c0 	call	1525c <malloc>
    6244:	e0bffd15 	stw	r2,-12(fp)
	if (!dev)
    6248:	e0bffd17 	ldw	r2,-12(fp)
    624c:	1000021e 	bne	r2,zero,6258 <ad9523_setup+0x38>
		return -1;
    6250:	00bfffc4 	movi	r2,-1
    6254:	00030506 	br	6e6c <ad9523_setup+0xc4c>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
    6258:	e0bffd17 	ldw	r2,-12(fp)
    625c:	e0fff717 	ldw	r3,-36(fp)
    6260:	180b883a 	mov	r5,r3
    6264:	1009883a 	mov	r4,r2
    6268:	000becc0 	call	becc <spi_init>
    626c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6270:	e0bffc17 	ldw	r2,-16(fp)
    6274:	1000020e 	bge	r2,zero,6280 <ad9523_setup+0x60>
		return ret;
    6278:	e0bffc17 	ldw	r2,-16(fp)
    627c:	0002fb06 	br	6e6c <ad9523_setup+0xc4c>

	dev->pdata = init_param->pdata;
    6280:	e0bff717 	ldw	r2,-36(fp)
    6284:	10c00417 	ldw	r3,16(r2)
    6288:	e0bffd17 	ldw	r2,-12(fp)
    628c:	10c00b15 	stw	r3,44(r2)

	ret = ad9523_spi_write(dev,
			       AD9523_SERIAL_PORT_CONFIG,
			       AD9523_SER_CONF_SOFT_RESET |
			       (dev->pdata->spi3wire ? 0 :
    6290:	e0bffd17 	ldw	r2,-12(fp)
    6294:	10800b17 	ldw	r2,44(r2)
    6298:	10800103 	ldbu	r2,4(r2)
	ret = ad9523_spi_write(dev,
    629c:	10803fcc 	andi	r2,r2,255
    62a0:	10000226 	beq	r2,zero,62ac <ad9523_setup+0x8c>
    62a4:	00800904 	movi	r2,36
    62a8:	00000106 	br	62b0 <ad9523_setup+0x90>
    62ac:	00802944 	movi	r2,165
    62b0:	100d883a 	mov	r6,r2
    62b4:	01400074 	movhi	r5,1
    62b8:	e13ffd17 	ldw	r4,-12(fp)
    62bc:	00058dc0 	call	58dc <ad9523_spi_write>
    62c0:	e0bffc15 	stw	r2,-16(fp)
				AD9523_SER_CONF_SDO_ACTIVE));
	if (ret < 0)
    62c4:	e0bffc17 	ldw	r2,-16(fp)
    62c8:	1000020e 	bge	r2,zero,62d4 <ad9523_setup+0xb4>
		return ret;
    62cc:	e0bffc17 	ldw	r2,-16(fp)
    62d0:	0002e606 	br	6e6c <ad9523_setup+0xc4c>
	mdelay(1);
    62d4:	0100fa04 	movi	r4,1000
    62d8:	0025e400 	call	25e40 <usleep>

	ret = ad9523_spi_write(dev,
    62dc:	01800044 	movi	r6,1
    62e0:	01400074 	movhi	r5,1
    62e4:	29400104 	addi	r5,r5,4
    62e8:	e13ffd17 	ldw	r4,-12(fp)
    62ec:	00058dc0 	call	58dc <ad9523_spi_write>
    62f0:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_READBACK_CTRL,
			       AD9523_READBACK_CTRL_READ_BUFFERED);
	if (ret < 0)
    62f4:	e0bffc17 	ldw	r2,-16(fp)
    62f8:	1000020e 	bge	r2,zero,6304 <ad9523_setup+0xe4>
		return ret;
    62fc:	e0bffc17 	ldw	r2,-16(fp)
    6300:	0002da06 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_io_update(dev);
    6304:	e13ffd17 	ldw	r4,-12(fp)
    6308:	00059b00 	call	59b0 <ad9523_io_update>
    630c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6310:	e0bffc17 	ldw	r2,-16(fp)
    6314:	1000020e 	bge	r2,zero,6320 <ad9523_setup+0x100>
		return ret;
    6318:	e0bffc17 	ldw	r2,-16(fp)
    631c:	0002d306 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_read(dev,
    6320:	e0bff904 	addi	r2,fp,-28
    6324:	100d883a 	mov	r6,r2
    6328:	014000b4 	movhi	r5,2
    632c:	29400184 	addi	r5,r5,6
    6330:	e13ffd17 	ldw	r4,-12(fp)
    6334:	00057ec0 	call	57ec <ad9523_spi_read>
    6338:	e0bffc15 	stw	r2,-16(fp)
			      AD9523_EEPROM_CUSTOMER_VERSION_ID,
			      &version_id);
	if (ret < 0)
    633c:	e0bffc17 	ldw	r2,-16(fp)
    6340:	1000020e 	bge	r2,zero,634c <ad9523_setup+0x12c>
		return ret;
    6344:	e0bffc17 	ldw	r2,-16(fp)
    6348:	0002c806 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
    634c:	01ab6554 	movui	r6,44437
    6350:	014000b4 	movhi	r5,2
    6354:	29400184 	addi	r5,r5,6
    6358:	e13ffd17 	ldw	r4,-12(fp)
    635c:	00058dc0 	call	58dc <ad9523_spi_write>
    6360:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_EEPROM_CUSTOMER_VERSION_ID,
			       0xAD95);
	if (ret < 0)
    6364:	e0bffc17 	ldw	r2,-16(fp)
    6368:	1000020e 	bge	r2,zero,6374 <ad9523_setup+0x154>
		return ret;
    636c:	e0bffc17 	ldw	r2,-16(fp)
    6370:	0002be06 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_read(dev,
    6374:	e0bffa04 	addi	r2,fp,-24
    6378:	100d883a 	mov	r6,r2
    637c:	014000b4 	movhi	r5,2
    6380:	29400184 	addi	r5,r5,6
    6384:	e13ffd17 	ldw	r4,-12(fp)
    6388:	00057ec0 	call	57ec <ad9523_spi_read>
    638c:	e0bffc15 	stw	r2,-16(fp)
			      AD9523_EEPROM_CUSTOMER_VERSION_ID,
			      &reg_data);
	if (ret < 0)
    6390:	e0bffc17 	ldw	r2,-16(fp)
    6394:	1000020e 	bge	r2,zero,63a0 <ad9523_setup+0x180>
		return ret;
    6398:	e0bffc17 	ldw	r2,-16(fp)
    639c:	0002b306 	br	6e6c <ad9523_setup+0xc4c>

	if (reg_data != 0xAD95) {
    63a0:	e0fffa17 	ldw	r3,-24(fp)
    63a4:	00ab6554 	movui	r2,44437
    63a8:	18800726 	beq	r3,r2,63c8 <ad9523_setup+0x1a8>
		printf("AD9523: SPI write-verify failed (0x%X)!\n\r",
    63ac:	e0bffa17 	ldw	r2,-24(fp)
    63b0:	100b883a 	mov	r5,r2
    63b4:	010000f4 	movhi	r4,3
    63b8:	2106ae04 	addi	r4,r4,6840
    63bc:	001634c0 	call	1634c <printf>
		       reg_data);
		return -1;
    63c0:	00bfffc4 	movi	r2,-1
    63c4:	0002a906 	br	6e6c <ad9523_setup+0xc4c>
	}

	ret = ad9523_spi_write(dev,
    63c8:	e0bff917 	ldw	r2,-28(fp)
    63cc:	100d883a 	mov	r6,r2
    63d0:	014000b4 	movhi	r5,2
    63d4:	29400184 	addi	r5,r5,6
    63d8:	e13ffd17 	ldw	r4,-12(fp)
    63dc:	00058dc0 	call	58dc <ad9523_spi_write>
    63e0:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_EEPROM_CUSTOMER_VERSION_ID,
			       version_id);
	if (ret < 0)
    63e4:	e0bffc17 	ldw	r2,-16(fp)
    63e8:	1000020e 	bge	r2,zero,63f4 <ad9523_setup+0x1d4>
		return ret;
    63ec:	e0bffc17 	ldw	r2,-16(fp)
    63f0:	00029e06 	br	6e6c <ad9523_setup+0xc4c>
	/*
	 * PLL1 Setup
	 */
	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_A_DIVIDER,
			       dev->pdata->refa_r_div);
    63f4:	e0bffd17 	ldw	r2,-12(fp)
    63f8:	10800b17 	ldw	r2,44(r2)
    63fc:	1080038b 	ldhu	r2,14(r2)
	ret = ad9523_spi_write(dev,
    6400:	10bfffcc 	andi	r2,r2,65535
    6404:	100d883a 	mov	r6,r2
    6408:	014000b4 	movhi	r5,2
    640c:	29400444 	addi	r5,r5,17
    6410:	e13ffd17 	ldw	r4,-12(fp)
    6414:	00058dc0 	call	58dc <ad9523_spi_write>
    6418:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    641c:	e0bffc17 	ldw	r2,-16(fp)
    6420:	1000020e 	bge	r2,zero,642c <ad9523_setup+0x20c>
		return ret;
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	00029006 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_B_DIVIDER,
			       dev->pdata->refb_r_div);
    642c:	e0bffd17 	ldw	r2,-12(fp)
    6430:	10800b17 	ldw	r2,44(r2)
    6434:	1080040b 	ldhu	r2,16(r2)
	ret = ad9523_spi_write(dev,
    6438:	10bfffcc 	andi	r2,r2,65535
    643c:	100d883a 	mov	r6,r2
    6440:	014000b4 	movhi	r5,2
    6444:	294004c4 	addi	r5,r5,19
    6448:	e13ffd17 	ldw	r4,-12(fp)
    644c:	00058dc0 	call	58dc <ad9523_spi_write>
    6450:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6454:	e0bffc17 	ldw	r2,-16(fp)
    6458:	1000020e 	bge	r2,zero,6464 <ad9523_setup+0x244>
		return ret;
    645c:	e0bffc17 	ldw	r2,-16(fp)
    6460:	00028206 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_FEEDBACK_DIVIDER,
			       dev->pdata->pll1_feedback_div);
    6464:	e0bffd17 	ldw	r2,-12(fp)
    6468:	10800b17 	ldw	r2,44(r2)
    646c:	1080048b 	ldhu	r2,18(r2)
	ret = ad9523_spi_write(dev,
    6470:	10bfffcc 	andi	r2,r2,65535
    6474:	100d883a 	mov	r6,r2
    6478:	014000b4 	movhi	r5,2
    647c:	294005c4 	addi	r5,r5,23
    6480:	e13ffd17 	ldw	r4,-12(fp)
    6484:	00058dc0 	call	58dc <ad9523_spi_write>
    6488:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    648c:	e0bffc17 	ldw	r2,-16(fp)
    6490:	1000020e 	bge	r2,zero,649c <ad9523_setup+0x27c>
		return ret;
    6494:	e0bffc17 	ldw	r2,-16(fp)
    6498:	00027406 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_CHARGE_PUMP_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_CHARGE_PUMP_TRISTATE,
    649c:	e0bffd17 	ldw	r2,-12(fp)
    64a0:	10800b17 	ldw	r2,44(r2)
    64a4:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
    64a8:	10803fcc 	andi	r2,r2,255
    64ac:	10000b1e 	bne	r2,zero,64dc <ad9523_setup+0x2bc>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_CHARGE_PUMP_TRISTATE,
    64b0:	e0bffd17 	ldw	r2,-12(fp)
    64b4:	10800b17 	ldw	r2,44(r2)
    64b8:	1080050b 	ldhu	r2,20(r2)
    64bc:	10bfffcc 	andi	r2,r2,65535
    64c0:	01407d04 	movi	r5,500
    64c4:	1009883a 	mov	r4,r2
    64c8:	0012a540 	call	12a54 <__udivsi3>
    64cc:	10bfffcc 	andi	r2,r2,65535
    64d0:	10801fcc 	andi	r2,r2,127
    64d4:	1080c014 	ori	r2,r2,768
    64d8:	00000106 	br	64e0 <ad9523_setup+0x2c0>
	ret = ad9523_spi_write(dev,
    64dc:	00802004 	movi	r2,128
    64e0:	100d883a 	mov	r6,r2
    64e4:	014000b4 	movhi	r5,2
    64e8:	29400644 	addi	r5,r5,25
    64ec:	e13ffd17 	ldw	r4,-12(fp)
    64f0:	00058dc0 	call	58dc <ad9523_spi_write>
    64f4:	e0bffc15 	stw	r2,-16(fp)
				      AD9523_PLL1_CHARGE_PUMP_CURRENT_nA(dev->pdata->
						      pll1_charge_pump_current_nA) |
				      AD9523_PLL1_CHARGE_PUMP_MODE_NORMAL |
				      AD9523_PLL1_BACKLASH_PW_MIN));
	if (ret < 0)
    64f8:	e0bffc17 	ldw	r2,-16(fp)
    64fc:	1000020e 	bge	r2,zero,6508 <ad9523_setup+0x2e8>
		return ret;
    6500:	e0bffc17 	ldw	r2,-16(fp)
    6504:	00025906 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_INPUT_RECEIVERS_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_REFA_REFB_PWR_CTRL_EN |
    6508:	e0bffd17 	ldw	r2,-12(fp)
    650c:	10800b17 	ldw	r2,44(r2)
    6510:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
    6514:	10803fcc 	andi	r2,r2,255
    6518:	10001226 	beq	r2,zero,6564 <ad9523_setup+0x344>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_REFA_REFB_PWR_CTRL_EN |
    651c:	e0bffd17 	ldw	r2,-12(fp)
    6520:	10800b17 	ldw	r2,44(r2)
    6524:	10800203 	ldbu	r2,8(r2)
    6528:	10803fcc 	andi	r2,r2,255
    652c:	10000226 	beq	r2,zero,6538 <ad9523_setup+0x318>
    6530:	00800144 	movi	r2,5
    6534:	00000106 	br	653c <ad9523_setup+0x31c>
    6538:	00800104 	movi	r2,4
    653c:	e0fffd17 	ldw	r3,-12(fp)
    6540:	18c00b17 	ldw	r3,44(r3)
    6544:	18c00303 	ldbu	r3,12(r3)
    6548:	18c03fcc 	andi	r3,r3,255
    654c:	18000226 	beq	r3,zero,6558 <ad9523_setup+0x338>
    6550:	00c00084 	movi	r3,2
    6554:	00000106 	br	655c <ad9523_setup+0x33c>
    6558:	0007883a 	mov	r3,zero
    655c:	10c4b03a 	or	r2,r2,r3
    6560:	00003306 	br	6630 <ad9523_setup+0x410>
    6564:	e0bffd17 	ldw	r2,-12(fp)
    6568:	10800b17 	ldw	r2,44(r2)
    656c:	10800143 	ldbu	r2,5(r2)
    6570:	10803fcc 	andi	r2,r2,255
    6574:	10000226 	beq	r2,zero,6580 <ad9523_setup+0x360>
    6578:	00c00204 	movi	r3,8
    657c:	00000106 	br	6584 <ad9523_setup+0x364>
    6580:	0007883a 	mov	r3,zero
    6584:	e0bffd17 	ldw	r2,-12(fp)
    6588:	10800b17 	ldw	r2,44(r2)
    658c:	10800183 	ldbu	r2,6(r2)
    6590:	10803fcc 	andi	r2,r2,255
    6594:	10000226 	beq	r2,zero,65a0 <ad9523_setup+0x380>
    6598:	00800404 	movi	r2,16
    659c:	00000106 	br	65a4 <ad9523_setup+0x384>
    65a0:	0005883a 	mov	r2,zero
    65a4:	1886b03a 	or	r3,r3,r2
    65a8:	e0bffd17 	ldw	r2,-12(fp)
    65ac:	10800b17 	ldw	r2,44(r2)
    65b0:	10800203 	ldbu	r2,8(r2)
    65b4:	10803fcc 	andi	r2,r2,255
    65b8:	1004c03a 	cmpne	r2,r2,zero
    65bc:	10803fcc 	andi	r2,r2,255
    65c0:	1886b03a 	or	r3,r3,r2
    65c4:	e0bffd17 	ldw	r2,-12(fp)
    65c8:	10800b17 	ldw	r2,44(r2)
    65cc:	10800303 	ldbu	r2,12(r2)
    65d0:	10803fcc 	andi	r2,r2,255
    65d4:	10000226 	beq	r2,zero,65e0 <ad9523_setup+0x3c0>
    65d8:	00800084 	movi	r2,2
    65dc:	00000106 	br	65e4 <ad9523_setup+0x3c4>
    65e0:	0005883a 	mov	r2,zero
    65e4:	10c6b03a 	or	r3,r2,r3
    65e8:	e0bffd17 	ldw	r2,-12(fp)
    65ec:	10800b17 	ldw	r2,44(r2)
    65f0:	10800143 	ldbu	r2,5(r2)
    65f4:	10803fcc 	andi	r2,r2,255
    65f8:	10000226 	beq	r2,zero,6604 <ad9523_setup+0x3e4>
    65fc:	00800804 	movi	r2,32
    6600:	00000106 	br	6608 <ad9523_setup+0x3e8>
    6604:	0005883a 	mov	r2,zero
    6608:	10c6b03a 	or	r3,r2,r3
    660c:	e0bffd17 	ldw	r2,-12(fp)
    6610:	10800b17 	ldw	r2,44(r2)
    6614:	10800183 	ldbu	r2,6(r2)
    6618:	10803fcc 	andi	r2,r2,255
    661c:	10000226 	beq	r2,zero,6628 <ad9523_setup+0x408>
    6620:	00801004 	movi	r2,64
    6624:	00000106 	br	662c <ad9523_setup+0x40c>
    6628:	0005883a 	mov	r2,zero
    662c:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
    6630:	100d883a 	mov	r6,r2
    6634:	01400074 	movhi	r5,1
    6638:	29400684 	addi	r5,r5,26
    663c:	e13ffd17 	ldw	r4,-12(fp)
    6640:	00058dc0 	call	58dc <ad9523_spi_write>
    6644:	e0bffc15 	stw	r2,-16(fp)
				      AD_IF(osc_in_diff_en, AD9523_PLL1_OSC_IN_DIFF_EN) |
				      AD_IF(osc_in_cmos_neg_inp_en,
					    AD9523_PLL1_OSC_IN_CMOS_NEG_INP_EN) |
				      AD_IF(refa_diff_rcv_en, AD9523_PLL1_REFA_DIFF_RCV_EN) |
				      AD_IF(refb_diff_rcv_en, AD9523_PLL1_REFB_DIFF_RCV_EN)));
	if (ret < 0)
    6648:	e0bffc17 	ldw	r2,-16(fp)
    664c:	1000020e 	bge	r2,zero,6658 <ad9523_setup+0x438>
		return ret;
    6650:	e0bffc17 	ldw	r2,-16(fp)
    6654:	00020506 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_BYPASS_FEEDBACK_DIV_EN |
    6658:	e0bffd17 	ldw	r2,-12(fp)
    665c:	10800b17 	ldw	r2,44(r2)
    6660:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
    6664:	10803fcc 	andi	r2,r2,255
    6668:	1000341e 	bne	r2,zero,673c <ad9523_setup+0x51c>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_BYPASS_FEEDBACK_DIV_EN |
    666c:	e0bffd17 	ldw	r2,-12(fp)
    6670:	10800b17 	ldw	r2,44(r2)
    6674:	108001c3 	ldbu	r2,7(r2)
    6678:	10803fcc 	andi	r2,r2,255
    667c:	10000226 	beq	r2,zero,6688 <ad9523_setup+0x468>
    6680:	00c00104 	movi	r3,4
    6684:	00000106 	br	668c <ad9523_setup+0x46c>
    6688:	0007883a 	mov	r3,zero
    668c:	e0bffd17 	ldw	r2,-12(fp)
    6690:	10800b17 	ldw	r2,44(r2)
    6694:	108002c3 	ldbu	r2,11(r2)
    6698:	10803fcc 	andi	r2,r2,255
    669c:	10000226 	beq	r2,zero,66a8 <ad9523_setup+0x488>
    66a0:	00800204 	movi	r2,8
    66a4:	00000106 	br	66ac <ad9523_setup+0x48c>
    66a8:	0005883a 	mov	r2,zero
    66ac:	1886b03a 	or	r3,r3,r2
    66b0:	e0bffd17 	ldw	r2,-12(fp)
    66b4:	10800b17 	ldw	r2,44(r2)
    66b8:	10800583 	ldbu	r2,22(r2)
    66bc:	10803fcc 	andi	r2,r2,255
    66c0:	10000226 	beq	r2,zero,66cc <ad9523_setup+0x4ac>
    66c4:	00800804 	movi	r2,32
    66c8:	00000106 	br	66d0 <ad9523_setup+0x4b0>
    66cc:	0005883a 	mov	r2,zero
    66d0:	10c6b03a 	or	r3,r2,r3
    66d4:	e0bffd17 	ldw	r2,-12(fp)
    66d8:	10800b17 	ldw	r2,44(r2)
    66dc:	108005c3 	ldbu	r2,23(r2)
    66e0:	10803fcc 	andi	r2,r2,255
    66e4:	10000226 	beq	r2,zero,66f0 <ad9523_setup+0x4d0>
    66e8:	00800404 	movi	r2,16
    66ec:	00000106 	br	66f4 <ad9523_setup+0x4d4>
    66f0:	0005883a 	mov	r2,zero
    66f4:	10c6b03a 	or	r3,r2,r3
    66f8:	e0bffd17 	ldw	r2,-12(fp)
    66fc:	10800b17 	ldw	r2,44(r2)
    6700:	10800243 	ldbu	r2,9(r2)
    6704:	10803fcc 	andi	r2,r2,255
    6708:	1004c03a 	cmpne	r2,r2,zero
    670c:	10803fcc 	andi	r2,r2,255
    6710:	1886b03a 	or	r3,r3,r2
    6714:	e0bffd17 	ldw	r2,-12(fp)
    6718:	10800b17 	ldw	r2,44(r2)
    671c:	10800283 	ldbu	r2,10(r2)
    6720:	10803fcc 	andi	r2,r2,255
    6724:	10000226 	beq	r2,zero,6730 <ad9523_setup+0x510>
    6728:	00800084 	movi	r2,2
    672c:	00000106 	br	6734 <ad9523_setup+0x514>
    6730:	0005883a 	mov	r2,zero
    6734:	10c4b03a 	or	r2,r2,r3
    6738:	00000106 	br	6740 <ad9523_setup+0x520>
	ret = ad9523_spi_write(dev,
    673c:	00801804 	movi	r2,96
    6740:	100d883a 	mov	r6,r2
    6744:	01400074 	movhi	r5,1
    6748:	294006c4 	addi	r5,r5,27
    674c:	e13ffd17 	ldw	r4,-12(fp)
    6750:	00058dc0 	call	58dc <ad9523_spi_write>
    6754:	e0bffc15 	stw	r2,-16(fp)
				      AD_IF(zero_delay_mode_internal_en,
					    AD9523_PLL1_ZERO_DELAY_MODE_INT) |
				      AD_IF(osc_in_feedback_en, AD9523_PLL1_OSC_IN_PLL_FEEDBACK_EN) |
				      AD_IF(refa_cmos_neg_inp_en, AD9523_PLL1_REFA_CMOS_NEG_INP_EN) |
				      AD_IF(refb_cmos_neg_inp_en, AD9523_PLL1_REFB_CMOS_NEG_INP_EN)));
	if (ret < 0)
    6758:	e0bffc17 	ldw	r2,-16(fp)
    675c:	1000020e 	bge	r2,zero,6768 <ad9523_setup+0x548>
		return ret;
    6760:	e0bffc17 	ldw	r2,-16(fp)
    6764:	0001c106 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_MISC_CTRL,
			       AD9523_PLL1_REFB_INDEP_DIV_CTRL_EN |
			       AD9523_PLL1_REF_MODE(dev->pdata->ref_mode));
    6768:	e0bffd17 	ldw	r2,-12(fp)
    676c:	10800b17 	ldw	r2,44(r2)
    6770:	10800683 	ldbu	r2,26(r2)
    6774:	10803fcc 	andi	r2,r2,255
    6778:	100490ba 	slli	r2,r2,2
			       AD9523_PLL1_REFB_INDEP_DIV_CTRL_EN |
    677c:	10802014 	ori	r2,r2,128
	ret = ad9523_spi_write(dev,
    6780:	100d883a 	mov	r6,r2
    6784:	01400074 	movhi	r5,1
    6788:	29400704 	addi	r5,r5,28
    678c:	e13ffd17 	ldw	r4,-12(fp)
    6790:	00058dc0 	call	58dc <ad9523_spi_write>
    6794:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6798:	e0bffc17 	ldw	r2,-16(fp)
    679c:	1000020e 	bge	r2,zero,67a8 <ad9523_setup+0x588>
		return ret;
    67a0:	e0bffc17 	ldw	r2,-16(fp)
    67a4:	0001b106 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_LOOP_FILTER_CTRL,
			       AD9523_PLL1_LOOP_FILTER_RZERO(dev->pdata->
    67a8:	e0bffd17 	ldw	r2,-12(fp)
    67ac:	10800b17 	ldw	r2,44(r2)
    67b0:	10800643 	ldbu	r2,25(r2)
    67b4:	10803fcc 	andi	r2,r2,255
	ret = ad9523_spi_write(dev,
    67b8:	108003cc 	andi	r2,r2,15
    67bc:	100d883a 	mov	r6,r2
    67c0:	01400074 	movhi	r5,1
    67c4:	29400744 	addi	r5,r5,29
    67c8:	e13ffd17 	ldw	r4,-12(fp)
    67cc:	00058dc0 	call	58dc <ad9523_spi_write>
    67d0:	e0bffc15 	stw	r2,-16(fp)
					       pll1_loop_filter_rzero));
	if (ret < 0)
    67d4:	e0bffc17 	ldw	r2,-16(fp)
    67d8:	1000020e 	bge	r2,zero,67e4 <ad9523_setup+0x5c4>
		return ret;
    67dc:	e0bffc17 	ldw	r2,-16(fp)
    67e0:	0001a206 	br	6e6c <ad9523_setup+0xc4c>
	 * PLL2 Setup
	 */

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_CHARGE_PUMP,
			       AD9523_PLL2_CHARGE_PUMP_CURRENT_nA(dev->pdata->
    67e4:	e0bffd17 	ldw	r2,-12(fp)
    67e8:	10800b17 	ldw	r2,44(r2)
    67ec:	10800717 	ldw	r2,28(r2)
	ret = ad9523_spi_write(dev,
    67f0:	01436b04 	movi	r5,3500
    67f4:	1009883a 	mov	r4,r2
    67f8:	0012a540 	call	12a54 <__udivsi3>
    67fc:	100d883a 	mov	r6,r2
    6800:	01400074 	movhi	r5,1
    6804:	29403c04 	addi	r5,r5,240
    6808:	e13ffd17 	ldw	r4,-12(fp)
    680c:	00058dc0 	call	58dc <ad9523_spi_write>
    6810:	e0bffc15 	stw	r2,-16(fp)
					       pll2_charge_pump_current_nA));
	if (ret < 0)
    6814:	e0bffc17 	ldw	r2,-16(fp)
    6818:	1000020e 	bge	r2,zero,6824 <ad9523_setup+0x604>
		return ret;
    681c:	e0bffc17 	ldw	r2,-16(fp)
    6820:	00019206 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_FEEDBACK_DIVIDER_AB,
			       AD9523_PLL2_FB_NDIV_A_CNT(dev->pdata->pll2_ndiv_a_cnt) |
    6824:	e0bffd17 	ldw	r2,-12(fp)
    6828:	10800b17 	ldw	r2,44(r2)
    682c:	10800803 	ldbu	r2,32(r2)
    6830:	10803fcc 	andi	r2,r2,255
    6834:	100491ba 	slli	r2,r2,6
    6838:	10c03fcc 	andi	r3,r2,255
			       AD9523_PLL2_FB_NDIV_B_CNT(dev->pdata->pll2_ndiv_b_cnt));
    683c:	e0bffd17 	ldw	r2,-12(fp)
    6840:	10800b17 	ldw	r2,44(r2)
    6844:	10800843 	ldbu	r2,33(r2)
    6848:	10803fcc 	andi	r2,r2,255
    684c:	10800fcc 	andi	r2,r2,63
			       AD9523_PLL2_FB_NDIV_A_CNT(dev->pdata->pll2_ndiv_a_cnt) |
    6850:	1884b03a 	or	r2,r3,r2
	ret = ad9523_spi_write(dev,
    6854:	100d883a 	mov	r6,r2
    6858:	01400074 	movhi	r5,1
    685c:	29403c44 	addi	r5,r5,241
    6860:	e13ffd17 	ldw	r4,-12(fp)
    6864:	00058dc0 	call	58dc <ad9523_spi_write>
    6868:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    686c:	e0bffc17 	ldw	r2,-16(fp)
    6870:	1000020e 	bge	r2,zero,687c <ad9523_setup+0x65c>
		return ret;
    6874:	e0bffc17 	ldw	r2,-16(fp)
    6878:	00017c06 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_CTRL,
			       AD9523_PLL2_CHARGE_PUMP_MODE_NORMAL |
			       AD9523_PLL2_BACKLASH_CTRL_EN |
			       AD_IF(pll2_freq_doubler_en,
    687c:	e0bffd17 	ldw	r2,-12(fp)
    6880:	10800b17 	ldw	r2,44(r2)
    6884:	10800883 	ldbu	r2,34(r2)
	ret = ad9523_spi_write(dev,
    6888:	10803fcc 	andi	r2,r2,255
    688c:	10000226 	beq	r2,zero,6898 <ad9523_setup+0x678>
    6890:	00800cc4 	movi	r2,51
    6894:	00000106 	br	689c <ad9523_setup+0x67c>
    6898:	008004c4 	movi	r2,19
    689c:	100d883a 	mov	r6,r2
    68a0:	01400074 	movhi	r5,1
    68a4:	29403c84 	addi	r5,r5,242
    68a8:	e13ffd17 	ldw	r4,-12(fp)
    68ac:	00058dc0 	call	58dc <ad9523_spi_write>
    68b0:	e0bffc15 	stw	r2,-16(fp)
				     AD9523_PLL2_FREQ_DOUBLER_EN));
	if (ret < 0)
    68b4:	e0bffc17 	ldw	r2,-16(fp)
    68b8:	1000020e 	bge	r2,zero,68c4 <ad9523_setup+0x6a4>
		return ret;
    68bc:	e0bffc17 	ldw	r2,-16(fp)
    68c0:	00016a06 	br	6e6c <ad9523_setup+0xc4c>

	dev->ad9523_st.vco_freq = (dev->pdata->vcxo_freq * (dev->pdata->pll2_freq_doubler_en ? 2 : 1)
    68c4:	e0bffd17 	ldw	r2,-12(fp)
    68c8:	10800b17 	ldw	r2,44(r2)
    68cc:	10c00017 	ldw	r3,0(r2)
    68d0:	e0bffd17 	ldw	r2,-12(fp)
    68d4:	10800b17 	ldw	r2,44(r2)
    68d8:	10800883 	ldbu	r2,34(r2)
    68dc:	10803fcc 	andi	r2,r2,255
    68e0:	10000226 	beq	r2,zero,68ec <ad9523_setup+0x6cc>
    68e4:	00800084 	movi	r2,2
    68e8:	00000106 	br	68f0 <ad9523_setup+0x6d0>
    68ec:	00800044 	movi	r2,1
    68f0:	10c7383a 	mul	r3,r2,r3
				   / dev->pdata->pll2_r2_div) * AD9523_PLL2_FB_NDIV(dev->pdata->
    68f4:	e0bffd17 	ldw	r2,-12(fp)
    68f8:	10800b17 	ldw	r2,44(r2)
    68fc:	108008c3 	ldbu	r2,35(r2)
    6900:	10803fcc 	andi	r2,r2,255
    6904:	100b883a 	mov	r5,r2
    6908:	1809883a 	mov	r4,r3
    690c:	0012a540 	call	12a54 <__udivsi3>
    6910:	1009883a 	mov	r4,r2
    6914:	e0bffd17 	ldw	r2,-12(fp)
    6918:	10800b17 	ldw	r2,44(r2)
    691c:	10800843 	ldbu	r2,33(r2)
    6920:	10803fcc 	andi	r2,r2,255
    6924:	100690ba 	slli	r3,r2,2
    6928:	e0bffd17 	ldw	r2,-12(fp)
    692c:	10800b17 	ldw	r2,44(r2)
    6930:	10800803 	ldbu	r2,32(r2)
    6934:	10803fcc 	andi	r2,r2,255
    6938:	1885883a 	add	r2,r3,r2
    693c:	2087383a 	mul	r3,r4,r2
	dev->ad9523_st.vco_freq = (dev->pdata->vcxo_freq * (dev->pdata->pll2_freq_doubler_en ? 2 : 1)
    6940:	e0bffd17 	ldw	r2,-12(fp)
    6944:	10c00315 	stw	r3,12(r2)
						   pll2_ndiv_a_cnt,
						   dev->pdata->
						   pll2_ndiv_b_cnt);

	ret = ad9523_spi_write(dev,
    6948:	01800084 	movi	r6,2
    694c:	01400074 	movhi	r5,1
    6950:	29403cc4 	addi	r5,r5,243
    6954:	e13ffd17 	ldw	r4,-12(fp)
    6958:	00058dc0 	call	58dc <ad9523_spi_write>
    695c:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_PLL2_VCO_CTRL,
			       AD9523_PLL2_VCO_CALIBRATE);
	if (ret < 0)
    6960:	e0bffc17 	ldw	r2,-16(fp)
    6964:	1000020e 	bge	r2,zero,6970 <ad9523_setup+0x750>
		return ret;
    6968:	e0bffc17 	ldw	r2,-16(fp)
    696c:	00013f06 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_VCO_DIVIDER,
			       AD9523_PLL2_VCO_DIV_M1(dev->pdata->
    6970:	e0bffd17 	ldw	r2,-12(fp)
    6974:	10800b17 	ldw	r2,44(r2)
    6978:	10800903 	ldbu	r2,36(r2)
    697c:	10803fcc 	andi	r2,r2,255
    6980:	10bfff44 	addi	r2,r2,-3
    6984:	10c000cc 	andi	r3,r2,3
					       pll2_vco_diff_m1) |
			       AD9523_PLL2_VCO_DIV_M2(dev->pdata->
    6988:	e0bffd17 	ldw	r2,-12(fp)
    698c:	10800b17 	ldw	r2,44(r2)
    6990:	10800943 	ldbu	r2,37(r2)
    6994:	10803fcc 	andi	r2,r2,255
    6998:	10bfff44 	addi	r2,r2,-3
    699c:	1004913a 	slli	r2,r2,4
    69a0:	10800c0c 	andi	r2,r2,48
					       pll2_vco_diff_m1) |
    69a4:	1886b03a 	or	r3,r3,r2
					       pll2_vco_diff_m2) |
			       AD_IFE(pll2_vco_diff_m1,
    69a8:	e0bffd17 	ldw	r2,-12(fp)
    69ac:	10800b17 	ldw	r2,44(r2)
    69b0:	10800903 	ldbu	r2,36(r2)
    69b4:	10803fcc 	andi	r2,r2,255
    69b8:	10000226 	beq	r2,zero,69c4 <ad9523_setup+0x7a4>
    69bc:	0005883a 	mov	r2,zero
    69c0:	00000106 	br	69c8 <ad9523_setup+0x7a8>
    69c4:	00800104 	movi	r2,4
					       pll2_vco_diff_m2) |
    69c8:	10c6b03a 	or	r3,r2,r3
				      0,
				      AD9523_PLL2_VCO_DIV_M1_PWR_DOWN_EN) |
			       AD_IFE(pll2_vco_diff_m2,
    69cc:	e0bffd17 	ldw	r2,-12(fp)
    69d0:	10800b17 	ldw	r2,44(r2)
    69d4:	10800943 	ldbu	r2,37(r2)
    69d8:	10803fcc 	andi	r2,r2,255
    69dc:	10000226 	beq	r2,zero,69e8 <ad9523_setup+0x7c8>
    69e0:	0005883a 	mov	r2,zero
    69e4:	00000106 	br	69ec <ad9523_setup+0x7cc>
    69e8:	00801004 	movi	r2,64
				      AD9523_PLL2_VCO_DIV_M1_PWR_DOWN_EN) |
    69ec:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
    69f0:	100d883a 	mov	r6,r2
    69f4:	01400074 	movhi	r5,1
    69f8:	29403d04 	addi	r5,r5,244
    69fc:	e13ffd17 	ldw	r4,-12(fp)
    6a00:	00058dc0 	call	58dc <ad9523_spi_write>
    6a04:	e0bffc15 	stw	r2,-16(fp)
				      0,
				      AD9523_PLL2_VCO_DIV_M2_PWR_DOWN_EN));
	if (ret < 0)
    6a08:	e0bffc17 	ldw	r2,-16(fp)
    6a0c:	1000020e 	bge	r2,zero,6a18 <ad9523_setup+0x7f8>
		return ret;
    6a10:	e0bffc17 	ldw	r2,-16(fp)
    6a14:	00011506 	br	6e6c <ad9523_setup+0xc4c>

	if (dev->pdata->pll2_vco_diff_m1)
    6a18:	e0bffd17 	ldw	r2,-12(fp)
    6a1c:	10800b17 	ldw	r2,44(r2)
    6a20:	10800903 	ldbu	r2,36(r2)
    6a24:	10803fcc 	andi	r2,r2,255
    6a28:	10000c26 	beq	r2,zero,6a5c <ad9523_setup+0x83c>
		dev->ad9523_st.vco_out_freq[AD9523_VCO1] =
			dev->ad9523_st.vco_freq / dev->pdata->pll2_vco_diff_m1;
    6a2c:	e0bffd17 	ldw	r2,-12(fp)
    6a30:	10c00317 	ldw	r3,12(r2)
    6a34:	e0bffd17 	ldw	r2,-12(fp)
    6a38:	10800b17 	ldw	r2,44(r2)
    6a3c:	10800903 	ldbu	r2,36(r2)
    6a40:	10803fcc 	andi	r2,r2,255
    6a44:	100b883a 	mov	r5,r2
    6a48:	1809883a 	mov	r4,r3
    6a4c:	0012a540 	call	12a54 <__udivsi3>
    6a50:	1007883a 	mov	r3,r2
		dev->ad9523_st.vco_out_freq[AD9523_VCO1] =
    6a54:	e0bffd17 	ldw	r2,-12(fp)
    6a58:	10c00415 	stw	r3,16(r2)

	if (dev->pdata->pll2_vco_diff_m2)
    6a5c:	e0bffd17 	ldw	r2,-12(fp)
    6a60:	10800b17 	ldw	r2,44(r2)
    6a64:	10800943 	ldbu	r2,37(r2)
    6a68:	10803fcc 	andi	r2,r2,255
    6a6c:	10000c26 	beq	r2,zero,6aa0 <ad9523_setup+0x880>
		dev->ad9523_st.vco_out_freq[AD9523_VCO2] =
			dev->ad9523_st.vco_freq / dev->pdata->pll2_vco_diff_m2;
    6a70:	e0bffd17 	ldw	r2,-12(fp)
    6a74:	10c00317 	ldw	r3,12(r2)
    6a78:	e0bffd17 	ldw	r2,-12(fp)
    6a7c:	10800b17 	ldw	r2,44(r2)
    6a80:	10800943 	ldbu	r2,37(r2)
    6a84:	10803fcc 	andi	r2,r2,255
    6a88:	100b883a 	mov	r5,r2
    6a8c:	1809883a 	mov	r4,r3
    6a90:	0012a540 	call	12a54 <__udivsi3>
    6a94:	1007883a 	mov	r3,r2
		dev->ad9523_st.vco_out_freq[AD9523_VCO2] =
    6a98:	e0bffd17 	ldw	r2,-12(fp)
    6a9c:	10c00515 	stw	r3,20(r2)

	dev->ad9523_st.vco_out_freq[AD9523_VCXO] = dev->pdata->vcxo_freq;
    6aa0:	e0bffd17 	ldw	r2,-12(fp)
    6aa4:	10800b17 	ldw	r2,44(r2)
    6aa8:	10c00017 	ldw	r3,0(r2)
    6aac:	e0bffd17 	ldw	r2,-12(fp)
    6ab0:	10c00615 	stw	r3,24(r2)

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_R2_DIVIDER,
			       AD9523_PLL2_R2_DIVIDER_VAL(dev->pdata->pll2_r2_div));
    6ab4:	e0bffd17 	ldw	r2,-12(fp)
    6ab8:	10800b17 	ldw	r2,44(r2)
    6abc:	108008c3 	ldbu	r2,35(r2)
    6ac0:	10803fcc 	andi	r2,r2,255
	ret = ad9523_spi_write(dev,
    6ac4:	108007cc 	andi	r2,r2,31
    6ac8:	100d883a 	mov	r6,r2
    6acc:	01400074 	movhi	r5,1
    6ad0:	29403dc4 	addi	r5,r5,247
    6ad4:	e13ffd17 	ldw	r4,-12(fp)
    6ad8:	00058dc0 	call	58dc <ad9523_spi_write>
    6adc:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6ae0:	e0bffc17 	ldw	r2,-16(fp)
    6ae4:	1000020e 	bge	r2,zero,6af0 <ad9523_setup+0x8d0>
		return ret;
    6ae8:	e0bffc17 	ldw	r2,-16(fp)
    6aec:	0000df06 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_LOOP_FILTER_CTRL,
			       AD9523_PLL2_LOOP_FILTER_CPOLE1(dev->pdata->cpole1) |
    6af0:	e0bffd17 	ldw	r2,-12(fp)
    6af4:	10800b17 	ldw	r2,44(r2)
    6af8:	10800a03 	ldbu	r2,40(r2)
    6afc:	10803fcc 	andi	r2,r2,255
    6b00:	10c001cc 	andi	r3,r2,7
			       AD9523_PLL2_LOOP_FILTER_RZERO(dev->pdata->rzero) |
    6b04:	e0bffd17 	ldw	r2,-12(fp)
    6b08:	10800b17 	ldw	r2,44(r2)
    6b0c:	108009c3 	ldbu	r2,39(r2)
    6b10:	10803fcc 	andi	r2,r2,255
    6b14:	100490fa 	slli	r2,r2,3
    6b18:	10800e0c 	andi	r2,r2,56
			       AD9523_PLL2_LOOP_FILTER_CPOLE1(dev->pdata->cpole1) |
    6b1c:	1886b03a 	or	r3,r3,r2
			       AD9523_PLL2_LOOP_FILTER_RPOLE2(dev->pdata->rpole2) |
    6b20:	e0bffd17 	ldw	r2,-12(fp)
    6b24:	10800b17 	ldw	r2,44(r2)
    6b28:	10800983 	ldbu	r2,38(r2)
    6b2c:	10803fcc 	andi	r2,r2,255
    6b30:	100491ba 	slli	r2,r2,6
    6b34:	1080700c 	andi	r2,r2,448
			       AD9523_PLL2_LOOP_FILTER_RZERO(dev->pdata->rzero) |
    6b38:	1886b03a 	or	r3,r3,r2
			       AD_IF(rzero_bypass_en,
    6b3c:	e0bffd17 	ldw	r2,-12(fp)
    6b40:	10800b17 	ldw	r2,44(r2)
    6b44:	10800a43 	ldbu	r2,41(r2)
    6b48:	10803fcc 	andi	r2,r2,255
    6b4c:	10000226 	beq	r2,zero,6b58 <ad9523_setup+0x938>
    6b50:	00804004 	movi	r2,256
    6b54:	00000106 	br	6b5c <ad9523_setup+0x93c>
    6b58:	0005883a 	mov	r2,zero
			       AD9523_PLL2_LOOP_FILTER_RPOLE2(dev->pdata->rpole2) |
    6b5c:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
    6b60:	100d883a 	mov	r6,r2
    6b64:	014000b4 	movhi	r5,2
    6b68:	29403d84 	addi	r5,r5,246
    6b6c:	e13ffd17 	ldw	r4,-12(fp)
    6b70:	00058dc0 	call	58dc <ad9523_spi_write>
    6b74:	e0bffc15 	stw	r2,-16(fp)
				     AD9523_PLL2_LOOP_FILTER_RZERO_BYPASS_EN));
	if (ret < 0)
    6b78:	e0bffc17 	ldw	r2,-16(fp)
    6b7c:	1000020e 	bge	r2,zero,6b88 <ad9523_setup+0x968>
		return ret;
    6b80:	e0bffc17 	ldw	r2,-16(fp)
    6b84:	0000b906 	br	6e6c <ad9523_setup+0xc4c>

	for (i = 0; i < dev->pdata->num_channels; i++) {
    6b88:	e03ffe15 	stw	zero,-8(fp)
    6b8c:	00006906 	br	6d34 <ad9523_setup+0xb14>
		chan = &dev->pdata->channels[i];
    6b90:	e0bffd17 	ldw	r2,-12(fp)
    6b94:	10800b17 	ldw	r2,44(r2)
    6b98:	10c00c17 	ldw	r3,48(r2)
    6b9c:	e0bffe17 	ldw	r2,-8(fp)
    6ba0:	108006a4 	muli	r2,r2,26
    6ba4:	1885883a 	add	r2,r3,r2
    6ba8:	e0bffb15 	stw	r2,-20(fp)
		if (chan->channel_num < AD9523_NUM_CHAN) {
    6bac:	e0bffb17 	ldw	r2,-20(fp)
    6bb0:	10800003 	ldbu	r2,0(r2)
    6bb4:	10803fcc 	andi	r2,r2,255
    6bb8:	108003a8 	cmpgeui	r2,r2,14
    6bbc:	10005a1e 	bne	r2,zero,6d28 <ad9523_setup+0xb08>
			active_mask |= (1 << chan->channel_num);
    6bc0:	e0bffb17 	ldw	r2,-20(fp)
    6bc4:	10800003 	ldbu	r2,0(r2)
    6bc8:	10803fcc 	andi	r2,r2,255
    6bcc:	00c00044 	movi	r3,1
    6bd0:	1884983a 	sll	r2,r3,r2
    6bd4:	1007883a 	mov	r3,r2
    6bd8:	e0bfff17 	ldw	r2,-4(fp)
    6bdc:	10c4b03a 	or	r2,r2,r3
    6be0:	e0bfff15 	stw	r2,-4(fp)
			ret = ad9523_spi_write(dev,
					       AD9523_CHANNEL_CLOCK_DIST(chan->channel_num),
    6be4:	e0bffb17 	ldw	r2,-20(fp)
    6be8:	10800003 	ldbu	r2,0(r2)
    6bec:	10803fcc 	andi	r2,r2,255
    6bf0:	108000e4 	muli	r2,r2,3
    6bf4:	10806484 	addi	r2,r2,402
    6bf8:	108000f4 	orhi	r2,r2,3
			ret = ad9523_spi_write(dev,
    6bfc:	100b883a 	mov	r5,r2
					       AD9523_CLK_DIST_DRIVER_MODE(chan->driver_mode) |
    6c00:	e0bffb17 	ldw	r2,-20(fp)
    6c04:	10800183 	ldbu	r2,6(r2)
    6c08:	10803fcc 	andi	r2,r2,255
    6c0c:	10c003cc 	andi	r3,r2,15
					       AD9523_CLK_DIST_DIV(chan->channel_divider) |
    6c10:	e0bffb17 	ldw	r2,-20(fp)
    6c14:	1080020b 	ldhu	r2,8(r2)
    6c18:	10bfffcc 	andi	r2,r2,65535
    6c1c:	10bfffc4 	addi	r2,r2,-1
    6c20:	1008923a 	slli	r4,r2,8
    6c24:	00800134 	movhi	r2,4
    6c28:	10bfc004 	addi	r2,r2,-256
    6c2c:	2084703a 	and	r2,r4,r2
					       AD9523_CLK_DIST_DRIVER_MODE(chan->driver_mode) |
    6c30:	1886b03a 	or	r3,r3,r2
					       AD9523_CLK_DIST_DIV_PHASE(chan->divider_phase) |
    6c34:	e0bffb17 	ldw	r2,-20(fp)
    6c38:	108001c3 	ldbu	r2,7(r2)
    6c3c:	10803fcc 	andi	r2,r2,255
    6c40:	100494ba 	slli	r2,r2,18
    6c44:	10803f2c 	andhi	r2,r2,252
					       AD9523_CLK_DIST_DIV(chan->channel_divider) |
    6c48:	1886b03a 	or	r3,r3,r2
					       (chan->sync_ignore_en ?
    6c4c:	e0bffb17 	ldw	r2,-20(fp)
    6c50:	10800083 	ldbu	r2,2(r2)
						AD9523_CLK_DIST_IGNORE_SYNC_EN : 0) |
    6c54:	10803fcc 	andi	r2,r2,255
    6c58:	10000226 	beq	r2,zero,6c64 <ad9523_setup+0xa44>
    6c5c:	00801004 	movi	r2,64
    6c60:	00000106 	br	6c68 <ad9523_setup+0xa48>
    6c64:	0005883a 	mov	r2,zero
					       AD9523_CLK_DIST_DIV_PHASE(chan->divider_phase) |
    6c68:	10c6b03a 	or	r3,r2,r3
					       (chan->divider_output_invert_en ?
    6c6c:	e0bffb17 	ldw	r2,-20(fp)
    6c70:	10800043 	ldbu	r2,1(r2)
						AD9523_CLK_DIST_INV_DIV_OUTPUT_EN : 0) |
    6c74:	10803fcc 	andi	r2,r2,255
    6c78:	10000226 	beq	r2,zero,6c84 <ad9523_setup+0xa64>
    6c7c:	00802004 	movi	r2,128
    6c80:	00000106 	br	6c88 <ad9523_setup+0xa68>
    6c84:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_IGNORE_SYNC_EN : 0) |
    6c88:	10c6b03a 	or	r3,r2,r3
					       (chan->low_power_mode_en ?
    6c8c:	e0bffb17 	ldw	r2,-20(fp)
    6c90:	108000c3 	ldbu	r2,3(r2)
						AD9523_CLK_DIST_LOW_PWR_MODE_EN : 0) |
    6c94:	10803fcc 	andi	r2,r2,255
    6c98:	10000226 	beq	r2,zero,6ca4 <ad9523_setup+0xa84>
    6c9c:	00800404 	movi	r2,16
    6ca0:	00000106 	br	6ca8 <ad9523_setup+0xa88>
    6ca4:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_INV_DIV_OUTPUT_EN : 0) |
    6ca8:	10c6b03a 	or	r3,r2,r3
					       (chan->output_dis ?
    6cac:	e0bffb17 	ldw	r2,-20(fp)
    6cb0:	10800143 	ldbu	r2,5(r2)
						AD9523_CLK_DIST_PWR_DOWN_EN : 0));
    6cb4:	10803fcc 	andi	r2,r2,255
    6cb8:	10000226 	beq	r2,zero,6cc4 <ad9523_setup+0xaa4>
    6cbc:	00800804 	movi	r2,32
    6cc0:	00000106 	br	6cc8 <ad9523_setup+0xaa8>
    6cc4:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_LOW_PWR_MODE_EN : 0) |
    6cc8:	10c4b03a 	or	r2,r2,r3
			ret = ad9523_spi_write(dev,
    6ccc:	100d883a 	mov	r6,r2
    6cd0:	e13ffd17 	ldw	r4,-12(fp)
    6cd4:	00058dc0 	call	58dc <ad9523_spi_write>
    6cd8:	e0bffc15 	stw	r2,-16(fp)
			if (ret < 0)
    6cdc:	e0bffc17 	ldw	r2,-16(fp)
    6ce0:	1000020e 	bge	r2,zero,6cec <ad9523_setup+0xacc>
				return ret;
    6ce4:	e0bffc17 	ldw	r2,-16(fp)
    6ce8:	00006006 	br	6e6c <ad9523_setup+0xc4c>

			ret = ad9523_vco_out_map(dev,
						 chan->channel_num,
    6cec:	e0bffb17 	ldw	r2,-20(fp)
    6cf0:	10800003 	ldbu	r2,0(r2)
			ret = ad9523_vco_out_map(dev,
    6cf4:	10c03fcc 	andi	r3,r2,255
						 chan->use_alt_clock_src);
    6cf8:	e0bffb17 	ldw	r2,-20(fp)
    6cfc:	10800103 	ldbu	r2,4(r2)
			ret = ad9523_vco_out_map(dev,
    6d00:	10803fcc 	andi	r2,r2,255
    6d04:	100d883a 	mov	r6,r2
    6d08:	180b883a 	mov	r5,r3
    6d0c:	e13ffd17 	ldw	r4,-12(fp)
    6d10:	00059ec0 	call	59ec <ad9523_vco_out_map>
    6d14:	e0bffc15 	stw	r2,-16(fp)
			if (ret < 0)
    6d18:	e0bffc17 	ldw	r2,-16(fp)
    6d1c:	1000020e 	bge	r2,zero,6d28 <ad9523_setup+0xb08>
				return ret;
    6d20:	e0bffc17 	ldw	r2,-16(fp)
    6d24:	00005106 	br	6e6c <ad9523_setup+0xc4c>
	for (i = 0; i < dev->pdata->num_channels; i++) {
    6d28:	e0bffe17 	ldw	r2,-8(fp)
    6d2c:	10800044 	addi	r2,r2,1
    6d30:	e0bffe15 	stw	r2,-8(fp)
    6d34:	e0bffd17 	ldw	r2,-12(fp)
    6d38:	10800b17 	ldw	r2,44(r2)
    6d3c:	10800b17 	ldw	r2,44(r2)
    6d40:	e0fffe17 	ldw	r3,-8(fp)
    6d44:	18bf9216 	blt	r3,r2,6b90 <__alt_mem_mcu_subsystem_ram_0+0x77fe6b90>
		}
	}

	for(i = 0; i < AD9523_NUM_CHAN; i++) {
    6d48:	e03ffe15 	stw	zero,-8(fp)
    6d4c:	00001206 	br	6d98 <ad9523_setup+0xb78>
		if(!(active_mask & (1 << i))) {
    6d50:	00c00044 	movi	r3,1
    6d54:	e0bffe17 	ldw	r2,-8(fp)
    6d58:	1884983a 	sll	r2,r3,r2
    6d5c:	1007883a 	mov	r3,r2
    6d60:	e0bfff17 	ldw	r2,-4(fp)
    6d64:	1884703a 	and	r2,r3,r2
    6d68:	1000081e 	bne	r2,zero,6d8c <ad9523_setup+0xb6c>
			ad9523_spi_write(dev,
					 AD9523_CHANNEL_CLOCK_DIST(i),
    6d6c:	e0bffe17 	ldw	r2,-8(fp)
    6d70:	108000e4 	muli	r2,r2,3
    6d74:	10806484 	addi	r2,r2,402
    6d78:	108000f4 	orhi	r2,r2,3
			ad9523_spi_write(dev,
    6d7c:	01800804 	movi	r6,32
    6d80:	100b883a 	mov	r5,r2
    6d84:	e13ffd17 	ldw	r4,-12(fp)
    6d88:	00058dc0 	call	58dc <ad9523_spi_write>
	for(i = 0; i < AD9523_NUM_CHAN; i++) {
    6d8c:	e0bffe17 	ldw	r2,-8(fp)
    6d90:	10800044 	addi	r2,r2,1
    6d94:	e0bffe15 	stw	r2,-8(fp)
    6d98:	e0bffe17 	ldw	r2,-8(fp)
    6d9c:	10800390 	cmplti	r2,r2,14
    6da0:	103feb1e 	bne	r2,zero,6d50 <__alt_mem_mcu_subsystem_ram_0+0x77fe6d50>
					 AD9523_CLK_DIST_DRIVER_MODE(TRISTATE) |
					 AD9523_CLK_DIST_PWR_DOWN_EN);
		}
	}

	ret = ad9523_spi_write(dev,
    6da4:	000d883a 	mov	r6,zero
    6da8:	01400074 	movhi	r5,1
    6dac:	29408cc4 	addi	r5,r5,563
    6db0:	e13ffd17 	ldw	r4,-12(fp)
    6db4:	00058dc0 	call	58dc <ad9523_spi_write>
    6db8:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_POWER_DOWN_CTRL,
			       0);
	if (ret < 0)
    6dbc:	e0bffc17 	ldw	r2,-16(fp)
    6dc0:	1000020e 	bge	r2,zero,6dcc <ad9523_setup+0xbac>
		return ret;
    6dc4:	e0bffc17 	ldw	r2,-16(fp)
    6dc8:	00002806 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_spi_write(dev,
    6dcc:	0180c084 	movi	r6,770
    6dd0:	014000f4 	movhi	r5,3
    6dd4:	29408c84 	addi	r5,r5,562
    6dd8:	e13ffd17 	ldw	r4,-12(fp)
    6ddc:	00058dc0 	call	58dc <ad9523_spi_write>
    6de0:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_STATUS_SIGNALS,
			       AD9523_STATUS_MONITOR_01_PLL12_LOCKED);
	if (ret < 0)
    6de4:	e0bffc17 	ldw	r2,-16(fp)
    6de8:	1000020e 	bge	r2,zero,6df4 <ad9523_setup+0xbd4>
		return ret;
    6dec:	e0bffc17 	ldw	r2,-16(fp)
    6df0:	00001e06 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_io_update(dev);
    6df4:	e13ffd17 	ldw	r4,-12(fp)
    6df8:	00059b00 	call	59b0 <ad9523_io_update>
    6dfc:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6e00:	e0bffc17 	ldw	r2,-16(fp)
    6e04:	1000020e 	bge	r2,zero,6e10 <ad9523_setup+0xbf0>
		return ret;
    6e08:	e0bffc17 	ldw	r2,-16(fp)
    6e0c:	00001706 	br	6e6c <ad9523_setup+0xc4c>

	ret = ad9523_sync(dev);
    6e10:	e13ffd17 	ldw	r4,-12(fp)
    6e14:	0005e6c0 	call	5e6c <ad9523_sync>
    6e18:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    6e1c:	e0bffc17 	ldw	r2,-16(fp)
    6e20:	1000020e 	bge	r2,zero,6e2c <ad9523_setup+0xc0c>
		return ret;
    6e24:	e0bffc17 	ldw	r2,-16(fp)
    6e28:	00001006 	br	6e6c <ad9523_setup+0xc4c>

	ad9523_spi_write(dev,
    6e2c:	000d883a 	mov	r6,zero
    6e30:	01400074 	movhi	r5,1
    6e34:	29400104 	addi	r5,r5,4
    6e38:	e13ffd17 	ldw	r4,-12(fp)
    6e3c:	00058dc0 	call	58dc <ad9523_spi_write>
			 AD9523_READBACK_CTRL,
			 0x0);
	ad9523_io_update(dev);
    6e40:	e13ffd17 	ldw	r4,-12(fp)
    6e44:	00059b00 	call	59b0 <ad9523_io_update>
	ad9523_calibrate(dev);
    6e48:	e13ffd17 	ldw	r4,-12(fp)
    6e4c:	0005c3c0 	call	5c3c <ad9523_calibrate>
	ad9523_sync(dev);
    6e50:	e13ffd17 	ldw	r4,-12(fp)
    6e54:	0005e6c0 	call	5e6c <ad9523_sync>

	*device = dev;
    6e58:	e0bff817 	ldw	r2,-32(fp)
    6e5c:	e0fffd17 	ldw	r3,-12(fp)
    6e60:	10c00015 	stw	r3,0(r2)

	return(ad9523_status(dev));
    6e64:	e13ffd17 	ldw	r4,-12(fp)
    6e68:	0005d180 	call	5d18 <ad9523_status>
}
    6e6c:	e037883a 	mov	sp,fp
    6e70:	dfc00117 	ldw	ra,4(sp)
    6e74:	df000017 	ldw	fp,0(sp)
    6e78:	dec00204 	addi	sp,sp,8
    6e7c:	f800283a 	ret

00006e80 <ad9523_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9523_remove(struct ad9523_dev *dev)
{
    6e80:	defffc04 	addi	sp,sp,-16
    6e84:	dfc00315 	stw	ra,12(sp)
    6e88:	df000215 	stw	fp,8(sp)
    6e8c:	df000204 	addi	fp,sp,8
    6e90:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
    6e94:	e0bffe17 	ldw	r2,-8(fp)
    6e98:	10800017 	ldw	r2,0(r2)
    6e9c:	1009883a 	mov	r4,r2
    6ea0:	000bf900 	call	bf90 <spi_remove>
    6ea4:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
    6ea8:	e13ffe17 	ldw	r4,-8(fp)
    6eac:	001526c0 	call	1526c <free>

	return ret;
    6eb0:	e0bfff17 	ldw	r2,-4(fp)
}
    6eb4:	e037883a 	mov	sp,fp
    6eb8:	dfc00117 	ldw	ra,4(sp)
    6ebc:	df000017 	ldw	fp,0(sp)
    6ec0:	dec00204 	addi	sp,sp,8
    6ec4:	f800283a 	ret

00006ec8 <ad9680_spi_read>:
 * @brief ad9680_spi_read
 *******************************************************************************/
int32_t ad9680_spi_read(struct ad9680_dev *dev,
			uint16_t reg_addr,
			uint8_t *reg_data)
{
    6ec8:	defff904 	addi	sp,sp,-28
    6ecc:	dfc00615 	stw	ra,24(sp)
    6ed0:	df000515 	stw	fp,20(sp)
    6ed4:	df000504 	addi	fp,sp,20
    6ed8:	e13ffd15 	stw	r4,-12(fp)
    6edc:	2805883a 	mov	r2,r5
    6ee0:	e1bffb15 	stw	r6,-20(fp)
    6ee4:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = 0x80 | (reg_addr >> 8);
    6ee8:	e0bffc0b 	ldhu	r2,-16(fp)
    6eec:	1004d23a 	srli	r2,r2,8
    6ef0:	1007883a 	mov	r3,r2
    6ef4:	00bfe004 	movi	r2,-128
    6ef8:	1884b03a 	or	r2,r3,r2
    6efc:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
    6f00:	e0bffc0b 	ldhu	r2,-16(fp)
    6f04:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = 0x00;
    6f08:	e03ffec5 	stb	zero,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
    6f0c:	e0bffd17 	ldw	r2,-12(fp)
    6f10:	10800017 	ldw	r2,0(r2)
    6f14:	e0fffe44 	addi	r3,fp,-7
    6f18:	018000c4 	movi	r6,3
    6f1c:	180b883a 	mov	r5,r3
    6f20:	1009883a 	mov	r4,r2
    6f24:	000bfc40 	call	bfc4 <spi_write_and_read>
    6f28:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);
	*reg_data = buf[2];
    6f2c:	e0fffec3 	ldbu	r3,-5(fp)
    6f30:	e0bffb17 	ldw	r2,-20(fp)
    6f34:	10c00005 	stb	r3,0(r2)

	return ret;
    6f38:	e0bfff17 	ldw	r2,-4(fp)
}
    6f3c:	e037883a 	mov	sp,fp
    6f40:	dfc00117 	ldw	ra,4(sp)
    6f44:	df000017 	ldw	fp,0(sp)
    6f48:	dec00204 	addi	sp,sp,8
    6f4c:	f800283a 	ret

00006f50 <ad9680_spi_write>:
 * @brief ad9680_spi_write
 *******************************************************************************/
int32_t ad9680_spi_write(struct ad9680_dev *dev,
			 uint16_t reg_addr,
			 uint8_t reg_data)
{
    6f50:	defff904 	addi	sp,sp,-28
    6f54:	dfc00615 	stw	ra,24(sp)
    6f58:	df000515 	stw	fp,20(sp)
    6f5c:	df000504 	addi	fp,sp,20
    6f60:	e13ffd15 	stw	r4,-12(fp)
    6f64:	2805883a 	mov	r2,r5
    6f68:	3007883a 	mov	r3,r6
    6f6c:	e0bffc0d 	sth	r2,-16(fp)
    6f70:	1805883a 	mov	r2,r3
    6f74:	e0bffb05 	stb	r2,-20(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = reg_addr >> 8;
    6f78:	e0bffc0b 	ldhu	r2,-16(fp)
    6f7c:	1004d23a 	srli	r2,r2,8
    6f80:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
    6f84:	e0bffc0b 	ldhu	r2,-16(fp)
    6f88:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = reg_data;
    6f8c:	e0bffb03 	ldbu	r2,-20(fp)
    6f90:	e0bffec5 	stb	r2,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
    6f94:	e0bffd17 	ldw	r2,-12(fp)
    6f98:	10800017 	ldw	r2,0(r2)
    6f9c:	e0fffe44 	addi	r3,fp,-7
    6fa0:	018000c4 	movi	r6,3
    6fa4:	180b883a 	mov	r5,r3
    6fa8:	1009883a 	mov	r4,r2
    6fac:	000bfc40 	call	bfc4 <spi_write_and_read>
    6fb0:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);

	return ret;
    6fb4:	e0bfff17 	ldw	r2,-4(fp)
}
    6fb8:	e037883a 	mov	sp,fp
    6fbc:	dfc00117 	ldw	ra,4(sp)
    6fc0:	df000017 	ldw	fp,0(sp)
    6fc4:	dec00204 	addi	sp,sp,8
    6fc8:	f800283a 	ret

00006fcc <ad9680_check_pdwn>:

int32_t ad9680_check_pdwn(struct ad9680_dev *dev)
{
    6fcc:	defffc04 	addi	sp,sp,-16
    6fd0:	dfc00315 	stw	ra,12(sp)
    6fd4:	df000215 	stw	fp,8(sp)
    6fd8:	df000204 	addi	fp,sp,8
    6fdc:	e13ffe15 	stw	r4,-8(fp)
   uint8_t regdata;

   ad9680_spi_read(dev,
    6fe0:	e0bfffc4 	addi	r2,fp,-1
    6fe4:	100d883a 	mov	r6,r2
    6fe8:	01401004 	movi	r5,64
    6fec:	e13ffe17 	ldw	r4,-8(fp)
    6ff0:	0006ec80 	call	6ec8 <ad9680_spi_read>
         AD9680_REG_PDWN_STBY_CTRL,
         &regdata);

   ad9680_spi_read(dev,
    6ff4:	e0bfffc4 	addi	r2,fp,-1
    6ff8:	100d883a 	mov	r6,r2
    6ffc:	01400fc4 	movi	r5,63
    7000:	e13ffe17 	ldw	r4,-8(fp)
    7004:	0006ec80 	call	6ec8 <ad9680_spi_read>
         AD9680_REG_PDWN_STBY,
         &regdata);

   regdata |= 0x80;
    7008:	e0ffffc3 	ldbu	r3,-1(fp)
    700c:	00bfe004 	movi	r2,-128
    7010:	1884b03a 	or	r2,r3,r2
    7014:	e0bfffc5 	stb	r2,-1(fp)

   ad9680_spi_write(dev,
    7018:	e0bfffc3 	ldbu	r2,-1(fp)
    701c:	10803fcc 	andi	r2,r2,255
    7020:	100d883a 	mov	r6,r2
    7024:	01400fc4 	movi	r5,63
    7028:	e13ffe17 	ldw	r4,-8(fp)
    702c:	0006f500 	call	6f50 <ad9680_spi_write>
         AD9680_REG_PDWN_STBY,
         regdata);

   ad9680_spi_read(dev,
    7030:	e0bfffc4 	addi	r2,fp,-1
    7034:	100d883a 	mov	r6,r2
    7038:	01401004 	movi	r5,64
    703c:	e13ffe17 	ldw	r4,-8(fp)
    7040:	0006ec80 	call	6ec8 <ad9680_spi_read>
         AD9680_REG_PDWN_STBY_CTRL,
         &regdata);

   regdata |= 0x40;
    7044:	e0bfffc3 	ldbu	r2,-1(fp)
    7048:	10801014 	ori	r2,r2,64
    704c:	e0bfffc5 	stb	r2,-1(fp)

   ad9680_spi_write(dev,
    7050:	e0bfffc3 	ldbu	r2,-1(fp)
    7054:	10803fcc 	andi	r2,r2,255
    7058:	100d883a 	mov	r6,r2
    705c:	01400fc4 	movi	r5,63
    7060:	e13ffe17 	ldw	r4,-8(fp)
    7064:	0006f500 	call	6f50 <ad9680_spi_write>
         AD9680_REG_PDWN_STBY,
         regdata);

   return 1;
    7068:	00800044 	movi	r2,1
}
    706c:	e037883a 	mov	sp,fp
    7070:	dfc00117 	ldw	ra,4(sp)
    7074:	df000017 	ldw	fp,0(sp)
    7078:	dec00204 	addi	sp,sp,8
    707c:	f800283a 	ret

00007080 <ad9680_test>:
/***************************************************************************//**
 * @brief ad9680_setup
 *******************************************************************************/
int32_t ad9680_test(struct ad9680_dev *dev,
		    uint32_t test_mode)
{
    7080:	defffc04 	addi	sp,sp,-16
    7084:	dfc00315 	stw	ra,12(sp)
    7088:	df000215 	stw	fp,8(sp)
    708c:	df000204 	addi	fp,sp,8
    7090:	e13fff15 	stw	r4,-4(fp)
    7094:	e17ffe15 	stw	r5,-8(fp)
	ad9680_spi_write(dev,
    7098:	e0bffe17 	ldw	r2,-8(fp)
    709c:	10803fcc 	andi	r2,r2,255
    70a0:	100d883a 	mov	r6,r2
    70a4:	01415404 	movi	r5,1360
    70a8:	e13fff17 	ldw	r4,-4(fp)
    70ac:	0006f500 	call	6f50 <ad9680_spi_write>
			 AD9680_REG_ADC_TEST_MODE,
			 test_mode);

	// R. Gisko => reset PN23
	if(test_mode == AD9680_TEST_PN9)
    70b0:	e0bffe17 	ldw	r2,-8(fp)
    70b4:	10800198 	cmpnei	r2,r2,6
    70b8:	1000071e 	bne	r2,zero,70d8 <ad9680_test+0x58>
	{
		ad9680_spi_write(dev, AD9680_REG_ADC_TEST_MODE, test_mode | (1 << 5));
    70bc:	e0bffe17 	ldw	r2,-8(fp)
    70c0:	10800814 	ori	r2,r2,32
    70c4:	10803fcc 	andi	r2,r2,255
    70c8:	100d883a 	mov	r6,r2
    70cc:	01415404 	movi	r5,1360
    70d0:	e13fff17 	ldw	r4,-4(fp)
    70d4:	0006f500 	call	6f50 <ad9680_spi_write>
	}

	// R. Gisko => reset PN9
	if(test_mode == AD9680_TEST_PN23)
    70d8:	e0bffe17 	ldw	r2,-8(fp)
    70dc:	10800158 	cmpnei	r2,r2,5
    70e0:	1000071e 	bne	r2,zero,7100 <ad9680_test+0x80>
	{
		ad9680_spi_write(dev, AD9680_REG_ADC_TEST_MODE, test_mode | (1 << 6));
    70e4:	e0bffe17 	ldw	r2,-8(fp)
    70e8:	10801014 	ori	r2,r2,64
    70ec:	10803fcc 	andi	r2,r2,255
    70f0:	100d883a 	mov	r6,r2
    70f4:	01415404 	movi	r5,1360
    70f8:	e13fff17 	ldw	r4,-4(fp)
    70fc:	0006f500 	call	6f50 <ad9680_spi_write>
	}

	if (test_mode == AD9680_TEST_OFF)
    7100:	e0bffe17 	ldw	r2,-8(fp)
    7104:	1000051e 	bne	r2,zero,711c <ad9680_test+0x9c>
		ad9680_spi_write(dev,
    7108:	01800044 	movi	r6,1
    710c:	01415844 	movi	r5,1377
    7110:	e13fff17 	ldw	r4,-4(fp)
    7114:	0006f500 	call	6f50 <ad9680_spi_write>
    7118:	00000406 	br	712c <ad9680_test+0xac>
				 AD9680_REG_OUTPUT_MODE,
				 AD9680_FORMAT_2S_COMPLEMENT);
	else
		ad9680_spi_write(dev,
    711c:	000d883a 	mov	r6,zero
    7120:	01415844 	movi	r5,1377
    7124:	e13fff17 	ldw	r4,-4(fp)
    7128:	0006f500 	call	6f50 <ad9680_spi_write>
				 AD9680_REG_OUTPUT_MODE,
				 AD9680_FORMAT_OFFSET_BINARY);
	return(0);
    712c:	0005883a 	mov	r2,zero
}
    7130:	e037883a 	mov	sp,fp
    7134:	dfc00117 	ldw	ra,4(sp)
    7138:	df000017 	ldw	fp,0(sp)
    713c:	dec00204 	addi	sp,sp,8
    7140:	f800283a 	ret

00007144 <ad9680_setup>:

/***************************************************************************//**
 * @brief ad9680_setup
 *******************************************************************************/
int32_t ad9680_setup(struct ad9680_dev **device, const struct ad9680_init_param *init_param)
{
    7144:	defff804 	addi	sp,sp,-32
    7148:	dfc00715 	stw	ra,28(sp)
    714c:	df000615 	stw	fp,24(sp)
    7150:	df000604 	addi	fp,sp,24
    7154:	e13ffb15 	stw	r4,-20(fp)
    7158:	e17ffa15 	stw	r5,-24(fp)
   uint8_t m_config;
   uint8_t f_config;
   int32_t ret;
   struct ad9680_dev *dev;

   ret = 0;
    715c:	e03fff15 	stw	zero,-4(fp)

   dev = (struct ad9680_dev *)malloc(sizeof(*dev));
    7160:	01000104 	movi	r4,4
    7164:	001525c0 	call	1525c <malloc>
    7168:	e0bffe15 	stw	r2,-8(fp)
   if (!dev)
    716c:	e0bffe17 	ldw	r2,-8(fp)
    7170:	1000021e 	bne	r2,zero,717c <ad9680_setup+0x38>
      return -1;
    7174:	00bfffc4 	movi	r2,-1
    7178:	00007c06 	br	736c <ad9680_setup+0x228>

   /* SPI */
   ret = spi_init(&dev->spi_desc, &init_param->spi_init);
    717c:	e0bffe17 	ldw	r2,-8(fp)
    7180:	e0fffa17 	ldw	r3,-24(fp)
    7184:	180b883a 	mov	r5,r3
    7188:	1009883a 	mov	r4,r2
    718c:	000becc0 	call	becc <spi_init>
    7190:	e0bfff15 	stw	r2,-4(fp)

   ad9680_spi_read(dev, AD9680_REG_CHIP_ID_LOW, &chip_id);
    7194:	e0bffd44 	addi	r2,fp,-11
    7198:	100d883a 	mov	r6,r2
    719c:	01400104 	movi	r5,4
    71a0:	e13ffe17 	ldw	r4,-8(fp)
    71a4:	0006ec80 	call	6ec8 <ad9680_spi_read>
   if(chip_id != AD9680_CHIP_ID)
    71a8:	e0bffd43 	ldbu	r2,-11(fp)
    71ac:	10803fcc 	andi	r2,r2,255
    71b0:	10803160 	cmpeqi	r2,r2,197
    71b4:	1000081e 	bne	r2,zero,71d8 <ad9680_setup+0x94>
   {
      printf("AD9680: Invalid CHIP ID (0x%x).\n", chip_id);
    71b8:	e0bffd43 	ldbu	r2,-11(fp)
    71bc:	10803fcc 	andi	r2,r2,255
    71c0:	100b883a 	mov	r5,r2
    71c4:	010000f4 	movhi	r4,3
    71c8:	2106b904 	addi	r4,r4,6884
    71cc:	001634c0 	call	1634c <printf>
      return -1;
    71d0:	00bfffc4 	movi	r2,-1
    71d4:	00006506 	br	736c <ad9680_setup+0x228>
   }

   ad9680_spi_read(dev,  AD9680_REG_CHIP_GRADE, &chip_grade);
    71d8:	e0bffdc4 	addi	r2,fp,-9
    71dc:	100d883a 	mov	r6,r2
    71e0:	01400184 	movi	r5,6
    71e4:	e13ffe17 	ldw	r4,-8(fp)
    71e8:	0006ec80 	call	6ec8 <ad9680_spi_read>
   ad9680_spi_read(dev,  AD9680_REG_INPUT_TERMINATION, &input_termination);
    71ec:	e0bffd84 	addi	r2,fp,-10
    71f0:	100d883a 	mov	r6,r2
    71f4:	01400584 	movi	r5,22
    71f8:	e13ffe17 	ldw	r4,-8(fp)
    71fc:	0006ec80 	call	6ec8 <ad9680_spi_read>
   ad9680_spi_read(dev,  AD9680_REG_CLOCK_STATUS, &clock_status);
    7200:	e0bffd04 	addi	r2,fp,-12
    7204:	100d883a 	mov	r6,r2
    7208:	01404704 	movi	r5,284
    720c:	e13ffe17 	ldw	r4,-8(fp)
    7210:	0006ec80 	call	6ec8 <ad9680_spi_read>

   ad9680_spi_write(dev, AD9680_REG_INTERFACE_CONF_A, 0x81);	      // RESET
    7214:	01802044 	movi	r6,129
    7218:	000b883a 	mov	r5,zero
    721c:	e13ffe17 	ldw	r4,-8(fp)
    7220:	0006f500 	call	6f50 <ad9680_spi_write>

   mdelay(250);
    7224:	01000134 	movhi	r4,4
    7228:	21342404 	addi	r4,r4,-12144
    722c:	0025e400 	call	25e40 <usleep>

   ad9680_spi_write(dev, AD9680_REG_LINK_CONTROL, 0x15);	            // disable link, ilas enable
    7230:	01800544 	movi	r6,21
    7234:	01415c44 	movi	r5,1393
    7238:	e13ffe17 	ldw	r4,-8(fp)
    723c:	0006f500 	call	6f50 <ad9680_spi_write>
   ad9680_spi_write(dev, AD9680_REG_JESD204B_MF_CTRL, 0x1f);	      // mf-frame-count => K=32
    7240:	018007c4 	movi	r6,31
    7244:	01416344 	movi	r5,1421
    7248:	e13ffe17 	ldw	r4,-8(fp)
    724c:	0006f500 	call	6f50 <ad9680_spi_write>
   ad9680_spi_write(dev, AD9680_REG_JESD204B_CSN_CONFIG, 0x2d);	   // 14-bit
    7250:	01800b44 	movi	r6,45
    7254:	014163c4 	movi	r5,1423
    7258:	e13ffe17 	ldw	r4,-8(fp)
    725c:	0006f500 	call	6f50 <ad9680_spi_write>
   ad9680_spi_write(dev, AD9680_REG_JESD204B_SUBCLASS_CONFIG, 0x2f);	// subclass-1, N'=16
    7260:	01800bc4 	movi	r6,47
    7264:	01416404 	movi	r5,1424
    7268:	e13ffe17 	ldw	r4,-8(fp)
    726c:	0006f500 	call	6f50 <ad9680_spi_write>
   ad9680_spi_write(dev, AD9680_REG_JESD204B_QUICK_CONFIG, 0x88);	   // m=2, l=4, f= 1
    7270:	01802204 	movi	r6,136
    7274:	01415c04 	movi	r5,1392
    7278:	e13ffe17 	ldw	r4,-8(fp)
    727c:	0006f500 	call	6f50 <ad9680_spi_write>

   if (init_param->lane_rate_kbps < 6250000)
    7280:	e0bffa17 	ldw	r2,-24(fp)
    7284:	10c00417 	ldw	r3,16(r2)
    7288:	008017f4 	movhi	r2,95
    728c:	109783c4 	addi	r2,r2,24079
    7290:	10c00536 	bltu	r2,r3,72a8 <ad9680_setup+0x164>
   {
      ad9680_spi_write(dev, AD9680_REG_JESD204B_LANE_RATE_CTRL, 0x10);	// low line rate mode must be enabled
    7294:	01800404 	movi	r6,16
    7298:	01415b84 	movi	r5,1390
    729c:	e13ffe17 	ldw	r4,-8(fp)
    72a0:	0006f500 	call	6f50 <ad9680_spi_write>
    72a4:	00000406 	br	72b8 <ad9680_setup+0x174>
   }
   else
   {
      ad9680_spi_write(dev, AD9680_REG_JESD204B_LANE_RATE_CTRL, 0x00);	// low line rate mode must be disabled
    72a8:	000d883a 	mov	r6,zero
    72ac:	01415b84 	movi	r5,1390
    72b0:	e13ffe17 	ldw	r4,-8(fp)
    72b4:	0006f500 	call	6f50 <ad9680_spi_write>
   }

   // R. Gisko
   ad9680_spi_read(dev, AD9680_REG_JESD204B_SCRL_PARAMETERS, &scrl_parameters);
    72b8:	e0bffc84 	addi	r2,fp,-14
    72bc:	100d883a 	mov	r6,r2
    72c0:	014162c4 	movi	r5,1419
    72c4:	e13ffe17 	ldw	r4,-8(fp)
    72c8:	0006ec80 	call	6ec8 <ad9680_spi_read>
   ad9680_spi_read(dev, AD9680_REG_JESD204B_F_CONFIG, &f_config);
    72cc:	e0bffc04 	addi	r2,fp,-16
    72d0:	100d883a 	mov	r6,r2
    72d4:	01416304 	movi	r5,1420
    72d8:	e13ffe17 	ldw	r4,-8(fp)
    72dc:	0006ec80 	call	6ec8 <ad9680_spi_read>
   ad9680_spi_read(dev, AD9680_REG_JESD204B_MF_CTRL, &m_config);
    72e0:	e0bffc44 	addi	r2,fp,-15
    72e4:	100d883a 	mov	r6,r2
    72e8:	01416344 	movi	r5,1421
    72ec:	e13ffe17 	ldw	r4,-8(fp)
    72f0:	0006ec80 	call	6ec8 <ad9680_spi_read>
   ad9680_spi_write(dev, AD9680_REG_JESD204B_LANE_SERD_DRIVE_ADJUST, 0x0f); // 425mV
    72f4:	018003c4 	movi	r6,15
    72f8:	01416fc4 	movi	r5,1471
    72fc:	e13ffe17 	ldw	r4,-8(fp)
    7300:	0006f500 	call	6f50 <ad9680_spi_write>



   ad9680_spi_write(dev, AD9680_REG_LINK_CONTROL, 0x14);	// link enable
    7304:	01800504 	movi	r6,20
    7308:	01415c44 	movi	r5,1393
    730c:	e13ffe17 	ldw	r4,-8(fp)
    7310:	0006f500 	call	6f50 <ad9680_spi_write>
   mdelay(250);
    7314:	01000134 	movhi	r4,4
    7318:	21342404 	addi	r4,r4,-12144
    731c:	0025e400 	call	25e40 <usleep>




   ad9680_spi_read(dev, AD9680_REG_JESD204B_PLL_LOCK_STATUS, &pll_stat);
    7320:	e0bffcc4 	addi	r2,fp,-13
    7324:	100d883a 	mov	r6,r2
    7328:	01415bc4 	movi	r5,1391
    732c:	e13ffe17 	ldw	r4,-8(fp)
    7330:	0006ec80 	call	6ec8 <ad9680_spi_read>
   if ((pll_stat & 0x80) != 0x80) {
    7334:	e0bffcc3 	ldbu	r2,-13(fp)
    7338:	10803fcc 	andi	r2,r2,255
    733c:	1080201c 	xori	r2,r2,128
    7340:	10bfe004 	addi	r2,r2,-128
    7344:	10000516 	blt	r2,zero,735c <ad9680_setup+0x218>
      printf("AD9680: PLL is NOT locked!\n");
    7348:	010000f4 	movhi	r4,3
    734c:	2106c204 	addi	r4,r4,6920
    7350:	00164700 	call	16470 <puts>
      ret = -1;
    7354:	00bfffc4 	movi	r2,-1
    7358:	e0bfff15 	stw	r2,-4(fp)
   }

   *device = dev;
    735c:	e0bffb17 	ldw	r2,-20(fp)
    7360:	e0fffe17 	ldw	r3,-8(fp)
    7364:	10c00015 	stw	r3,0(r2)

   return ret;
    7368:	e0bfff17 	ldw	r2,-4(fp)
}
    736c:	e037883a 	mov	sp,fp
    7370:	dfc00117 	ldw	ra,4(sp)
    7374:	df000017 	ldw	fp,0(sp)
    7378:	dec00204 	addi	sp,sp,8
    737c:	f800283a 	ret

00007380 <ad9680_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9680_remove(struct ad9680_dev *dev)
{
    7380:	defffc04 	addi	sp,sp,-16
    7384:	dfc00315 	stw	ra,12(sp)
    7388:	df000215 	stw	fp,8(sp)
    738c:	df000204 	addi	fp,sp,8
    7390:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
    7394:	e0bffe17 	ldw	r2,-8(fp)
    7398:	10800017 	ldw	r2,0(r2)
    739c:	1009883a 	mov	r4,r2
    73a0:	000bf900 	call	bf90 <spi_remove>
    73a4:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
    73a8:	e13ffe17 	ldw	r4,-8(fp)
    73ac:	001526c0 	call	1526c <free>

	return ret;
    73b0:	e0bfff17 	ldw	r2,-4(fp)
}
    73b4:	e037883a 	mov	sp,fp
    73b8:	dfc00117 	ldw	ra,4(sp)
    73bc:	df000017 	ldw	fp,0(sp)
    73c0:	dec00204 	addi	sp,sp,8
    73c4:	f800283a 	ret

000073c8 <adc_read>:
 * @brief adc_read
 *******************************************************************************/
int32_t adc_read(adc_core core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    73c8:	defffb04 	addi	sp,sp,-20
    73cc:	df000415 	stw	fp,16(sp)
    73d0:	df000404 	addi	fp,sp,16
    73d4:	e13ffe15 	stw	r4,-8(fp)
    73d8:	e17fff15 	stw	r5,-4(fp)
    73dc:	e1bffd15 	stw	r6,-12(fp)
    73e0:	e1fffc15 	stw	r7,-16(fp)
	*reg_data = ad_reg_read((core.base_address + reg_addr));
    73e4:	e0fffe17 	ldw	r3,-8(fp)
    73e8:	e0bffd17 	ldw	r2,-12(fp)
    73ec:	1885883a 	add	r2,r3,r2
    73f0:	10800037 	ldwio	r2,0(r2)
    73f4:	1007883a 	mov	r3,r2
    73f8:	e0bffc17 	ldw	r2,-16(fp)
    73fc:	10c00015 	stw	r3,0(r2)

	if (*reg_data == 0xDEADDEAD) {
    7400:	e0bffc17 	ldw	r2,-16(fp)
    7404:	10c00017 	ldw	r3,0(r2)
    7408:	00b7abb4 	movhi	r2,57006
    740c:	10b7ab44 	addi	r2,r2,-8531
    7410:	1880021e 	bne	r3,r2,741c <adc_read+0x54>
		#ifdef DEBUG
			ad_printf("adc_read failed for register: %x", reg_addr);
		#endif
		return -1;
    7414:	00bfffc4 	movi	r2,-1
    7418:	00000106 	br	7420 <adc_read+0x58>
	} else {
		return 0;
    741c:	0005883a 	mov	r2,zero
	}
}
    7420:	e037883a 	mov	sp,fp
    7424:	df000017 	ldw	fp,0(sp)
    7428:	dec00104 	addi	sp,sp,4
    742c:	f800283a 	ret

00007430 <adc_write>:
 * @brief adc_write
 *******************************************************************************/
int32_t adc_write(adc_core core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    7430:	defffb04 	addi	sp,sp,-20
    7434:	df000415 	stw	fp,16(sp)
    7438:	df000404 	addi	fp,sp,16
    743c:	e13ffe15 	stw	r4,-8(fp)
    7440:	e17fff15 	stw	r5,-4(fp)
    7444:	e1bffd15 	stw	r6,-12(fp)
    7448:	e1fffc15 	stw	r7,-16(fp)
	ad_reg_write((core.base_address + reg_addr), reg_data);
    744c:	e0fffe17 	ldw	r3,-8(fp)
    7450:	e0bffd17 	ldw	r2,-12(fp)
    7454:	1885883a 	add	r2,r3,r2
    7458:	1007883a 	mov	r3,r2
    745c:	e0bffc17 	ldw	r2,-16(fp)
    7460:	18800035 	stwio	r2,0(r3)
		#ifdef DEBUG
			uint32_t reg_data_r;
			return adc_read(core, reg_addr, &reg_data_r);
		#endif

	return 0;
    7464:	0005883a 	mov	r2,zero
}
    7468:	e037883a 	mov	sp,fp
    746c:	df000017 	ldw	fp,0(sp)
    7470:	dec00104 	addi	sp,sp,4
    7474:	f800283a 	ret

00007478 <adc_setup>:

/***************************************************************************//**
 * @brief adc_setup
 *******************************************************************************/
int32_t adc_setup(adc_core core)
{
    7478:	defff904 	addi	sp,sp,-28
    747c:	dfc00615 	stw	ra,24(sp)
    7480:	df000515 	stw	fp,20(sp)
    7484:	df000504 	addi	fp,sp,20
    7488:	e13ffb15 	stw	r4,-20(fp)
    748c:	e17ffc15 	stw	r5,-16(fp)
	uint8_t	 index;
	uint32_t reg_data;
	uint32_t adc_clock;

	adc_read(core, ADC_REG_ID, &reg_data);
    7490:	e0bffe04 	addi	r2,fp,-8
    7494:	100f883a 	mov	r7,r2
    7498:	01800104 	movi	r6,4
    749c:	e13ffb17 	ldw	r4,-20(fp)
    74a0:	e17ffc17 	ldw	r5,-16(fp)
    74a4:	00073c80 	call	73c8 <adc_read>
	if (reg_data)
    74a8:	e0bffe17 	ldw	r2,-8(fp)
    74ac:	10000326 	beq	r2,zero,74bc <adc_setup+0x44>
		core.master = 1;
    74b0:	00800044 	movi	r2,1
    74b4:	e0bffc05 	stb	r2,-16(fp)
    74b8:	00000106 	br	74c0 <adc_setup+0x48>
	else
		core.master = 0;
    74bc:	e03ffc05 	stb	zero,-16(fp)

	adc_write(core, ADC_REG_RSTN, 0);
    74c0:	000f883a 	mov	r7,zero
    74c4:	01801004 	movi	r6,64
    74c8:	e13ffb17 	ldw	r4,-20(fp)
    74cc:	e17ffc17 	ldw	r5,-16(fp)
    74d0:	00074300 	call	7430 <adc_write>
	adc_write(core, ADC_REG_RSTN, ADC_MMCM_RSTN | ADC_RSTN);
    74d4:	01c000c4 	movi	r7,3
    74d8:	01801004 	movi	r6,64
    74dc:	e13ffb17 	ldw	r4,-20(fp)
    74e0:	e17ffc17 	ldw	r5,-16(fp)
    74e4:	00074300 	call	7430 <adc_write>

	for(index = 0; index < core.no_of_channels; index++) {
    74e8:	e03fffc5 	stb	zero,-1(fp)
    74ec:	00000b06 	br	751c <adc_setup+0xa4>
		adc_write(core, ADC_REG_CHAN_CNTRL(index), ADC_FORMAT_SIGNEXT |
    74f0:	e0bfffc3 	ldbu	r2,-1(fp)
    74f4:	10800404 	addi	r2,r2,16
    74f8:	100491ba 	slli	r2,r2,6
    74fc:	01c01444 	movi	r7,81
    7500:	100d883a 	mov	r6,r2
    7504:	e13ffb17 	ldw	r4,-20(fp)
    7508:	e17ffc17 	ldw	r5,-16(fp)
    750c:	00074300 	call	7430 <adc_write>
	for(index = 0; index < core.no_of_channels; index++) {
    7510:	e0bfffc3 	ldbu	r2,-1(fp)
    7514:	10800044 	addi	r2,r2,1
    7518:	e0bfffc5 	stb	r2,-1(fp)
    751c:	e0bffc43 	ldbu	r2,-15(fp)
    7520:	e0ffffc3 	ldbu	r3,-1(fp)
    7524:	10803fcc 	andi	r2,r2,255
    7528:	18bff136 	bltu	r3,r2,74f0 <__alt_mem_mcu_subsystem_ram_0+0x77fe74f0>
							   ADC_FORMAT_ENABLE |
							   ADC_ENABLE);
	}

	mdelay(100);
    752c:	010000b4 	movhi	r4,2
    7530:	2121a804 	addi	r4,r4,-31072
    7534:	0025e400 	call	25e40 <usleep>

	adc_read(core, ADC_REG_STATUS, &reg_data);
    7538:	e0bffe04 	addi	r2,fp,-8
    753c:	100f883a 	mov	r7,r2
    7540:	01801704 	movi	r6,92
    7544:	e13ffb17 	ldw	r4,-20(fp)
    7548:	e17ffc17 	ldw	r5,-16(fp)
    754c:	00073c80 	call	73c8 <adc_read>
	if(reg_data == 0x0) {
    7550:	e0bffe17 	ldw	r2,-8(fp)
    7554:	1000071e 	bne	r2,zero,7574 <adc_setup+0xfc>
		ad_printf("%s adc core Status errors.\n", __func__);
    7558:	014000f4 	movhi	r5,3
    755c:	29471304 	addi	r5,r5,7244
    7560:	010000f4 	movhi	r4,3
    7564:	2106c904 	addi	r4,r4,6948
    7568:	001634c0 	call	1634c <printf>
		return -1;
    756c:	00bfffc4 	movi	r2,-1
    7570:	00001d06 	br	75e8 <adc_setup+0x170>
	}

	adc_read(core, ADC_REG_CLK_FREQ, &adc_clock);
    7574:	e0bffd04 	addi	r2,fp,-12
    7578:	100f883a 	mov	r7,r2
    757c:	01801504 	movi	r6,84
    7580:	e13ffb17 	ldw	r4,-20(fp)
    7584:	e17ffc17 	ldw	r5,-16(fp)
    7588:	00073c80 	call	73c8 <adc_read>
	adc_read(core, ADC_REG_CLK_RATIO, &reg_data);
    758c:	e0bffe04 	addi	r2,fp,-8
    7590:	100f883a 	mov	r7,r2
    7594:	01801604 	movi	r6,88
    7598:	e13ffb17 	ldw	r4,-20(fp)
    759c:	e17ffc17 	ldw	r5,-16(fp)
    75a0:	00073c80 	call	73c8 <adc_read>
	adc_clock = (adc_clock * reg_data * 125) + 0x7fff;
    75a4:	e0fffd17 	ldw	r3,-12(fp)
    75a8:	e0bffe17 	ldw	r2,-8(fp)
    75ac:	1885383a 	mul	r2,r3,r2
    75b0:	10801f64 	muli	r2,r2,125
    75b4:	109fffc4 	addi	r2,r2,32767
    75b8:	e0bffd15 	stw	r2,-12(fp)
	adc_clock = adc_clock >> 16;
    75bc:	e0bffd17 	ldw	r2,-12(fp)
    75c0:	1004d43a 	srli	r2,r2,16
    75c4:	e0bffd15 	stw	r2,-12(fp)

	ad_printf("%s adc core initialized (%d MHz).\n", __func__, adc_clock);
    75c8:	e0bffd17 	ldw	r2,-12(fp)
    75cc:	100d883a 	mov	r6,r2
    75d0:	014000f4 	movhi	r5,3
    75d4:	29471304 	addi	r5,r5,7244
    75d8:	010000f4 	movhi	r4,3
    75dc:	2106d004 	addi	r4,r4,6976
    75e0:	001634c0 	call	1634c <printf>

	return 0;
    75e4:	0005883a 	mov	r2,zero
}
    75e8:	e037883a 	mov	sp,fp
    75ec:	dfc00117 	ldw	ra,4(sp)
    75f0:	df000017 	ldw	fp,0(sp)
    75f4:	dec00204 	addi	sp,sp,8
    75f8:	f800283a 	ret

000075fc <adc_set_delay>:
 *		and the output mode must be two's complement

 * @return 0.
*******************************************************************************/
uint32_t adc_set_delay(adc_core core, uint32_t no_of_lanes, uint32_t delay)
{
    75fc:	defff704 	addi	sp,sp,-36
    7600:	dfc00815 	stw	ra,32(sp)
    7604:	df000715 	stw	fp,28(sp)
    7608:	df000704 	addi	fp,sp,28
    760c:	e13ffb15 	stw	r4,-20(fp)
    7610:	e17ffc15 	stw	r5,-16(fp)
    7614:	e1bffa15 	stw	r6,-24(fp)
    7618:	e1fff915 	stw	r7,-28(fp)
    uint32_t i;
    uint32_t rdata;
    uint32_t pcore_version;

    adc_read(core, 0x0, &pcore_version);
    761c:	e0bffd04 	addi	r2,fp,-12
    7620:	100f883a 	mov	r7,r2
    7624:	000d883a 	mov	r6,zero
    7628:	e13ffb17 	ldw	r4,-20(fp)
    762c:	e17ffc17 	ldw	r5,-16(fp)
    7630:	00073c80 	call	73c8 <adc_read>
    pcore_version >>= 16;
    7634:	e0bffd17 	ldw	r2,-12(fp)
    7638:	1004d43a 	srli	r2,r2,16
    763c:	e0bffd15 	stw	r2,-12(fp)
    if (pcore_version < 9) {
    7640:	e0bffd17 	ldw	r2,-12(fp)
    7644:	10800268 	cmpgeui	r2,r2,9
    7648:	10000a1e 	bne	r2,zero,7674 <adc_set_delay+0x78>
			    ad_printf(" pcore_version is : %d\n\r", pcore_version);
    764c:	e0bffd17 	ldw	r2,-12(fp)
    7650:	100b883a 	mov	r5,r2
    7654:	010000f4 	movhi	r4,3
    7658:	2106d904 	addi	r4,r4,7012
    765c:	001634c0 	call	1634c <printf>
			    ad_printf(" DRIVER DOES NOT SUPPORT PCORE VERSIONS OLDER THAN 10 !");
    7660:	010000f4 	movhi	r4,3
    7664:	2106e004 	addi	r4,r4,7040
    7668:	001634c0 	call	1634c <printf>
			    return -1;
    766c:	00bfffc4 	movi	r2,-1
    7670:	00002406 	br	7704 <adc_set_delay+0x108>
    } else {
		for (i = 0; i < no_of_lanes; i++) {
    7674:	e03fff15 	stw	zero,-4(fp)
    7678:	00001e06 	br	76f4 <adc_set_delay+0xf8>
			adc_write(core ,((0x200 + i)*4), delay);
    767c:	e0bfff17 	ldw	r2,-4(fp)
    7680:	10808004 	addi	r2,r2,512
    7684:	100490ba 	slli	r2,r2,2
    7688:	e1fff917 	ldw	r7,-28(fp)
    768c:	100d883a 	mov	r6,r2
    7690:	e13ffb17 	ldw	r4,-20(fp)
    7694:	e17ffc17 	ldw	r5,-16(fp)
    7698:	00074300 	call	7430 <adc_write>
			adc_read(core ,((0x200 + i)*4), &rdata);
    769c:	e0bfff17 	ldw	r2,-4(fp)
    76a0:	10808004 	addi	r2,r2,512
    76a4:	100490ba 	slli	r2,r2,2
    76a8:	e0fffe04 	addi	r3,fp,-8
    76ac:	180f883a 	mov	r7,r3
    76b0:	100d883a 	mov	r6,r2
    76b4:	e13ffb17 	ldw	r4,-20(fp)
    76b8:	e17ffc17 	ldw	r5,-16(fp)
    76bc:	00073c80 	call	73c8 <adc_read>
			if (rdata != delay) {
    76c0:	e0bffe17 	ldw	r2,-8(fp)
    76c4:	e0fff917 	ldw	r3,-28(fp)
    76c8:	18800726 	beq	r3,r2,76e8 <adc_set_delay+0xec>
				ad_printf("adc_delay_1: sel(%2d), rcv(%04x), exp(%04x)\n\r", i, rdata, delay);
    76cc:	e0bffe17 	ldw	r2,-8(fp)
    76d0:	e1fff917 	ldw	r7,-28(fp)
    76d4:	100d883a 	mov	r6,r2
    76d8:	e17fff17 	ldw	r5,-4(fp)
    76dc:	010000f4 	movhi	r4,3
    76e0:	2106ee04 	addi	r4,r4,7096
    76e4:	001634c0 	call	1634c <printf>
		for (i = 0; i < no_of_lanes; i++) {
    76e8:	e0bfff17 	ldw	r2,-4(fp)
    76ec:	10800044 	addi	r2,r2,1
    76f0:	e0bfff15 	stw	r2,-4(fp)
    76f4:	e0ffff17 	ldw	r3,-4(fp)
    76f8:	e0bffa17 	ldw	r2,-24(fp)
    76fc:	18bfdf36 	bltu	r3,r2,767c <__alt_mem_mcu_subsystem_ram_0+0x77fe767c>
			}
		}
    }

    return 0;
    7700:	0005883a 	mov	r2,zero
}
    7704:	e037883a 	mov	sp,fp
    7708:	dfc00117 	ldw	ra,4(sp)
    770c:	df000017 	ldw	fp,0(sp)
    7710:	dec00204 	addi	sp,sp,8
    7714:	f800283a 	ret

00007718 <adc_delay_calibrate>:
 *
*******************************************************************************/
uint32_t adc_delay_calibrate(adc_core core,
			uint32_t no_of_lanes,
			enum adc_pn_sel sel)
{
    7718:	deffe804 	addi	sp,sp,-96
    771c:	dfc01715 	stw	ra,92(sp)
    7720:	df001615 	stw	fp,88(sp)
    7724:	df001604 	addi	fp,sp,88
    7728:	e13fec15 	stw	r4,-80(fp)
    772c:	e17fed15 	stw	r5,-76(fp)
    7730:	e1bfeb15 	stw	r6,-84(fp)
    7734:	e1ffea15 	stw	r7,-88(fp)
	uint8_t err_field[32] = {0};
    7738:	e03ff515 	stw	zero,-44(fp)
    773c:	e03ff615 	stw	zero,-40(fp)
    7740:	e03ff715 	stw	zero,-36(fp)
    7744:	e03ff815 	stw	zero,-32(fp)
    7748:	e03ff915 	stw	zero,-28(fp)
    774c:	e03ffa15 	stw	zero,-24(fp)
    7750:	e03ffb15 	stw	zero,-20(fp)
    7754:	e03ffc15 	stw	zero,-16(fp)
	uint16_t valid_range[5] = {0};
    7758:	e03ff28d 	sth	zero,-54(fp)
    775c:	e03ff30d 	sth	zero,-52(fp)
    7760:	e03ff38d 	sth	zero,-50(fp)
    7764:	e03ff40d 	sth	zero,-48(fp)
    7768:	e03ff48d 	sth	zero,-46(fp)
	uint16_t invalid_range[5] = {0};
    776c:	e03ff015 	stw	zero,-64(fp)
    7770:	e03ff115 	stw	zero,-60(fp)
    7774:	e03ff20d 	sth	zero,-56(fp)
	uint16_t delay = 0;
    7778:	e03fff8d 	sth	zero,-2(fp)
	uint16_t start_valid_delay = 32;
    777c:	00800804 	movi	r2,32
    7780:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t start_invalid_delay = 32;
    7784:	00800804 	movi	r2,32
    7788:	e0bffe8d 	sth	r2,-6(fp)
	uint8_t interval = 0;
    778c:	e03ffe45 	stb	zero,-7(fp)
	uint8_t max_interval = 0;
    7790:	e03ffe05 	stb	zero,-8(fp)
	uint8_t max_valid_range = 0;
    7794:	e03ffdc5 	stb	zero,-9(fp)
	uint8_t cnt_valid[5] = {0};
    7798:	e03feec5 	stb	zero,-69(fp)
    779c:	e03fef05 	stb	zero,-68(fp)
    77a0:	e03fef45 	stb	zero,-67(fp)
    77a4:	e03fef85 	stb	zero,-66(fp)
    77a8:	e03fefc5 	stb	zero,-65(fp)
	uint8_t cnt_invalid = 0;
    77ac:	e03ffd85 	stb	zero,-10(fp)
	uint8_t val = 0;
    77b0:	e03ffd45 	stb	zero,-11(fp)
	uint8_t max_val = 32;
    77b4:	00800804 	movi	r2,32
    77b8:	e0bffd05 	stb	r2,-12(fp)

	for (delay = 0; delay < 32; delay++) {
    77bc:	e03fff8d 	sth	zero,-2(fp)
    77c0:	00001f06 	br	7840 <adc_delay_calibrate+0x128>
		adc_set_delay(core, no_of_lanes, delay);
    77c4:	e0bfff8b 	ldhu	r2,-2(fp)
    77c8:	100f883a 	mov	r7,r2
    77cc:	e1bfeb17 	ldw	r6,-84(fp)
    77d0:	e13fec17 	ldw	r4,-80(fp)
    77d4:	e17fed17 	ldw	r5,-76(fp)
    77d8:	00075fc0 	call	75fc <adc_set_delay>
		mdelay(20);
    77dc:	01138804 	movi	r4,20000
    77e0:	0025e400 	call	25e40 <usleep>
		if (adc_pn_mon(core, sel) == 0) {
    77e4:	e1bfea17 	ldw	r6,-88(fp)
    77e8:	e13fec17 	ldw	r4,-80(fp)
    77ec:	e17fed17 	ldw	r5,-76(fp)
    77f0:	0007b500 	call	7b50 <adc_pn_mon>
    77f4:	10000b1e 	bne	r2,zero,7824 <adc_delay_calibrate+0x10c>
			err_field[delay] = 0;
    77f8:	e0bfff8b 	ldhu	r2,-2(fp)
    77fc:	e085883a 	add	r2,fp,r2
    7800:	103ff505 	stb	zero,-44(r2)
			start_valid_delay = start_valid_delay == 32 ? delay : start_valid_delay;
    7804:	e0bfff0b 	ldhu	r2,-4(fp)
    7808:	10800818 	cmpnei	r2,r2,32
    780c:	1000021e 	bne	r2,zero,7818 <adc_delay_calibrate+0x100>
    7810:	e0bfff8b 	ldhu	r2,-2(fp)
    7814:	00000106 	br	781c <adc_delay_calibrate+0x104>
    7818:	e0bfff0b 	ldhu	r2,-4(fp)
    781c:	e0bfff0d 	sth	r2,-4(fp)
    7820:	00000406 	br	7834 <adc_delay_calibrate+0x11c>
		} else {
			err_field[delay] = 1;
    7824:	e0bfff8b 	ldhu	r2,-2(fp)
    7828:	e085883a 	add	r2,fp,r2
    782c:	00c00044 	movi	r3,1
    7830:	10fff505 	stb	r3,-44(r2)
	for (delay = 0; delay < 32; delay++) {
    7834:	e0bfff8b 	ldhu	r2,-2(fp)
    7838:	10800044 	addi	r2,r2,1
    783c:	e0bfff8d 	sth	r2,-2(fp)
    7840:	e0bfff8b 	ldhu	r2,-2(fp)
    7844:	10800830 	cmpltui	r2,r2,32
    7848:	103fde1e 	bne	r2,zero,77c4 <__alt_mem_mcu_subsystem_ram_0+0x77fe77c4>
		}
	}
	if (start_valid_delay > 31) {
    784c:	e0bfff0b 	ldhu	r2,-4(fp)
    7850:	10800830 	cmpltui	r2,r2,32
    7854:	10000c1e 	bne	r2,zero,7888 <adc_delay_calibrate+0x170>
		ad_printf("%s FAILED.\n", __func__);
    7858:	014000f4 	movhi	r5,3
    785c:	29471604 	addi	r5,r5,7256
    7860:	010000f4 	movhi	r4,3
    7864:	2106fa04 	addi	r4,r4,7144
    7868:	001634c0 	call	1634c <printf>
		adc_set_delay(core, no_of_lanes, 0);
    786c:	000f883a 	mov	r7,zero
    7870:	e1bfeb17 	ldw	r6,-84(fp)
    7874:	e13fec17 	ldw	r4,-80(fp)
    7878:	e17fed17 	ldw	r5,-76(fp)
    787c:	00075fc0 	call	75fc <adc_set_delay>
		return(1);
    7880:	00800044 	movi	r2,1
    7884:	00007f06 	br	7a84 <adc_delay_calibrate+0x36c>
	}

	start_valid_delay = 32;
    7888:	00800804 	movi	r2,32
    788c:	e0bfff0d 	sth	r2,-4(fp)
	start_invalid_delay = 32;
    7890:	00800804 	movi	r2,32
    7894:	e0bffe8d 	sth	r2,-6(fp)
	for (val = 0; val < max_val; val++) {
    7898:	e03ffd45 	stb	zero,-11(fp)
    789c:	00004606 	br	79b8 <adc_delay_calibrate+0x2a0>
		if (err_field[val] == 0) {
    78a0:	e0bffd43 	ldbu	r2,-11(fp)
    78a4:	e085883a 	add	r2,fp,r2
    78a8:	10bff503 	ldbu	r2,-44(r2)
    78ac:	10803fcc 	andi	r2,r2,255
    78b0:	1000151e 	bne	r2,zero,7908 <adc_delay_calibrate+0x1f0>
			if (start_valid_delay == 32) {
    78b4:	e0bfff0b 	ldhu	r2,-4(fp)
    78b8:	10800818 	cmpnei	r2,r2,32
    78bc:	1000021e 	bne	r2,zero,78c8 <adc_delay_calibrate+0x1b0>
				start_valid_delay = val;
    78c0:	e0bffd43 	ldbu	r2,-11(fp)
    78c4:	e0bfff0d 	sth	r2,-4(fp)
			}
			if (start_valid_delay != 32 && start_invalid_delay != 32 ) {
    78c8:	e0bfff0b 	ldhu	r2,-4(fp)
    78cc:	10800820 	cmpeqi	r2,r2,32
    78d0:	1000071e 	bne	r2,zero,78f0 <adc_delay_calibrate+0x1d8>
    78d4:	e0bffe8b 	ldhu	r2,-6(fp)
    78d8:	10800820 	cmpeqi	r2,r2,32
    78dc:	1000041e 	bne	r2,zero,78f0 <adc_delay_calibrate+0x1d8>
				start_valid_delay = 32;
    78e0:	00800804 	movi	r2,32
    78e4:	e0bfff0d 	sth	r2,-4(fp)
				start_invalid_delay = 32;
    78e8:	00800804 	movi	r2,32
    78ec:	e0bffe8d 	sth	r2,-6(fp)
			}
			cnt_valid[interval]++;
    78f0:	e0bffe43 	ldbu	r2,-7(fp)
    78f4:	e087883a 	add	r3,fp,r2
    78f8:	18ffeec3 	ldbu	r3,-69(r3)
    78fc:	18c00044 	addi	r3,r3,1
    7900:	e085883a 	add	r2,fp,r2
    7904:	10ffeec5 	stb	r3,-69(r2)
		}
		if((err_field[val] == 1) || (val == max_val - 1)) {
    7908:	e0bffd43 	ldbu	r2,-11(fp)
    790c:	e085883a 	add	r2,fp,r2
    7910:	10bff503 	ldbu	r2,-44(r2)
    7914:	10803fcc 	andi	r2,r2,255
    7918:	10800060 	cmpeqi	r2,r2,1
    791c:	1000041e 	bne	r2,zero,7930 <adc_delay_calibrate+0x218>
    7920:	e0fffd43 	ldbu	r3,-11(fp)
    7924:	e0bffd03 	ldbu	r2,-12(fp)
    7928:	10bfffc4 	addi	r2,r2,-1
    792c:	18801f1e 	bne	r3,r2,79ac <adc_delay_calibrate+0x294>
			if (start_invalid_delay == 32) {
    7930:	e0bffe8b 	ldhu	r2,-6(fp)
    7934:	10800818 	cmpnei	r2,r2,32
    7938:	1000021e 	bne	r2,zero,7944 <adc_delay_calibrate+0x22c>
				start_invalid_delay = val;
    793c:	e0bffd43 	ldbu	r2,-11(fp)
    7940:	e0bffe8d 	sth	r2,-6(fp)
			}
			if (start_valid_delay != 32 && start_invalid_delay != 32 ) {
    7944:	e0bfff0b 	ldhu	r2,-4(fp)
    7948:	10800820 	cmpeqi	r2,r2,32
    794c:	1000141e 	bne	r2,zero,79a0 <adc_delay_calibrate+0x288>
    7950:	e0bffe8b 	ldhu	r2,-6(fp)
    7954:	10800820 	cmpeqi	r2,r2,32
    7958:	1000111e 	bne	r2,zero,79a0 <adc_delay_calibrate+0x288>
				valid_range[interval] = start_valid_delay;
    795c:	e0bffe43 	ldbu	r2,-7(fp)
    7960:	1085883a 	add	r2,r2,r2
    7964:	e085883a 	add	r2,fp,r2
    7968:	e0ffff0b 	ldhu	r3,-4(fp)
    796c:	10fff28d 	sth	r3,-54(r2)
				invalid_range[interval] = start_invalid_delay;
    7970:	e0bffe43 	ldbu	r2,-7(fp)
    7974:	1085883a 	add	r2,r2,r2
    7978:	e085883a 	add	r2,fp,r2
    797c:	e0fffe8b 	ldhu	r3,-6(fp)
    7980:	10fff00d 	sth	r3,-64(r2)
				start_valid_delay = 32;
    7984:	00800804 	movi	r2,32
    7988:	e0bfff0d 	sth	r2,-4(fp)
				start_invalid_delay = 32;
    798c:	00800804 	movi	r2,32
    7990:	e0bffe8d 	sth	r2,-6(fp)
				interval++;
    7994:	e0bffe43 	ldbu	r2,-7(fp)
    7998:	10800044 	addi	r2,r2,1
    799c:	e0bffe45 	stb	r2,-7(fp)
			}
			cnt_invalid++;
    79a0:	e0bffd83 	ldbu	r2,-10(fp)
    79a4:	10800044 	addi	r2,r2,1
    79a8:	e0bffd85 	stb	r2,-10(fp)
	for (val = 0; val < max_val; val++) {
    79ac:	e0bffd43 	ldbu	r2,-11(fp)
    79b0:	10800044 	addi	r2,r2,1
    79b4:	e0bffd45 	stb	r2,-11(fp)
    79b8:	e0fffd43 	ldbu	r3,-11(fp)
    79bc:	e0bffd03 	ldbu	r2,-12(fp)
    79c0:	18bfb736 	bltu	r3,r2,78a0 <__alt_mem_mcu_subsystem_ram_0+0x77fe78a0>
		}
	}

	for (val = 0; val < 5; val++) {
    79c4:	e03ffd45 	stb	zero,-11(fp)
    79c8:	00000f06 	br	7a08 <adc_delay_calibrate+0x2f0>
		if (cnt_valid[val] > max_valid_range) {
    79cc:	e0bffd43 	ldbu	r2,-11(fp)
    79d0:	e085883a 	add	r2,fp,r2
    79d4:	10bfeec3 	ldbu	r2,-69(r2)
    79d8:	e0fffdc3 	ldbu	r3,-9(fp)
    79dc:	10803fcc 	andi	r2,r2,255
    79e0:	1880062e 	bgeu	r3,r2,79fc <adc_delay_calibrate+0x2e4>
			max_valid_range = cnt_valid[val];
    79e4:	e0bffd43 	ldbu	r2,-11(fp)
    79e8:	e085883a 	add	r2,fp,r2
    79ec:	10bfeec3 	ldbu	r2,-69(r2)
    79f0:	e0bffdc5 	stb	r2,-9(fp)
			max_interval = val;
    79f4:	e0bffd43 	ldbu	r2,-11(fp)
    79f8:	e0bffe05 	stb	r2,-8(fp)
	for (val = 0; val < 5; val++) {
    79fc:	e0bffd43 	ldbu	r2,-11(fp)
    7a00:	10800044 	addi	r2,r2,1
    7a04:	e0bffd45 	stb	r2,-11(fp)
    7a08:	e0bffd43 	ldbu	r2,-11(fp)
    7a0c:	10800170 	cmpltui	r2,r2,5
    7a10:	103fee1e 	bne	r2,zero,79cc <__alt_mem_mcu_subsystem_ram_0+0x77fe79cc>
		}
	}

	delay = (valid_range[max_interval] + invalid_range[max_interval] - 1) / 2;
    7a14:	e0bffe03 	ldbu	r2,-8(fp)
    7a18:	1085883a 	add	r2,r2,r2
    7a1c:	e085883a 	add	r2,fp,r2
    7a20:	10bff28b 	ldhu	r2,-54(r2)
    7a24:	10ffffcc 	andi	r3,r2,65535
    7a28:	e0bffe03 	ldbu	r2,-8(fp)
    7a2c:	1085883a 	add	r2,r2,r2
    7a30:	e085883a 	add	r2,fp,r2
    7a34:	10bff00b 	ldhu	r2,-64(r2)
    7a38:	10bfffcc 	andi	r2,r2,65535
    7a3c:	1885883a 	add	r2,r3,r2
    7a40:	10bfffc4 	addi	r2,r2,-1
    7a44:	1006d7fa 	srli	r3,r2,31
    7a48:	1885883a 	add	r2,r3,r2
    7a4c:	1005d07a 	srai	r2,r2,1
    7a50:	e0bfff8d 	sth	r2,-2(fp)

	ad_printf("adc_delay: setting zero error delay (%d)\n\r", delay);
    7a54:	e0bfff8b 	ldhu	r2,-2(fp)
    7a58:	100b883a 	mov	r5,r2
    7a5c:	010000f4 	movhi	r4,3
    7a60:	2106fd04 	addi	r4,r4,7156
    7a64:	001634c0 	call	1634c <printf>
	adc_set_delay(core, no_of_lanes, delay);
    7a68:	e0bfff8b 	ldhu	r2,-2(fp)
    7a6c:	100f883a 	mov	r7,r2
    7a70:	e1bfeb17 	ldw	r6,-84(fp)
    7a74:	e13fec17 	ldw	r4,-80(fp)
    7a78:	e17fed17 	ldw	r5,-76(fp)
    7a7c:	00075fc0 	call	75fc <adc_set_delay>
	for (delay = 0; delay < 32; delay++) {
		ad_printf("%d",err_field[delay]);
	}
#endif

    return(0);
    7a80:	0005883a 	mov	r2,zero
}
    7a84:	e037883a 	mov	sp,fp
    7a88:	dfc00117 	ldw	ra,4(sp)
    7a8c:	df000017 	ldw	fp,0(sp)
    7a90:	dec00204 	addi	sp,sp,8
    7a94:	f800283a 	ret

00007a98 <adc_set_pnsel>:
 *	  Note: The device must be in PRBS test mode, when calling this function
 *******************************************************************************/
int32_t adc_set_pnsel(adc_core core,
		uint8_t channel,
		enum adc_pn_sel sel)
{
    7a98:	defff904 	addi	sp,sp,-28
    7a9c:	dfc00615 	stw	ra,24(sp)
    7aa0:	df000515 	stw	fp,20(sp)
    7aa4:	df000504 	addi	fp,sp,20
    7aa8:	e13ffd15 	stw	r4,-12(fp)
    7aac:	e17ffe15 	stw	r5,-8(fp)
    7ab0:	3005883a 	mov	r2,r6
    7ab4:	e1fffb15 	stw	r7,-20(fp)
    7ab8:	e0bffc05 	stb	r2,-16(fp)
	uint32_t reg;

	adc_read(core, ADC_REG_CHAN_CNTRL_3(channel), &reg);
    7abc:	e0bffc03 	ldbu	r2,-16(fp)
    7ac0:	100491ba 	slli	r2,r2,6
    7ac4:	10810604 	addi	r2,r2,1048
    7ac8:	1007883a 	mov	r3,r2
    7acc:	e0bfff04 	addi	r2,fp,-4
    7ad0:	100f883a 	mov	r7,r2
    7ad4:	180d883a 	mov	r6,r3
    7ad8:	e13ffd17 	ldw	r4,-12(fp)
    7adc:	e17ffe17 	ldw	r5,-8(fp)
    7ae0:	00073c80 	call	73c8 <adc_read>
	reg &= ~ADC_ADC_PN_SEL(~0);
    7ae4:	e0ffff17 	ldw	r3,-4(fp)
    7ae8:	00bffc74 	movhi	r2,65521
    7aec:	10bfffc4 	addi	r2,r2,-1
    7af0:	1884703a 	and	r2,r3,r2
    7af4:	e0bfff15 	stw	r2,-4(fp)
	reg |= ADC_ADC_PN_SEL(sel);
    7af8:	e0bffb17 	ldw	r2,-20(fp)
    7afc:	1004943a 	slli	r2,r2,16
    7b00:	10c003ec 	andhi	r3,r2,15
    7b04:	e0bfff17 	ldw	r2,-4(fp)
    7b08:	1884b03a 	or	r2,r3,r2
    7b0c:	e0bfff15 	stw	r2,-4(fp)
	adc_write(core, ADC_REG_CHAN_CNTRL_3(channel), reg);
    7b10:	e0bffc03 	ldbu	r2,-16(fp)
    7b14:	100491ba 	slli	r2,r2,6
    7b18:	10810604 	addi	r2,r2,1048
    7b1c:	1007883a 	mov	r3,r2
    7b20:	e0bfff17 	ldw	r2,-4(fp)
    7b24:	100f883a 	mov	r7,r2
    7b28:	180d883a 	mov	r6,r3
    7b2c:	e13ffd17 	ldw	r4,-12(fp)
    7b30:	e17ffe17 	ldw	r5,-8(fp)
    7b34:	00074300 	call	7430 <adc_write>

	return 0;
    7b38:	0005883a 	mov	r2,zero
}
    7b3c:	e037883a 	mov	sp,fp
    7b40:	dfc00117 	ldw	ra,4(sp)
    7b44:	df000017 	ldw	fp,0(sp)
    7b48:	dec00204 	addi	sp,sp,8
    7b4c:	f800283a 	ret

00007b50 <adc_pn_mon>:
 * @brief adc_pn_mon
 *	  Note: The device must be in PRBS test mode, when calling this function
 *******************************************************************************/
int32_t adc_pn_mon(adc_core core,
		enum adc_pn_sel sel)
{
    7b50:	defff804 	addi	sp,sp,-32
    7b54:	dfc00715 	stw	ra,28(sp)
    7b58:	df000615 	stw	fp,24(sp)
    7b5c:	df000604 	addi	fp,sp,24
    7b60:	e13ffb15 	stw	r4,-20(fp)
    7b64:	e17ffc15 	stw	r5,-16(fp)
    7b68:	e1bffa15 	stw	r6,-24(fp)
	uint8_t	index;
	uint32_t reg_data;
	int32_t pn_errors = 0;
    7b6c:	e03ffe15 	stw	zero,-8(fp)

	for (index = 0; index < core.no_of_channels; index++) {
    7b70:	e03fffc5 	stb	zero,-1(fp)
    7b74:	00002006 	br	7bf8 <adc_pn_mon+0xa8>
 		adc_read(core, ADC_REG_CHAN_CNTRL(index), &reg_data);
    7b78:	e0bfffc3 	ldbu	r2,-1(fp)
    7b7c:	10800404 	addi	r2,r2,16
    7b80:	100491ba 	slli	r2,r2,6
    7b84:	1007883a 	mov	r3,r2
    7b88:	e0bffd04 	addi	r2,fp,-12
    7b8c:	100f883a 	mov	r7,r2
    7b90:	180d883a 	mov	r6,r3
    7b94:	e13ffb17 	ldw	r4,-20(fp)
    7b98:	e17ffc17 	ldw	r5,-16(fp)
    7b9c:	00073c80 	call	73c8 <adc_read>
 		reg_data |= ADC_ENABLE;
    7ba0:	e0bffd17 	ldw	r2,-12(fp)
    7ba4:	10800054 	ori	r2,r2,1
    7ba8:	e0bffd15 	stw	r2,-12(fp)
 		adc_write(core, ADC_REG_CHAN_CNTRL(index), reg_data);
    7bac:	e0bfffc3 	ldbu	r2,-1(fp)
    7bb0:	10800404 	addi	r2,r2,16
    7bb4:	100491ba 	slli	r2,r2,6
    7bb8:	1007883a 	mov	r3,r2
    7bbc:	e0bffd17 	ldw	r2,-12(fp)
    7bc0:	100f883a 	mov	r7,r2
    7bc4:	180d883a 	mov	r6,r3
    7bc8:	e13ffb17 	ldw	r4,-20(fp)
    7bcc:	e17ffc17 	ldw	r5,-16(fp)
    7bd0:	00074300 	call	7430 <adc_write>
		adc_set_pnsel(core, index, sel);
    7bd4:	e0bfffc3 	ldbu	r2,-1(fp)
    7bd8:	e1fffa17 	ldw	r7,-24(fp)
    7bdc:	100d883a 	mov	r6,r2
    7be0:	e13ffb17 	ldw	r4,-20(fp)
    7be4:	e17ffc17 	ldw	r5,-16(fp)
    7be8:	0007a980 	call	7a98 <adc_set_pnsel>
	for (index = 0; index < core.no_of_channels; index++) {
    7bec:	e0bfffc3 	ldbu	r2,-1(fp)
    7bf0:	10800044 	addi	r2,r2,1
    7bf4:	e0bfffc5 	stb	r2,-1(fp)
    7bf8:	e0bffc43 	ldbu	r2,-15(fp)
    7bfc:	e0ffffc3 	ldbu	r3,-1(fp)
    7c00:	10803fcc 	andi	r2,r2,255
    7c04:	18bfdc36 	bltu	r3,r2,7b78 <__alt_mem_mcu_subsystem_ram_0+0x77fe7b78>
	}
	mdelay(1);
    7c08:	0100fa04 	movi	r4,1000
    7c0c:	0025e400 	call	25e40 <usleep>

	for (index = 0; index < core.no_of_channels; index++) {
    7c10:	e03fffc5 	stb	zero,-1(fp)
    7c14:	00000b06 	br	7c44 <adc_pn_mon+0xf4>
		adc_write(core, ADC_REG_CHAN_STATUS(index), 0xff);
    7c18:	e0bfffc3 	ldbu	r2,-1(fp)
    7c1c:	100491ba 	slli	r2,r2,6
    7c20:	10810104 	addi	r2,r2,1028
    7c24:	01c03fc4 	movi	r7,255
    7c28:	100d883a 	mov	r6,r2
    7c2c:	e13ffb17 	ldw	r4,-20(fp)
    7c30:	e17ffc17 	ldw	r5,-16(fp)
    7c34:	00074300 	call	7430 <adc_write>
	for (index = 0; index < core.no_of_channels; index++) {
    7c38:	e0bfffc3 	ldbu	r2,-1(fp)
    7c3c:	10800044 	addi	r2,r2,1
    7c40:	e0bfffc5 	stb	r2,-1(fp)
    7c44:	e0bffc43 	ldbu	r2,-15(fp)
    7c48:	e0ffffc3 	ldbu	r3,-1(fp)
    7c4c:	10803fcc 	andi	r2,r2,255
    7c50:	18bff136 	bltu	r3,r2,7c18 <__alt_mem_mcu_subsystem_ram_0+0x77fe7c18>
	}
	mdelay(100);
    7c54:	010000b4 	movhi	r4,2
    7c58:	2121a804 	addi	r4,r4,-31072
    7c5c:	0025e400 	call	25e40 <usleep>

	for (index = 0; index < core.no_of_channels; index++) {
    7c60:	e03fffc5 	stb	zero,-1(fp)
    7c64:	00001106 	br	7cac <adc_pn_mon+0x15c>
		adc_read(core, ADC_REG_CHAN_STATUS(index), &reg_data);
    7c68:	e0bfffc3 	ldbu	r2,-1(fp)
    7c6c:	100491ba 	slli	r2,r2,6
    7c70:	10810104 	addi	r2,r2,1028
    7c74:	1007883a 	mov	r3,r2
    7c78:	e0bffd04 	addi	r2,fp,-12
    7c7c:	100f883a 	mov	r7,r2
    7c80:	180d883a 	mov	r6,r3
    7c84:	e13ffb17 	ldw	r4,-20(fp)
    7c88:	e17ffc17 	ldw	r5,-16(fp)
    7c8c:	00073c80 	call	73c8 <adc_read>
		if (reg_data != 0) {
    7c90:	e0bffd17 	ldw	r2,-12(fp)
    7c94:	10000226 	beq	r2,zero,7ca0 <adc_pn_mon+0x150>
			pn_errors = -1;
    7c98:	00bfffc4 	movi	r2,-1
    7c9c:	e0bffe15 	stw	r2,-8(fp)
	for (index = 0; index < core.no_of_channels; index++) {
    7ca0:	e0bfffc3 	ldbu	r2,-1(fp)
    7ca4:	10800044 	addi	r2,r2,1
    7ca8:	e0bfffc5 	stb	r2,-1(fp)
    7cac:	e0bffc43 	ldbu	r2,-15(fp)
    7cb0:	e0ffffc3 	ldbu	r3,-1(fp)
    7cb4:	10803fcc 	andi	r2,r2,255
    7cb8:	18bfeb36 	bltu	r3,r2,7c68 <__alt_mem_mcu_subsystem_ram_0+0x77fe7c68>
		}
	}

	return pn_errors;
    7cbc:	e0bffe17 	ldw	r2,-8(fp)
}
    7cc0:	e037883a 	mov	sp,fp
    7cc4:	dfc00117 	ldw	ra,4(sp)
    7cc8:	df000017 	ldw	fp,0(sp)
    7ccc:	dec00204 	addi	sp,sp,8
    7cd0:	f800283a 	ret

00007cd4 <adc_ramp_test>:
 *******************************************************************************/
int32_t adc_ramp_test(adc_core core,
		uint8_t no_of_cores,
		uint32_t no_of_samples,
		uint32_t start_address)
{
    7cd4:	deffd304 	addi	sp,sp,-180
    7cd8:	dfc02c15 	stw	ra,176(sp)
    7cdc:	df002b15 	stw	fp,172(sp)
    7ce0:	df002b04 	addi	fp,sp,172
    7ce4:	e13fd815 	stw	r4,-160(fp)
    7ce8:	e17fd915 	stw	r5,-156(fp)
    7cec:	3005883a 	mov	r2,r6
    7cf0:	e1ffd615 	stw	r7,-168(fp)
    7cf4:	e0bfd705 	stb	r2,-164(fp)
	uint8_t	 err_cnt = 0;
    7cf8:	e03fffc5 	stb	zero,-1(fp)
	uint16_t exp_data[32];
	uint16_t rcv_data[32];
	uint8_t index;
	uint32_t mask = ad_pow2(core.resolution);
    7cfc:	e0bfd983 	ldbu	r2,-154(fp)
    7d00:	10803fcc 	andi	r2,r2,255
    7d04:	1009883a 	mov	r4,r2
    7d08:	000c6c80 	call	c6c8 <ad_pow2>
    7d0c:	e0bffc15 	stw	r2,-16(fp)
	uint8_t no_of_channels = core.no_of_channels*no_of_cores;
    7d10:	e0bfd943 	ldbu	r2,-155(fp)
    7d14:	e0ffd703 	ldbu	r3,-164(fp)
    7d18:	1885383a 	mul	r2,r3,r2
    7d1c:	e0bffbc5 	stb	r2,-17(fp)
	uint32_t current_address = start_address;
    7d20:	e0800217 	ldw	r2,8(fp)
    7d24:	e0bffe15 	stw	r2,-8(fp)
	uint32_t last_address = start_address + (no_of_channels*no_of_samples)*2;
    7d28:	e0fffbc3 	ldbu	r3,-17(fp)
    7d2c:	e0bfd617 	ldw	r2,-168(fp)
    7d30:	1885383a 	mul	r2,r3,r2
    7d34:	1085883a 	add	r2,r2,r2
    7d38:	1007883a 	mov	r3,r2
    7d3c:	e0800217 	ldw	r2,8(fp)
    7d40:	10c5883a 	add	r2,r2,r3
    7d44:	e0bffa15 	stw	r2,-24(fp)
	uint32_t sample_count = 0;
    7d48:	e03ffd15 	stw	zero,-12(fp)

	while (current_address < last_address) {
    7d4c:	00011006 	br	8190 <adc_ramp_test+0x4bc>

		// read data back from memory, one samples from each channel, min a word
		for (index=0; index<no_of_channels; index+=2) {
    7d50:	e03fff85 	stb	zero,-2(fp)
    7d54:	00001d06 	br	7dcc <adc_ramp_test+0xf8>
			rcv_data[index] = ad_reg_read(current_address + index) & mask;
    7d58:	e0ffff83 	ldbu	r3,-2(fp)
    7d5c:	e0bffe17 	ldw	r2,-8(fp)
    7d60:	1885883a 	add	r2,r3,r2
    7d64:	10800037 	ldwio	r2,0(r2)
    7d68:	1009883a 	mov	r4,r2
    7d6c:	e0bffc17 	ldw	r2,-16(fp)
    7d70:	1007883a 	mov	r3,r2
    7d74:	e0bfff83 	ldbu	r2,-2(fp)
    7d78:	20c6703a 	and	r3,r4,r3
    7d7c:	1085883a 	add	r2,r2,r2
    7d80:	e085883a 	add	r2,fp,r2
    7d84:	10ffda0d 	sth	r3,-152(r2)
			rcv_data[index+1] = (ad_reg_read(current_address + index) >> 16) & mask;
    7d88:	e0ffff83 	ldbu	r3,-2(fp)
    7d8c:	e0bffe17 	ldw	r2,-8(fp)
    7d90:	1885883a 	add	r2,r3,r2
    7d94:	10800037 	ldwio	r2,0(r2)
    7d98:	1005d43a 	srai	r2,r2,16
    7d9c:	1009883a 	mov	r4,r2
    7da0:	e0bffc17 	ldw	r2,-16(fp)
    7da4:	1007883a 	mov	r3,r2
    7da8:	e0bfff83 	ldbu	r2,-2(fp)
    7dac:	10800044 	addi	r2,r2,1
    7db0:	20c6703a 	and	r3,r4,r3
    7db4:	1085883a 	add	r2,r2,r2
    7db8:	e085883a 	add	r2,fp,r2
    7dbc:	10ffda0d 	sth	r3,-152(r2)
		for (index=0; index<no_of_channels; index+=2) {
    7dc0:	e0bfff83 	ldbu	r2,-2(fp)
    7dc4:	10800084 	addi	r2,r2,2
    7dc8:	e0bfff85 	stb	r2,-2(fp)
    7dcc:	e0ffff83 	ldbu	r3,-2(fp)
    7dd0:	e0bffbc3 	ldbu	r2,-17(fp)
    7dd4:	18bfe036 	bltu	r3,r2,7d58 <__alt_mem_mcu_subsystem_ram_0+0x77fe7d58>
		}

		// generate expected data
		for (index=0; index<no_of_channels; index+=2) {
    7dd8:	e03fff85 	stb	zero,-2(fp)
    7ddc:	00008406 	br	7ff0 <adc_ramp_test+0x31c>
			if (current_address == start_address) {
    7de0:	e0fffe17 	ldw	r3,-8(fp)
    7de4:	e0800217 	ldw	r2,8(fp)
    7de8:	1880131e 	bne	r3,r2,7e38 <adc_ramp_test+0x164>
				exp_data[index] = rcv_data[index];
    7dec:	e0ffff83 	ldbu	r3,-2(fp)
    7df0:	e0bfff83 	ldbu	r2,-2(fp)
    7df4:	18c7883a 	add	r3,r3,r3
    7df8:	e0c7883a 	add	r3,fp,r3
    7dfc:	18ffda0b 	ldhu	r3,-152(r3)
    7e00:	1085883a 	add	r2,r2,r2
    7e04:	e085883a 	add	r2,fp,r2
    7e08:	10ffea0d 	sth	r3,-88(r2)
				exp_data[index+1] = rcv_data[index+1];
    7e0c:	e0bfff83 	ldbu	r2,-2(fp)
    7e10:	10c00044 	addi	r3,r2,1
    7e14:	e0bfff83 	ldbu	r2,-2(fp)
    7e18:	10800044 	addi	r2,r2,1
    7e1c:	18c7883a 	add	r3,r3,r3
    7e20:	e0c7883a 	add	r3,fp,r3
    7e24:	18ffda0b 	ldhu	r3,-152(r3)
    7e28:	1085883a 	add	r2,r2,r2
    7e2c:	e085883a 	add	r2,fp,r2
    7e30:	10ffea0d 	sth	r3,-88(r2)
    7e34:	00006b06 	br	7fe4 <adc_ramp_test+0x310>
			} else {
				if(no_of_channels < 2) {
    7e38:	e0bffbc3 	ldbu	r2,-17(fp)
    7e3c:	108000a8 	cmpgeui	r2,r2,2
    7e40:	10003f1e 	bne	r2,zero,7f40 <adc_ramp_test+0x26c>
					exp_data[index] = ((exp_data[index]+2) > mask) ? ((exp_data[index]+2) & mask) : (exp_data[index] + 2);
    7e44:	e0bfff83 	ldbu	r2,-2(fp)
    7e48:	1085883a 	add	r2,r2,r2
    7e4c:	e085883a 	add	r2,fp,r2
    7e50:	10bfea0b 	ldhu	r2,-88(r2)
    7e54:	10bfffcc 	andi	r2,r2,65535
    7e58:	10800084 	addi	r2,r2,2
    7e5c:	1007883a 	mov	r3,r2
    7e60:	e0bffc17 	ldw	r2,-16(fp)
    7e64:	10c00a2e 	bgeu	r2,r3,7e90 <adc_ramp_test+0x1bc>
    7e68:	e0bfff83 	ldbu	r2,-2(fp)
    7e6c:	1085883a 	add	r2,r2,r2
    7e70:	e085883a 	add	r2,fp,r2
    7e74:	10bfea0b 	ldhu	r2,-88(r2)
    7e78:	10800084 	addi	r2,r2,2
    7e7c:	1007883a 	mov	r3,r2
    7e80:	e0bffc17 	ldw	r2,-16(fp)
    7e84:	1884703a 	and	r2,r3,r2
    7e88:	1007883a 	mov	r3,r2
    7e8c:	00000606 	br	7ea8 <adc_ramp_test+0x1d4>
    7e90:	e0bfff83 	ldbu	r2,-2(fp)
    7e94:	1085883a 	add	r2,r2,r2
    7e98:	e085883a 	add	r2,fp,r2
    7e9c:	10bfea0b 	ldhu	r2,-88(r2)
    7ea0:	10800084 	addi	r2,r2,2
    7ea4:	1007883a 	mov	r3,r2
    7ea8:	e0bfff83 	ldbu	r2,-2(fp)
    7eac:	1085883a 	add	r2,r2,r2
    7eb0:	e085883a 	add	r2,fp,r2
    7eb4:	10ffea0d 	sth	r3,-88(r2)
					exp_data[index+1] = ((exp_data[index+1]+2) > mask) ? ((exp_data[index+1]+2) & mask) : (exp_data[index+1] + 2);
    7eb8:	e0bfff83 	ldbu	r2,-2(fp)
    7ebc:	10800044 	addi	r2,r2,1
    7ec0:	1085883a 	add	r2,r2,r2
    7ec4:	e085883a 	add	r2,fp,r2
    7ec8:	10bfea0b 	ldhu	r2,-88(r2)
    7ecc:	10bfffcc 	andi	r2,r2,65535
    7ed0:	10800084 	addi	r2,r2,2
    7ed4:	1007883a 	mov	r3,r2
    7ed8:	e0bffc17 	ldw	r2,-16(fp)
    7edc:	10c00b2e 	bgeu	r2,r3,7f0c <adc_ramp_test+0x238>
    7ee0:	e0bfff83 	ldbu	r2,-2(fp)
    7ee4:	10800044 	addi	r2,r2,1
    7ee8:	1085883a 	add	r2,r2,r2
    7eec:	e085883a 	add	r2,fp,r2
    7ef0:	10bfea0b 	ldhu	r2,-88(r2)
    7ef4:	10800084 	addi	r2,r2,2
    7ef8:	1007883a 	mov	r3,r2
    7efc:	e0bffc17 	ldw	r2,-16(fp)
    7f00:	1884703a 	and	r2,r3,r2
    7f04:	1007883a 	mov	r3,r2
    7f08:	00000706 	br	7f28 <adc_ramp_test+0x254>
    7f0c:	e0bfff83 	ldbu	r2,-2(fp)
    7f10:	10800044 	addi	r2,r2,1
    7f14:	1085883a 	add	r2,r2,r2
    7f18:	e085883a 	add	r2,fp,r2
    7f1c:	10bfea0b 	ldhu	r2,-88(r2)
    7f20:	10800084 	addi	r2,r2,2
    7f24:	1007883a 	mov	r3,r2
    7f28:	e0bfff83 	ldbu	r2,-2(fp)
    7f2c:	10800044 	addi	r2,r2,1
    7f30:	1085883a 	add	r2,r2,r2
    7f34:	e085883a 	add	r2,fp,r2
    7f38:	10ffea0d 	sth	r3,-88(r2)
    7f3c:	00002906 	br	7fe4 <adc_ramp_test+0x310>
				} else {
					exp_data[index] = (exp_data[index] == mask) ? 0 : exp_data[index] + 1;
    7f40:	e0bfff83 	ldbu	r2,-2(fp)
    7f44:	1085883a 	add	r2,r2,r2
    7f48:	e085883a 	add	r2,fp,r2
    7f4c:	10bfea0b 	ldhu	r2,-88(r2)
    7f50:	10bfffcc 	andi	r2,r2,65535
    7f54:	e0fffc17 	ldw	r3,-16(fp)
    7f58:	18800726 	beq	r3,r2,7f78 <adc_ramp_test+0x2a4>
    7f5c:	e0bfff83 	ldbu	r2,-2(fp)
    7f60:	1085883a 	add	r2,r2,r2
    7f64:	e085883a 	add	r2,fp,r2
    7f68:	10bfea0b 	ldhu	r2,-88(r2)
    7f6c:	10800044 	addi	r2,r2,1
    7f70:	1007883a 	mov	r3,r2
    7f74:	00000106 	br	7f7c <adc_ramp_test+0x2a8>
    7f78:	0007883a 	mov	r3,zero
    7f7c:	e0bfff83 	ldbu	r2,-2(fp)
    7f80:	1085883a 	add	r2,r2,r2
    7f84:	e085883a 	add	r2,fp,r2
    7f88:	10ffea0d 	sth	r3,-88(r2)
					exp_data[index+1] = (exp_data[index+1] == mask) ? 0 : exp_data[index+1] + 1;
    7f8c:	e0bfff83 	ldbu	r2,-2(fp)
    7f90:	10800044 	addi	r2,r2,1
    7f94:	1085883a 	add	r2,r2,r2
    7f98:	e085883a 	add	r2,fp,r2
    7f9c:	10bfea0b 	ldhu	r2,-88(r2)
    7fa0:	10bfffcc 	andi	r2,r2,65535
    7fa4:	e0fffc17 	ldw	r3,-16(fp)
    7fa8:	18800826 	beq	r3,r2,7fcc <adc_ramp_test+0x2f8>
    7fac:	e0bfff83 	ldbu	r2,-2(fp)
    7fb0:	10800044 	addi	r2,r2,1
    7fb4:	1085883a 	add	r2,r2,r2
    7fb8:	e085883a 	add	r2,fp,r2
    7fbc:	10bfea0b 	ldhu	r2,-88(r2)
    7fc0:	10800044 	addi	r2,r2,1
    7fc4:	1007883a 	mov	r3,r2
    7fc8:	00000106 	br	7fd0 <adc_ramp_test+0x2fc>
    7fcc:	0007883a 	mov	r3,zero
    7fd0:	e0bfff83 	ldbu	r2,-2(fp)
    7fd4:	10800044 	addi	r2,r2,1
    7fd8:	1085883a 	add	r2,r2,r2
    7fdc:	e085883a 	add	r2,fp,r2
    7fe0:	10ffea0d 	sth	r3,-88(r2)
		for (index=0; index<no_of_channels; index+=2) {
    7fe4:	e0bfff83 	ldbu	r2,-2(fp)
    7fe8:	10800084 	addi	r2,r2,2
    7fec:	e0bfff85 	stb	r2,-2(fp)
    7ff0:	e0ffff83 	ldbu	r3,-2(fp)
    7ff4:	e0bffbc3 	ldbu	r2,-17(fp)
    7ff8:	18bf7936 	bltu	r3,r2,7de0 <__alt_mem_mcu_subsystem_ram_0+0x77fe7de0>
				}
			}
		}

		// compare received and expected
		for (index=0; index<no_of_channels; index+=2) {
    7ffc:	e03fff85 	stb	zero,-2(fp)
    8000:	00004e06 	br	813c <adc_ramp_test+0x468>
			if ((rcv_data[index] != exp_data[index]) || (rcv_data[index+1] != exp_data[index+1])) {
    8004:	e0bfff83 	ldbu	r2,-2(fp)
    8008:	1085883a 	add	r2,r2,r2
    800c:	e085883a 	add	r2,fp,r2
    8010:	10ffda0b 	ldhu	r3,-152(r2)
    8014:	e0bfff83 	ldbu	r2,-2(fp)
    8018:	1085883a 	add	r2,r2,r2
    801c:	e085883a 	add	r2,fp,r2
    8020:	10bfea0b 	ldhu	r2,-88(r2)
    8024:	18ffffcc 	andi	r3,r3,65535
    8028:	10bfffcc 	andi	r2,r2,65535
    802c:	18800d1e 	bne	r3,r2,8064 <adc_ramp_test+0x390>
    8030:	e0bfff83 	ldbu	r2,-2(fp)
    8034:	10800044 	addi	r2,r2,1
    8038:	1085883a 	add	r2,r2,r2
    803c:	e085883a 	add	r2,fp,r2
    8040:	10ffda0b 	ldhu	r3,-152(r2)
    8044:	e0bfff83 	ldbu	r2,-2(fp)
    8048:	10800044 	addi	r2,r2,1
    804c:	1085883a 	add	r2,r2,r2
    8050:	e085883a 	add	r2,fp,r2
    8054:	10bfea0b 	ldhu	r2,-88(r2)
    8058:	18ffffcc 	andi	r3,r3,65535
    805c:	10bfffcc 	andi	r2,r2,65535
    8060:	18803326 	beq	r3,r2,8130 <adc_ramp_test+0x45c>
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    8064:	e0ffff83 	ldbu	r3,-2(fp)
    8068:	e0bffd17 	ldw	r2,-12(fp)
    806c:	1887883a 	add	r3,r3,r2
						__func__, sample_count+index, rcv_data[index], exp_data[index]);
    8070:	e0bfff83 	ldbu	r2,-2(fp)
    8074:	1085883a 	add	r2,r2,r2
    8078:	e085883a 	add	r2,fp,r2
    807c:	10bfda0b 	ldhu	r2,-152(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    8080:	113fffcc 	andi	r4,r2,65535
						__func__, sample_count+index, rcv_data[index], exp_data[index]);
    8084:	e0bfff83 	ldbu	r2,-2(fp)
    8088:	1085883a 	add	r2,r2,r2
    808c:	e085883a 	add	r2,fp,r2
    8090:	10bfea0b 	ldhu	r2,-88(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    8094:	10bfffcc 	andi	r2,r2,65535
    8098:	d8800015 	stw	r2,0(sp)
    809c:	200f883a 	mov	r7,r4
    80a0:	180d883a 	mov	r6,r3
    80a4:	014000f4 	movhi	r5,3
    80a8:	29471b04 	addi	r5,r5,7276
    80ac:	010000f4 	movhi	r4,3
    80b0:	21070804 	addi	r4,r4,7200
    80b4:	001634c0 	call	1634c <printf>
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
    80b8:	e0ffff83 	ldbu	r3,-2(fp)
    80bc:	e0bffd17 	ldw	r2,-12(fp)
    80c0:	1885883a 	add	r2,r3,r2
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    80c4:	10c00044 	addi	r3,r2,1
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
    80c8:	e0bfff83 	ldbu	r2,-2(fp)
    80cc:	10800044 	addi	r2,r2,1
    80d0:	1085883a 	add	r2,r2,r2
    80d4:	e085883a 	add	r2,fp,r2
    80d8:	10bfda0b 	ldhu	r2,-152(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    80dc:	113fffcc 	andi	r4,r2,65535
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
    80e0:	e0bfff83 	ldbu	r2,-2(fp)
    80e4:	10800044 	addi	r2,r2,1
    80e8:	1085883a 	add	r2,r2,r2
    80ec:	e085883a 	add	r2,fp,r2
    80f0:	10bfea0b 	ldhu	r2,-88(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    80f4:	10bfffcc 	andi	r2,r2,65535
    80f8:	d8800015 	stw	r2,0(sp)
    80fc:	200f883a 	mov	r7,r4
    8100:	180d883a 	mov	r6,r3
    8104:	014000f4 	movhi	r5,3
    8108:	29471b04 	addi	r5,r5,7276
    810c:	010000f4 	movhi	r4,3
    8110:	21070804 	addi	r4,r4,7200
    8114:	001634c0 	call	1634c <printf>
				err_cnt++;
    8118:	e0bfffc3 	ldbu	r2,-1(fp)
    811c:	10800044 	addi	r2,r2,1
    8120:	e0bfffc5 	stb	r2,-1(fp)
				if (err_cnt == 50) break;
    8124:	e0bfffc3 	ldbu	r2,-1(fp)
    8128:	10800c98 	cmpnei	r2,r2,50
    812c:	10000726 	beq	r2,zero,814c <adc_ramp_test+0x478>
		for (index=0; index<no_of_channels; index+=2) {
    8130:	e0bfff83 	ldbu	r2,-2(fp)
    8134:	10800084 	addi	r2,r2,2
    8138:	e0bfff85 	stb	r2,-2(fp)
    813c:	e0ffff83 	ldbu	r3,-2(fp)
    8140:	e0bffbc3 	ldbu	r2,-17(fp)
    8144:	18bfaf36 	bltu	r3,r2,8004 <__alt_mem_mcu_subsystem_ram_0+0x77fe8004>
    8148:	00000106 	br	8150 <adc_ramp_test+0x47c>
				if (err_cnt == 50) break;
    814c:	0001883a 	nop
			}
		}
		sample_count+=index;
    8150:	e0bfff83 	ldbu	r2,-2(fp)
    8154:	e0fffd17 	ldw	r3,-12(fp)
    8158:	1885883a 	add	r2,r3,r2
    815c:	e0bffd15 	stw	r2,-12(fp)

		// increment address pointer
		current_address = (no_of_channels == 1) ? (current_address+4) :
    8160:	e0bffbc3 	ldbu	r2,-17(fp)
    8164:	10800058 	cmpnei	r2,r2,1
    8168:	1000031e 	bne	r2,zero,8178 <adc_ramp_test+0x4a4>
    816c:	e0bffe17 	ldw	r2,-8(fp)
    8170:	10800104 	addi	r2,r2,4
    8174:	00000506 	br	818c <adc_ramp_test+0x4b8>
							(current_address+(no_of_channels*2));
    8178:	e0bffbc3 	ldbu	r2,-17(fp)
    817c:	1085883a 	add	r2,r2,r2
    8180:	1007883a 	mov	r3,r2
		current_address = (no_of_channels == 1) ? (current_address+4) :
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1885883a 	add	r2,r3,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
	while (current_address < last_address) {
    8190:	e0fffe17 	ldw	r3,-8(fp)
    8194:	e0bffa17 	ldw	r2,-24(fp)
    8198:	18beed36 	bltu	r3,r2,7d50 <__alt_mem_mcu_subsystem_ram_0+0x77fe7d50>
	}

	if (err_cnt)
    819c:	e0bfffc3 	ldbu	r2,-1(fp)
    81a0:	10000226 	beq	r2,zero,81ac <adc_ramp_test+0x4d8>
		return -1;
    81a4:	00bfffc4 	movi	r2,-1
    81a8:	00000106 	br	81b0 <adc_ramp_test+0x4dc>
	else
		return 0;
    81ac:	0005883a 	mov	r2,zero
}
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <I2C_Init>:
 * @return status - Result of the initialization procedure.
 *                  Example: 1 - if initialization was successful;
 *                           0 - if initialization was unsuccessful.
*******************************************************************************/
unsigned char I2C_Init(unsigned long clockFreq)
{
    81c4:	defffe04 	addi	sp,sp,-8
    81c8:	df000115 	stw	fp,4(sp)
    81cc:	df000104 	addi	fp,sp,4
    81d0:	e13fff15 	stw	r4,-4(fp)
    /* Add your code here. */
}
    81d4:	0001883a 	nop
    81d8:	e037883a 	mov	sp,fp
    81dc:	df000017 	ldw	fp,0(sp)
    81e0:	dec00104 	addi	sp,sp,4
    81e4:	f800283a 	ret

000081e8 <I2C_Write>:
*******************************************************************************/
unsigned char I2C_Write(unsigned char slaveAddress,
                        unsigned char* dataBuffer,
                        unsigned char bytesNumber,
                        unsigned char stopBit)
{
    81e8:	defffb04 	addi	sp,sp,-20
    81ec:	df000415 	stw	fp,16(sp)
    81f0:	df000404 	addi	fp,sp,16
    81f4:	2005883a 	mov	r2,r4
    81f8:	e17ffe15 	stw	r5,-8(fp)
    81fc:	3009883a 	mov	r4,r6
    8200:	3807883a 	mov	r3,r7
    8204:	e0bfff05 	stb	r2,-4(fp)
    8208:	2005883a 	mov	r2,r4
    820c:	e0bffd05 	stb	r2,-12(fp)
    8210:	1805883a 	mov	r2,r3
    8214:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
    8218:	0001883a 	nop
    821c:	e037883a 	mov	sp,fp
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00104 	addi	sp,sp,4
    8228:	f800283a 	ret

0000822c <I2C_Read>:
*******************************************************************************/
unsigned char I2C_Read(unsigned char slaveAddress,
                       unsigned char* dataBuffer,
                       unsigned char bytesNumber,
                       unsigned char stopBit)
{
    822c:	defffb04 	addi	sp,sp,-20
    8230:	df000415 	stw	fp,16(sp)
    8234:	df000404 	addi	fp,sp,16
    8238:	2005883a 	mov	r2,r4
    823c:	e17ffe15 	stw	r5,-8(fp)
    8240:	3009883a 	mov	r4,r6
    8244:	3807883a 	mov	r3,r7
    8248:	e0bfff05 	stb	r2,-4(fp)
    824c:	2005883a 	mov	r2,r4
    8250:	e0bffd05 	stb	r2,-12(fp)
    8254:	1805883a 	mov	r2,r3
    8258:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
    825c:	0001883a 	nop
    8260:	e037883a 	mov	sp,fp
    8264:	df000017 	ldw	fp,0(sp)
    8268:	dec00104 	addi	sp,sp,4
    826c:	f800283a 	ret

00008270 <SPI_Init>:
*******************************************************************************/
unsigned char SPI_Init(unsigned char lsbFirst,
                       unsigned long clockFreq,
                       unsigned char clockPol,
                       unsigned char clockEdg)
{
    8270:	defffb04 	addi	sp,sp,-20
    8274:	df000415 	stw	fp,16(sp)
    8278:	df000404 	addi	fp,sp,16
    827c:	2005883a 	mov	r2,r4
    8280:	e17ffe15 	stw	r5,-8(fp)
    8284:	3009883a 	mov	r4,r6
    8288:	3807883a 	mov	r3,r7
    828c:	e0bfff05 	stb	r2,-4(fp)
    8290:	2005883a 	mov	r2,r4
    8294:	e0bffd05 	stb	r2,-12(fp)
    8298:	1805883a 	mov	r2,r3
    829c:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
    82a0:	0001883a 	nop
    82a4:	e037883a 	mov	sp,fp
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00104 	addi	sp,sp,4
    82b0:	f800283a 	ret

000082b4 <SPI_Read>:
 * @return Number of read bytes.
*******************************************************************************/
unsigned char SPI_Read(unsigned char slaveDeviceId,
                       unsigned char* data,
                       unsigned char bytesNumber)
{
    82b4:	defffc04 	addi	sp,sp,-16
    82b8:	df000315 	stw	fp,12(sp)
    82bc:	df000304 	addi	fp,sp,12
    82c0:	2005883a 	mov	r2,r4
    82c4:	e17ffe15 	stw	r5,-8(fp)
    82c8:	3007883a 	mov	r3,r6
    82cc:	e0bfff05 	stb	r2,-4(fp)
    82d0:	1805883a 	mov	r2,r3
    82d4:	e0bffd05 	stb	r2,-12(fp)
    /* Add your code here. */
}
    82d8:	0001883a 	nop
    82dc:	e037883a 	mov	sp,fp
    82e0:	df000017 	ldw	fp,0(sp)
    82e4:	dec00104 	addi	sp,sp,4
    82e8:	f800283a 	ret

000082ec <SPI_Write>:
 * @return Number of written bytes.
*******************************************************************************/
unsigned char SPI_Write(unsigned char slaveDeviceId,
                        unsigned char* data,
                        unsigned char bytesNumber)
{
    82ec:	defffc04 	addi	sp,sp,-16
    82f0:	df000315 	stw	fp,12(sp)
    82f4:	df000304 	addi	fp,sp,12
    82f8:	2005883a 	mov	r2,r4
    82fc:	e17ffe15 	stw	r5,-8(fp)
    8300:	3007883a 	mov	r3,r6
    8304:	e0bfff05 	stb	r2,-4(fp)
    8308:	1805883a 	mov	r2,r3
    830c:	e0bffd05 	stb	r2,-12(fp)
    /* Add your code here. */
}
    8310:	0001883a 	nop
    8314:	e037883a 	mov	sp,fp
    8318:	df000017 	ldw	fp,0(sp)
    831c:	dec00104 	addi	sp,sp,4
    8320:	f800283a 	ret

00008324 <dac_buffer_load>:

/******************************************************************************/
/************************ Functions Definitions *******************************/
/******************************************************************************/

uint32_t dac_buffer_load(dac_core core, uint32_t start_address) {
    8324:	defff604 	addi	sp,sp,-40
    8328:	dfc00915 	stw	ra,36(sp)
    832c:	df000815 	stw	fp,32(sp)
    8330:	df000804 	addi	fp,sp,32
    8334:	e13ff915 	stw	r4,-28(fp)
    8338:	e17ffa15 	stw	r5,-24(fp)
    833c:	e1bffb15 	stw	r6,-20(fp)
    8340:	e1fff815 	stw	r7,-32(fp)

	uint32_t no_of_samples;
	uint32_t index_i, index_q;
	uint32_t index_mem = 0;
    8344:	e03ffe15 	stw	zero,-8(fp)

	no_of_samples = sizeof(sine_lut) / sizeof(typeof(sine_lut[0]));
    8348:	00810004 	movi	r2,1024
    834c:	e0bffd15 	stw	r2,-12(fp)

	for (index_i = 0; index_i < no_of_samples; index_i++) {
    8350:	e03fff15 	stw	zero,-4(fp)
    8354:	00008106 	br	855c <dac_buffer_load+0x238>
		 /* Phase shifted by 90 degree */
		index_q = (index_i + 256) % no_of_samples;
    8358:	e0bfff17 	ldw	r2,-4(fp)
    835c:	10804004 	addi	r2,r2,256
    8360:	e17ffd17 	ldw	r5,-12(fp)
    8364:	1009883a 	mov	r4,r2
    8368:	0012ab80 	call	12ab8 <__umodsi3>
    836c:	e0bffc15 	stw	r2,-16(fp)

		switch (core.no_of_channels) {
    8370:	e0bffa43 	ldbu	r2,-23(fp)
    8374:	10803fcc 	andi	r2,r2,255
    8378:	10c000a0 	cmpeqi	r3,r2,2
    837c:	1800151e 	bne	r3,zero,83d4 <dac_buffer_load+0xb0>
    8380:	10c00120 	cmpeqi	r3,r2,4
    8384:	1800321e 	bne	r3,zero,8450 <dac_buffer_load+0x12c>
    8388:	10800060 	cmpeqi	r2,r2,1
    838c:	10006b26 	beq	r2,zero,853c <dac_buffer_load+0x218>
			case 1:
				ad_reg_write_16(start_address + index_mem * 2, sine_lut[index_i]);
    8390:	e0bffe17 	ldw	r2,-8(fp)
    8394:	1085883a 	add	r2,r2,r2
    8398:	1007883a 	mov	r3,r2
    839c:	e0bff817 	ldw	r2,-32(fp)
    83a0:	1889883a 	add	r4,r3,r2
    83a4:	e0bfff17 	ldw	r2,-4(fp)
    83a8:	1087883a 	add	r3,r2,r2
    83ac:	008000f4 	movhi	r2,3
    83b0:	1885883a 	add	r2,r3,r2
    83b4:	10871f0b 	ldhu	r2,7292(r2)
    83b8:	10bfffcc 	andi	r2,r2,65535
    83bc:	100b883a 	mov	r5,r2
    83c0:	000c5a00 	call	c5a0 <ad_reg_write_16>
				index_mem += 1;
    83c4:	e0bffe17 	ldw	r2,-8(fp)
    83c8:	10800044 	addi	r2,r2,1
    83cc:	e0bffe15 	stw	r2,-8(fp)
				break;
    83d0:	00005f06 	br	8550 <dac_buffer_load+0x22c>
			case 2:
				ad_reg_write_16(start_address + (index_mem + 0) * 2, sine_lut[index_i]);
    83d4:	e0bffe17 	ldw	r2,-8(fp)
    83d8:	1085883a 	add	r2,r2,r2
    83dc:	1007883a 	mov	r3,r2
    83e0:	e0bff817 	ldw	r2,-32(fp)
    83e4:	1889883a 	add	r4,r3,r2
    83e8:	e0bfff17 	ldw	r2,-4(fp)
    83ec:	1087883a 	add	r3,r2,r2
    83f0:	008000f4 	movhi	r2,3
    83f4:	1885883a 	add	r2,r3,r2
    83f8:	10871f0b 	ldhu	r2,7292(r2)
    83fc:	10bfffcc 	andi	r2,r2,65535
    8400:	100b883a 	mov	r5,r2
    8404:	000c5a00 	call	c5a0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 1) * 2, sine_lut[index_q]);
    8408:	e0bffe17 	ldw	r2,-8(fp)
    840c:	10800044 	addi	r2,r2,1
    8410:	1085883a 	add	r2,r2,r2
    8414:	1007883a 	mov	r3,r2
    8418:	e0bff817 	ldw	r2,-32(fp)
    841c:	1889883a 	add	r4,r3,r2
    8420:	e0bffc17 	ldw	r2,-16(fp)
    8424:	1087883a 	add	r3,r2,r2
    8428:	008000f4 	movhi	r2,3
    842c:	1885883a 	add	r2,r3,r2
    8430:	10871f0b 	ldhu	r2,7292(r2)
    8434:	10bfffcc 	andi	r2,r2,65535
    8438:	100b883a 	mov	r5,r2
    843c:	000c5a00 	call	c5a0 <ad_reg_write_16>
				index_mem += 2;
    8440:	e0bffe17 	ldw	r2,-8(fp)
    8444:	10800084 	addi	r2,r2,2
    8448:	e0bffe15 	stw	r2,-8(fp)
				break;
    844c:	00004006 	br	8550 <dac_buffer_load+0x22c>
			case 4:
				ad_reg_write_16(start_address + (index_mem + 0) * 2, sine_lut[index_i]);
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	1085883a 	add	r2,r2,r2
    8458:	1007883a 	mov	r3,r2
    845c:	e0bff817 	ldw	r2,-32(fp)
    8460:	1889883a 	add	r4,r3,r2
    8464:	e0bfff17 	ldw	r2,-4(fp)
    8468:	1087883a 	add	r3,r2,r2
    846c:	008000f4 	movhi	r2,3
    8470:	1885883a 	add	r2,r3,r2
    8474:	10871f0b 	ldhu	r2,7292(r2)
    8478:	10bfffcc 	andi	r2,r2,65535
    847c:	100b883a 	mov	r5,r2
    8480:	000c5a00 	call	c5a0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 1) * 2, sine_lut[index_q]);
    8484:	e0bffe17 	ldw	r2,-8(fp)
    8488:	10800044 	addi	r2,r2,1
    848c:	1085883a 	add	r2,r2,r2
    8490:	1007883a 	mov	r3,r2
    8494:	e0bff817 	ldw	r2,-32(fp)
    8498:	1889883a 	add	r4,r3,r2
    849c:	e0bffc17 	ldw	r2,-16(fp)
    84a0:	1087883a 	add	r3,r2,r2
    84a4:	008000f4 	movhi	r2,3
    84a8:	1885883a 	add	r2,r3,r2
    84ac:	10871f0b 	ldhu	r2,7292(r2)
    84b0:	10bfffcc 	andi	r2,r2,65535
    84b4:	100b883a 	mov	r5,r2
    84b8:	000c5a00 	call	c5a0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 2) * 2, sine_lut[index_i]);
    84bc:	e0bffe17 	ldw	r2,-8(fp)
    84c0:	10800084 	addi	r2,r2,2
    84c4:	1085883a 	add	r2,r2,r2
    84c8:	1007883a 	mov	r3,r2
    84cc:	e0bff817 	ldw	r2,-32(fp)
    84d0:	1889883a 	add	r4,r3,r2
    84d4:	e0bfff17 	ldw	r2,-4(fp)
    84d8:	1087883a 	add	r3,r2,r2
    84dc:	008000f4 	movhi	r2,3
    84e0:	1885883a 	add	r2,r3,r2
    84e4:	10871f0b 	ldhu	r2,7292(r2)
    84e8:	10bfffcc 	andi	r2,r2,65535
    84ec:	100b883a 	mov	r5,r2
    84f0:	000c5a00 	call	c5a0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 3) * 2, sine_lut[index_q]);
    84f4:	e0bffe17 	ldw	r2,-8(fp)
    84f8:	108000c4 	addi	r2,r2,3
    84fc:	1085883a 	add	r2,r2,r2
    8500:	1007883a 	mov	r3,r2
    8504:	e0bff817 	ldw	r2,-32(fp)
    8508:	1889883a 	add	r4,r3,r2
    850c:	e0bffc17 	ldw	r2,-16(fp)
    8510:	1087883a 	add	r3,r2,r2
    8514:	008000f4 	movhi	r2,3
    8518:	1885883a 	add	r2,r3,r2
    851c:	10871f0b 	ldhu	r2,7292(r2)
    8520:	10bfffcc 	andi	r2,r2,65535
    8524:	100b883a 	mov	r5,r2
    8528:	000c5a00 	call	c5a0 <ad_reg_write_16>
				index_mem += 4;
    852c:	e0bffe17 	ldw	r2,-8(fp)
    8530:	10800104 	addi	r2,r2,4
    8534:	e0bffe15 	stw	r2,-8(fp)
				break;
    8538:	00000506 	br	8550 <dac_buffer_load+0x22c>
			default:
				ad_printf("Unsupported mode.\n\r");
    853c:	010000f4 	movhi	r4,3
    8540:	21091f04 	addi	r4,r4,9340
    8544:	001634c0 	call	1634c <printf>
				return -1;
    8548:	00bfffc4 	movi	r2,-1
    854c:	00000b06 	br	857c <dac_buffer_load+0x258>
	for (index_i = 0; index_i < no_of_samples; index_i++) {
    8550:	e0bfff17 	ldw	r2,-4(fp)
    8554:	10800044 	addi	r2,r2,1
    8558:	e0bfff15 	stw	r2,-4(fp)
    855c:	e0ffff17 	ldw	r3,-4(fp)
    8560:	e0bffd17 	ldw	r2,-12(fp)
    8564:	18bf7c36 	bltu	r3,r2,8358 <__alt_mem_mcu_subsystem_ram_0+0x77fe8358>
		}
	}

	ad_dcache_flush();
    8568:	002530c0 	call	2530c <alt_icache_flush_all>

	return (core.no_of_channels * no_of_samples);
    856c:	e0bffa43 	ldbu	r2,-23(fp)
    8570:	10c03fcc 	andi	r3,r2,255
    8574:	e0bffd17 	ldw	r2,-12(fp)
    8578:	1885383a 	mul	r2,r3,r2
}
    857c:	e037883a 	mov	sp,fp
    8580:	dfc00117 	ldw	ra,4(sp)
    8584:	df000017 	ldw	fp,0(sp)
    8588:	dec00204 	addi	sp,sp,8
    858c:	f800283a 	ret

00008590 <dac_read>:
 * @brief dac_read
 *******************************************************************************/
int32_t dac_read(dac_core *core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    8590:	defffc04 	addi	sp,sp,-16
    8594:	df000315 	stw	fp,12(sp)
    8598:	df000304 	addi	fp,sp,12
    859c:	e13fff15 	stw	r4,-4(fp)
    85a0:	e17ffe15 	stw	r5,-8(fp)
    85a4:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((core->base_address + 0x4000 + reg_addr));
    85a8:	e0bfff17 	ldw	r2,-4(fp)
    85ac:	10c00017 	ldw	r3,0(r2)
    85b0:	e0bffe17 	ldw	r2,-8(fp)
    85b4:	1885883a 	add	r2,r3,r2
    85b8:	10900004 	addi	r2,r2,16384
    85bc:	10800037 	ldwio	r2,0(r2)
    85c0:	1007883a 	mov	r3,r2
    85c4:	e0bffd17 	ldw	r2,-12(fp)
    85c8:	10c00015 	stw	r3,0(r2)

	if (*reg_data == 0xDEADDEAD) {
    85cc:	e0bffd17 	ldw	r2,-12(fp)
    85d0:	10c00017 	ldw	r3,0(r2)
    85d4:	00b7abb4 	movhi	r2,57006
    85d8:	10b7ab44 	addi	r2,r2,-8531
    85dc:	1880021e 	bne	r3,r2,85e8 <dac_read+0x58>
		#ifdef DEBUG
			ad_printf("dac_read faild for register: %x", reg_addr);
		#endif
		return -1;
    85e0:	00bfffc4 	movi	r2,-1
    85e4:	00000106 	br	85ec <dac_read+0x5c>
	} else {
		return 0;
    85e8:	0005883a 	mov	r2,zero
	}
}
    85ec:	e037883a 	mov	sp,fp
    85f0:	df000017 	ldw	fp,0(sp)
    85f4:	dec00104 	addi	sp,sp,4
    85f8:	f800283a 	ret

000085fc <dac_write>:
 * @brief dac_write
 *******************************************************************************/
int32_t dac_write(dac_core *core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    85fc:	defffc04 	addi	sp,sp,-16
    8600:	df000315 	stw	fp,12(sp)
    8604:	df000304 	addi	fp,sp,12
    8608:	e13fff15 	stw	r4,-4(fp)
    860c:	e17ffe15 	stw	r5,-8(fp)
    8610:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((core->base_address + 0x4000 + reg_addr), reg_data);
    8614:	e0bfff17 	ldw	r2,-4(fp)
    8618:	10c00017 	ldw	r3,0(r2)
    861c:	e0bffe17 	ldw	r2,-8(fp)
    8620:	1885883a 	add	r2,r3,r2
    8624:	10900004 	addi	r2,r2,16384
    8628:	1007883a 	mov	r3,r2
    862c:	e0bffd17 	ldw	r2,-12(fp)
    8630:	18800035 	stwio	r2,0(r3)
		#ifdef DEBUG
			uint32_t reg_data_r;
			return dac_read(core, reg_addr, &reg_data_r);
		#endif

	return 0;
    8634:	0005883a 	mov	r2,zero
}
    8638:	e037883a 	mov	sp,fp
    863c:	df000017 	ldw	fp,0(sp)
    8640:	dec00104 	addi	sp,sp,4
    8644:	f800283a 	ret

00008648 <dds_set_frequency>:
 *******************************************************************************/

// freq is in Hz (i.e. set to 1*1000*1000 for 1 MHz)

int32_t dds_set_frequency(dac_core *core, uint32_t chan, uint32_t freq)
{
    8648:	defff104 	addi	sp,sp,-60
    864c:	dfc00e15 	stw	ra,56(sp)
    8650:	df000d15 	stw	fp,52(sp)
    8654:	dcc00c15 	stw	r19,48(sp)
    8658:	dc800b15 	stw	r18,44(sp)
    865c:	dc400a15 	stw	r17,40(sp)
    8660:	dc000915 	stw	r16,36(sp)
    8664:	df000d04 	addi	fp,sp,52
    8668:	e13ff515 	stw	r4,-44(fp)
    866c:	e17ff415 	stw	r5,-48(fp)
    8670:	e1bff315 	stw	r6,-52(fp)
	uint32_t val;
	uint64_t val64;
	uint32_t reg;
	uint64_t dac_clk;

	dac_read(core, DAC_REG_CLK_FREQ, &val);
    8674:	e0bff704 	addi	r2,fp,-36
    8678:	100d883a 	mov	r6,r2
    867c:	01401504 	movi	r5,84
    8680:	e13ff517 	ldw	r4,-44(fp)
    8684:	00085900 	call	8590 <dac_read>
	dac_clk = val * ((100*1000*1000)/65535);
    8688:	e0bff717 	ldw	r2,-36(fp)
    868c:	10817d64 	muli	r2,r2,1525
    8690:	e0bffa15 	stw	r2,-24(fp)
    8694:	e03ffb15 	stw	zero,-20(fp)
	dac_read(core, DAC_REG_CLK_RATIO, &val);
    8698:	e0bff704 	addi	r2,fp,-36
    869c:	100d883a 	mov	r6,r2
    86a0:	01401604 	movi	r5,88
    86a4:	e13ff517 	ldw	r4,-44(fp)
    86a8:	00085900 	call	8590 <dac_read>
	dac_clk *= val;
    86ac:	e0bff717 	ldw	r2,-36(fp)
    86b0:	1025883a 	mov	r18,r2
    86b4:	0027883a 	mov	r19,zero
    86b8:	900d883a 	mov	r6,r18
    86bc:	980f883a 	mov	r7,r19
    86c0:	e13ffa17 	ldw	r4,-24(fp)
    86c4:	e17ffb17 	ldw	r5,-20(fp)
    86c8:	0011cdc0 	call	11cdc <__muldi3>
    86cc:	1009883a 	mov	r4,r2
    86d0:	180b883a 	mov	r5,r3
    86d4:	e13ffa15 	stw	r4,-24(fp)
    86d8:	e17ffb15 	stw	r5,-20(fp)

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
    86dc:	000d883a 	mov	r6,zero
    86e0:	01401104 	movi	r5,68
    86e4:	e13ff517 	ldw	r4,-44(fp)
    86e8:	00085fc0 	call	85fc <dac_write>
	dac_read(core, DAC_REG_DDS_INIT_INCR(chan), &reg);
    86ec:	e0bff417 	ldw	r2,-48(fp)
    86f0:	1004d07a 	srli	r2,r2,1
    86f4:	100690fa 	slli	r3,r2,3
    86f8:	e0bff417 	ldw	r2,-48(fp)
    86fc:	1080004c 	andi	r2,r2,1
    8700:	1885883a 	add	r2,r3,r2
    8704:	100490fa 	slli	r2,r2,3
    8708:	10810104 	addi	r2,r2,1028
    870c:	e0fff604 	addi	r3,fp,-40
    8710:	180d883a 	mov	r6,r3
    8714:	100b883a 	mov	r5,r2
    8718:	e13ff517 	ldw	r4,-44(fp)
    871c:	00085900 	call	8590 <dac_read>
	val64 = (uint64_t) freq * 0xFFFFULL;
    8720:	e0bff317 	ldw	r2,-52(fp)
    8724:	1021883a 	mov	r16,r2
    8728:	0023883a 	mov	r17,zero
    872c:	01bfffd4 	movui	r6,65535
    8730:	000f883a 	mov	r7,zero
    8734:	8009883a 	mov	r4,r16
    8738:	880b883a 	mov	r5,r17
    873c:	0011cdc0 	call	11cdc <__muldi3>
    8740:	1009883a 	mov	r4,r2
    8744:	180b883a 	mov	r5,r3
    8748:	e13ff815 	stw	r4,-32(fp)
    874c:	e17ff915 	stw	r5,-28(fp)
	val64 = val64 / dac_clk;
    8750:	e1bffa17 	ldw	r6,-24(fp)
    8754:	e1fffb17 	ldw	r7,-20(fp)
    8758:	e13ff817 	ldw	r4,-32(fp)
    875c:	e17ff917 	ldw	r5,-28(fp)
    8760:	0011e680 	call	11e68 <__udivdi3>
    8764:	1009883a 	mov	r4,r2
    8768:	180b883a 	mov	r5,r3
    876c:	e13ff815 	stw	r4,-32(fp)
    8770:	e17ff915 	stw	r5,-28(fp)
	reg = (reg & ~DAC_DDS_INCR(~0)) | DAC_DDS_INCR(val64) | 1;
    8774:	e0bff617 	ldw	r2,-40(fp)
    8778:	10ffffec 	andhi	r3,r2,65535
    877c:	e0bff817 	ldw	r2,-32(fp)
    8780:	10bfffcc 	andi	r2,r2,65535
    8784:	1884b03a 	or	r2,r3,r2
    8788:	10800054 	ori	r2,r2,1
    878c:	e0bff615 	stw	r2,-40(fp)
	dac_write(core, DAC_REG_DDS_INIT_INCR(chan), reg);
    8790:	e0bff417 	ldw	r2,-48(fp)
    8794:	1004d07a 	srli	r2,r2,1
    8798:	100690fa 	slli	r3,r2,3
    879c:	e0bff417 	ldw	r2,-48(fp)
    87a0:	1080004c 	andi	r2,r2,1
    87a4:	1885883a 	add	r2,r3,r2
    87a8:	100490fa 	slli	r2,r2,3
    87ac:	10810104 	addi	r2,r2,1028
    87b0:	e0fff617 	ldw	r3,-40(fp)
    87b4:	180d883a 	mov	r6,r3
    87b8:	100b883a 	mov	r5,r2
    87bc:	e13ff517 	ldw	r4,-44(fp)
    87c0:	00085fc0 	call	85fc <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    87c4:	01800044 	movi	r6,1
    87c8:	01401104 	movi	r5,68
    87cc:	e13ff517 	ldw	r4,-44(fp)
    87d0:	00085fc0 	call	85fc <dac_write>

	return 0;
    87d4:	0005883a 	mov	r2,zero
}
    87d8:	e6fffc04 	addi	sp,fp,-16
    87dc:	dfc00517 	ldw	ra,20(sp)
    87e0:	df000417 	ldw	fp,16(sp)
    87e4:	dcc00317 	ldw	r19,12(sp)
    87e8:	dc800217 	ldw	r18,8(sp)
    87ec:	dc400117 	ldw	r17,4(sp)
    87f0:	dc000017 	ldw	r16,0(sp)
    87f4:	dec00604 	addi	sp,sp,24
    87f8:	f800283a 	ret

000087fc <dds_set_phase>:
 *******************************************************************************/

// phase is in milli(?) angles scaled to 1000 (i.e. 90*1000 is 90 degrees (pi/2))

int32_t dds_set_phase(dac_core *core, uint32_t chan, uint32_t phase)
{
    87fc:	defff404 	addi	sp,sp,-48
    8800:	dfc00b15 	stw	ra,44(sp)
    8804:	df000a15 	stw	fp,40(sp)
    8808:	dcc00915 	stw	r19,36(sp)
    880c:	dc800815 	stw	r18,32(sp)
    8810:	dc400715 	stw	r17,28(sp)
    8814:	dc000615 	stw	r16,24(sp)
    8818:	df000a04 	addi	fp,sp,40
    881c:	e13ff815 	stw	r4,-32(fp)
    8820:	e17ff715 	stw	r5,-36(fp)
    8824:	e1bff615 	stw	r6,-40(fp)
	uint64_t val64;
	uint32_t reg;

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
    8828:	000d883a 	mov	r6,zero
    882c:	01401104 	movi	r5,68
    8830:	e13ff817 	ldw	r4,-32(fp)
    8834:	00085fc0 	call	85fc <dac_write>
	dac_read(core, DAC_REG_DDS_INIT_INCR(chan), &reg);
    8838:	e0bff717 	ldw	r2,-36(fp)
    883c:	1004d07a 	srli	r2,r2,1
    8840:	100690fa 	slli	r3,r2,3
    8844:	e0bff717 	ldw	r2,-36(fp)
    8848:	1080004c 	andi	r2,r2,1
    884c:	1885883a 	add	r2,r3,r2
    8850:	100490fa 	slli	r2,r2,3
    8854:	10810104 	addi	r2,r2,1028
    8858:	e0fff904 	addi	r3,fp,-28
    885c:	180d883a 	mov	r6,r3
    8860:	100b883a 	mov	r5,r2
    8864:	e13ff817 	ldw	r4,-32(fp)
    8868:	00085900 	call	8590 <dac_read>
	val64 = (uint64_t) phase * 0x10000ULL + (360000 / 2);
    886c:	e0bff617 	ldw	r2,-40(fp)
    8870:	1025883a 	mov	r18,r2
    8874:	0027883a 	mov	r19,zero
    8878:	9004d43a 	srli	r2,r18,16
    887c:	9822943a 	slli	r17,r19,16
    8880:	1462b03a 	or	r17,r2,r17
    8884:	9020943a 	slli	r16,r18,16
    8888:	010000f4 	movhi	r4,3
    888c:	212fc804 	addi	r4,r4,-16608
    8890:	000b883a 	mov	r5,zero
    8894:	8105883a 	add	r2,r16,r4
    8898:	140d803a 	cmpltu	r6,r2,r16
    889c:	8947883a 	add	r3,r17,r5
    88a0:	30c9883a 	add	r4,r6,r3
    88a4:	2007883a 	mov	r3,r4
    88a8:	e0bffa15 	stw	r2,-24(fp)
    88ac:	e0fffb15 	stw	r3,-20(fp)
	val64 = val64 / 360000;
    88b0:	e0bffa17 	ldw	r2,-24(fp)
    88b4:	e0fffb17 	ldw	r3,-20(fp)
    88b8:	01800174 	movhi	r6,5
    88bc:	319f9004 	addi	r6,r6,32320
    88c0:	000f883a 	mov	r7,zero
    88c4:	1009883a 	mov	r4,r2
    88c8:	180b883a 	mov	r5,r3
    88cc:	0011e680 	call	11e68 <__udivdi3>
    88d0:	1009883a 	mov	r4,r2
    88d4:	180b883a 	mov	r5,r3
    88d8:	e13ffa15 	stw	r4,-24(fp)
    88dc:	e17ffb15 	stw	r5,-20(fp)
	reg = (reg & ~DAC_DDS_INIT(~0)) | DAC_DDS_INIT(val64);
    88e0:	e0bff917 	ldw	r2,-28(fp)
    88e4:	10ffffcc 	andi	r3,r2,65535
    88e8:	e0bffa17 	ldw	r2,-24(fp)
    88ec:	1004943a 	slli	r2,r2,16
    88f0:	1884b03a 	or	r2,r3,r2
    88f4:	e0bff915 	stw	r2,-28(fp)
	dac_write(core, DAC_REG_DDS_INIT_INCR(chan), reg);
    88f8:	e0bff717 	ldw	r2,-36(fp)
    88fc:	1004d07a 	srli	r2,r2,1
    8900:	100690fa 	slli	r3,r2,3
    8904:	e0bff717 	ldw	r2,-36(fp)
    8908:	1080004c 	andi	r2,r2,1
    890c:	1885883a 	add	r2,r3,r2
    8910:	100490fa 	slli	r2,r2,3
    8914:	10810104 	addi	r2,r2,1028
    8918:	e0fff917 	ldw	r3,-28(fp)
    891c:	180d883a 	mov	r6,r3
    8920:	100b883a 	mov	r5,r2
    8924:	e13ff817 	ldw	r4,-32(fp)
    8928:	00085fc0 	call	85fc <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    892c:	01800044 	movi	r6,1
    8930:	01401104 	movi	r5,68
    8934:	e13ff817 	ldw	r4,-32(fp)
    8938:	00085fc0 	call	85fc <dac_write>

	return 0;
    893c:	0005883a 	mov	r2,zero
}
    8940:	e6fffc04 	addi	sp,fp,-16
    8944:	dfc00517 	ldw	ra,20(sp)
    8948:	df000417 	ldw	fp,16(sp)
    894c:	dcc00317 	ldw	r19,12(sp)
    8950:	dc800217 	ldw	r18,8(sp)
    8954:	dc400117 	ldw	r17,4(sp)
    8958:	dc000017 	ldw	r16,0(sp)
    895c:	dec00604 	addi	sp,sp,24
    8960:	f800283a 	ret

00008964 <dds_set_scale>:
// scale range is (-1.99 to +1.99) - hardware supports -2.0, but we ignore it.
// do not get fancy, above 1.0 (or below -1.0) will mess the dds tones.
// dds always runs 16bits-- so unless your data path handles it- stay within -1 to +1.

int32_t dds_set_scale(dac_core *core, uint32_t chan, int32_t scale_micro_units)
{
    8964:	defff504 	addi	sp,sp,-44
    8968:	dfc00a15 	stw	ra,40(sp)
    896c:	df000915 	stw	fp,36(sp)
    8970:	dcc00815 	stw	r19,32(sp)
    8974:	dc800715 	stw	r18,28(sp)
    8978:	dc400615 	stw	r17,24(sp)
    897c:	dc000515 	stw	r16,20(sp)
    8980:	df000904 	addi	fp,sp,36
    8984:	e13ff915 	stw	r4,-28(fp)
    8988:	e17ff815 	stw	r5,-32(fp)
    898c:	e1bff715 	stw	r6,-36(fp)
	uint32_t pcore_version;
	uint32_t scale_reg;

	dac_read(core, DAC_REG_VERSION, &pcore_version);
    8990:	e0bffa04 	addi	r2,fp,-24
    8994:	100d883a 	mov	r6,r2
    8998:	000b883a 	mov	r5,zero
    899c:	e13ff917 	ldw	r4,-28(fp)
    89a0:	00085900 	call	8590 <dac_read>

	// only ise projects support binary shift scaling, if you think you need
	// this supported in this driver, let us know.

	if (DAC_PCORE_VERSION_MAJOR(pcore_version) < 6)
    89a4:	e0bffa17 	ldw	r2,-24(fp)
    89a8:	1004d43a 	srli	r2,r2,16
    89ac:	108001a8 	cmpgeui	r2,r2,6
    89b0:	1000071e 	bne	r2,zero,89d0 <dds_set_scale+0x6c>
	{
		ad_printf("%s ERROR: Sorry, binary scale is NOT supported!\n", __func__);
    89b4:	014000f4 	movhi	r5,3
    89b8:	29494104 	addi	r5,r5,9476
    89bc:	010000f4 	movhi	r4,3
    89c0:	21092404 	addi	r4,r4,9360
    89c4:	001634c0 	call	1634c <printf>
		return(-1);
    89c8:	00bfffc4 	movi	r2,-1
    89cc:	00003c06 	br	8ac0 <dds_set_scale+0x15c>
	}

	scale_reg = scale_micro_units;
    89d0:	e0bff717 	ldw	r2,-36(fp)
    89d4:	e0bffb15 	stw	r2,-20(fp)
	if (scale_micro_units < 0)
    89d8:	e0bff717 	ldw	r2,-36(fp)
    89dc:	1000030e 	bge	r2,zero,89ec <dds_set_scale+0x88>
		scale_reg = scale_micro_units * -1;
    89e0:	e0bff717 	ldw	r2,-36(fp)
    89e4:	0085c83a 	sub	r2,zero,r2
    89e8:	e0bffb15 	stw	r2,-20(fp)
	if (scale_reg >= 1999000)
    89ec:	e0fffb17 	ldw	r3,-20(fp)
    89f0:	008007f4 	movhi	r2,31
    89f4:	10a025c4 	addi	r2,r2,-32617
    89f8:	10c0032e 	bgeu	r2,r3,8a08 <dds_set_scale+0xa4>
		scale_reg = 1999000;
    89fc:	008007f4 	movhi	r2,31
    8a00:	10a02604 	addi	r2,r2,-32616
    8a04:	e0bffb15 	stw	r2,-20(fp)
	scale_reg = (uint32_t)(((uint64_t)scale_reg * 0x4000) / 1000000);
    8a08:	e0bffb17 	ldw	r2,-20(fp)
    8a0c:	1025883a 	mov	r18,r2
    8a10:	0027883a 	mov	r19,zero
    8a14:	9004d4ba 	srli	r2,r18,18
    8a18:	982293ba 	slli	r17,r19,14
    8a1c:	1462b03a 	or	r17,r2,r17
    8a20:	902093ba 	slli	r16,r18,14
    8a24:	018003f4 	movhi	r6,15
    8a28:	31909004 	addi	r6,r6,16960
    8a2c:	000f883a 	mov	r7,zero
    8a30:	8009883a 	mov	r4,r16
    8a34:	880b883a 	mov	r5,r17
    8a38:	0011e680 	call	11e68 <__udivdi3>
    8a3c:	1009883a 	mov	r4,r2
    8a40:	180b883a 	mov	r5,r3
    8a44:	2005883a 	mov	r2,r4
    8a48:	2807883a 	mov	r3,r5
    8a4c:	e0bffb15 	stw	r2,-20(fp)
	if (scale_micro_units < 0)
    8a50:	e0bff717 	ldw	r2,-36(fp)
    8a54:	1000030e 	bge	r2,zero,8a64 <dds_set_scale+0x100>
		scale_reg = scale_reg | 0x8000;
    8a58:	e0bffb17 	ldw	r2,-20(fp)
    8a5c:	10a00014 	ori	r2,r2,32768
    8a60:	e0bffb15 	stw	r2,-20(fp)

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
    8a64:	000d883a 	mov	r6,zero
    8a68:	01401104 	movi	r5,68
    8a6c:	e13ff917 	ldw	r4,-28(fp)
    8a70:	00085fc0 	call	85fc <dac_write>
	dac_write(core, DAC_REG_DDS_SCALE(chan), DAC_DDS_SCALE(scale_reg));
    8a74:	e0bff817 	ldw	r2,-32(fp)
    8a78:	1004d07a 	srli	r2,r2,1
    8a7c:	10800404 	addi	r2,r2,16
    8a80:	100690fa 	slli	r3,r2,3
    8a84:	e0bff817 	ldw	r2,-32(fp)
    8a88:	1080004c 	andi	r2,r2,1
    8a8c:	1885883a 	add	r2,r3,r2
    8a90:	100690fa 	slli	r3,r2,3
    8a94:	e0bffb17 	ldw	r2,-20(fp)
    8a98:	10bfffcc 	andi	r2,r2,65535
    8a9c:	100d883a 	mov	r6,r2
    8aa0:	180b883a 	mov	r5,r3
    8aa4:	e13ff917 	ldw	r4,-28(fp)
    8aa8:	00085fc0 	call	85fc <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    8aac:	01800044 	movi	r6,1
    8ab0:	01401104 	movi	r5,68
    8ab4:	e13ff917 	ldw	r4,-28(fp)
    8ab8:	00085fc0 	call	85fc <dac_write>
	return(0);
    8abc:	0005883a 	mov	r2,zero
}
    8ac0:	e6fffc04 	addi	sp,fp,-16
    8ac4:	dfc00517 	ldw	ra,20(sp)
    8ac8:	df000417 	ldw	fp,16(sp)
    8acc:	dcc00317 	ldw	r19,12(sp)
    8ad0:	dc800217 	ldw	r18,8(sp)
    8ad4:	dc400117 	ldw	r17,4(sp)
    8ad8:	dc000017 	ldw	r16,0(sp)
    8adc:	dec00604 	addi	sp,sp,24
    8ae0:	f800283a 	ret

00008ae4 <dac_data_src_sel>:
/***************************************************************************//**
 * @brief dac_data_src_sel
 *******************************************************************************/

int32_t dac_data_src_sel(dac_core *core, int32_t chan, dac_data_src src)
{
    8ae4:	defff804 	addi	sp,sp,-32
    8ae8:	dfc00715 	stw	ra,28(sp)
    8aec:	df000615 	stw	fp,24(sp)
    8af0:	df000604 	addi	fp,sp,24
    8af4:	e13ffc15 	stw	r4,-16(fp)
    8af8:	e17ffb15 	stw	r5,-20(fp)
    8afc:	e1bffa15 	stw	r6,-24(fp)
	uint32_t pcore_version;
	uint32_t reg;
	int32_t i;

	dac_read(core, DAC_REG_VERSION, &pcore_version);
    8b00:	e0bffe04 	addi	r2,fp,-8
    8b04:	100d883a 	mov	r6,r2
    8b08:	000b883a 	mov	r5,zero
    8b0c:	e13ffc17 	ldw	r4,-16(fp)
    8b10:	00085900 	call	8590 <dac_read>

	// single core control for all channels

	if (DAC_PCORE_VERSION_MAJOR(pcore_version) < 7)
    8b14:	e0bffe17 	ldw	r2,-8(fp)
    8b18:	1004d43a 	srli	r2,r2,16
    8b1c:	108001e8 	cmpgeui	r2,r2,7
    8b20:	1000131e 	bne	r2,zero,8b70 <dac_data_src_sel+0x8c>
	{
		dac_read(core, DAC_REG_DATA_CONTROL, &reg);
    8b24:	e0bffd04 	addi	r2,fp,-12
    8b28:	100d883a 	mov	r6,r2
    8b2c:	01401204 	movi	r5,72
    8b30:	e13ffc17 	ldw	r4,-16(fp)
    8b34:	00085900 	call	8590 <dac_read>
		reg = (reg & ~DAC_DATA_SEL(~0)) | DAC_DATA_SEL(src);
    8b38:	e0fffd17 	ldw	r3,-12(fp)
    8b3c:	00bffc04 	movi	r2,-16
    8b40:	1886703a 	and	r3,r3,r2
    8b44:	e0bffa17 	ldw	r2,-24(fp)
    8b48:	108003cc 	andi	r2,r2,15
    8b4c:	1884b03a 	or	r2,r3,r2
    8b50:	e0bffd15 	stw	r2,-12(fp)
		dac_write(core, DAC_REG_DATA_CONTROL, reg);
    8b54:	e0bffd17 	ldw	r2,-12(fp)
    8b58:	100d883a 	mov	r6,r2
    8b5c:	01401204 	movi	r5,72
    8b60:	e13ffc17 	ldw	r4,-16(fp)
    8b64:	00085fc0 	call	85fc <dac_write>
		return(0);
    8b68:	0005883a 	mov	r2,zero
    8b6c:	00001d06 	br	8be4 <dac_data_src_sel+0x100>
	}

	// per channel source select

	for (i = 0; i < (core->no_of_channels * 2); i++)
    8b70:	e03fff15 	stw	zero,-4(fp)
    8b74:	00000f06 	br	8bb4 <dac_data_src_sel+0xd0>
	{
		if ((chan < 0) || (chan == i))
    8b78:	e0bffb17 	ldw	r2,-20(fp)
    8b7c:	10000316 	blt	r2,zero,8b8c <dac_data_src_sel+0xa8>
    8b80:	e0fffb17 	ldw	r3,-20(fp)
    8b84:	e0bfff17 	ldw	r2,-4(fp)
    8b88:	1880071e 	bne	r3,r2,8ba8 <dac_data_src_sel+0xc4>
			dac_write(core, DAC_REG_DATA_SELECT(i), src);
    8b8c:	e0bfff17 	ldw	r2,-4(fp)
    8b90:	100491ba 	slli	r2,r2,6
    8b94:	10810604 	addi	r2,r2,1048
    8b98:	e1bffa17 	ldw	r6,-24(fp)
    8b9c:	100b883a 	mov	r5,r2
    8ba0:	e13ffc17 	ldw	r4,-16(fp)
    8ba4:	00085fc0 	call	85fc <dac_write>
	for (i = 0; i < (core->no_of_channels * 2); i++)
    8ba8:	e0bfff17 	ldw	r2,-4(fp)
    8bac:	10800044 	addi	r2,r2,1
    8bb0:	e0bfff15 	stw	r2,-4(fp)
    8bb4:	e0bffc17 	ldw	r2,-16(fp)
    8bb8:	10800143 	ldbu	r2,5(r2)
    8bbc:	10803fcc 	andi	r2,r2,255
    8bc0:	1085883a 	add	r2,r2,r2
    8bc4:	1007883a 	mov	r3,r2
    8bc8:	e0bfff17 	ldw	r2,-4(fp)
    8bcc:	10ffea16 	blt	r2,r3,8b78 <__alt_mem_mcu_subsystem_ram_0+0x77fe8b78>
	}
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    8bd0:	01800044 	movi	r6,1
    8bd4:	01401104 	movi	r5,68
    8bd8:	e13ffc17 	ldw	r4,-16(fp)
    8bdc:	00085fc0 	call	85fc <dac_write>

	return(0);
    8be0:	0005883a 	mov	r2,zero
}
    8be4:	e037883a 	mov	sp,fp
    8be8:	dfc00117 	ldw	ra,4(sp)
    8bec:	df000017 	ldw	fp,0(sp)
    8bf0:	dec00204 	addi	sp,sp,8
    8bf4:	f800283a 	ret

00008bf8 <dac_setup>:

/***************************************************************************//**
 * @brief dac_setup
 *******************************************************************************/
int32_t dac_setup(dac_core *core)
{
    8bf8:	defffb04 	addi	sp,sp,-20
    8bfc:	dfc00415 	stw	ra,16(sp)
    8c00:	df000315 	stw	fp,12(sp)
    8c04:	df000304 	addi	fp,sp,12
    8c08:	e13ffd15 	stw	r4,-12(fp)
	uint32_t reg_data;
	uint32_t dac_clock;

	dac_write(core, DAC_REG_RSTN, 0x00);
    8c0c:	000d883a 	mov	r6,zero
    8c10:	01401004 	movi	r5,64
    8c14:	e13ffd17 	ldw	r4,-12(fp)
    8c18:	00085fc0 	call	85fc <dac_write>
	dac_write(core, DAC_REG_RSTN, 0x03);
    8c1c:	018000c4 	movi	r6,3
    8c20:	01401004 	movi	r5,64
    8c24:	e13ffd17 	ldw	r4,-12(fp)
    8c28:	00085fc0 	call	85fc <dac_write>
	mdelay(100);
    8c2c:	010000b4 	movhi	r4,2
    8c30:	2121a804 	addi	r4,r4,-31072
    8c34:	0025e400 	call	25e40 <usleep>

	dac_read(core, DAC_REG_STATUS, &reg_data);
    8c38:	e0bfff04 	addi	r2,fp,-4
    8c3c:	100d883a 	mov	r6,r2
    8c40:	01401704 	movi	r5,92
    8c44:	e13ffd17 	ldw	r4,-12(fp)
    8c48:	00085900 	call	8590 <dac_read>
	if (reg_data == 0x0) {
    8c4c:	e0bfff17 	ldw	r2,-4(fp)
    8c50:	1000071e 	bne	r2,zero,8c70 <dac_setup+0x78>
		ad_printf("%s DAC Core Status errors.\n", __func__);
    8c54:	014000f4 	movhi	r5,3
    8c58:	29494504 	addi	r5,r5,9492
    8c5c:	010000f4 	movhi	r4,3
    8c60:	21093104 	addi	r4,r4,9412
    8c64:	001634c0 	call	1634c <printf>
		return -1;
    8c68:	00bfffc4 	movi	r2,-1
    8c6c:	00001d06 	br	8ce4 <dac_setup+0xec>
	}

	dac_read(core, DAC_REG_CLK_FREQ, &dac_clock);
    8c70:	e0bffe04 	addi	r2,fp,-8
    8c74:	100d883a 	mov	r6,r2
    8c78:	01401504 	movi	r5,84
    8c7c:	e13ffd17 	ldw	r4,-12(fp)
    8c80:	00085900 	call	8590 <dac_read>
	dac_read(core, DAC_REG_CLK_RATIO, &reg_data);
    8c84:	e0bfff04 	addi	r2,fp,-4
    8c88:	100d883a 	mov	r6,r2
    8c8c:	01401604 	movi	r5,88
    8c90:	e13ffd17 	ldw	r4,-12(fp)
    8c94:	00085900 	call	8590 <dac_read>
	dac_clock = (dac_clock * reg_data * 100) + 0x7fff;
    8c98:	e0fffe17 	ldw	r3,-8(fp)
    8c9c:	e0bfff17 	ldw	r2,-4(fp)
    8ca0:	1885383a 	mul	r2,r3,r2
    8ca4:	10801924 	muli	r2,r2,100
    8ca8:	109fffc4 	addi	r2,r2,32767
    8cac:	e0bffe15 	stw	r2,-8(fp)
	dac_clock = dac_clock >> 16;
    8cb0:	e0bffe17 	ldw	r2,-8(fp)
    8cb4:	1004d43a 	srli	r2,r2,16
    8cb8:	e0bffe15 	stw	r2,-8(fp)

	ad_printf("%s dac core initialized (%d MHz).\n", __func__, dac_clock);
    8cbc:	e0bffe17 	ldw	r2,-8(fp)
    8cc0:	100d883a 	mov	r6,r2
    8cc4:	014000f4 	movhi	r5,3
    8cc8:	29494504 	addi	r5,r5,9492
    8ccc:	010000f4 	movhi	r4,3
    8cd0:	21093804 	addi	r4,r4,9440
    8cd4:	001634c0 	call	1634c <printf>

	dac_data_setup(core);
    8cd8:	e13ffd17 	ldw	r4,-12(fp)
    8cdc:	0008cf80 	call	8cf8 <dac_data_setup>
	return 0;
    8ce0:	0005883a 	mov	r2,zero
}
    8ce4:	e037883a 	mov	sp,fp
    8ce8:	dfc00117 	ldw	ra,4(sp)
    8cec:	df000017 	ldw	fp,0(sp)
    8cf0:	dec00204 	addi	sp,sp,8
    8cf4:	f800283a 	ret

00008cf8 <dac_data_setup>:
/***************************************************************************//**
 * @brief dac_setup
 *******************************************************************************/

int32_t dac_data_setup(dac_core *core)
{
    8cf8:	defffb04 	addi	sp,sp,-20
    8cfc:	dfc00415 	stw	ra,16(sp)
    8d00:	df000315 	stw	fp,12(sp)
    8d04:	df000304 	addi	fp,sp,12
    8d08:	e13ffd15 	stw	r4,-12(fp)
	dac_channel *chan;
	uint32_t i;

	for (i = 0; i < core->no_of_channels; i++) {
    8d0c:	e03fff15 	stw	zero,-4(fp)
    8d10:	00007106 	br	8ed8 <dac_data_setup+0x1e0>
		chan = &core->channels[i];
    8d14:	e0bffd17 	ldw	r2,-12(fp)
    8d18:	10c00217 	ldw	r3,8(r2)
    8d1c:	e0bfff17 	ldw	r2,-4(fp)
    8d20:	10800924 	muli	r2,r2,36
    8d24:	1885883a 	add	r2,r3,r2
    8d28:	e0bffe15 	stw	r2,-8(fp)
		if (chan->sel == DAC_SRC_DDS)
    8d2c:	e0bffe17 	ldw	r2,-8(fp)
    8d30:	10800817 	ldw	r2,32(r2)
    8d34:	1000551e 	bne	r2,zero,8e8c <dac_data_setup+0x194>
		{
			dds_set_frequency(core, ((i*2)+0), chan->dds_frequency_0);
    8d38:	e0bfff17 	ldw	r2,-4(fp)
    8d3c:	1085883a 	add	r2,r2,r2
    8d40:	1007883a 	mov	r3,r2
    8d44:	e0bffe17 	ldw	r2,-8(fp)
    8d48:	10800017 	ldw	r2,0(r2)
    8d4c:	100d883a 	mov	r6,r2
    8d50:	180b883a 	mov	r5,r3
    8d54:	e13ffd17 	ldw	r4,-12(fp)
    8d58:	00086480 	call	8648 <dds_set_frequency>
			dds_set_phase(core, ((i*2)+0), chan->dds_phase_0);
    8d5c:	e0bfff17 	ldw	r2,-4(fp)
    8d60:	1085883a 	add	r2,r2,r2
    8d64:	1007883a 	mov	r3,r2
    8d68:	e0bffe17 	ldw	r2,-8(fp)
    8d6c:	10800117 	ldw	r2,4(r2)
    8d70:	100d883a 	mov	r6,r2
    8d74:	180b883a 	mov	r5,r3
    8d78:	e13ffd17 	ldw	r4,-12(fp)
    8d7c:	00087fc0 	call	87fc <dds_set_phase>
			dds_set_scale(core, ((i*2)+0), chan->dds_scale_0);
    8d80:	e0bfff17 	ldw	r2,-4(fp)
    8d84:	1085883a 	add	r2,r2,r2
    8d88:	1007883a 	mov	r3,r2
    8d8c:	e0bffe17 	ldw	r2,-8(fp)
    8d90:	10800217 	ldw	r2,8(r2)
    8d94:	100d883a 	mov	r6,r2
    8d98:	180b883a 	mov	r5,r3
    8d9c:	e13ffd17 	ldw	r4,-12(fp)
    8da0:	00089640 	call	8964 <dds_set_scale>
			if (chan->dds_dual_tone == 0)
    8da4:	e0bffe17 	ldw	r2,-8(fp)
    8da8:	10800617 	ldw	r2,24(r2)
    8dac:	10001c1e 	bne	r2,zero,8e20 <dac_data_setup+0x128>
			{
				dds_set_frequency(core, ((i*2)+1), chan->dds_frequency_0);
    8db0:	e0bfff17 	ldw	r2,-4(fp)
    8db4:	1085883a 	add	r2,r2,r2
    8db8:	10c00044 	addi	r3,r2,1
    8dbc:	e0bffe17 	ldw	r2,-8(fp)
    8dc0:	10800017 	ldw	r2,0(r2)
    8dc4:	100d883a 	mov	r6,r2
    8dc8:	180b883a 	mov	r5,r3
    8dcc:	e13ffd17 	ldw	r4,-12(fp)
    8dd0:	00086480 	call	8648 <dds_set_frequency>
				dds_set_phase(core, ((i*2)+1), chan->dds_phase_0);
    8dd4:	e0bfff17 	ldw	r2,-4(fp)
    8dd8:	1085883a 	add	r2,r2,r2
    8ddc:	10c00044 	addi	r3,r2,1
    8de0:	e0bffe17 	ldw	r2,-8(fp)
    8de4:	10800117 	ldw	r2,4(r2)
    8de8:	100d883a 	mov	r6,r2
    8dec:	180b883a 	mov	r5,r3
    8df0:	e13ffd17 	ldw	r4,-12(fp)
    8df4:	00087fc0 	call	87fc <dds_set_phase>
				dds_set_scale(core, ((i*2)+1), chan->dds_scale_0);
    8df8:	e0bfff17 	ldw	r2,-4(fp)
    8dfc:	1085883a 	add	r2,r2,r2
    8e00:	10c00044 	addi	r3,r2,1
    8e04:	e0bffe17 	ldw	r2,-8(fp)
    8e08:	10800217 	ldw	r2,8(r2)
    8e0c:	100d883a 	mov	r6,r2
    8e10:	180b883a 	mov	r5,r3
    8e14:	e13ffd17 	ldw	r4,-12(fp)
    8e18:	00089640 	call	8964 <dds_set_scale>
    8e1c:	00001b06 	br	8e8c <dac_data_setup+0x194>
			}
			else
			{
				dds_set_frequency(core, ((i*2)+1), chan->dds_frequency_1);
    8e20:	e0bfff17 	ldw	r2,-4(fp)
    8e24:	1085883a 	add	r2,r2,r2
    8e28:	10c00044 	addi	r3,r2,1
    8e2c:	e0bffe17 	ldw	r2,-8(fp)
    8e30:	10800317 	ldw	r2,12(r2)
    8e34:	100d883a 	mov	r6,r2
    8e38:	180b883a 	mov	r5,r3
    8e3c:	e13ffd17 	ldw	r4,-12(fp)
    8e40:	00086480 	call	8648 <dds_set_frequency>
				dds_set_phase(core, ((i*2)+1), chan->dds_phase_1);
    8e44:	e0bfff17 	ldw	r2,-4(fp)
    8e48:	1085883a 	add	r2,r2,r2
    8e4c:	10c00044 	addi	r3,r2,1
    8e50:	e0bffe17 	ldw	r2,-8(fp)
    8e54:	10800417 	ldw	r2,16(r2)
    8e58:	100d883a 	mov	r6,r2
    8e5c:	180b883a 	mov	r5,r3
    8e60:	e13ffd17 	ldw	r4,-12(fp)
    8e64:	00087fc0 	call	87fc <dds_set_phase>
				dds_set_scale(core, ((i*2)+1), chan->dds_scale_1);
    8e68:	e0bfff17 	ldw	r2,-4(fp)
    8e6c:	1085883a 	add	r2,r2,r2
    8e70:	10c00044 	addi	r3,r2,1
    8e74:	e0bffe17 	ldw	r2,-8(fp)
    8e78:	10800517 	ldw	r2,20(r2)
    8e7c:	100d883a 	mov	r6,r2
    8e80:	180b883a 	mov	r5,r3
    8e84:	e13ffd17 	ldw	r4,-12(fp)
    8e88:	00089640 	call	8964 <dds_set_scale>
			}
		}
		dac_write(core, DAC_REG_DATA_PATTERN(i), chan->pat_data);
    8e8c:	e0bfff17 	ldw	r2,-4(fp)
    8e90:	100491ba 	slli	r2,r2,6
    8e94:	10c10404 	addi	r3,r2,1040
    8e98:	e0bffe17 	ldw	r2,-8(fp)
    8e9c:	10800717 	ldw	r2,28(r2)
    8ea0:	100d883a 	mov	r6,r2
    8ea4:	180b883a 	mov	r5,r3
    8ea8:	e13ffd17 	ldw	r4,-12(fp)
    8eac:	00085fc0 	call	85fc <dac_write>
		dac_data_src_sel(core, i, chan->sel);
    8eb0:	e0ffff17 	ldw	r3,-4(fp)
    8eb4:	e0bffe17 	ldw	r2,-8(fp)
    8eb8:	10800817 	ldw	r2,32(r2)
    8ebc:	100d883a 	mov	r6,r2
    8ec0:	180b883a 	mov	r5,r3
    8ec4:	e13ffd17 	ldw	r4,-12(fp)
    8ec8:	0008ae40 	call	8ae4 <dac_data_src_sel>
	for (i = 0; i < core->no_of_channels; i++) {
    8ecc:	e0bfff17 	ldw	r2,-4(fp)
    8ed0:	10800044 	addi	r2,r2,1
    8ed4:	e0bfff15 	stw	r2,-4(fp)
    8ed8:	e0bffd17 	ldw	r2,-12(fp)
    8edc:	10800143 	ldbu	r2,5(r2)
    8ee0:	10803fcc 	andi	r2,r2,255
    8ee4:	e0ffff17 	ldw	r3,-4(fp)
    8ee8:	18bf8a36 	bltu	r3,r2,8d14 <__alt_mem_mcu_subsystem_ram_0+0x77fe8d14>
	}

	return(0);
    8eec:	0005883a 	mov	r2,zero
}
    8ef0:	e037883a 	mov	sp,fp
    8ef4:	dfc00117 	ldw	ra,4(sp)
    8ef8:	df000017 	ldw	fp,0(sp)
    8efc:	dec00204 	addi	sp,sp,8
    8f00:	f800283a 	ret

00008f04 <dmac_read>:
 *******************************************************************************/

int32_t dmac_read(dmac_core core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    8f04:	defffb04 	addi	sp,sp,-20
    8f08:	df000415 	stw	fp,16(sp)
    8f0c:	df000404 	addi	fp,sp,16
    8f10:	e13ffc15 	stw	r4,-16(fp)
    8f14:	e17ffd15 	stw	r5,-12(fp)
    8f18:	e1bffe15 	stw	r6,-8(fp)
    8f1c:	e1ffff15 	stw	r7,-4(fp)
	*reg_data = ad_reg_read((core.base_address + reg_addr));
    8f20:	e0fffc17 	ldw	r3,-16(fp)
    8f24:	e0800117 	ldw	r2,4(fp)
    8f28:	1885883a 	add	r2,r3,r2
    8f2c:	10800037 	ldwio	r2,0(r2)
    8f30:	1007883a 	mov	r3,r2
    8f34:	e0800217 	ldw	r2,8(fp)
    8f38:	10c00015 	stw	r3,0(r2)

	return 0;
    8f3c:	0005883a 	mov	r2,zero
}
    8f40:	e037883a 	mov	sp,fp
    8f44:	df000017 	ldw	fp,0(sp)
    8f48:	dec00104 	addi	sp,sp,4
    8f4c:	f800283a 	ret

00008f50 <dmac_write>:
 *******************************************************************************/

int32_t dmac_write(dmac_core core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    8f50:	defffb04 	addi	sp,sp,-20
    8f54:	df000415 	stw	fp,16(sp)
    8f58:	df000404 	addi	fp,sp,16
    8f5c:	e13ffc15 	stw	r4,-16(fp)
    8f60:	e17ffd15 	stw	r5,-12(fp)
    8f64:	e1bffe15 	stw	r6,-8(fp)
    8f68:	e1ffff15 	stw	r7,-4(fp)
	ad_reg_write((core.base_address + reg_addr), reg_data);
    8f6c:	e0fffc17 	ldw	r3,-16(fp)
    8f70:	e0800117 	ldw	r2,4(fp)
    8f74:	1885883a 	add	r2,r3,r2
    8f78:	1007883a 	mov	r3,r2
    8f7c:	e0800217 	ldw	r2,8(fp)
    8f80:	18800035 	stwio	r2,0(r3)

	return 0;
    8f84:	0005883a 	mov	r2,zero
}
    8f88:	e037883a 	mov	sp,fp
    8f8c:	df000017 	ldw	fp,0(sp)
    8f90:	dec00104 	addi	sp,sp,4
    8f94:	f800283a 	ret

00008f98 <dmac_start_transaction>:
/***************************************************************************//**
 * @brief dmac_start_transaction
 *******************************************************************************/

int32_t dmac_start_transaction(dmac_core dma)
{
    8f98:	defff604 	addi	sp,sp,-40
    8f9c:	dfc00915 	stw	ra,36(sp)
    8fa0:	df000815 	stw	fp,32(sp)
    8fa4:	df000804 	addi	fp,sp,32
    8fa8:	e13ffa15 	stw	r4,-24(fp)
    8fac:	e17ffb15 	stw	r5,-20(fp)
    8fb0:	e1bffc15 	stw	r6,-16(fp)
    8fb4:	e1fffd15 	stw	r7,-12(fp)
   uint32_t reg_val = 0;
    8fb8:	e03ffe15 	stw	zero,-8(fp)
   uint32_t timer = 0;
    8fbc:	e03fff15 	stw	zero,-4(fp)

   dmac_write(dma, DMAC_REG_CTRL, 0x0);
    8fc0:	d8000115 	stw	zero,4(sp)
    8fc4:	00810004 	movi	r2,1024
    8fc8:	d8800015 	stw	r2,0(sp)
    8fcc:	e13ffa17 	ldw	r4,-24(fp)
    8fd0:	e17ffb17 	ldw	r5,-20(fp)
    8fd4:	e1bffc17 	ldw	r6,-16(fp)
    8fd8:	e1fffd17 	ldw	r7,-12(fp)
    8fdc:	0008f500 	call	8f50 <dmac_write>
   dmac_write(dma, DMAC_REG_CTRL, DMAC_CTRL_ENABLE);
    8fe0:	00800044 	movi	r2,1
    8fe4:	d8800115 	stw	r2,4(sp)
    8fe8:	00810004 	movi	r2,1024
    8fec:	d8800015 	stw	r2,0(sp)
    8ff0:	e13ffa17 	ldw	r4,-24(fp)
    8ff4:	e17ffb17 	ldw	r5,-20(fp)
    8ff8:	e1bffc17 	ldw	r6,-16(fp)
    8ffc:	e1fffd17 	ldw	r7,-12(fp)
    9000:	0008f500 	call	8f50 <dmac_write>

   dmac_write(dma, DMAC_REG_IRQ_MASK, 0x0);
    9004:	d8000115 	stw	zero,4(sp)
    9008:	00802004 	movi	r2,128
    900c:	d8800015 	stw	r2,0(sp)
    9010:	e13ffa17 	ldw	r4,-24(fp)
    9014:	e17ffb17 	ldw	r5,-20(fp)
    9018:	e1bffc17 	ldw	r6,-16(fp)
    901c:	e1fffd17 	ldw	r7,-12(fp)
    9020:	0008f500 	call	8f50 <dmac_write>

   if(dma.transfer) {
    9024:	e0bffd17 	ldw	r2,-12(fp)
    9028:	10001f26 	beq	r2,zero,90a8 <dmac_start_transaction+0x110>
      dmac_read(dma, DMAC_REG_TRANSFER_ID, &(dma.transfer->id));
    902c:	e0bffd17 	ldw	r2,-12(fp)
    9030:	d8800115 	stw	r2,4(sp)
    9034:	00810104 	movi	r2,1028
    9038:	d8800015 	stw	r2,0(sp)
    903c:	e13ffa17 	ldw	r4,-24(fp)
    9040:	e17ffb17 	ldw	r5,-20(fp)
    9044:	e1bffc17 	ldw	r6,-16(fp)
    9048:	e1fffd17 	ldw	r7,-12(fp)
    904c:	0008f040 	call	8f04 <dmac_read>
   } else {
      ad_printf("%s : Undefined DMA transfer.\n", __func__);
      return -1;
   }
   dmac_read(dma, DMAC_REG_IRQ_PENDING, &reg_val);
    9050:	e0bffe04 	addi	r2,fp,-8
    9054:	d8800115 	stw	r2,4(sp)
    9058:	00802104 	movi	r2,132
    905c:	d8800015 	stw	r2,0(sp)
    9060:	e13ffa17 	ldw	r4,-24(fp)
    9064:	e17ffb17 	ldw	r5,-20(fp)
    9068:	e1bffc17 	ldw	r6,-16(fp)
    906c:	e1fffd17 	ldw	r7,-12(fp)
    9070:	0008f040 	call	8f04 <dmac_read>

   dmac_write(dma, DMAC_REG_IRQ_PENDING, reg_val);
    9074:	e0bffe17 	ldw	r2,-8(fp)
    9078:	d8800115 	stw	r2,4(sp)
    907c:	00802104 	movi	r2,132
    9080:	d8800015 	stw	r2,0(sp)
    9084:	e13ffa17 	ldw	r4,-24(fp)
    9088:	e17ffb17 	ldw	r5,-20(fp)
    908c:	e1bffc17 	ldw	r6,-16(fp)
    9090:	e1fffd17 	ldw	r7,-12(fp)
    9094:	0008f500 	call	8f50 <dmac_write>

   if(dma.type == DMAC_RX) {
    9098:	e0bffb03 	ldbu	r2,-20(fp)
    909c:	10803fcc 	andi	r2,r2,255
    90a0:	10001b1e 	bne	r2,zero,9110 <dmac_start_transaction+0x178>
    90a4:	00000706 	br	90c4 <dmac_start_transaction+0x12c>
      ad_printf("%s : Undefined DMA transfer.\n", __func__);
    90a8:	014000f4 	movhi	r5,3
    90ac:	29495004 	addi	r5,r5,9536
    90b0:	010000f4 	movhi	r4,3
    90b4:	21094804 	addi	r4,r4,9504
    90b8:	001634c0 	call	1634c <printf>
      return -1;
    90bc:	00bfffc4 	movi	r2,-1
    90c0:	00009306 	br	9310 <dmac_start_transaction+0x378>
      dmac_write(dma, DMAC_REG_DEST_ADDRESS, dma.transfer->start_address);
    90c4:	e0bffd17 	ldw	r2,-12(fp)
    90c8:	10800117 	ldw	r2,4(r2)
    90cc:	d8800115 	stw	r2,4(sp)
    90d0:	00810404 	movi	r2,1040
    90d4:	d8800015 	stw	r2,0(sp)
    90d8:	e13ffa17 	ldw	r4,-24(fp)
    90dc:	e17ffb17 	ldw	r5,-20(fp)
    90e0:	e1bffc17 	ldw	r6,-16(fp)
    90e4:	e1fffd17 	ldw	r7,-12(fp)
    90e8:	0008f500 	call	8f50 <dmac_write>
      dmac_write(dma, DMAC_REG_DEST_STRIDE, 0x0);
    90ec:	d8000115 	stw	zero,4(sp)
    90f0:	00810804 	movi	r2,1056
    90f4:	d8800015 	stw	r2,0(sp)
    90f8:	e13ffa17 	ldw	r4,-24(fp)
    90fc:	e17ffb17 	ldw	r5,-20(fp)
    9100:	e1bffc17 	ldw	r6,-16(fp)
    9104:	e1fffd17 	ldw	r7,-12(fp)
    9108:	0008f500 	call	8f50 <dmac_write>
    910c:	00001c06 	br	9180 <dmac_start_transaction+0x1e8>
   } else {    /* DMAC_TX */
      dmac_write(dma, DMAC_REG_SRC_ADDRESS, dma.transfer->start_address);
    9110:	e0bffd17 	ldw	r2,-12(fp)
    9114:	10800117 	ldw	r2,4(r2)
    9118:	d8800115 	stw	r2,4(sp)
    911c:	00810504 	movi	r2,1044
    9120:	d8800015 	stw	r2,0(sp)
    9124:	e13ffa17 	ldw	r4,-24(fp)
    9128:	e17ffb17 	ldw	r5,-20(fp)
    912c:	e1bffc17 	ldw	r6,-16(fp)
    9130:	e1fffd17 	ldw	r7,-12(fp)
    9134:	0008f500 	call	8f50 <dmac_write>
      dmac_write(dma, DMAC_REG_SRC_STRIDE, 0x0);
    9138:	d8000115 	stw	zero,4(sp)
    913c:	00810904 	movi	r2,1060
    9140:	d8800015 	stw	r2,0(sp)
    9144:	e13ffa17 	ldw	r4,-24(fp)
    9148:	e17ffb17 	ldw	r5,-20(fp)
    914c:	e1bffc17 	ldw	r6,-16(fp)
    9150:	e1fffd17 	ldw	r7,-12(fp)
    9154:	0008f500 	call	8f50 <dmac_write>
      dmac_write(dma, DMAC_REG_FLAGS, dma.flags);
    9158:	e0bffb43 	ldbu	r2,-19(fp)
    915c:	10803fcc 	andi	r2,r2,255
    9160:	d8800115 	stw	r2,4(sp)
    9164:	00810304 	movi	r2,1036
    9168:	d8800015 	stw	r2,0(sp)
    916c:	e13ffa17 	ldw	r4,-24(fp)
    9170:	e17ffb17 	ldw	r5,-20(fp)
    9174:	e1bffc17 	ldw	r6,-16(fp)
    9178:	e1fffd17 	ldw	r7,-12(fp)
    917c:	0008f500 	call	8f50 <dmac_write>
   }
   dmac_write(dma, DMAC_REG_X_LENGTH, (2 * dma.transfer->no_of_samples) - 1);
    9180:	e0bffd17 	ldw	r2,-12(fp)
    9184:	10800217 	ldw	r2,8(r2)
    9188:	1085883a 	add	r2,r2,r2
    918c:	10bfffc4 	addi	r2,r2,-1
    9190:	d8800115 	stw	r2,4(sp)
    9194:	00810604 	movi	r2,1048
    9198:	d8800015 	stw	r2,0(sp)
    919c:	e13ffa17 	ldw	r4,-24(fp)
    91a0:	e17ffb17 	ldw	r5,-20(fp)
    91a4:	e1bffc17 	ldw	r6,-16(fp)
    91a8:	e1fffd17 	ldw	r7,-12(fp)
    91ac:	0008f500 	call	8f50 <dmac_write>
   dmac_write(dma, DMAC_REG_Y_LENGTH, 0x0);
    91b0:	d8000115 	stw	zero,4(sp)
    91b4:	00810704 	movi	r2,1052
    91b8:	d8800015 	stw	r2,0(sp)
    91bc:	e13ffa17 	ldw	r4,-24(fp)
    91c0:	e17ffb17 	ldw	r5,-20(fp)
    91c4:	e1bffc17 	ldw	r6,-16(fp)
    91c8:	e1fffd17 	ldw	r7,-12(fp)
    91cc:	0008f500 	call	8f50 <dmac_write>

	dmac_write(dma, DMAC_REG_START_TRANSFER, 0x1);
    91d0:	00800044 	movi	r2,1
    91d4:	d8800115 	stw	r2,4(sp)
    91d8:	00810204 	movi	r2,1032
    91dc:	d8800015 	stw	r2,0(sp)
    91e0:	e13ffa17 	ldw	r4,-24(fp)
    91e4:	e17ffb17 	ldw	r5,-20(fp)
    91e8:	e1bffc17 	ldw	r6,-16(fp)
    91ec:	e1fffd17 	ldw	r7,-12(fp)
    91f0:	0008f500 	call	8f50 <dmac_write>
	if (dma.flags & DMAC_FLAGS_CYCLIC)
    91f4:	e0bffb43 	ldbu	r2,-19(fp)
    91f8:	10803fcc 	andi	r2,r2,255
    91fc:	1080004c 	andi	r2,r2,1
    9200:	10000226 	beq	r2,zero,920c <dmac_start_transaction+0x274>
		return 0;
    9204:	0005883a 	mov	r2,zero
    9208:	00004106 	br	9310 <dmac_start_transaction+0x378>
	/* Wait until the new transfer is queued. */
	do {
		dmac_read(dma, DMAC_REG_START_TRANSFER, &reg_val);
    920c:	e0bffe04 	addi	r2,fp,-8
    9210:	d8800115 	stw	r2,4(sp)
    9214:	00810204 	movi	r2,1032
    9218:	d8800015 	stw	r2,0(sp)
    921c:	e13ffa17 	ldw	r4,-24(fp)
    9220:	e17ffb17 	ldw	r5,-20(fp)
    9224:	e1bffc17 	ldw	r6,-16(fp)
    9228:	e1fffd17 	ldw	r7,-12(fp)
    922c:	0008f040 	call	8f04 <dmac_read>
	}
	while(reg_val == 1);
    9230:	e0bffe17 	ldw	r2,-8(fp)
    9234:	10800060 	cmpeqi	r2,r2,1
    9238:	103ff41e 	bne	r2,zero,920c <__alt_mem_mcu_subsystem_ram_0+0x77fe920c>

	/* Wait until the current transfer is completed. */
	do {
		dmac_read(dma, DMAC_REG_IRQ_PENDING, &reg_val);
    923c:	e0bffe04 	addi	r2,fp,-8
    9240:	d8800115 	stw	r2,4(sp)
    9244:	00802104 	movi	r2,132
    9248:	d8800015 	stw	r2,0(sp)
    924c:	e13ffa17 	ldw	r4,-24(fp)
    9250:	e17ffb17 	ldw	r5,-20(fp)
    9254:	e1bffc17 	ldw	r6,-16(fp)
    9258:	e1fffd17 	ldw	r7,-12(fp)
    925c:	0008f040 	call	8f04 <dmac_read>
	}
	while(reg_val != (DMAC_IRQ_SOT | DMAC_IRQ_EOT));
    9260:	e0bffe17 	ldw	r2,-8(fp)
    9264:	108000d8 	cmpnei	r2,r2,3
    9268:	103ff41e 	bne	r2,zero,923c <__alt_mem_mcu_subsystem_ram_0+0x77fe923c>
	dmac_write(dma, DMAC_REG_IRQ_PENDING, reg_val);
    926c:	e0bffe17 	ldw	r2,-8(fp)
    9270:	d8800115 	stw	r2,4(sp)
    9274:	00802104 	movi	r2,132
    9278:	d8800015 	stw	r2,0(sp)
    927c:	e13ffa17 	ldw	r4,-24(fp)
    9280:	e17ffb17 	ldw	r5,-20(fp)
    9284:	e1bffc17 	ldw	r6,-16(fp)
    9288:	e1fffd17 	ldw	r7,-12(fp)
    928c:	0008f500 	call	8f50 <dmac_write>

	/* Wait until the transfer with the ID transfer_id is completed. */
	do {
		dmac_read(dma, DMAC_REG_TRANSFER_DONE, &reg_val);
    9290:	e0bffe04 	addi	r2,fp,-8
    9294:	d8800115 	stw	r2,4(sp)
    9298:	00810a04 	movi	r2,1064
    929c:	d8800015 	stw	r2,0(sp)
    92a0:	e13ffa17 	ldw	r4,-24(fp)
    92a4:	e17ffb17 	ldw	r5,-20(fp)
    92a8:	e1bffc17 	ldw	r6,-16(fp)
    92ac:	e1fffd17 	ldw	r7,-12(fp)
    92b0:	0008f040 	call	8f04 <dmac_read>
		timer++;
    92b4:	e0bfff17 	ldw	r2,-4(fp)
    92b8:	10800044 	addi	r2,r2,1
    92bc:	e0bfff15 	stw	r2,-4(fp)
		if(timer == TIMEOUT) {
    92c0:	e0bfff17 	ldw	r2,-4(fp)
    92c4:	1089c418 	cmpnei	r2,r2,10000
    92c8:	1000021e 	bne	r2,zero,92d4 <dmac_start_transaction+0x33c>
			return -1;
    92cc:	00bfffc4 	movi	r2,-1
    92d0:	00000f06 	br	9310 <dmac_start_transaction+0x378>
		}
		mdelay(1);
    92d4:	0100fa04 	movi	r4,1000
    92d8:	0025e400 	call	25e40 <usleep>
	}
	while((reg_val & (1 << dma.transfer->id)) != (1 << dma.transfer->id));
    92dc:	e0bffd17 	ldw	r2,-12(fp)
    92e0:	10800017 	ldw	r2,0(r2)
    92e4:	00c00044 	movi	r3,1
    92e8:	1884983a 	sll	r2,r3,r2
    92ec:	1007883a 	mov	r3,r2
    92f0:	e0bffe17 	ldw	r2,-8(fp)
    92f4:	1884703a 	and	r2,r3,r2
    92f8:	e0fffd17 	ldw	r3,-12(fp)
    92fc:	18c00017 	ldw	r3,0(r3)
    9300:	01000044 	movi	r4,1
    9304:	20c6983a 	sll	r3,r4,r3
    9308:	10ffe11e 	bne	r2,r3,9290 <__alt_mem_mcu_subsystem_ram_0+0x77fe9290>

#ifdef XILINX
	Xil_DCacheInvalidateRange(dma.transfer->start_address, (2 * dma.transfer->no_of_samples));
#endif

	return 0;
    930c:	0005883a 	mov	r2,zero
}
    9310:	e037883a 	mov	sp,fp
    9314:	dfc00117 	ldw	ra,4(sp)
    9318:	df000017 	ldw	fp,0(sp)
    931c:	dec00204 	addi	sp,sp,8
    9320:	f800283a 	ret

00009324 <calc_zero_checksum>:
 * The modulo 256 sum of the preceding bytes (starting with the first byte
 * of the header) plus the checksum byte equals zero.
 * Platform Management FRU Information Storage Definition : section 16.2.[56]
 */
unsigned char calc_zero_checksum (unsigned char *data, size_t len)
{
    9324:	defffb04 	addi	sp,sp,-20
    9328:	df000415 	stw	fp,16(sp)
    932c:	df000404 	addi	fp,sp,16
    9330:	e13ffd15 	stw	r4,-12(fp)
    9334:	e17ffc15 	stw	r5,-16(fp)
	size_t i;
	unsigned char tmp = 0;
    9338:	e03ffec5 	stb	zero,-5(fp)

	for (i = 0; i <= len; i++)
    933c:	e03fff15 	stw	zero,-4(fp)
    9340:	00000a06 	br	936c <calc_zero_checksum+0x48>
		tmp += data[i];
    9344:	e0fffd17 	ldw	r3,-12(fp)
    9348:	e0bfff17 	ldw	r2,-4(fp)
    934c:	1885883a 	add	r2,r3,r2
    9350:	10800003 	ldbu	r2,0(r2)
    9354:	e0fffec3 	ldbu	r3,-5(fp)
    9358:	1885883a 	add	r2,r3,r2
    935c:	e0bffec5 	stb	r2,-5(fp)
	for (i = 0; i <= len; i++)
    9360:	e0bfff17 	ldw	r2,-4(fp)
    9364:	10800044 	addi	r2,r2,1
    9368:	e0bfff15 	stw	r2,-4(fp)
    936c:	e0bfff17 	ldw	r2,-4(fp)
    9370:	e0fffc17 	ldw	r3,-16(fp)
    9374:	18bff32e 	bgeu	r3,r2,9344 <__alt_mem_mcu_subsystem_ram_0+0x77fe9344>

	return tmp;
    9378:	e0bffec3 	ldbu	r2,-5(fp)
}
    937c:	e037883a 	mov	sp,fp
    9380:	df000017 	ldw	fp,0(sp)
    9384:	dec00104 	addi	sp,sp,4
    9388:	f800283a 	ret

0000938c <min2date>:
 *   up to : Wed Nov 24 07:56 2027
 * See:
 *   section 11, Platform Management FRU Information Storage Definition
 */
time_t min2date(unsigned int mins)
{
    938c:	defff104 	addi	sp,sp,-60
    9390:	dfc00e15 	stw	ra,56(sp)
    9394:	df000d15 	stw	fp,52(sp)
    9398:	df000d04 	addi	fp,sp,52
    939c:	e13ff315 	stw	r4,-52(fp)
	struct tm tm;
	time_t tmp;

	/* Set up 01-Jan-1996 , and add the number of minutes to it */
	memset(&tm, 0, sizeof(struct tm));
    93a0:	e0bff404 	addi	r2,fp,-48
    93a4:	01800b04 	movi	r6,44
    93a8:	000b883a 	mov	r5,zero
    93ac:	1009883a 	mov	r4,r2
    93b0:	0015bb00 	call	15bb0 <memset>
	tm.tm_year = 96;
    93b4:	00801804 	movi	r2,96
    93b8:	e0bff915 	stw	r2,-28(fp)
	tm.tm_mday = 1;
    93bc:	00800044 	movi	r2,1
    93c0:	e0bff715 	stw	r2,-36(fp)
	tm.tm_min += mins;
    93c4:	e0bff517 	ldw	r2,-44(fp)
    93c8:	1007883a 	mov	r3,r2
    93cc:	e0bff317 	ldw	r2,-52(fp)
    93d0:	1885883a 	add	r2,r3,r2
    93d4:	e0bff515 	stw	r2,-44(fp)
	tmp = mktime(&tm);
    93d8:	e0bff404 	addi	r2,fp,-48
    93dc:	1009883a 	mov	r4,r2
    93e0:	0015f5c0 	call	15f5c <mktime>
    93e4:	e0bfff15 	stw	r2,-4(fp)
	return tmp;
    93e8:	e0bfff17 	ldw	r2,-4(fp)
}
    93ec:	e037883a 	mov	sp,fp
    93f0:	dfc00117 	ldw	ra,4(sp)
    93f4:	df000017 	ldw	fp,0(sp)
    93f8:	dec00204 	addi	sp,sp,8
    93fc:	f800283a 	ret

00009400 <ascii2six>:
/*
 * 6-bit ASCII Packing
 * Platform Management FRU Information Storage Definition:  Section 13.[23]
 */
int ascii2six(unsigned char **dest, unsigned char *src, size_t size)
{
    9400:	defff204 	addi	sp,sp,-56
    9404:	dfc00d15 	stw	ra,52(sp)
    9408:	df000c15 	stw	fp,48(sp)
    940c:	df000c04 	addi	fp,sp,48
    9410:	e13ff715 	stw	r4,-36(fp)
    9414:	e17ff615 	stw	r5,-40(fp)
    9418:	e1bff515 	stw	r6,-44(fp)
	size_t i = 0;
    941c:	e03fff15 	stw	zero,-4(fp)
	ssize_t j;
	unsigned int k, m = 0;
    9420:	e03ffe15 	stw	zero,-8(fp)
	unsigned char *p, *d, *e;

	if (!src || !size)
    9424:	e0bff617 	ldw	r2,-40(fp)
    9428:	10000226 	beq	r2,zero,9434 <ascii2six+0x34>
    942c:	e0bff517 	ldw	r2,-44(fp)
    9430:	1000021e 	bne	r2,zero,943c <ascii2six+0x3c>
		return 0;
    9434:	0005883a 	mov	r2,zero
    9438:	0000a506 	br	96d0 <ascii2six+0x2d0>

	e = d = calloc(1, size);
    943c:	e17ff517 	ldw	r5,-44(fp)
    9440:	01000044 	movi	r4,1
    9444:	0014fa80 	call	14fa8 <calloc>
    9448:	e0bffc15 	stw	r2,-16(fp)
    944c:	e0bffc17 	ldw	r2,-16(fp)
    9450:	e0bffb15 	stw	r2,-20(fp)

	p = src;
    9454:	e0bff617 	ldw	r2,-40(fp)
    9458:	e0bffd15 	stw	r2,-12(fp)
	/*
	 * 6-bit requires uppercase chars, between 0 and 0x3f
	 */
	while (*p != '\0' && i <= size) {
    945c:	00003706 	br	953c <ascii2six+0x13c>
		j = toupper(*p) - 0x20;
    9460:	e0bffd17 	ldw	r2,-12(fp)
    9464:	10800003 	ldbu	r2,0(r2)
    9468:	e0bffac5 	stb	r2,-21(fp)
    946c:	00152280 	call	15228 <__locale_ctype_ptr>
    9470:	1007883a 	mov	r3,r2
    9474:	e0bffac3 	ldbu	r2,-21(fp)
    9478:	10800044 	addi	r2,r2,1
    947c:	1885883a 	add	r2,r3,r2
    9480:	10800003 	ldbu	r2,0(r2)
    9484:	10803fcc 	andi	r2,r2,255
    9488:	108000cc 	andi	r2,r2,3
    948c:	10800098 	cmpnei	r2,r2,2
    9490:	1000031e 	bne	r2,zero,94a0 <ascii2six+0xa0>
    9494:	e0bffac3 	ldbu	r2,-21(fp)
    9498:	10bff804 	addi	r2,r2,-32
    949c:	00000106 	br	94a4 <ascii2six+0xa4>
    94a0:	e0bffac3 	ldbu	r2,-21(fp)
    94a4:	10bff804 	addi	r2,r2,-32
    94a8:	e0bff915 	stw	r2,-28(fp)
		if (j < 0 || j >= 0x40) {
    94ac:	e0bff917 	ldw	r2,-28(fp)
    94b0:	10000316 	blt	r2,zero,94c0 <ascii2six+0xc0>
    94b4:	e0bff917 	ldw	r2,-28(fp)
    94b8:	10801010 	cmplti	r2,r2,64
    94bc:	1000121e 	bne	r2,zero,9508 <ascii2six+0x108>
			printf_warn("%s : trying to convert a string '%s'\n"
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	10800003 	ldbu	r2,0(r2)
    94c8:	10c03fcc 	andi	r3,r2,255
    94cc:	e0bffd17 	ldw	r2,-12(fp)
    94d0:	10800003 	ldbu	r2,0(r2)
    94d4:	10803fcc 	andi	r2,r2,255
    94d8:	d8800015 	stw	r2,0(sp)
    94dc:	180f883a 	mov	r7,r3
    94e0:	e1bff617 	ldw	r6,-40(fp)
    94e4:	014000f4 	movhi	r5,3
    94e8:	294acc04 	addi	r5,r5,11056
    94ec:	010000f4 	movhi	r4,3
    94f0:	21095604 	addi	r4,r4,9560
    94f4:	001634c0 	call	1634c <printf>
					"\t\twhich includes char '%c (0x%x)', which can't be converted\n",
					__func__, src, *p, *p);
			free(e);
    94f8:	e13ffb17 	ldw	r4,-20(fp)
    94fc:	001526c0 	call	1526c <free>
			return -1;
    9500:	00bfffc4 	movi	r2,-1
    9504:	00007206 	br	96d0 <ascii2six+0x2d0>
		}
		*d = j;
    9508:	e0bff917 	ldw	r2,-28(fp)
    950c:	1007883a 	mov	r3,r2
    9510:	e0bffc17 	ldw	r2,-16(fp)
    9514:	10c00005 	stb	r3,0(r2)
		++p, ++d, i++;
    9518:	e0bffd17 	ldw	r2,-12(fp)
    951c:	10800044 	addi	r2,r2,1
    9520:	e0bffd15 	stw	r2,-12(fp)
    9524:	e0bffc17 	ldw	r2,-16(fp)
    9528:	10800044 	addi	r2,r2,1
    952c:	e0bffc15 	stw	r2,-16(fp)
    9530:	e0bfff17 	ldw	r2,-4(fp)
    9534:	10800044 	addi	r2,r2,1
    9538:	e0bfff15 	stw	r2,-4(fp)
	while (*p != '\0' && i <= size) {
    953c:	e0bffd17 	ldw	r2,-12(fp)
    9540:	10800003 	ldbu	r2,0(r2)
    9544:	10803fcc 	andi	r2,r2,255
    9548:	10000326 	beq	r2,zero,9558 <ascii2six+0x158>
    954c:	e0bfff17 	ldw	r2,-4(fp)
    9550:	e0fff517 	ldw	r3,-44(fp)
    9554:	18bfc22e 	bgeu	r3,r2,9460 <__alt_mem_mcu_subsystem_ram_0+0x77fe9460>
	}

	/* the length of dest, should be 3/4 of size, it's zero padded at the end */
	*dest = calloc(1, size + 1);
    9558:	e0bff517 	ldw	r2,-44(fp)
    955c:	10800044 	addi	r2,r2,1
    9560:	100b883a 	mov	r5,r2
    9564:	01000044 	movi	r4,1
    9568:	0014fa80 	call	14fa8 <calloc>
    956c:	1007883a 	mov	r3,r2
    9570:	e0bff717 	ldw	r2,-36(fp)
    9574:	10c00015 	stw	r3,0(r2)
	p = *dest;
    9578:	e0bff717 	ldw	r2,-36(fp)
    957c:	10800017 	ldw	r2,0(r2)
    9580:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i <= size ; i+= 4) {
    9584:	e03fff15 	stw	zero,-4(fp)
    9588:	00004b06 	br	96b8 <ascii2six+0x2b8>
		k = e[i];
    958c:	e0fffb17 	ldw	r3,-20(fp)
    9590:	e0bfff17 	ldw	r2,-4(fp)
    9594:	1885883a 	add	r2,r3,r2
    9598:	10800003 	ldbu	r2,0(r2)
    959c:	10803fcc 	andi	r2,r2,255
    95a0:	e0bff815 	stw	r2,-32(fp)
		m++;
    95a4:	e0bffe17 	ldw	r2,-8(fp)
    95a8:	10800044 	addi	r2,r2,1
    95ac:	e0bffe15 	stw	r2,-8(fp)
		if ((i + 1) < size) {
    95b0:	e0bfff17 	ldw	r2,-4(fp)
    95b4:	10c00044 	addi	r3,r2,1
    95b8:	e0bff517 	ldw	r2,-44(fp)
    95bc:	18800e2e 	bgeu	r3,r2,95f8 <ascii2six+0x1f8>
			k |= e[i + 1] << 6;
    95c0:	e0bfff17 	ldw	r2,-4(fp)
    95c4:	10800044 	addi	r2,r2,1
    95c8:	e0fffb17 	ldw	r3,-20(fp)
    95cc:	1885883a 	add	r2,r3,r2
    95d0:	10800003 	ldbu	r2,0(r2)
    95d4:	10803fcc 	andi	r2,r2,255
    95d8:	100491ba 	slli	r2,r2,6
    95dc:	1007883a 	mov	r3,r2
    95e0:	e0bff817 	ldw	r2,-32(fp)
    95e4:	1884b03a 	or	r2,r3,r2
    95e8:	e0bff815 	stw	r2,-32(fp)
			m++;
    95ec:	e0bffe17 	ldw	r2,-8(fp)
    95f0:	10800044 	addi	r2,r2,1
    95f4:	e0bffe15 	stw	r2,-8(fp)
		}
		if ((i + 2) < size) {
    95f8:	e0bfff17 	ldw	r2,-4(fp)
    95fc:	10c00084 	addi	r3,r2,2
    9600:	e0bff517 	ldw	r2,-44(fp)
    9604:	18800e2e 	bgeu	r3,r2,9640 <ascii2six+0x240>
			k |= e[i + 2] << 12;
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	10800084 	addi	r2,r2,2
    9610:	e0fffb17 	ldw	r3,-20(fp)
    9614:	1885883a 	add	r2,r3,r2
    9618:	10800003 	ldbu	r2,0(r2)
    961c:	10803fcc 	andi	r2,r2,255
    9620:	1004933a 	slli	r2,r2,12
    9624:	1007883a 	mov	r3,r2
    9628:	e0bff817 	ldw	r2,-32(fp)
    962c:	1884b03a 	or	r2,r3,r2
    9630:	e0bff815 	stw	r2,-32(fp)
			m++;
    9634:	e0bffe17 	ldw	r2,-8(fp)
    9638:	10800044 	addi	r2,r2,1
    963c:	e0bffe15 	stw	r2,-8(fp)
		}
		if ((i + 3) < size) {
    9640:	e0bfff17 	ldw	r2,-4(fp)
    9644:	10c000c4 	addi	r3,r2,3
    9648:	e0bff517 	ldw	r2,-44(fp)
    964c:	18800b2e 	bgeu	r3,r2,967c <ascii2six+0x27c>
			k |= e[i + 3] << 18;
    9650:	e0bfff17 	ldw	r2,-4(fp)
    9654:	108000c4 	addi	r2,r2,3
    9658:	e0fffb17 	ldw	r3,-20(fp)
    965c:	1885883a 	add	r2,r3,r2
    9660:	10800003 	ldbu	r2,0(r2)
    9664:	10803fcc 	andi	r2,r2,255
    9668:	100494ba 	slli	r2,r2,18
    966c:	1007883a 	mov	r3,r2
    9670:	e0bff817 	ldw	r2,-32(fp)
    9674:	1884b03a 	or	r2,r3,r2
    9678:	e0bff815 	stw	r2,-32(fp)
		}
#if __BYTE_ORDER == __BIG_ENDIAN
		k = __builtin_bswap32(k);
    967c:	e0bff817 	ldw	r2,-32(fp)
    9680:	1009883a 	mov	r4,r2
    9684:	0011d3c0 	call	11d3c <__bswapsi2>
    9688:	e0bff815 	stw	r2,-32(fp)
#endif
		memcpy(p, &k, 3);
    968c:	e0bff804 	addi	r2,fp,-32
    9690:	018000c4 	movi	r6,3
    9694:	100b883a 	mov	r5,r2
    9698:	e13ffd17 	ldw	r4,-12(fp)
    969c:	0015ac00 	call	15ac0 <memcpy>
		p += 3;
    96a0:	e0bffd17 	ldw	r2,-12(fp)
    96a4:	108000c4 	addi	r2,r2,3
    96a8:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i <= size ; i+= 4) {
    96ac:	e0bfff17 	ldw	r2,-4(fp)
    96b0:	10800104 	addi	r2,r2,4
    96b4:	e0bfff15 	stw	r2,-4(fp)
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	e0fff517 	ldw	r3,-44(fp)
    96c0:	18bfb22e 	bgeu	r3,r2,958c <__alt_mem_mcu_subsystem_ram_0+0x77fe958c>
	}

	free (e);
    96c4:	e13ffb17 	ldw	r4,-20(fp)
    96c8:	001526c0 	call	1526c <free>

	return  m;
    96cc:	e0bffe17 	ldw	r2,-8(fp)
}
    96d0:	e037883a 	mov	sp,fp
    96d4:	dfc00117 	ldw	ra,4(sp)
    96d8:	df000017 	ldw	fp,0(sp)
    96dc:	dec00204 	addi	sp,sp,8
    96e0:	f800283a 	ret

000096e4 <six2ascii>:
/*
 *  * 6-bit ASCII Unpacking
 *   * Platform Management FRU Information Storage Definition:  Section 13.[23]
 */
unsigned char * six2ascii(unsigned char *buf, size_t size)
{
    96e4:	defff904 	addi	sp,sp,-28
    96e8:	dfc00615 	stw	ra,24(sp)
    96ec:	df000515 	stw	fp,20(sp)
    96f0:	df000504 	addi	fp,sp,20
    96f4:	e13ffc15 	stw	r4,-16(fp)
    96f8:	e17ffb15 	stw	r5,-20(fp)
	unsigned char *p, *dest;
	size_t i;

	if (!size)
    96fc:	e0bffb17 	ldw	r2,-20(fp)
    9700:	1000021e 	bne	r2,zero,970c <six2ascii+0x28>
		return NULL;
    9704:	0005883a 	mov	r2,zero
    9708:	00008306 	br	9918 <six2ascii+0x234>

	/* the length of dest, should be 4/3 of size + 1 for null termination char*/
	dest = calloc(1, ((size * 4) / 3) + 2);
    970c:	e0bffb17 	ldw	r2,-20(fp)
    9710:	100490ba 	slli	r2,r2,2
    9714:	014000c4 	movi	r5,3
    9718:	1009883a 	mov	r4,r2
    971c:	0012a540 	call	12a54 <__udivsi3>
    9720:	10800084 	addi	r2,r2,2
    9724:	100b883a 	mov	r5,r2
    9728:	01000044 	movi	r4,1
    972c:	0014fa80 	call	14fa8 <calloc>
    9730:	e0bfff15 	stw	r2,-4(fp)
	p = dest;
    9734:	e0bfff17 	ldw	r2,-4(fp)
    9738:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i < size; i += 3) {
    973c:	e03ffe15 	stw	zero,-8(fp)
    9740:	00005806 	br	98a4 <six2ascii+0x1c0>
		*dest = (buf[i] & 0x3F) + 0x20;
    9744:	e0fffc17 	ldw	r3,-16(fp)
    9748:	e0bffe17 	ldw	r2,-8(fp)
    974c:	1885883a 	add	r2,r3,r2
    9750:	10800003 	ldbu	r2,0(r2)
    9754:	10800fcc 	andi	r2,r2,63
    9758:	10800804 	addi	r2,r2,32
    975c:	1007883a 	mov	r3,r2
    9760:	e0bfff17 	ldw	r2,-4(fp)
    9764:	10c00005 	stb	r3,0(r2)
		/* printf("1: %i: 0x%x (%c)\n", i, *dest, *dest); */
		dest++;
    9768:	e0bfff17 	ldw	r2,-4(fp)
    976c:	10800044 	addi	r2,r2,1
    9770:	e0bfff15 	stw	r2,-4(fp)
		if ((i + 1) < size) {
    9774:	e0bffe17 	ldw	r2,-8(fp)
    9778:	10c00044 	addi	r3,r2,1
    977c:	e0bffb17 	ldw	r2,-20(fp)
    9780:	1880172e 	bgeu	r3,r2,97e0 <six2ascii+0xfc>
			*dest = ((buf[i] & 0xC0) >> 6 | (buf[i+1] & 0x0F) << 2) + 0x20;
    9784:	e0fffc17 	ldw	r3,-16(fp)
    9788:	e0bffe17 	ldw	r2,-8(fp)
    978c:	1885883a 	add	r2,r3,r2
    9790:	10800003 	ldbu	r2,0(r2)
    9794:	10803fcc 	andi	r2,r2,255
    9798:	1004d1ba 	srli	r2,r2,6
    979c:	1009883a 	mov	r4,r2
    97a0:	e0bffe17 	ldw	r2,-8(fp)
    97a4:	10800044 	addi	r2,r2,1
    97a8:	e0fffc17 	ldw	r3,-16(fp)
    97ac:	1885883a 	add	r2,r3,r2
    97b0:	10800003 	ldbu	r2,0(r2)
    97b4:	10803fcc 	andi	r2,r2,255
    97b8:	100490ba 	slli	r2,r2,2
    97bc:	10800f0c 	andi	r2,r2,60
    97c0:	2084b03a 	or	r2,r4,r2
    97c4:	10800804 	addi	r2,r2,32
    97c8:	1007883a 	mov	r3,r2
    97cc:	e0bfff17 	ldw	r2,-4(fp)
    97d0:	10c00005 	stb	r3,0(r2)
			/* printf("2: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
    97d4:	e0bfff17 	ldw	r2,-4(fp)
    97d8:	10800044 	addi	r2,r2,1
    97dc:	e0bfff15 	stw	r2,-4(fp)
		}
		if ((i + 2) < size) {
    97e0:	e0bffe17 	ldw	r2,-8(fp)
    97e4:	10c00084 	addi	r3,r2,2
    97e8:	e0bffb17 	ldw	r2,-20(fp)
    97ec:	1880182e 	bgeu	r3,r2,9850 <six2ascii+0x16c>
			*dest = ((buf[i+1] & 0xF0) >> 4 | (buf[i+2] & 0x03) << 4) + 0x20;
    97f0:	e0bffe17 	ldw	r2,-8(fp)
    97f4:	10800044 	addi	r2,r2,1
    97f8:	e0fffc17 	ldw	r3,-16(fp)
    97fc:	1885883a 	add	r2,r3,r2
    9800:	10800003 	ldbu	r2,0(r2)
    9804:	10803fcc 	andi	r2,r2,255
    9808:	1004d13a 	srli	r2,r2,4
    980c:	1009883a 	mov	r4,r2
    9810:	e0bffe17 	ldw	r2,-8(fp)
    9814:	10800084 	addi	r2,r2,2
    9818:	e0fffc17 	ldw	r3,-16(fp)
    981c:	1885883a 	add	r2,r3,r2
    9820:	10800003 	ldbu	r2,0(r2)
    9824:	10803fcc 	andi	r2,r2,255
    9828:	1004913a 	slli	r2,r2,4
    982c:	10800c0c 	andi	r2,r2,48
    9830:	2084b03a 	or	r2,r4,r2
    9834:	10800804 	addi	r2,r2,32
    9838:	1007883a 	mov	r3,r2
    983c:	e0bfff17 	ldw	r2,-4(fp)
    9840:	10c00005 	stb	r3,0(r2)
			/* printf("3: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
    9844:	e0bfff17 	ldw	r2,-4(fp)
    9848:	10800044 	addi	r2,r2,1
    984c:	e0bfff15 	stw	r2,-4(fp)
		}
		if ((i + 3) < size) {
    9850:	e0bffe17 	ldw	r2,-8(fp)
    9854:	10c000c4 	addi	r3,r2,3
    9858:	e0bffb17 	ldw	r2,-20(fp)
    985c:	18800e2e 	bgeu	r3,r2,9898 <six2ascii+0x1b4>
			*dest = ((buf[i+2] & 0xFC) >> 2) + 0x20;
    9860:	e0bffe17 	ldw	r2,-8(fp)
    9864:	10800084 	addi	r2,r2,2
    9868:	e0fffc17 	ldw	r3,-16(fp)
    986c:	1885883a 	add	r2,r3,r2
    9870:	10800003 	ldbu	r2,0(r2)
    9874:	10803fcc 	andi	r2,r2,255
    9878:	1004d0ba 	srli	r2,r2,2
    987c:	10800804 	addi	r2,r2,32
    9880:	1007883a 	mov	r3,r2
    9884:	e0bfff17 	ldw	r2,-4(fp)
    9888:	10c00005 	stb	r3,0(r2)
			/* printf("4: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
    988c:	e0bfff17 	ldw	r2,-4(fp)
    9890:	10800044 	addi	r2,r2,1
    9894:	e0bfff15 	stw	r2,-4(fp)
	for (i = 0; i < size; i += 3) {
    9898:	e0bffe17 	ldw	r2,-8(fp)
    989c:	108000c4 	addi	r2,r2,3
    98a0:	e0bffe15 	stw	r2,-8(fp)
    98a4:	e0fffe17 	ldw	r3,-8(fp)
    98a8:	e0bffb17 	ldw	r2,-20(fp)
    98ac:	18bfa536 	bltu	r3,r2,9744 <__alt_mem_mcu_subsystem_ram_0+0x77fe9744>
		}
	}
	/* make sure strings are null terminated */
	*dest = 0;
    98b0:	e0bfff17 	ldw	r2,-4(fp)
    98b4:	10000005 	stb	zero,0(r2)

	/* Drop trailing spaces & null chars */
	dest--;
    98b8:	e0bfff17 	ldw	r2,-4(fp)
    98bc:	10bfffc4 	addi	r2,r2,-1
    98c0:	e0bfff15 	stw	r2,-4(fp)
	while ((*dest == 0 || *dest == ' ') && size) {
    98c4:	00000806 	br	98e8 <six2ascii+0x204>
		*dest = 0;
    98c8:	e0bfff17 	ldw	r2,-4(fp)
    98cc:	10000005 	stb	zero,0(r2)
		dest--;
    98d0:	e0bfff17 	ldw	r2,-4(fp)
    98d4:	10bfffc4 	addi	r2,r2,-1
    98d8:	e0bfff15 	stw	r2,-4(fp)
		size--;
    98dc:	e0bffb17 	ldw	r2,-20(fp)
    98e0:	10bfffc4 	addi	r2,r2,-1
    98e4:	e0bffb15 	stw	r2,-20(fp)
	while ((*dest == 0 || *dest == ' ') && size) {
    98e8:	e0bfff17 	ldw	r2,-4(fp)
    98ec:	10800003 	ldbu	r2,0(r2)
    98f0:	10803fcc 	andi	r2,r2,255
    98f4:	10000526 	beq	r2,zero,990c <six2ascii+0x228>
    98f8:	e0bfff17 	ldw	r2,-4(fp)
    98fc:	10800003 	ldbu	r2,0(r2)
    9900:	10803fcc 	andi	r2,r2,255
    9904:	10800818 	cmpnei	r2,r2,32
    9908:	1000021e 	bne	r2,zero,9914 <six2ascii+0x230>
    990c:	e0bffb17 	ldw	r2,-20(fp)
    9910:	103fed1e 	bne	r2,zero,98c8 <__alt_mem_mcu_subsystem_ram_0+0x77fe98c8>
	}

	return p;
    9914:	e0bffd17 	ldw	r2,-12(fp)
}
    9918:	e037883a 	mov	sp,fp
    991c:	dfc00117 	ldw	ra,4(sp)
    9920:	df000017 	ldw	fp,0(sp)
    9924:	dec00204 	addi	sp,sp,8
    9928:	f800283a 	ret

0000992c <parse_string>:
 * Extract strings from fields
 * Section 13 TYPE/LENGTH BYTE FORMAT
 * Platform Management FRU Information Storage Definition
 */
unsigned int parse_string(unsigned char *p, unsigned char **str, const char * field)
{
    992c:	defff504 	addi	sp,sp,-44
    9930:	dfc00a15 	stw	ra,40(sp)
    9934:	df000915 	stw	fp,36(sp)
    9938:	df000904 	addi	fp,sp,36
    993c:	e13ff915 	stw	r4,-28(fp)
    9940:	e17ff815 	stw	r5,-32(fp)
    9944:	e1bff715 	stw	r6,-36(fp)
	size_t len, i, j;

	len = p[0] & 0x3F;
    9948:	e0bff917 	ldw	r2,-28(fp)
    994c:	10800003 	ldbu	r2,0(r2)
    9950:	10803fcc 	andi	r2,r2,255
    9954:	10800fcc 	andi	r2,r2,63
    9958:	e0bffc15 	stw	r2,-16(fp)

	if (!len) {
    995c:	e0bffc17 	ldw	r2,-16(fp)
    9960:	10000c1e 	bne	r2,zero,9994 <parse_string+0x68>
		*str = calloc(1, 3);
    9964:	014000c4 	movi	r5,3
    9968:	01000044 	movi	r4,1
    996c:	0014fa80 	call	14fa8 <calloc>
    9970:	1007883a 	mov	r3,r2
    9974:	e0bff817 	ldw	r2,-32(fp)
    9978:	10c00015 	stw	r3,0(r2)
		*str[0] = (FRU_STRING_ASCII << 6);
    997c:	e0bff817 	ldw	r2,-32(fp)
    9980:	10800017 	ldw	r2,0(r2)
    9984:	00fff004 	movi	r3,-64
    9988:	10c00005 	stb	r3,0(r2)
		return 1;
    998c:	00800044 	movi	r2,1
    9990:	0000cd06 	br	9cc8 <parse_string+0x39c>
	}

	switch((p[0] >> 6) & 0x3 ) {
    9994:	e0bff917 	ldw	r2,-28(fp)
    9998:	10800003 	ldbu	r2,0(r2)
    999c:	10803fcc 	andi	r2,r2,255
    99a0:	1004d1ba 	srli	r2,r2,6
    99a4:	10803fcc 	andi	r2,r2,255
    99a8:	108000cc 	andi	r2,r2,3
    99ac:	10c00060 	cmpeqi	r3,r2,1
    99b0:	18001a1e 	bne	r3,zero,9a1c <parse_string+0xf0>
    99b4:	10c00088 	cmpgei	r3,r2,2
    99b8:	1800021e 	bne	r3,zero,99c4 <parse_string+0x98>
    99bc:	10000626 	beq	r2,zero,99d8 <parse_string+0xac>
    99c0:	0000bf06 	br	9cc0 <parse_string+0x394>
    99c4:	10c000a0 	cmpeqi	r3,r2,2
    99c8:	1800181e 	bne	r3,zero,9a2c <parse_string+0x100>
    99cc:	108000e0 	cmpeqi	r2,r2,3
    99d0:	1000461e 	bne	r2,zero,9aec <parse_string+0x1c0>
    99d4:	0000ba06 	br	9cc0 <parse_string+0x394>
		case FRU_STRING_BINARY:
			/* binary or unspecified */
			*str = calloc(1, len + 2);
    99d8:	e0bffc17 	ldw	r2,-16(fp)
    99dc:	10800084 	addi	r2,r2,2
    99e0:	100b883a 	mov	r5,r2
    99e4:	01000044 	movi	r4,1
    99e8:	0014fa80 	call	14fa8 <calloc>
    99ec:	1007883a 	mov	r3,r2
    99f0:	e0bff817 	ldw	r2,-32(fp)
    99f4:	10c00015 	stw	r3,0(r2)
			memcpy(*str, p, len + 1);
    99f8:	e0bff817 	ldw	r2,-32(fp)
    99fc:	10c00017 	ldw	r3,0(r2)
    9a00:	e0bffc17 	ldw	r2,-16(fp)
    9a04:	10800044 	addi	r2,r2,1
    9a08:	100d883a 	mov	r6,r2
    9a0c:	e17ff917 	ldw	r5,-28(fp)
    9a10:	1809883a 	mov	r4,r3
    9a14:	0015ac00 	call	15ac0 <memcpy>
			break;
    9a18:	0000a906 	br	9cc0 <parse_string+0x394>
		case FRU_STRING_BCD:
			/* BCD plus */
			printf_err("BCD - sorry\n");
    9a1c:	010000f4 	movhi	r4,3
    9a20:	21096f04 	addi	r4,r4,9660
    9a24:	00164700 	call	16470 <puts>
			break;
    9a28:	0000a506 	br	9cc0 <parse_string+0x394>
			/* 6-bit ASCII, packed */
			{
				unsigned char *tmp1, *tmp2;
				size_t tlen;

				tmp1 = six2ascii(&p[1], p[0]& 0x3F);
    9a2c:	e0bff917 	ldw	r2,-28(fp)
    9a30:	10c00044 	addi	r3,r2,1
    9a34:	e0bff917 	ldw	r2,-28(fp)
    9a38:	10800003 	ldbu	r2,0(r2)
    9a3c:	10803fcc 	andi	r2,r2,255
    9a40:	10800fcc 	andi	r2,r2,63
    9a44:	100b883a 	mov	r5,r2
    9a48:	1809883a 	mov	r4,r3
    9a4c:	00096e40 	call	96e4 <six2ascii>
    9a50:	e0bffb15 	stw	r2,-20(fp)
				tlen = strlen((char *)tmp1);
    9a54:	e13ffb17 	ldw	r4,-20(fp)
    9a58:	001676c0 	call	1676c <strlen>
    9a5c:	e0bffd15 	stw	r2,-12(fp)
				*str = calloc(1, tlen + 2);
    9a60:	e0bffd17 	ldw	r2,-12(fp)
    9a64:	10800084 	addi	r2,r2,2
    9a68:	100b883a 	mov	r5,r2
    9a6c:	01000044 	movi	r4,1
    9a70:	0014fa80 	call	14fa8 <calloc>
    9a74:	1007883a 	mov	r3,r2
    9a78:	e0bff817 	ldw	r2,-32(fp)
    9a7c:	10c00015 	stw	r3,0(r2)

				tmp2 = *str;
    9a80:	e0bff817 	ldw	r2,-32(fp)
    9a84:	10800017 	ldw	r2,0(r2)
    9a88:	e0bffa15 	stw	r2,-24(fp)
				tmp2++;
    9a8c:	e0bffa17 	ldw	r2,-24(fp)
    9a90:	10800044 	addi	r2,r2,1
    9a94:	e0bffa15 	stw	r2,-24(fp)
				memcpy(tmp2, tmp1, tlen + 1);
    9a98:	e0bffd17 	ldw	r2,-12(fp)
    9a9c:	10800044 	addi	r2,r2,1
    9aa0:	100d883a 	mov	r6,r2
    9aa4:	e17ffb17 	ldw	r5,-20(fp)
    9aa8:	e13ffa17 	ldw	r4,-24(fp)
    9aac:	0015ac00 	call	15ac0 <memcpy>
				if (tlen > 0x3F)
    9ab0:	e0bffd17 	ldw	r2,-12(fp)
    9ab4:	10801030 	cmpltui	r2,r2,64
    9ab8:	1000021e 	bne	r2,zero,9ac4 <parse_string+0x198>
					tlen = 0x3F;
    9abc:	00800fc4 	movi	r2,63
    9ac0:	e0bffd15 	stw	r2,-12(fp)

				*str[0] = (FRU_STRING_ASCII << 6) | tlen;
    9ac4:	e0bffd17 	ldw	r2,-12(fp)
    9ac8:	1009883a 	mov	r4,r2
    9acc:	e0bff817 	ldw	r2,-32(fp)
    9ad0:	10800017 	ldw	r2,0(r2)
    9ad4:	00fff004 	movi	r3,-64
    9ad8:	20c6b03a 	or	r3,r4,r3
    9adc:	10c00005 	stb	r3,0(r2)
				free(tmp1);
    9ae0:	e13ffb17 	ldw	r4,-20(fp)
    9ae4:	001526c0 	call	1526c <free>
			}
			break;
    9ae8:	00007506 	br	9cc0 <parse_string+0x394>
		case FRU_STRING_ASCII:
			/* 8-bit ASCII */
			*str = calloc(1, len + 2);
    9aec:	e0bffc17 	ldw	r2,-16(fp)
    9af0:	10800084 	addi	r2,r2,2
    9af4:	100b883a 	mov	r5,r2
    9af8:	01000044 	movi	r4,1
    9afc:	0014fa80 	call	14fa8 <calloc>
    9b00:	1007883a 	mov	r3,r2
    9b04:	e0bff817 	ldw	r2,-32(fp)
    9b08:	10c00015 	stw	r3,0(r2)
			memcpy(*str, p, len + 1);
    9b0c:	e0bff817 	ldw	r2,-32(fp)
    9b10:	10c00017 	ldw	r3,0(r2)
    9b14:	e0bffc17 	ldw	r2,-16(fp)
    9b18:	10800044 	addi	r2,r2,1
    9b1c:	100d883a 	mov	r6,r2
    9b20:	e17ff917 	ldw	r5,-28(fp)
    9b24:	1809883a 	mov	r4,r3
    9b28:	0015ac00 	call	15ac0 <memcpy>
			for (i = 1; i < len; i++) {
    9b2c:	00800044 	movi	r2,1
    9b30:	e0bfff15 	stw	r2,-4(fp)
    9b34:	00005e06 	br	9cb0 <parse_string+0x384>
				if (p[i] < 0x20 || p[i] == 0x7F) {
    9b38:	e0fff917 	ldw	r3,-28(fp)
    9b3c:	e0bfff17 	ldw	r2,-4(fp)
    9b40:	1885883a 	add	r2,r3,r2
    9b44:	10800003 	ldbu	r2,0(r2)
    9b48:	10803fcc 	andi	r2,r2,255
    9b4c:	10800830 	cmpltui	r2,r2,32
    9b50:	1000071e 	bne	r2,zero,9b70 <parse_string+0x244>
    9b54:	e0fff917 	ldw	r3,-28(fp)
    9b58:	e0bfff17 	ldw	r2,-4(fp)
    9b5c:	1885883a 	add	r2,r3,r2
    9b60:	10800003 	ldbu	r2,0(r2)
    9b64:	10803fcc 	andi	r2,r2,255
    9b68:	10801fd8 	cmpnei	r2,r2,127
    9b6c:	10004d1e 	bne	r2,zero,9ca4 <parse_string+0x378>
					printf_warn("Field '%s' marked as ASCII, but contains non-printable "
    9b70:	e17ff717 	ldw	r5,-36(fp)
    9b74:	010000f4 	movhi	r4,3
    9b78:	21097204 	addi	r4,r4,9672
    9b7c:	001634c0 	call	1634c <printf>
							"characters:\n", field);
					printf_warn("  Length/Type : 0x%x (length:%i; type:ASCII(%i)\n",
    9b80:	e0bff917 	ldw	r2,-28(fp)
    9b84:	10800003 	ldbu	r2,0(r2)
    9b88:	10c03fcc 	andi	r3,r2,255
    9b8c:	e0bff917 	ldw	r2,-28(fp)
    9b90:	10800003 	ldbu	r2,0(r2)
    9b94:	10803fcc 	andi	r2,r2,255
    9b98:	10800fcc 	andi	r2,r2,63
    9b9c:	01c000c4 	movi	r7,3
    9ba0:	100d883a 	mov	r6,r2
    9ba4:	180b883a 	mov	r5,r3
    9ba8:	010000f4 	movhi	r4,3
    9bac:	21098304 	addi	r4,r4,9740
    9bb0:	001634c0 	call	1634c <printf>
							p[0], p[0] & 0x3F, FRU_STRING_ASCII);
					printf_warn("  Contents : ");
    9bb4:	010000f4 	movhi	r4,3
    9bb8:	21099004 	addi	r4,r4,9792
    9bbc:	001634c0 	call	1634c <printf>
					for (j = 1; j < len + 1; j++)
    9bc0:	00800044 	movi	r2,1
    9bc4:	e0bffe15 	stw	r2,-8(fp)
    9bc8:	00000c06 	br	9bfc <parse_string+0x2d0>
						printf_warn("0x%02x ", p[j]);
    9bcc:	e0fff917 	ldw	r3,-28(fp)
    9bd0:	e0bffe17 	ldw	r2,-8(fp)
    9bd4:	1885883a 	add	r2,r3,r2
    9bd8:	10800003 	ldbu	r2,0(r2)
    9bdc:	10803fcc 	andi	r2,r2,255
    9be0:	100b883a 	mov	r5,r2
    9be4:	010000f4 	movhi	r4,3
    9be8:	21099404 	addi	r4,r4,9808
    9bec:	001634c0 	call	1634c <printf>
					for (j = 1; j < len + 1; j++)
    9bf0:	e0bffe17 	ldw	r2,-8(fp)
    9bf4:	10800044 	addi	r2,r2,1
    9bf8:	e0bffe15 	stw	r2,-8(fp)
    9bfc:	e0bffc17 	ldw	r2,-16(fp)
    9c00:	10800044 	addi	r2,r2,1
    9c04:	e0fffe17 	ldw	r3,-8(fp)
    9c08:	18bff036 	bltu	r3,r2,9bcc <__alt_mem_mcu_subsystem_ram_0+0x77fe9bcc>
					printf_warn(" |");
    9c0c:	010000f4 	movhi	r4,3
    9c10:	21099604 	addi	r4,r4,9816
    9c14:	001634c0 	call	1634c <printf>
					for (j = 0; j < len + 1; j++)
    9c18:	e03ffe15 	stw	zero,-8(fp)
    9c1c:	00001a06 	br	9c88 <parse_string+0x35c>
						printf_warn("%c", ((p[j] < 32) || (p[j] >= 127)) ? '.': p[j]);
    9c20:	e0fff917 	ldw	r3,-28(fp)
    9c24:	e0bffe17 	ldw	r2,-8(fp)
    9c28:	1885883a 	add	r2,r3,r2
    9c2c:	10800003 	ldbu	r2,0(r2)
    9c30:	10803fcc 	andi	r2,r2,255
    9c34:	10800830 	cmpltui	r2,r2,32
    9c38:	10000d1e 	bne	r2,zero,9c70 <parse_string+0x344>
    9c3c:	e0fff917 	ldw	r3,-28(fp)
    9c40:	e0bffe17 	ldw	r2,-8(fp)
    9c44:	1885883a 	add	r2,r3,r2
    9c48:	10800003 	ldbu	r2,0(r2)
    9c4c:	10803fcc 	andi	r2,r2,255
    9c50:	10801fe8 	cmpgeui	r2,r2,127
    9c54:	1000061e 	bne	r2,zero,9c70 <parse_string+0x344>
    9c58:	e0fff917 	ldw	r3,-28(fp)
    9c5c:	e0bffe17 	ldw	r2,-8(fp)
    9c60:	1885883a 	add	r2,r3,r2
    9c64:	10800003 	ldbu	r2,0(r2)
    9c68:	10803fcc 	andi	r2,r2,255
    9c6c:	00000106 	br	9c74 <parse_string+0x348>
    9c70:	00800b84 	movi	r2,46
    9c74:	1009883a 	mov	r4,r2
    9c78:	001638c0 	call	1638c <putchar>
					for (j = 0; j < len + 1; j++)
    9c7c:	e0bffe17 	ldw	r2,-8(fp)
    9c80:	10800044 	addi	r2,r2,1
    9c84:	e0bffe15 	stw	r2,-8(fp)
    9c88:	e0bffc17 	ldw	r2,-16(fp)
    9c8c:	10800044 	addi	r2,r2,1
    9c90:	e0fffe17 	ldw	r3,-8(fp)
    9c94:	18bfe236 	bltu	r3,r2,9c20 <__alt_mem_mcu_subsystem_ram_0+0x77fe9c20>
					printf_warn("|\n");
    9c98:	010000f4 	movhi	r4,3
    9c9c:	21099704 	addi	r4,r4,9820
    9ca0:	00164700 	call	16470 <puts>
			for (i = 1; i < len; i++) {
    9ca4:	e0bfff17 	ldw	r2,-4(fp)
    9ca8:	10800044 	addi	r2,r2,1
    9cac:	e0bfff15 	stw	r2,-4(fp)
    9cb0:	e0ffff17 	ldw	r3,-4(fp)
    9cb4:	e0bffc17 	ldw	r2,-16(fp)
    9cb8:	18bf9f36 	bltu	r3,r2,9b38 <__alt_mem_mcu_subsystem_ram_0+0x77fe9b38>
				}
			}
			break;
    9cbc:	0001883a 	nop
	}
	return len + 1;
    9cc0:	e0bffc17 	ldw	r2,-16(fp)
    9cc4:	10800044 	addi	r2,r2,1
}
    9cc8:	e037883a 	mov	sp,fp
    9ccc:	dfc00117 	ldw	ra,4(sp)
    9cd0:	df000017 	ldw	fp,0(sp)
    9cd4:	dec00204 	addi	sp,sp,8
    9cd8:	f800283a 	ret

00009cdc <parse_board_area>:
/*
 * Board Info Area Format
 * Platform Management FRU Information Storage Definition: Section 11
 */
struct BOARD_INFO * parse_board_area(unsigned char *data)
{
    9cdc:	defff704 	addi	sp,sp,-36
    9ce0:	dfc00815 	stw	ra,32(sp)
    9ce4:	df000715 	stw	fp,28(sp)
    9ce8:	df000704 	addi	fp,sp,28
    9cec:	e13ffa15 	stw	r4,-24(fp)

	struct BOARD_INFO *fru;
	unsigned char *p;
	unsigned int len, i, j;

	fru = calloc(1, sizeof(struct BOARD_INFO));
    9cf0:	01401104 	movi	r5,68
    9cf4:	01000044 	movi	r4,1
    9cf8:	0014fa80 	call	14fa8 <calloc>
    9cfc:	e0bffc15 	stw	r2,-16(fp)

	if (data[0] != 0x01) {
    9d00:	e0bffa17 	ldw	r2,-24(fp)
    9d04:	10800003 	ldbu	r2,0(r2)
    9d08:	10803fcc 	andi	r2,r2,255
    9d0c:	10800060 	cmpeqi	r2,r2,1
    9d10:	1000081e 	bne	r2,zero,9d34 <parse_board_area+0x58>
		printf_err("Board Area Format Version mismatch: 0x%02x should be 0x01\n", data [0]);
    9d14:	e0bffa17 	ldw	r2,-24(fp)
    9d18:	10800003 	ldbu	r2,0(r2)
    9d1c:	10803fcc 	andi	r2,r2,255
    9d20:	100b883a 	mov	r5,r2
    9d24:	010000f4 	movhi	r4,3
    9d28:	21099804 	addi	r4,r4,9824
    9d2c:	001634c0 	call	1634c <printf>
		goto err;
    9d30:	0000e806 	br	a0d4 <parse_board_area+0x3f8>
	}

	len = (data[1] * 8) - 1;
    9d34:	e0bffa17 	ldw	r2,-24(fp)
    9d38:	10800044 	addi	r2,r2,1
    9d3c:	10800003 	ldbu	r2,0(r2)
    9d40:	10803fcc 	andi	r2,r2,255
    9d44:	100490fa 	slli	r2,r2,3
    9d48:	10bfffc4 	addi	r2,r2,-1
    9d4c:	e0bffe15 	stw	r2,-8(fp)
	if (calc_zero_checksum(data, len)) {
    9d50:	e17ffe17 	ldw	r5,-8(fp)
    9d54:	e13ffa17 	ldw	r4,-24(fp)
    9d58:	00093240 	call	9324 <calc_zero_checksum>
    9d5c:	10803fcc 	andi	r2,r2,255
    9d60:	10000426 	beq	r2,zero,9d74 <parse_board_area+0x98>
		printf_err("Board Area Checksum failed");
    9d64:	010000f4 	movhi	r4,3
    9d68:	2109a704 	addi	r4,r4,9884
    9d6c:	001634c0 	call	1634c <printf>
		goto err;
    9d70:	0000d806 	br	a0d4 <parse_board_area+0x3f8>
	}

	if (data[2] != 0 && data[2] != 25) {
    9d74:	e0bffa17 	ldw	r2,-24(fp)
    9d78:	10800084 	addi	r2,r2,2
    9d7c:	10800003 	ldbu	r2,0(r2)
    9d80:	10803fcc 	andi	r2,r2,255
    9d84:	10000f26 	beq	r2,zero,9dc4 <parse_board_area+0xe8>
    9d88:	e0bffa17 	ldw	r2,-24(fp)
    9d8c:	10800084 	addi	r2,r2,2
    9d90:	10800003 	ldbu	r2,0(r2)
    9d94:	10803fcc 	andi	r2,r2,255
    9d98:	10800660 	cmpeqi	r2,r2,25
    9d9c:	1000091e 	bne	r2,zero,9dc4 <parse_board_area+0xe8>
		printf_err("Board Area is non-English - sorry: Lang code = %i\n", data[2]);
    9da0:	e0bffa17 	ldw	r2,-24(fp)
    9da4:	10800084 	addi	r2,r2,2
    9da8:	10800003 	ldbu	r2,0(r2)
    9dac:	10803fcc 	andi	r2,r2,255
    9db0:	100b883a 	mov	r5,r2
    9db4:	010000f4 	movhi	r4,3
    9db8:	2109ae04 	addi	r4,r4,9912
    9dbc:	001634c0 	call	1634c <printf>
		goto err;
    9dc0:	0000c406 	br	a0d4 <parse_board_area+0x3f8>
	}

	len--;
    9dc4:	e0bffe17 	ldw	r2,-8(fp)
    9dc8:	10bfffc4 	addi	r2,r2,-1
    9dcc:	e0bffe15 	stw	r2,-8(fp)
	while ((data[len] == 0x00) && (len != 0))
    9dd0:	00000306 	br	9de0 <parse_board_area+0x104>
		len--;
    9dd4:	e0bffe17 	ldw	r2,-8(fp)
    9dd8:	10bfffc4 	addi	r2,r2,-1
    9ddc:	e0bffe15 	stw	r2,-8(fp)
	while ((data[len] == 0x00) && (len != 0))
    9de0:	e0fffa17 	ldw	r3,-24(fp)
    9de4:	e0bffe17 	ldw	r2,-8(fp)
    9de8:	1885883a 	add	r2,r3,r2
    9dec:	10800003 	ldbu	r2,0(r2)
    9df0:	10803fcc 	andi	r2,r2,255
    9df4:	1000021e 	bne	r2,zero,9e00 <parse_board_area+0x124>
    9df8:	e0bffe17 	ldw	r2,-8(fp)
    9dfc:	103ff51e 	bne	r2,zero,9dd4 <__alt_mem_mcu_subsystem_ram_0+0x77fe9dd4>
	if (len == 0 || data[len] != 0xC1) {
    9e00:	e0bffe17 	ldw	r2,-8(fp)
    9e04:	10000726 	beq	r2,zero,9e24 <parse_board_area+0x148>
    9e08:	e0fffa17 	ldw	r3,-24(fp)
    9e0c:	e0bffe17 	ldw	r2,-8(fp)
    9e10:	1885883a 	add	r2,r3,r2
    9e14:	10800003 	ldbu	r2,0(r2)
    9e18:	10803fcc 	andi	r2,r2,255
    9e1c:	10803060 	cmpeqi	r2,r2,193
    9e20:	10000b1e 	bne	r2,zero,9e50 <parse_board_area+0x174>
		printf_err("BOARD INFO not terminated properly, walking backwards len: "
    9e24:	e0fffa17 	ldw	r3,-24(fp)
    9e28:	e0bffe17 	ldw	r2,-8(fp)
    9e2c:	1885883a 	add	r2,r3,r2
    9e30:	10800003 	ldbu	r2,0(r2)
    9e34:	10803fcc 	andi	r2,r2,255
    9e38:	100d883a 	mov	r6,r2
    9e3c:	e17ffe17 	ldw	r5,-8(fp)
    9e40:	010000f4 	movhi	r4,3
    9e44:	2109bb04 	addi	r4,r4,9964
    9e48:	001634c0 	call	1634c <printf>
				"%i:0x%02x should be 0xC1\n", len, data[len]);
		goto err;
    9e4c:	0000a106 	br	a0d4 <parse_board_area+0x3f8>
	}

	fru->mfg_date = data[3] | (data[4] << 8) | (data[5] << 16);
    9e50:	e0bffa17 	ldw	r2,-24(fp)
    9e54:	108000c4 	addi	r2,r2,3
    9e58:	10800003 	ldbu	r2,0(r2)
    9e5c:	10c03fcc 	andi	r3,r2,255
    9e60:	e0bffa17 	ldw	r2,-24(fp)
    9e64:	10800104 	addi	r2,r2,4
    9e68:	10800003 	ldbu	r2,0(r2)
    9e6c:	10803fcc 	andi	r2,r2,255
    9e70:	1004923a 	slli	r2,r2,8
    9e74:	1886b03a 	or	r3,r3,r2
    9e78:	e0bffa17 	ldw	r2,-24(fp)
    9e7c:	10800144 	addi	r2,r2,5
    9e80:	10800003 	ldbu	r2,0(r2)
    9e84:	10803fcc 	andi	r2,r2,255
    9e88:	1004943a 	slli	r2,r2,16
    9e8c:	1884b03a 	or	r2,r3,r2
    9e90:	1007883a 	mov	r3,r2
    9e94:	e0bffc17 	ldw	r2,-16(fp)
    9e98:	10c00115 	stw	r3,4(r2)

	p = &data[6];
    9e9c:	e0bffa17 	ldw	r2,-24(fp)
    9ea0:	10800184 	addi	r2,r2,6
    9ea4:	e0bfff15 	stw	r2,-4(fp)
	len -= 6;
    9ea8:	e0bffe17 	ldw	r2,-8(fp)
    9eac:	10bffe84 	addi	r2,r2,-6
    9eb0:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->manufacturer, "Manufacture");
    9eb4:	e0bffc17 	ldw	r2,-16(fp)
    9eb8:	10800204 	addi	r2,r2,8
    9ebc:	018000f4 	movhi	r6,3
    9ec0:	3189d104 	addi	r6,r6,10052
    9ec4:	100b883a 	mov	r5,r2
    9ec8:	e13fff17 	ldw	r4,-4(fp)
    9ecc:	000992c0 	call	992c <parse_string>
    9ed0:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    9ed4:	e0ffff17 	ldw	r3,-4(fp)
    9ed8:	e0bffb17 	ldw	r2,-20(fp)
    9edc:	1885883a 	add	r2,r3,r2
    9ee0:	e0bfff15 	stw	r2,-4(fp)
    9ee4:	e0fffe17 	ldw	r3,-8(fp)
    9ee8:	e0bffb17 	ldw	r2,-20(fp)
    9eec:	1885c83a 	sub	r2,r3,r2
    9ef0:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->product_name, "Product Name");
    9ef4:	e0bffc17 	ldw	r2,-16(fp)
    9ef8:	10800304 	addi	r2,r2,12
    9efc:	018000f4 	movhi	r6,3
    9f00:	3189d404 	addi	r6,r6,10064
    9f04:	100b883a 	mov	r5,r2
    9f08:	e13fff17 	ldw	r4,-4(fp)
    9f0c:	000992c0 	call	992c <parse_string>
    9f10:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    9f14:	e0ffff17 	ldw	r3,-4(fp)
    9f18:	e0bffb17 	ldw	r2,-20(fp)
    9f1c:	1885883a 	add	r2,r3,r2
    9f20:	e0bfff15 	stw	r2,-4(fp)
    9f24:	e0fffe17 	ldw	r3,-8(fp)
    9f28:	e0bffb17 	ldw	r2,-20(fp)
    9f2c:	1885c83a 	sub	r2,r3,r2
    9f30:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->serial_number, "Serial Number");
    9f34:	e0bffc17 	ldw	r2,-16(fp)
    9f38:	10800404 	addi	r2,r2,16
    9f3c:	018000f4 	movhi	r6,3
    9f40:	3189d804 	addi	r6,r6,10080
    9f44:	100b883a 	mov	r5,r2
    9f48:	e13fff17 	ldw	r4,-4(fp)
    9f4c:	000992c0 	call	992c <parse_string>
    9f50:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    9f54:	e0ffff17 	ldw	r3,-4(fp)
    9f58:	e0bffb17 	ldw	r2,-20(fp)
    9f5c:	1885883a 	add	r2,r3,r2
    9f60:	e0bfff15 	stw	r2,-4(fp)
    9f64:	e0fffe17 	ldw	r3,-8(fp)
    9f68:	e0bffb17 	ldw	r2,-20(fp)
    9f6c:	1885c83a 	sub	r2,r3,r2
    9f70:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->part_number, "Part Number");
    9f74:	e0bffc17 	ldw	r2,-16(fp)
    9f78:	10800504 	addi	r2,r2,20
    9f7c:	018000f4 	movhi	r6,3
    9f80:	3189dc04 	addi	r6,r6,10096
    9f84:	100b883a 	mov	r5,r2
    9f88:	e13fff17 	ldw	r4,-4(fp)
    9f8c:	000992c0 	call	992c <parse_string>
    9f90:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    9f94:	e0ffff17 	ldw	r3,-4(fp)
    9f98:	e0bffb17 	ldw	r2,-20(fp)
    9f9c:	1885883a 	add	r2,r3,r2
    9fa0:	e0bfff15 	stw	r2,-4(fp)
    9fa4:	e0fffe17 	ldw	r3,-8(fp)
    9fa8:	e0bffb17 	ldw	r2,-20(fp)
    9fac:	1885c83a 	sub	r2,r3,r2
    9fb0:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->FRU_file_ID, "FRU File ID");
    9fb4:	e0bffc17 	ldw	r2,-16(fp)
    9fb8:	10800604 	addi	r2,r2,24
    9fbc:	018000f4 	movhi	r6,3
    9fc0:	3189df04 	addi	r6,r6,10108
    9fc4:	100b883a 	mov	r5,r2
    9fc8:	e13fff17 	ldw	r4,-4(fp)
    9fcc:	000992c0 	call	992c <parse_string>
    9fd0:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    9fd4:	e0ffff17 	ldw	r3,-4(fp)
    9fd8:	e0bffb17 	ldw	r2,-20(fp)
    9fdc:	1885883a 	add	r2,r3,r2
    9fe0:	e0bfff15 	stw	r2,-4(fp)
    9fe4:	e0fffe17 	ldw	r3,-8(fp)
    9fe8:	e0bffb17 	ldw	r2,-20(fp)
    9fec:	1885c83a 	sub	r2,r3,r2
    9ff0:	e0bffe15 	stw	r2,-8(fp)

	j = 0;
    9ff4:	e03ffd15 	stw	zero,-12(fp)
	while (len != 0 && j < CUSTOM_FIELDS) {
    9ff8:	00001606 	br	a054 <parse_board_area+0x378>
		i = parse_string(p, &fru->custom[j], "Custom Field");
    9ffc:	e0bffd17 	ldw	r2,-12(fp)
    a000:	108001c4 	addi	r2,r2,7
    a004:	100490ba 	slli	r2,r2,2
    a008:	e0fffc17 	ldw	r3,-16(fp)
    a00c:	1885883a 	add	r2,r3,r2
    a010:	018000f4 	movhi	r6,3
    a014:	3189e204 	addi	r6,r6,10120
    a018:	100b883a 	mov	r5,r2
    a01c:	e13fff17 	ldw	r4,-4(fp)
    a020:	000992c0 	call	992c <parse_string>
    a024:	e0bffb15 	stw	r2,-20(fp)
		p += i, len -= i, j++;
    a028:	e0ffff17 	ldw	r3,-4(fp)
    a02c:	e0bffb17 	ldw	r2,-20(fp)
    a030:	1885883a 	add	r2,r3,r2
    a034:	e0bfff15 	stw	r2,-4(fp)
    a038:	e0fffe17 	ldw	r3,-8(fp)
    a03c:	e0bffb17 	ldw	r2,-20(fp)
    a040:	1885c83a 	sub	r2,r3,r2
    a044:	e0bffe15 	stw	r2,-8(fp)
    a048:	e0bffd17 	ldw	r2,-12(fp)
    a04c:	10800044 	addi	r2,r2,1
    a050:	e0bffd15 	stw	r2,-12(fp)
	while (len != 0 && j < CUSTOM_FIELDS) {
    a054:	e0bffe17 	ldw	r2,-8(fp)
    a058:	10000326 	beq	r2,zero,a068 <parse_board_area+0x38c>
    a05c:	e0bffd17 	ldw	r2,-12(fp)
    a060:	108002b0 	cmpltui	r2,r2,10
    a064:	103fe51e 	bne	r2,zero,9ffc <__alt_mem_mcu_subsystem_ram_0+0x77fe9ffc>
	}

	if (*p != 0xC1) {
    a068:	e0bfff17 	ldw	r2,-4(fp)
    a06c:	10800003 	ldbu	r2,0(r2)
    a070:	10803fcc 	andi	r2,r2,255
    a074:	10803060 	cmpeqi	r2,r2,193
    a078:	1000141e 	bne	r2,zero,a0cc <parse_board_area+0x3f0>
		printf_err("BOARD INFO not terminated properly, "
    a07c:	e0ffff17 	ldw	r3,-4(fp)
    a080:	e0bffa17 	ldw	r2,-24(fp)
    a084:	1889c83a 	sub	r4,r3,r2
    a088:	e0ffff17 	ldw	r3,-4(fp)
    a08c:	e0bffa17 	ldw	r2,-24(fp)
    a090:	1887c83a 	sub	r3,r3,r2
    a094:	e0bfff17 	ldw	r2,-4(fp)
    a098:	10800003 	ldbu	r2,0(r2)
    a09c:	11403fcc 	andi	r5,r2,255
    a0a0:	e0bfff17 	ldw	r2,-4(fp)
    a0a4:	10800003 	ldbu	r2,0(r2)
    a0a8:	10803fcc 	andi	r2,r2,255
    a0ac:	d8800015 	stw	r2,0(sp)
    a0b0:	280f883a 	mov	r7,r5
    a0b4:	180d883a 	mov	r6,r3
    a0b8:	200b883a 	mov	r5,r4
    a0bc:	010000f4 	movhi	r4,3
    a0c0:	2109e604 	addi	r4,r4,10136
    a0c4:	001634c0 	call	1634c <printf>
				"offset %02i(0x%02x) : %02i(0x%02x) should be 0xC1\n",
				p - data, p - data, *p, *p);
		goto err;
    a0c8:	00000206 	br	a0d4 <parse_board_area+0x3f8>
	}

	return fru;
    a0cc:	e0bffc17 	ldw	r2,-16(fp)
    a0d0:	00002706 	br	a170 <parse_board_area+0x494>

err:
	free(fru->manufacturer);
    a0d4:	e0bffc17 	ldw	r2,-16(fp)
    a0d8:	10800217 	ldw	r2,8(r2)
    a0dc:	1009883a 	mov	r4,r2
    a0e0:	001526c0 	call	1526c <free>
	free(fru->product_name);
    a0e4:	e0bffc17 	ldw	r2,-16(fp)
    a0e8:	10800317 	ldw	r2,12(r2)
    a0ec:	1009883a 	mov	r4,r2
    a0f0:	001526c0 	call	1526c <free>
	free(fru->serial_number);
    a0f4:	e0bffc17 	ldw	r2,-16(fp)
    a0f8:	10800417 	ldw	r2,16(r2)
    a0fc:	1009883a 	mov	r4,r2
    a100:	001526c0 	call	1526c <free>
	free(fru->part_number);
    a104:	e0bffc17 	ldw	r2,-16(fp)
    a108:	10800517 	ldw	r2,20(r2)
    a10c:	1009883a 	mov	r4,r2
    a110:	001526c0 	call	1526c <free>
	free(fru->FRU_file_ID);
    a114:	e0bffc17 	ldw	r2,-16(fp)
    a118:	10800617 	ldw	r2,24(r2)
    a11c:	1009883a 	mov	r4,r2
    a120:	001526c0 	call	1526c <free>
	for( j = 0; j < CUSTOM_FIELDS; j++)
    a124:	e03ffd15 	stw	zero,-12(fp)
    a128:	00000b06 	br	a158 <parse_board_area+0x47c>
		free(fru->custom[j]);
    a12c:	e0fffc17 	ldw	r3,-16(fp)
    a130:	e0bffd17 	ldw	r2,-12(fp)
    a134:	108001c4 	addi	r2,r2,7
    a138:	100490ba 	slli	r2,r2,2
    a13c:	1885883a 	add	r2,r3,r2
    a140:	10800017 	ldw	r2,0(r2)
    a144:	1009883a 	mov	r4,r2
    a148:	001526c0 	call	1526c <free>
	for( j = 0; j < CUSTOM_FIELDS; j++)
    a14c:	e0bffd17 	ldw	r2,-12(fp)
    a150:	10800044 	addi	r2,r2,1
    a154:	e0bffd15 	stw	r2,-12(fp)
    a158:	e0bffd17 	ldw	r2,-12(fp)
    a15c:	108002b0 	cmpltui	r2,r2,10
    a160:	103ff21e 	bne	r2,zero,a12c <__alt_mem_mcu_subsystem_ram_0+0x77fea12c>
	free(fru);
    a164:	e13ffc17 	ldw	r4,-16(fp)
    a168:	001526c0 	call	1526c <free>
	return NULL;
    a16c:	0005883a 	mov	r2,zero
}
    a170:	e037883a 	mov	sp,fp
    a174:	dfc00117 	ldw	ra,4(sp)
    a178:	df000017 	ldw	fp,0(sp)
    a17c:	dec00204 	addi	sp,sp,8
    a180:	f800283a 	ret

0000a184 <parse_multiboard_area>:
 * contained in the record.  * There are some FMC specific headers, defined
 * in section 5.5.1 of the FMC specification "IPMI Support". These FMC specific
 * sections have a 1 byte sub-type, and a 3 byte Unique Organization Identifier
 */
struct MULTIRECORD_INFO * parse_multiboard_area(unsigned char *data)
{
    a184:	defff704 	addi	sp,sp,-36
    a188:	dfc00815 	stw	ra,32(sp)
    a18c:	df000715 	stw	fp,28(sp)
    a190:	df000704 	addi	fp,sp,28
    a194:	e13ff915 	stw	r4,-28(fp)
	int i = 0, tmp, type;
    a198:	e03fff15 	stw	zero,-4(fp)
	unsigned char *p;
	struct MULTIRECORD_INFO *multi;

	multi = calloc(1, sizeof(struct MULTIRECORD_INFO));
    a19c:	01400e04 	movi	r5,56
    a1a0:	01000044 	movi	r4,1
    a1a4:	0014fa80 	call	14fa8 <calloc>
    a1a8:	e0bffd15 	stw	r2,-12(fp)

	p = data;
    a1ac:	e0bff917 	ldw	r2,-28(fp)
    a1b0:	e0bffe15 	stw	r2,-8(fp)

	do {
		if (i != 0)
    a1b4:	e0bfff17 	ldw	r2,-4(fp)
    a1b8:	10000926 	beq	r2,zero,a1e0 <parse_multiboard_area+0x5c>
			p += 5 + p[2];
    a1bc:	e0bffe17 	ldw	r2,-8(fp)
    a1c0:	10800084 	addi	r2,r2,2
    a1c4:	10800003 	ldbu	r2,0(r2)
    a1c8:	10803fcc 	andi	r2,r2,255
    a1cc:	10800144 	addi	r2,r2,5
    a1d0:	1007883a 	mov	r3,r2
    a1d4:	e0bffe17 	ldw	r2,-8(fp)
    a1d8:	10c5883a 	add	r2,r2,r3
    a1dc:	e0bffe15 	stw	r2,-8(fp)
		if (p[0] >= 0x06 && p[0] <= 0xBF) {
    a1e0:	e0bffe17 	ldw	r2,-8(fp)
    a1e4:	10800003 	ldbu	r2,0(r2)
    a1e8:	10803fcc 	andi	r2,r2,255
    a1ec:	108001b0 	cmpltui	r2,r2,6
    a1f0:	10000b1e 	bne	r2,zero,a220 <parse_multiboard_area+0x9c>
    a1f4:	e0bffe17 	ldw	r2,-8(fp)
    a1f8:	10800003 	ldbu	r2,0(r2)
    a1fc:	10803fcc 	andi	r2,r2,255
    a200:	10803028 	cmpgeui	r2,r2,192
    a204:	1000061e 	bne	r2,zero,a220 <parse_multiboard_area+0x9c>
			printf_err("MultiRecord Area %i: Invalid Record Header\n", i);
    a208:	e17fff17 	ldw	r5,-4(fp)
    a20c:	010000f4 	movhi	r4,3
    a210:	2109fc04 	addi	r4,r4,10224
    a214:	001634c0 	call	1634c <printf>
			return NULL;
    a218:	0005883a 	mov	r2,zero
    a21c:	00010b06 	br	a64c <parse_multiboard_area+0x4c8>
		}
		if (calc_zero_checksum(p, 4)) {
    a220:	01400104 	movi	r5,4
    a224:	e13ffe17 	ldw	r4,-8(fp)
    a228:	00093240 	call	9324 <calc_zero_checksum>
    a22c:	10803fcc 	andi	r2,r2,255
    a230:	10000a26 	beq	r2,zero,a25c <parse_multiboard_area+0xd8>
			printf_err("MultiRecord Area %i (Record Type 0x%x): "
    a234:	e0bffe17 	ldw	r2,-8(fp)
    a238:	10800003 	ldbu	r2,0(r2)
    a23c:	10803fcc 	andi	r2,r2,255
    a240:	100d883a 	mov	r6,r2
    a244:	e17fff17 	ldw	r5,-4(fp)
    a248:	010000f4 	movhi	r4,3
    a24c:	210a0704 	addi	r4,r4,10268
    a250:	001634c0 	call	1634c <printf>
					"Header Checksum failed\n", i, p[0]);
			return NULL;
    a254:	0005883a 	mov	r2,zero
    a258:	0000fc06 	br	a64c <parse_multiboard_area+0x4c8>
		}

		if (!p[2] || ((calc_zero_checksum(p+5, p[2] - 1) + p[3]) & 0xFF)) {
    a25c:	e0bffe17 	ldw	r2,-8(fp)
    a260:	10800084 	addi	r2,r2,2
    a264:	10800003 	ldbu	r2,0(r2)
    a268:	10803fcc 	andi	r2,r2,255
    a26c:	10001126 	beq	r2,zero,a2b4 <parse_multiboard_area+0x130>
    a270:	e0bffe17 	ldw	r2,-8(fp)
    a274:	10c00144 	addi	r3,r2,5
    a278:	e0bffe17 	ldw	r2,-8(fp)
    a27c:	10800084 	addi	r2,r2,2
    a280:	10800003 	ldbu	r2,0(r2)
    a284:	10803fcc 	andi	r2,r2,255
    a288:	10bfffc4 	addi	r2,r2,-1
    a28c:	100b883a 	mov	r5,r2
    a290:	1809883a 	mov	r4,r3
    a294:	00093240 	call	9324 <calc_zero_checksum>
    a298:	1007883a 	mov	r3,r2
    a29c:	e0bffe17 	ldw	r2,-8(fp)
    a2a0:	108000c4 	addi	r2,r2,3
    a2a4:	10800003 	ldbu	r2,0(r2)
    a2a8:	1885883a 	add	r2,r3,r2
    a2ac:	10803fcc 	andi	r2,r2,255
    a2b0:	10000a26 	beq	r2,zero,a2dc <parse_multiboard_area+0x158>
			printf_err("MultiRecord Area %i (Record Type 0x%x): "
    a2b4:	e0bffe17 	ldw	r2,-8(fp)
    a2b8:	10800003 	ldbu	r2,0(r2)
    a2bc:	10803fcc 	andi	r2,r2,255
    a2c0:	100d883a 	mov	r6,r2
    a2c4:	e17fff17 	ldw	r5,-4(fp)
    a2c8:	010000f4 	movhi	r4,3
    a2cc:	210a1704 	addi	r4,r4,10332
    a2d0:	001634c0 	call	1634c <printf>
					"Record Checksum failed\n", i, p[0]);
			return NULL;
    a2d4:	0005883a 	mov	r2,zero
    a2d8:	0000dc06 	br	a64c <parse_multiboard_area+0x4c8>
		}

		/*
		 * Record Type ID
		 */
		switch(p[0]) {
    a2dc:	e0bffe17 	ldw	r2,-8(fp)
    a2e0:	10800003 	ldbu	r2,0(r2)
    a2e4:	10803fcc 	andi	r2,r2,255
    a2e8:	0080ca0e 	bge	zero,r2,a614 <parse_multiboard_area+0x490>
    a2ec:	10c000d0 	cmplti	r3,r2,3
    a2f0:	1800031e 	bne	r3,zero,a300 <parse_multiboard_area+0x17c>
    a2f4:	10803ea0 	cmpeqi	r2,r2,250
    a2f8:	1000391e 	bne	r2,zero,a3e0 <parse_multiboard_area+0x25c>
    a2fc:	0000c506 	br	a614 <parse_multiboard_area+0x490>
			case MULTIRECORD_DC_OUTPUT:
			case MULTIRECORD_DC_INPUT:
				tmp = p[5] & 0xF;
    a300:	e0bffe17 	ldw	r2,-8(fp)
    a304:	10800144 	addi	r2,r2,5
    a308:	10800003 	ldbu	r2,0(r2)
    a30c:	10803fcc 	andi	r2,r2,255
    a310:	108003cc 	andi	r2,r2,15
    a314:	e0bffa15 	stw	r2,-24(fp)
				if ((tmp) >= NUM_SUPPLIES)
    a318:	e0bffa17 	ldw	r2,-24(fp)
    a31c:	10800310 	cmplti	r2,r2,12
    a320:	1000031e 	bne	r2,zero,a330 <parse_multiboard_area+0x1ac>
					printf_err("Too many Supplies defined in Multirecords\n");
    a324:	010000f4 	movhi	r4,3
    a328:	210a2704 	addi	r4,r4,10396
    a32c:	00164700 	call	16470 <puts>

				multi->supplies[tmp] = calloc(1, p[2] + 6);
    a330:	e0bffe17 	ldw	r2,-8(fp)
    a334:	10800084 	addi	r2,r2,2
    a338:	10800003 	ldbu	r2,0(r2)
    a33c:	10803fcc 	andi	r2,r2,255
    a340:	10800184 	addi	r2,r2,6
    a344:	100b883a 	mov	r5,r2
    a348:	01000044 	movi	r4,1
    a34c:	0014fa80 	call	14fa8 <calloc>
    a350:	1009883a 	mov	r4,r2
    a354:	e0fffd17 	ldw	r3,-12(fp)
    a358:	e0bffa17 	ldw	r2,-24(fp)
    a35c:	100490ba 	slli	r2,r2,2
    a360:	1885883a 	add	r2,r3,r2
    a364:	11000015 	stw	r4,0(r2)
				memcpy (multi->supplies[tmp], p, p[2] + 6);
    a368:	e0fffd17 	ldw	r3,-12(fp)
    a36c:	e0bffa17 	ldw	r2,-24(fp)
    a370:	100490ba 	slli	r2,r2,2
    a374:	1885883a 	add	r2,r3,r2
    a378:	10c00017 	ldw	r3,0(r2)
    a37c:	e0bffe17 	ldw	r2,-8(fp)
    a380:	10800084 	addi	r2,r2,2
    a384:	10800003 	ldbu	r2,0(r2)
    a388:	10803fcc 	andi	r2,r2,255
    a38c:	10800184 	addi	r2,r2,6
    a390:	100d883a 	mov	r6,r2
    a394:	e17ffe17 	ldw	r5,-8(fp)
    a398:	1809883a 	mov	r4,r3
    a39c:	0015ac00 	call	15ac0 <memcpy>
				multi->supplies[tmp][1] = multi->supplies[tmp][1] & 0x7F;
    a3a0:	e0fffd17 	ldw	r3,-12(fp)
    a3a4:	e0bffa17 	ldw	r2,-24(fp)
    a3a8:	100490ba 	slli	r2,r2,2
    a3ac:	1885883a 	add	r2,r3,r2
    a3b0:	10800017 	ldw	r2,0(r2)
    a3b4:	10800044 	addi	r2,r2,1
    a3b8:	10c00003 	ldbu	r3,0(r2)
    a3bc:	e13ffd17 	ldw	r4,-12(fp)
    a3c0:	e0bffa17 	ldw	r2,-24(fp)
    a3c4:	100490ba 	slli	r2,r2,2
    a3c8:	2085883a 	add	r2,r4,r2
    a3cc:	10800017 	ldw	r2,0(r2)
    a3d0:	10800044 	addi	r2,r2,1
    a3d4:	18c01fcc 	andi	r3,r3,127
    a3d8:	10c00005 	stb	r3,0(r2)
				break;
    a3dc:	00009006 	br	a620 <parse_multiboard_area+0x49c>
			case MULTIRECORD_FMC:
				/*
				 * Use VITA's OUI: 0x0012a2 is specified in the FMC spec - Rule 5.77
				 */
				if ((p[5] | p[6] << 8 | p[7] << 16) != VITA_OUI) {
    a3e0:	e0bffe17 	ldw	r2,-8(fp)
    a3e4:	10800144 	addi	r2,r2,5
    a3e8:	10800003 	ldbu	r2,0(r2)
    a3ec:	10c03fcc 	andi	r3,r2,255
    a3f0:	e0bffe17 	ldw	r2,-8(fp)
    a3f4:	10800184 	addi	r2,r2,6
    a3f8:	10800003 	ldbu	r2,0(r2)
    a3fc:	10803fcc 	andi	r2,r2,255
    a400:	1004923a 	slli	r2,r2,8
    a404:	1886b03a 	or	r3,r3,r2
    a408:	e0bffe17 	ldw	r2,-8(fp)
    a40c:	108001c4 	addi	r2,r2,7
    a410:	10800003 	ldbu	r2,0(r2)
    a414:	10803fcc 	andi	r2,r2,255
    a418:	1004943a 	slli	r2,r2,16
    a41c:	1884b03a 	or	r2,r3,r2
    a420:	1084a8a0 	cmpeqi	r2,r2,4770
    a424:	1000151e 	bne	r2,zero,a47c <parse_multiboard_area+0x2f8>
					printf_err("OUI Doesn't match : is 0x%06X, "
    a428:	e0bffe17 	ldw	r2,-8(fp)
    a42c:	10800144 	addi	r2,r2,5
    a430:	10800003 	ldbu	r2,0(r2)
    a434:	10c03fcc 	andi	r3,r2,255
    a438:	e0bffe17 	ldw	r2,-8(fp)
    a43c:	10800184 	addi	r2,r2,6
    a440:	10800003 	ldbu	r2,0(r2)
    a444:	10803fcc 	andi	r2,r2,255
    a448:	1004923a 	slli	r2,r2,8
    a44c:	1886b03a 	or	r3,r3,r2
    a450:	e0bffe17 	ldw	r2,-8(fp)
    a454:	108001c4 	addi	r2,r2,7
    a458:	10800003 	ldbu	r2,0(r2)
    a45c:	10803fcc 	andi	r2,r2,255
    a460:	1004943a 	slli	r2,r2,16
    a464:	1884b03a 	or	r2,r3,r2
    a468:	0184a884 	movi	r6,4770
    a46c:	100b883a 	mov	r5,r2
    a470:	010000f4 	movhi	r4,3
    a474:	210a3204 	addi	r4,r4,10440
    a478:	001634c0 	call	1634c <printf>
						"should be 0x%06x\n", p[5] | p[6] << 8 | p[7] << 16, VITA_OUI);
				}
				/* type field is located: Header + Manufacturer ID = 5 + 3 */
				type = p[8] >> 4;
    a47c:	e0bffe17 	ldw	r2,-8(fp)
    a480:	10800204 	addi	r2,r2,8
    a484:	10800003 	ldbu	r2,0(r2)
    a488:	10803fcc 	andi	r2,r2,255
    a48c:	1004d13a 	srli	r2,r2,4
    a490:	10803fcc 	andi	r2,r2,255
    a494:	e0bffc15 	stw	r2,-16(fp)

				switch (type) {
    a498:	e0bffc17 	ldw	r2,-16(fp)
    a49c:	10000326 	beq	r2,zero,a4ac <parse_multiboard_area+0x328>
    a4a0:	10800060 	cmpeqi	r2,r2,1
    a4a4:	1000211e 	bne	r2,zero,a52c <parse_multiboard_area+0x3a8>
    a4a8:	00005406 	br	a5fc <parse_multiboard_area+0x478>
					case MULTIRECORD_CONNECTOR:
						/* see table 7 in FMC spec */
						multi->connector = calloc(1, p[2] + 6);
    a4ac:	e0bffe17 	ldw	r2,-8(fp)
    a4b0:	10800084 	addi	r2,r2,2
    a4b4:	10800003 	ldbu	r2,0(r2)
    a4b8:	10803fcc 	andi	r2,r2,255
    a4bc:	10800184 	addi	r2,r2,6
    a4c0:	100b883a 	mov	r5,r2
    a4c4:	01000044 	movi	r4,1
    a4c8:	0014fa80 	call	14fa8 <calloc>
    a4cc:	1007883a 	mov	r3,r2
    a4d0:	e0bffd17 	ldw	r2,-12(fp)
    a4d4:	10c00c15 	stw	r3,48(r2)
						memcpy (multi->connector, p, p[2] + 6);
    a4d8:	e0bffd17 	ldw	r2,-12(fp)
    a4dc:	10c00c17 	ldw	r3,48(r2)
    a4e0:	e0bffe17 	ldw	r2,-8(fp)
    a4e4:	10800084 	addi	r2,r2,2
    a4e8:	10800003 	ldbu	r2,0(r2)
    a4ec:	10803fcc 	andi	r2,r2,255
    a4f0:	10800184 	addi	r2,r2,6
    a4f4:	100d883a 	mov	r6,r2
    a4f8:	e17ffe17 	ldw	r5,-8(fp)
    a4fc:	1809883a 	mov	r4,r3
    a500:	0015ac00 	call	15ac0 <memcpy>
						/* This isn't the end 'til we re-assemble things */
						multi->connector[1] = multi->connector[1] & 0x7F;
    a504:	e0bffd17 	ldw	r2,-12(fp)
    a508:	10800c17 	ldw	r2,48(r2)
    a50c:	10800044 	addi	r2,r2,1
    a510:	10c00003 	ldbu	r3,0(r2)
    a514:	e0bffd17 	ldw	r2,-12(fp)
    a518:	10800c17 	ldw	r2,48(r2)
    a51c:	10800044 	addi	r2,r2,1
    a520:	18c01fcc 	andi	r3,r3,127
    a524:	10c00005 	stb	r3,0(r2)
						break;
    a528:	00003906 	br	a610 <parse_multiboard_area+0x48c>
					case MULTIRECORD_I2C:
						if (p[2] <= 5) {
    a52c:	e0bffe17 	ldw	r2,-8(fp)
    a530:	10800084 	addi	r2,r2,2
    a534:	10800003 	ldbu	r2,0(r2)
    a538:	10803fcc 	andi	r2,r2,255
    a53c:	108001a8 	cmpgeui	r2,r2,6
    a540:	1000091e 	bne	r2,zero,a568 <parse_multiboard_area+0x3e4>
							printf_warn("I2C MultiRecord is too short (len:%i)\n"
    a544:	e0bffe17 	ldw	r2,-8(fp)
    a548:	10800084 	addi	r2,r2,2
    a54c:	10800003 	ldbu	r2,0(r2)
    a550:	10803fcc 	andi	r2,r2,255
    a554:	100b883a 	mov	r5,r2
    a558:	010000f4 	movhi	r4,3
    a55c:	210a3f04 	addi	r4,r4,10492
    a560:	001634c0 	call	1634c <printf>
							strcpy ((char *)multi->i2c_devices, (char *)foo2);
							free(foo2);
							/* This isn't the end 'til we re-assemble things */
							multi->i2c_devices[1] = multi->i2c_devices[1] & 0x7F;
						}
						break;
    a564:	00002a06 	br	a610 <parse_multiboard_area+0x48c>
							foo2 = six2ascii(&p[9], p[2] - 4);
    a568:	e0bffe17 	ldw	r2,-8(fp)
    a56c:	10c00244 	addi	r3,r2,9
    a570:	e0bffe17 	ldw	r2,-8(fp)
    a574:	10800084 	addi	r2,r2,2
    a578:	10800003 	ldbu	r2,0(r2)
    a57c:	10803fcc 	andi	r2,r2,255
    a580:	10bfff04 	addi	r2,r2,-4
    a584:	100b883a 	mov	r5,r2
    a588:	1809883a 	mov	r4,r3
    a58c:	00096e40 	call	96e4 <six2ascii>
    a590:	e0bffb15 	stw	r2,-20(fp)
							multi->i2c_devices = calloc(1, strlen((char *)foo2) + 1);
    a594:	e13ffb17 	ldw	r4,-20(fp)
    a598:	001676c0 	call	1676c <strlen>
    a59c:	10800044 	addi	r2,r2,1
    a5a0:	100b883a 	mov	r5,r2
    a5a4:	01000044 	movi	r4,1
    a5a8:	0014fa80 	call	14fa8 <calloc>
    a5ac:	1007883a 	mov	r3,r2
    a5b0:	e0bffd17 	ldw	r2,-12(fp)
    a5b4:	10c00d15 	stw	r3,52(r2)
							strcpy ((char *)multi->i2c_devices, (char *)foo2);
    a5b8:	e0bffd17 	ldw	r2,-12(fp)
    a5bc:	10800d17 	ldw	r2,52(r2)
    a5c0:	e17ffb17 	ldw	r5,-20(fp)
    a5c4:	1009883a 	mov	r4,r2
    a5c8:	00166e00 	call	166e0 <strcpy>
							free(foo2);
    a5cc:	e13ffb17 	ldw	r4,-20(fp)
    a5d0:	001526c0 	call	1526c <free>
							multi->i2c_devices[1] = multi->i2c_devices[1] & 0x7F;
    a5d4:	e0bffd17 	ldw	r2,-12(fp)
    a5d8:	10800d17 	ldw	r2,52(r2)
    a5dc:	10800044 	addi	r2,r2,1
    a5e0:	10c00003 	ldbu	r3,0(r2)
    a5e4:	e0bffd17 	ldw	r2,-12(fp)
    a5e8:	10800d17 	ldw	r2,52(r2)
    a5ec:	10800044 	addi	r2,r2,1
    a5f0:	18c01fcc 	andi	r3,r3,127
    a5f4:	10c00005 	stb	r3,0(r2)
						break;
    a5f8:	00000506 	br	a610 <parse_multiboard_area+0x48c>
					default:
						printf_err("Unknown multirecord type : %i\n", type);
    a5fc:	e17ffc17 	ldw	r5,-16(fp)
    a600:	010000f4 	movhi	r4,3
    a604:	210a5404 	addi	r4,r4,10576
    a608:	001634c0 	call	1634c <printf>
						break;
    a60c:	0001883a 	nop
				}

				if (type == 1) {

				}
				break;
    a610:	00000306 	br	a620 <parse_multiboard_area+0x49c>
			default:
				printf_err("Unknown MultiRecord Area\n");
    a614:	010000f4 	movhi	r4,3
    a618:	210a5c04 	addi	r4,r4,10608
    a61c:	00164700 	call	16470 <puts>
		}

		i++;
    a620:	e0bfff17 	ldw	r2,-4(fp)
    a624:	10800044 	addi	r2,r2,1
    a628:	e0bfff15 	stw	r2,-4(fp)
	} while (!(p[1] & 0x80));
    a62c:	e0bffe17 	ldw	r2,-8(fp)
    a630:	10800044 	addi	r2,r2,1
    a634:	10800003 	ldbu	r2,0(r2)
    a638:	10803fcc 	andi	r2,r2,255
    a63c:	1080201c 	xori	r2,r2,128
    a640:	10bfe004 	addi	r2,r2,-128
    a644:	103edb0e 	bge	r2,zero,a1b4 <__alt_mem_mcu_subsystem_ram_0+0x77fea1b4>

	return multi;
    a648:	e0bffd17 	ldw	r2,-12(fp)
}
    a64c:	e037883a 	mov	sp,fp
    a650:	dfc00117 	ldw	ra,4(sp)
    a654:	df000017 	ldw	fp,0(sp)
    a658:	dec00204 	addi	sp,sp,8
    a65c:	f800283a 	ret

0000a660 <parse_FRU>:
/*
 * Common Header Format
 * Section 8 in the Platform Management FRU Information Storage Definition
 */
struct FRU_DATA * parse_FRU (unsigned char *data)
{
    a660:	defffc04 	addi	sp,sp,-16
    a664:	dfc00315 	stw	ra,12(sp)
    a668:	df000215 	stw	fp,8(sp)
    a66c:	df000204 	addi	fp,sp,8
    a670:	e13ffe15 	stw	r4,-8(fp)
	struct FRU_DATA *fru;

	fru = calloc (1, sizeof(struct FRU_DATA));
    a674:	01400504 	movi	r5,20
    a678:	01000044 	movi	r4,1
    a67c:	0014fa80 	call	14fa8 <calloc>
    a680:	e0bfff15 	stw	r2,-4(fp)

	/* Check FRU version */
	if (data[0] != 0x01) {
    a684:	e0bffe17 	ldw	r2,-8(fp)
    a688:	10800003 	ldbu	r2,0(r2)
    a68c:	10803fcc 	andi	r2,r2,255
    a690:	10800060 	cmpeqi	r2,r2,1
    a694:	1000081e 	bne	r2,zero,a6b8 <parse_FRU+0x58>
		printf_err("FRU Version number mismatch 0x%02x should be 0x01\n", data[0]);
    a698:	e0bffe17 	ldw	r2,-8(fp)
    a69c:	10800003 	ldbu	r2,0(r2)
    a6a0:	10803fcc 	andi	r2,r2,255
    a6a4:	100b883a 	mov	r5,r2
    a6a8:	010000f4 	movhi	r4,3
    a6ac:	210a6304 	addi	r4,r4,10636
    a6b0:	001634c0 	call	1634c <printf>
		goto err;
    a6b4:	00005706 	br	a814 <parse_FRU+0x1b4>
	}

	/* Check Padding */
	if (data[6] != 0x00) {
    a6b8:	e0bffe17 	ldw	r2,-8(fp)
    a6bc:	10800184 	addi	r2,r2,6
    a6c0:	10800003 	ldbu	r2,0(r2)
    a6c4:	10803fcc 	andi	r2,r2,255
    a6c8:	10000426 	beq	r2,zero,a6dc <parse_FRU+0x7c>
		printf_err("FRU byte 6 should be PAD, and be zero -- but it's not\n");
    a6cc:	010000f4 	movhi	r4,3
    a6d0:	210a7004 	addi	r4,r4,10688
    a6d4:	00164700 	call	16470 <puts>
		goto err;
    a6d8:	00004e06 	br	a814 <parse_FRU+0x1b4>
	}

	/* Check header checksum */
	if (calc_zero_checksum(data, 7)) {
    a6dc:	014001c4 	movi	r5,7
    a6e0:	e13ffe17 	ldw	r4,-8(fp)
    a6e4:	00093240 	call	9324 <calc_zero_checksum>
    a6e8:	10803fcc 	andi	r2,r2,255
    a6ec:	10000426 	beq	r2,zero,a700 <parse_FRU+0xa0>
		printf_err("Common Header Checksum failed\n");
    a6f0:	010000f4 	movhi	r4,3
    a6f4:	210a7e04 	addi	r4,r4,10744
    a6f8:	00164700 	call	16470 <puts>
		goto err;
    a6fc:	00004506 	br	a814 <parse_FRU+0x1b4>
	}

	/* Parse Internal Use Area */
	if (data[1]) {
    a700:	e0bffe17 	ldw	r2,-8(fp)
    a704:	10800044 	addi	r2,r2,1
    a708:	10800003 	ldbu	r2,0(r2)
    a70c:	10803fcc 	andi	r2,r2,255
    a710:	10000426 	beq	r2,zero,a724 <parse_FRU+0xc4>
		printf_err("Internal Use Area not yet implemented - sorry\n");
    a714:	010000f4 	movhi	r4,3
    a718:	210a8604 	addi	r4,r4,10776
    a71c:	00164700 	call	16470 <puts>
		goto err;
    a720:	00003c06 	br	a814 <parse_FRU+0x1b4>
	}

	/* Parse Chassis Info Area */
	if (data[2]) {
    a724:	e0bffe17 	ldw	r2,-8(fp)
    a728:	10800084 	addi	r2,r2,2
    a72c:	10800003 	ldbu	r2,0(r2)
    a730:	10803fcc 	andi	r2,r2,255
    a734:	10000426 	beq	r2,zero,a748 <parse_FRU+0xe8>
		printf_err("Chassis Info Area not yet implmented - sorry\n");
    a738:	010000f4 	movhi	r4,3
    a73c:	210a9204 	addi	r4,r4,10824
    a740:	00164700 	call	16470 <puts>
		goto err;
    a744:	00003306 	br	a814 <parse_FRU+0x1b4>
	}

	/* Parse Board Area */
	if (data[3]) {
    a748:	e0bffe17 	ldw	r2,-8(fp)
    a74c:	108000c4 	addi	r2,r2,3
    a750:	10800003 	ldbu	r2,0(r2)
    a754:	10803fcc 	andi	r2,r2,255
    a758:	10001026 	beq	r2,zero,a79c <parse_FRU+0x13c>
		fru->Board_Area = parse_board_area(&data[data[3] * 8]);
    a75c:	e0bffe17 	ldw	r2,-8(fp)
    a760:	108000c4 	addi	r2,r2,3
    a764:	10800003 	ldbu	r2,0(r2)
    a768:	10803fcc 	andi	r2,r2,255
    a76c:	100490fa 	slli	r2,r2,3
    a770:	1007883a 	mov	r3,r2
    a774:	e0bffe17 	ldw	r2,-8(fp)
    a778:	10c5883a 	add	r2,r2,r3
    a77c:	1009883a 	mov	r4,r2
    a780:	0009cdc0 	call	9cdc <parse_board_area>
    a784:	1007883a 	mov	r3,r2
    a788:	e0bfff17 	ldw	r2,-4(fp)
    a78c:	10c00215 	stw	r3,8(r2)
		if (!fru->Board_Area)
    a790:	e0bfff17 	ldw	r2,-4(fp)
    a794:	10800217 	ldw	r2,8(r2)
    a798:	10001d26 	beq	r2,zero,a810 <parse_FRU+0x1b0>
			goto err;
	}

	/* Parse Chassis Info Area */
	if (data[4]) {
    a79c:	e0bffe17 	ldw	r2,-8(fp)
    a7a0:	10800104 	addi	r2,r2,4
    a7a4:	10800003 	ldbu	r2,0(r2)
    a7a8:	10803fcc 	andi	r2,r2,255
    a7ac:	10000426 	beq	r2,zero,a7c0 <parse_FRU+0x160>
		printf_err("Chassis Info Area parsing not yet implemented - sorry\n");
    a7b0:	010000f4 	movhi	r4,3
    a7b4:	210a9e04 	addi	r4,r4,10872
    a7b8:	00164700 	call	16470 <puts>
		goto err;
    a7bc:	00001506 	br	a814 <parse_FRU+0x1b4>
	}

	/* Parse MultiRecord Area */
	if (data[5])
    a7c0:	e0bffe17 	ldw	r2,-8(fp)
    a7c4:	10800144 	addi	r2,r2,5
    a7c8:	10800003 	ldbu	r2,0(r2)
    a7cc:	10803fcc 	andi	r2,r2,255
    a7d0:	10000d26 	beq	r2,zero,a808 <parse_FRU+0x1a8>
		fru->MultiRecord_Area = parse_multiboard_area(&data[data[5] * 8]);
    a7d4:	e0bffe17 	ldw	r2,-8(fp)
    a7d8:	10800144 	addi	r2,r2,5
    a7dc:	10800003 	ldbu	r2,0(r2)
    a7e0:	10803fcc 	andi	r2,r2,255
    a7e4:	100490fa 	slli	r2,r2,3
    a7e8:	1007883a 	mov	r3,r2
    a7ec:	e0bffe17 	ldw	r2,-8(fp)
    a7f0:	10c5883a 	add	r2,r2,r3
    a7f4:	1009883a 	mov	r4,r2
    a7f8:	000a1840 	call	a184 <parse_multiboard_area>
    a7fc:	1007883a 	mov	r3,r2
    a800:	e0bfff17 	ldw	r2,-4(fp)
    a804:	10c00415 	stw	r3,16(r2)

	return fru;
    a808:	e0bfff17 	ldw	r2,-4(fp)
    a80c:	00000406 	br	a820 <parse_FRU+0x1c0>
			goto err;
    a810:	0001883a 	nop

err:
	free(fru);
    a814:	e13fff17 	ldw	r4,-4(fp)
    a818:	001526c0 	call	1526c <free>
	return NULL;
    a81c:	0005883a 	mov	r2,zero

}
    a820:	e037883a 	mov	sp,fp
    a824:	dfc00117 	ldw	ra,4(sp)
    a828:	df000017 	ldw	fp,0(sp)
    a82c:	dec00204 	addi	sp,sp,8
    a830:	f800283a 	ret

0000a834 <free_FRU>:

void free_FRU(struct FRU_DATA *fru)
{
    a834:	defffc04 	addi	sp,sp,-16
    a838:	dfc00315 	stw	ra,12(sp)
    a83c:	df000215 	stw	fp,8(sp)
    a840:	df000204 	addi	fp,sp,8
    a844:	e13ffe15 	stw	r4,-8(fp)
	int j;

	free(fru->Board_Area->manufacturer);
    a848:	e0bffe17 	ldw	r2,-8(fp)
    a84c:	10800217 	ldw	r2,8(r2)
    a850:	10800217 	ldw	r2,8(r2)
    a854:	1009883a 	mov	r4,r2
    a858:	001526c0 	call	1526c <free>
	free(fru->Board_Area->product_name);
    a85c:	e0bffe17 	ldw	r2,-8(fp)
    a860:	10800217 	ldw	r2,8(r2)
    a864:	10800317 	ldw	r2,12(r2)
    a868:	1009883a 	mov	r4,r2
    a86c:	001526c0 	call	1526c <free>
	free(fru->Board_Area->serial_number);
    a870:	e0bffe17 	ldw	r2,-8(fp)
    a874:	10800217 	ldw	r2,8(r2)
    a878:	10800417 	ldw	r2,16(r2)
    a87c:	1009883a 	mov	r4,r2
    a880:	001526c0 	call	1526c <free>
	free(fru->Board_Area->part_number);
    a884:	e0bffe17 	ldw	r2,-8(fp)
    a888:	10800217 	ldw	r2,8(r2)
    a88c:	10800517 	ldw	r2,20(r2)
    a890:	1009883a 	mov	r4,r2
    a894:	001526c0 	call	1526c <free>
	free(fru->Board_Area->FRU_file_ID);
    a898:	e0bffe17 	ldw	r2,-8(fp)
    a89c:	10800217 	ldw	r2,8(r2)
    a8a0:	10800617 	ldw	r2,24(r2)
    a8a4:	1009883a 	mov	r4,r2
    a8a8:	001526c0 	call	1526c <free>
	for(j = 0; j < CUSTOM_FIELDS; j++)
    a8ac:	e03fff15 	stw	zero,-4(fp)
    a8b0:	00000c06 	br	a8e4 <free_FRU+0xb0>
		free(fru->Board_Area->custom[j]);
    a8b4:	e0bffe17 	ldw	r2,-8(fp)
    a8b8:	10c00217 	ldw	r3,8(r2)
    a8bc:	e0bfff17 	ldw	r2,-4(fp)
    a8c0:	108001c4 	addi	r2,r2,7
    a8c4:	100490ba 	slli	r2,r2,2
    a8c8:	1885883a 	add	r2,r3,r2
    a8cc:	10800017 	ldw	r2,0(r2)
    a8d0:	1009883a 	mov	r4,r2
    a8d4:	001526c0 	call	1526c <free>
	for(j = 0; j < CUSTOM_FIELDS; j++)
    a8d8:	e0bfff17 	ldw	r2,-4(fp)
    a8dc:	10800044 	addi	r2,r2,1
    a8e0:	e0bfff15 	stw	r2,-4(fp)
    a8e4:	e0bfff17 	ldw	r2,-4(fp)
    a8e8:	10800290 	cmplti	r2,r2,10
    a8ec:	103ff11e 	bne	r2,zero,a8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fea8b4>
	free(fru->Board_Area);
    a8f0:	e0bffe17 	ldw	r2,-8(fp)
    a8f4:	10800217 	ldw	r2,8(r2)
    a8f8:	1009883a 	mov	r4,r2
    a8fc:	001526c0 	call	1526c <free>

	for(j = 0; j < NUM_SUPPLIES; j++)
    a900:	e03fff15 	stw	zero,-4(fp)
    a904:	00000b06 	br	a934 <free_FRU+0x100>
		free(fru->MultiRecord_Area->supplies[j]);
    a908:	e0bffe17 	ldw	r2,-8(fp)
    a90c:	10c00417 	ldw	r3,16(r2)
    a910:	e0bfff17 	ldw	r2,-4(fp)
    a914:	100490ba 	slli	r2,r2,2
    a918:	1885883a 	add	r2,r3,r2
    a91c:	10800017 	ldw	r2,0(r2)
    a920:	1009883a 	mov	r4,r2
    a924:	001526c0 	call	1526c <free>
	for(j = 0; j < NUM_SUPPLIES; j++)
    a928:	e0bfff17 	ldw	r2,-4(fp)
    a92c:	10800044 	addi	r2,r2,1
    a930:	e0bfff15 	stw	r2,-4(fp)
    a934:	e0bfff17 	ldw	r2,-4(fp)
    a938:	10800310 	cmplti	r2,r2,12
    a93c:	103ff21e 	bne	r2,zero,a908 <__alt_mem_mcu_subsystem_ram_0+0x77fea908>
	free(fru->MultiRecord_Area->i2c_devices);
    a940:	e0bffe17 	ldw	r2,-8(fp)
    a944:	10800417 	ldw	r2,16(r2)
    a948:	10800d17 	ldw	r2,52(r2)
    a94c:	1009883a 	mov	r4,r2
    a950:	001526c0 	call	1526c <free>

	free(fru->MultiRecord_Area->connector);
    a954:	e0bffe17 	ldw	r2,-8(fp)
    a958:	10800417 	ldw	r2,16(r2)
    a95c:	10800c17 	ldw	r2,48(r2)
    a960:	1009883a 	mov	r4,r2
    a964:	001526c0 	call	1526c <free>
	free(fru->MultiRecord_Area);
    a968:	e0bffe17 	ldw	r2,-8(fp)
    a96c:	10800417 	ldw	r2,16(r2)
    a970:	1009883a 	mov	r4,r2
    a974:	001526c0 	call	1526c <free>

	free(fru);
    a978:	e13ffe17 	ldw	r4,-8(fp)
    a97c:	001526c0 	call	1526c <free>

}
    a980:	0001883a 	nop
    a984:	e037883a 	mov	sp,fp
    a988:	dfc00117 	ldw	ra,4(sp)
    a98c:	df000017 	ldw	fp,0(sp)
    a990:	dec00204 	addi	sp,sp,8
    a994:	f800283a 	ret

0000a998 <insert_str>:
/*
 * take string, and put in into the buffer
 * return the number of bytes copied
 */
static unsigned int insert_str(unsigned char *buf, const unsigned char * str, bool force)
{
    a998:	defff904 	addi	sp,sp,-28
    a99c:	dfc00615 	stw	ra,24(sp)
    a9a0:	df000515 	stw	fp,20(sp)
    a9a4:	df000504 	addi	fp,sp,20
    a9a8:	e13ffd15 	stw	r4,-12(fp)
    a9ac:	e17ffc15 	stw	r5,-16(fp)
    a9b0:	3005883a 	mov	r2,r6
    a9b4:	e0bffb05 	stb	r2,-20(fp)
	int tmp;

	if (TYPE_CODE(str) == FRU_STRING_ASCII)
    a9b8:	e0bffc17 	ldw	r2,-16(fp)
    a9bc:	10800003 	ldbu	r2,0(r2)
    a9c0:	10803fcc 	andi	r2,r2,255
    a9c4:	1004d1ba 	srli	r2,r2,6
    a9c8:	10803fcc 	andi	r2,r2,255
    a9cc:	108000cc 	andi	r2,r2,3
    a9d0:	108000d8 	cmpnei	r2,r2,3
    a9d4:	1000061e 	bne	r2,zero,a9f0 <insert_str+0x58>
		tmp = strlen((const char *)&str[1]);
    a9d8:	e0bffc17 	ldw	r2,-16(fp)
    a9dc:	10800044 	addi	r2,r2,1
    a9e0:	1009883a 	mov	r4,r2
    a9e4:	001676c0 	call	1676c <strlen>
    a9e8:	e0bfff15 	stw	r2,-4(fp)
    a9ec:	00000506 	br	aa04 <insert_str+0x6c>
	else
		tmp = FIELD_LEN(str);
    a9f0:	e0bffc17 	ldw	r2,-16(fp)
    a9f4:	10800003 	ldbu	r2,0(r2)
    a9f8:	10803fcc 	andi	r2,r2,255
    a9fc:	10800fcc 	andi	r2,r2,63
    aa00:	e0bfff15 	stw	r2,-4(fp)

	/* Turn ASCII into 6 bit if possible */
	if ((TYPE_CODE(str) != FRU_STRING_ASCII) || (tmp <= 0x3F && !force)) {
    aa04:	e0bffc17 	ldw	r2,-16(fp)
    aa08:	10800003 	ldbu	r2,0(r2)
    aa0c:	10803fcc 	andi	r2,r2,255
    aa10:	1004d1ba 	srli	r2,r2,6
    aa14:	10803fcc 	andi	r2,r2,255
    aa18:	108000cc 	andi	r2,r2,3
    aa1c:	108000d8 	cmpnei	r2,r2,3
    aa20:	1000071e 	bne	r2,zero,aa40 <insert_str+0xa8>
    aa24:	e0bfff17 	ldw	r2,-4(fp)
    aa28:	10801008 	cmpgei	r2,r2,64
    aa2c:	10001a1e 	bne	r2,zero,aa98 <insert_str+0x100>
    aa30:	e0bffb03 	ldbu	r2,-20(fp)
    aa34:	1080005c 	xori	r2,r2,1
    aa38:	10803fcc 	andi	r2,r2,255
    aa3c:	10001626 	beq	r2,zero,aa98 <insert_str+0x100>
		/* It fits, so just leave it as ASCII/binary/whatever format it's in */
		buf[0] = tmp | (TYPE_CODE(str) << 6);
    aa40:	e0bffc17 	ldw	r2,-16(fp)
    aa44:	10800003 	ldbu	r2,0(r2)
    aa48:	10803fcc 	andi	r2,r2,255
    aa4c:	1004d1ba 	srli	r2,r2,6
    aa50:	10803fcc 	andi	r2,r2,255
    aa54:	100491ba 	slli	r2,r2,6
    aa58:	1007883a 	mov	r3,r2
    aa5c:	e0bfff17 	ldw	r2,-4(fp)
    aa60:	1884b03a 	or	r2,r3,r2
    aa64:	1007883a 	mov	r3,r2
    aa68:	e0bffd17 	ldw	r2,-12(fp)
    aa6c:	10c00005 	stb	r3,0(r2)
		memcpy(&buf[1], &str[1], tmp);
    aa70:	e0bffd17 	ldw	r2,-12(fp)
    aa74:	10c00044 	addi	r3,r2,1
    aa78:	e0bffc17 	ldw	r2,-16(fp)
    aa7c:	10800044 	addi	r2,r2,1
    aa80:	e13fff17 	ldw	r4,-4(fp)
    aa84:	200d883a 	mov	r6,r4
    aa88:	100b883a 	mov	r5,r2
    aa8c:	1809883a 	mov	r4,r3
    aa90:	0015ac00 	call	15ac0 <memcpy>
    aa94:	00005306 	br	abe4 <insert_str+0x24c>
	} else {
		/* turn it into 6-bit ASCII */
		unsigned char *six = NULL;
    aa98:	e03ffe15 	stw	zero,-8(fp)

		tmp = ascii2six(&six, (unsigned char *)&str[1], tmp);
    aa9c:	e0bffc17 	ldw	r2,-16(fp)
    aaa0:	10c00044 	addi	r3,r2,1
    aaa4:	e13fff17 	ldw	r4,-4(fp)
    aaa8:	e0bffe04 	addi	r2,fp,-8
    aaac:	200d883a 	mov	r6,r4
    aab0:	180b883a 	mov	r5,r3
    aab4:	1009883a 	mov	r4,r2
    aab8:	00094000 	call	9400 <ascii2six>
    aabc:	e0bfff15 	stw	r2,-4(fp)
		if (tmp < 0) {
    aac0:	e0bfff17 	ldw	r2,-4(fp)
    aac4:	10002b0e 	bge	r2,zero,ab74 <insert_str+0x1dc>
			/* Counldn't encode things */
			printf_warn("couldn't encode '%s' string\n", &str[1]);
    aac8:	e0bffc17 	ldw	r2,-16(fp)
    aacc:	10800044 	addi	r2,r2,1
    aad0:	100b883a 	mov	r5,r2
    aad4:	010000f4 	movhi	r4,3
    aad8:	210aac04 	addi	r4,r4,10928
    aadc:	001634c0 	call	1634c <printf>
			tmp = strlen((const char *)&str[1]);
    aae0:	e0bffc17 	ldw	r2,-16(fp)
    aae4:	10800044 	addi	r2,r2,1
    aae8:	1009883a 	mov	r4,r2
    aaec:	001676c0 	call	1676c <strlen>
    aaf0:	e0bfff15 	stw	r2,-4(fp)
			if (tmp > 0x3F) {
    aaf4:	e0bfff17 	ldw	r2,-4(fp)
    aaf8:	10801010 	cmplti	r2,r2,64
    aafc:	1000071e 	bne	r2,zero,ab1c <insert_str+0x184>
				printf_warn("fail : %d\n", tmp);
    ab00:	e17fff17 	ldw	r5,-4(fp)
    ab04:	010000f4 	movhi	r4,3
    ab08:	210ab404 	addi	r4,r4,10960
    ab0c:	001634c0 	call	1634c <printf>
				printf_err("String too long to fit\n");
    ab10:	010000f4 	movhi	r4,3
    ab14:	210ab704 	addi	r4,r4,10972
    ab18:	00164700 	call	16470 <puts>
			}
			buf[0] = tmp | (FRU_STRING_ASCII << 6);
    ab1c:	e0bfff17 	ldw	r2,-4(fp)
    ab20:	1007883a 	mov	r3,r2
    ab24:	00bff004 	movi	r2,-64
    ab28:	1884b03a 	or	r2,r3,r2
    ab2c:	1007883a 	mov	r3,r2
    ab30:	e0bffd17 	ldw	r2,-12(fp)
    ab34:	10c00005 	stb	r3,0(r2)
			memcpy(&buf[1], &str[1], tmp);
    ab38:	e0bffd17 	ldw	r2,-12(fp)
    ab3c:	10c00044 	addi	r3,r2,1
    ab40:	e0bffc17 	ldw	r2,-16(fp)
    ab44:	10800044 	addi	r2,r2,1
    ab48:	e13fff17 	ldw	r4,-4(fp)
    ab4c:	200d883a 	mov	r6,r4
    ab50:	100b883a 	mov	r5,r2
    ab54:	1809883a 	mov	r4,r3
    ab58:	0015ac00 	call	15ac0 <memcpy>
			free(six);
    ab5c:	e0bffe17 	ldw	r2,-8(fp)
    ab60:	1009883a 	mov	r4,r2
    ab64:	001526c0 	call	1526c <free>
			return tmp + 1;
    ab68:	e0bfff17 	ldw	r2,-4(fp)
    ab6c:	10800044 	addi	r2,r2,1
    ab70:	00001e06 	br	abec <insert_str+0x254>
		}
		if (tmp > 0x3F) {
    ab74:	e0bfff17 	ldw	r2,-4(fp)
    ab78:	10801010 	cmplti	r2,r2,64
    ab7c:	1000071e 	bne	r2,zero,ab9c <insert_str+0x204>
			printf_warn("fail : %d\n", tmp);
    ab80:	e17fff17 	ldw	r5,-4(fp)
    ab84:	010000f4 	movhi	r4,3
    ab88:	210ab404 	addi	r4,r4,10960
    ab8c:	001634c0 	call	1634c <printf>
			printf_err("String too long to fit\n");
    ab90:	010000f4 	movhi	r4,3
    ab94:	210ab704 	addi	r4,r4,10972
    ab98:	00164700 	call	16470 <puts>
		}

		buf[0] = tmp | (FRU_STRING_SIXBIT << 6);
    ab9c:	e0bfff17 	ldw	r2,-4(fp)
    aba0:	1007883a 	mov	r3,r2
    aba4:	00bfe004 	movi	r2,-128
    aba8:	1884b03a 	or	r2,r3,r2
    abac:	1007883a 	mov	r3,r2
    abb0:	e0bffd17 	ldw	r2,-12(fp)
    abb4:	10c00005 	stb	r3,0(r2)
		memcpy(&buf[1], six, tmp);
    abb8:	e0bffd17 	ldw	r2,-12(fp)
    abbc:	10800044 	addi	r2,r2,1
    abc0:	e0fffe17 	ldw	r3,-8(fp)
    abc4:	e13fff17 	ldw	r4,-4(fp)
    abc8:	200d883a 	mov	r6,r4
    abcc:	180b883a 	mov	r5,r3
    abd0:	1009883a 	mov	r4,r2
    abd4:	0015ac00 	call	15ac0 <memcpy>
		free(six);
    abd8:	e0bffe17 	ldw	r2,-8(fp)
    abdc:	1009883a 	mov	r4,r2
    abe0:	001526c0 	call	1526c <free>
	}


	return tmp + 1;
    abe4:	e0bfff17 	ldw	r2,-4(fp)
    abe8:	10800044 	addi	r2,r2,1
}
    abec:	e037883a 	mov	sp,fp
    abf0:	dfc00117 	ldw	ra,4(sp)
    abf4:	df000017 	ldw	fp,0(sp)
    abf8:	dec00204 	addi	sp,sp,8
    abfc:	f800283a 	ret

0000ac00 <build_FRU_blob>:

/*
 * Takes the FRU structure, and builds the binary blob
 */
unsigned char * build_FRU_blob (struct FRU_DATA *fru, size_t *length, bool packed)
{
    ac00:	deffed04 	addi	sp,sp,-76
    ac04:	dfc01215 	stw	ra,72(sp)
    ac08:	df001115 	stw	fp,68(sp)
    ac0c:	df001104 	addi	fp,sp,68
    ac10:	e13ff415 	stw	r4,-48(fp)
    ac14:	e17ff315 	stw	r5,-52(fp)
    ac18:	3005883a 	mov	r2,r6
    ac1c:	e0bff205 	stb	r2,-56(fp)
	unsigned char *p, *buf;
	unsigned int st, len, tmp, last = 0, i = 0, j;
    ac20:	e03ffe15 	stw	zero,-8(fp)
    ac24:	e03ffd15 	stw	zero,-12(fp)

	buf = calloc(1, 1024);
    ac28:	01410004 	movi	r5,1024
    ac2c:	01000044 	movi	r4,1
    ac30:	0014fa80 	call	14fa8 <calloc>
    ac34:	e0bffb15 	stw	r2,-20(fp)
	len = 256;
    ac38:	00804004 	movi	r2,256
    ac3c:	e0bffa15 	stw	r2,-24(fp)

	buf[0] = 0x01;
    ac40:	e0bffb17 	ldw	r2,-20(fp)
    ac44:	00c00044 	movi	r3,1
    ac48:	10c00005 	stb	r3,0(r2)
	i = 8;
    ac4c:	00800204 	movi	r2,8
    ac50:	e0bffd15 	stw	r2,-12(fp)
	if (fru->Internal_Area)
    ac54:	e0bff417 	ldw	r2,-48(fp)
    ac58:	10800017 	ldw	r2,0(r2)
    ac5c:	10000326 	beq	r2,zero,ac6c <build_FRU_blob+0x6c>
		printf_err("Internal Use Area not yet implemented - sorry\n");
    ac60:	010000f4 	movhi	r4,3
    ac64:	210a8604 	addi	r4,r4,10776
    ac68:	00164700 	call	16470 <puts>

	if (fru->Chassis_Info)
    ac6c:	e0bff417 	ldw	r2,-48(fp)
    ac70:	10800117 	ldw	r2,4(r2)
    ac74:	10000326 	beq	r2,zero,ac84 <build_FRU_blob+0x84>
		printf_err("Chassis Info not yet implemented - sorry\n");
    ac78:	010000f4 	movhi	r4,3
    ac7c:	210abd04 	addi	r4,r4,10996
    ac80:	00164700 	call	16470 <puts>

	if (fru->Board_Area) {
    ac84:	e0bff417 	ldw	r2,-48(fp)
    ac88:	10800217 	ldw	r2,8(r2)
    ac8c:	1000cb26 	beq	r2,zero,afbc <build_FRU_blob+0x3bc>
		len = st = i;
    ac90:	e0bffd17 	ldw	r2,-12(fp)
    ac94:	e0bff915 	stw	r2,-28(fp)
    ac98:	e0bff917 	ldw	r2,-28(fp)
    ac9c:	e0bffa15 	stw	r2,-24(fp)
		buf[3] = i / 8;
    aca0:	e0bffd17 	ldw	r2,-12(fp)
    aca4:	1006d0fa 	srli	r3,r2,3
    aca8:	e0bffb17 	ldw	r2,-20(fp)
    acac:	108000c4 	addi	r2,r2,3
    acb0:	10c00005 	stb	r3,0(r2)
		buf[i] = 0x1;   /* Magic number */
    acb4:	e0fffb17 	ldw	r3,-20(fp)
    acb8:	e0bffd17 	ldw	r2,-12(fp)
    acbc:	1885883a 	add	r2,r3,r2
    acc0:	00c00044 	movi	r3,1
    acc4:	10c00005 	stb	r3,0(r2)
		/* buf[i+1] = length, which needs to be determined later */
		buf[i+2] = 25;  /* English */
    acc8:	e0bffd17 	ldw	r2,-12(fp)
    accc:	10800084 	addi	r2,r2,2
    acd0:	e0fffb17 	ldw	r3,-20(fp)
    acd4:	1885883a 	add	r2,r3,r2
    acd8:	00c00644 	movi	r3,25
    acdc:	10c00005 	stb	r3,0(r2)
		buf[i+3] = (fru->Board_Area->mfg_date) & 0xFF;
    ace0:	e0bff417 	ldw	r2,-48(fp)
    ace4:	10800217 	ldw	r2,8(r2)
    ace8:	11000117 	ldw	r4,4(r2)
    acec:	e0bffd17 	ldw	r2,-12(fp)
    acf0:	108000c4 	addi	r2,r2,3
    acf4:	e0fffb17 	ldw	r3,-20(fp)
    acf8:	1885883a 	add	r2,r3,r2
    acfc:	2007883a 	mov	r3,r4
    ad00:	10c00005 	stb	r3,0(r2)
		buf[i+4] = (fru->Board_Area->mfg_date >> 8) & 0xFF;
    ad04:	e0bff417 	ldw	r2,-48(fp)
    ad08:	10800217 	ldw	r2,8(r2)
    ad0c:	10800117 	ldw	r2,4(r2)
    ad10:	1008d23a 	srli	r4,r2,8
    ad14:	e0bffd17 	ldw	r2,-12(fp)
    ad18:	10800104 	addi	r2,r2,4
    ad1c:	e0fffb17 	ldw	r3,-20(fp)
    ad20:	1885883a 	add	r2,r3,r2
    ad24:	2007883a 	mov	r3,r4
    ad28:	10c00005 	stb	r3,0(r2)
		buf[i+5] = (fru->Board_Area->mfg_date >> 16) & 0xFF;
    ad2c:	e0bff417 	ldw	r2,-48(fp)
    ad30:	10800217 	ldw	r2,8(r2)
    ad34:	10800117 	ldw	r2,4(r2)
    ad38:	1008d43a 	srli	r4,r2,16
    ad3c:	e0bffd17 	ldw	r2,-12(fp)
    ad40:	10800144 	addi	r2,r2,5
    ad44:	e0fffb17 	ldw	r3,-20(fp)
    ad48:	1885883a 	add	r2,r3,r2
    ad4c:	2007883a 	mov	r3,r4
    ad50:	10c00005 	stb	r3,0(r2)

		i += 6;
    ad54:	e0bffd17 	ldw	r2,-12(fp)
    ad58:	10800184 	addi	r2,r2,6
    ad5c:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->manufacturer, packed);
    ad60:	e0fffb17 	ldw	r3,-20(fp)
    ad64:	e0bffd17 	ldw	r2,-12(fp)
    ad68:	1887883a 	add	r3,r3,r2
    ad6c:	e0bff417 	ldw	r2,-48(fp)
    ad70:	10800217 	ldw	r2,8(r2)
    ad74:	10800217 	ldw	r2,8(r2)
    ad78:	e13ff203 	ldbu	r4,-56(fp)
    ad7c:	200d883a 	mov	r6,r4
    ad80:	100b883a 	mov	r5,r2
    ad84:	1809883a 	mov	r4,r3
    ad88:	000a9980 	call	a998 <insert_str>
    ad8c:	1007883a 	mov	r3,r2
    ad90:	e0bffd17 	ldw	r2,-12(fp)
    ad94:	10c5883a 	add	r2,r2,r3
    ad98:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->product_name, packed);
    ad9c:	e0fffb17 	ldw	r3,-20(fp)
    ada0:	e0bffd17 	ldw	r2,-12(fp)
    ada4:	1887883a 	add	r3,r3,r2
    ada8:	e0bff417 	ldw	r2,-48(fp)
    adac:	10800217 	ldw	r2,8(r2)
    adb0:	10800317 	ldw	r2,12(r2)
    adb4:	e13ff203 	ldbu	r4,-56(fp)
    adb8:	200d883a 	mov	r6,r4
    adbc:	100b883a 	mov	r5,r2
    adc0:	1809883a 	mov	r4,r3
    adc4:	000a9980 	call	a998 <insert_str>
    adc8:	1007883a 	mov	r3,r2
    adcc:	e0bffd17 	ldw	r2,-12(fp)
    add0:	10c5883a 	add	r2,r2,r3
    add4:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->serial_number, packed);
    add8:	e0fffb17 	ldw	r3,-20(fp)
    addc:	e0bffd17 	ldw	r2,-12(fp)
    ade0:	1887883a 	add	r3,r3,r2
    ade4:	e0bff417 	ldw	r2,-48(fp)
    ade8:	10800217 	ldw	r2,8(r2)
    adec:	10800417 	ldw	r2,16(r2)
    adf0:	e13ff203 	ldbu	r4,-56(fp)
    adf4:	200d883a 	mov	r6,r4
    adf8:	100b883a 	mov	r5,r2
    adfc:	1809883a 	mov	r4,r3
    ae00:	000a9980 	call	a998 <insert_str>
    ae04:	1007883a 	mov	r3,r2
    ae08:	e0bffd17 	ldw	r2,-12(fp)
    ae0c:	10c5883a 	add	r2,r2,r3
    ae10:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->part_number, packed);
    ae14:	e0fffb17 	ldw	r3,-20(fp)
    ae18:	e0bffd17 	ldw	r2,-12(fp)
    ae1c:	1887883a 	add	r3,r3,r2
    ae20:	e0bff417 	ldw	r2,-48(fp)
    ae24:	10800217 	ldw	r2,8(r2)
    ae28:	10800517 	ldw	r2,20(r2)
    ae2c:	e13ff203 	ldbu	r4,-56(fp)
    ae30:	200d883a 	mov	r6,r4
    ae34:	100b883a 	mov	r5,r2
    ae38:	1809883a 	mov	r4,r3
    ae3c:	000a9980 	call	a998 <insert_str>
    ae40:	1007883a 	mov	r3,r2
    ae44:	e0bffd17 	ldw	r2,-12(fp)
    ae48:	10c5883a 	add	r2,r2,r3
    ae4c:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->FRU_file_ID, packed);
    ae50:	e0fffb17 	ldw	r3,-20(fp)
    ae54:	e0bffd17 	ldw	r2,-12(fp)
    ae58:	1887883a 	add	r3,r3,r2
    ae5c:	e0bff417 	ldw	r2,-48(fp)
    ae60:	10800217 	ldw	r2,8(r2)
    ae64:	10800617 	ldw	r2,24(r2)
    ae68:	e13ff203 	ldbu	r4,-56(fp)
    ae6c:	200d883a 	mov	r6,r4
    ae70:	100b883a 	mov	r5,r2
    ae74:	1809883a 	mov	r4,r3
    ae78:	000a9980 	call	a998 <insert_str>
    ae7c:	1007883a 	mov	r3,r2
    ae80:	e0bffd17 	ldw	r2,-12(fp)
    ae84:	10c5883a 	add	r2,r2,r3
    ae88:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < CUSTOM_FIELDS; j++) {
    ae8c:	e03ffc15 	stw	zero,-16(fp)
    ae90:	00001d06 	br	af08 <build_FRU_blob+0x308>
			if (fru->Board_Area->custom[j]) {
    ae94:	e0bff417 	ldw	r2,-48(fp)
    ae98:	10c00217 	ldw	r3,8(r2)
    ae9c:	e0bffc17 	ldw	r2,-16(fp)
    aea0:	108001c4 	addi	r2,r2,7
    aea4:	100490ba 	slli	r2,r2,2
    aea8:	1885883a 	add	r2,r3,r2
    aeac:	10800017 	ldw	r2,0(r2)
    aeb0:	10001226 	beq	r2,zero,aefc <build_FRU_blob+0x2fc>
				i += insert_str(&buf[i], fru->Board_Area->custom[j], packed);
    aeb4:	e0fffb17 	ldw	r3,-20(fp)
    aeb8:	e0bffd17 	ldw	r2,-12(fp)
    aebc:	1889883a 	add	r4,r3,r2
    aec0:	e0bff417 	ldw	r2,-48(fp)
    aec4:	10c00217 	ldw	r3,8(r2)
    aec8:	e0bffc17 	ldw	r2,-16(fp)
    aecc:	108001c4 	addi	r2,r2,7
    aed0:	100490ba 	slli	r2,r2,2
    aed4:	1885883a 	add	r2,r3,r2
    aed8:	10800017 	ldw	r2,0(r2)
    aedc:	e0fff203 	ldbu	r3,-56(fp)
    aee0:	180d883a 	mov	r6,r3
    aee4:	100b883a 	mov	r5,r2
    aee8:	000a9980 	call	a998 <insert_str>
    aeec:	1007883a 	mov	r3,r2
    aef0:	e0bffd17 	ldw	r2,-12(fp)
    aef4:	10c5883a 	add	r2,r2,r3
    aef8:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < CUSTOM_FIELDS; j++) {
    aefc:	e0bffc17 	ldw	r2,-16(fp)
    af00:	10800044 	addi	r2,r2,1
    af04:	e0bffc15 	stw	r2,-16(fp)
    af08:	e0bffc17 	ldw	r2,-16(fp)
    af0c:	108002b0 	cmpltui	r2,r2,10
    af10:	103fe01e 	bne	r2,zero,ae94 <__alt_mem_mcu_subsystem_ram_0+0x77feae94>
			}
		}
		buf[i] = 0xC1;
    af14:	e0fffb17 	ldw	r3,-20(fp)
    af18:	e0bffd17 	ldw	r2,-12(fp)
    af1c:	1885883a 	add	r2,r3,r2
    af20:	00fff044 	movi	r3,-63
    af24:	10c00005 	stb	r3,0(r2)
		i++;
    af28:	e0bffd17 	ldw	r2,-12(fp)
    af2c:	10800044 	addi	r2,r2,1
    af30:	e0bffd15 	stw	r2,-12(fp)
		i = (((i >> 3) + 1) << 3) - 1;
    af34:	e0bffd17 	ldw	r2,-12(fp)
    af38:	1004d0fa 	srli	r2,r2,3
    af3c:	10800044 	addi	r2,r2,1
    af40:	100490fa 	slli	r2,r2,3
    af44:	10bfffc4 	addi	r2,r2,-1
    af48:	e0bffd15 	stw	r2,-12(fp)
		len = i - st;
    af4c:	e0fffd17 	ldw	r3,-12(fp)
    af50:	e0bff917 	ldw	r2,-28(fp)
    af54:	1885c83a 	sub	r2,r3,r2
    af58:	e0bffa15 	stw	r2,-24(fp)
		buf[st + 1] = len / 8 + 1;
    af5c:	e0bffa17 	ldw	r2,-24(fp)
    af60:	1004d0fa 	srli	r2,r2,3
    af64:	1009883a 	mov	r4,r2
    af68:	e0bff917 	ldw	r2,-28(fp)
    af6c:	10800044 	addi	r2,r2,1
    af70:	e0fffb17 	ldw	r3,-20(fp)
    af74:	1885883a 	add	r2,r3,r2
    af78:	20c00044 	addi	r3,r4,1
    af7c:	10c00005 	stb	r3,0(r2)
		buf[i] = 256 - calc_zero_checksum(&buf[st], len);
    af80:	e0fffb17 	ldw	r3,-20(fp)
    af84:	e0bff917 	ldw	r2,-28(fp)
    af88:	1885883a 	add	r2,r3,r2
    af8c:	e17ffa17 	ldw	r5,-24(fp)
    af90:	1009883a 	mov	r4,r2
    af94:	00093240 	call	9324 <calc_zero_checksum>
    af98:	1009883a 	mov	r4,r2
    af9c:	e0fffb17 	ldw	r3,-20(fp)
    afa0:	e0bffd17 	ldw	r2,-12(fp)
    afa4:	1885883a 	add	r2,r3,r2
    afa8:	0107c83a 	sub	r3,zero,r4
    afac:	10c00005 	stb	r3,0(r2)
		i++;
    afb0:	e0bffd17 	ldw	r2,-12(fp)
    afb4:	10800044 	addi	r2,r2,1
    afb8:	e0bffd15 	stw	r2,-12(fp)
	}
	if (fru->Product_Info) {
	}
	if (fru->MultiRecord_Area) {
    afbc:	e0bff417 	ldw	r2,-48(fp)
    afc0:	10800417 	ldw	r2,16(r2)
    afc4:	1000d426 	beq	r2,zero,b318 <build_FRU_blob+0x718>
		st = i;
    afc8:	e0bffd17 	ldw	r2,-12(fp)
    afcc:	e0bff915 	stw	r2,-28(fp)
		buf[5] = st / 8;
    afd0:	e0bff917 	ldw	r2,-28(fp)
    afd4:	1006d0fa 	srli	r3,r2,3
    afd8:	e0bffb17 	ldw	r2,-20(fp)
    afdc:	10800144 	addi	r2,r2,5
    afe0:	10c00005 	stb	r3,0(r2)
		for (tmp = 0; tmp < NUM_SUPPLIES; tmp++) {
    afe4:	e03fff15 	stw	zero,-4(fp)
    afe8:	00002506 	br	b080 <build_FRU_blob+0x480>
			p = fru->MultiRecord_Area->supplies[tmp];
    afec:	e0bff417 	ldw	r2,-48(fp)
    aff0:	10c00417 	ldw	r3,16(r2)
    aff4:	e0bfff17 	ldw	r2,-4(fp)
    aff8:	100490ba 	slli	r2,r2,2
    affc:	1885883a 	add	r2,r3,r2
    b000:	10800017 	ldw	r2,0(r2)
    b004:	e0bff815 	stw	r2,-32(fp)
			if (!p)
    b008:	e0bff817 	ldw	r2,-32(fp)
    b00c:	10001826 	beq	r2,zero,b070 <build_FRU_blob+0x470>
				continue;
			memcpy(&buf[i], p, p[2]+ 5);
    b010:	e0fffb17 	ldw	r3,-20(fp)
    b014:	e0bffd17 	ldw	r2,-12(fp)
    b018:	1887883a 	add	r3,r3,r2
    b01c:	e0bff817 	ldw	r2,-32(fp)
    b020:	10800084 	addi	r2,r2,2
    b024:	10800003 	ldbu	r2,0(r2)
    b028:	10803fcc 	andi	r2,r2,255
    b02c:	10800144 	addi	r2,r2,5
    b030:	100d883a 	mov	r6,r2
    b034:	e17ff817 	ldw	r5,-32(fp)
    b038:	1809883a 	mov	r4,r3
    b03c:	0015ac00 	call	15ac0 <memcpy>
			last = i + 1;
    b040:	e0bffd17 	ldw	r2,-12(fp)
    b044:	10800044 	addi	r2,r2,1
    b048:	e0bffe15 	stw	r2,-8(fp)
			i += p[2] + 5;
    b04c:	e0bff817 	ldw	r2,-32(fp)
    b050:	10800084 	addi	r2,r2,2
    b054:	10800003 	ldbu	r2,0(r2)
    b058:	10c03fcc 	andi	r3,r2,255
    b05c:	e0bffd17 	ldw	r2,-12(fp)
    b060:	1885883a 	add	r2,r3,r2
    b064:	10800144 	addi	r2,r2,5
    b068:	e0bffd15 	stw	r2,-12(fp)
    b06c:	00000106 	br	b074 <build_FRU_blob+0x474>
				continue;
    b070:	0001883a 	nop
		for (tmp = 0; tmp < NUM_SUPPLIES; tmp++) {
    b074:	e0bfff17 	ldw	r2,-4(fp)
    b078:	10800044 	addi	r2,r2,1
    b07c:	e0bfff15 	stw	r2,-4(fp)
    b080:	e0bfff17 	ldw	r2,-4(fp)
    b084:	10800330 	cmpltui	r2,r2,12
    b088:	103fd81e 	bne	r2,zero,afec <__alt_mem_mcu_subsystem_ram_0+0x77feafec>
		}
		p = fru->MultiRecord_Area->connector;
    b08c:	e0bff417 	ldw	r2,-48(fp)
    b090:	10800417 	ldw	r2,16(r2)
    b094:	10800c17 	ldw	r2,48(r2)
    b098:	e0bff815 	stw	r2,-32(fp)
		if (p) {
    b09c:	e0bff817 	ldw	r2,-32(fp)
    b0a0:	10001726 	beq	r2,zero,b100 <build_FRU_blob+0x500>
			memcpy(&buf[i], p, p[2]+ 5);
    b0a4:	e0fffb17 	ldw	r3,-20(fp)
    b0a8:	e0bffd17 	ldw	r2,-12(fp)
    b0ac:	1887883a 	add	r3,r3,r2
    b0b0:	e0bff817 	ldw	r2,-32(fp)
    b0b4:	10800084 	addi	r2,r2,2
    b0b8:	10800003 	ldbu	r2,0(r2)
    b0bc:	10803fcc 	andi	r2,r2,255
    b0c0:	10800144 	addi	r2,r2,5
    b0c4:	100d883a 	mov	r6,r2
    b0c8:	e17ff817 	ldw	r5,-32(fp)
    b0cc:	1809883a 	mov	r4,r3
    b0d0:	0015ac00 	call	15ac0 <memcpy>
			last = i + 1;
    b0d4:	e0bffd17 	ldw	r2,-12(fp)
    b0d8:	10800044 	addi	r2,r2,1
    b0dc:	e0bffe15 	stw	r2,-8(fp)
			i += p[2] + 5;
    b0e0:	e0bff817 	ldw	r2,-32(fp)
    b0e4:	10800084 	addi	r2,r2,2
    b0e8:	10800003 	ldbu	r2,0(r2)
    b0ec:	10c03fcc 	andi	r3,r2,255
    b0f0:	e0bffd17 	ldw	r2,-12(fp)
    b0f4:	1885883a 	add	r2,r3,r2
    b0f8:	10800144 	addi	r2,r2,5
    b0fc:	e0bffd15 	stw	r2,-12(fp)
		}
		p = fru->MultiRecord_Area->i2c_devices;
    b100:	e0bff417 	ldw	r2,-48(fp)
    b104:	10800417 	ldw	r2,16(r2)
    b108:	10800d17 	ldw	r2,52(r2)
    b10c:	e0bff815 	stw	r2,-32(fp)
		if (p) {
    b110:	e0bff817 	ldw	r2,-32(fp)
    b114:	10006126 	beq	r2,zero,b29c <build_FRU_blob+0x69c>
			unsigned int len, oui = VITA_OUI;
    b118:	0084a884 	movi	r2,4770
    b11c:	e0bff615 	stw	r2,-40(fp)
			unsigned char *six = NULL;
    b120:	e03ff515 	stw	zero,-44(fp)
			len = ascii2six(&six, p, strlen((char *)p));
    b124:	e13ff817 	ldw	r4,-32(fp)
    b128:	001676c0 	call	1676c <strlen>
    b12c:	1007883a 	mov	r3,r2
    b130:	e0bff504 	addi	r2,fp,-44
    b134:	180d883a 	mov	r6,r3
    b138:	e17ff817 	ldw	r5,-32(fp)
    b13c:	1009883a 	mov	r4,r2
    b140:	00094000 	call	9400 <ascii2six>
    b144:	e0bff715 	stw	r2,-36(fp)

			/* Type ID, Record Format version, Length, checksum, checksum */
			sprintf((char *)&buf[i], "%c%c%c%c%c", MULTIRECORD_FMC, 0x02, len + 4, 0, 0);
    b148:	e0fffb17 	ldw	r3,-20(fp)
    b14c:	e0bffd17 	ldw	r2,-12(fp)
    b150:	1887883a 	add	r3,r3,r2
    b154:	e0bff717 	ldw	r2,-36(fp)
    b158:	10800104 	addi	r2,r2,4
    b15c:	d8000215 	stw	zero,8(sp)
    b160:	d8000115 	stw	zero,4(sp)
    b164:	d8800015 	stw	r2,0(sp)
    b168:	01c00084 	movi	r7,2
    b16c:	01803e84 	movi	r6,250
    b170:	014000f4 	movhi	r5,3
    b174:	294ac804 	addi	r5,r5,11040
    b178:	1809883a 	mov	r4,r3
    b17c:	00165b00 	call	165b0 <sprintf>
			/* Store OUI */
#if __BYTE_ORDER == __BIG_ENDIAN
			oui = __builtin_bswap32(oui);
    b180:	e0bff617 	ldw	r2,-40(fp)
    b184:	1009883a 	mov	r4,r2
    b188:	0011d3c0 	call	11d3c <__bswapsi2>
    b18c:	e0bff615 	stw	r2,-40(fp)
#endif
			memcpy(&buf[i+5], &oui, 3);
    b190:	e0bffd17 	ldw	r2,-12(fp)
    b194:	10800144 	addi	r2,r2,5
    b198:	e0fffb17 	ldw	r3,-20(fp)
    b19c:	1885883a 	add	r2,r3,r2
    b1a0:	e0fff604 	addi	r3,fp,-40
    b1a4:	018000c4 	movi	r6,3
    b1a8:	180b883a 	mov	r5,r3
    b1ac:	1009883a 	mov	r4,r2
    b1b0:	0015ac00 	call	15ac0 <memcpy>
			/* Subtype & version  - see Table 9 in FMC spec*/
			sprintf((char *)&buf[i+8], "%c", (0x1 << 4) | (0));
    b1b4:	e0bffd17 	ldw	r2,-12(fp)
    b1b8:	10800204 	addi	r2,r2,8
    b1bc:	e0fffb17 	ldw	r3,-20(fp)
    b1c0:	1885883a 	add	r2,r3,r2
    b1c4:	01800404 	movi	r6,16
    b1c8:	014000f4 	movhi	r5,3
    b1cc:	294acb04 	addi	r5,r5,11052
    b1d0:	1009883a 	mov	r4,r2
    b1d4:	00165b00 	call	165b0 <sprintf>
			/* finally copy over the string */
			memcpy(&buf[i+9], six, len);
    b1d8:	e0bffd17 	ldw	r2,-12(fp)
    b1dc:	10800244 	addi	r2,r2,9
    b1e0:	e0fffb17 	ldw	r3,-20(fp)
    b1e4:	1885883a 	add	r2,r3,r2
    b1e8:	e0fff517 	ldw	r3,-44(fp)
    b1ec:	e1bff717 	ldw	r6,-36(fp)
    b1f0:	180b883a 	mov	r5,r3
    b1f4:	1009883a 	mov	r4,r2
    b1f8:	0015ac00 	call	15ac0 <memcpy>
			/* Record Checksum */
			buf[i+3] = 0x100 - calc_zero_checksum(&buf[i+5], len + 3);
    b1fc:	e0bffd17 	ldw	r2,-12(fp)
    b200:	10800144 	addi	r2,r2,5
    b204:	e0fffb17 	ldw	r3,-20(fp)
    b208:	1887883a 	add	r3,r3,r2
    b20c:	e0bff717 	ldw	r2,-36(fp)
    b210:	108000c4 	addi	r2,r2,3
    b214:	100b883a 	mov	r5,r2
    b218:	1809883a 	mov	r4,r3
    b21c:	00093240 	call	9324 <calc_zero_checksum>
    b220:	1009883a 	mov	r4,r2
    b224:	e0bffd17 	ldw	r2,-12(fp)
    b228:	108000c4 	addi	r2,r2,3
    b22c:	e0fffb17 	ldw	r3,-20(fp)
    b230:	1885883a 	add	r2,r3,r2
    b234:	0107c83a 	sub	r3,zero,r4
    b238:	10c00005 	stb	r3,0(r2)
			/* Header Checksum */
			buf[i+4] = 0x100 - calc_zero_checksum(&buf[i], 4);
    b23c:	e0fffb17 	ldw	r3,-20(fp)
    b240:	e0bffd17 	ldw	r2,-12(fp)
    b244:	1885883a 	add	r2,r3,r2
    b248:	01400104 	movi	r5,4
    b24c:	1009883a 	mov	r4,r2
    b250:	00093240 	call	9324 <calc_zero_checksum>
    b254:	1009883a 	mov	r4,r2
    b258:	e0bffd17 	ldw	r2,-12(fp)
    b25c:	10800104 	addi	r2,r2,4
    b260:	e0fffb17 	ldw	r3,-20(fp)
    b264:	1885883a 	add	r2,r3,r2
    b268:	0107c83a 	sub	r3,zero,r4
    b26c:	10c00005 	stb	r3,0(r2)

			last = i + 1;
    b270:	e0bffd17 	ldw	r2,-12(fp)
    b274:	10800044 	addi	r2,r2,1
    b278:	e0bffe15 	stw	r2,-8(fp)
			i += len + 9;
    b27c:	e0fff717 	ldw	r3,-36(fp)
    b280:	e0bffd17 	ldw	r2,-12(fp)
    b284:	1885883a 	add	r2,r3,r2
    b288:	10800244 	addi	r2,r2,9
    b28c:	e0bffd15 	stw	r2,-12(fp)

			free(six);
    b290:	e0bff517 	ldw	r2,-44(fp)
    b294:	1009883a 	mov	r4,r2
    b298:	001526c0 	call	1526c <free>
		}
		if (last) {
    b29c:	e0bffe17 	ldw	r2,-8(fp)
    b2a0:	10001d26 	beq	r2,zero,b318 <build_FRU_blob+0x718>
			buf[last] = buf[last] | 0x80;
    b2a4:	e0fffb17 	ldw	r3,-20(fp)
    b2a8:	e0bffe17 	ldw	r2,-8(fp)
    b2ac:	1885883a 	add	r2,r3,r2
    b2b0:	11000003 	ldbu	r4,0(r2)
    b2b4:	e0fffb17 	ldw	r3,-20(fp)
    b2b8:	e0bffe17 	ldw	r2,-8(fp)
    b2bc:	1885883a 	add	r2,r3,r2
    b2c0:	00ffe004 	movi	r3,-128
    b2c4:	20c6b03a 	or	r3,r4,r3
    b2c8:	10c00005 	stb	r3,0(r2)
			/* redo the header checksum, since we just changed the header :( */
			buf[last + 3] = 0;
    b2cc:	e0bffe17 	ldw	r2,-8(fp)
    b2d0:	108000c4 	addi	r2,r2,3
    b2d4:	e0fffb17 	ldw	r3,-20(fp)
    b2d8:	1885883a 	add	r2,r3,r2
    b2dc:	10000005 	stb	zero,0(r2)
			buf[last + 3] = 0x100 - calc_zero_checksum(&buf[last - 1], 4);
    b2e0:	e0bffe17 	ldw	r2,-8(fp)
    b2e4:	10bfffc4 	addi	r2,r2,-1
    b2e8:	e0fffb17 	ldw	r3,-20(fp)
    b2ec:	1885883a 	add	r2,r3,r2
    b2f0:	01400104 	movi	r5,4
    b2f4:	1009883a 	mov	r4,r2
    b2f8:	00093240 	call	9324 <calc_zero_checksum>
    b2fc:	1009883a 	mov	r4,r2
    b300:	e0bffe17 	ldw	r2,-8(fp)
    b304:	108000c4 	addi	r2,r2,3
    b308:	e0fffb17 	ldw	r3,-20(fp)
    b30c:	1885883a 	add	r2,r3,r2
    b310:	0107c83a 	sub	r3,zero,r4
    b314:	10c00005 	stb	r3,0(r2)
		}
	}
	buf[7] = 256 - calc_zero_checksum(buf, 6);
    b318:	01400184 	movi	r5,6
    b31c:	e13ffb17 	ldw	r4,-20(fp)
    b320:	00093240 	call	9324 <calc_zero_checksum>
    b324:	1007883a 	mov	r3,r2
    b328:	e0bffb17 	ldw	r2,-20(fp)
    b32c:	108001c4 	addi	r2,r2,7
    b330:	00c7c83a 	sub	r3,zero,r3
    b334:	10c00005 	stb	r3,0(r2)

	*length = i;
    b338:	e0bff317 	ldw	r2,-52(fp)
    b33c:	e0fffd17 	ldw	r3,-12(fp)
    b340:	10c00015 	stw	r3,0(r2)
	return buf;
    b344:	e0bffb17 	ldw	r2,-20(fp)
}
    b348:	e037883a 	mov	sp,fp
    b34c:	dfc00117 	ldw	ra,4(sp)
    b350:	df000017 	ldw	fp,0(sp)
    b354:	dec00204 	addi	sp,sp,8
    b358:	f800283a 	ret

0000b35c <jesd_read>:
* @brief jesd_read
*******************************************************************************/
int32_t jesd_read(jesd_core *jesd,
					uint32_t reg_addr,
					uint32_t *reg_data)
{
    b35c:	defffc04 	addi	sp,sp,-16
    b360:	df000315 	stw	fp,12(sp)
    b364:	df000304 	addi	fp,sp,12
    b368:	e13fff15 	stw	r4,-4(fp)
    b36c:	e17ffe15 	stw	r5,-8(fp)
    b370:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((jesd->base_address + reg_addr));
    b374:	e0bfff17 	ldw	r2,-4(fp)
    b378:	10c00017 	ldw	r3,0(r2)
    b37c:	e0bffe17 	ldw	r2,-8(fp)
    b380:	1885883a 	add	r2,r3,r2
    b384:	10800037 	ldwio	r2,0(r2)
    b388:	1007883a 	mov	r3,r2
    b38c:	e0bffd17 	ldw	r2,-12(fp)
    b390:	10c00015 	stw	r3,0(r2)

	return 0;
    b394:	0005883a 	mov	r2,zero
}
    b398:	e037883a 	mov	sp,fp
    b39c:	df000017 	ldw	fp,0(sp)
    b3a0:	dec00104 	addi	sp,sp,4
    b3a4:	f800283a 	ret

0000b3a8 <jesd_write>:
* @brief jesd_write
*******************************************************************************/
int32_t jesd_write(jesd_core *jesd,
					uint32_t reg_addr,
					uint32_t reg_data)
{
    b3a8:	defffc04 	addi	sp,sp,-16
    b3ac:	df000315 	stw	fp,12(sp)
    b3b0:	df000304 	addi	fp,sp,12
    b3b4:	e13fff15 	stw	r4,-4(fp)
    b3b8:	e17ffe15 	stw	r5,-8(fp)
    b3bc:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((jesd->base_address + reg_addr), reg_data);
    b3c0:	e0bfff17 	ldw	r2,-4(fp)
    b3c4:	10c00017 	ldw	r3,0(r2)
    b3c8:	e0bffe17 	ldw	r2,-8(fp)
    b3cc:	1885883a 	add	r2,r3,r2
    b3d0:	1007883a 	mov	r3,r2
    b3d4:	e0bffd17 	ldw	r2,-12(fp)
    b3d8:	18800035 	stwio	r2,0(r3)

	return 0;
    b3dc:	0005883a 	mov	r2,zero
}
    b3e0:	e037883a 	mov	sp,fp
    b3e4:	df000017 	ldw	fp,0(sp)
    b3e8:	dec00104 	addi	sp,sp,4
    b3ec:	f800283a 	ret

0000b3f0 <jesd_setup>:

/***************************************************************************//**
* @brief jesd_init
*******************************************************************************/
int32_t jesd_setup(jesd_core *jesd)
{
    b3f0:	defffd04 	addi	sp,sp,-12
    b3f4:	dfc00215 	stw	ra,8(sp)
    b3f8:	df000115 	stw	fp,4(sp)
    b3fc:	df000104 	addi	fp,sp,4
    b400:	e13fff15 	stw	r4,-4(fp)
	jesd_write(jesd, JESD204_REG_LINK_DISABLE, 1);
    b404:	01800044 	movi	r6,1
    b408:	01403004 	movi	r5,192
    b40c:	e13fff17 	ldw	r4,-4(fp)
    b410:	000b3a80 	call	b3a8 <jesd_write>
	jesd_write(jesd, JESD204_REG_LINK_CONF0, (((jesd->octets_per_frame-1) << 16) | ((jesd->frames_per_multiframe*jesd->octets_per_frame)-1)));
    b414:	e0bfff17 	ldw	r2,-4(fp)
    b418:	10800183 	ldbu	r2,6(r2)
    b41c:	10803fcc 	andi	r2,r2,255
    b420:	10bfffc4 	addi	r2,r2,-1
    b424:	1006943a 	slli	r3,r2,16
    b428:	e0bfff17 	ldw	r2,-4(fp)
    b42c:	108001c3 	ldbu	r2,7(r2)
    b430:	11003fcc 	andi	r4,r2,255
    b434:	e0bfff17 	ldw	r2,-4(fp)
    b438:	10800183 	ldbu	r2,6(r2)
    b43c:	10803fcc 	andi	r2,r2,255
    b440:	2085383a 	mul	r2,r4,r2
    b444:	10bfffc4 	addi	r2,r2,-1
    b448:	1884b03a 	or	r2,r3,r2
    b44c:	100d883a 	mov	r6,r2
    b450:	01408404 	movi	r5,528
    b454:	e13fff17 	ldw	r4,-4(fp)
    b458:	000b3a80 	call	b3a8 <jesd_write>
   // R. Gisko
   // Continuously transmit CGS sequence.
   //jesd_write(jesd, JESD204_REG_LINK_CONF2, 0x00000001);


	jesd_write(jesd, JESD204_REG_LINK_DISABLE, 0);
    b45c:	000d883a 	mov	r6,zero
    b460:	01403004 	movi	r5,192
    b464:	e13fff17 	ldw	r4,-4(fp)
    b468:	000b3a80 	call	b3a8 <jesd_write>
	mdelay(100);
    b46c:	010000b4 	movhi	r4,2
    b470:	2121a804 	addi	r4,r4,-31072
    b474:	0025e400 	call	25e40 <usleep>

	// R. Gisko
	// Continuously transmit CGS sequence.
	//jesd_write(jesd, JESD204_REG_LINK_CONF2, 0x00000001);
	return(0);
    b478:	0005883a 	mov	r2,zero
}
    b47c:	e037883a 	mov	sp,fp
    b480:	dfc00117 	ldw	ra,4(sp)
    b484:	df000017 	ldw	fp,0(sp)
    b488:	dec00204 	addi	sp,sp,8
    b48c:	f800283a 	ret

0000b490 <jesd_sysref_control>:

/***************************************************************************//**
* @brief jesd generate SYSREF if necessar
*******************************************************************************/
int32_t jesd_sysref_control(jesd_core *jesd, uint32_t enable)
{
    b490:	defffb04 	addi	sp,sp,-20
    b494:	dfc00415 	stw	ra,16(sp)
    b498:	df000315 	stw	fp,12(sp)
    b49c:	df000304 	addi	fp,sp,12
    b4a0:	e13ffe15 	stw	r4,-8(fp)
    b4a4:	e17ffd15 	stw	r5,-12(fp)
	gpio_desc *sysref_pin;
	if ((jesd->sysref_type == INTERN) && (jesd->subclass_mode >= 1)) {
    b4a8:	e0bffe17 	ldw	r2,-8(fp)
    b4ac:	10800417 	ldw	r2,16(r2)
    b4b0:	10800058 	cmpnei	r2,r2,1
    b4b4:	1000171e 	bne	r2,zero,b514 <jesd_sysref_control+0x84>
    b4b8:	e0bffe17 	ldw	r2,-8(fp)
    b4bc:	10800303 	ldbu	r2,12(r2)
    b4c0:	10803fcc 	andi	r2,r2,255
    b4c4:	10001326 	beq	r2,zero,b514 <jesd_sysref_control+0x84>

		// generate SYS_REF

		gpio_get(&sysref_pin, jesd->sysref_gpio_pin, 1);
    b4c8:	e0bffe17 	ldw	r2,-8(fp)
    b4cc:	10800517 	ldw	r2,20(r2)
    b4d0:	10c03fcc 	andi	r3,r2,255
    b4d4:	e0bfff04 	addi	r2,fp,-4
    b4d8:	01800044 	movi	r6,1
    b4dc:	180b883a 	mov	r5,r3
    b4e0:	1009883a 	mov	r4,r2
    b4e4:	000c0b00 	call	c0b0 <gpio_get>

		gpio_set_value(sysref_pin, enable);
    b4e8:	e0bfff17 	ldw	r2,-4(fp)
    b4ec:	e0fffd17 	ldw	r3,-12(fp)
    b4f0:	18c03fcc 	andi	r3,r3,255
    b4f4:	180b883a 	mov	r5,r3
    b4f8:	1009883a 	mov	r4,r2
    b4fc:	000c20c0 	call	c20c <gpio_set_value>

		gpio_remove(sysref_pin);
    b500:	e0bfff17 	ldw	r2,-4(fp)
    b504:	1009883a 	mov	r4,r2
    b508:	000c1600 	call	c160 <gpio_remove>

		mdelay(10);
    b50c:	0109c404 	movi	r4,10000
    b510:	0025e400 	call	25e40 <usleep>
	}
	return 0;
    b514:	0005883a 	mov	r2,zero
}
    b518:	e037883a 	mov	sp,fp
    b51c:	dfc00117 	ldw	ra,4(sp)
    b520:	df000017 	ldw	fp,0(sp)
    b524:	dec00204 	addi	sp,sp,8
    b528:	f800283a 	ret

0000b52c <jesd_status>:

/***************************************************************************//**
* @brief jesd_read_status generic
*******************************************************************************/
int32_t jesd_status(jesd_core *jesd)
{
    b52c:	defffa04 	addi	sp,sp,-24
    b530:	dfc00515 	stw	ra,20(sp)
    b534:	df000415 	stw	fp,16(sp)
    b538:	df000404 	addi	fp,sp,16
    b53c:	e13ffc15 	stw	r4,-16(fp)
	uint32_t status;
	int32_t timeout;
	int32_t ret;

	ret = 0;
    b540:	e03ffe15 	stw	zero,-8(fp)
	timeout = 100;
    b544:	00801904 	movi	r2,100
    b548:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
    b54c:	00000e06 	br	b588 <jesd_status+0x5c>
		mdelay(1);
    b550:	0100fa04 	movi	r4,1000
    b554:	0025e400 	call	25e40 <usleep>
		jesd_read(jesd, 0x280, &status);
    b558:	e0bffd04 	addi	r2,fp,-12
    b55c:	100d883a 	mov	r6,r2
    b560:	0140a004 	movi	r5,640
    b564:	e13ffc17 	ldw	r4,-16(fp)
    b568:	000b35c0 	call	b35c <jesd_read>
		if ((status & 0x13) == 0x13) break;
    b56c:	e0bffd17 	ldw	r2,-12(fp)
    b570:	108004cc 	andi	r2,r2,19
    b574:	108004d8 	cmpnei	r2,r2,19
    b578:	10000626 	beq	r2,zero,b594 <jesd_status+0x68>
		timeout = timeout - 1;
    b57c:	e0bfff17 	ldw	r2,-4(fp)
    b580:	10bfffc4 	addi	r2,r2,-1
    b584:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
    b588:	e0bfff17 	ldw	r2,-4(fp)
    b58c:	00bff016 	blt	zero,r2,b550 <__alt_mem_mcu_subsystem_ram_0+0x77feb550>
    b590:	00000106 	br	b598 <jesd_status+0x6c>
		if ((status & 0x13) == 0x13) break;
    b594:	0001883a 	nop
	}
	if ((status & 0x10) != 0x10) {
    b598:	e0bffd17 	ldw	r2,-12(fp)
    b59c:	1080040c 	andi	r2,r2,16
    b5a0:	1000091e 	bne	r2,zero,b5c8 <jesd_status+0x9c>
		ad_printf("%s jesd_status: out of sync (%x)!\n", __func__, status);
    b5a4:	e0bffd17 	ldw	r2,-12(fp)
    b5a8:	100d883a 	mov	r6,r2
    b5ac:	014000f4 	movhi	r5,3
    b5b0:	294b8704 	addi	r5,r5,11804
    b5b4:	010000f4 	movhi	r4,3
    b5b8:	210ae204 	addi	r4,r4,11144
    b5bc:	001634c0 	call	1634c <printf>
		ret = -1;
    b5c0:	00bfffc4 	movi	r2,-1
    b5c4:	e0bffe15 	stw	r2,-8(fp)
	}
	if ((status & 0x03) != 0x03) {
    b5c8:	e0bffd17 	ldw	r2,-12(fp)
    b5cc:	108000cc 	andi	r2,r2,3
    b5d0:	108000e0 	cmpeqi	r2,r2,3
    b5d4:	1000091e 	bne	r2,zero,b5fc <jesd_status+0xd0>
		ad_printf("%s jesd_status: not in data phase (%x)!\n", __func__, status);
    b5d8:	e0bffd17 	ldw	r2,-12(fp)
    b5dc:	100d883a 	mov	r6,r2
    b5e0:	014000f4 	movhi	r5,3
    b5e4:	294b8704 	addi	r5,r5,11804
    b5e8:	010000f4 	movhi	r4,3
    b5ec:	210aeb04 	addi	r4,r4,11180
    b5f0:	001634c0 	call	1634c <printf>
		ret = -1;
    b5f4:	00bfffc4 	movi	r2,-1
    b5f8:	e0bffe15 	stw	r2,-8(fp)
	}
	ad_printf("%s jesd_status: %x\n", __func__, status);
    b5fc:	e0bffd17 	ldw	r2,-12(fp)
    b600:	100d883a 	mov	r6,r2
    b604:	014000f4 	movhi	r5,3
    b608:	294b8704 	addi	r5,r5,11804
    b60c:	010000f4 	movhi	r4,3
    b610:	210af604 	addi	r4,r4,11224
    b614:	001634c0 	call	1634c <printf>

	return(ret);
    b618:	e0bffe17 	ldw	r2,-8(fp)
}
    b61c:	e037883a 	mov	sp,fp
    b620:	dfc00117 	ldw	ra,4(sp)
    b624:	df000017 	ldw	fp,0(sp)
    b628:	dec00204 	addi	sp,sp,8
    b62c:	f800283a 	ret

0000b630 <axi_jesd204_rx_status_read>:

/***************************************************************************//**
* @brief axi_jesd204_rx_status_read
*******************************************************************************/
int32_t axi_jesd204_rx_status_read(jesd_core *jesd)
{
    b630:	defff804 	addi	sp,sp,-32
    b634:	dfc00715 	stw	ra,28(sp)
    b638:	df000615 	stw	fp,24(sp)
    b63c:	df000604 	addi	fp,sp,24
    b640:	e13ffa15 	stw	r4,-24(fp)
	uint32_t sysref_status;
	uint32_t link_disabled;
	uint32_t link_status;
	uint32_t clock_ratio;
	int32_t ret = 0;
    b644:	e03fff15 	stw	zero,-4(fp)

	// R. Gisko
	//jesd_write(jesd, JESD204_REG_SYSREF_STATUS, 0x03);

	ret |= jesd_read(jesd, JESD204_REG_LINK_STATE, &link_disabled);
    b648:	e0bffd04 	addi	r2,fp,-12
    b64c:	100d883a 	mov	r6,r2
    b650:	01403104 	movi	r5,196
    b654:	e13ffa17 	ldw	r4,-24(fp)
    b658:	000b35c0 	call	b35c <jesd_read>
    b65c:	1007883a 	mov	r3,r2
    b660:	e0bfff17 	ldw	r2,-4(fp)
    b664:	10c4b03a 	or	r2,r2,r3
    b668:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_STATUS, &link_status);
    b66c:	e0bffc04 	addi	r2,fp,-16
    b670:	100d883a 	mov	r6,r2
    b674:	0140a004 	movi	r5,640
    b678:	e13ffa17 	ldw	r4,-24(fp)
    b67c:	000b35c0 	call	b35c <jesd_read>
    b680:	1007883a 	mov	r3,r2
    b684:	e0bfff17 	ldw	r2,-4(fp)
    b688:	10c4b03a 	or	r2,r2,r3
    b68c:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_SYSREF_STATUS, &sysref_status);
    b690:	e0bffe04 	addi	r2,fp,-8
    b694:	100d883a 	mov	r6,r2
    b698:	01404204 	movi	r5,264
    b69c:	e13ffa17 	ldw	r4,-24(fp)
    b6a0:	000b35c0 	call	b35c <jesd_read>
    b6a4:	1007883a 	mov	r3,r2
    b6a8:	e0bfff17 	ldw	r2,-4(fp)
    b6ac:	10c4b03a 	or	r2,r2,r3
    b6b0:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_CLK_RATIO, &clock_ratio);
    b6b4:	e0bffb04 	addi	r2,fp,-20
    b6b8:	100d883a 	mov	r6,r2
    b6bc:	01403204 	movi	r5,200
    b6c0:	e13ffa17 	ldw	r4,-24(fp)
    b6c4:	000b35c0 	call	b35c <jesd_read>
    b6c8:	1007883a 	mov	r3,r2
    b6cc:	e0bfff17 	ldw	r2,-4(fp)
    b6d0:	10c4b03a 	or	r2,r2,r3
    b6d4:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("Rx link is %s\n",
		(link_disabled & 0x1) ? "disabled" : "enabled");
    b6d8:	e0bffd17 	ldw	r2,-12(fp)
    b6dc:	1080004c 	andi	r2,r2,1
	ad_printf("Rx link is %s\n",
    b6e0:	10000326 	beq	r2,zero,b6f0 <axi_jesd204_rx_status_read+0xc0>
    b6e4:	008000f4 	movhi	r2,3
    b6e8:	108afb04 	addi	r2,r2,11244
    b6ec:	00000206 	br	b6f8 <axi_jesd204_rx_status_read+0xc8>
    b6f0:	008000f4 	movhi	r2,3
    b6f4:	108afe04 	addi	r2,r2,11256
    b6f8:	100b883a 	mov	r5,r2
    b6fc:	010000f4 	movhi	r4,3
    b700:	210b0004 	addi	r4,r4,11264
    b704:	001634c0 	call	1634c <printf>

	if (clock_ratio == 0) {
    b708:	e0bffb17 	ldw	r2,-20(fp)
    b70c:	1000041e 	bne	r2,zero,b720 <axi_jesd204_rx_status_read+0xf0>
		ad_printf("Measured Link Clock: off\n");
    b710:	010000f4 	movhi	r4,3
    b714:	210b0404 	addi	r4,r4,11280
    b718:	00164700 	call	16470 <puts>
    b71c:	00000806 	br	b740 <axi_jesd204_rx_status_read+0x110>
	} else {
		ad_printf("Measured Link Clock: %d MHz\n",
			(clock_ratio * 125 + 0x7fff) >> 16);
    b720:	e0bffb17 	ldw	r2,-20(fp)
    b724:	10801f64 	muli	r2,r2,125
    b728:	109fffc4 	addi	r2,r2,32767
		ad_printf("Measured Link Clock: %d MHz\n",
    b72c:	1004d43a 	srli	r2,r2,16
    b730:	100b883a 	mov	r5,r2
    b734:	010000f4 	movhi	r4,3
    b738:	210b0b04 	addi	r4,r4,11308
    b73c:	001634c0 	call	1634c <printf>
	}

	if (!link_disabled) {
    b740:	e0bffd17 	ldw	r2,-12(fp)
    b744:	1000261e 	bne	r2,zero,b7e0 <axi_jesd204_rx_status_read+0x1b0>
		ad_printf("Link status: %s\n",
			axi_jesd204_rx_link_status_label[link_status & 0x3]);
    b748:	e0bffc17 	ldw	r2,-16(fp)
    b74c:	108000cc 	andi	r2,r2,3
		ad_printf("Link status: %s\n",
    b750:	100690ba 	slli	r3,r2,2
    b754:	008000f4 	movhi	r2,3
    b758:	1885883a 	add	r2,r3,r2
    b75c:	1096ec17 	ldw	r2,23472(r2)
    b760:	100b883a 	mov	r5,r2
    b764:	010000f4 	movhi	r4,3
    b768:	210b1304 	addi	r4,r4,11340
    b76c:	001634c0 	call	1634c <printf>
		ad_printf("SYSREF captured: %s\n",
			(sysref_status & 1) ? "Yes" : "No");
    b770:	e0bffe17 	ldw	r2,-8(fp)
    b774:	1080004c 	andi	r2,r2,1
		ad_printf("SYSREF captured: %s\n",
    b778:	10000326 	beq	r2,zero,b788 <axi_jesd204_rx_status_read+0x158>
    b77c:	008000f4 	movhi	r2,3
    b780:	108b1804 	addi	r2,r2,11360
    b784:	00000206 	br	b790 <axi_jesd204_rx_status_read+0x160>
    b788:	008000f4 	movhi	r2,3
    b78c:	108b1904 	addi	r2,r2,11364
    b790:	100b883a 	mov	r5,r2
    b794:	010000f4 	movhi	r4,3
    b798:	210b1a04 	addi	r4,r4,11368
    b79c:	001634c0 	call	1634c <printf>
		if (sysref_status & 2) {
    b7a0:	e0bffe17 	ldw	r2,-8(fp)
    b7a4:	1080008c 	andi	r2,r2,2
    b7a8:	10001926 	beq	r2,zero,b810 <axi_jesd204_rx_status_read+0x1e0>
			ad_printf("SYSREF alignment ERROR\n",
				(sysref_status & 2) ? "Yes" : "No");
    b7ac:	e0bffe17 	ldw	r2,-8(fp)
    b7b0:	1080008c 	andi	r2,r2,2
			ad_printf("SYSREF alignment ERROR\n",
    b7b4:	10000326 	beq	r2,zero,b7c4 <axi_jesd204_rx_status_read+0x194>
    b7b8:	008000f4 	movhi	r2,3
    b7bc:	108b1804 	addi	r2,r2,11360
    b7c0:	00000206 	br	b7cc <axi_jesd204_rx_status_read+0x19c>
    b7c4:	008000f4 	movhi	r2,3
    b7c8:	108b1904 	addi	r2,r2,11364
    b7cc:	100b883a 	mov	r5,r2
    b7d0:	010000f4 	movhi	r4,3
    b7d4:	210b2004 	addi	r4,r4,11392
    b7d8:	001634c0 	call	1634c <printf>
    b7dc:	00000c06 	br	b810 <axi_jesd204_rx_status_read+0x1e0>
		}

	} else {
		ad_printf("External reset is %s\n",
			(link_disabled & 0x2) ? "asserted" : "deasserted");
    b7e0:	e0bffd17 	ldw	r2,-12(fp)
    b7e4:	1080008c 	andi	r2,r2,2
		ad_printf("External reset is %s\n",
    b7e8:	10000326 	beq	r2,zero,b7f8 <axi_jesd204_rx_status_read+0x1c8>
    b7ec:	008000f4 	movhi	r2,3
    b7f0:	108b2604 	addi	r2,r2,11416
    b7f4:	00000206 	br	b800 <axi_jesd204_rx_status_read+0x1d0>
    b7f8:	008000f4 	movhi	r2,3
    b7fc:	108b2904 	addi	r2,r2,11428
    b800:	100b883a 	mov	r5,r2
    b804:	010000f4 	movhi	r4,3
    b808:	210b2c04 	addi	r4,r4,11440
    b80c:	001634c0 	call	1634c <printf>
	}

	return ret;
    b810:	e0bfff17 	ldw	r2,-4(fp)
}
    b814:	e037883a 	mov	sp,fp
    b818:	dfc00117 	ldw	ra,4(sp)
    b81c:	df000017 	ldw	fp,0(sp)
    b820:	dec00204 	addi	sp,sp,8
    b824:	f800283a 	ret

0000b828 <axi_jesd204_tx_status_read>:

/***************************************************************************//**
* @brief axi_jesd204_tx_status_read
*******************************************************************************/
int32_t axi_jesd204_tx_status_read(jesd_core *jesd)
{
    b828:	defff804 	addi	sp,sp,-32
    b82c:	dfc00715 	stw	ra,28(sp)
    b830:	df000615 	stw	fp,24(sp)
    b834:	df000604 	addi	fp,sp,24
    b838:	e13ffa15 	stw	r4,-24(fp)
	uint32_t sysref_status;
	uint32_t link_disabled;
	uint32_t link_status;
	uint32_t clock_ratio;
	int32_t ret = 0;
    b83c:	e03fff15 	stw	zero,-4(fp)

	jesd_write(jesd, JESD204_REG_SYSREF_STATUS, 0x03);
    b840:	018000c4 	movi	r6,3
    b844:	01404204 	movi	r5,264
    b848:	e13ffa17 	ldw	r4,-24(fp)
    b84c:	000b3a80 	call	b3a8 <jesd_write>

	ret |= jesd_read(jesd, JESD204_REG_LINK_STATE, &link_disabled);
    b850:	e0bffd04 	addi	r2,fp,-12
    b854:	100d883a 	mov	r6,r2
    b858:	01403104 	movi	r5,196
    b85c:	e13ffa17 	ldw	r4,-24(fp)
    b860:	000b35c0 	call	b35c <jesd_read>
    b864:	1007883a 	mov	r3,r2
    b868:	e0bfff17 	ldw	r2,-4(fp)
    b86c:	10c4b03a 	or	r2,r2,r3
    b870:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_STATUS, &link_status);
    b874:	e0bffc04 	addi	r2,fp,-16
    b878:	100d883a 	mov	r6,r2
    b87c:	0140a004 	movi	r5,640
    b880:	e13ffa17 	ldw	r4,-24(fp)
    b884:	000b35c0 	call	b35c <jesd_read>
    b888:	1007883a 	mov	r3,r2
    b88c:	e0bfff17 	ldw	r2,-4(fp)
    b890:	10c4b03a 	or	r2,r2,r3
    b894:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_SYSREF_STATUS, &sysref_status);
    b898:	e0bffe04 	addi	r2,fp,-8
    b89c:	100d883a 	mov	r6,r2
    b8a0:	01404204 	movi	r5,264
    b8a4:	e13ffa17 	ldw	r4,-24(fp)
    b8a8:	000b35c0 	call	b35c <jesd_read>
    b8ac:	1007883a 	mov	r3,r2
    b8b0:	e0bfff17 	ldw	r2,-4(fp)
    b8b4:	10c4b03a 	or	r2,r2,r3
    b8b8:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_CLK_RATIO, &clock_ratio);
    b8bc:	e0bffb04 	addi	r2,fp,-20
    b8c0:	100d883a 	mov	r6,r2
    b8c4:	01403204 	movi	r5,200
    b8c8:	e13ffa17 	ldw	r4,-24(fp)
    b8cc:	000b35c0 	call	b35c <jesd_read>
    b8d0:	1007883a 	mov	r3,r2
    b8d4:	e0bfff17 	ldw	r2,-4(fp)
    b8d8:	10c4b03a 	or	r2,r2,r3
    b8dc:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("Tx link is %s\n",
		(link_disabled & 0x1) ? "disabled" : "enabled");
    b8e0:	e0bffd17 	ldw	r2,-12(fp)
    b8e4:	1080004c 	andi	r2,r2,1
	ad_printf("Tx link is %s\n",
    b8e8:	10000326 	beq	r2,zero,b8f8 <axi_jesd204_tx_status_read+0xd0>
    b8ec:	008000f4 	movhi	r2,3
    b8f0:	108afb04 	addi	r2,r2,11244
    b8f4:	00000206 	br	b900 <axi_jesd204_tx_status_read+0xd8>
    b8f8:	008000f4 	movhi	r2,3
    b8fc:	108afe04 	addi	r2,r2,11256
    b900:	100b883a 	mov	r5,r2
    b904:	010000f4 	movhi	r4,3
    b908:	210b3204 	addi	r4,r4,11464
    b90c:	001634c0 	call	1634c <printf>

	if (clock_ratio == 0) {
    b910:	e0bffb17 	ldw	r2,-20(fp)
    b914:	1000041e 	bne	r2,zero,b928 <axi_jesd204_tx_status_read+0x100>
		ad_printf("Measured Link Clock: off\n");
    b918:	010000f4 	movhi	r4,3
    b91c:	210b0404 	addi	r4,r4,11280
    b920:	00164700 	call	16470 <puts>
    b924:	00000806 	br	b948 <axi_jesd204_tx_status_read+0x120>
	} else {
		ad_printf("Measured Link Clock: %d MHz\n",
			(clock_ratio * 100 + 0x7fff) >> 16);;
    b928:	e0bffb17 	ldw	r2,-20(fp)
    b92c:	10801924 	muli	r2,r2,100
    b930:	109fffc4 	addi	r2,r2,32767
		ad_printf("Measured Link Clock: %d MHz\n",
    b934:	1004d43a 	srli	r2,r2,16
    b938:	100b883a 	mov	r5,r2
    b93c:	010000f4 	movhi	r4,3
    b940:	210b0b04 	addi	r4,r4,11308
    b944:	001634c0 	call	1634c <printf>
	}

	if (!link_disabled) {
    b948:	e0bffd17 	ldw	r2,-12(fp)
    b94c:	1000261e 	bne	r2,zero,b9e8 <axi_jesd204_tx_status_read+0x1c0>
		ad_printf("Link status: %s\n",
			axi_jesd204_tx_link_status_label[link_status & 0x3]);
    b950:	e0bffc17 	ldw	r2,-16(fp)
    b954:	108000cc 	andi	r2,r2,3
		ad_printf("Link status: %s\n",
    b958:	100690ba 	slli	r3,r2,2
    b95c:	008000f4 	movhi	r2,3
    b960:	1885883a 	add	r2,r3,r2
    b964:	1096f017 	ldw	r2,23488(r2)
    b968:	100b883a 	mov	r5,r2
    b96c:	010000f4 	movhi	r4,3
    b970:	210b1304 	addi	r4,r4,11340
    b974:	001634c0 	call	1634c <printf>
		ad_printf("SYSREF captured: %s\n",
			(sysref_status & 1) ? "Yes" : "No");
    b978:	e0bffe17 	ldw	r2,-8(fp)
    b97c:	1080004c 	andi	r2,r2,1
		ad_printf("SYSREF captured: %s\n",
    b980:	10000326 	beq	r2,zero,b990 <axi_jesd204_tx_status_read+0x168>
    b984:	008000f4 	movhi	r2,3
    b988:	108b1804 	addi	r2,r2,11360
    b98c:	00000206 	br	b998 <axi_jesd204_tx_status_read+0x170>
    b990:	008000f4 	movhi	r2,3
    b994:	108b1904 	addi	r2,r2,11364
    b998:	100b883a 	mov	r5,r2
    b99c:	010000f4 	movhi	r4,3
    b9a0:	210b1a04 	addi	r4,r4,11368
    b9a4:	001634c0 	call	1634c <printf>
		if (sysref_status & 2) {
    b9a8:	e0bffe17 	ldw	r2,-8(fp)
    b9ac:	1080008c 	andi	r2,r2,2
    b9b0:	10001926 	beq	r2,zero,ba18 <axi_jesd204_tx_status_read+0x1f0>
			ad_printf("SYSREF alignment ERROR\n",
				(sysref_status & 2) ? "Yes" : "No");
    b9b4:	e0bffe17 	ldw	r2,-8(fp)
    b9b8:	1080008c 	andi	r2,r2,2
			ad_printf("SYSREF alignment ERROR\n",
    b9bc:	10000326 	beq	r2,zero,b9cc <axi_jesd204_tx_status_read+0x1a4>
    b9c0:	008000f4 	movhi	r2,3
    b9c4:	108b1804 	addi	r2,r2,11360
    b9c8:	00000206 	br	b9d4 <axi_jesd204_tx_status_read+0x1ac>
    b9cc:	008000f4 	movhi	r2,3
    b9d0:	108b1904 	addi	r2,r2,11364
    b9d4:	100b883a 	mov	r5,r2
    b9d8:	010000f4 	movhi	r4,3
    b9dc:	210b2004 	addi	r4,r4,11392
    b9e0:	001634c0 	call	1634c <printf>
    b9e4:	00000c06 	br	ba18 <axi_jesd204_tx_status_read+0x1f0>
		}
	} else {
		ad_printf("External reset is %s\n",
			(link_disabled & 0x2) ? "asserted" : "deasserted");
    b9e8:	e0bffd17 	ldw	r2,-12(fp)
    b9ec:	1080008c 	andi	r2,r2,2
		ad_printf("External reset is %s\n",
    b9f0:	10000326 	beq	r2,zero,ba00 <axi_jesd204_tx_status_read+0x1d8>
    b9f4:	008000f4 	movhi	r2,3
    b9f8:	108b2604 	addi	r2,r2,11416
    b9fc:	00000206 	br	ba08 <axi_jesd204_tx_status_read+0x1e0>
    ba00:	008000f4 	movhi	r2,3
    ba04:	108b2904 	addi	r2,r2,11428
    ba08:	100b883a 	mov	r5,r2
    ba0c:	010000f4 	movhi	r4,3
    ba10:	210b2c04 	addi	r4,r4,11440
    ba14:	001634c0 	call	1634c <printf>
	}

	return ret;
    ba18:	e0bfff17 	ldw	r2,-4(fp)
}
    ba1c:	e037883a 	mov	sp,fp
    ba20:	dfc00117 	ldw	ra,4(sp)
    ba24:	df000017 	ldw	fp,0(sp)
    ba28:	dec00204 	addi	sp,sp,8
    ba2c:	f800283a 	ret

0000ba30 <axi_jesd204_rx_laneinfo_read>:
/***************************************************************************//**
* @brief axi_jesd204_rx_laneinfo_read
*******************************************************************************/
/* FIXME: This violates every single sysfs ABI recommendation */
int32_t axi_jesd204_rx_laneinfo_read(jesd_core *jesd, uint32_t lane)
{
    ba30:	deffef04 	addi	sp,sp,-68
    ba34:	dfc01015 	stw	ra,64(sp)
    ba38:	df000f15 	stw	fp,60(sp)
    ba3c:	dc000e15 	stw	r16,56(sp)
    ba40:	df000f04 	addi	fp,sp,60
    ba44:	e13ff615 	stw	r4,-40(fp)
    ba48:	e17ff515 	stw	r5,-44(fp)
	uint32_t lane_status;
	uint32_t lane_latency;
	uint32_t octets_per_multiframe;
	uint32_t val[4];
	int32_t ret = 0;
    ba4c:	e03ffe15 	stw	zero,-8(fp)

	ret |= jesd_read(jesd, JESD204_RX_REG_LANE_STATUS(lane), &lane_status);
    ba50:	e0bff517 	ldw	r2,-44(fp)
    ba54:	10800604 	addi	r2,r2,24
    ba58:	1004917a 	slli	r2,r2,5
    ba5c:	e0fffd04 	addi	r3,fp,-12
    ba60:	180d883a 	mov	r6,r3
    ba64:	100b883a 	mov	r5,r2
    ba68:	e13ff617 	ldw	r4,-40(fp)
    ba6c:	000b35c0 	call	b35c <jesd_read>
    ba70:	1007883a 	mov	r3,r2
    ba74:	e0bffe17 	ldw	r2,-8(fp)
    ba78:	10c4b03a 	or	r2,r2,r3
    ba7c:	e0bffe15 	stw	r2,-8(fp)

	ad_printf("CGS state: %s\n",
		axi_jesd204_rx_lane_status_label[lane_status & 0x3]);
    ba80:	e0bffd17 	ldw	r2,-12(fp)
    ba84:	108000cc 	andi	r2,r2,3
	ad_printf("CGS state: %s\n",
    ba88:	100690ba 	slli	r3,r2,2
    ba8c:	008000f4 	movhi	r2,3
    ba90:	1885883a 	add	r2,r3,r2
    ba94:	1096f417 	ldw	r2,23504(r2)
    ba98:	100b883a 	mov	r5,r2
    ba9c:	010000f4 	movhi	r4,3
    baa0:	210b3604 	addi	r4,r4,11480
    baa4:	001634c0 	call	1634c <printf>

	ad_printf("Initial Frame Synchronization: %s\n",
				(lane_status & BIT(4)) ? "Yes" : "No");
    baa8:	e0bffd17 	ldw	r2,-12(fp)
    baac:	1080040c 	andi	r2,r2,16
	ad_printf("Initial Frame Synchronization: %s\n",
    bab0:	10000326 	beq	r2,zero,bac0 <axi_jesd204_rx_laneinfo_read+0x90>
    bab4:	008000f4 	movhi	r2,3
    bab8:	108b1804 	addi	r2,r2,11360
    babc:	00000206 	br	bac8 <axi_jesd204_rx_laneinfo_read+0x98>
    bac0:	008000f4 	movhi	r2,3
    bac4:	108b1904 	addi	r2,r2,11364
    bac8:	100b883a 	mov	r5,r2
    bacc:	010000f4 	movhi	r4,3
    bad0:	210b3a04 	addi	r4,r4,11496
    bad4:	001634c0 	call	1634c <printf>

	if (!(lane_status & BIT(4)))
    bad8:	e0bffd17 	ldw	r2,-12(fp)
    badc:	1080040c 	andi	r2,r2,16
    bae0:	1000021e 	bne	r2,zero,baec <axi_jesd204_rx_laneinfo_read+0xbc>
		return ret;
    bae4:	e0bffe17 	ldw	r2,-8(fp)
    bae8:	0000c106 	br	bdf0 <axi_jesd204_rx_laneinfo_read+0x3c0>

	ret |= jesd_read(jesd, JESD204_REG_LINK_CONF0, &octets_per_multiframe);
    baec:	e0bffb04 	addi	r2,fp,-20
    baf0:	100d883a 	mov	r6,r2
    baf4:	01408404 	movi	r5,528
    baf8:	e13ff617 	ldw	r4,-40(fp)
    bafc:	000b35c0 	call	b35c <jesd_read>
    bb00:	1007883a 	mov	r3,r2
    bb04:	e0bffe17 	ldw	r2,-8(fp)
    bb08:	10c4b03a 	or	r2,r2,r3
    bb0c:	e0bffe15 	stw	r2,-8(fp)
	octets_per_multiframe &= 0xffff;
    bb10:	e0bffb17 	ldw	r2,-20(fp)
    bb14:	10bfffcc 	andi	r2,r2,65535
    bb18:	e0bffb15 	stw	r2,-20(fp)
	octets_per_multiframe += 1;
    bb1c:	e0bffb17 	ldw	r2,-20(fp)
    bb20:	10800044 	addi	r2,r2,1
    bb24:	e0bffb15 	stw	r2,-20(fp)

	ret |= jesd_read(jesd, JESD204_RX_REG_LANE_LATENCY(lane), &lane_latency);
    bb28:	e0bff517 	ldw	r2,-44(fp)
    bb2c:	1004917a 	slli	r2,r2,5
    bb30:	1080c104 	addi	r2,r2,772
    bb34:	e0fffc04 	addi	r3,fp,-16
    bb38:	180d883a 	mov	r6,r3
    bb3c:	100b883a 	mov	r5,r2
    bb40:	e13ff617 	ldw	r4,-40(fp)
    bb44:	000b35c0 	call	b35c <jesd_read>
    bb48:	1007883a 	mov	r3,r2
    bb4c:	e0bffe17 	ldw	r2,-8(fp)
    bb50:	10c4b03a 	or	r2,r2,r3
    bb54:	e0bffe15 	stw	r2,-8(fp)
	ad_printf("Lane Latency: %d Multi-frames and %d Octets\n",
    bb58:	e0bffc17 	ldw	r2,-16(fp)
    bb5c:	e0fffb17 	ldw	r3,-20(fp)
    bb60:	180b883a 	mov	r5,r3
    bb64:	1009883a 	mov	r4,r2
    bb68:	0012a540 	call	12a54 <__udivsi3>
    bb6c:	1021883a 	mov	r16,r2
    bb70:	e0bffc17 	ldw	r2,-16(fp)
    bb74:	e0fffb17 	ldw	r3,-20(fp)
    bb78:	180b883a 	mov	r5,r3
    bb7c:	1009883a 	mov	r4,r2
    bb80:	0012ab80 	call	12ab8 <__umodsi3>
    bb84:	100d883a 	mov	r6,r2
    bb88:	800b883a 	mov	r5,r16
    bb8c:	010000f4 	movhi	r4,3
    bb90:	210b4304 	addi	r4,r4,11532
    bb94:	001634c0 	call	1634c <printf>
			lane_latency / octets_per_multiframe,
			lane_latency % octets_per_multiframe);

	ad_printf("Initial Lane Alignment Sequence: %s\n",
				(lane_status & BIT(5)) ? "Yes" : "No");
    bb98:	e0bffd17 	ldw	r2,-12(fp)
    bb9c:	1080080c 	andi	r2,r2,32
	ad_printf("Initial Lane Alignment Sequence: %s\n",
    bba0:	10000326 	beq	r2,zero,bbb0 <axi_jesd204_rx_laneinfo_read+0x180>
    bba4:	008000f4 	movhi	r2,3
    bba8:	108b1804 	addi	r2,r2,11360
    bbac:	00000206 	br	bbb8 <axi_jesd204_rx_laneinfo_read+0x188>
    bbb0:	008000f4 	movhi	r2,3
    bbb4:	108b1904 	addi	r2,r2,11364
    bbb8:	100b883a 	mov	r5,r2
    bbbc:	010000f4 	movhi	r4,3
    bbc0:	210b4f04 	addi	r4,r4,11580
    bbc4:	001634c0 	call	1634c <printf>

	if (!(lane_status & BIT(5)))
    bbc8:	e0bffd17 	ldw	r2,-12(fp)
    bbcc:	1080080c 	andi	r2,r2,32
    bbd0:	1000021e 	bne	r2,zero,bbdc <axi_jesd204_rx_laneinfo_read+0x1ac>
		return ret;
    bbd4:	e0bffe17 	ldw	r2,-8(fp)
    bbd8:	00008506 	br	bdf0 <axi_jesd204_rx_laneinfo_read+0x3c0>

	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 0), &val[0]);
    bbdc:	e0bff517 	ldw	r2,-44(fp)
    bbe0:	1004917a 	slli	r2,r2,5
    bbe4:	1080c404 	addi	r2,r2,784
    bbe8:	e0fff704 	addi	r3,fp,-36
    bbec:	180d883a 	mov	r6,r3
    bbf0:	100b883a 	mov	r5,r2
    bbf4:	e13ff617 	ldw	r4,-40(fp)
    bbf8:	000b35c0 	call	b35c <jesd_read>
    bbfc:	1007883a 	mov	r3,r2
    bc00:	e0bffe17 	ldw	r2,-8(fp)
    bc04:	10c4b03a 	or	r2,r2,r3
    bc08:	e0bffe15 	stw	r2,-8(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 1), &val[1]);
    bc0c:	e0bff517 	ldw	r2,-44(fp)
    bc10:	1004917a 	slli	r2,r2,5
    bc14:	10c0c504 	addi	r3,r2,788
    bc18:	e0bff704 	addi	r2,fp,-36
    bc1c:	10800104 	addi	r2,r2,4
    bc20:	100d883a 	mov	r6,r2
    bc24:	180b883a 	mov	r5,r3
    bc28:	e13ff617 	ldw	r4,-40(fp)
    bc2c:	000b35c0 	call	b35c <jesd_read>
    bc30:	1007883a 	mov	r3,r2
    bc34:	e0bffe17 	ldw	r2,-8(fp)
    bc38:	10c4b03a 	or	r2,r2,r3
    bc3c:	e0bffe15 	stw	r2,-8(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 2), &val[2]);
    bc40:	e0bff517 	ldw	r2,-44(fp)
    bc44:	1004917a 	slli	r2,r2,5
    bc48:	10c0c604 	addi	r3,r2,792
    bc4c:	e0bff704 	addi	r2,fp,-36
    bc50:	10800204 	addi	r2,r2,8
    bc54:	100d883a 	mov	r6,r2
    bc58:	180b883a 	mov	r5,r3
    bc5c:	e13ff617 	ldw	r4,-40(fp)
    bc60:	000b35c0 	call	b35c <jesd_read>
    bc64:	1007883a 	mov	r3,r2
    bc68:	e0bffe17 	ldw	r2,-8(fp)
    bc6c:	10c4b03a 	or	r2,r2,r3
    bc70:	e0bffe15 	stw	r2,-8(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 3), &val[3]);
    bc74:	e0bff517 	ldw	r2,-44(fp)
    bc78:	1004917a 	slli	r2,r2,5
    bc7c:	10c0c704 	addi	r3,r2,796
    bc80:	e0bff704 	addi	r2,fp,-36
    bc84:	10800304 	addi	r2,r2,12
    bc88:	100d883a 	mov	r6,r2
    bc8c:	180b883a 	mov	r5,r3
    bc90:	e13ff617 	ldw	r4,-40(fp)
    bc94:	000b35c0 	call	b35c <jesd_read>
    bc98:	1007883a 	mov	r3,r2
    bc9c:	e0bffe17 	ldw	r2,-8(fp)
    bca0:	10c4b03a 	or	r2,r2,r3
    bca4:	e0bffe15 	stw	r2,-8(fp)

	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
		(val[0] >> 16) & 0xff,
    bca8:	e0bff717 	ldw	r2,-36(fp)
    bcac:	1004d43a 	srli	r2,r2,16
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    bcb0:	11403fcc 	andi	r5,r2,255
		(val[0] >> 24) & 0xf,
    bcb4:	e0bff717 	ldw	r2,-36(fp)
    bcb8:	1004d63a 	srli	r2,r2,24
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    bcbc:	118003cc 	andi	r6,r2,15
		(val[1] >> 0) & 0x1f,
    bcc0:	e0bff817 	ldw	r2,-32(fp)
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    bcc4:	11c007cc 	andi	r7,r2,31
		(val[1] >> 8) & 0x1f,
    bcc8:	e0bff817 	ldw	r2,-32(fp)
    bccc:	1004d23a 	srli	r2,r2,8
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    bcd0:	108007cc 	andi	r2,r2,31
		(val[1] >> 15) & 0x1,
    bcd4:	e0fff817 	ldw	r3,-32(fp)
    bcd8:	1806d3fa 	srli	r3,r3,15
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    bcdc:	18c0004c 	andi	r3,r3,1
		(val[1] >> 16) & 0xff
    bce0:	e13ff817 	ldw	r4,-32(fp)
    bce4:	2008d43a 	srli	r4,r4,16
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    bce8:	21003fcc 	andi	r4,r4,255
    bcec:	d9000215 	stw	r4,8(sp)
    bcf0:	d8c00115 	stw	r3,4(sp)
    bcf4:	d8800015 	stw	r2,0(sp)
    bcf8:	010000f4 	movhi	r4,3
    bcfc:	210b5904 	addi	r4,r4,11620
    bd00:	001634c0 	call	1634c <printf>
	);

	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
		(val[1] >> 24) & 0x1f,
    bd04:	e0bff817 	ldw	r2,-32(fp)
    bd08:	1004d63a 	srli	r2,r2,24
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd0c:	120007cc 	andi	r8,r2,31
		(val[2] >> 0) & 0xff,
    bd10:	e0bff917 	ldw	r2,-28(fp)
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd14:	11803fcc 	andi	r6,r2,255
		(val[2] >> 8) & 0x1f,
    bd18:	e0bff917 	ldw	r2,-28(fp)
    bd1c:	1004d23a 	srli	r2,r2,8
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd20:	11c007cc 	andi	r7,r2,31
		(val[2] >> 14) & 0x3,
    bd24:	e0bff917 	ldw	r2,-28(fp)
    bd28:	1004d3ba 	srli	r2,r2,14
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd2c:	108000cc 	andi	r2,r2,3
		(val[2] >> 16) & 0x1f,
    bd30:	e0fff917 	ldw	r3,-28(fp)
    bd34:	1806d43a 	srli	r3,r3,16
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd38:	18c007cc 	andi	r3,r3,31
		(val[2] >> 24) & 0x1f,
    bd3c:	e13ff917 	ldw	r4,-28(fp)
    bd40:	2008d63a 	srli	r4,r4,24
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd44:	210007cc 	andi	r4,r4,31
		(val[3] >> 7) & 0x1
    bd48:	e17ffa17 	ldw	r5,-24(fp)
    bd4c:	280ad1fa 	srli	r5,r5,7
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    bd50:	2940004c 	andi	r5,r5,1
    bd54:	d9400315 	stw	r5,12(sp)
    bd58:	d9000215 	stw	r4,8(sp)
    bd5c:	d8c00115 	stw	r3,4(sp)
    bd60:	d8800015 	stw	r2,0(sp)
    bd64:	400b883a 	mov	r5,r8
    bd68:	010000f4 	movhi	r4,3
    bd6c:	210b6604 	addi	r4,r4,11672
    bd70:	001634c0 	call	1634c <printf>
	);

	ad_printf("FCHK: 0x%X, CF: %d\n",
		(val[3] >> 24) & 0xff,
    bd74:	e0bffa17 	ldw	r2,-24(fp)
    bd78:	1006d63a 	srli	r3,r2,24
		(val[3] >> 0) & 0x1f
    bd7c:	e0bffa17 	ldw	r2,-24(fp)
	ad_printf("FCHK: 0x%X, CF: %d\n",
    bd80:	108007cc 	andi	r2,r2,31
    bd84:	100d883a 	mov	r6,r2
    bd88:	180b883a 	mov	r5,r3
    bd8c:	010000f4 	movhi	r4,3
    bd90:	210b7304 	addi	r4,r4,11724
    bd94:	001634c0 	call	1634c <printf>
	);

	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
		(val[0] >> 28) & 0xff,
    bd98:	e0bff717 	ldw	r2,-36(fp)
    bd9c:	1008d73a 	srli	r4,r2,28
		(val[1] >> 5) & 0x1,
    bda0:	e0bff817 	ldw	r2,-32(fp)
    bda4:	1004d17a 	srli	r2,r2,5
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
    bda8:	1140004c 	andi	r5,r2,1
		(val[1] >> 6) & 0x1,
    bdac:	e0bff817 	ldw	r2,-32(fp)
    bdb0:	1004d1ba 	srli	r2,r2,6
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
    bdb4:	1180004c 	andi	r6,r2,1
		(val[2] >> 29) & 0x7,
    bdb8:	e0bff917 	ldw	r2,-28(fp)
    bdbc:	1004d77a 	srli	r2,r2,29
		(val[2] >> 21) & 0x7
    bdc0:	e0fff917 	ldw	r3,-28(fp)
    bdc4:	1806d57a 	srli	r3,r3,21
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
    bdc8:	18c001cc 	andi	r3,r3,7
    bdcc:	d8c00115 	stw	r3,4(sp)
    bdd0:	d8800015 	stw	r2,0(sp)
    bdd4:	300f883a 	mov	r7,r6
    bdd8:	280d883a 	mov	r6,r5
    bddc:	200b883a 	mov	r5,r4
    bde0:	010000f4 	movhi	r4,3
    bde4:	210b7804 	addi	r4,r4,11744
    bde8:	001634c0 	call	1634c <printf>
	);

	return ret;
    bdec:	e0bffe17 	ldw	r2,-8(fp)
}
    bdf0:	e6ffff04 	addi	sp,fp,-4
    bdf4:	dfc00217 	ldw	ra,8(sp)
    bdf8:	df000117 	ldw	fp,4(sp)
    bdfc:	dc000017 	ldw	r16,0(sp)
    be00:	dec00304 	addi	sp,sp,12
    be04:	f800283a 	ret

0000be08 <i2c_init>:
 * @param init_param - The structure that contains the I2C parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t i2c_init(i2c_desc **desc,
		 const i2c_init_param *param)
{
    be08:	defffd04 	addi	sp,sp,-12
    be0c:	df000215 	stw	fp,8(sp)
    be10:	df000204 	addi	fp,sp,8
    be14:	e13fff15 	stw	r4,-4(fp)
    be18:	e17ffe15 	stw	r5,-8(fp)

	if (param->type) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    be1c:	0005883a 	mov	r2,zero
}
    be20:	e037883a 	mov	sp,fp
    be24:	df000017 	ldw	fp,0(sp)
    be28:	dec00104 	addi	sp,sp,4
    be2c:	f800283a 	ret

0000be30 <i2c_remove>:
 * @brief Free the resources allocated by i2c_init().
 * @param desc - The I2C descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t i2c_remove(i2c_desc *desc)
{
    be30:	defffe04 	addi	sp,sp,-8
    be34:	df000115 	stw	fp,4(sp)
    be38:	df000104 	addi	fp,sp,4
    be3c:	e13fff15 	stw	r4,-4(fp)
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    be40:	0005883a 	mov	r2,zero
}
    be44:	e037883a 	mov	sp,fp
    be48:	df000017 	ldw	fp,0(sp)
    be4c:	dec00104 	addi	sp,sp,4
    be50:	f800283a 	ret

0000be54 <i2c_write>:
 */
int32_t i2c_write(i2c_desc *desc,
		  uint8_t *data,
		  uint8_t bytes_number,
		  uint8_t stop_bit)
{
    be54:	defffb04 	addi	sp,sp,-20
    be58:	df000415 	stw	fp,16(sp)
    be5c:	df000404 	addi	fp,sp,16
    be60:	e13fff15 	stw	r4,-4(fp)
    be64:	e17ffe15 	stw	r5,-8(fp)
    be68:	3005883a 	mov	r2,r6
    be6c:	3807883a 	mov	r3,r7
    be70:	e0bffd05 	stb	r2,-12(fp)
    be74:	1805883a 	mov	r2,r3
    be78:	e0bffc05 	stb	r2,-16(fp)

	if (stop_bit) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    be7c:	0005883a 	mov	r2,zero
}
    be80:	e037883a 	mov	sp,fp
    be84:	df000017 	ldw	fp,0(sp)
    be88:	dec00104 	addi	sp,sp,4
    be8c:	f800283a 	ret

0000be90 <i2c_read>:
 */
int32_t i2c_read(i2c_desc *desc,
		 uint8_t *data,
		 uint8_t bytes_number,
		 uint8_t stop_bit)
{
    be90:	defffb04 	addi	sp,sp,-20
    be94:	df000415 	stw	fp,16(sp)
    be98:	df000404 	addi	fp,sp,16
    be9c:	e13fff15 	stw	r4,-4(fp)
    bea0:	e17ffe15 	stw	r5,-8(fp)
    bea4:	3005883a 	mov	r2,r6
    bea8:	3807883a 	mov	r3,r7
    beac:	e0bffd05 	stb	r2,-12(fp)
    beb0:	1805883a 	mov	r2,r3
    beb4:	e0bffc05 	stb	r2,-16(fp)

	if (stop_bit) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    beb8:	0005883a 	mov	r2,zero
}
    bebc:	e037883a 	mov	sp,fp
    bec0:	df000017 	ldw	fp,0(sp)
    bec4:	dec00104 	addi	sp,sp,4
    bec8:	f800283a 	ret

0000becc <spi_init>:
 * @param init_param - The structure that contains the SPI parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_init(spi_desc **desc,
		 const spi_init_param *param)
{
    becc:	defffb04 	addi	sp,sp,-20
    bed0:	dfc00415 	stw	ra,16(sp)
    bed4:	df000315 	stw	fp,12(sp)
    bed8:	df000304 	addi	fp,sp,12
    bedc:	e13ffe15 	stw	r4,-8(fp)
    bee0:	e17ffd15 	stw	r5,-12(fp)
	spi_desc *dev;

	dev = (spi_desc *)malloc(sizeof(*dev));
    bee4:	01000704 	movi	r4,28
    bee8:	001525c0 	call	1525c <malloc>
    beec:	e0bfff15 	stw	r2,-4(fp)
	if (!dev)
    bef0:	e0bfff17 	ldw	r2,-4(fp)
    bef4:	1000021e 	bne	r2,zero,bf00 <spi_init+0x34>
		return FAILURE;
    bef8:	00bfffc4 	movi	r2,-1
    befc:	00001f06 	br	bf7c <spi_init+0xb0>

	dev->type = param->type;
    bf00:	e0bffd17 	ldw	r2,-12(fp)
    bf04:	10c00017 	ldw	r3,0(r2)
    bf08:	e0bfff17 	ldw	r2,-4(fp)
    bf0c:	10c00015 	stw	r3,0(r2)
	dev->id = 0;
    bf10:	e0bfff17 	ldw	r2,-4(fp)
    bf14:	10000115 	stw	zero,4(r2)

	switch(dev->type) {
    bf18:	e0bfff17 	ldw	r2,-4(fp)
    bf1c:	10800017 	ldw	r2,0(r2)
    bf20:	108000e0 	cmpeqi	r2,r2,3
    bf24:	1000041e 	bne	r2,zero,bf38 <spi_init+0x6c>
#ifdef NIOS_II
	case NIOS_II_SPI:
		break;
#endif
	default:
		free(dev);
    bf28:	e13fff17 	ldw	r4,-4(fp)
    bf2c:	001526c0 	call	1526c <free>
		return FAILURE;
    bf30:	00bfffc4 	movi	r2,-1
    bf34:	00001106 	br	bf7c <spi_init+0xb0>
		break;
    bf38:	0001883a 	nop
	}

	dev->chip_select = param->chip_select;
    bf3c:	e0bffd17 	ldw	r2,-12(fp)
    bf40:	10c00103 	ldbu	r3,4(r2)
    bf44:	e0bfff17 	ldw	r2,-4(fp)
    bf48:	10c00405 	stb	r3,16(r2)
	dev->cpha = param->cpha;
    bf4c:	e0bffd17 	ldw	r2,-12(fp)
    bf50:	10c00217 	ldw	r3,8(r2)
    bf54:	e0bfff17 	ldw	r2,-4(fp)
    bf58:	10c00515 	stw	r3,20(r2)
	dev->cpol = param->cpol;
    bf5c:	e0bffd17 	ldw	r2,-12(fp)
    bf60:	10c00317 	ldw	r3,12(r2)
    bf64:	e0bfff17 	ldw	r2,-4(fp)
    bf68:	10c00615 	stw	r3,24(r2)
		free(dev);
		return FAILURE;
	}
#endif

	*desc = dev;
    bf6c:	e0bffe17 	ldw	r2,-8(fp)
    bf70:	e0ffff17 	ldw	r3,-4(fp)
    bf74:	10c00015 	stw	r3,0(r2)

	return SUCCESS;
    bf78:	0005883a 	mov	r2,zero
}
    bf7c:	e037883a 	mov	sp,fp
    bf80:	dfc00117 	ldw	ra,4(sp)
    bf84:	df000017 	ldw	fp,0(sp)
    bf88:	dec00204 	addi	sp,sp,8
    bf8c:	f800283a 	ret

0000bf90 <spi_remove>:
 * @brief Free the resources allocated by spi_init().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_remove(spi_desc *desc)
{
    bf90:	defffd04 	addi	sp,sp,-12
    bf94:	dfc00215 	stw	ra,8(sp)
    bf98:	df000115 	stw	fp,4(sp)
    bf9c:	df000104 	addi	fp,sp,4
    bfa0:	e13fff15 	stw	r4,-4(fp)
	free(desc);
    bfa4:	e13fff17 	ldw	r4,-4(fp)
    bfa8:	001526c0 	call	1526c <free>

	return SUCCESS;
    bfac:	0005883a 	mov	r2,zero
}
    bfb0:	e037883a 	mov	sp,fp
    bfb4:	dfc00117 	ldw	ra,4(sp)
    bfb8:	df000017 	ldw	fp,0(sp)
    bfbc:	dec00204 	addi	sp,sp,8
    bfc0:	f800283a 	ret

0000bfc4 <spi_write_and_read>:
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_write_and_read(spi_desc *desc,
			   uint8_t *data,
			   uint8_t bytes_number)
{
    bfc4:	defffb04 	addi	sp,sp,-20
    bfc8:	df000415 	stw	fp,16(sp)
    bfcc:	df000404 	addi	fp,sp,16
    bfd0:	e13ffe15 	stw	r4,-8(fp)
    bfd4:	e17ffd15 	stw	r5,-12(fp)
    bfd8:	3005883a 	mov	r2,r6
    bfdc:	e0bffc05 	stb	r2,-16(fp)

#ifdef NIOS_II

	uint32_t i;

	IOWR_32DIRECT(SPI_BASE, 0x0c, 0x400);
    bfe0:	00c10004 	movi	r3,1024
    bfe4:	00a20234 	movhi	r2,34824
    bfe8:	10e64335 	stwio	r3,-26356(r2)
	IOWR_32DIRECT(SPI_BASE, 0x14, ~(desc->chip_select));
    bfec:	e0bffe17 	ldw	r2,-8(fp)
    bff0:	10800403 	ldbu	r2,16(r2)
    bff4:	10803fcc 	andi	r2,r2,255
    bff8:	0086303a 	nor	r3,zero,r2
    bffc:	00a20234 	movhi	r2,34824
    c000:	10e64535 	stwio	r3,-26348(r2)
	for (i = 0; i < bytes_number; i++) {
    c004:	e03fff15 	stw	zero,-4(fp)
    c008:	00001b06 	br	c078 <spi_write_and_read+0xb4>
		while ((IORD_32DIRECT(SPI_BASE, 0x08) & 0x40) == 0x00) {}
    c00c:	0001883a 	nop
    c010:	00a20234 	movhi	r2,34824
    c014:	10a64237 	ldwio	r2,-26360(r2)
    c018:	1080100c 	andi	r2,r2,64
    c01c:	103ffc26 	beq	r2,zero,c010 <__alt_mem_mcu_subsystem_ram_0+0x77fec010>
		IOWR_32DIRECT(SPI_BASE, 0x04, *(data + i));
    c020:	e0fffd17 	ldw	r3,-12(fp)
    c024:	e0bfff17 	ldw	r2,-4(fp)
    c028:	1885883a 	add	r2,r3,r2
    c02c:	10800003 	ldbu	r2,0(r2)
    c030:	10c03fcc 	andi	r3,r2,255
    c034:	00a20234 	movhi	r2,34824
    c038:	10e64135 	stwio	r3,-26364(r2)
		while ((IORD_32DIRECT(SPI_BASE, 0x08) & 0x80) == 0x00) {}
    c03c:	0001883a 	nop
    c040:	00a20234 	movhi	r2,34824
    c044:	10a64237 	ldwio	r2,-26360(r2)
    c048:	1080200c 	andi	r2,r2,128
    c04c:	103ffc26 	beq	r2,zero,c040 <__alt_mem_mcu_subsystem_ram_0+0x77fec040>
		*(data + i) = IORD_32DIRECT(SPI_BASE, 0x00);
    c050:	00a20234 	movhi	r2,34824
    c054:	11264037 	ldwio	r4,-26368(r2)
    c058:	e0fffd17 	ldw	r3,-12(fp)
    c05c:	e0bfff17 	ldw	r2,-4(fp)
    c060:	1885883a 	add	r2,r3,r2
    c064:	2007883a 	mov	r3,r4
    c068:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < bytes_number; i++) {
    c06c:	e0bfff17 	ldw	r2,-4(fp)
    c070:	10800044 	addi	r2,r2,1
    c074:	e0bfff15 	stw	r2,-4(fp)
    c078:	e0bffc03 	ldbu	r2,-16(fp)
    c07c:	e0ffff17 	ldw	r3,-4(fp)
    c080:	18bfe236 	bltu	r3,r2,c00c <__alt_mem_mcu_subsystem_ram_0+0x77fec00c>
	}
	IOWR_32DIRECT(SPI_BASE, 0x14, 0x000);
    c084:	0007883a 	mov	r3,zero
    c088:	00a20234 	movhi	r2,34824
    c08c:	10e64535 	stwio	r3,-26348(r2)
	IOWR_32DIRECT(SPI_BASE, 0x0c, 0x000);
    c090:	0007883a 	mov	r3,zero
    c094:	00a20234 	movhi	r2,34824
    c098:	10e64335 	stwio	r3,-26356(r2)
	Xil_Out32((XPAR_SPI_0_BASEADDR + 0x60),
		  (0x186 | (desc->cpol<<3) | (desc->cpha<<4)));

#endif

	return SUCCESS;
    c09c:	0005883a 	mov	r2,zero
}
    c0a0:	e037883a 	mov	sp,fp
    c0a4:	df000017 	ldw	fp,0(sp)
    c0a8:	dec00104 	addi	sp,sp,4
    c0ac:	f800283a 	ret

0000c0b0 <gpio_get>:
 * @param gpio_number - The number of the GPIO.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get(gpio_desc **desc,
		 uint8_t gpio_number, uint8_t direction)
{
    c0b0:	defffa04 	addi	sp,sp,-24
    c0b4:	dfc00515 	stw	ra,20(sp)
    c0b8:	df000415 	stw	fp,16(sp)
    c0bc:	df000404 	addi	fp,sp,16
    c0c0:	e13ffe15 	stw	r4,-8(fp)
    c0c4:	2805883a 	mov	r2,r5
    c0c8:	3007883a 	mov	r3,r6
    c0cc:	e0bffd05 	stb	r2,-12(fp)
    c0d0:	1805883a 	mov	r2,r3
    c0d4:	e0bffc05 	stb	r2,-16(fp)
	gpio_desc *dev;

	if (gpio_number < 32)
    c0d8:	e0bffd03 	ldbu	r2,-12(fp)
    c0dc:	10800828 	cmpgeui	r2,r2,32
    c0e0:	1000021e 	bne	r2,zero,c0ec <gpio_get+0x3c>
		return FAILURE;
    c0e4:	00bfffc4 	movi	r2,-1
    c0e8:	00001806 	br	c14c <gpio_get+0x9c>

	dev = (gpio_desc *)malloc(sizeof(*dev));
    c0ec:	01000304 	movi	r4,12
    c0f0:	001525c0 	call	1525c <malloc>
    c0f4:	e0bfff15 	stw	r2,-4(fp)
	if (!dev)
    c0f8:	e0bfff17 	ldw	r2,-4(fp)
    c0fc:	1000021e 	bne	r2,zero,c108 <gpio_get+0x58>
		return FAILURE;
    c100:	00bfffc4 	movi	r2,-1
    c104:	00001106 	br	c14c <gpio_get+0x9c>

	dev->number = gpio_number;
    c108:	e0bfff17 	ldw	r2,-4(fp)
    c10c:	e0fffd03 	ldbu	r3,-12(fp)
    c110:	10c00205 	stb	r3,8(r2)
	dev->id 	= 0;
    c114:	e0bfff17 	ldw	r2,-4(fp)
    c118:	10000115 	stw	zero,4(r2)
	dev->direction = ((direction==0)?0:1);
    c11c:	e0bffc03 	ldbu	r2,-16(fp)
    c120:	1004c03a 	cmpne	r2,r2,zero
    c124:	1007883a 	mov	r3,r2
    c128:	e0bfff17 	ldw	r2,-4(fp)
    c12c:	10c00245 	stb	r3,9(r2)
#endif
#ifdef ZYNQ_PSU
	dev->type = ZYNQ_PSU_GPIO;
#endif
#ifdef NIOS_II
	dev->type = NIOS_II_GPIO;
    c130:	e0bfff17 	ldw	r2,-4(fp)
    c134:	00c000c4 	movi	r3,3
    c138:	10c00015 	stw	r3,0(r2)
#endif
#ifdef MICROBLAZE
	dev->type = MICROBLAZE_GPIO;
#endif

	*desc = dev;
    c13c:	e0bffe17 	ldw	r2,-8(fp)
    c140:	e0ffff17 	ldw	r3,-4(fp)
    c144:	10c00015 	stw	r3,0(r2)

	return SUCCESS;
    c148:	0005883a 	mov	r2,zero
}
    c14c:	e037883a 	mov	sp,fp
    c150:	dfc00117 	ldw	ra,4(sp)
    c154:	df000017 	ldw	fp,0(sp)
    c158:	dec00204 	addi	sp,sp,8
    c15c:	f800283a 	ret

0000c160 <gpio_remove>:
 * @brief Free the resources allocated by gpio_get().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_remove(gpio_desc *desc)
{
    c160:	defffd04 	addi	sp,sp,-12
    c164:	dfc00215 	stw	ra,8(sp)
    c168:	df000115 	stw	fp,4(sp)
    c16c:	df000104 	addi	fp,sp,4
    c170:	e13fff15 	stw	r4,-4(fp)
	free(desc);
    c174:	e13fff17 	ldw	r4,-4(fp)
    c178:	001526c0 	call	1526c <free>

	return SUCCESS;
    c17c:	0005883a 	mov	r2,zero
}
    c180:	e037883a 	mov	sp,fp
    c184:	dfc00117 	ldw	ra,4(sp)
    c188:	df000017 	ldw	fp,0(sp)
    c18c:	dec00204 	addi	sp,sp,8
    c190:	f800283a 	ret

0000c194 <gpio_direction_input>:
 * @brief Enable the input direction of the specified GPIO.
 * @param desc - The GPIO descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_direction_input(gpio_desc *desc)
{
    c194:	defffe04 	addi	sp,sp,-8
    c198:	df000115 	stw	fp,4(sp)
    c19c:	df000104 	addi	fp,sp,4
    c1a0:	e13fff15 	stw	r4,-4(fp)
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return 0;
    c1a4:	0005883a 	mov	r2,zero
}
    c1a8:	e037883a 	mov	sp,fp
    c1ac:	df000017 	ldw	fp,0(sp)
    c1b0:	dec00104 	addi	sp,sp,4
    c1b4:	f800283a 	ret

0000c1b8 <gpio_direction_output>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_direction_output(gpio_desc *desc,
			      uint8_t value)
{
    c1b8:	defffd04 	addi	sp,sp,-12
    c1bc:	df000215 	stw	fp,8(sp)
    c1c0:	df000204 	addi	fp,sp,8
    c1c4:	e13fff15 	stw	r4,-4(fp)
    c1c8:	2805883a 	mov	r2,r5
    c1cc:	e0bffe05 	stb	r2,-8(fp)

	if (value) {
		// Unused variable - fix compiler warning
	}

	return 0;
    c1d0:	0005883a 	mov	r2,zero
}
    c1d4:	e037883a 	mov	sp,fp
    c1d8:	df000017 	ldw	fp,0(sp)
    c1dc:	dec00104 	addi	sp,sp,4
    c1e0:	f800283a 	ret

0000c1e4 <gpio_get_direction>:
 *                             GPIO_IN
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get_direction(gpio_desc *desc,
			   uint8_t *direction)
{
    c1e4:	defffd04 	addi	sp,sp,-12
    c1e8:	df000215 	stw	fp,8(sp)
    c1ec:	df000204 	addi	fp,sp,8
    c1f0:	e13fff15 	stw	r4,-4(fp)
    c1f4:	e17ffe15 	stw	r5,-8(fp)

	if (direction) {
		// Unused variable - fix compiler warning
	}

	return 0;
    c1f8:	0005883a 	mov	r2,zero
}
    c1fc:	e037883a 	mov	sp,fp
    c200:	df000017 	ldw	fp,0(sp)
    c204:	dec00104 	addi	sp,sp,4
    c208:	f800283a 	ret

0000c20c <gpio_set_value>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_set_value(gpio_desc *desc,
		       uint8_t value)
{
    c20c:	defff904 	addi	sp,sp,-28
    c210:	df000615 	stw	fp,24(sp)
    c214:	df000604 	addi	fp,sp,24
    c218:	e13ffb15 	stw	r4,-20(fp)
    c21c:	2805883a 	mov	r2,r5
    c220:	e0bffa05 	stb	r2,-24(fp)
#if defined(ZYNQ_PS7) || defined(ZYNQ_PSU)
	uint32_t pdata;
#endif
	uint32_t pmask;

	pstatus = -1;
    c224:	00bfffc4 	movi	r2,-1
    c228:	e0bfff15 	stw	r2,-4(fp)
	ppos = desc->number - 32;
    c22c:	e0bffb17 	ldw	r2,-20(fp)
    c230:	10800203 	ldbu	r2,8(r2)
    c234:	10803fcc 	andi	r2,r2,255
    c238:	10bff804 	addi	r2,r2,-32
    c23c:	e0bffd15 	stw	r2,-12(fp)
	pmask = 0x1 << ppos;
    c240:	00c00044 	movi	r3,1
    c244:	e0bffd17 	ldw	r2,-12(fp)
    c248:	1884983a 	sll	r2,r3,r2
    c24c:	e0bffc15 	stw	r2,-16(fp)

	switch(desc->type) {
    c250:	e0bffb17 	ldw	r2,-20(fp)
    c254:	10800017 	ldw	r2,0(r2)
    c258:	108000e0 	cmpeqi	r2,r2,3
    c25c:	1000011e 	bne	r2,zero,c264 <gpio_set_value+0x58>
			  ((pdata & ~pmask) | (value << ppos)));
		pstatus = 0;
		break;
#endif
	default:
		break;
    c260:	00001f06 	br	c2e0 <gpio_set_value+0xd4>
	   dir_mask = IORD_32DIRECT(GPIO_BASE, 0x02 << 2);
    c264:	00a20234 	movhi	r2,34824
    c268:	10a64a37 	ldwio	r2,-26328(r2)
    c26c:	e0bffe15 	stw	r2,-8(fp)
	   if(desc->direction)
    c270:	e0bffb17 	ldw	r2,-20(fp)
    c274:	10800243 	ldbu	r2,9(r2)
    c278:	10803fcc 	andi	r2,r2,255
    c27c:	10000526 	beq	r2,zero,c294 <gpio_set_value+0x88>
	      dir_mask |= pmask;
    c280:	e0fffe17 	ldw	r3,-8(fp)
    c284:	e0bffc17 	ldw	r2,-16(fp)
    c288:	1884b03a 	or	r2,r3,r2
    c28c:	e0bffe15 	stw	r2,-8(fp)
    c290:	00000506 	br	c2a8 <gpio_set_value+0x9c>
	      dir_mask &= ~pmask;
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	0084303a 	nor	r2,zero,r2
    c29c:	e0fffe17 	ldw	r3,-8(fp)
    c2a0:	1884703a 	and	r2,r3,r2
    c2a4:	e0bffe15 	stw	r2,-8(fp)
	   IOWR_32DIRECT(GPIO_BASE, 0x02 << 2, dir_mask);
    c2a8:	e0fffe17 	ldw	r3,-8(fp)
    c2ac:	00a20234 	movhi	r2,34824
    c2b0:	10e64a35 	stwio	r3,-26328(r2)
	   if(value == 0)
    c2b4:	e0bffa03 	ldbu	r2,-24(fp)
    c2b8:	1000041e 	bne	r2,zero,c2cc <gpio_set_value+0xc0>
	      IOWR_32DIRECT(GPIO_BASE, 0x05 << 2, pmask);
    c2bc:	e0fffc17 	ldw	r3,-16(fp)
    c2c0:	00a20234 	movhi	r2,34824
    c2c4:	10e64d35 	stwio	r3,-26316(r2)
    c2c8:	00000306 	br	c2d8 <gpio_set_value+0xcc>
	      IOWR_32DIRECT(GPIO_BASE, 0x04 << 2, pmask);
    c2cc:	e0fffc17 	ldw	r3,-16(fp)
    c2d0:	00a20234 	movhi	r2,34824
    c2d4:	10e64c35 	stwio	r3,-26320(r2)
		pstatus = 0;
    c2d8:	e03fff15 	stw	zero,-4(fp)
		break;
    c2dc:	0001883a 	nop
	}

	return(pstatus);
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
}
    c2e4:	e037883a 	mov	sp,fp
    c2e8:	df000017 	ldw	fp,0(sp)
    c2ec:	dec00104 	addi	sp,sp,4
    c2f0:	f800283a 	ret

0000c2f4 <gpio_get_value>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get_value(gpio_desc *desc,
		       uint8_t *value)
{
    c2f4:	defffa04 	addi	sp,sp,-24
    c2f8:	df000515 	stw	fp,20(sp)
    c2fc:	df000504 	addi	fp,sp,20
    c300:	e13ffc15 	stw	r4,-16(fp)
    c304:	e17ffb15 	stw	r5,-20(fp)
	uint32_t pdata;
#ifdef ZYNQ
	uint32_t pmask;
#endif

	pstatus = -1;
    c308:	00bfffc4 	movi	r2,-1
    c30c:	e0bfff15 	stw	r2,-4(fp)
	ppos = desc->number - 32;
    c310:	e0bffc17 	ldw	r2,-16(fp)
    c314:	10800203 	ldbu	r2,8(r2)
    c318:	10803fcc 	andi	r2,r2,255
    c31c:	10bff804 	addi	r2,r2,-32
    c320:	e0bffe15 	stw	r2,-8(fp)
#ifdef ZYNQ
	pmask = 0x1 << ppos;
#endif

	switch(desc->type) {
    c324:	e0bffc17 	ldw	r2,-16(fp)
    c328:	10800017 	ldw	r2,0(r2)
    c32c:	108000e0 	cmpeqi	r2,r2,3
    c330:	1000011e 	bne	r2,zero,c338 <gpio_get_value+0x44>
		*value = (pdata >> ppos) & 0x1;
		pstatus = 0;
		break;
#endif
	default:
		break;
    c334:	00000c06 	br	c368 <gpio_get_value+0x74>
	   pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    c338:	00a20234 	movhi	r2,34824
    c33c:	10a64837 	ldwio	r2,-26336(r2)
    c340:	e0bffd15 	stw	r2,-12(fp)
		*value = (pdata >> ppos) & 0x1;
    c344:	e0fffd17 	ldw	r3,-12(fp)
    c348:	e0bffe17 	ldw	r2,-8(fp)
    c34c:	1884d83a 	srl	r2,r3,r2
    c350:	1080004c 	andi	r2,r2,1
    c354:	1007883a 	mov	r3,r2
    c358:	e0bffb17 	ldw	r2,-20(fp)
    c35c:	10c00005 	stb	r3,0(r2)
		pstatus = 0;
    c360:	e03fff15 	stw	zero,-4(fp)
		break;
    c364:	0001883a 	nop
	}

	return(pstatus);
    c368:	e0bfff17 	ldw	r2,-4(fp)
}
    c36c:	e037883a 	mov	sp,fp
    c370:	df000017 	ldw	fp,0(sp)
    c374:	dec00104 	addi	sp,sp,4
    c378:	f800283a 	ret

0000c37c <ad_gpio_set_range>:
/***************************************************************************//**
 * @brief ad_gpio_set_range
 ******************************************************************************/

int32_t ad_gpio_set_range(uint8_t start_pin, uint8_t num_pins, uint8_t data)
{
    c37c:	defff804 	addi	sp,sp,-32
    c380:	df000715 	stw	fp,28(sp)
    c384:	df000704 	addi	fp,sp,28
    c388:	2005883a 	mov	r2,r4
    c38c:	2809883a 	mov	r4,r5
    c390:	3007883a 	mov	r3,r6
    c394:	e0bffb05 	stb	r2,-20(fp)
    c398:	2005883a 	mov	r2,r4
    c39c:	e0bffa05 	stb	r2,-24(fp)
    c3a0:	1805883a 	mov	r2,r3
    c3a4:	e0bff905 	stb	r2,-28(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	if (start_pin < 32) {
    c3a8:	e0bffb03 	ldbu	r2,-20(fp)
    c3ac:	10800828 	cmpgeui	r2,r2,32
    c3b0:	1000021e 	bne	r2,zero,c3bc <ad_gpio_set_range+0x40>
		return(-1);
    c3b4:	00bfffc4 	movi	r2,-1
    c3b8:	00001c06 	br	c42c <ad_gpio_set_range+0xb0>
	}

	pstatus = -1;
    c3bc:	00bfffc4 	movi	r2,-1
    c3c0:	e0bfff15 	stw	r2,-4(fp)
	ppos = start_pin - 32;
    c3c4:	e0bffb03 	ldbu	r2,-20(fp)
    c3c8:	10bff804 	addi	r2,r2,-32
    c3cc:	e0bffe15 	stw	r2,-8(fp)
	pmask = ((1 << num_pins) - 1) << ppos;
    c3d0:	e0bffa03 	ldbu	r2,-24(fp)
    c3d4:	00c00044 	movi	r3,1
    c3d8:	1884983a 	sll	r2,r3,r2
    c3dc:	10ffffc4 	addi	r3,r2,-1
    c3e0:	e0bffe17 	ldw	r2,-8(fp)
    c3e4:	1884983a 	sll	r2,r3,r2
    c3e8:	e0bffd15 	stw	r2,-12(fp)
	pstatus = 0;

#endif

#ifdef NIOS_II
	pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    c3ec:	00a20234 	movhi	r2,34824
    c3f0:	10a64837 	ldwio	r2,-26336(r2)
    c3f4:	e0bffc15 	stw	r2,-16(fp)
	IOWR_32DIRECT(GPIO_BASE, 0x0, ((pdata & ~pmask) | (data << ppos)));
    c3f8:	e0bffd17 	ldw	r2,-12(fp)
    c3fc:	0086303a 	nor	r3,zero,r2
    c400:	e0bffc17 	ldw	r2,-16(fp)
    c404:	1884703a 	and	r2,r3,r2
    c408:	e13ff903 	ldbu	r4,-28(fp)
    c40c:	e0fffe17 	ldw	r3,-8(fp)
    c410:	20c6983a 	sll	r3,r4,r3
    c414:	10c4b03a 	or	r2,r2,r3
    c418:	1007883a 	mov	r3,r2
    c41c:	00a20234 	movhi	r2,34824
    c420:	10e64835 	stwio	r3,-26336(r2)
	pstatus = 0;
    c424:	e03fff15 	stw	zero,-4(fp)
		  ((pdata & ~pmask) | (data << ppos)));
	pstatus = 0;

#endif

	return(pstatus);
    c428:	e0bfff17 	ldw	r2,-4(fp)
}
    c42c:	e037883a 	mov	sp,fp
    c430:	df000017 	ldw	fp,0(sp)
    c434:	dec00104 	addi	sp,sp,4
    c438:	f800283a 	ret

0000c43c <ad_gpio_get_range>:
/***************************************************************************//**
 * @brief ad_gpio_get_range
 ******************************************************************************/

int32_t ad_gpio_get_range(uint8_t start_pin, uint8_t num_pins, uint32_t *data)
{
    c43c:	defff804 	addi	sp,sp,-32
    c440:	df000715 	stw	fp,28(sp)
    c444:	df000704 	addi	fp,sp,28
    c448:	2005883a 	mov	r2,r4
    c44c:	2807883a 	mov	r3,r5
    c450:	e1bff915 	stw	r6,-28(fp)
    c454:	e0bffb05 	stb	r2,-20(fp)
    c458:	1805883a 	mov	r2,r3
    c45c:	e0bffa05 	stb	r2,-24(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	if (start_pin < 32) {
    c460:	e0bffb03 	ldbu	r2,-20(fp)
    c464:	10800828 	cmpgeui	r2,r2,32
    c468:	1000021e 	bne	r2,zero,c474 <ad_gpio_get_range+0x38>
		return(-1);
    c46c:	00bfffc4 	movi	r2,-1
    c470:	00001806 	br	c4d4 <ad_gpio_get_range+0x98>
	}

	pstatus = -1;
    c474:	00bfffc4 	movi	r2,-1
    c478:	e0bfff15 	stw	r2,-4(fp)
	ppos = start_pin - 32;
    c47c:	e0bffb03 	ldbu	r2,-20(fp)
    c480:	10bff804 	addi	r2,r2,-32
    c484:	e0bffe15 	stw	r2,-8(fp)
	pmask = ((1 << num_pins) - 1) << ppos;
    c488:	e0bffa03 	ldbu	r2,-24(fp)
    c48c:	00c00044 	movi	r3,1
    c490:	1884983a 	sll	r2,r3,r2
    c494:	10ffffc4 	addi	r3,r2,-1
    c498:	e0bffe17 	ldw	r2,-8(fp)
    c49c:	1884983a 	sll	r2,r3,r2
    c4a0:	e0bffd15 	stw	r2,-12(fp)

#endif

#ifdef NIOS_II

	pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    c4a4:	00a20234 	movhi	r2,34824
    c4a8:	10a64837 	ldwio	r2,-26336(r2)
    c4ac:	e0bffc15 	stw	r2,-16(fp)
	*data = (pdata & pmask) >> ppos;
    c4b0:	e0fffc17 	ldw	r3,-16(fp)
    c4b4:	e0bffd17 	ldw	r2,-12(fp)
    c4b8:	1886703a 	and	r3,r3,r2
    c4bc:	e0bffe17 	ldw	r2,-8(fp)
    c4c0:	1886d83a 	srl	r3,r3,r2
    c4c4:	e0bff917 	ldw	r2,-28(fp)
    c4c8:	10c00015 	stw	r3,0(r2)
	pstatus = 0;
    c4cc:	e03fff15 	stw	zero,-4(fp)
	*data = (pdata & pmask) >> ppos;
	pstatus = 0;

#endif

	return(pstatus);
    c4d0:	e0bfff17 	ldw	r2,-4(fp)
}
    c4d4:	e037883a 	mov	sp,fp
    c4d8:	df000017 	ldw	fp,0(sp)
    c4dc:	dec00104 	addi	sp,sp,4
    c4e0:	f800283a 	ret

0000c4e4 <do_div>:

/***************************************************************************//**
 * @brief do_div
 ******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
    c4e4:	defff904 	addi	sp,sp,-28
    c4e8:	dfc00615 	stw	ra,24(sp)
    c4ec:	df000515 	stw	fp,20(sp)
    c4f0:	df000504 	addi	fp,sp,20
    c4f4:	e13ffd15 	stw	r4,-12(fp)
    c4f8:	e17ffb15 	stw	r5,-20(fp)
    c4fc:	e1bffc15 	stw	r6,-16(fp)
	uint64_t mod = 0;
    c500:	e03ffe15 	stw	zero,-8(fp)
    c504:	e03fff15 	stw	zero,-4(fp)

	mod = *n % base;
    c508:	e13ffd17 	ldw	r4,-12(fp)
    c50c:	20800017 	ldw	r2,0(r4)
    c510:	20c00117 	ldw	r3,4(r4)
    c514:	e1bffb17 	ldw	r6,-20(fp)
    c518:	e1fffc17 	ldw	r7,-16(fp)
    c51c:	1009883a 	mov	r4,r2
    c520:	180b883a 	mov	r5,r3
    c524:	00124000 	call	12400 <__umoddi3>
    c528:	1009883a 	mov	r4,r2
    c52c:	180b883a 	mov	r5,r3
    c530:	e13ffe15 	stw	r4,-8(fp)
    c534:	e17fff15 	stw	r5,-4(fp)
	*n = *n / base;
    c538:	e13ffd17 	ldw	r4,-12(fp)
    c53c:	20800017 	ldw	r2,0(r4)
    c540:	20c00117 	ldw	r3,4(r4)
    c544:	e1bffb17 	ldw	r6,-20(fp)
    c548:	e1fffc17 	ldw	r7,-16(fp)
    c54c:	1009883a 	mov	r4,r2
    c550:	180b883a 	mov	r5,r3
    c554:	0011e680 	call	11e68 <__udivdi3>
    c558:	1009883a 	mov	r4,r2
    c55c:	180b883a 	mov	r5,r3
    c560:	2005883a 	mov	r2,r4
    c564:	2807883a 	mov	r3,r5
    c568:	e13ffd17 	ldw	r4,-12(fp)
    c56c:	20800015 	stw	r2,0(r4)
    c570:	20c00115 	stw	r3,4(r4)

	return mod;
    c574:	e0bffe17 	ldw	r2,-8(fp)
    c578:	e0ffff17 	ldw	r3,-4(fp)
    c57c:	1009883a 	mov	r4,r2
    c580:	180b883a 	mov	r5,r3
}
    c584:	2005883a 	mov	r2,r4
    c588:	2807883a 	mov	r3,r5
    c58c:	e037883a 	mov	sp,fp
    c590:	dfc00117 	ldw	ra,4(sp)
    c594:	df000017 	ldw	fp,0(sp)
    c598:	dec00204 	addi	sp,sp,8
    c59c:	f800283a 	ret

0000c5a0 <ad_reg_write_16>:

/***************************************************************************//**
 * @brief ad_reg_write_16
 ******************************************************************************/
void ad_reg_write_16(uint32_t addr, uint32_t data)
{
    c5a0:	defffc04 	addi	sp,sp,-16
    c5a4:	df000315 	stw	fp,12(sp)
    c5a8:	df000304 	addi	fp,sp,12
    c5ac:	e13ffe15 	stw	r4,-8(fp)
    c5b0:	e17ffd15 	stw	r5,-12(fp)
	uint32_t m_data;

	m_data = ad_reg_read(addr & ~0x3);
    c5b4:	e0fffe17 	ldw	r3,-8(fp)
    c5b8:	00bfff04 	movi	r2,-4
    c5bc:	1884703a 	and	r2,r3,r2
    c5c0:	10800037 	ldwio	r2,0(r2)
    c5c4:	e0bfff15 	stw	r2,-4(fp)
	if ((addr & 0x3) == 0)
    c5c8:	e0bffe17 	ldw	r2,-8(fp)
    c5cc:	108000cc 	andi	r2,r2,3
    c5d0:	1000061e 	bne	r2,zero,c5ec <ad_reg_write_16+0x4c>
		m_data = (m_data & ~0xffff) | data;
    c5d4:	e0bfff17 	ldw	r2,-4(fp)
    c5d8:	10bfffec 	andhi	r2,r2,65535
    c5dc:	e0fffd17 	ldw	r3,-12(fp)
    c5e0:	1884b03a 	or	r2,r3,r2
    c5e4:	e0bfff15 	stw	r2,-4(fp)
    c5e8:	00000606 	br	c604 <ad_reg_write_16+0x64>
	else
		m_data = (m_data & 0xffff) | (data<<16);
    c5ec:	e0bfff17 	ldw	r2,-4(fp)
    c5f0:	10ffffcc 	andi	r3,r2,65535
    c5f4:	e0bffd17 	ldw	r2,-12(fp)
    c5f8:	1004943a 	slli	r2,r2,16
    c5fc:	1884b03a 	or	r2,r3,r2
    c600:	e0bfff15 	stw	r2,-4(fp)
	ad_reg_write((addr & ~0x3), m_data);
    c604:	e0fffe17 	ldw	r3,-8(fp)
    c608:	00bfff04 	movi	r2,-4
    c60c:	1884703a 	and	r2,r3,r2
    c610:	1007883a 	mov	r3,r2
    c614:	e0bfff17 	ldw	r2,-4(fp)
    c618:	18800035 	stwio	r2,0(r3)
}
    c61c:	0001883a 	nop
    c620:	e037883a 	mov	sp,fp
    c624:	df000017 	ldw	fp,0(sp)
    c628:	dec00104 	addi	sp,sp,4
    c62c:	f800283a 	ret

0000c630 <ad_platform_init>:

#ifdef ALTERA
void ad_platform_init(void)
{
    c630:	deffff04 	addi	sp,sp,-4
    c634:	df000015 	stw	fp,0(sp)
    c638:	d839883a 	mov	fp,sp
	return;
    c63c:	0001883a 	nop
}
    c640:	e037883a 	mov	sp,fp
    c644:	df000017 	ldw	fp,0(sp)
    c648:	dec00104 	addi	sp,sp,4
    c64c:	f800283a 	ret

0000c650 <ad_platform_close>:

void ad_platform_close(void)
{
    c650:	defffe04 	addi	sp,sp,-8
    c654:	dfc00115 	stw	ra,4(sp)
    c658:	df000015 	stw	fp,0(sp)
    c65c:	d839883a 	mov	fp,sp
	alt_printf("%c", 0x04);
    c660:	01400104 	movi	r5,4
    c664:	010000f4 	movhi	r4,3
    c668:	210b8a04 	addi	r4,r4,11816
    c66c:	00259a40 	call	259a4 <alt_printf>
	return;
    c670:	0001883a 	nop
}
    c674:	e037883a 	mov	sp,fp
    c678:	dfc00117 	ldw	ra,4(sp)
    c67c:	df000017 	ldw	fp,0(sp)
    c680:	dec00204 	addi	sp,sp,8
    c684:	f800283a 	ret

0000c688 <ad_uart_read>:

/***************************************************************************//**
 * @brief ad_uart_read
 ******************************************************************************/
uint8_t ad_uart_read()
{
    c688:	defffd04 	addi	sp,sp,-12
    c68c:	dfc00215 	stw	ra,8(sp)
    c690:	df000115 	stw	fp,4(sp)
    c694:	df000104 	addi	fp,sp,4
	}
	RecievedByte = XUartPs_ReadReg(STDIN_BASEADDRESS, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (uint8_t)RecievedByte;
#else
	uint8_t RecievedByte = 0;
    c698:	e03fffc5 	stb	zero,-1(fp)

	RecievedByte = getc(stdin);
    c69c:	d0a00117 	ldw	r2,-32764(gp)
    c6a0:	10800117 	ldw	r2,4(r2)
    c6a4:	1009883a 	mov	r4,r2
    c6a8:	00150f40 	call	150f4 <getc>
    c6ac:	e0bfffc5 	stb	r2,-1(fp)

	return RecievedByte;
    c6b0:	e0bfffc3 	ldbu	r2,-1(fp)
#endif
}
    c6b4:	e037883a 	mov	sp,fp
    c6b8:	dfc00117 	ldw	ra,4(sp)
    c6bc:	df000017 	ldw	fp,0(sp)
    c6c0:	dec00204 	addi	sp,sp,8
    c6c4:	f800283a 	ret

0000c6c8 <ad_pow2>:

/***************************************************************************//**
 * @brief ad_pow2 Create a mask for a given number of bit
 ******************************************************************************/
uint32_t ad_pow2(uint32_t number)
{
    c6c8:	defffc04 	addi	sp,sp,-16
    c6cc:	df000315 	stw	fp,12(sp)
    c6d0:	df000304 	addi	fp,sp,12
    c6d4:	e13ffd15 	stw	r4,-12(fp)

	uint32_t index;
	uint32_t mask = 1;
    c6d8:	00800044 	movi	r2,1
    c6dc:	e0bffe15 	stw	r2,-8(fp)

	for (index=1; index < number; index++) {
    c6e0:	00800044 	movi	r2,1
    c6e4:	e0bfff15 	stw	r2,-4(fp)
    c6e8:	00000706 	br	c708 <ad_pow2+0x40>
		mask = (mask << 1) ^ 1;
    c6ec:	e0bffe17 	ldw	r2,-8(fp)
    c6f0:	1085883a 	add	r2,r2,r2
    c6f4:	1080005c 	xori	r2,r2,1
    c6f8:	e0bffe15 	stw	r2,-8(fp)
	for (index=1; index < number; index++) {
    c6fc:	e0bfff17 	ldw	r2,-4(fp)
    c700:	10800044 	addi	r2,r2,1
    c704:	e0bfff15 	stw	r2,-4(fp)
    c708:	e0ffff17 	ldw	r3,-4(fp)
    c70c:	e0bffd17 	ldw	r2,-12(fp)
    c710:	18bff636 	bltu	r3,r2,c6ec <__alt_mem_mcu_subsystem_ram_0+0x77fec6ec>
	}

	return mask;
    c714:	e0bffe17 	ldw	r2,-8(fp)
}
    c718:	e037883a 	mov	sp,fp
    c71c:	df000017 	ldw	fp,0(sp)
    c720:	dec00104 	addi	sp,sp,4
    c724:	f800283a 	ret

0000c728 <xcvr_read>:
 * @brief xcvr_read
 ******************************************************************************/
int32_t xcvr_read(xcvr_core *core,
		  uint32_t reg_addr,
		  uint32_t *reg_data)
{
    c728:	defffc04 	addi	sp,sp,-16
    c72c:	df000315 	stw	fp,12(sp)
    c730:	df000304 	addi	fp,sp,12
    c734:	e13fff15 	stw	r4,-4(fp)
    c738:	e17ffe15 	stw	r5,-8(fp)
    c73c:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((core->base_address + reg_addr));
    c740:	e0bfff17 	ldw	r2,-4(fp)
    c744:	10c00117 	ldw	r3,4(r2)
    c748:	e0bffe17 	ldw	r2,-8(fp)
    c74c:	1885883a 	add	r2,r3,r2
    c750:	10800037 	ldwio	r2,0(r2)
    c754:	1007883a 	mov	r3,r2
    c758:	e0bffd17 	ldw	r2,-12(fp)
    c75c:	10c00015 	stw	r3,0(r2)

	return 0;
    c760:	0005883a 	mov	r2,zero
}
    c764:	e037883a 	mov	sp,fp
    c768:	df000017 	ldw	fp,0(sp)
    c76c:	dec00104 	addi	sp,sp,4
    c770:	f800283a 	ret

0000c774 <xcvr_write>:
 * @brief xcvr_write
 ******************************************************************************/
int32_t xcvr_write(xcvr_core *core,
		   uint32_t reg_addr,
		   uint32_t reg_data)
{
    c774:	defffc04 	addi	sp,sp,-16
    c778:	df000315 	stw	fp,12(sp)
    c77c:	df000304 	addi	fp,sp,12
    c780:	e13fff15 	stw	r4,-4(fp)
    c784:	e17ffe15 	stw	r5,-8(fp)
    c788:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((core->base_address + reg_addr), reg_data);
    c78c:	e0bfff17 	ldw	r2,-4(fp)
    c790:	10c00117 	ldw	r3,4(r2)
    c794:	e0bffe17 	ldw	r2,-8(fp)
    c798:	1885883a 	add	r2,r3,r2
    c79c:	1007883a 	mov	r3,r2
    c7a0:	e0bffd17 	ldw	r2,-12(fp)
    c7a4:	18800035 	stwio	r2,0(r3)

	return 0;
    c7a8:	0005883a 	mov	r2,zero
}
    c7ac:	e037883a 	mov	sp,fp
    c7b0:	df000017 	ldw	fp,0(sp)
    c7b4:	dec00104 	addi	sp,sp,4
    c7b8:	f800283a 	ret

0000c7bc <xcvr_setup>:

/*******************************************************************************
 * @brief xcvr_setup
 ******************************************************************************/
int32_t xcvr_setup(xcvr_core *core)
{
    c7bc:	defff904 	addi	sp,sp,-28
    c7c0:	dfc00615 	stw	ra,24(sp)
    c7c4:	df000515 	stw	fp,20(sp)
    c7c8:	df000504 	addi	fp,sp,20
    c7cc:	e13ffb15 	stw	r4,-20(fp)
	int32_t ret = 0;
    c7d0:	e03fff15 	stw	zero,-4(fp)

#ifdef ALTERA

	xcvr_write(core, XCVR_REG_RESETN, 0); // enter reset state
    c7d4:	000d883a 	mov	r6,zero
    c7d8:	01400404 	movi	r5,16
    c7dc:	e13ffb17 	ldw	r4,-20(fp)
    c7e0:	000c7740 	call	c774 <xcvr_write>
	// link_pll_reconfig => ATX PLL
	// phy_reconfig
	//core->lanes_per_link = 4;
   /////////////////////////////////////////////////////////////////////

	uint32_t link_clock=0;
    c7e4:	e03ffe15 	stw	zero,-8(fp)
	uint64_t lane_rate=0;
    c7e8:	e03ffc15 	stw	zero,-16(fp)
    c7ec:	e03ffd15 	stw	zero,-12(fp)

	link_clock = (uint32_t)(core->lane_rate_kbps / 40);
    c7f0:	e0bffb17 	ldw	r2,-20(fp)
    c7f4:	10800317 	ldw	r2,12(r2)
    c7f8:	01400a04 	movi	r5,40
    c7fc:	1009883a 	mov	r4,r2
    c800:	0012a540 	call	12a54 <__udivsi3>
    c804:	e0bffe15 	stw	r2,-8(fp)

	link_clock = fpll_round_rate(link_clock, core->ref_clock_khz);
    c808:	e0bffb17 	ldw	r2,-20(fp)
    c80c:	10800517 	ldw	r2,20(r2)
    c810:	100b883a 	mov	r5,r2
    c814:	e13ffe17 	ldw	r4,-8(fp)
    c818:	000e6180 	call	e618 <fpll_round_rate>
    c81c:	e0bffe15 	stw	r2,-8(fp)
	ret |= fpll_set_rate(&(core->dev.link_pll), link_clock, core->ref_clock_khz);
    c820:	e0bffb17 	ldw	r2,-20(fp)
    c824:	10c00804 	addi	r3,r2,32
    c828:	e0bffb17 	ldw	r2,-20(fp)
    c82c:	10800517 	ldw	r2,20(r2)
    c830:	100d883a 	mov	r6,r2
    c834:	e17ffe17 	ldw	r5,-8(fp)
    c838:	1809883a 	mov	r4,r3
    c83c:	000e7440 	call	e744 <fpll_set_rate>
    c840:	1007883a 	mov	r3,r2
    c844:	e0bfff17 	ldw	r2,-4(fp)
    c848:	10c4b03a 	or	r2,r2,r3
    c84c:	e0bfff15 	stw	r2,-4(fp)

	core->link_clk_khz = link_clock;
    c850:	e0bffb17 	ldw	r2,-20(fp)
    c854:	e0fffe17 	ldw	r3,-8(fp)
    c858:	10c00615 	stw	r3,24(r2)

	// R. Gisko - added negation
	if (core->rx_tx_n) {
    c85c:	e0bffb17 	ldw	r2,-20(fp)
    c860:	10800043 	ldbu	r2,1(r2)
    c864:	10803fcc 	andi	r2,r2,255
    c868:	10001526 	beq	r2,zero,c8c0 <xcvr_setup+0x104>
		lane_rate = altera_a10_cdr_pll_round_rate(core->lane_rate_kbps, core->ref_clock_khz);
    c86c:	e0bffb17 	ldw	r2,-20(fp)
    c870:	10c00317 	ldw	r3,12(r2)
    c874:	e0bffb17 	ldw	r2,-20(fp)
    c878:	10800517 	ldw	r2,20(r2)
    c87c:	100b883a 	mov	r5,r2
    c880:	1809883a 	mov	r4,r3
    c884:	000f5040 	call	f504 <altera_a10_cdr_pll_round_rate>
    c888:	e0bffc15 	stw	r2,-16(fp)
    c88c:	e03ffd15 	stw	zero,-12(fp)
		ret |= altera_a10_cdr_pll_set_rate(core, lane_rate, core->ref_clock_khz);
    c890:	e0fffc17 	ldw	r3,-16(fp)
    c894:	e0bffb17 	ldw	r2,-20(fp)
    c898:	10800517 	ldw	r2,20(r2)
    c89c:	100d883a 	mov	r6,r2
    c8a0:	180b883a 	mov	r5,r3
    c8a4:	e13ffb17 	ldw	r4,-20(fp)
    c8a8:	000f6540 	call	f654 <altera_a10_cdr_pll_set_rate>
    c8ac:	1007883a 	mov	r3,r2
    c8b0:	e0bfff17 	ldw	r2,-4(fp)
    c8b4:	10c4b03a 	or	r2,r2,r3
    c8b8:	e0bfff15 	stw	r2,-4(fp)
    c8bc:	00001606 	br	c918 <xcvr_setup+0x15c>
	} else {
		lane_rate = atx_pll_round_rate(core->lane_rate_kbps, core->ref_clock_khz);
    c8c0:	e0bffb17 	ldw	r2,-20(fp)
    c8c4:	10c00317 	ldw	r3,12(r2)
    c8c8:	e0bffb17 	ldw	r2,-20(fp)
    c8cc:	10800517 	ldw	r2,20(r2)
    c8d0:	100b883a 	mov	r5,r2
    c8d4:	1809883a 	mov	r4,r3
    c8d8:	000d6b40 	call	d6b4 <atx_pll_round_rate>
    c8dc:	e0bffc15 	stw	r2,-16(fp)
    c8e0:	e03ffd15 	stw	zero,-12(fp)
		ret |= atx_pll_set_rate(core, lane_rate, core->ref_clock_khz);
    c8e4:	e0fffc17 	ldw	r3,-16(fp)
    c8e8:	e0bffb17 	ldw	r2,-20(fp)
    c8ec:	10800517 	ldw	r2,20(r2)
    c8f0:	100d883a 	mov	r6,r2
    c8f4:	180b883a 	mov	r5,r3
    c8f8:	e13ffb17 	ldw	r4,-20(fp)
    c8fc:	000d7ec0 	call	d7ec <atx_pll_set_rate>
    c900:	1007883a 	mov	r3,r2
    c904:	e0bfff17 	ldw	r2,-4(fp)
    c908:	1884b03a 	or	r2,r3,r2
    c90c:	e0bfff15 	stw	r2,-4(fp)
		altera_a10_calib_tx_pll(core);
    c910:	e13ffb17 	ldw	r4,-20(fp)
    c914:	000fb940 	call	fb94 <altera_a10_calib_tx_pll>
	}

	xcvr_finalize_lane_rate_change(core); // bring out of reset - print  status
    c918:	e13ffb17 	ldw	r4,-20(fp)
    c91c:	000ceac0 	call	ceac <xcvr_finalize_lane_rate_change>
		printf("%s ERROR: XCVR initialization failed!\n", __func__);
		return(-1);
	}
#endif

	return(0);
    c920:	0005883a 	mov	r2,zero
}
    c924:	e037883a 	mov	sp,fp
    c928:	dfc00117 	ldw	ra,4(sp)
    c92c:	df000017 	ldw	fp,0(sp)
    c930:	dec00204 	addi	sp,sp,8
    c934:	f800283a 	ret

0000c938 <xcvr_getconfig>:

/*******************************************************************************
 * @brief xcvr_getconfig
 ******************************************************************************/
int32_t xcvr_getconfig(xcvr_core *core)
{
    c938:	defffb04 	addi	sp,sp,-20
    c93c:	dfc00415 	stw	ra,16(sp)
    c940:	df000315 	stw	fp,12(sp)
    c944:	df000304 	addi	fp,sp,12
    c948:	e13ffd15 	stw	r4,-12(fp)
	uint32_t regbuf;

	xcvr_read(core, XCVR_REG_SYNTH, &regbuf);
    c94c:	e0bffe04 	addi	r2,fp,-8
    c950:	100d883a 	mov	r6,r2
    c954:	01400904 	movi	r5,36
    c958:	e13ffd17 	ldw	r4,-12(fp)
    c95c:	000c7280 	call	c728 <xcvr_read>
	core->num_lanes = (regbuf & XCVR_NUM_OF_LANES_MASK) >> XCVR_NUM_OF_LANES_OFFSET;
    c960:	e0bffe17 	ldw	r2,-8(fp)
    c964:	1007883a 	mov	r3,r2
    c968:	e0bffd17 	ldw	r2,-12(fp)
    c96c:	10c00005 	stb	r3,0(r2)
	core->rx_tx_n = ((regbuf & XCVR_TX_OR_RXN_MASK) >> XCVR_TX_OR_RXN_OFFSET);
    c970:	e0bffe17 	ldw	r2,-8(fp)
    c974:	1004d23a 	srli	r2,r2,8
    c978:	1080004c 	andi	r2,r2,1
    c97c:	1007883a 	mov	r3,r2
    c980:	e0bffd17 	ldw	r2,-12(fp)
    c984:	10c00045 	stb	r3,1(r2)

	// R. Gisko
	core->lanes_per_link = core->num_lanes;
    c988:	e0bffd17 	ldw	r2,-12(fp)
    c98c:	10c00003 	ldbu	r3,0(r2)
    c990:	e0bffd17 	ldw	r2,-12(fp)
    c994:	10c00445 	stb	r3,17(r2)
#endif

#ifdef ALTERA
	//core->refclk_ppm = PM_1000;

	core->dev.link_pll.type = fpll_type;
    c998:	e0bffd17 	ldw	r2,-12(fp)
    c99c:	00c00044 	movi	r3,1
    c9a0:	10c00815 	stw	r3,32(r2)
	core->dev.atx_pll.type = atx_type;
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
    c9a8:	10000b15 	stw	zero,44(r2)

	for (int i=1; i < core->lanes_per_link; i++) {
    c9ac:	00800044 	movi	r2,1
    c9b0:	e0bfff15 	stw	r2,-4(fp)
    c9b4:	00001106 	br	c9fc <xcvr_getconfig+0xc4>
		core->dev.channel_pll[i].type = core->dev.channel_pll[0].type;
    c9b8:	e0bffd17 	ldw	r2,-12(fp)
    c9bc:	10c00e17 	ldw	r3,56(r2)
    c9c0:	e13ffd17 	ldw	r4,-12(fp)
    c9c4:	e0bfff17 	ldw	r2,-4(fp)
    c9c8:	10800324 	muli	r2,r2,12
    c9cc:	2085883a 	add	r2,r4,r2
    c9d0:	10c00e15 	stw	r3,56(r2)
		//core->dev.channel_pll[i].base_address = core->dev.channel_pll[0].base_address + 0x1000 * i;
		core->dev.channel_pll[i].initial_recalc = core->dev.channel_pll[0].initial_recalc;
    c9d4:	e0bffd17 	ldw	r2,-12(fp)
    c9d8:	10c01003 	ldbu	r3,64(r2)
    c9dc:	e13ffd17 	ldw	r4,-12(fp)
    c9e0:	e0bfff17 	ldw	r2,-4(fp)
    c9e4:	10800324 	muli	r2,r2,12
    c9e8:	2085883a 	add	r2,r4,r2
    c9ec:	10c01005 	stb	r3,64(r2)
	for (int i=1; i < core->lanes_per_link; i++) {
    c9f0:	e0bfff17 	ldw	r2,-4(fp)
    c9f4:	10800044 	addi	r2,r2,1
    c9f8:	e0bfff15 	stw	r2,-4(fp)
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	10800443 	ldbu	r2,17(r2)
    ca04:	10803fcc 	andi	r2,r2,255
    ca08:	e0ffff17 	ldw	r3,-4(fp)
    ca0c:	18bfea16 	blt	r3,r2,c9b8 <__alt_mem_mcu_subsystem_ram_0+0x77fec9b8>
	}

#endif

	return 0;
    ca10:	0005883a 	mov	r2,zero
}
    ca14:	e037883a 	mov	sp,fp
    ca18:	dfc00117 	ldw	ra,4(sp)
    ca1c:	df000017 	ldw	fp,0(sp)
    ca20:	dec00204 	addi	sp,sp,8
    ca24:	f800283a 	ret

0000ca28 <xcvr_reset>:

/*******************************************************************************
 * @brief xcvr_reset
 ******************************************************************************/
int32_t xcvr_reset(xcvr_core *core)
{
    ca28:	defffb04 	addi	sp,sp,-20
    ca2c:	dfc00415 	stw	ra,16(sp)
    ca30:	df000315 	stw	fp,12(sp)
    ca34:	df000304 	addi	fp,sp,12
    ca38:	e13ffd15 	stw	r4,-12(fp)
	uint32_t status;
	int32_t timeout;

	xcvr_write(core, XCVR_REG_RESETN, 0);
    ca3c:	000d883a 	mov	r6,zero
    ca40:	01400404 	movi	r5,16
    ca44:	e13ffd17 	ldw	r4,-12(fp)
    ca48:	000c7740 	call	c774 <xcvr_write>

	xcvr_write(core, XCVR_REG_RESETN, XCVR_RESETN);
    ca4c:	01800044 	movi	r6,1
    ca50:	01400404 	movi	r5,16
    ca54:	e13ffd17 	ldw	r4,-12(fp)
    ca58:	000c7740 	call	c774 <xcvr_write>

	timeout = 100;
    ca5c:	00801904 	movi	r2,100
    ca60:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
    ca64:	00000d06 	br	ca9c <xcvr_reset+0x74>
		mdelay(1);
    ca68:	0100fa04 	movi	r4,1000
    ca6c:	0025e400 	call	25e40 <usleep>
		timeout = timeout - 1;
    ca70:	e0bfff17 	ldw	r2,-4(fp)
    ca74:	10bfffc4 	addi	r2,r2,-1
    ca78:	e0bfff15 	stw	r2,-4(fp)
		xcvr_read(core, XCVR_REG_STATUS, &status);
    ca7c:	e0bffe04 	addi	r2,fp,-8
    ca80:	100d883a 	mov	r6,r2
    ca84:	01400504 	movi	r5,20
    ca88:	e13ffd17 	ldw	r4,-12(fp)
    ca8c:	000c7280 	call	c728 <xcvr_read>
		if (status == 1)
    ca90:	e0bffe17 	ldw	r2,-8(fp)
    ca94:	10800058 	cmpnei	r2,r2,1
    ca98:	10000326 	beq	r2,zero,caa8 <xcvr_reset+0x80>
	while (timeout > 0) {
    ca9c:	e0bfff17 	ldw	r2,-4(fp)
    caa0:	00bff116 	blt	zero,r2,ca68 <__alt_mem_mcu_subsystem_ram_0+0x77feca68>
    caa4:	00000106 	br	caac <xcvr_reset+0x84>
			break;
    caa8:	0001883a 	nop
	}

	if (status == 0) {
    caac:	e0bffe17 	ldw	r2,-8(fp)
    cab0:	1000071e 	bne	r2,zero,cad0 <xcvr_reset+0xa8>
		printf("%s ERROR: XCVR initialization failed!\n", __func__);
    cab4:	014000f4 	movhi	r5,3
    cab8:	294c1e04 	addi	r5,r5,12408
    cabc:	010000f4 	movhi	r4,3
    cac0:	210b8b04 	addi	r4,r4,11820
    cac4:	001634c0 	call	1634c <printf>
		return(-1);
    cac8:	00bfffc4 	movi	r2,-1
    cacc:	00000106 	br	cad4 <xcvr_reset+0xac>
	}

	return(0);
    cad0:	0005883a 	mov	r2,zero
}
    cad4:	e037883a 	mov	sp,fp
    cad8:	dfc00117 	ldw	ra,4(sp)
    cadc:	df000017 	ldw	fp,0(sp)
    cae0:	dec00204 	addi	sp,sp,8
    cae4:	f800283a 	ret

0000cae8 <dump_registers>:
#ifdef ALTERA



void dump_registers(xcvr_core *core)
{
    cae8:	defffc04 	addi	sp,sp,-16
    caec:	dfc00315 	stw	ra,12(sp)
    caf0:	df000215 	stw	fp,8(sp)
    caf4:	df000204 	addi	fp,sp,8
    caf8:	e13ffe15 	stw	r4,-8(fp)
   uint32_t value;
   xcvr_read(core, 0x0000, &value);
    cafc:	e0bfff04 	addi	r2,fp,-4
    cb00:	100d883a 	mov	r6,r2
    cb04:	000b883a 	mov	r5,zero
    cb08:	e13ffe17 	ldw	r4,-8(fp)
    cb0c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0000 => 0x%x\n", value);
    cb10:	e0bfff17 	ldw	r2,-4(fp)
    cb14:	100b883a 	mov	r5,r2
    cb18:	010000f4 	movhi	r4,3
    cb1c:	210b9504 	addi	r4,r4,11860
    cb20:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0004, &value);
    cb24:	e0bfff04 	addi	r2,fp,-4
    cb28:	100d883a 	mov	r6,r2
    cb2c:	01400104 	movi	r5,4
    cb30:	e13ffe17 	ldw	r4,-8(fp)
    cb34:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0004 => 0x%x\n", value);
    cb38:	e0bfff17 	ldw	r2,-4(fp)
    cb3c:	100b883a 	mov	r5,r2
    cb40:	010000f4 	movhi	r4,3
    cb44:	210b9a04 	addi	r4,r4,11880
    cb48:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0008, &value);
    cb4c:	e0bfff04 	addi	r2,fp,-4
    cb50:	100d883a 	mov	r6,r2
    cb54:	01400204 	movi	r5,8
    cb58:	e13ffe17 	ldw	r4,-8(fp)
    cb5c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0008 => 0x%x\n", value);
    cb60:	e0bfff17 	ldw	r2,-4(fp)
    cb64:	100b883a 	mov	r5,r2
    cb68:	010000f4 	movhi	r4,3
    cb6c:	210b9f04 	addi	r4,r4,11900
    cb70:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0010, &value);
    cb74:	e0bfff04 	addi	r2,fp,-4
    cb78:	100d883a 	mov	r6,r2
    cb7c:	01400404 	movi	r5,16
    cb80:	e13ffe17 	ldw	r4,-8(fp)
    cb84:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0010 => 0x%x\n", value);
    cb88:	e0bfff17 	ldw	r2,-4(fp)
    cb8c:	100b883a 	mov	r5,r2
    cb90:	010000f4 	movhi	r4,3
    cb94:	210ba404 	addi	r4,r4,11920
    cb98:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0014, &value);
    cb9c:	e0bfff04 	addi	r2,fp,-4
    cba0:	100d883a 	mov	r6,r2
    cba4:	01400504 	movi	r5,20
    cba8:	e13ffe17 	ldw	r4,-8(fp)
    cbac:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0014 => 0x%x\n", value);
    cbb0:	e0bfff17 	ldw	r2,-4(fp)
    cbb4:	100b883a 	mov	r5,r2
    cbb8:	010000f4 	movhi	r4,3
    cbbc:	210ba904 	addi	r4,r4,11940
    cbc0:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0020, &value);
    cbc4:	e0bfff04 	addi	r2,fp,-4
    cbc8:	100d883a 	mov	r6,r2
    cbcc:	01400804 	movi	r5,32
    cbd0:	e13ffe17 	ldw	r4,-8(fp)
    cbd4:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0020 => 0x%x\n", value);
    cbd8:	e0bfff17 	ldw	r2,-4(fp)
    cbdc:	100b883a 	mov	r5,r2
    cbe0:	010000f4 	movhi	r4,3
    cbe4:	210bae04 	addi	r4,r4,11960
    cbe8:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0040, &value);
    cbec:	e0bfff04 	addi	r2,fp,-4
    cbf0:	100d883a 	mov	r6,r2
    cbf4:	01401004 	movi	r5,64
    cbf8:	e13ffe17 	ldw	r4,-8(fp)
    cbfc:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0040 => 0x%x\n", value);
    cc00:	e0bfff17 	ldw	r2,-4(fp)
    cc04:	100b883a 	mov	r5,r2
    cc08:	010000f4 	movhi	r4,3
    cc0c:	210bb304 	addi	r4,r4,11980
    cc10:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0044, &value);
    cc14:	e0bfff04 	addi	r2,fp,-4
    cc18:	100d883a 	mov	r6,r2
    cc1c:	01401104 	movi	r5,68
    cc20:	e13ffe17 	ldw	r4,-8(fp)
    cc24:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0044 => 0x%x\n", value);
    cc28:	e0bfff17 	ldw	r2,-4(fp)
    cc2c:	100b883a 	mov	r5,r2
    cc30:	010000f4 	movhi	r4,3
    cc34:	210bb804 	addi	r4,r4,12000
    cc38:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0048, &value);
    cc3c:	e0bfff04 	addi	r2,fp,-4
    cc40:	100d883a 	mov	r6,r2
    cc44:	01401204 	movi	r5,72
    cc48:	e13ffe17 	ldw	r4,-8(fp)
    cc4c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0048 => 0x%x\n", value);
    cc50:	e0bfff17 	ldw	r2,-4(fp)
    cc54:	100b883a 	mov	r5,r2
    cc58:	010000f4 	movhi	r4,3
    cc5c:	210bbd04 	addi	r4,r4,12020
    cc60:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0060, &value);
    cc64:	e0bfff04 	addi	r2,fp,-4
    cc68:	100d883a 	mov	r6,r2
    cc6c:	01401804 	movi	r5,96
    cc70:	e13ffe17 	ldw	r4,-8(fp)
    cc74:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0060 => 0x%x\n", value);
    cc78:	e0bfff17 	ldw	r2,-4(fp)
    cc7c:	100b883a 	mov	r5,r2
    cc80:	010000f4 	movhi	r4,3
    cc84:	210bc204 	addi	r4,r4,12040
    cc88:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0064, &value);
    cc8c:	e0bfff04 	addi	r2,fp,-4
    cc90:	100d883a 	mov	r6,r2
    cc94:	01401904 	movi	r5,100
    cc98:	e13ffe17 	ldw	r4,-8(fp)
    cc9c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0064 => 0x%x\n", value);
    cca0:	e0bfff17 	ldw	r2,-4(fp)
    cca4:	100b883a 	mov	r5,r2
    cca8:	010000f4 	movhi	r4,3
    ccac:	210bc704 	addi	r4,r4,12060
    ccb0:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0068, &value);
    ccb4:	e0bfff04 	addi	r2,fp,-4
    ccb8:	100d883a 	mov	r6,r2
    ccbc:	01401a04 	movi	r5,104
    ccc0:	e13ffe17 	ldw	r4,-8(fp)
    ccc4:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0068 => 0x%x\n", value);
    ccc8:	e0bfff17 	ldw	r2,-4(fp)
    cccc:	100b883a 	mov	r5,r2
    ccd0:	010000f4 	movhi	r4,3
    ccd4:	210bcc04 	addi	r4,r4,12080
    ccd8:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x0080, &value);
    ccdc:	e0bfff04 	addi	r2,fp,-4
    cce0:	100d883a 	mov	r6,r2
    cce4:	01402004 	movi	r5,128
    cce8:	e13ffe17 	ldw	r4,-8(fp)
    ccec:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x0080 => 0x%x\n", value);
    ccf0:	e0bfff17 	ldw	r2,-4(fp)
    ccf4:	100b883a 	mov	r5,r2
    ccf8:	010000f4 	movhi	r4,3
    ccfc:	210bd104 	addi	r4,r4,12100
    cd00:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00a0, &value);
    cd04:	e0bfff04 	addi	r2,fp,-4
    cd08:	100d883a 	mov	r6,r2
    cd0c:	01402804 	movi	r5,160
    cd10:	e13ffe17 	ldw	r4,-8(fp)
    cd14:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00a0 => 0x%x\n", value);
    cd18:	e0bfff17 	ldw	r2,-4(fp)
    cd1c:	100b883a 	mov	r5,r2
    cd20:	010000f4 	movhi	r4,3
    cd24:	210bd604 	addi	r4,r4,12120
    cd28:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00a4, &value);
    cd2c:	e0bfff04 	addi	r2,fp,-4
    cd30:	100d883a 	mov	r6,r2
    cd34:	01402904 	movi	r5,164
    cd38:	e13ffe17 	ldw	r4,-8(fp)
    cd3c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00a4 => 0x%x\n", value);
    cd40:	e0bfff17 	ldw	r2,-4(fp)
    cd44:	100b883a 	mov	r5,r2
    cd48:	010000f4 	movhi	r4,3
    cd4c:	210bdb04 	addi	r4,r4,12140
    cd50:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00a8, &value);
    cd54:	e0bfff04 	addi	r2,fp,-4
    cd58:	100d883a 	mov	r6,r2
    cd5c:	01402a04 	movi	r5,168
    cd60:	e13ffe17 	ldw	r4,-8(fp)
    cd64:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00a8 => 0x%x\n", value);
    cd68:	e0bfff17 	ldw	r2,-4(fp)
    cd6c:	100b883a 	mov	r5,r2
    cd70:	010000f4 	movhi	r4,3
    cd74:	210be004 	addi	r4,r4,12160
    cd78:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00ac, &value);
    cd7c:	e0bfff04 	addi	r2,fp,-4
    cd80:	100d883a 	mov	r6,r2
    cd84:	01402b04 	movi	r5,172
    cd88:	e13ffe17 	ldw	r4,-8(fp)
    cd8c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00ac => 0x%x\n", value);
    cd90:	e0bfff17 	ldw	r2,-4(fp)
    cd94:	100b883a 	mov	r5,r2
    cd98:	010000f4 	movhi	r4,3
    cd9c:	210be504 	addi	r4,r4,12180
    cda0:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00b0, &value);
    cda4:	e0bfff04 	addi	r2,fp,-4
    cda8:	100d883a 	mov	r6,r2
    cdac:	01402c04 	movi	r5,176
    cdb0:	e13ffe17 	ldw	r4,-8(fp)
    cdb4:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00b0 => 0x%x\n", value);
    cdb8:	e0bfff17 	ldw	r2,-4(fp)
    cdbc:	100b883a 	mov	r5,r2
    cdc0:	010000f4 	movhi	r4,3
    cdc4:	210bea04 	addi	r4,r4,12200
    cdc8:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00b4, &value);
    cdcc:	e0bfff04 	addi	r2,fp,-4
    cdd0:	100d883a 	mov	r6,r2
    cdd4:	01402d04 	movi	r5,180
    cdd8:	e13ffe17 	ldw	r4,-8(fp)
    cddc:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00b4 => 0x%x\n", value);
    cde0:	e0bfff17 	ldw	r2,-4(fp)
    cde4:	100b883a 	mov	r5,r2
    cde8:	010000f4 	movhi	r4,3
    cdec:	210bef04 	addi	r4,r4,12220
    cdf0:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00b8, &value);
    cdf4:	e0bfff04 	addi	r2,fp,-4
    cdf8:	100d883a 	mov	r6,r2
    cdfc:	01402e04 	movi	r5,184
    ce00:	e13ffe17 	ldw	r4,-8(fp)
    ce04:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00b8 => 0x%x\n", value);
    ce08:	e0bfff17 	ldw	r2,-4(fp)
    ce0c:	100b883a 	mov	r5,r2
    ce10:	010000f4 	movhi	r4,3
    ce14:	210bf404 	addi	r4,r4,12240
    ce18:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00c0, &value);
    ce1c:	e0bfff04 	addi	r2,fp,-4
    ce20:	100d883a 	mov	r6,r2
    ce24:	01403004 	movi	r5,192
    ce28:	e13ffe17 	ldw	r4,-8(fp)
    ce2c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00c0 => 0x%x\n", value);
    ce30:	e0bfff17 	ldw	r2,-4(fp)
    ce34:	100b883a 	mov	r5,r2
    ce38:	010000f4 	movhi	r4,3
    ce3c:	210bf904 	addi	r4,r4,12260
    ce40:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00c4, &value);
    ce44:	e0bfff04 	addi	r2,fp,-4
    ce48:	100d883a 	mov	r6,r2
    ce4c:	01403104 	movi	r5,196
    ce50:	e13ffe17 	ldw	r4,-8(fp)
    ce54:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00c4 => 0x%x\n", value);
    ce58:	e0bfff17 	ldw	r2,-4(fp)
    ce5c:	100b883a 	mov	r5,r2
    ce60:	010000f4 	movhi	r4,3
    ce64:	210bfe04 	addi	r4,r4,12280
    ce68:	001634c0 	call	1634c <printf>
   xcvr_read(core, 0x00c8, &value);
    ce6c:	e0bfff04 	addi	r2,fp,-4
    ce70:	100d883a 	mov	r6,r2
    ce74:	01403204 	movi	r5,200
    ce78:	e13ffe17 	ldw	r4,-8(fp)
    ce7c:	000c7280 	call	c728 <xcvr_read>
   printf("reg 0x00c8 => 0x%x\n", value);
    ce80:	e0bfff17 	ldw	r2,-4(fp)
    ce84:	100b883a 	mov	r5,r2
    ce88:	010000f4 	movhi	r4,3
    ce8c:	210c0304 	addi	r4,r4,12300
    ce90:	001634c0 	call	1634c <printf>
}
    ce94:	0001883a 	nop
    ce98:	e037883a 	mov	sp,fp
    ce9c:	dfc00117 	ldw	ra,4(sp)
    cea0:	df000017 	ldw	fp,0(sp)
    cea4:	dec00204 	addi	sp,sp,8
    cea8:	f800283a 	ret

0000ceac <xcvr_finalize_lane_rate_change>:

/*******************************************************************************
 * @brief xcvr_finalize_lane_rate_change
 ******************************************************************************/
void xcvr_finalize_lane_rate_change(xcvr_core *core)
{
    ceac:	defffa04 	addi	sp,sp,-24
    ceb0:	dfc00515 	stw	ra,20(sp)
    ceb4:	df000415 	stw	fp,16(sp)
    ceb8:	df000404 	addi	fp,sp,16
    cebc:	e13ffc15 	stw	r4,-16(fp)
	uint32_t status;
	int timeout = 1000;
    cec0:	0080fa04 	movi	r2,1000
    cec4:	e0bfff15 	stw	r2,-4(fp)
	uint32_t i;

	mdelay(10);
    cec8:	0109c404 	movi	r4,10000
    cecc:	0025e400 	call	25e40 <usleep>

	xcvr_write(core, XCVR_REG_RESETN, 1);
    ced0:	01800044 	movi	r6,1
    ced4:	01400404 	movi	r5,16
    ced8:	e13ffc17 	ldw	r4,-16(fp)
    cedc:	000c7740 	call	c774 <xcvr_write>
	mdelay(10);
    cee0:	0109c404 	movi	r4,10000
    cee4:	0025e400 	call	25e40 <usleep>

	do {
		xcvr_read(core, XCVR_REG_STATUS, &status);
    cee8:	e0bffd04 	addi	r2,fp,-12
    ceec:	100d883a 	mov	r6,r2
    cef0:	01400504 	movi	r5,20
    cef4:	e13ffc17 	ldw	r4,-16(fp)
    cef8:	000c7280 	call	c728 <xcvr_read>
		if (status == XCVR_STATUS)
    cefc:	e0bffd17 	ldw	r2,-12(fp)
    cf00:	10800058 	cmpnei	r2,r2,1
    cf04:	10000726 	beq	r2,zero,cf24 <xcvr_finalize_lane_rate_change+0x78>
			break;
		mdelay(1);
    cf08:	0100fa04 	movi	r4,1000
    cf0c:	0025e400 	call	25e40 <usleep>
	} while (timeout--);
    cf10:	e0bfff17 	ldw	r2,-4(fp)
    cf14:	10ffffc4 	addi	r3,r2,-1
    cf18:	e0ffff15 	stw	r3,-4(fp)
    cf1c:	103ff21e 	bne	r2,zero,cee8 <__alt_mem_mcu_subsystem_ram_0+0x77fecee8>
    cf20:	00000106 	br	cf28 <xcvr_finalize_lane_rate_change+0x7c>
			break;
    cf24:	0001883a 	nop

	if (timeout < 0) {
    cf28:	e0bfff17 	ldw	r2,-4(fp)
    cf2c:	1000350e 	bge	r2,zero,d004 <xcvr_finalize_lane_rate_change+0x158>
		xcvr_read(core, XCVR_REG_STATUS2, &status);
    cf30:	e0bffd04 	addi	r2,fp,-12
    cf34:	100d883a 	mov	r6,r2
    cf38:	01400604 	movi	r5,24
    cf3c:	e13ffc17 	ldw	r4,-16(fp)
    cf40:	000c7280 	call	c728 <xcvr_read>
		printf("Link activation error:\n");
    cf44:	010000f4 	movhi	r4,3
    cf48:	210c0804 	addi	r4,r4,12320
    cf4c:	00164700 	call	16470 <puts>
		printf( "\tLink PLL %s locked\n", ((status & XCVR_STATUS2_XCVR(core->lanes_per_link)) ? "" : "not"));
    cf50:	e0bffc17 	ldw	r2,-16(fp)
    cf54:	10800443 	ldbu	r2,17(r2)
    cf58:	10803fcc 	andi	r2,r2,255
    cf5c:	00c00044 	movi	r3,1
    cf60:	1884983a 	sll	r2,r3,r2
    cf64:	1007883a 	mov	r3,r2
    cf68:	e0bffd17 	ldw	r2,-12(fp)
    cf6c:	1884703a 	and	r2,r3,r2
    cf70:	10000326 	beq	r2,zero,cf80 <xcvr_finalize_lane_rate_change+0xd4>
    cf74:	008000f4 	movhi	r2,3
    cf78:	108c0e04 	addi	r2,r2,12344
    cf7c:	00000206 	br	cf88 <xcvr_finalize_lane_rate_change+0xdc>
    cf80:	008000f4 	movhi	r2,3
    cf84:	108c0f04 	addi	r2,r2,12348
    cf88:	100b883a 	mov	r5,r2
    cf8c:	010000f4 	movhi	r4,3
    cf90:	210c1004 	addi	r4,r4,12352
    cf94:	001634c0 	call	1634c <printf>
		for (i = 0; i < core->lanes_per_link; i++) {
    cf98:	e03ffe15 	stw	zero,-8(fp)
    cf9c:	00001406 	br	cff0 <xcvr_finalize_lane_rate_change+0x144>
			printf("\tLane %d transceiver %s ready\n", i, \
			       ((status & XCVR_STATUS2_XCVR(i)) ?"" : "not"));
    cfa0:	00c00044 	movi	r3,1
    cfa4:	e0bffe17 	ldw	r2,-8(fp)
    cfa8:	1884983a 	sll	r2,r3,r2
    cfac:	1007883a 	mov	r3,r2
    cfb0:	e0bffd17 	ldw	r2,-12(fp)
    cfb4:	1884703a 	and	r2,r3,r2
			printf("\tLane %d transceiver %s ready\n", i, \
    cfb8:	10000326 	beq	r2,zero,cfc8 <xcvr_finalize_lane_rate_change+0x11c>
    cfbc:	008000f4 	movhi	r2,3
    cfc0:	108c0e04 	addi	r2,r2,12344
    cfc4:	00000206 	br	cfd0 <xcvr_finalize_lane_rate_change+0x124>
    cfc8:	008000f4 	movhi	r2,3
    cfcc:	108c0f04 	addi	r2,r2,12348
    cfd0:	100d883a 	mov	r6,r2
    cfd4:	e17ffe17 	ldw	r5,-8(fp)
    cfd8:	010000f4 	movhi	r4,3
    cfdc:	210c1604 	addi	r4,r4,12376
    cfe0:	001634c0 	call	1634c <printf>
		for (i = 0; i < core->lanes_per_link; i++) {
    cfe4:	e0bffe17 	ldw	r2,-8(fp)
    cfe8:	10800044 	addi	r2,r2,1
    cfec:	e0bffe15 	stw	r2,-8(fp)
    cff0:	e0bffc17 	ldw	r2,-16(fp)
    cff4:	10800443 	ldbu	r2,17(r2)
    cff8:	10803fcc 	andi	r2,r2,255
    cffc:	e0fffe17 	ldw	r3,-8(fp)
    d000:	18bfe736 	bltu	r3,r2,cfa0 <__alt_mem_mcu_subsystem_ram_0+0x77fecfa0>
		}

	}
}
    d004:	0001883a 	nop
    d008:	e037883a 	mov	sp,fp
    d00c:	dfc00117 	ldw	ra,4(sp)
    d010:	df000017 	ldw	fp,0(sp)
    d014:	dec00204 	addi	sp,sp,8
    d018:	f800283a 	ret

0000d01c <atx_lookup_band>:

/*******************************************************************************
* @brief atx_lookup_band
*******************************************************************************/
uint32_t atx_lookup_band(uint32_t fvco)
{
    d01c:	defffd04 	addi	sp,sp,-12
    d020:	df000215 	stw	fp,8(sp)
    d024:	df000204 	addi	fp,sp,8
    d028:	e13ffe15 	stw	r4,-8(fp)
	uint32_t i;
	for (i = 0; i < ARRAY_SIZE(atx_bands); i++) {
    d02c:	e03fff15 	stw	zero,-4(fp)
    d030:	00001506 	br	d088 <atx_lookup_band+0x6c>
		if (fvco > atx_bands[i]) {
    d034:	e0bfff17 	ldw	r2,-4(fp)
    d038:	100690ba 	slli	r3,r2,2
    d03c:	008000f4 	movhi	r2,3
    d040:	1885883a 	add	r2,r3,r2
    d044:	10cc2117 	ldw	r3,12420(r2)
    d048:	e0bffe17 	ldw	r2,-8(fp)
    d04c:	18800b2e 	bgeu	r3,r2,d07c <atx_lookup_band+0x60>
			i = i % 8;
    d050:	e0bfff17 	ldw	r2,-4(fp)
    d054:	108001cc 	andi	r2,r2,7
    d058:	e0bfff15 	stw	r2,-4(fp)
			if (i != 7)
    d05c:	e0bfff17 	ldw	r2,-4(fp)
    d060:	108001e0 	cmpeqi	r2,r2,7
    d064:	1000031e 	bne	r2,zero,d074 <atx_lookup_band+0x58>
				i++;
    d068:	e0bfff17 	ldw	r2,-4(fp)
    d06c:	10800044 	addi	r2,r2,1
    d070:	e0bfff15 	stw	r2,-4(fp)
			return i;
    d074:	e0bfff17 	ldw	r2,-4(fp)
    d078:	00000706 	br	d098 <atx_lookup_band+0x7c>
	for (i = 0; i < ARRAY_SIZE(atx_bands); i++) {
    d07c:	e0bfff17 	ldw	r2,-4(fp)
    d080:	10800044 	addi	r2,r2,1
    d084:	e0bfff15 	stw	r2,-4(fp)
    d088:	e0bfff17 	ldw	r2,-4(fp)
    d08c:	10800530 	cmpltui	r2,r2,20
    d090:	103fe81e 	bne	r2,zero,d034 <__alt_mem_mcu_subsystem_ram_0+0x77fed034>
		}
	}
	return 5;
    d094:	00800144 	movi	r2,5
}
    d098:	e037883a 	mov	sp,fp
    d09c:	df000017 	ldw	fp,0(sp)
    d0a0:	dec00104 	addi	sp,sp,4
    d0a4:	f800283a 	ret

0000d0a8 <atx_lookup_tank>:

/*******************************************************************************
* @brief atx_lookup_tank
*******************************************************************************/
uint32_t atx_lookup_tank(uint32_t fvco)
{
    d0a8:	defffe04 	addi	sp,sp,-8
    d0ac:	df000115 	stw	fp,4(sp)
    d0b0:	df000104 	addi	fp,sp,4
    d0b4:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 8800000)
    d0b8:	e0ffff17 	ldw	r3,-4(fp)
    d0bc:	008021b4 	movhi	r2,134
    d0c0:	1091bfc4 	addi	r2,r2,18175
    d0c4:	10c00236 	bltu	r2,r3,d0d0 <atx_lookup_tank+0x28>
		return 0;
    d0c8:	0005883a 	mov	r2,zero
    d0cc:	00000706 	br	d0ec <atx_lookup_tank+0x44>
	else if (fvco < 11400000)
    d0d0:	e0ffff17 	ldw	r3,-4(fp)
    d0d4:	00802bb4 	movhi	r2,174
    d0d8:	10bccfc4 	addi	r2,r2,-3265
    d0dc:	10c00236 	bltu	r2,r3,d0e8 <atx_lookup_tank+0x40>
		return 1;
    d0e0:	00800044 	movi	r2,1
    d0e4:	00000106 	br	d0ec <atx_lookup_tank+0x44>
	else
		return 2;
    d0e8:	00800084 	movi	r2,2
}
    d0ec:	e037883a 	mov	sp,fp
    d0f0:	df000017 	ldw	fp,0(sp)
    d0f4:	dec00104 	addi	sp,sp,4
    d0f8:	f800283a 	ret

0000d0fc <atx_lookup_cp_current>:

/*******************************************************************************
* @brief atx_lookup_cp_current
*******************************************************************************/
uint32_t atx_lookup_cp_current(uint32_t m)
{
    d0fc:	defffe04 	addi	sp,sp,-8
    d100:	df000115 	stw	fp,4(sp)
    d104:	df000104 	addi	fp,sp,4
    d108:	e13fff15 	stw	r4,-4(fp)
	switch (m) {
    d10c:	e0bfff17 	ldw	r2,-4(fp)
    d110:	10801968 	cmpgeui	r2,r2,101
    d114:	1000791e 	bne	r2,zero,d2fc <atx_lookup_cp_current+0x200>
    d118:	e0bfff17 	ldw	r2,-4(fp)
    d11c:	100690ba 	slli	r3,r2,2
    d120:	00800074 	movhi	r2,1
    d124:	1885883a 	add	r2,r3,r2
    d128:	10b44c17 	ldw	r2,-11984(r2)
    d12c:	1000683a 	jmp	r2
    d130:	0000d2c4 	movi	zero,843
    d134:	0000d2c4 	movi	zero,843
    d138:	0000d2c4 	movi	zero,843
    d13c:	0000d2c4 	movi	zero,843
    d140:	0000d2c4 	movi	zero,843
    d144:	0000d2c4 	movi	zero,843
    d148:	0000d2c4 	movi	zero,843
    d14c:	0000d2c4 	movi	zero,843
    d150:	0000d2c4 	movi	zero,843
    d154:	0000d2c4 	movi	zero,843
    d158:	0000d2c4 	movi	zero,843
    d15c:	0000d2c4 	movi	zero,843
    d160:	0000d2c4 	movi	zero,843
    d164:	0000d2c4 	movi	zero,843
    d168:	0000d2c4 	movi	zero,843
    d16c:	0000d2c4 	movi	zero,843
    d170:	0000d2c4 	movi	zero,843
    d174:	0000d2c4 	movi	zero,843
    d178:	0000d2c4 	movi	zero,843
    d17c:	0000d2c4 	movi	zero,843
    d180:	0000d2c4 	movi	zero,843
    d184:	0000d2cc 	andi	zero,zero,843
    d188:	0000d2cc 	andi	zero,zero,843
    d18c:	0000d2cc 	andi	zero,zero,843
    d190:	0000d2cc 	andi	zero,zero,843
    d194:	0000d2cc 	andi	zero,zero,843
    d198:	0000d2cc 	andi	zero,zero,843
    d19c:	0000d2cc 	andi	zero,zero,843
    d1a0:	0000d2cc 	andi	zero,zero,843
    d1a4:	0000d2cc 	andi	zero,zero,843
    d1a8:	0000d2cc 	andi	zero,zero,843
    d1ac:	0000d2d4 	movui	zero,843
    d1b0:	0000d2d4 	movui	zero,843
    d1b4:	0000d2d4 	movui	zero,843
    d1b8:	0000d2d4 	movui	zero,843
    d1bc:	0000d2d4 	movui	zero,843
    d1c0:	0000d2d4 	movui	zero,843
    d1c4:	0000d2d4 	movui	zero,843
    d1c8:	0000d2d4 	movui	zero,843
    d1cc:	0000d2d4 	movui	zero,843
    d1d0:	0000d2d4 	movui	zero,843
    d1d4:	0000d2dc 	xori	zero,zero,843
    d1d8:	0000d2dc 	xori	zero,zero,843
    d1dc:	0000d2dc 	xori	zero,zero,843
    d1e0:	0000d2dc 	xori	zero,zero,843
    d1e4:	0000d2dc 	xori	zero,zero,843
    d1e8:	0000d2dc 	xori	zero,zero,843
    d1ec:	0000d2dc 	xori	zero,zero,843
    d1f0:	0000d2dc 	xori	zero,zero,843
    d1f4:	0000d2dc 	xori	zero,zero,843
    d1f8:	0000d2dc 	xori	zero,zero,843
    d1fc:	0000d2dc 	xori	zero,zero,843
    d200:	0000d2dc 	xori	zero,zero,843
    d204:	0000d2dc 	xori	zero,zero,843
    d208:	0000d2dc 	xori	zero,zero,843
    d20c:	0000d2dc 	xori	zero,zero,843
    d210:	0000d2dc 	xori	zero,zero,843
    d214:	0000d2dc 	xori	zero,zero,843
    d218:	0000d2dc 	xori	zero,zero,843
    d21c:	0000d2dc 	xori	zero,zero,843
    d220:	0000d2dc 	xori	zero,zero,843
    d224:	0000d2e4 	muli	zero,zero,843
    d228:	0000d2e4 	muli	zero,zero,843
    d22c:	0000d2e4 	muli	zero,zero,843
    d230:	0000d2e4 	muli	zero,zero,843
    d234:	0000d2e4 	muli	zero,zero,843
    d238:	0000d2e4 	muli	zero,zero,843
    d23c:	0000d2e4 	muli	zero,zero,843
    d240:	0000d2e4 	muli	zero,zero,843
    d244:	0000d2e4 	muli	zero,zero,843
    d248:	0000d2e4 	muli	zero,zero,843
    d24c:	0000d2ec 	andhi	zero,zero,843
    d250:	0000d2ec 	andhi	zero,zero,843
    d254:	0000d2ec 	andhi	zero,zero,843
    d258:	0000d2ec 	andhi	zero,zero,843
    d25c:	0000d2ec 	andhi	zero,zero,843
    d260:	0000d2ec 	andhi	zero,zero,843
    d264:	0000d2ec 	andhi	zero,zero,843
    d268:	0000d2ec 	andhi	zero,zero,843
    d26c:	0000d2ec 	andhi	zero,zero,843
    d270:	0000d2ec 	andhi	zero,zero,843
    d274:	0000d2ec 	andhi	zero,zero,843
    d278:	0000d2ec 	andhi	zero,zero,843
    d27c:	0000d2ec 	andhi	zero,zero,843
    d280:	0000d2ec 	andhi	zero,zero,843
    d284:	0000d2ec 	andhi	zero,zero,843
    d288:	0000d2ec 	andhi	zero,zero,843
    d28c:	0000d2ec 	andhi	zero,zero,843
    d290:	0000d2ec 	andhi	zero,zero,843
    d294:	0000d2ec 	andhi	zero,zero,843
    d298:	0000d2ec 	andhi	zero,zero,843
    d29c:	0000d2f4 	movhi	zero,843
    d2a0:	0000d2f4 	movhi	zero,843
    d2a4:	0000d2f4 	movhi	zero,843
    d2a8:	0000d2f4 	movhi	zero,843
    d2ac:	0000d2f4 	movhi	zero,843
    d2b0:	0000d2f4 	movhi	zero,843
    d2b4:	0000d2f4 	movhi	zero,843
    d2b8:	0000d2f4 	movhi	zero,843
    d2bc:	0000d2f4 	movhi	zero,843
    d2c0:	0000d2f4 	movhi	zero,843
	case 0 ... 20:
		return 0x1a;
    d2c4:	00800684 	movi	r2,26
    d2c8:	00000d06 	br	d300 <atx_lookup_cp_current+0x204>
	case 21 ... 30:
		return 0x1c;
    d2cc:	00800704 	movi	r2,28
    d2d0:	00000b06 	br	d300 <atx_lookup_cp_current+0x204>
	case 31 ... 40:
		return 0x1d;
    d2d4:	00800744 	movi	r2,29
    d2d8:	00000906 	br	d300 <atx_lookup_cp_current+0x204>
	case 41 ... 60:
		return 0x25;
    d2dc:	00800944 	movi	r2,37
    d2e0:	00000706 	br	d300 <atx_lookup_cp_current+0x204>
	case 61 ... 70:
		return 0x26;
    d2e4:	00800984 	movi	r2,38
    d2e8:	00000506 	br	d300 <atx_lookup_cp_current+0x204>
	case 71 ... 90:
		return 0x1d;
    d2ec:	00800744 	movi	r2,29
    d2f0:	00000306 	br	d300 <atx_lookup_cp_current+0x204>
	case 91 ... 100:
		return 0x25;
    d2f4:	00800944 	movi	r2,37
    d2f8:	00000106 	br	d300 <atx_lookup_cp_current+0x204>
	default:
		return 0x26;
    d2fc:	00800984 	movi	r2,38
	}
}
    d300:	e037883a 	mov	sp,fp
    d304:	df000017 	ldw	fp,0(sp)
    d308:	dec00104 	addi	sp,sp,4
    d30c:	f800283a 	ret

0000d310 <atx_lookup_lf_resistance>:

/*******************************************************************************
* @brief atx_lookup_lf_resistance
*******************************************************************************/
uint32_t atx_lookup_lf_resistance(uint32_t m)
{
    d310:	defffe04 	addi	sp,sp,-8
    d314:	df000115 	stw	fp,4(sp)
    d318:	df000104 	addi	fp,sp,4
    d31c:	e13fff15 	stw	r4,-4(fp)
	switch (m) {
    d320:	e0bfff17 	ldw	r2,-4(fp)
    d324:	108011e8 	cmpgeui	r2,r2,71
    d328:	1000551e 	bne	r2,zero,d480 <atx_lookup_lf_resistance+0x170>
    d32c:	e0bfff17 	ldw	r2,-4(fp)
    d330:	100690ba 	slli	r3,r2,2
    d334:	00800074 	movhi	r2,1
    d338:	1885883a 	add	r2,r3,r2
    d33c:	10b4d117 	ldw	r2,-11452(r2)
    d340:	1000683a 	jmp	r2
    d344:	0000d460 	cmpeqi	zero,zero,849
    d348:	0000d460 	cmpeqi	zero,zero,849
    d34c:	0000d460 	cmpeqi	zero,zero,849
    d350:	0000d460 	cmpeqi	zero,zero,849
    d354:	0000d460 	cmpeqi	zero,zero,849
    d358:	0000d460 	cmpeqi	zero,zero,849
    d35c:	0000d460 	cmpeqi	zero,zero,849
    d360:	0000d460 	cmpeqi	zero,zero,849
    d364:	0000d460 	cmpeqi	zero,zero,849
    d368:	0000d460 	cmpeqi	zero,zero,849
    d36c:	0000d460 	cmpeqi	zero,zero,849
    d370:	0000d460 	cmpeqi	zero,zero,849
    d374:	0000d460 	cmpeqi	zero,zero,849
    d378:	0000d468 	cmpgeui	zero,zero,849
    d37c:	0000d468 	cmpgeui	zero,zero,849
    d380:	0000d468 	cmpgeui	zero,zero,849
    d384:	0000d468 	cmpgeui	zero,zero,849
    d388:	0000d468 	cmpgeui	zero,zero,849
    d38c:	0000d468 	cmpgeui	zero,zero,849
    d390:	0000d468 	cmpgeui	zero,zero,849
    d394:	0000d468 	cmpgeui	zero,zero,849
    d398:	0000d470 	cmpltui	zero,zero,849
    d39c:	0000d470 	cmpltui	zero,zero,849
    d3a0:	0000d470 	cmpltui	zero,zero,849
    d3a4:	0000d470 	cmpltui	zero,zero,849
    d3a8:	0000d470 	cmpltui	zero,zero,849
    d3ac:	0000d470 	cmpltui	zero,zero,849
    d3b0:	0000d470 	cmpltui	zero,zero,849
    d3b4:	0000d470 	cmpltui	zero,zero,849
    d3b8:	0000d470 	cmpltui	zero,zero,849
    d3bc:	0000d470 	cmpltui	zero,zero,849
    d3c0:	0000d478 	rdprs	zero,zero,849
    d3c4:	0000d478 	rdprs	zero,zero,849
    d3c8:	0000d478 	rdprs	zero,zero,849
    d3cc:	0000d478 	rdprs	zero,zero,849
    d3d0:	0000d478 	rdprs	zero,zero,849
    d3d4:	0000d478 	rdprs	zero,zero,849
    d3d8:	0000d478 	rdprs	zero,zero,849
    d3dc:	0000d478 	rdprs	zero,zero,849
    d3e0:	0000d478 	rdprs	zero,zero,849
    d3e4:	0000d478 	rdprs	zero,zero,849
    d3e8:	0000d478 	rdprs	zero,zero,849
    d3ec:	0000d478 	rdprs	zero,zero,849
    d3f0:	0000d478 	rdprs	zero,zero,849
    d3f4:	0000d478 	rdprs	zero,zero,849
    d3f8:	0000d478 	rdprs	zero,zero,849
    d3fc:	0000d478 	rdprs	zero,zero,849
    d400:	0000d478 	rdprs	zero,zero,849
    d404:	0000d478 	rdprs	zero,zero,849
    d408:	0000d478 	rdprs	zero,zero,849
    d40c:	0000d478 	rdprs	zero,zero,849
    d410:	0000d478 	rdprs	zero,zero,849
    d414:	0000d478 	rdprs	zero,zero,849
    d418:	0000d478 	rdprs	zero,zero,849
    d41c:	0000d478 	rdprs	zero,zero,849
    d420:	0000d478 	rdprs	zero,zero,849
    d424:	0000d478 	rdprs	zero,zero,849
    d428:	0000d478 	rdprs	zero,zero,849
    d42c:	0000d478 	rdprs	zero,zero,849
    d430:	0000d478 	rdprs	zero,zero,849
    d434:	0000d478 	rdprs	zero,zero,849
    d438:	0000d478 	rdprs	zero,zero,849
    d43c:	0000d478 	rdprs	zero,zero,849
    d440:	0000d478 	rdprs	zero,zero,849
    d444:	0000d478 	rdprs	zero,zero,849
    d448:	0000d478 	rdprs	zero,zero,849
    d44c:	0000d478 	rdprs	zero,zero,849
    d450:	0000d478 	rdprs	zero,zero,849
    d454:	0000d478 	rdprs	zero,zero,849
    d458:	0000d478 	rdprs	zero,zero,849
    d45c:	0000d478 	rdprs	zero,zero,849
	case 0 ... 12:
		return 0;
    d460:	0005883a 	mov	r2,zero
    d464:	00000706 	br	d484 <atx_lookup_lf_resistance+0x174>
	case 13 ... 20:
		return 1;
    d468:	00800044 	movi	r2,1
    d46c:	00000506 	br	d484 <atx_lookup_lf_resistance+0x174>
	case 21 ... 30:
		return 0;
    d470:	0005883a 	mov	r2,zero
    d474:	00000306 	br	d484 <atx_lookup_lf_resistance+0x174>
	case 31 ... 70:
		return 1;
    d478:	00800044 	movi	r2,1
    d47c:	00000106 	br	d484 <atx_lookup_lf_resistance+0x174>
	default:
		return 2;
    d480:	00800084 	movi	r2,2
	}
}
    d484:	e037883a 	mov	sp,fp
    d488:	df000017 	ldw	fp,0(sp)
    d48c:	dec00104 	addi	sp,sp,4
    d490:	f800283a 	ret

0000d494 <atx_calc_params>:
* @brief atx_calc_params
*******************************************************************************/
void atx_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_l, uint32_t *best_fvco)
{
    d494:	defff104 	addi	sp,sp,-60
    d498:	dfc00e15 	stw	ra,56(sp)
    d49c:	df000d15 	stw	fp,52(sp)
    d4a0:	df000d04 	addi	fp,sp,52
    d4a4:	e13ff615 	stw	r4,-40(fp)
    d4a8:	e17ff515 	stw	r5,-44(fp)
    d4ac:	e1bff415 	stw	r6,-48(fp)
    d4b0:	e1fff315 	stw	r7,-52(fp)
	uint32_t m, m_min, m_max;
	uint32_t n, l;
	uint32_t f, fvco, best_f;
	uint32_t pfd;

	*best_n = *best_m = *best_l = *best_fvco = 0;
    d4b4:	e0800317 	ldw	r2,12(fp)
    d4b8:	10000015 	stw	zero,0(r2)
    d4bc:	e0800317 	ldw	r2,12(fp)
    d4c0:	10c00017 	ldw	r3,0(r2)
    d4c4:	e0800217 	ldw	r2,8(fp)
    d4c8:	10c00015 	stw	r3,0(r2)
    d4cc:	e0800217 	ldw	r2,8(fp)
    d4d0:	10c00017 	ldw	r3,0(r2)
    d4d4:	e0bff317 	ldw	r2,-52(fp)
    d4d8:	10c00015 	stw	r3,0(r2)
    d4dc:	e0bff317 	ldw	r2,-52(fp)
    d4e0:	10c00017 	ldw	r3,0(r2)
    d4e4:	e0bff417 	ldw	r2,-48(fp)
    d4e8:	10c00015 	stw	r3,0(r2)
	best_f = ULONG_MAX;
    d4ec:	00bfffc4 	movi	r2,-1
    d4f0:	e0bffc15 	stw	r2,-16(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_ATX_PLL_VCO_MIN / 2, fref_khz), 8);
    d4f4:	e0fff617 	ldw	r3,-40(fp)
    d4f8:	00800df4 	movhi	r2,55
    d4fc:	10bb9fc4 	addi	r2,r2,-4481
    d500:	1885883a 	add	r2,r3,r2
    d504:	e17ff617 	ldw	r5,-40(fp)
    d508:	1009883a 	mov	r4,r2
    d50c:	0012a540 	call	12a54 <__udivsi3>
    d510:	10c00228 	cmpgeui	r3,r2,8
    d514:	1800011e 	bne	r3,zero,d51c <atx_calc_params+0x88>
    d518:	00800204 	movi	r2,8
    d51c:	e0bffb15 	stw	r2,-20(fp)
	m_max = min_t(uint32_t, (A10_ATX_PLL_VCO_MAX / 2 * 8 / fref_khz), 127);
    d520:	e17ff617 	ldw	r5,-40(fp)
    d524:	0100dbf4 	movhi	r4,879
    d528:	213a0004 	addi	r4,r4,-6144
    d52c:	0012a540 	call	12a54 <__udivsi3>
    d530:	10c02030 	cmpltui	r3,r2,128
    d534:	1800011e 	bne	r3,zero,d53c <atx_calc_params+0xa8>
    d538:	00801fc4 	movi	r2,127
    d53c:	e0bffa15 	stw	r2,-24(fp)

	for (n = 1; n <= 8; n *= 2) {
    d540:	00800044 	movi	r2,1
    d544:	e0bffe15 	stw	r2,-8(fp)
    d548:	00004e06 	br	d684 <atx_calc_params+0x1f0>
		pfd = fref_khz / n;
    d54c:	e17ffe17 	ldw	r5,-8(fp)
    d550:	e13ff617 	ldw	r4,-40(fp)
    d554:	0012a540 	call	12a54 <__udivsi3>
    d558:	e0bff915 	stw	r2,-28(fp)
		if (pfd < A10_ATX_PLL_PFD_MIN)
    d55c:	e0bff917 	ldw	r2,-28(fp)
    d560:	10bc0028 	cmpgeui	r2,r2,61440
    d564:	10004b26 	beq	r2,zero,d694 <atx_calc_params+0x200>
			break;
		if (pfd > A10_ATX_PLL_VCO_MAX)
    d568:	e0fff917 	ldw	r3,-28(fp)
    d56c:	00803734 	movhi	r2,220
    d570:	10ae8004 	addi	r2,r2,-17920
    d574:	10c03f36 	bltu	r2,r3,d674 <atx_calc_params+0x1e0>
			continue;

		for (m = m_min; m <= m_max; m++) {
    d578:	e0bffb17 	ldw	r2,-20(fp)
    d57c:	e0bfff15 	stw	r2,-4(fp)
    d580:	00003806 	br	d664 <atx_calc_params+0x1d0>
			fvco = fref_khz * m * 2 / n;
    d584:	e0fff617 	ldw	r3,-40(fp)
    d588:	e0bfff17 	ldw	r2,-4(fp)
    d58c:	1885383a 	mul	r2,r3,r2
    d590:	1085883a 	add	r2,r2,r2
    d594:	e17ffe17 	ldw	r5,-8(fp)
    d598:	1009883a 	mov	r4,r2
    d59c:	0012a540 	call	12a54 <__udivsi3>
    d5a0:	e0bff815 	stw	r2,-32(fp)

			for (l = 1; l <= 16; l *= 2) {
    d5a4:	00800044 	movi	r2,1
    d5a8:	e0bffd15 	stw	r2,-12(fp)
    d5ac:	00002706 	br	d64c <atx_calc_params+0x1b8>
				f = (fvco * 2) / l;
    d5b0:	e0bff817 	ldw	r2,-32(fp)
    d5b4:	1085883a 	add	r2,r2,r2
    d5b8:	e17ffd17 	ldw	r5,-12(fp)
    d5bc:	1009883a 	mov	r4,r2
    d5c0:	0012a540 	call	12a54 <__udivsi3>
    d5c4:	e0bff715 	stw	r2,-36(fp)

				if (abs(f - fout_khz) < abs(best_f - fout_khz)) {
    d5c8:	e0fff717 	ldw	r3,-36(fp)
    d5cc:	e0bff517 	ldw	r2,-44(fp)
    d5d0:	1885c83a 	sub	r2,r3,r2
    d5d4:	1000010e 	bge	r2,zero,d5dc <atx_calc_params+0x148>
    d5d8:	0085c83a 	sub	r2,zero,r2
    d5dc:	1009883a 	mov	r4,r2
    d5e0:	e0fffc17 	ldw	r3,-16(fp)
    d5e4:	e0bff517 	ldw	r2,-44(fp)
    d5e8:	1885c83a 	sub	r2,r3,r2
    d5ec:	1000010e 	bge	r2,zero,d5f4 <atx_calc_params+0x160>
    d5f0:	0085c83a 	sub	r2,zero,r2
    d5f4:	2080120e 	bge	r4,r2,d640 <atx_calc_params+0x1ac>
					best_f = f;
    d5f8:	e0bff717 	ldw	r2,-36(fp)
    d5fc:	e0bffc15 	stw	r2,-16(fp)
					*best_n = n;
    d600:	e0bff417 	ldw	r2,-48(fp)
    d604:	e0fffe17 	ldw	r3,-8(fp)
    d608:	10c00015 	stw	r3,0(r2)
					*best_m = m;
    d60c:	e0bff317 	ldw	r2,-52(fp)
    d610:	e0ffff17 	ldw	r3,-4(fp)
    d614:	10c00015 	stw	r3,0(r2)
					*best_l = l/2;
    d618:	e0bffd17 	ldw	r2,-12(fp)
    d61c:	1006d07a 	srli	r3,r2,1
    d620:	e0800217 	ldw	r2,8(fp)
    d624:	10c00015 	stw	r3,0(r2)
					*best_fvco = fvco;
    d628:	e0800317 	ldw	r2,12(fp)
    d62c:	e0fff817 	ldw	r3,-32(fp)
    d630:	10c00015 	stw	r3,0(r2)
					if (f == fout_khz)
    d634:	e0fff717 	ldw	r3,-36(fp)
    d638:	e0bff517 	ldw	r2,-44(fp)
    d63c:	18801726 	beq	r3,r2,d69c <atx_calc_params+0x208>
			for (l = 1; l <= 16; l *= 2) {
    d640:	e0bffd17 	ldw	r2,-12(fp)
    d644:	1085883a 	add	r2,r2,r2
    d648:	e0bffd15 	stw	r2,-12(fp)
    d64c:	e0bffd17 	ldw	r2,-12(fp)
    d650:	10800470 	cmpltui	r2,r2,17
    d654:	103fd61e 	bne	r2,zero,d5b0 <__alt_mem_mcu_subsystem_ram_0+0x77fed5b0>
		for (m = m_min; m <= m_max; m++) {
    d658:	e0bfff17 	ldw	r2,-4(fp)
    d65c:	10800044 	addi	r2,r2,1
    d660:	e0bfff15 	stw	r2,-4(fp)
    d664:	e0bfff17 	ldw	r2,-4(fp)
    d668:	e0fffa17 	ldw	r3,-24(fp)
    d66c:	18bfc52e 	bgeu	r3,r2,d584 <__alt_mem_mcu_subsystem_ram_0+0x77fed584>
    d670:	00000106 	br	d678 <atx_calc_params+0x1e4>
			continue;
    d674:	0001883a 	nop
	for (n = 1; n <= 8; n *= 2) {
    d678:	e0bffe17 	ldw	r2,-8(fp)
    d67c:	1085883a 	add	r2,r2,r2
    d680:	e0bffe15 	stw	r2,-8(fp)
    d684:	e0bffe17 	ldw	r2,-8(fp)
    d688:	10800270 	cmpltui	r2,r2,9
    d68c:	103faf1e 	bne	r2,zero,d54c <__alt_mem_mcu_subsystem_ram_0+0x77fed54c>
    d690:	00000306 	br	d6a0 <atx_calc_params+0x20c>
			break;
    d694:	0001883a 	nop
    d698:	00000106 	br	d6a0 <atx_calc_params+0x20c>
						return;
    d69c:	0001883a 	nop
				}
			}
		}
	}
}
    d6a0:	e037883a 	mov	sp,fp
    d6a4:	dfc00117 	ldw	ra,4(sp)
    d6a8:	df000017 	ldw	fp,0(sp)
    d6ac:	dec00204 	addi	sp,sp,8
    d6b0:	f800283a 	ret

0000d6b4 <atx_pll_round_rate>:

/*******************************************************************************
* @brief atx_pll_round_rate
*******************************************************************************/
uint32_t atx_pll_round_rate(uint32_t l_rate_kbps, uint32_t fref_khz)
{
    d6b4:	defff204 	addi	sp,sp,-56
    d6b8:	dfc00d15 	stw	ra,52(sp)
    d6bc:	df000c15 	stw	fp,48(sp)
    d6c0:	dc400b15 	stw	r17,44(sp)
    d6c4:	dc000a15 	stw	r16,40(sp)
    d6c8:	df000c04 	addi	fp,sp,48
    d6cc:	e13ff715 	stw	r4,-36(fp)
    d6d0:	e17ff615 	stw	r5,-40(fp)
	uint32_t n, m, l, fout_khz;
	uint32_t fvco;
	uint32_t tmp;

	fout_khz = l_rate_kbps / 2;
    d6d4:	e0bff717 	ldw	r2,-36(fp)
    d6d8:	1004d07a 	srli	r2,r2,1
    d6dc:	e0bffd15 	stw	r2,-12(fp)

	atx_calc_params(fref_khz, fout_khz, &n, &m, &l, &fvco);
    d6e0:	e13ffa04 	addi	r4,fp,-24
    d6e4:	e0fffb04 	addi	r3,fp,-20
    d6e8:	e0bff804 	addi	r2,fp,-32
    d6ec:	d8800115 	stw	r2,4(sp)
    d6f0:	e0bff904 	addi	r2,fp,-28
    d6f4:	d8800015 	stw	r2,0(sp)
    d6f8:	200f883a 	mov	r7,r4
    d6fc:	180d883a 	mov	r6,r3
    d700:	e17ffd17 	ldw	r5,-12(fp)
    d704:	e13ff617 	ldw	r4,-40(fp)
    d708:	000d4940 	call	d494 <atx_calc_params>

	if (n == 0 || m == 0 || l == 0)
    d70c:	e0bffb17 	ldw	r2,-20(fp)
    d710:	10000426 	beq	r2,zero,d724 <atx_pll_round_rate+0x70>
    d714:	e0bffa17 	ldw	r2,-24(fp)
    d718:	10000226 	beq	r2,zero,d724 <atx_pll_round_rate+0x70>
    d71c:	e0bff917 	ldw	r2,-28(fp)
    d720:	1000021e 	bne	r2,zero,d72c <atx_pll_round_rate+0x78>
		return -1;
    d724:	00bfffc4 	movi	r2,-1
    d728:	00002906 	br	d7d0 <atx_pll_round_rate+0x11c>

	tmp = (uint32_t)fref_khz * m * 4;
    d72c:	e0fffa17 	ldw	r3,-24(fp)
    d730:	e0bff617 	ldw	r2,-40(fp)
    d734:	1885383a 	mul	r2,r3,r2
    d738:	100490ba 	slli	r2,r2,2
    d73c:	e0bffc15 	stw	r2,-16(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, l * n);
    d740:	e13ffc17 	ldw	r4,-16(fp)
    d744:	0014dac0 	call	14dac <__floatunsidf>
    d748:	1021883a 	mov	r16,r2
    d74c:	1823883a 	mov	r17,r3
    d750:	e0fff917 	ldw	r3,-28(fp)
    d754:	e0bffb17 	ldw	r2,-20(fp)
    d758:	1885383a 	mul	r2,r3,r2
    d75c:	1009883a 	mov	r4,r2
    d760:	0014dac0 	call	14dac <__floatunsidf>
    d764:	1009883a 	mov	r4,r2
    d768:	180b883a 	mov	r5,r3
    d76c:	200d883a 	mov	r6,r4
    d770:	280f883a 	mov	r7,r5
    d774:	8009883a 	mov	r4,r16
    d778:	880b883a 	mov	r5,r17
    d77c:	00133d00 	call	133d0 <__divdf3>
    d780:	1009883a 	mov	r4,r2
    d784:	180b883a 	mov	r5,r3
    d788:	2005883a 	mov	r2,r4
    d78c:	2807883a 	mov	r3,r5
    d790:	000d883a 	mov	r6,zero
    d794:	01cff834 	movhi	r7,16352
    d798:	1009883a 	mov	r4,r2
    d79c:	180b883a 	mov	r5,r3
    d7a0:	0012b100 	call	12b10 <__adddf3>
    d7a4:	1009883a 	mov	r4,r2
    d7a8:	180b883a 	mov	r5,r3
    d7ac:	2005883a 	mov	r2,r4
    d7b0:	2807883a 	mov	r3,r5
    d7b4:	1009883a 	mov	r4,r2
    d7b8:	180b883a 	mov	r5,r3
    d7bc:	0011dd80 	call	11dd8 <__fixunsdfdi>
    d7c0:	1009883a 	mov	r4,r2
    d7c4:	180b883a 	mov	r5,r3
    d7c8:	e13ffc15 	stw	r4,-16(fp)

	return min_t(uint32_t, tmp, LONG_MAX);
    d7cc:	e0bffc17 	ldw	r2,-16(fp)
}
    d7d0:	e6fffe04 	addi	sp,fp,-8
    d7d4:	dfc00317 	ldw	ra,12(sp)
    d7d8:	df000217 	ldw	fp,8(sp)
    d7dc:	dc400117 	ldw	r17,4(sp)
    d7e0:	dc000017 	ldw	r16,0(sp)
    d7e4:	dec00404 	addi	sp,sp,16
    d7e8:	f800283a 	ret

0000d7ec <atx_pll_set_rate>:
/*******************************************************************************
* @brief atx_pll_set_rate
*******************************************************************************/
uint32_t atx_pll_set_rate(xcvr_core *core,
	uint32_t l_rate_kbps, uint32_t fref_khz)
{
    d7ec:	defff004 	addi	sp,sp,-64
    d7f0:	dfc00f15 	stw	ra,60(sp)
    d7f4:	df000e15 	stw	fp,56(sp)
    d7f8:	df000e04 	addi	fp,sp,56
    d7fc:	e13ff615 	stw	r4,-40(fp)
    d800:	e17ff515 	stw	r5,-44(fp)
    d804:	e1bff415 	stw	r6,-48(fp)
	uint32_t n, m, l, fout_khz;
	uint32_t fvco;
	uint32_t lfr, cpc, band, tank;

	fout_khz = l_rate_kbps / 2;
    d808:	e0bff517 	ldw	r2,-44(fp)
    d80c:	1004d07a 	srli	r2,r2,1
    d810:	e0bfff15 	stw	r2,-4(fp)

	atx_calc_params(fref_khz, fout_khz, &n, &m, &l, &fvco);
    d814:	e13ff904 	addi	r4,fp,-28
    d818:	e0fffa04 	addi	r3,fp,-24
    d81c:	e0bff704 	addi	r2,fp,-36
    d820:	d8800115 	stw	r2,4(sp)
    d824:	e0bff804 	addi	r2,fp,-32
    d828:	d8800015 	stw	r2,0(sp)
    d82c:	200f883a 	mov	r7,r4
    d830:	180d883a 	mov	r6,r3
    d834:	e17fff17 	ldw	r5,-4(fp)
    d838:	e13ff417 	ldw	r4,-48(fp)
    d83c:	000d4940 	call	d494 <atx_calc_params>
	printf("\tm: %d\n", m);
	printf("\tl: %d\n", l);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || l == 0)
    d840:	e0bffa17 	ldw	r2,-24(fp)
    d844:	10000426 	beq	r2,zero,d858 <atx_pll_set_rate+0x6c>
    d848:	e0bff917 	ldw	r2,-28(fp)
    d84c:	10000226 	beq	r2,zero,d858 <atx_pll_set_rate+0x6c>
    d850:	e0bff817 	ldw	r2,-32(fp)
    d854:	1000021e 	bne	r2,zero,d860 <atx_pll_set_rate+0x74>
		return -1;
    d858:	00bfffc4 	movi	r2,-1
    d85c:	00008b06 	br	da8c <atx_pll_set_rate+0x2a0>
	// encodings
	switch (n) {
    d860:	e0bffa17 	ldw	r2,-24(fp)
    d864:	10c000a0 	cmpeqi	r3,r2,2
    d868:	1800061e 	bne	r3,zero,d884 <atx_pll_set_rate+0x98>
    d86c:	10c00120 	cmpeqi	r3,r2,4
    d870:	1800071e 	bne	r3,zero,d890 <atx_pll_set_rate+0xa4>
    d874:	10800060 	cmpeqi	r2,r2,1
    d878:	10000826 	beq	r2,zero,d89c <atx_pll_set_rate+0xb0>
	case 1:
		n = 0;
    d87c:	e03ffa15 	stw	zero,-24(fp)
		break;
    d880:	00000906 	br	d8a8 <atx_pll_set_rate+0xbc>
	case 2:
		n = 1;
    d884:	00800044 	movi	r2,1
    d888:	e0bffa15 	stw	r2,-24(fp)
		break;
    d88c:	00000606 	br	d8a8 <atx_pll_set_rate+0xbc>
	case 4:
		n = 2;
    d890:	00800084 	movi	r2,2
    d894:	e0bffa15 	stw	r2,-24(fp)
		break;
    d898:	00000306 	br	d8a8 <atx_pll_set_rate+0xbc>
	default:
		n = 3;
    d89c:	008000c4 	movi	r2,3
    d8a0:	e0bffa15 	stw	r2,-24(fp)
		break;
    d8a4:	0001883a 	nop
	}

	switch (l) {
    d8a8:	e0bff817 	ldw	r2,-32(fp)
    d8ac:	10c000a0 	cmpeqi	r3,r2,2
    d8b0:	18000c1e 	bne	r3,zero,d8e4 <atx_pll_set_rate+0xf8>
    d8b4:	10c000e8 	cmpgeui	r3,r2,3
    d8b8:	1800031e 	bne	r3,zero,d8c8 <atx_pll_set_rate+0xdc>
    d8bc:	10800060 	cmpeqi	r2,r2,1
    d8c0:	1000061e 	bne	r2,zero,d8dc <atx_pll_set_rate+0xf0>
    d8c4:	00001006 	br	d908 <atx_pll_set_rate+0x11c>
    d8c8:	10c00120 	cmpeqi	r3,r2,4
    d8cc:	1800081e 	bne	r3,zero,d8f0 <atx_pll_set_rate+0x104>
    d8d0:	10800220 	cmpeqi	r2,r2,8
    d8d4:	1000091e 	bne	r2,zero,d8fc <atx_pll_set_rate+0x110>
    d8d8:	00000b06 	br	d908 <atx_pll_set_rate+0x11c>
	case 1:
		l = 0;
    d8dc:	e03ff815 	stw	zero,-32(fp)
		break;
    d8e0:	00000c06 	br	d914 <atx_pll_set_rate+0x128>
	case 2:
		l = 1;
    d8e4:	00800044 	movi	r2,1
    d8e8:	e0bff815 	stw	r2,-32(fp)
		break;
    d8ec:	00000906 	br	d914 <atx_pll_set_rate+0x128>
	case 4:
		l = 2;
    d8f0:	00800084 	movi	r2,2
    d8f4:	e0bff815 	stw	r2,-32(fp)
		break;
    d8f8:	00000606 	br	d914 <atx_pll_set_rate+0x128>
	case 8:
		l = 3;
    d8fc:	008000c4 	movi	r2,3
    d900:	e0bff815 	stw	r2,-32(fp)
		break;
    d904:	00000306 	br	d914 <atx_pll_set_rate+0x128>
	default:
		l = 4;
    d908:	00800104 	movi	r2,4
    d90c:	e0bff815 	stw	r2,-32(fp)
		break;
    d910:	0001883a 	nop
	}

	lfr = atx_lookup_lf_resistance(m);
    d914:	e0bff917 	ldw	r2,-28(fp)
    d918:	1009883a 	mov	r4,r2
    d91c:	000d3100 	call	d310 <atx_lookup_lf_resistance>
    d920:	e0bffe15 	stw	r2,-8(fp)
	cpc = atx_lookup_cp_current(m);
    d924:	e0bff917 	ldw	r2,-28(fp)
    d928:	1009883a 	mov	r4,r2
    d92c:	000d0fc0 	call	d0fc <atx_lookup_cp_current>
    d930:	e0bffd15 	stw	r2,-12(fp)
	band = atx_lookup_band(fvco);
    d934:	e0bff717 	ldw	r2,-36(fp)
    d938:	1009883a 	mov	r4,r2
    d93c:	000d01c0 	call	d01c <atx_lookup_band>
    d940:	e0bffc15 	stw	r2,-16(fp)
	tank = atx_lookup_tank(fvco);
    d944:	e0bff717 	ldw	r2,-36(fp)
    d948:	1009883a 	mov	r4,r2
    d94c:	000d0a80 	call	d0a8 <atx_lookup_tank>
    d950:	e0bffb15 	stw	r2,-20(fp)

	altera_a10_acquire_arbitration(&(core->dev.atx_pll));
    d954:	e0bff617 	ldw	r2,-40(fp)
    d958:	10800b04 	addi	r2,r2,44
    d95c:	1009883a 	mov	r4,r2
    d960:	000fdc80 	call	fdc8 <altera_a10_acquire_arbitration>

	//Selects the frequency band within the selected ATX bank [2:0] => tank_band, [4:3] => tank_sel
	pll_update(&(core->dev.atx_pll), 0x102, 0x1f, band | (tank << 3));
    d964:	e0bff617 	ldw	r2,-40(fp)
    d968:	11000b04 	addi	r4,r2,44
    d96c:	e0bffb17 	ldw	r2,-20(fp)
    d970:	100690fa 	slli	r3,r2,3
    d974:	e0bffc17 	ldw	r2,-16(fp)
    d978:	1884b03a 	or	r2,r3,r2
    d97c:	100f883a 	mov	r7,r2
    d980:	018007c4 	movi	r6,31
    d984:	01404084 	movi	r5,258
    d988:	000fd440 	call	fd44 <pll_update>


	//Set the loop filter resistance for bandwidth control [1:0] => resistance, [3:2] => ripplecap, [6:4] => cp current settings, [7] cal settings
	pll_update(&(core->dev.atx_pll), 0x104, 0x7f, ((cpc & 0x38) << 1) | 0x04 | lfr);
    d98c:	e0bff617 	ldw	r2,-40(fp)
    d990:	11000b04 	addi	r4,r2,44
    d994:	e0bffd17 	ldw	r2,-12(fp)
    d998:	1085883a 	add	r2,r2,r2
    d99c:	10c01c0c 	andi	r3,r2,112
    d9a0:	e0bffe17 	ldw	r2,-8(fp)
    d9a4:	1884b03a 	or	r2,r3,r2
    d9a8:	10800114 	ori	r2,r2,4
    d9ac:	100f883a 	mov	r7,r2
    d9b0:	01801fc4 	movi	r6,127
    d9b4:	01404104 	movi	r5,260
    d9b8:	000fd440 	call	fd44 <pll_update>

	//Set the charge pump current
	pll_update(&(core->dev.atx_pll), 0x105, 0x07, cpc & 0x7);
    d9bc:	e0bff617 	ldw	r2,-40(fp)
    d9c0:	10c00b04 	addi	r3,r2,44
    d9c4:	e0bffd17 	ldw	r2,-12(fp)
    d9c8:	108001cc 	andi	r2,r2,7
    d9cc:	100f883a 	mov	r7,r2
    d9d0:	018001c4 	movi	r6,7
    d9d4:	01404144 	movi	r5,261
    d9d8:	1809883a 	mov	r4,r3
    d9dc:	000fd440 	call	fd44 <pll_update>

	//Set the N input counter divide value
	pll_update(&(core->dev.atx_pll), 0x107, 0x0c, n << 2);
    d9e0:	e0bff617 	ldw	r2,-40(fp)
    d9e4:	10c00b04 	addi	r3,r2,44
    d9e8:	e0bffa17 	ldw	r2,-24(fp)
    d9ec:	100490ba 	slli	r2,r2,2
    d9f0:	100f883a 	mov	r7,r2
    d9f4:	01800304 	movi	r6,12
    d9f8:	014041c4 	movi	r5,263
    d9fc:	1809883a 	mov	r4,r3
    da00:	000fd440 	call	fd44 <pll_update>

	//L counter divide value
	pll_update(&(core->dev.atx_pll), 0x108, 0x07, l);
    da04:	e0bff617 	ldw	r2,-40(fp)
    da08:	10800b04 	addi	r2,r2,44
    da0c:	e0fff817 	ldw	r3,-32(fp)
    da10:	180f883a 	mov	r7,r3
    da14:	018001c4 	movi	r6,7
    da18:	01404204 	movi	r5,264
    da1c:	1009883a 	mov	r4,r2
    da20:	000fd440 	call	fd44 <pll_update>

	//M counter divide value. Direct mapped.
	a10_pll_write(&(core->dev.atx_pll), 0x109, m);
    da24:	e0bff617 	ldw	r2,-40(fp)
    da28:	10800b04 	addi	r2,r2,44
    da2c:	e0fff917 	ldw	r3,-28(fp)
    da30:	180d883a 	mov	r6,r3
    da34:	01404244 	movi	r5,265
    da38:	1009883a 	mov	r4,r2
    da3c:	000fcf80 	call	fcf8 <a10_pll_write>

	//Request the Microcontroller to calibrate the ATX PLL. 1'b1, enables lc pll calibration.
	pll_update(&(core->dev.atx_pll), XCVR_REG_CALIB_PLL_EN, XCVR_CALIB_PLL_EN_MASK, XCVR_CALIB_PLL_EN);
    da40:	e0bff617 	ldw	r2,-40(fp)
    da44:	10800b04 	addi	r2,r2,44
    da48:	01c00044 	movi	r7,1
    da4c:	01800044 	movi	r6,1
    da50:	01404004 	movi	r5,256
    da54:	1009883a 	mov	r4,r2
    da58:	000fd440 	call	fd44 <pll_update>

	altera_a10_release_arbitration(&(core->dev.atx_pll), TRUE);
    da5c:	e0bff617 	ldw	r2,-40(fp)
    da60:	10800b04 	addi	r2,r2,44
    da64:	01400044 	movi	r5,1
    da68:	1009883a 	mov	r4,r2
    da6c:	000feb00 	call	feb0 <altera_a10_release_arbitration>

	pll_calibration_check(&(core->dev.atx_pll));
    da70:	e0bff617 	ldw	r2,-40(fp)
    da74:	10800b04 	addi	r2,r2,44
    da78:	1009883a 	mov	r4,r2
    da7c:	000ff080 	call	ff08 <pll_calibration_check>

	core->dev.atx_pll.initial_recalc = FALSE;
    da80:	e0bff617 	ldw	r2,-40(fp)
    da84:	10000d05 	stb	zero,52(r2)

	return 0;
    da88:	0005883a 	mov	r2,zero
}
    da8c:	e037883a 	mov	sp,fp
    da90:	dfc00117 	ldw	ra,4(sp)
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00204 	addi	sp,sp,8
    da9c:	f800283a 	ret

0000daa0 <atx_pll_recalc_rate>:
/*******************************************************************************
* @brief atx_pll_recalc_rate
*******************************************************************************/
uint32_t atx_pll_recalc_rate(xcvr_core *core,
	uint32_t fref_khz)
{
    daa0:	defff404 	addi	sp,sp,-48
    daa4:	dfc00b15 	stw	ra,44(sp)
    daa8:	df000a15 	stw	fp,40(sp)
    daac:	dc400915 	stw	r17,36(sp)
    dab0:	dc000815 	stw	r16,32(sp)
    dab4:	df000a04 	addi	fp,sp,40
    dab8:	e13ff715 	stw	r4,-36(fp)
    dabc:	e17ff615 	stw	r5,-40(fp)
	uint32_t m, n, l;
	uint32_t tmp;
	uint32_t div0, div1;

	altera_a10_acquire_arbitration(&(core->dev.atx_pll));
    dac0:	e0bff717 	ldw	r2,-36(fp)
    dac4:	10800b04 	addi	r2,r2,44
    dac8:	1009883a 	mov	r4,r2
    dacc:	000fdc80 	call	fdc8 <altera_a10_acquire_arbitration>

	a10_pll_read(&(core->dev.atx_pll), 0x107, &div0);
    dad0:	e0bff717 	ldw	r2,-36(fp)
    dad4:	10800b04 	addi	r2,r2,44
    dad8:	e0fff904 	addi	r3,fp,-28
    dadc:	180d883a 	mov	r6,r3
    dae0:	014041c4 	movi	r5,263
    dae4:	1009883a 	mov	r4,r2
    dae8:	000fca80 	call	fca8 <a10_pll_read>
	a10_pll_read(&(core->dev.atx_pll), 0x108, &div1);
    daec:	e0bff717 	ldw	r2,-36(fp)
    daf0:	10800b04 	addi	r2,r2,44
    daf4:	e0fff804 	addi	r3,fp,-32
    daf8:	180d883a 	mov	r6,r3
    dafc:	01404204 	movi	r5,264
    db00:	1009883a 	mov	r4,r2
    db04:	000fca80 	call	fca8 <a10_pll_read>
	a10_pll_read(&(core->dev.atx_pll), 0x109, &m);
    db08:	e0bff717 	ldw	r2,-36(fp)
    db0c:	10800b04 	addi	r2,r2,44
    db10:	e0fffa04 	addi	r3,fp,-24
    db14:	180d883a 	mov	r6,r3
    db18:	01404244 	movi	r5,265
    db1c:	1009883a 	mov	r4,r2
    db20:	000fca80 	call	fca8 <a10_pll_read>

	altera_a10_release_arbitration(&(core->dev.atx_pll), FALSE);
    db24:	e0bff717 	ldw	r2,-36(fp)
    db28:	10800b04 	addi	r2,r2,44
    db2c:	000b883a 	mov	r5,zero
    db30:	1009883a 	mov	r4,r2
    db34:	000feb00 	call	feb0 <altera_a10_release_arbitration>

	n = 1 << ((div0 >> 2) & 0x3);
    db38:	e0bff917 	ldw	r2,-28(fp)
    db3c:	1004d0ba 	srli	r2,r2,2
    db40:	108000cc 	andi	r2,r2,3
    db44:	00c00044 	movi	r3,1
    db48:	1884983a 	sll	r2,r3,r2
    db4c:	e0bffd15 	stw	r2,-12(fp)
	l = 1 << (div1 & 0x7);
    db50:	e0bff817 	ldw	r2,-32(fp)
    db54:	108001cc 	andi	r2,r2,7
    db58:	00c00044 	movi	r3,1
    db5c:	1884983a 	sll	r2,r3,r2
    db60:	e0bffc15 	stw	r2,-16(fp)

	tmp = (uint32_t)fref_khz * m;
    db64:	e0bffa17 	ldw	r2,-24(fp)
    db68:	e0fff617 	ldw	r3,-40(fp)
    db6c:	1885383a 	mul	r2,r3,r2
    db70:	e0bffb15 	stw	r2,-20(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, l*n/2);
    db74:	e13ffb17 	ldw	r4,-20(fp)
    db78:	0014dac0 	call	14dac <__floatunsidf>
    db7c:	1021883a 	mov	r16,r2
    db80:	1823883a 	mov	r17,r3
    db84:	e0fffc17 	ldw	r3,-16(fp)
    db88:	e0bffd17 	ldw	r2,-12(fp)
    db8c:	1885383a 	mul	r2,r3,r2
    db90:	1004d07a 	srli	r2,r2,1
    db94:	1009883a 	mov	r4,r2
    db98:	0014dac0 	call	14dac <__floatunsidf>
    db9c:	1009883a 	mov	r4,r2
    dba0:	180b883a 	mov	r5,r3
    dba4:	200d883a 	mov	r6,r4
    dba8:	280f883a 	mov	r7,r5
    dbac:	8009883a 	mov	r4,r16
    dbb0:	880b883a 	mov	r5,r17
    dbb4:	00133d00 	call	133d0 <__divdf3>
    dbb8:	1009883a 	mov	r4,r2
    dbbc:	180b883a 	mov	r5,r3
    dbc0:	2005883a 	mov	r2,r4
    dbc4:	2807883a 	mov	r3,r5
    dbc8:	000d883a 	mov	r6,zero
    dbcc:	01cff834 	movhi	r7,16352
    dbd0:	1009883a 	mov	r4,r2
    dbd4:	180b883a 	mov	r5,r3
    dbd8:	0012b100 	call	12b10 <__adddf3>
    dbdc:	1009883a 	mov	r4,r2
    dbe0:	180b883a 	mov	r5,r3
    dbe4:	2005883a 	mov	r2,r4
    dbe8:	2807883a 	mov	r3,r5
    dbec:	1009883a 	mov	r4,r2
    dbf0:	180b883a 	mov	r5,r3
    dbf4:	0011dd80 	call	11dd8 <__fixunsdfdi>
    dbf8:	1009883a 	mov	r4,r2
    dbfc:	180b883a 	mov	r5,r3
    dc00:	e13ffb15 	stw	r4,-20(fp)

	if (tmp != 0 && core->dev.atx_pll.initial_recalc)
    dc04:	e0bffb17 	ldw	r2,-20(fp)
    dc08:	10000826 	beq	r2,zero,dc2c <atx_pll_recalc_rate+0x18c>
    dc0c:	e0bff717 	ldw	r2,-36(fp)
    dc10:	10800d03 	ldbu	r2,52(r2)
    dc14:	10803fcc 	andi	r2,r2,255
    dc18:	10000426 	beq	r2,zero,dc2c <atx_pll_recalc_rate+0x18c>
		atx_pll_set_rate(core, tmp, fref_khz);
    dc1c:	e1bff617 	ldw	r6,-40(fp)
    dc20:	e17ffb17 	ldw	r5,-20(fp)
    dc24:	e13ff717 	ldw	r4,-36(fp)
    dc28:	000d7ec0 	call	d7ec <atx_pll_set_rate>

	return min_t(uint32_t, tmp * 2, ULONG_MAX);
    dc2c:	e0bffb17 	ldw	r2,-20(fp)
    dc30:	1085883a 	add	r2,r2,r2
}
    dc34:	e6fffe04 	addi	sp,fp,-8
    dc38:	dfc00317 	ldw	ra,12(sp)
    dc3c:	df000217 	ldw	fp,8(sp)
    dc40:	dc400117 	ldw	r17,4(sp)
    dc44:	dc000017 	ldw	r16,0(sp)
    dc48:	dec00404 	addi	sp,sp,16
    dc4c:	f800283a 	ret

0000dc50 <fpll_lookup_lf_resistance>:
/*******************************************************************************
* @brief fpll_lookup_lf_resistance
*******************************************************************************/
uint32_t fpll_lookup_lf_resistance(uint32_t fvco,
	uint32_t m)
{
    dc50:	defffd04 	addi	sp,sp,-12
    dc54:	df000215 	stw	fp,8(sp)
    dc58:	df000204 	addi	fp,sp,8
    dc5c:	e13fff15 	stw	r4,-4(fp)
    dc60:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 9000000) {
    dc64:	e0ffff17 	ldw	r3,-4(fp)
    dc68:	00802274 	movhi	r2,137
    dc6c:	10950fc4 	addi	r2,r2,21567
    dc70:	10c01136 	bltu	r2,r3,dcb8 <fpll_lookup_lf_resistance+0x68>
		switch (m) {
    dc74:	e0bffe17 	ldw	r2,-8(fp)
    dc78:	10c00828 	cmpgeui	r3,r2,32
    dc7c:	1800031e 	bne	r3,zero,dc8c <fpll_lookup_lf_resistance+0x3c>
    dc80:	10800428 	cmpgeui	r2,r2,16
    dc84:	1000061e 	bne	r2,zero,dca0 <fpll_lookup_lf_resistance+0x50>
    dc88:	00000306 	br	dc98 <fpll_lookup_lf_resistance+0x48>
    dc8c:	10801228 	cmpgeui	r2,r2,72
    dc90:	1000071e 	bne	r2,zero,dcb0 <fpll_lookup_lf_resistance+0x60>
    dc94:	00000406 	br	dca8 <fpll_lookup_lf_resistance+0x58>
		case 0 ... 15:
			return 2;
    dc98:	00800084 	movi	r2,2
    dc9c:	00002606 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		case 16 ... 31:
			return 0;
    dca0:	0005883a 	mov	r2,zero
    dca4:	00002406 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		case 32 ... 71:
			return 1;
    dca8:	00800044 	movi	r2,1
    dcac:	00002206 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
    dcb0:	008000c4 	movi	r2,3
    dcb4:	00002006 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		}
	} else if (fvco < 12000000) {
    dcb8:	e0ffff17 	ldw	r3,-4(fp)
    dcbc:	00802df4 	movhi	r2,183
    dcc0:	1086bfc4 	addi	r2,r2,6911
    dcc4:	10c01136 	bltu	r2,r3,dd0c <fpll_lookup_lf_resistance+0xbc>
		switch (m) {
    dcc8:	e0bffe17 	ldw	r2,-8(fp)
    dccc:	10c00828 	cmpgeui	r3,r2,32
    dcd0:	1800031e 	bne	r3,zero,dce0 <fpll_lookup_lf_resistance+0x90>
    dcd4:	10800428 	cmpgeui	r2,r2,16
    dcd8:	1000061e 	bne	r2,zero,dcf4 <fpll_lookup_lf_resistance+0xa4>
    dcdc:	00000306 	br	dcec <fpll_lookup_lf_resistance+0x9c>
    dce0:	10801228 	cmpgeui	r2,r2,72
    dce4:	1000071e 	bne	r2,zero,dd04 <fpll_lookup_lf_resistance+0xb4>
    dce8:	00000406 	br	dcfc <fpll_lookup_lf_resistance+0xac>
		case 0 ... 15:
			return 2;
    dcec:	00800084 	movi	r2,2
    dcf0:	00001106 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		case 16 ... 31:
			return 0;
    dcf4:	0005883a 	mov	r2,zero
    dcf8:	00000f06 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		case 32 ... 71:
			return 1;
    dcfc:	00800044 	movi	r2,1
    dd00:	00000d06 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
    dd04:	008000c4 	movi	r2,3
    dd08:	00000b06 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		}
	} else {
		switch (m) {
    dd0c:	e0bffe17 	ldw	r2,-8(fp)
    dd10:	10c00630 	cmpltui	r3,r2,24
    dd14:	1800031e 	bne	r3,zero,dd24 <fpll_lookup_lf_resistance+0xd4>
    dd18:	10800e28 	cmpgeui	r2,r2,56
    dd1c:	1000051e 	bne	r2,zero,dd34 <fpll_lookup_lf_resistance+0xe4>
    dd20:	00000206 	br	dd2c <fpll_lookup_lf_resistance+0xdc>
		case 0 ... 23:
			return 0;
    dd24:	0005883a 	mov	r2,zero
    dd28:	00000306 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		case 24 ... 55:
			return 1;
    dd2c:	00800044 	movi	r2,1
    dd30:	00000106 	br	dd38 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
    dd34:	008000c4 	movi	r2,3
		}
	}
}
    dd38:	e037883a 	mov	sp,fp
    dd3c:	df000017 	ldw	fp,0(sp)
    dd40:	dec00104 	addi	sp,sp,4
    dd44:	f800283a 	ret

0000dd48 <fpll_lookup_cp_current>:
/*******************************************************************************
* @brief fpll_lookup_cp_current
*******************************************************************************/
int32_t fpll_lookup_cp_current(uint32_t fvco,
	uint32_t m)
{
    dd48:	defffd04 	addi	sp,sp,-12
    dd4c:	df000215 	stw	fp,8(sp)
    dd50:	df000204 	addi	fp,sp,8
    dd54:	e13fff15 	stw	r4,-4(fp)
    dd58:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 9000000) {
    dd5c:	e0ffff17 	ldw	r3,-4(fp)
    dd60:	00802274 	movhi	r2,137
    dd64:	10950fc4 	addi	r2,r2,21567
    dd68:	10c08136 	bltu	r2,r3,df70 <fpll_lookup_cp_current+0x228>
		switch (m) {
    dd6c:	e0bffe17 	ldw	r2,-8(fp)
    dd70:	10801a28 	cmpgeui	r2,r2,104
    dd74:	10007c1e 	bne	r2,zero,df68 <fpll_lookup_cp_current+0x220>
    dd78:	e0bffe17 	ldw	r2,-8(fp)
    dd7c:	100690ba 	slli	r3,r2,2
    dd80:	00800074 	movhi	r2,1
    dd84:	1885883a 	add	r2,r3,r2
    dd88:	10b76417 	ldw	r2,-8816(r2)
    dd8c:	1000683a 	jmp	r2
    dd90:	0000df30 	cmpltui	zero,zero,892
    dd94:	0000df30 	cmpltui	zero,zero,892
    dd98:	0000df30 	cmpltui	zero,zero,892
    dd9c:	0000df30 	cmpltui	zero,zero,892
    dda0:	0000df30 	cmpltui	zero,zero,892
    dda4:	0000df30 	cmpltui	zero,zero,892
    dda8:	0000df30 	cmpltui	zero,zero,892
    ddac:	0000df30 	cmpltui	zero,zero,892
    ddb0:	0000df30 	cmpltui	zero,zero,892
    ddb4:	0000df30 	cmpltui	zero,zero,892
    ddb8:	0000df30 	cmpltui	zero,zero,892
    ddbc:	0000df30 	cmpltui	zero,zero,892
    ddc0:	0000df30 	cmpltui	zero,zero,892
    ddc4:	0000df30 	cmpltui	zero,zero,892
    ddc8:	0000df30 	cmpltui	zero,zero,892
    ddcc:	0000df30 	cmpltui	zero,zero,892
    ddd0:	0000df38 	rdprs	zero,zero,892
    ddd4:	0000df38 	rdprs	zero,zero,892
    ddd8:	0000df38 	rdprs	zero,zero,892
    dddc:	0000df38 	rdprs	zero,zero,892
    dde0:	0000df38 	rdprs	zero,zero,892
    dde4:	0000df38 	rdprs	zero,zero,892
    dde8:	0000df38 	rdprs	zero,zero,892
    ddec:	0000df38 	rdprs	zero,zero,892
    ddf0:	0000df40 	call	df4 <tx_send+0xc>
    ddf4:	0000df40 	call	df4 <tx_send+0xc>
    ddf8:	0000df40 	call	df4 <tx_send+0xc>
    ddfc:	0000df40 	call	df4 <tx_send+0xc>
    de00:	0000df40 	call	df4 <tx_send+0xc>
    de04:	0000df40 	call	df4 <tx_send+0xc>
    de08:	0000df40 	call	df4 <tx_send+0xc>
    de0c:	0000df40 	call	df4 <tx_send+0xc>
    de10:	0000df48 	cmpgei	zero,zero,893
    de14:	0000df48 	cmpgei	zero,zero,893
    de18:	0000df48 	cmpgei	zero,zero,893
    de1c:	0000df48 	cmpgei	zero,zero,893
    de20:	0000df48 	cmpgei	zero,zero,893
    de24:	0000df48 	cmpgei	zero,zero,893
    de28:	0000df48 	cmpgei	zero,zero,893
    de2c:	0000df48 	cmpgei	zero,zero,893
    de30:	0000df48 	cmpgei	zero,zero,893
    de34:	0000df48 	cmpgei	zero,zero,893
    de38:	0000df48 	cmpgei	zero,zero,893
    de3c:	0000df48 	cmpgei	zero,zero,893
    de40:	0000df48 	cmpgei	zero,zero,893
    de44:	0000df48 	cmpgei	zero,zero,893
    de48:	0000df48 	cmpgei	zero,zero,893
    de4c:	0000df48 	cmpgei	zero,zero,893
    de50:	0000df50 	cmplti	zero,zero,893
    de54:	0000df50 	cmplti	zero,zero,893
    de58:	0000df50 	cmplti	zero,zero,893
    de5c:	0000df50 	cmplti	zero,zero,893
    de60:	0000df50 	cmplti	zero,zero,893
    de64:	0000df50 	cmplti	zero,zero,893
    de68:	0000df50 	cmplti	zero,zero,893
    de6c:	0000df50 	cmplti	zero,zero,893
    de70:	0000df58 	cmpnei	zero,zero,893
    de74:	0000df58 	cmpnei	zero,zero,893
    de78:	0000df58 	cmpnei	zero,zero,893
    de7c:	0000df58 	cmpnei	zero,zero,893
    de80:	0000df58 	cmpnei	zero,zero,893
    de84:	0000df58 	cmpnei	zero,zero,893
    de88:	0000df58 	cmpnei	zero,zero,893
    de8c:	0000df58 	cmpnei	zero,zero,893
    de90:	0000df58 	cmpnei	zero,zero,893
    de94:	0000df58 	cmpnei	zero,zero,893
    de98:	0000df58 	cmpnei	zero,zero,893
    de9c:	0000df58 	cmpnei	zero,zero,893
    dea0:	0000df58 	cmpnei	zero,zero,893
    dea4:	0000df58 	cmpnei	zero,zero,893
    dea8:	0000df58 	cmpnei	zero,zero,893
    deac:	0000df58 	cmpnei	zero,zero,893
    deb0:	0000df60 	cmpeqi	zero,zero,893
    deb4:	0000df60 	cmpeqi	zero,zero,893
    deb8:	0000df60 	cmpeqi	zero,zero,893
    debc:	0000df60 	cmpeqi	zero,zero,893
    dec0:	0000df60 	cmpeqi	zero,zero,893
    dec4:	0000df60 	cmpeqi	zero,zero,893
    dec8:	0000df60 	cmpeqi	zero,zero,893
    decc:	0000df60 	cmpeqi	zero,zero,893
    ded0:	0000df60 	cmpeqi	zero,zero,893
    ded4:	0000df60 	cmpeqi	zero,zero,893
    ded8:	0000df60 	cmpeqi	zero,zero,893
    dedc:	0000df60 	cmpeqi	zero,zero,893
    dee0:	0000df60 	cmpeqi	zero,zero,893
    dee4:	0000df60 	cmpeqi	zero,zero,893
    dee8:	0000df60 	cmpeqi	zero,zero,893
    deec:	0000df60 	cmpeqi	zero,zero,893
    def0:	0000df60 	cmpeqi	zero,zero,893
    def4:	0000df60 	cmpeqi	zero,zero,893
    def8:	0000df60 	cmpeqi	zero,zero,893
    defc:	0000df60 	cmpeqi	zero,zero,893
    df00:	0000df60 	cmpeqi	zero,zero,893
    df04:	0000df60 	cmpeqi	zero,zero,893
    df08:	0000df60 	cmpeqi	zero,zero,893
    df0c:	0000df60 	cmpeqi	zero,zero,893
    df10:	0000df60 	cmpeqi	zero,zero,893
    df14:	0000df60 	cmpeqi	zero,zero,893
    df18:	0000df60 	cmpeqi	zero,zero,893
    df1c:	0000df60 	cmpeqi	zero,zero,893
    df20:	0000df60 	cmpeqi	zero,zero,893
    df24:	0000df60 	cmpeqi	zero,zero,893
    df28:	0000df60 	cmpeqi	zero,zero,893
    df2c:	0000df60 	cmpeqi	zero,zero,893
		case 0 ... 15:
			return 29;
    df30:	00800744 	movi	r2,29
    df34:	0000d706 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 28;
    df38:	00800704 	movi	r2,28
    df3c:	0000d506 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 24 ... 31:
			return 29;
    df40:	00800744 	movi	r2,29
    df44:	0000d306 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 32 ... 47:
			return 28;
    df48:	00800704 	movi	r2,28
    df4c:	0000d106 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 48 ... 55:
			return 29;
    df50:	00800744 	movi	r2,29
    df54:	0000cf06 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 56 ... 71:
			return 36;
    df58:	00800904 	movi	r2,36
    df5c:	0000cd06 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 72 ... 103:
			return 29;
    df60:	00800744 	movi	r2,29
    df64:	0000cb06 	br	e294 <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
    df68:	00800904 	movi	r2,36
    df6c:	0000c906 	br	e294 <fpll_lookup_cp_current+0x54c>
		}
	} else if (fvco < 12000000) {
    df70:	e0ffff17 	ldw	r3,-4(fp)
    df74:	00802df4 	movhi	r2,183
    df78:	1086bfc4 	addi	r2,r2,6911
    df7c:	10c07136 	bltu	r2,r3,e144 <fpll_lookup_cp_current+0x3fc>
		switch (m) {
    df80:	e0bffe17 	ldw	r2,-8(fp)
    df84:	10801628 	cmpgeui	r2,r2,88
    df88:	10006c1e 	bne	r2,zero,e13c <fpll_lookup_cp_current+0x3f4>
    df8c:	e0bffe17 	ldw	r2,-8(fp)
    df90:	100690ba 	slli	r3,r2,2
    df94:	00800074 	movhi	r2,1
    df98:	1885883a 	add	r2,r3,r2
    df9c:	10b7e917 	ldw	r2,-8284(r2)
    dfa0:	1000683a 	jmp	r2
    dfa4:	0000e104 	movi	zero,900
    dfa8:	0000e104 	movi	zero,900
    dfac:	0000e104 	movi	zero,900
    dfb0:	0000e104 	movi	zero,900
    dfb4:	0000e104 	movi	zero,900
    dfb8:	0000e104 	movi	zero,900
    dfbc:	0000e104 	movi	zero,900
    dfc0:	0000e104 	movi	zero,900
    dfc4:	0000e104 	movi	zero,900
    dfc8:	0000e104 	movi	zero,900
    dfcc:	0000e104 	movi	zero,900
    dfd0:	0000e104 	movi	zero,900
    dfd4:	0000e104 	movi	zero,900
    dfd8:	0000e104 	movi	zero,900
    dfdc:	0000e104 	movi	zero,900
    dfe0:	0000e104 	movi	zero,900
    dfe4:	0000e10c 	andi	zero,zero,900
    dfe8:	0000e10c 	andi	zero,zero,900
    dfec:	0000e10c 	andi	zero,zero,900
    dff0:	0000e10c 	andi	zero,zero,900
    dff4:	0000e10c 	andi	zero,zero,900
    dff8:	0000e10c 	andi	zero,zero,900
    dffc:	0000e10c 	andi	zero,zero,900
    e000:	0000e10c 	andi	zero,zero,900
    e004:	0000e114 	movui	zero,900
    e008:	0000e114 	movui	zero,900
    e00c:	0000e114 	movui	zero,900
    e010:	0000e114 	movui	zero,900
    e014:	0000e114 	movui	zero,900
    e018:	0000e114 	movui	zero,900
    e01c:	0000e114 	movui	zero,900
    e020:	0000e114 	movui	zero,900
    e024:	0000e11c 	xori	zero,zero,900
    e028:	0000e11c 	xori	zero,zero,900
    e02c:	0000e11c 	xori	zero,zero,900
    e030:	0000e11c 	xori	zero,zero,900
    e034:	0000e11c 	xori	zero,zero,900
    e038:	0000e11c 	xori	zero,zero,900
    e03c:	0000e11c 	xori	zero,zero,900
    e040:	0000e11c 	xori	zero,zero,900
    e044:	0000e124 	muli	zero,zero,900
    e048:	0000e124 	muli	zero,zero,900
    e04c:	0000e124 	muli	zero,zero,900
    e050:	0000e124 	muli	zero,zero,900
    e054:	0000e124 	muli	zero,zero,900
    e058:	0000e124 	muli	zero,zero,900
    e05c:	0000e124 	muli	zero,zero,900
    e060:	0000e124 	muli	zero,zero,900
    e064:	0000e124 	muli	zero,zero,900
    e068:	0000e124 	muli	zero,zero,900
    e06c:	0000e124 	muli	zero,zero,900
    e070:	0000e124 	muli	zero,zero,900
    e074:	0000e124 	muli	zero,zero,900
    e078:	0000e124 	muli	zero,zero,900
    e07c:	0000e124 	muli	zero,zero,900
    e080:	0000e124 	muli	zero,zero,900
    e084:	0000e12c 	andhi	zero,zero,900
    e088:	0000e12c 	andhi	zero,zero,900
    e08c:	0000e12c 	andhi	zero,zero,900
    e090:	0000e12c 	andhi	zero,zero,900
    e094:	0000e12c 	andhi	zero,zero,900
    e098:	0000e12c 	andhi	zero,zero,900
    e09c:	0000e12c 	andhi	zero,zero,900
    e0a0:	0000e12c 	andhi	zero,zero,900
    e0a4:	0000e12c 	andhi	zero,zero,900
    e0a8:	0000e12c 	andhi	zero,zero,900
    e0ac:	0000e12c 	andhi	zero,zero,900
    e0b0:	0000e12c 	andhi	zero,zero,900
    e0b4:	0000e12c 	andhi	zero,zero,900
    e0b8:	0000e12c 	andhi	zero,zero,900
    e0bc:	0000e12c 	andhi	zero,zero,900
    e0c0:	0000e12c 	andhi	zero,zero,900
    e0c4:	0000e12c 	andhi	zero,zero,900
    e0c8:	0000e12c 	andhi	zero,zero,900
    e0cc:	0000e12c 	andhi	zero,zero,900
    e0d0:	0000e12c 	andhi	zero,zero,900
    e0d4:	0000e12c 	andhi	zero,zero,900
    e0d8:	0000e12c 	andhi	zero,zero,900
    e0dc:	0000e12c 	andhi	zero,zero,900
    e0e0:	0000e12c 	andhi	zero,zero,900
    e0e4:	0000e134 	movhi	zero,900
    e0e8:	0000e134 	movhi	zero,900
    e0ec:	0000e134 	movhi	zero,900
    e0f0:	0000e134 	movhi	zero,900
    e0f4:	0000e134 	movhi	zero,900
    e0f8:	0000e134 	movhi	zero,900
    e0fc:	0000e134 	movhi	zero,900
    e100:	0000e134 	movhi	zero,900
		case 0 ... 15:
			return 36;
    e104:	00800904 	movi	r2,36
    e108:	00006206 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 29;
    e10c:	00800744 	movi	r2,29
    e110:	00006006 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 24 ... 31:
			return 36;
    e114:	00800904 	movi	r2,36
    e118:	00005e06 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 32 ... 39:
			return 28;
    e11c:	00800704 	movi	r2,28
    e120:	00005c06 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 40 ... 55:
			return 29;
    e124:	00800744 	movi	r2,29
    e128:	00005a06 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 56 ... 79:
			return 36;
    e12c:	00800904 	movi	r2,36
    e130:	00005806 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 80 ... 87:
			return 29;
    e134:	00800744 	movi	r2,29
    e138:	00005606 	br	e294 <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
    e13c:	00800904 	movi	r2,36
    e140:	00005406 	br	e294 <fpll_lookup_cp_current+0x54c>
		}
	} else {
		switch (m) {
    e144:	e0bffe17 	ldw	r2,-8(fp)
    e148:	10801028 	cmpgeui	r2,r2,64
    e14c:	1000501e 	bne	r2,zero,e290 <fpll_lookup_cp_current+0x548>
    e150:	e0bffe17 	ldw	r2,-8(fp)
    e154:	100690ba 	slli	r3,r2,2
    e158:	00800074 	movhi	r2,1
    e15c:	1885883a 	add	r2,r3,r2
    e160:	10b85a17 	ldw	r2,-7832(r2)
    e164:	1000683a 	jmp	r2
    e168:	0000e268 	cmpgeui	zero,zero,905
    e16c:	0000e268 	cmpgeui	zero,zero,905
    e170:	0000e268 	cmpgeui	zero,zero,905
    e174:	0000e268 	cmpgeui	zero,zero,905
    e178:	0000e268 	cmpgeui	zero,zero,905
    e17c:	0000e268 	cmpgeui	zero,zero,905
    e180:	0000e268 	cmpgeui	zero,zero,905
    e184:	0000e268 	cmpgeui	zero,zero,905
    e188:	0000e268 	cmpgeui	zero,zero,905
    e18c:	0000e268 	cmpgeui	zero,zero,905
    e190:	0000e268 	cmpgeui	zero,zero,905
    e194:	0000e268 	cmpgeui	zero,zero,905
    e198:	0000e268 	cmpgeui	zero,zero,905
    e19c:	0000e268 	cmpgeui	zero,zero,905
    e1a0:	0000e268 	cmpgeui	zero,zero,905
    e1a4:	0000e268 	cmpgeui	zero,zero,905
    e1a8:	0000e270 	cmpltui	zero,zero,905
    e1ac:	0000e270 	cmpltui	zero,zero,905
    e1b0:	0000e270 	cmpltui	zero,zero,905
    e1b4:	0000e270 	cmpltui	zero,zero,905
    e1b8:	0000e270 	cmpltui	zero,zero,905
    e1bc:	0000e270 	cmpltui	zero,zero,905
    e1c0:	0000e270 	cmpltui	zero,zero,905
    e1c4:	0000e270 	cmpltui	zero,zero,905
    e1c8:	0000e278 	rdprs	zero,zero,905
    e1cc:	0000e278 	rdprs	zero,zero,905
    e1d0:	0000e278 	rdprs	zero,zero,905
    e1d4:	0000e278 	rdprs	zero,zero,905
    e1d8:	0000e278 	rdprs	zero,zero,905
    e1dc:	0000e278 	rdprs	zero,zero,905
    e1e0:	0000e278 	rdprs	zero,zero,905
    e1e4:	0000e278 	rdprs	zero,zero,905
    e1e8:	0000e278 	rdprs	zero,zero,905
    e1ec:	0000e278 	rdprs	zero,zero,905
    e1f0:	0000e278 	rdprs	zero,zero,905
    e1f4:	0000e278 	rdprs	zero,zero,905
    e1f8:	0000e278 	rdprs	zero,zero,905
    e1fc:	0000e278 	rdprs	zero,zero,905
    e200:	0000e278 	rdprs	zero,zero,905
    e204:	0000e278 	rdprs	zero,zero,905
    e208:	0000e280 	call	e28 <tx_send+0x40>
    e20c:	0000e280 	call	e28 <tx_send+0x40>
    e210:	0000e280 	call	e28 <tx_send+0x40>
    e214:	0000e280 	call	e28 <tx_send+0x40>
    e218:	0000e280 	call	e28 <tx_send+0x40>
    e21c:	0000e280 	call	e28 <tx_send+0x40>
    e220:	0000e280 	call	e28 <tx_send+0x40>
    e224:	0000e280 	call	e28 <tx_send+0x40>
    e228:	0000e280 	call	e28 <tx_send+0x40>
    e22c:	0000e280 	call	e28 <tx_send+0x40>
    e230:	0000e280 	call	e28 <tx_send+0x40>
    e234:	0000e280 	call	e28 <tx_send+0x40>
    e238:	0000e280 	call	e28 <tx_send+0x40>
    e23c:	0000e280 	call	e28 <tx_send+0x40>
    e240:	0000e280 	call	e28 <tx_send+0x40>
    e244:	0000e280 	call	e28 <tx_send+0x40>
    e248:	0000e288 	cmpgei	zero,zero,906
    e24c:	0000e288 	cmpgei	zero,zero,906
    e250:	0000e288 	cmpgei	zero,zero,906
    e254:	0000e288 	cmpgei	zero,zero,906
    e258:	0000e288 	cmpgei	zero,zero,906
    e25c:	0000e288 	cmpgei	zero,zero,906
    e260:	0000e288 	cmpgei	zero,zero,906
    e264:	0000e288 	cmpgei	zero,zero,906
		case 0 ... 15:
			return 28;
    e268:	00800704 	movi	r2,28
    e26c:	00000906 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 36;
    e270:	00800904 	movi	r2,36
    e274:	00000706 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 24 ... 39:
			return 29;
    e278:	00800744 	movi	r2,29
    e27c:	00000506 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 40 ... 55:
			return 36;
    e280:	00800904 	movi	r2,36
    e284:	00000306 	br	e294 <fpll_lookup_cp_current+0x54c>
		case 56 ... 63:
			return 29;
    e288:	00800744 	movi	r2,29
    e28c:	00000106 	br	e294 <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
    e290:	00800904 	movi	r2,36
		}
	}
}
    e294:	e037883a 	mov	sp,fp
    e298:	df000017 	ldw	fp,0(sp)
    e29c:	dec00104 	addi	sp,sp,4
    e2a0:	f800283a 	ret

0000e2a4 <fpll_calc_params>:
* @brief fpll_calc_params
*******************************************************************************/
int32_t fpll_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_c0, uint32_t *best_fvco)
{
    e2a4:	deffec04 	addi	sp,sp,-80
    e2a8:	dfc01315 	stw	ra,76(sp)
    e2ac:	df001215 	stw	fp,72(sp)
    e2b0:	dc401115 	stw	r17,68(sp)
    e2b4:	dc001015 	stw	r16,64(sp)
    e2b8:	df001204 	addi	fp,sp,72
    e2bc:	e13ff115 	stw	r4,-60(fp)
    e2c0:	e17ff015 	stw	r5,-64(fp)
    e2c4:	e1bfef15 	stw	r6,-68(fp)
    e2c8:	e1ffee15 	stw	r7,-72(fp)
	uint32_t n, n_min, n_max, _n_min, _n_max;
	uint32_t m, m_min, m_max;
	uint32_t c0;
	uint32_t f, fvco, best_f;

	*best_n = *best_m = *best_c0 = *best_fvco = 0;
    e2cc:	e0800317 	ldw	r2,12(fp)
    e2d0:	10000015 	stw	zero,0(r2)
    e2d4:	e0800317 	ldw	r2,12(fp)
    e2d8:	10c00017 	ldw	r3,0(r2)
    e2dc:	e0800217 	ldw	r2,8(fp)
    e2e0:	10c00015 	stw	r3,0(r2)
    e2e4:	e0800217 	ldw	r2,8(fp)
    e2e8:	10c00017 	ldw	r3,0(r2)
    e2ec:	e0bfee17 	ldw	r2,-72(fp)
    e2f0:	10c00015 	stw	r3,0(r2)
    e2f4:	e0bfee17 	ldw	r2,-72(fp)
    e2f8:	10c00017 	ldw	r3,0(r2)
    e2fc:	e0bfef17 	ldw	r2,-68(fp)
    e300:	10c00015 	stw	r3,0(r2)

	best_f = ULONG_MAX;
    e304:	00bfffc4 	movi	r2,-1
    e308:	e0bffb15 	stw	r2,-20(fp)

	n_min = max_t(uint32_t, DIV_ROUND_UP(fref_khz, A10_FPLL_PFD_MAX), 1);
    e30c:	e0fff117 	ldw	r3,-60(fp)
    e310:	00ba97d4 	movui	r2,59999
    e314:	1887883a 	add	r3,r3,r2
    e318:	008000b4 	movhi	r2,2
    e31c:	10b52fc4 	addi	r2,r2,-11073
    e320:	10c0072e 	bgeu	r2,r3,e340 <fpll_calc_params+0x9c>
    e324:	e0fff117 	ldw	r3,-60(fp)
    e328:	00ba97d4 	movui	r2,59999
    e32c:	1885883a 	add	r2,r3,r2
    e330:	017a9814 	movui	r5,60000
    e334:	1009883a 	mov	r4,r2
    e338:	0012a540 	call	12a54 <__udivsi3>
    e33c:	00000106 	br	e344 <fpll_calc_params+0xa0>
    e340:	00800044 	movi	r2,1
    e344:	e0bffa15 	stw	r2,-24(fp)
	n_max = min_t(uint32_t, fref_khz / A10_FPLL_PFD_MIN, 31);
    e348:	e0fff117 	ldw	r3,-60(fp)
    e34c:	00800334 	movhi	r2,12
    e350:	10b4d5c4 	addi	r2,r2,-11433
    e354:	10c00536 	bltu	r2,r3,e36c <fpll_calc_params+0xc8>
    e358:	e0bff117 	ldw	r2,-60(fp)
    e35c:	01586a04 	movi	r5,25000
    e360:	1009883a 	mov	r4,r2
    e364:	0012a540 	call	12a54 <__udivsi3>
    e368:	00000106 	br	e370 <fpll_calc_params+0xcc>
    e36c:	008007c4 	movi	r2,31
    e370:	e0bff915 	stw	r2,-28(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_FPLL_VCO_MIN / 2, fref_khz) * n_min, 8);
    e374:	e0fff117 	ldw	r3,-60(fp)
    e378:	00800974 	movhi	r2,37
    e37c:	10a7bfc4 	addi	r2,r2,-24833
    e380:	1885883a 	add	r2,r3,r2
    e384:	e17ff117 	ldw	r5,-60(fp)
    e388:	1009883a 	mov	r4,r2
    e38c:	0012a540 	call	12a54 <__udivsi3>
    e390:	1007883a 	mov	r3,r2
    e394:	e0bffa17 	ldw	r2,-24(fp)
    e398:	1885383a 	mul	r2,r3,r2
    e39c:	10c00228 	cmpgeui	r3,r2,8
    e3a0:	1800011e 	bne	r3,zero,e3a8 <fpll_calc_params+0x104>
    e3a4:	00800204 	movi	r2,8
    e3a8:	e0bff815 	stw	r2,-32(fp)
	m_max = min_t(uint32_t, A10_FPLL_VCO_MAX / 2 * n_max / fref_khz, 127);
    e3ac:	e0fff917 	ldw	r3,-28(fp)
    e3b0:	00801af4 	movhi	r2,107
    e3b4:	10802504 	addi	r2,r2,148
    e3b8:	1885383a 	mul	r2,r3,r2
    e3bc:	e17ff117 	ldw	r5,-60(fp)
    e3c0:	1009883a 	mov	r4,r2
    e3c4:	0012a540 	call	12a54 <__udivsi3>
    e3c8:	10c02030 	cmpltui	r3,r2,128
    e3cc:	1800011e 	bne	r3,zero,e3d4 <fpll_calc_params+0x130>
    e3d0:	00801fc4 	movi	r2,127
    e3d4:	e0bff715 	stw	r2,-36(fp)
	m_min = ROUND_UP(m_min, 2);
    e3d8:	e0bff817 	ldw	r2,-32(fp)
    e3dc:	10800044 	addi	r2,r2,1
    e3e0:	1004d07a 	srli	r2,r2,1
    e3e4:	e0bff815 	stw	r2,-32(fp)

	for (m = m_min; m < m_max; m += 1) {
    e3e8:	e0bff817 	ldw	r2,-32(fp)
    e3ec:	e0bffc15 	stw	r2,-16(fp)
    e3f0:	00007e06 	br	e5ec <fpll_calc_params+0x348>
		_n_min = max_t(uint32_t, n_min, DIV_ROUND_UP(fref_khz * m, A10_FPLL_VCO_MAX / 2));
    e3f4:	e0fff117 	ldw	r3,-60(fp)
    e3f8:	e0bffc17 	ldw	r2,-16(fp)
    e3fc:	1887383a 	mul	r3,r3,r2
    e400:	00801af4 	movhi	r2,107
    e404:	108024c4 	addi	r2,r2,147
    e408:	1885883a 	add	r2,r3,r2
    e40c:	01401af4 	movhi	r5,107
    e410:	29402504 	addi	r5,r5,148
    e414:	1009883a 	mov	r4,r2
    e418:	0012a540 	call	12a54 <__udivsi3>
    e41c:	1007883a 	mov	r3,r2
    e420:	e0bffa17 	ldw	r2,-24(fp)
    e424:	10c0012e 	bgeu	r2,r3,e42c <fpll_calc_params+0x188>
    e428:	1805883a 	mov	r2,r3
    e42c:	e0bff615 	stw	r2,-40(fp)
		_n_max = min_t(uint32_t, n_max, fref_khz * m / (A10_FPLL_VCO_MIN / 2));
    e430:	e0fff117 	ldw	r3,-60(fp)
    e434:	e0bffc17 	ldw	r2,-16(fp)
    e438:	1885383a 	mul	r2,r3,r2
    e43c:	01400974 	movhi	r5,37
    e440:	2967c004 	addi	r5,r5,-24832
    e444:	1009883a 	mov	r4,r2
    e448:	0012a540 	call	12a54 <__udivsi3>
    e44c:	1007883a 	mov	r3,r2
    e450:	e0bff917 	ldw	r2,-28(fp)
    e454:	1880012e 	bgeu	r3,r2,e45c <fpll_calc_params+0x1b8>
    e458:	1805883a 	mov	r2,r3
    e45c:	e0bff515 	stw	r2,-44(fp)

		for (n = _n_min; n <= _n_max; n++) {
    e460:	e0bff617 	ldw	r2,-40(fp)
    e464:	e0bffd15 	stw	r2,-12(fp)
    e468:	00005a06 	br	e5d4 <fpll_calc_params+0x330>
			fvco = fref_khz * m * 2 / n;
    e46c:	e0fff117 	ldw	r3,-60(fp)
    e470:	e0bffc17 	ldw	r2,-16(fp)
    e474:	1885383a 	mul	r2,r3,r2
    e478:	1085883a 	add	r2,r2,r2
    e47c:	e17ffd17 	ldw	r5,-12(fp)
    e480:	1009883a 	mov	r4,r2
    e484:	0012a540 	call	12a54 <__udivsi3>
    e488:	e0bff415 	stw	r2,-48(fp)

			c0 = DIV_ROUND_CLOSEST(fvco, fout_khz * 4);
    e48c:	e13ff417 	ldw	r4,-48(fp)
    e490:	0014dac0 	call	14dac <__floatunsidf>
    e494:	1021883a 	mov	r16,r2
    e498:	1823883a 	mov	r17,r3
    e49c:	e0bff017 	ldw	r2,-64(fp)
    e4a0:	100490ba 	slli	r2,r2,2
    e4a4:	1009883a 	mov	r4,r2
    e4a8:	0014dac0 	call	14dac <__floatunsidf>
    e4ac:	1009883a 	mov	r4,r2
    e4b0:	180b883a 	mov	r5,r3
    e4b4:	200d883a 	mov	r6,r4
    e4b8:	280f883a 	mov	r7,r5
    e4bc:	8009883a 	mov	r4,r16
    e4c0:	880b883a 	mov	r5,r17
    e4c4:	00133d00 	call	133d0 <__divdf3>
    e4c8:	1009883a 	mov	r4,r2
    e4cc:	180b883a 	mov	r5,r3
    e4d0:	2005883a 	mov	r2,r4
    e4d4:	2807883a 	mov	r3,r5
    e4d8:	000d883a 	mov	r6,zero
    e4dc:	01cff834 	movhi	r7,16352
    e4e0:	1009883a 	mov	r4,r2
    e4e4:	180b883a 	mov	r5,r3
    e4e8:	0012b100 	call	12b10 <__adddf3>
    e4ec:	1009883a 	mov	r4,r2
    e4f0:	180b883a 	mov	r5,r3
    e4f4:	2005883a 	mov	r2,r4
    e4f8:	2807883a 	mov	r3,r5
    e4fc:	1009883a 	mov	r4,r2
    e500:	180b883a 	mov	r5,r3
    e504:	0011d640 	call	11d64 <__fixunsdfsi>
    e508:	e0bff315 	stw	r2,-52(fp)
			c0 = clamp_t(uint32_t, c0, 1, 512);
    e50c:	e0bff317 	ldw	r2,-52(fp)
    e510:	108000b0 	cmpltui	r2,r2,2
    e514:	1000051e 	bne	r2,zero,e52c <fpll_calc_params+0x288>
    e518:	e0bff317 	ldw	r2,-52(fp)
    e51c:	10c08070 	cmpltui	r3,r2,513
    e520:	1800031e 	bne	r3,zero,e530 <fpll_calc_params+0x28c>
    e524:	00808004 	movi	r2,512
    e528:	00000106 	br	e530 <fpll_calc_params+0x28c>
    e52c:	00800044 	movi	r2,1
    e530:	e0bff315 	stw	r2,-52(fp)
			f = fvco / (c0 * 4);
    e534:	e0bff317 	ldw	r2,-52(fp)
    e538:	100490ba 	slli	r2,r2,2
    e53c:	100b883a 	mov	r5,r2
    e540:	e13ff417 	ldw	r4,-48(fp)
    e544:	0012a540 	call	12a54 <__udivsi3>
    e548:	e0bff215 	stw	r2,-56(fp)

			if (abs(f - fout_khz) < abs(best_f - fout_khz)) {
    e54c:	e0fff217 	ldw	r3,-56(fp)
    e550:	e0bff017 	ldw	r2,-64(fp)
    e554:	1885c83a 	sub	r2,r3,r2
    e558:	1000010e 	bge	r2,zero,e560 <fpll_calc_params+0x2bc>
    e55c:	0085c83a 	sub	r2,zero,r2
    e560:	1009883a 	mov	r4,r2
    e564:	e0fffb17 	ldw	r3,-20(fp)
    e568:	e0bff017 	ldw	r2,-64(fp)
    e56c:	1885c83a 	sub	r2,r3,r2
    e570:	1000010e 	bge	r2,zero,e578 <fpll_calc_params+0x2d4>
    e574:	0085c83a 	sub	r2,zero,r2
    e578:	2080130e 	bge	r4,r2,e5c8 <fpll_calc_params+0x324>
				best_f = f;
    e57c:	e0bff217 	ldw	r2,-56(fp)
    e580:	e0bffb15 	stw	r2,-20(fp)
				*best_n = n;
    e584:	e0bfef17 	ldw	r2,-68(fp)
    e588:	e0fffd17 	ldw	r3,-12(fp)
    e58c:	10c00015 	stw	r3,0(r2)
				*best_m = m;
    e590:	e0bfee17 	ldw	r2,-72(fp)
    e594:	e0fffc17 	ldw	r3,-16(fp)
    e598:	10c00015 	stw	r3,0(r2)
				*best_c0 = c0;
    e59c:	e0800217 	ldw	r2,8(fp)
    e5a0:	e0fff317 	ldw	r3,-52(fp)
    e5a4:	10c00015 	stw	r3,0(r2)
				*best_fvco = fvco;
    e5a8:	e0800317 	ldw	r2,12(fp)
    e5ac:	e0fff417 	ldw	r3,-48(fp)
    e5b0:	10c00015 	stw	r3,0(r2)
				if (f == fout_khz)
    e5b4:	e0fff217 	ldw	r3,-56(fp)
    e5b8:	e0bff017 	ldw	r2,-64(fp)
    e5bc:	1880021e 	bne	r3,r2,e5c8 <fpll_calc_params+0x324>
					return 0;
    e5c0:	0005883a 	mov	r2,zero
    e5c4:	00000d06 	br	e5fc <fpll_calc_params+0x358>
		for (n = _n_min; n <= _n_max; n++) {
    e5c8:	e0bffd17 	ldw	r2,-12(fp)
    e5cc:	10800044 	addi	r2,r2,1
    e5d0:	e0bffd15 	stw	r2,-12(fp)
    e5d4:	e0bffd17 	ldw	r2,-12(fp)
    e5d8:	e0fff517 	ldw	r3,-44(fp)
    e5dc:	18bfa32e 	bgeu	r3,r2,e46c <__alt_mem_mcu_subsystem_ram_0+0x77fee46c>
	for (m = m_min; m < m_max; m += 1) {
    e5e0:	e0bffc17 	ldw	r2,-16(fp)
    e5e4:	10800044 	addi	r2,r2,1
    e5e8:	e0bffc15 	stw	r2,-16(fp)
    e5ec:	e0fffc17 	ldw	r3,-16(fp)
    e5f0:	e0bff717 	ldw	r2,-36(fp)
    e5f4:	18bf7f36 	bltu	r3,r2,e3f4 <__alt_mem_mcu_subsystem_ram_0+0x77fee3f4>
			}
		}
	}

	return -1;
    e5f8:	00bfffc4 	movi	r2,-1
}
    e5fc:	e6fffe04 	addi	sp,fp,-8
    e600:	dfc00317 	ldw	ra,12(sp)
    e604:	df000217 	ldw	fp,8(sp)
    e608:	dc400117 	ldw	r17,4(sp)
    e60c:	dc000017 	ldw	r16,0(sp)
    e610:	dec00404 	addi	sp,sp,16
    e614:	f800283a 	ret

0000e618 <fpll_round_rate>:

/*******************************************************************************
* @brief fpll_round_rate
*******************************************************************************/
uint32_t fpll_round_rate(uint32_t fout_khz, uint32_t fref_khz)
{
    e618:	defff304 	addi	sp,sp,-52
    e61c:	dfc00c15 	stw	ra,48(sp)
    e620:	df000b15 	stw	fp,44(sp)
    e624:	dc400a15 	stw	r17,40(sp)
    e628:	dc000915 	stw	r16,36(sp)
    e62c:	df000b04 	addi	fp,sp,44
    e630:	e13ff815 	stw	r4,-32(fp)
    e634:	e17ff715 	stw	r5,-36(fp)
	uint32_t n, m, c0;
	uint32_t fvco;
	uint32_t tmp;

	fpll_calc_params(fref_khz, fout_khz, &n, &m, &c0, &fvco);
    e638:	e13ffb04 	addi	r4,fp,-20
    e63c:	e0fffc04 	addi	r3,fp,-16
    e640:	e0bff904 	addi	r2,fp,-28
    e644:	d8800115 	stw	r2,4(sp)
    e648:	e0bffa04 	addi	r2,fp,-24
    e64c:	d8800015 	stw	r2,0(sp)
    e650:	200f883a 	mov	r7,r4
    e654:	180d883a 	mov	r6,r3
    e658:	e17ff817 	ldw	r5,-32(fp)
    e65c:	e13ff717 	ldw	r4,-36(fp)
    e660:	000e2a40 	call	e2a4 <fpll_calc_params>

	if (n == 0 || m == 0 || c0 == 0)
    e664:	e0bffc17 	ldw	r2,-16(fp)
    e668:	10000426 	beq	r2,zero,e67c <fpll_round_rate+0x64>
    e66c:	e0bffb17 	ldw	r2,-20(fp)
    e670:	10000226 	beq	r2,zero,e67c <fpll_round_rate+0x64>
    e674:	e0bffa17 	ldw	r2,-24(fp)
    e678:	1000021e 	bne	r2,zero,e684 <fpll_round_rate+0x6c>
		return -1;
    e67c:	00bfffc4 	movi	r2,-1
    e680:	00002906 	br	e728 <fpll_round_rate+0x110>

	tmp = (uint32_t)fref_khz * m;
    e684:	e0bffb17 	ldw	r2,-20(fp)
    e688:	e0fff717 	ldw	r3,-36(fp)
    e68c:	1885383a 	mul	r2,r3,r2
    e690:	e0bffd15 	stw	r2,-12(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, c0 * n * 2);
    e694:	e13ffd17 	ldw	r4,-12(fp)
    e698:	0014dac0 	call	14dac <__floatunsidf>
    e69c:	1021883a 	mov	r16,r2
    e6a0:	1823883a 	mov	r17,r3
    e6a4:	e0fffa17 	ldw	r3,-24(fp)
    e6a8:	e0bffc17 	ldw	r2,-16(fp)
    e6ac:	1885383a 	mul	r2,r3,r2
    e6b0:	1085883a 	add	r2,r2,r2
    e6b4:	1009883a 	mov	r4,r2
    e6b8:	0014dac0 	call	14dac <__floatunsidf>
    e6bc:	1009883a 	mov	r4,r2
    e6c0:	180b883a 	mov	r5,r3
    e6c4:	200d883a 	mov	r6,r4
    e6c8:	280f883a 	mov	r7,r5
    e6cc:	8009883a 	mov	r4,r16
    e6d0:	880b883a 	mov	r5,r17
    e6d4:	00133d00 	call	133d0 <__divdf3>
    e6d8:	1009883a 	mov	r4,r2
    e6dc:	180b883a 	mov	r5,r3
    e6e0:	2005883a 	mov	r2,r4
    e6e4:	2807883a 	mov	r3,r5
    e6e8:	000d883a 	mov	r6,zero
    e6ec:	01cff834 	movhi	r7,16352
    e6f0:	1009883a 	mov	r4,r2
    e6f4:	180b883a 	mov	r5,r3
    e6f8:	0012b100 	call	12b10 <__adddf3>
    e6fc:	1009883a 	mov	r4,r2
    e700:	180b883a 	mov	r5,r3
    e704:	2005883a 	mov	r2,r4
    e708:	2807883a 	mov	r3,r5
    e70c:	1009883a 	mov	r4,r2
    e710:	180b883a 	mov	r5,r3
    e714:	0011dd80 	call	11dd8 <__fixunsdfdi>
    e718:	1009883a 	mov	r4,r2
    e71c:	180b883a 	mov	r5,r3
    e720:	e13ffd15 	stw	r4,-12(fp)

	// fout frequency
	return min_t(uint32_t, tmp, LONG_MAX);
    e724:	e0bffd17 	ldw	r2,-12(fp)
}
    e728:	e6fffe04 	addi	sp,fp,-8
    e72c:	dfc00317 	ldw	ra,12(sp)
    e730:	df000217 	ldw	fp,8(sp)
    e734:	dc400117 	ldw	r17,4(sp)
    e738:	dc000017 	ldw	r16,0(sp)
    e73c:	dec00404 	addi	sp,sp,16
    e740:	f800283a 	ret

0000e744 <fpll_set_rate>:
/*******************************************************************************
* @brief fpll_set_rate
*******************************************************************************/
int32_t fpll_set_rate(xcvr_pll *fpll, uint32_t fout_khz,
	uint32_t fref_khz)
{
    e744:	defff104 	addi	sp,sp,-60
    e748:	dfc00e15 	stw	ra,56(sp)
    e74c:	df000d15 	stw	fp,52(sp)
    e750:	df000d04 	addi	fp,sp,52
    e754:	e13ff715 	stw	r4,-36(fp)
    e758:	e17ff615 	stw	r5,-40(fp)
    e75c:	e1bff515 	stw	r6,-44(fp)
	uint32_t n, m, c0;
	uint32_t fvco;
	uint32_t div0, div1;
	uint32_t lfr, cpc;

	fpll_calc_params(fref_khz, fout_khz, &n, &m, &c0, &fvco);
    e760:	e13ffa04 	addi	r4,fp,-24
    e764:	e0fffb04 	addi	r3,fp,-20
    e768:	e0bff804 	addi	r2,fp,-32
    e76c:	d8800115 	stw	r2,4(sp)
    e770:	e0bff904 	addi	r2,fp,-28
    e774:	d8800015 	stw	r2,0(sp)
    e778:	200f883a 	mov	r7,r4
    e77c:	180d883a 	mov	r6,r3
    e780:	e17ff617 	ldw	r5,-40(fp)
    e784:	e13ff517 	ldw	r4,-44(fp)
    e788:	000e2a40 	call	e2a4 <fpll_calc_params>
	printf("\tm: %d\n", m);
	printf("\tc0: %d\n", c0);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || c0 == 0)
    e78c:	e0bffb17 	ldw	r2,-20(fp)
    e790:	10000426 	beq	r2,zero,e7a4 <fpll_set_rate+0x60>
    e794:	e0bffa17 	ldw	r2,-24(fp)
    e798:	10000226 	beq	r2,zero,e7a4 <fpll_set_rate+0x60>
    e79c:	e0bff917 	ldw	r2,-28(fp)
    e7a0:	1000021e 	bne	r2,zero,e7ac <fpll_set_rate+0x68>
		return -1;
    e7a4:	00bfffc4 	movi	r2,-1
    e7a8:	00005b06 	br	e918 <fpll_set_rate+0x1d4>

	lfr = fpll_lookup_lf_resistance(fvco, m);
    e7ac:	e0bff817 	ldw	r2,-32(fp)
    e7b0:	e0fffa17 	ldw	r3,-24(fp)
    e7b4:	180b883a 	mov	r5,r3
    e7b8:	1009883a 	mov	r4,r2
    e7bc:	000dc500 	call	dc50 <fpll_lookup_lf_resistance>
    e7c0:	e0bfff15 	stw	r2,-4(fp)
	cpc = fpll_lookup_cp_current(fvco, m);
    e7c4:	e0bff817 	ldw	r2,-32(fp)
    e7c8:	e0fffa17 	ldw	r3,-24(fp)
    e7cc:	180b883a 	mov	r5,r3
    e7d0:	1009883a 	mov	r4,r2
    e7d4:	000dd480 	call	dd48 <fpll_lookup_cp_current>
    e7d8:	e0bffe15 	stw	r2,-8(fp)

	if (c0 >= 512)
    e7dc:	e0bff917 	ldw	r2,-28(fp)
    e7e0:	10808030 	cmpltui	r2,r2,512
    e7e4:	1000011e 	bne	r2,zero,e7ec <fpll_set_rate+0xa8>
		c0 = 0;
    e7e8:	e03ff915 	stw	zero,-28(fp)

	div0 = m & 0xff;
    e7ec:	e0bffa17 	ldw	r2,-24(fp)
    e7f0:	10803fcc 	andi	r2,r2,255
    e7f4:	e0bffd15 	stw	r2,-12(fp)
	div1 = ((n << 3) & 0xf8);
    e7f8:	e0bffb17 	ldw	r2,-20(fp)
    e7fc:	100490fa 	slli	r2,r2,3
    e800:	10803fcc 	andi	r2,r2,255
    e804:	e0bffc15 	stw	r2,-16(fp)

	altera_a10_acquire_arbitration(fpll);
    e808:	e13ff717 	ldw	r4,-36(fp)
    e80c:	000fdc80 	call	fdc8 <altera_a10_acquire_arbitration>

	a10_pll_write(fpll, FPLL_REG_DIV_COUNTER0, div0);
    e810:	e1bffd17 	ldw	r6,-12(fp)
    e814:	01404ac4 	movi	r5,299
    e818:	e13ff717 	ldw	r4,-36(fp)
    e81c:	000fcf80 	call	fcf8 <a10_pll_write>
	a10_pll_write(fpll, FPLL_REG_DIV_COUNTER1, div1);
    e820:	e1bffc17 	ldw	r6,-16(fp)
    e824:	01404b04 	movi	r5,300
    e828:	e13ff717 	ldw	r4,-36(fp)
    e82c:	000fcf80 	call	fcf8 <a10_pll_write>

	div0 = c0 & 0xff;
    e830:	e0bff917 	ldw	r2,-28(fp)
    e834:	10803fcc 	andi	r2,r2,255
    e838:	e0bffd15 	stw	r2,-12(fp)
	div1 = (c0 & 0x100) >> 4;
    e83c:	e0bff917 	ldw	r2,-28(fp)
    e840:	1004d13a 	srli	r2,r2,4
    e844:	1080040c 	andi	r2,r2,16
    e848:	e0bffc15 	stw	r2,-16(fp)

	a10_pll_write(fpll, FPLL_REG_C_COUNTER2, m / 2);
    e84c:	e0bffa17 	ldw	r2,-24(fp)
    e850:	1004d07a 	srli	r2,r2,1
    e854:	100d883a 	mov	r6,r2
    e858:	014043c4 	movi	r5,271
    e85c:	e13ff717 	ldw	r4,-36(fp)
    e860:	000fcf80 	call	fcf8 <a10_pll_write>
	a10_pll_write(fpll, FPLL_REG_C_COUNTER3, div0);
    e864:	e1bffd17 	ldw	r6,-12(fp)
    e868:	01404404 	movi	r5,272
    e86c:	e13ff717 	ldw	r4,-36(fp)
    e870:	000fcf80 	call	fcf8 <a10_pll_write>
	pll_update(fpll, FPLL_REG_C_COUNTER4, 0x0f, div1);
    e874:	e1fffc17 	ldw	r7,-16(fp)
    e878:	018003c4 	movi	r6,15
    e87c:	01404444 	movi	r5,273
    e880:	e13ff717 	ldw	r4,-36(fp)
    e884:	000fd440 	call	fd44 <pll_update>

	pll_update(fpll, 0x133, 0x0c, lfr << 2);
    e888:	e0bfff17 	ldw	r2,-4(fp)
    e88c:	100490ba 	slli	r2,r2,2
    e890:	100f883a 	mov	r7,r2
    e894:	01800304 	movi	r6,12
    e898:	01404cc4 	movi	r5,307
    e89c:	e13ff717 	ldw	r4,-36(fp)
    e8a0:	000fd440 	call	fd44 <pll_update>
	pll_update(fpll, 0x134, 0x70, (cpc & 0x7) << 4);
    e8a4:	e0bffe17 	ldw	r2,-8(fp)
    e8a8:	1004913a 	slli	r2,r2,4
    e8ac:	10801c0c 	andi	r2,r2,112
    e8b0:	100f883a 	mov	r7,r2
    e8b4:	01801c04 	movi	r6,112
    e8b8:	01404d04 	movi	r5,308
    e8bc:	e13ff717 	ldw	r4,-36(fp)
    e8c0:	000fd440 	call	fd44 <pll_update>
	pll_update(fpll, 0x135, 0x07, (cpc & 0x38) >> 3);
    e8c4:	e0bffe17 	ldw	r2,-8(fp)
    e8c8:	1004d0fa 	srli	r2,r2,3
    e8cc:	108001cc 	andi	r2,r2,7
    e8d0:	100f883a 	mov	r7,r2
    e8d4:	018001c4 	movi	r6,7
    e8d8:	01404d44 	movi	r5,309
    e8dc:	e13ff717 	ldw	r4,-36(fp)
    e8e0:	000fd440 	call	fd44 <pll_update>

	pll_update(fpll, 0x100, 0x2, 0x2);
    e8e4:	01c00084 	movi	r7,2
    e8e8:	01800084 	movi	r6,2
    e8ec:	01404004 	movi	r5,256
    e8f0:	e13ff717 	ldw	r4,-36(fp)
    e8f4:	000fd440 	call	fd44 <pll_update>
	altera_a10_release_arbitration(fpll, TRUE);
    e8f8:	01400044 	movi	r5,1
    e8fc:	e13ff717 	ldw	r4,-36(fp)
    e900:	000feb00 	call	feb0 <altera_a10_release_arbitration>
	pll_calibration_check(fpll);
    e904:	e13ff717 	ldw	r4,-36(fp)
    e908:	000ff080 	call	ff08 <pll_calibration_check>

	fpll->initial_recalc = FALSE;
    e90c:	e0bff717 	ldw	r2,-36(fp)
    e910:	10000205 	stb	zero,8(r2)

	return 0;
    e914:	0005883a 	mov	r2,zero
}
    e918:	e037883a 	mov	sp,fp
    e91c:	dfc00117 	ldw	ra,4(sp)
    e920:	df000017 	ldw	fp,0(sp)
    e924:	dec00204 	addi	sp,sp,8
    e928:	f800283a 	ret

0000e92c <fpll_recalc_rate>:
/*******************************************************************************
* @brief fpll_recalc_rate
*******************************************************************************/
uint32_t fpll_recalc_rate(xcvr_pll *fpll,
	uint32_t fref_khz)
{
    e92c:	defff404 	addi	sp,sp,-48
    e930:	dfc00b15 	stw	ra,44(sp)
    e934:	df000a15 	stw	fp,40(sp)
    e938:	dc400915 	stw	r17,36(sp)
    e93c:	dc000815 	stw	r16,32(sp)
    e940:	df000a04 	addi	fp,sp,40
    e944:	e13ff715 	stw	r4,-36(fp)
    e948:	e17ff615 	stw	r5,-40(fp)
	uint32_t m, n, c0;
	uint32_t tmp;
	uint32_t div0, div1;

	altera_a10_acquire_arbitration(fpll);
    e94c:	e13ff717 	ldw	r4,-36(fp)
    e950:	000fdc80 	call	fdc8 <altera_a10_acquire_arbitration>

	 a10_pll_read(fpll, FPLL_REG_DIV_COUNTER0, &div0);
    e954:	e0bff904 	addi	r2,fp,-28
    e958:	100d883a 	mov	r6,r2
    e95c:	01404ac4 	movi	r5,299
    e960:	e13ff717 	ldw	r4,-36(fp)
    e964:	000fca80 	call	fca8 <a10_pll_read>
	 a10_pll_read(fpll, FPLL_REG_DIV_COUNTER1, &div1);
    e968:	e0bff804 	addi	r2,fp,-32
    e96c:	100d883a 	mov	r6,r2
    e970:	01404b04 	movi	r5,300
    e974:	e13ff717 	ldw	r4,-36(fp)
    e978:	000fca80 	call	fca8 <a10_pll_read>

	n = (div1 >> 3) & 0x1f;
    e97c:	e0bff817 	ldw	r2,-32(fp)
    e980:	1004d0fa 	srli	r2,r2,3
    e984:	108007cc 	andi	r2,r2,31
    e988:	e0bffc15 	stw	r2,-16(fp)
	m = div0 | ((div1 & 0x1) << 8);
    e98c:	e0bff817 	ldw	r2,-32(fp)
    e990:	1004923a 	slli	r2,r2,8
    e994:	10c0400c 	andi	r3,r2,256
    e998:	e0bff917 	ldw	r2,-28(fp)
    e99c:	1884b03a 	or	r2,r3,r2
    e9a0:	e0bffd15 	stw	r2,-12(fp)

	if (m == 0)
    e9a4:	e0bffd17 	ldw	r2,-12(fp)
    e9a8:	1000021e 	bne	r2,zero,e9b4 <fpll_recalc_rate+0x88>
		m = 512;
    e9ac:	00808004 	movi	r2,512
    e9b0:	e0bffd15 	stw	r2,-12(fp)

	 a10_pll_read(fpll, FPLL_REG_C_COUNTER3, &div0);
    e9b4:	e0bff904 	addi	r2,fp,-28
    e9b8:	100d883a 	mov	r6,r2
    e9bc:	01404404 	movi	r5,272
    e9c0:	e13ff717 	ldw	r4,-36(fp)
    e9c4:	000fca80 	call	fca8 <a10_pll_read>
	 a10_pll_read(fpll, FPLL_REG_C_COUNTER4, &div1);
    e9c8:	e0bff804 	addi	r2,fp,-32
    e9cc:	100d883a 	mov	r6,r2
    e9d0:	01404444 	movi	r5,273
    e9d4:	e13ff717 	ldw	r4,-36(fp)
    e9d8:	000fca80 	call	fca8 <a10_pll_read>

	altera_a10_release_arbitration(fpll, FALSE);
    e9dc:	000b883a 	mov	r5,zero
    e9e0:	e13ff717 	ldw	r4,-36(fp)
    e9e4:	000feb00 	call	feb0 <altera_a10_release_arbitration>

	c0 = div0 | ((div1 & 0x8) << 5);
    e9e8:	e0bff817 	ldw	r2,-32(fp)
    e9ec:	1004917a 	slli	r2,r2,5
    e9f0:	10c0400c 	andi	r3,r2,256
    e9f4:	e0bff917 	ldw	r2,-28(fp)
    e9f8:	1884b03a 	or	r2,r3,r2
    e9fc:	e0bffb15 	stw	r2,-20(fp)

	if (c0 == 0 || n == 0)
    ea00:	e0bffb17 	ldw	r2,-20(fp)
    ea04:	10000226 	beq	r2,zero,ea10 <fpll_recalc_rate+0xe4>
    ea08:	e0bffc17 	ldw	r2,-16(fp)
    ea0c:	1000021e 	bne	r2,zero,ea18 <fpll_recalc_rate+0xec>
		return 0;
    ea10:	0005883a 	mov	r2,zero
    ea14:	00003106 	br	eadc <fpll_recalc_rate+0x1b0>

	// round rate
	tmp = (uint32_t)fref_khz * m;
    ea18:	e0fff617 	ldw	r3,-40(fp)
    ea1c:	e0bffd17 	ldw	r2,-12(fp)
    ea20:	1885383a 	mul	r2,r3,r2
    ea24:	e0bffa15 	stw	r2,-24(fp)
	tmp = DIV_ROUND_CLOSEST(tmp, c0 * n * 2);
    ea28:	e13ffa17 	ldw	r4,-24(fp)
    ea2c:	0014dac0 	call	14dac <__floatunsidf>
    ea30:	1021883a 	mov	r16,r2
    ea34:	1823883a 	mov	r17,r3
    ea38:	e0fffb17 	ldw	r3,-20(fp)
    ea3c:	e0bffc17 	ldw	r2,-16(fp)
    ea40:	1885383a 	mul	r2,r3,r2
    ea44:	1085883a 	add	r2,r2,r2
    ea48:	1009883a 	mov	r4,r2
    ea4c:	0014dac0 	call	14dac <__floatunsidf>
    ea50:	1009883a 	mov	r4,r2
    ea54:	180b883a 	mov	r5,r3
    ea58:	200d883a 	mov	r6,r4
    ea5c:	280f883a 	mov	r7,r5
    ea60:	8009883a 	mov	r4,r16
    ea64:	880b883a 	mov	r5,r17
    ea68:	00133d00 	call	133d0 <__divdf3>
    ea6c:	1009883a 	mov	r4,r2
    ea70:	180b883a 	mov	r5,r3
    ea74:	2005883a 	mov	r2,r4
    ea78:	2807883a 	mov	r3,r5
    ea7c:	000d883a 	mov	r6,zero
    ea80:	01cff834 	movhi	r7,16352
    ea84:	1009883a 	mov	r4,r2
    ea88:	180b883a 	mov	r5,r3
    ea8c:	0012b100 	call	12b10 <__adddf3>
    ea90:	1009883a 	mov	r4,r2
    ea94:	180b883a 	mov	r5,r3
    ea98:	2005883a 	mov	r2,r4
    ea9c:	2807883a 	mov	r3,r5
    eaa0:	1009883a 	mov	r4,r2
    eaa4:	180b883a 	mov	r5,r3
    eaa8:	0011d640 	call	11d64 <__fixunsdfsi>
    eaac:	e0bffa15 	stw	r2,-24(fp)

	/*
	 * Recalc configuration in case ref clock is not the same as in the FPGA
	 * project.
	 */
	if (tmp != 0 && fpll->initial_recalc)
    eab0:	e0bffa17 	ldw	r2,-24(fp)
    eab4:	10000826 	beq	r2,zero,ead8 <fpll_recalc_rate+0x1ac>
    eab8:	e0bff717 	ldw	r2,-36(fp)
    eabc:	10800203 	ldbu	r2,8(r2)
    eac0:	10803fcc 	andi	r2,r2,255
    eac4:	10000426 	beq	r2,zero,ead8 <fpll_recalc_rate+0x1ac>
		fpll_set_rate(fpll, tmp, fref_khz);
    eac8:	e1bff617 	ldw	r6,-40(fp)
    eacc:	e17ffa17 	ldw	r5,-24(fp)
    ead0:	e13ff717 	ldw	r4,-36(fp)
    ead4:	000e7440 	call	e744 <fpll_set_rate>

	return min_t(uint32_t, tmp, ULONG_MAX);
    ead8:	e0bffa17 	ldw	r2,-24(fp)
}
    eadc:	e6fffe04 	addi	sp,fp,-8
    eae0:	dfc00317 	ldw	ra,12(sp)
    eae4:	df000217 	ldw	fp,8(sp)
    eae8:	dc400117 	ldw	r17,4(sp)
    eaec:	dc000017 	ldw	r16,0(sp)
    eaf0:	dec00404 	addi	sp,sp,16
    eaf4:	f800283a 	ret

0000eaf8 <altera_a10_cdr_lookup_vco_speed>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_vco_speed
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_vco_speed(uint32_t fvco)
{
    eaf8:	defffe04 	addi	sp,sp,-8
    eafc:	df000115 	stw	fp,4(sp)
    eb00:	df000104 	addi	fp,sp,4
    eb04:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 7000000)
    eb08:	e0ffff17 	ldw	r3,-4(fp)
    eb0c:	00801af4 	movhi	r2,107
    eb10:	10b3efc4 	addi	r2,r2,-12353
    eb14:	10c00236 	bltu	r2,r3,eb20 <altera_a10_cdr_lookup_vco_speed+0x28>
		return 3;
    eb18:	008000c4 	movi	r2,3
    eb1c:	00000706 	br	eb3c <altera_a10_cdr_lookup_vco_speed+0x44>
	else if (fvco < 12500000)
    eb20:	e0ffff17 	ldw	r3,-4(fp)
    eb24:	00802ff4 	movhi	r2,191
    eb28:	10af07c4 	addi	r2,r2,-17377
    eb2c:	10c00236 	bltu	r2,r3,eb38 <altera_a10_cdr_lookup_vco_speed+0x40>
		return 2;
    eb30:	00800084 	movi	r2,2
    eb34:	00000106 	br	eb3c <altera_a10_cdr_lookup_vco_speed+0x44>
	else
		return 0;
    eb38:	0005883a 	mov	r2,zero
}
    eb3c:	e037883a 	mov	sp,fp
    eb40:	df000017 	ldw	fp,0(sp)
    eb44:	dec00104 	addi	sp,sp,4
    eb48:	f800283a 	ret

0000eb4c <altera_a10_cdr_lookup_vco_speed_fix>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_vco_speed_fix
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_vco_speed_fix(uint32_t fvco)
{
    eb4c:	defffe04 	addi	sp,sp,-8
    eb50:	df000115 	stw	fp,4(sp)
    eb54:	df000104 	addi	fp,sp,4
    eb58:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 6060000)
    eb5c:	e0ffff17 	ldw	r3,-4(fp)
    eb60:	00801734 	movhi	r2,92
    eb64:	109df7c4 	addi	r2,r2,30687
    eb68:	10c00236 	bltu	r2,r3,eb74 <altera_a10_cdr_lookup_vco_speed_fix+0x28>
		return 60;
    eb6c:	00800f04 	movi	r2,60
    eb70:	00001f06 	br	ebf0 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 7060000)
    eb74:	e0ffff17 	ldw	r3,-4(fp)
    eb78:	00801b34 	movhi	r2,108
    eb7c:	10ae87c4 	addi	r2,r2,-17889
    eb80:	10c00236 	bltu	r2,r3,eb8c <altera_a10_cdr_lookup_vco_speed_fix+0x40>
		return 74;
    eb84:	00801284 	movi	r2,74
    eb88:	00001906 	br	ebf0 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 9060000)
    eb8c:	e0ffff17 	ldw	r3,-4(fp)
    eb90:	008022b4 	movhi	r2,138
    eb94:	108fa7c4 	addi	r2,r2,16031
    eb98:	10c00236 	bltu	r2,r3,eba4 <altera_a10_cdr_lookup_vco_speed_fix+0x58>
		return 90;
    eb9c:	00801684 	movi	r2,90
    eba0:	00001306 	br	ebf0 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 11350000)
    eba4:	e0ffff17 	ldw	r3,-4(fp)
    eba8:	00802b74 	movhi	r2,173
    ebac:	108bfbc4 	addi	r2,r2,12271
    ebb0:	10c00236 	bltu	r2,r3,ebbc <altera_a10_cdr_lookup_vco_speed_fix+0x70>
		return 116;
    ebb4:	00801d04 	movi	r2,116
    ebb8:	00000d06 	br	ebf0 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 12760000)
    ebbc:	e0ffff17 	ldw	r3,-4(fp)
    ebc0:	008030f4 	movhi	r2,195
    ebc4:	10acefc4 	addi	r2,r2,-19521
    ebc8:	10c00236 	bltu	r2,r3,ebd4 <altera_a10_cdr_lookup_vco_speed_fix+0x88>
		return 150;
    ebcc:	00802584 	movi	r2,150
    ebd0:	00000706 	br	ebf0 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 13460000)
    ebd4:	e0ffff17 	ldw	r3,-4(fp)
    ebd8:	00803374 	movhi	r2,205
    ebdc:	109887c4 	addi	r2,r2,25119
    ebe0:	10c00236 	bltu	r2,r3,ebec <altera_a10_cdr_lookup_vco_speed_fix+0xa0>
		return 159;
    ebe4:	008027c4 	movi	r2,159
    ebe8:	00000106 	br	ebf0 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else
		return 174;
    ebec:	00802b84 	movi	r2,174
}
    ebf0:	e037883a 	mov	sp,fp
    ebf4:	df000017 	ldw	fp,0(sp)
    ebf8:	dec00104 	addi	sp,sp,4
    ebfc:	f800283a 	ret

0000ec00 <altera_a10_cdr_lookup_cp_current_pd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_cp_current_pd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_cp_current_pd(uint32_t fvco,
	uint32_t lpd)
{
    ec00:	defffd04 	addi	sp,sp,-12
    ec04:	df000215 	stw	fp,8(sp)
    ec08:	df000204 	addi	fp,sp,8
    ec0c:	e13fff15 	stw	r4,-4(fp)
    ec10:	e17ffe15 	stw	r5,-8(fp)
	if (lpd == 1 && fvco < 12000000)
    ec14:	e0bffe17 	ldw	r2,-8(fp)
    ec18:	10800058 	cmpnei	r2,r2,1
    ec1c:	1000061e 	bne	r2,zero,ec38 <altera_a10_cdr_lookup_cp_current_pd+0x38>
    ec20:	e0ffff17 	ldw	r3,-4(fp)
    ec24:	00802df4 	movhi	r2,183
    ec28:	1086bfc4 	addi	r2,r2,6911
    ec2c:	10c00236 	bltu	r2,r3,ec38 <altera_a10_cdr_lookup_cp_current_pd+0x38>
		return 3;
    ec30:	008000c4 	movi	r2,3
    ec34:	00000106 	br	ec3c <altera_a10_cdr_lookup_cp_current_pd+0x3c>
	else
		return 4;
    ec38:	00800104 	movi	r2,4
}
    ec3c:	e037883a 	mov	sp,fp
    ec40:	df000017 	ldw	fp,0(sp)
    ec44:	dec00104 	addi	sp,sp,4
    ec48:	f800283a 	ret

0000ec4c <altera_a10_cdr_lookup_clklow_div>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_clklow_div
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_clklow_div(uint32_t fref_khz)
{
    ec4c:	defffe04 	addi	sp,sp,-8
    ec50:	df000115 	stw	fp,4(sp)
    ec54:	df000104 	addi	fp,sp,4
    ec58:	e13fff15 	stw	r4,-4(fp)
	if (fref_khz > 400000)
    ec5c:	e0ffff17 	ldw	r3,-4(fp)
    ec60:	008001b4 	movhi	r2,6
    ec64:	1086a004 	addi	r2,r2,6784
    ec68:	10c0022e 	bgeu	r2,r3,ec74 <altera_a10_cdr_lookup_clklow_div+0x28>
		return 1;
    ec6c:	00800044 	movi	r2,1
    ec70:	00000106 	br	ec78 <altera_a10_cdr_lookup_clklow_div+0x2c>
	else
		return 0;
    ec74:	0005883a 	mov	r2,zero
}
    ec78:	e037883a 	mov	sp,fp
    ec7c:	df000017 	ldw	fp,0(sp)
    ec80:	dec00104 	addi	sp,sp,4
    ec84:	f800283a 	ret

0000ec88 <altera_a10_cdr_lookup_fastlock>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_fastlock
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_fastlock(uint32_t lpd)
{
    ec88:	defffe04 	addi	sp,sp,-8
    ec8c:	df000115 	stw	fp,4(sp)
    ec90:	df000104 	addi	fp,sp,4
    ec94:	e13fff15 	stw	r4,-4(fp)
	if (lpd == 16)
    ec98:	e0bfff17 	ldw	r2,-4(fp)
    ec9c:	10800418 	cmpnei	r2,r2,16
    eca0:	1000021e 	bne	r2,zero,ecac <altera_a10_cdr_lookup_fastlock+0x24>
		return 1;
    eca4:	00800044 	movi	r2,1
    eca8:	00000106 	br	ecb0 <altera_a10_cdr_lookup_fastlock+0x28>
	else
		return 0;
    ecac:	0005883a 	mov	r2,zero
}
    ecb0:	e037883a 	mov	sp,fp
    ecb4:	df000017 	ldw	fp,0(sp)
    ecb8:	dec00104 	addi	sp,sp,4
    ecbc:	f800283a 	ret

0000ecc0 <altera_a10_cdr_lookup_lf_resistor_pd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_lf_resistor_pd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_lf_resistor_pd(uint32_t fvco,
	uint32_t lpd)
{
    ecc0:	defffd04 	addi	sp,sp,-12
    ecc4:	df000215 	stw	fp,8(sp)
    ecc8:	df000204 	addi	fp,sp,8
    eccc:	e13fff15 	stw	r4,-4(fp)
    ecd0:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 7000000) {
    ecd4:	e0ffff17 	ldw	r3,-4(fp)
    ecd8:	00801af4 	movhi	r2,107
    ecdc:	10b3efc4 	addi	r2,r2,-12353
    ece0:	10c00d36 	bltu	r2,r3,ed18 <altera_a10_cdr_lookup_lf_resistor_pd+0x58>
		switch (lpd) {
    ece4:	e0bffe17 	ldw	r2,-8(fp)
    ece8:	10c000a0 	cmpeqi	r3,r2,2
    ecec:	1800061e 	bne	r3,zero,ed08 <altera_a10_cdr_lookup_lf_resistor_pd+0x48>
    ecf0:	10c00120 	cmpeqi	r3,r2,4
    ecf4:	1800041e 	bne	r3,zero,ed08 <altera_a10_cdr_lookup_lf_resistor_pd+0x48>
    ecf8:	10800060 	cmpeqi	r2,r2,1
    ecfc:	10000426 	beq	r2,zero,ed10 <altera_a10_cdr_lookup_lf_resistor_pd+0x50>
		case 1:
			return 2;
    ed00:	00800084 	movi	r2,2
    ed04:	00000d06 	br	ed3c <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		case 2:
		case 4:
			return 3;
    ed08:	008000c4 	movi	r2,3
    ed0c:	00000b06 	br	ed3c <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		default:
			return 0;
    ed10:	0005883a 	mov	r2,zero
    ed14:	00000906 	br	ed3c <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		}
	} else {
		switch (lpd) {
    ed18:	e0bffe17 	ldw	r2,-8(fp)
    ed1c:	0080062e 	bgeu	zero,r2,ed38 <altera_a10_cdr_lookup_lf_resistor_pd+0x78>
    ed20:	10c000f0 	cmpltui	r3,r2,3
    ed24:	1800021e 	bne	r3,zero,ed30 <altera_a10_cdr_lookup_lf_resistor_pd+0x70>
    ed28:	10800120 	cmpeqi	r2,r2,4
    ed2c:	10000226 	beq	r2,zero,ed38 <altera_a10_cdr_lookup_lf_resistor_pd+0x78>
		case 1:
		case 2:
		case 4:
			return 3;
    ed30:	008000c4 	movi	r2,3
    ed34:	00000106 	br	ed3c <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		default:
			return 0;
    ed38:	0005883a 	mov	r2,zero
		}
	}
}
    ed3c:	e037883a 	mov	sp,fp
    ed40:	df000017 	ldw	fp,0(sp)
    ed44:	dec00104 	addi	sp,sp,4
    ed48:	f800283a 	ret

0000ed4c <altera_a10_cdr_lookup_lf_resistor_pfd>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_lf_resistor_pfd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_lf_resistor_pfd(uint32_t fvco,
	uint32_t m, uint32_t lpfd) {
    ed4c:	defffc04 	addi	sp,sp,-16
    ed50:	df000315 	stw	fp,12(sp)
    ed54:	df000304 	addi	fp,sp,12
    ed58:	e13fff15 	stw	r4,-4(fp)
    ed5c:	e17ffe15 	stw	r5,-8(fp)
    ed60:	e1bffd15 	stw	r6,-12(fp)
	if (fvco < 7000000) {
    ed64:	e0ffff17 	ldw	r3,-4(fp)
    ed68:	00801af4 	movhi	r2,107
    ed6c:	10b3efc4 	addi	r2,r2,-12353
    ed70:	10c00a36 	bltu	r2,r3,ed9c <altera_a10_cdr_lookup_lf_resistor_pfd+0x50>
		switch (m*lpfd) {
    ed74:	e0fffe17 	ldw	r3,-8(fp)
    ed78:	e0bffd17 	ldw	r2,-12(fp)
    ed7c:	1885383a 	mul	r2,r3,r2
    ed80:	10bffe04 	addi	r2,r2,-8
    ed84:	108009a8 	cmpgeui	r2,r2,38
    ed88:	1000021e 	bne	r2,zero,ed94 <altera_a10_cdr_lookup_lf_resistor_pfd+0x48>
		case 8 ... 45:
			return 2;
    ed8c:	00800084 	movi	r2,2
    ed90:	00004706 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    ed94:	008000c4 	movi	r2,3
    ed98:	00004506 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else if (fvco < 9000000) {
    ed9c:	e0ffff17 	ldw	r3,-4(fp)
    eda0:	00802274 	movhi	r2,137
    eda4:	10950fc4 	addi	r2,r2,21567
    eda8:	10c01536 	bltu	r2,r3,ee00 <altera_a10_cdr_lookup_lf_resistor_pfd+0xb4>
		switch (m*lpfd) {
    edac:	e0fffe17 	ldw	r3,-8(fp)
    edb0:	e0bffd17 	ldw	r2,-12(fp)
    edb4:	1885383a 	mul	r2,r3,r2
    edb8:	10c01228 	cmpgeui	r3,r2,72
    edbc:	1800051e 	bne	r3,zero,edd4 <altera_a10_cdr_lookup_lf_resistor_pfd+0x88>
    edc0:	10c00ea8 	cmpgeui	r3,r2,58
    edc4:	1800081e 	bne	r3,zero,ede8 <altera_a10_cdr_lookup_lf_resistor_pfd+0x9c>
    edc8:	10800230 	cmpltui	r2,r2,8
    edcc:	10000a1e 	bne	r2,zero,edf8 <altera_a10_cdr_lookup_lf_resistor_pfd+0xac>
    edd0:	00000306 	br	ede0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x94>
    edd4:	108015a8 	cmpgeui	r2,r2,86
    edd8:	1000071e 	bne	r2,zero,edf8 <altera_a10_cdr_lookup_lf_resistor_pfd+0xac>
    eddc:	00000406 	br	edf0 <altera_a10_cdr_lookup_lf_resistor_pfd+0xa4>
		case 8 ... 57:
			return 2;
    ede0:	00800084 	movi	r2,2
    ede4:	00003206 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 58 ... 71:
			return 3;
    ede8:	008000c4 	movi	r2,3
    edec:	00003006 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 72 ... 85:
			return 2;
    edf0:	00800084 	movi	r2,2
    edf4:	00002e06 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    edf8:	008000c4 	movi	r2,3
    edfc:	00002c06 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else if (fvco < 12000000) {
    ee00:	e0ffff17 	ldw	r3,-4(fp)
    ee04:	00802df4 	movhi	r2,183
    ee08:	1086bfc4 	addi	r2,r2,6911
    ee0c:	10c01936 	bltu	r2,r3,ee74 <altera_a10_cdr_lookup_lf_resistor_pfd+0x128>
		switch (m*lpfd) {
    ee10:	e0fffe17 	ldw	r3,-8(fp)
    ee14:	e0bffd17 	ldw	r2,-12(fp)
    ee18:	1885383a 	mul	r2,r3,r2
    ee1c:	10c01228 	cmpgeui	r3,r2,72
    ee20:	1800051e 	bne	r3,zero,ee38 <altera_a10_cdr_lookup_lf_resistor_pfd+0xec>
    ee24:	10c00728 	cmpgeui	r3,r2,28
    ee28:	18000a1e 	bne	r3,zero,ee54 <altera_a10_cdr_lookup_lf_resistor_pfd+0x108>
    ee2c:	10800230 	cmpltui	r2,r2,8
    ee30:	10000e1e 	bne	r2,zero,ee6c <altera_a10_cdr_lookup_lf_resistor_pfd+0x120>
    ee34:	00000506 	br	ee4c <altera_a10_cdr_lookup_lf_resistor_pfd+0x100>
    ee38:	10c015b0 	cmpltui	r3,r2,86
    ee3c:	1800071e 	bne	r3,zero,ee5c <altera_a10_cdr_lookup_lf_resistor_pfd+0x110>
    ee40:	108020a8 	cmpgeui	r2,r2,130
    ee44:	1000091e 	bne	r2,zero,ee6c <altera_a10_cdr_lookup_lf_resistor_pfd+0x120>
    ee48:	00000606 	br	ee64 <altera_a10_cdr_lookup_lf_resistor_pfd+0x118>
		case 8 ... 27:
			return 1;
    ee4c:	00800044 	movi	r2,1
    ee50:	00001706 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 28 ... 71:
			return 2;
    ee54:	00800084 	movi	r2,2
    ee58:	00001506 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 72 ... 85:
			return 3;
    ee5c:	008000c4 	movi	r2,3
    ee60:	00001306 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 86 ... 129:
			return 2;
    ee64:	00800084 	movi	r2,2
    ee68:	00001106 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    ee6c:	008000c4 	movi	r2,3
    ee70:	00000f06 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else {
		switch (m*lpfd) {
    ee74:	e0fffe17 	ldw	r3,-8(fp)
    ee78:	e0bffd17 	ldw	r2,-12(fp)
    ee7c:	1885383a 	mul	r2,r3,r2
    ee80:	10c00230 	cmpltui	r3,r2,8
    ee84:	1800091e 	bne	r3,zero,eeac <altera_a10_cdr_lookup_lf_resistor_pfd+0x160>
    ee88:	10c00730 	cmpltui	r3,r2,28
    ee8c:	1800031e 	bne	r3,zero,ee9c <altera_a10_cdr_lookup_lf_resistor_pfd+0x150>
    ee90:	10800ea8 	cmpgeui	r2,r2,58
    ee94:	1000051e 	bne	r2,zero,eeac <altera_a10_cdr_lookup_lf_resistor_pfd+0x160>
    ee98:	00000206 	br	eea4 <altera_a10_cdr_lookup_lf_resistor_pfd+0x158>
		case 8 ... 27:
			return 1;
    ee9c:	00800044 	movi	r2,1
    eea0:	00000306 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 28 ... 57:
			return 2;
    eea4:	00800084 	movi	r2,2
    eea8:	00000106 	br	eeb0 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    eeac:	008000c4 	movi	r2,3
		}
	}
}
    eeb0:	e037883a 	mov	sp,fp
    eeb4:	df000017 	ldw	fp,0(sp)
    eeb8:	dec00104 	addi	sp,sp,4
    eebc:	f800283a 	ret

0000eec0 <altera_a10_cdr_lookup_cp_current_pfd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_cp_current_pfd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_cp_current_pfd(uint32_t fvco,
	uint32_t m, uint32_t lpfd)
{
    eec0:	defffc04 	addi	sp,sp,-16
    eec4:	df000315 	stw	fp,12(sp)
    eec8:	df000304 	addi	fp,sp,12
    eecc:	e13fff15 	stw	r4,-4(fp)
    eed0:	e17ffe15 	stw	r5,-8(fp)
    eed4:	e1bffd15 	stw	r6,-12(fp)
	if (fvco < 7000000) {
    eed8:	e0ffff17 	ldw	r3,-4(fp)
    eedc:	00801af4 	movhi	r2,107
    eee0:	10b3efc4 	addi	r2,r2,-12353
    eee4:	10c01736 	bltu	r2,r3,ef44 <altera_a10_cdr_lookup_cp_current_pfd+0x84>
		switch (m*lpfd) {
    eee8:	e0fffe17 	ldw	r3,-8(fp)
    eeec:	e0bffd17 	ldw	r2,-12(fp)
    eef0:	1885383a 	mul	r2,r3,r2
    eef4:	10c00ba8 	cmpgeui	r3,r2,46
    eef8:	1800031e 	bne	r3,zero,ef08 <altera_a10_cdr_lookup_cp_current_pfd+0x48>
    eefc:	10800928 	cmpgeui	r2,r2,36
    ef00:	1000081e 	bne	r2,zero,ef24 <altera_a10_cdr_lookup_cp_current_pfd+0x64>
    ef04:	00000506 	br	ef1c <altera_a10_cdr_lookup_cp_current_pfd+0x5c>
    ef08:	10c01230 	cmpltui	r3,r2,72
    ef0c:	1800071e 	bne	r3,zero,ef2c <altera_a10_cdr_lookup_cp_current_pfd+0x6c>
    ef10:	10801c28 	cmpgeui	r2,r2,112
    ef14:	1000091e 	bne	r2,zero,ef3c <altera_a10_cdr_lookup_cp_current_pfd+0x7c>
    ef18:	00000606 	br	ef34 <altera_a10_cdr_lookup_cp_current_pfd+0x74>
		case 0 ... 35:
			return 2;
    ef1c:	00800084 	movi	r2,2
    ef20:	0000ca06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 45:
			return 3;
    ef24:	008000c4 	movi	r2,3
    ef28:	0000c806 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 71:
			return 1;
    ef2c:	00800044 	movi	r2,1
    ef30:	0000c606 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 111:
			return 2;
    ef34:	00800084 	movi	r2,2
    ef38:	0000c406 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
    ef3c:	008000c4 	movi	r2,3
    ef40:	0000c206 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else if (fvco < 9000000) {
    ef44:	e0ffff17 	ldw	r3,-4(fp)
    ef48:	00802274 	movhi	r2,137
    ef4c:	10950fc4 	addi	r2,r2,21567
    ef50:	10c02836 	bltu	r2,r3,eff4 <altera_a10_cdr_lookup_cp_current_pfd+0x134>
		switch (m*lpfd) {
    ef54:	e0fffe17 	ldw	r3,-8(fp)
    ef58:	e0bffd17 	ldw	r2,-12(fp)
    ef5c:	1885383a 	mul	r2,r3,r2
    ef60:	10c01228 	cmpgeui	r3,r2,72
    ef64:	1800071e 	bne	r3,zero,ef84 <altera_a10_cdr_lookup_cp_current_pfd+0xc4>
    ef68:	10c00ea8 	cmpgeui	r3,r2,58
    ef6c:	1800151e 	bne	r3,zero,efc4 <altera_a10_cdr_lookup_cp_current_pfd+0x104>
    ef70:	10c00ba8 	cmpgeui	r3,r2,46
    ef74:	1800111e 	bne	r3,zero,efbc <altera_a10_cdr_lookup_cp_current_pfd+0xfc>
    ef78:	10800728 	cmpgeui	r2,r2,28
    ef7c:	10000d1e 	bne	r2,zero,efb4 <altera_a10_cdr_lookup_cp_current_pfd+0xf4>
    ef80:	00000a06 	br	efac <altera_a10_cdr_lookup_cp_current_pfd+0xec>
    ef84:	10c020a8 	cmpgeui	r3,r2,130
    ef88:	1800031e 	bne	r3,zero,ef98 <altera_a10_cdr_lookup_cp_current_pfd+0xd8>
    ef8c:	108015a8 	cmpgeui	r2,r2,86
    ef90:	1000101e 	bne	r2,zero,efd4 <altera_a10_cdr_lookup_cp_current_pfd+0x114>
    ef94:	00000d06 	br	efcc <altera_a10_cdr_lookup_cp_current_pfd+0x10c>
    ef98:	10c023b0 	cmpltui	r3,r2,142
    ef9c:	18000f1e 	bne	r3,zero,efdc <altera_a10_cdr_lookup_cp_current_pfd+0x11c>
    efa0:	10802da8 	cmpgeui	r2,r2,182
    efa4:	1000111e 	bne	r2,zero,efec <altera_a10_cdr_lookup_cp_current_pfd+0x12c>
    efa8:	00000e06 	br	efe4 <altera_a10_cdr_lookup_cp_current_pfd+0x124>
		case 0 ... 27:
			return 1;
    efac:	00800044 	movi	r2,1
    efb0:	0000a606 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 45:
			return 2;
    efb4:	00800084 	movi	r2,2
    efb8:	0000a406 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 57:
			return 3;
    efbc:	008000c4 	movi	r2,3
    efc0:	0000a206 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 58 ... 71:
			return 1;
    efc4:	00800044 	movi	r2,1
    efc8:	0000a006 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 85:
			return 4;
    efcc:	00800104 	movi	r2,4
    efd0:	00009e06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 86 ... 129:
			return 2;
    efd4:	00800084 	movi	r2,2
    efd8:	00009c06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 130 ... 141:
			return 3;
    efdc:	008000c4 	movi	r2,3
    efe0:	00009a06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 142 ... 181:
			return 2;
    efe4:	00800084 	movi	r2,2
    efe8:	00009806 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
    efec:	008000c4 	movi	r2,3
    eff0:	00009606 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else if (fvco < 12000000) {
    eff4:	e0ffff17 	ldw	r3,-4(fp)
    eff8:	00802df4 	movhi	r2,183
    effc:	1086bfc4 	addi	r2,r2,6911
    f000:	10c01b36 	bltu	r2,r3,f070 <altera_a10_cdr_lookup_cp_current_pfd+0x1b0>
		switch (m*lpfd) {
    f004:	e0fffe17 	ldw	r3,-8(fp)
    f008:	e0bffd17 	ldw	r2,-12(fp)
    f00c:	1885383a 	mul	r2,r3,r2
    f010:	10c01228 	cmpgeui	r3,r2,72
    f014:	1800051e 	bne	r3,zero,f02c <altera_a10_cdr_lookup_cp_current_pfd+0x16c>
    f018:	10c00928 	cmpgeui	r3,r2,36
    f01c:	18000c1e 	bne	r3,zero,f050 <altera_a10_cdr_lookup_cp_current_pfd+0x190>
    f020:	10800730 	cmpltui	r2,r2,28
    f024:	1000061e 	bne	r2,zero,f040 <altera_a10_cdr_lookup_cp_current_pfd+0x180>
    f028:	00000706 	br	f048 <altera_a10_cdr_lookup_cp_current_pfd+0x188>
    f02c:	10c015b0 	cmpltui	r3,r2,86
    f030:	1800091e 	bne	r3,zero,f058 <altera_a10_cdr_lookup_cp_current_pfd+0x198>
    f034:	108020a8 	cmpgeui	r2,r2,130
    f038:	10000b1e 	bne	r2,zero,f068 <altera_a10_cdr_lookup_cp_current_pfd+0x1a8>
    f03c:	00000806 	br	f060 <altera_a10_cdr_lookup_cp_current_pfd+0x1a0>
		case 0 ... 27:
			return 3;
    f040:	008000c4 	movi	r2,3
    f044:	00008106 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 35:
			return 1;
    f048:	00800044 	movi	r2,1
    f04c:	00007f06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 71:
			return 2;
    f050:	00800084 	movi	r2,2
    f054:	00007d06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 85:
			return 1;
    f058:	00800044 	movi	r2,1
    f05c:	00007b06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 86 ... 129:
			return 4;
    f060:	00800104 	movi	r2,4
    f064:	00007906 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 2;
    f068:	00800084 	movi	r2,2
    f06c:	00007706 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else {
		switch (m*lpfd) {
    f070:	e0fffe17 	ldw	r3,-8(fp)
    f074:	e0bffd17 	ldw	r2,-12(fp)
    f078:	1885383a 	mul	r2,r3,r2
    f07c:	10c01828 	cmpgeui	r3,r2,96
    f080:	1800711e 	bne	r3,zero,f248 <altera_a10_cdr_lookup_cp_current_pfd+0x388>
    f084:	100690ba 	slli	r3,r2,2
    f088:	00800074 	movhi	r2,1
    f08c:	1885883a 	add	r2,r3,r2
    f090:	10bc2617 	ldw	r2,-3944(r2)
    f094:	1000683a 	jmp	r2
    f098:	0000f218 	cmpnei	zero,zero,968
    f09c:	0000f218 	cmpnei	zero,zero,968
    f0a0:	0000f218 	cmpnei	zero,zero,968
    f0a4:	0000f218 	cmpnei	zero,zero,968
    f0a8:	0000f218 	cmpnei	zero,zero,968
    f0ac:	0000f218 	cmpnei	zero,zero,968
    f0b0:	0000f218 	cmpnei	zero,zero,968
    f0b4:	0000f218 	cmpnei	zero,zero,968
    f0b8:	0000f218 	cmpnei	zero,zero,968
    f0bc:	0000f218 	cmpnei	zero,zero,968
    f0c0:	0000f218 	cmpnei	zero,zero,968
    f0c4:	0000f218 	cmpnei	zero,zero,968
    f0c8:	0000f218 	cmpnei	zero,zero,968
    f0cc:	0000f218 	cmpnei	zero,zero,968
    f0d0:	0000f218 	cmpnei	zero,zero,968
    f0d4:	0000f218 	cmpnei	zero,zero,968
    f0d8:	0000f218 	cmpnei	zero,zero,968
    f0dc:	0000f218 	cmpnei	zero,zero,968
    f0e0:	0000f218 	cmpnei	zero,zero,968
    f0e4:	0000f218 	cmpnei	zero,zero,968
    f0e8:	0000f218 	cmpnei	zero,zero,968
    f0ec:	0000f218 	cmpnei	zero,zero,968
    f0f0:	0000f218 	cmpnei	zero,zero,968
    f0f4:	0000f218 	cmpnei	zero,zero,968
    f0f8:	0000f218 	cmpnei	zero,zero,968
    f0fc:	0000f218 	cmpnei	zero,zero,968
    f100:	0000f218 	cmpnei	zero,zero,968
    f104:	0000f218 	cmpnei	zero,zero,968
    f108:	0000f220 	cmpeqi	zero,zero,968
    f10c:	0000f220 	cmpeqi	zero,zero,968
    f110:	0000f220 	cmpeqi	zero,zero,968
    f114:	0000f220 	cmpeqi	zero,zero,968
    f118:	0000f220 	cmpeqi	zero,zero,968
    f11c:	0000f220 	cmpeqi	zero,zero,968
    f120:	0000f220 	cmpeqi	zero,zero,968
    f124:	0000f220 	cmpeqi	zero,zero,968
    f128:	0000f228 	cmpgeui	zero,zero,968
    f12c:	0000f228 	cmpgeui	zero,zero,968
    f130:	0000f228 	cmpgeui	zero,zero,968
    f134:	0000f228 	cmpgeui	zero,zero,968
    f138:	0000f228 	cmpgeui	zero,zero,968
    f13c:	0000f228 	cmpgeui	zero,zero,968
    f140:	0000f228 	cmpgeui	zero,zero,968
    f144:	0000f228 	cmpgeui	zero,zero,968
    f148:	0000f228 	cmpgeui	zero,zero,968
    f14c:	0000f228 	cmpgeui	zero,zero,968
    f150:	0000f230 	cmpltui	zero,zero,968
    f154:	0000f230 	cmpltui	zero,zero,968
    f158:	0000f230 	cmpltui	zero,zero,968
    f15c:	0000f230 	cmpltui	zero,zero,968
    f160:	0000f230 	cmpltui	zero,zero,968
    f164:	0000f230 	cmpltui	zero,zero,968
    f168:	0000f230 	cmpltui	zero,zero,968
    f16c:	0000f230 	cmpltui	zero,zero,968
    f170:	0000f230 	cmpltui	zero,zero,968
    f174:	0000f230 	cmpltui	zero,zero,968
    f178:	0000f230 	cmpltui	zero,zero,968
    f17c:	0000f230 	cmpltui	zero,zero,968
    f180:	0000f238 	rdprs	zero,zero,968
    f184:	0000f238 	rdprs	zero,zero,968
    f188:	0000f238 	rdprs	zero,zero,968
    f18c:	0000f238 	rdprs	zero,zero,968
    f190:	0000f238 	rdprs	zero,zero,968
    f194:	0000f238 	rdprs	zero,zero,968
    f198:	0000f238 	rdprs	zero,zero,968
    f19c:	0000f238 	rdprs	zero,zero,968
    f1a0:	0000f238 	rdprs	zero,zero,968
    f1a4:	0000f238 	rdprs	zero,zero,968
    f1a8:	0000f238 	rdprs	zero,zero,968
    f1ac:	0000f238 	rdprs	zero,zero,968
    f1b0:	0000f238 	rdprs	zero,zero,968
    f1b4:	0000f238 	rdprs	zero,zero,968
    f1b8:	0000f240 	call	f24 <tx_send+0x13c>
    f1bc:	0000f240 	call	f24 <tx_send+0x13c>
    f1c0:	0000f240 	call	f24 <tx_send+0x13c>
    f1c4:	0000f240 	call	f24 <tx_send+0x13c>
    f1c8:	0000f240 	call	f24 <tx_send+0x13c>
    f1cc:	0000f240 	call	f24 <tx_send+0x13c>
    f1d0:	0000f240 	call	f24 <tx_send+0x13c>
    f1d4:	0000f240 	call	f24 <tx_send+0x13c>
    f1d8:	0000f240 	call	f24 <tx_send+0x13c>
    f1dc:	0000f240 	call	f24 <tx_send+0x13c>
    f1e0:	0000f240 	call	f24 <tx_send+0x13c>
    f1e4:	0000f240 	call	f24 <tx_send+0x13c>
    f1e8:	0000f240 	call	f24 <tx_send+0x13c>
    f1ec:	0000f240 	call	f24 <tx_send+0x13c>
    f1f0:	0000f240 	call	f24 <tx_send+0x13c>
    f1f4:	0000f240 	call	f24 <tx_send+0x13c>
    f1f8:	0000f240 	call	f24 <tx_send+0x13c>
    f1fc:	0000f240 	call	f24 <tx_send+0x13c>
    f200:	0000f240 	call	f24 <tx_send+0x13c>
    f204:	0000f240 	call	f24 <tx_send+0x13c>
    f208:	0000f240 	call	f24 <tx_send+0x13c>
    f20c:	0000f240 	call	f24 <tx_send+0x13c>
    f210:	0000f240 	call	f24 <tx_send+0x13c>
    f214:	0000f240 	call	f24 <tx_send+0x13c>
		case 0 ... 27:
			return 4;
    f218:	00800104 	movi	r2,4
    f21c:	00000b06 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 35:
			return 1;
    f220:	00800044 	movi	r2,1
    f224:	00000906 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 45:
			return 2;
    f228:	00800084 	movi	r2,2
    f22c:	00000706 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 57:
			return 3;
    f230:	008000c4 	movi	r2,3
    f234:	00000506 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 58 ... 71:
			return 1;
    f238:	00800044 	movi	r2,1
    f23c:	00000306 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 95:
			return 2;
    f240:	00800084 	movi	r2,2
    f244:	00000106 	br	f24c <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
    f248:	008000c4 	movi	r2,3
		}
	}
}
    f24c:	e037883a 	mov	sp,fp
    f250:	df000017 	ldw	fp,0(sp)
    f254:	dec00104 	addi	sp,sp,4
    f258:	f800283a 	ret

0000f25c <altera_a10_cdr_calc_params>:
*******************************************************************************/
void altera_a10_cdr_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_lpfd, uint32_t *best_lpd,
	uint32_t *best_fvco)
{
    f25c:	defff004 	addi	sp,sp,-64
    f260:	dfc00f15 	stw	ra,60(sp)
    f264:	df000e15 	stw	fp,56(sp)
    f268:	df000e04 	addi	fp,sp,56
    f26c:	e13ff515 	stw	r4,-44(fp)
    f270:	e17ff415 	stw	r5,-48(fp)
    f274:	e1bff315 	stw	r6,-52(fp)
    f278:	e1fff215 	stw	r7,-56(fp)
	uint32_t m, m_min, m_max;
	uint32_t n, lpd, lpfd, lpfd_min;
	uint32_t fvco, target_fvco;
	uint32_t pfd;

	*best_n = *best_m = *best_lpfd = *best_lpd = *best_fvco = 0;
    f27c:	e0800417 	ldw	r2,16(fp)
    f280:	10000015 	stw	zero,0(r2)
    f284:	e0800417 	ldw	r2,16(fp)
    f288:	10c00017 	ldw	r3,0(r2)
    f28c:	e0800317 	ldw	r2,12(fp)
    f290:	10c00015 	stw	r3,0(r2)
    f294:	e0800317 	ldw	r2,12(fp)
    f298:	10c00017 	ldw	r3,0(r2)
    f29c:	e0800217 	ldw	r2,8(fp)
    f2a0:	10c00015 	stw	r3,0(r2)
    f2a4:	e0800217 	ldw	r2,8(fp)
    f2a8:	10c00017 	ldw	r3,0(r2)
    f2ac:	e0bff217 	ldw	r2,-56(fp)
    f2b0:	10c00015 	stw	r3,0(r2)
    f2b4:	e0bff217 	ldw	r2,-56(fp)
    f2b8:	10c00017 	ldw	r3,0(r2)
    f2bc:	e0bff317 	ldw	r2,-52(fp)
    f2c0:	10c00015 	stw	r3,0(r2)

	for (lpd = 1; lpd < 16; lpd *= 2) {
    f2c4:	00800044 	movi	r2,1
    f2c8:	e0bffd15 	stw	r2,-12(fp)
    f2cc:	00000a06 	br	f2f8 <altera_a10_cdr_calc_params+0x9c>
		if (fout_khz >= A10_CDR_PLL_VCO_MIN / lpd)
    f2d0:	e17ffd17 	ldw	r5,-12(fp)
    f2d4:	010012f4 	movhi	r4,75
    f2d8:	21312804 	addi	r4,r4,-15200
    f2dc:	0012a540 	call	12a54 <__udivsi3>
    f2e0:	1007883a 	mov	r3,r2
    f2e4:	e0bff417 	ldw	r2,-48(fp)
    f2e8:	10c0072e 	bgeu	r2,r3,f308 <altera_a10_cdr_calc_params+0xac>
	for (lpd = 1; lpd < 16; lpd *= 2) {
    f2ec:	e0bffd17 	ldw	r2,-12(fp)
    f2f0:	1085883a 	add	r2,r2,r2
    f2f4:	e0bffd15 	stw	r2,-12(fp)
    f2f8:	e0bffd17 	ldw	r2,-12(fp)
    f2fc:	10800430 	cmpltui	r2,r2,16
    f300:	103ff31e 	bne	r2,zero,f2d0 <__alt_mem_mcu_subsystem_ram_0+0x77fef2d0>
    f304:	00000106 	br	f30c <altera_a10_cdr_calc_params+0xb0>
			break;
    f308:	0001883a 	nop
	}

	target_fvco = fout_khz * lpd;
    f30c:	e0fff417 	ldw	r3,-48(fp)
    f310:	e0bffd17 	ldw	r2,-12(fp)
    f314:	1885383a 	mul	r2,r3,r2
    f318:	e0bffa15 	stw	r2,-24(fp)

	if (fout_khz * lpd > 5200000)
    f31c:	e0fff417 	ldw	r3,-48(fp)
    f320:	e0bffd17 	ldw	r2,-12(fp)
    f324:	1887383a 	mul	r3,r3,r2
    f328:	008013f4 	movhi	r2,79
    f32c:	10962004 	addi	r2,r2,22656
    f330:	10c0032e 	bgeu	r2,r3,f340 <altera_a10_cdr_calc_params+0xe4>
		lpfd_min = 2;
    f334:	00800084 	movi	r2,2
    f338:	e0bffb15 	stw	r2,-20(fp)
    f33c:	00000206 	br	f348 <altera_a10_cdr_calc_params+0xec>
	else
		lpfd_min = 1;
    f340:	00800044 	movi	r2,1
    f344:	e0bffb15 	stw	r2,-20(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_CDR_PLL_VCO_MIN / 2, fref_khz), 8);
    f348:	e0fff517 	ldw	r3,-44(fp)
    f34c:	00800974 	movhi	r2,37
    f350:	109893c4 	addi	r2,r2,25167
    f354:	1885883a 	add	r2,r3,r2
    f358:	e17ff517 	ldw	r5,-44(fp)
    f35c:	1009883a 	mov	r4,r2
    f360:	0012a540 	call	12a54 <__udivsi3>
    f364:	10c00228 	cmpgeui	r3,r2,8
    f368:	1800011e 	bne	r3,zero,f370 <altera_a10_cdr_calc_params+0x114>
    f36c:	00800204 	movi	r2,8
    f370:	e0bff915 	stw	r2,-28(fp)
	m_max = min_t(uint32_t, A10_CDR_PLL_VCO_MAX * 8 / lpfd_min / fref_khz, 127);
    f374:	e17ffb17 	ldw	r5,-20(fp)
    f378:	0101aff4 	movhi	r4,1727
    f37c:	2112e004 	addi	r4,r4,19328
    f380:	0012a540 	call	12a54 <__udivsi3>
    f384:	e17ff517 	ldw	r5,-44(fp)
    f388:	1009883a 	mov	r4,r2
    f38c:	0012a540 	call	12a54 <__udivsi3>
    f390:	10c02030 	cmpltui	r3,r2,128
    f394:	1800011e 	bne	r3,zero,f39c <altera_a10_cdr_calc_params+0x140>
    f398:	00801fc4 	movi	r2,127
    f39c:	e0bff815 	stw	r2,-32(fp)

	for (n = 1; n <= 8; n *= 2) {
    f3a0:	00800044 	movi	r2,1
    f3a4:	e0bffe15 	stw	r2,-8(fp)
    f3a8:	00004a06 	br	f4d4 <altera_a10_cdr_calc_params+0x278>
		pfd = fref_khz / n;
    f3ac:	e17ffe17 	ldw	r5,-8(fp)
    f3b0:	e13ff517 	ldw	r4,-44(fp)
    f3b4:	0012a540 	call	12a54 <__udivsi3>
    f3b8:	e0bff715 	stw	r2,-36(fp)
		if (pfd < A10_CDR_PLL_PFD_MIN)
    f3bc:	e0bff717 	ldw	r2,-36(fp)
    f3c0:	10b0d428 	cmpgeui	r2,r2,50000
    f3c4:	10004726 	beq	r2,zero,f4e4 <altera_a10_cdr_calc_params+0x288>
			break;
		if (pfd > A10_CDR_PLL_PFD_MAX)
    f3c8:	e0fff717 	ldw	r3,-36(fp)
    f3cc:	00800334 	movhi	r2,12
    f3d0:	108d4004 	addi	r2,r2,13568
    f3d4:	10c03b36 	bltu	r2,r3,f4c4 <altera_a10_cdr_calc_params+0x268>
			continue;

		for (lpfd = lpfd_min; lpfd <= 2; lpfd++) {
    f3d8:	e0bffb17 	ldw	r2,-20(fp)
    f3dc:	e0bffc15 	stw	r2,-16(fp)
    f3e0:	00003406 	br	f4b4 <altera_a10_cdr_calc_params+0x258>
			for (m = m_min; m <= m_max; m++) {
    f3e4:	e0bff917 	ldw	r2,-28(fp)
    f3e8:	e0bfff15 	stw	r2,-4(fp)
    f3ec:	00002b06 	br	f49c <altera_a10_cdr_calc_params+0x240>
				fvco = fref_khz * m * lpfd / n;
    f3f0:	e0fff517 	ldw	r3,-44(fp)
    f3f4:	e0bfff17 	ldw	r2,-4(fp)
    f3f8:	1887383a 	mul	r3,r3,r2
    f3fc:	e0bffc17 	ldw	r2,-16(fp)
    f400:	1885383a 	mul	r2,r3,r2
    f404:	e17ffe17 	ldw	r5,-8(fp)
    f408:	1009883a 	mov	r4,r2
    f40c:	0012a540 	call	12a54 <__udivsi3>
    f410:	e0bff615 	stw	r2,-40(fp)

				if (abs(fvco - target_fvco) < abs(*best_fvco - target_fvco)) {
    f414:	e0fff617 	ldw	r3,-40(fp)
    f418:	e0bffa17 	ldw	r2,-24(fp)
    f41c:	1885c83a 	sub	r2,r3,r2
    f420:	1000010e 	bge	r2,zero,f428 <altera_a10_cdr_calc_params+0x1cc>
    f424:	0085c83a 	sub	r2,zero,r2
    f428:	1009883a 	mov	r4,r2
    f42c:	e0800417 	ldw	r2,16(fp)
    f430:	10c00017 	ldw	r3,0(r2)
    f434:	e0bffa17 	ldw	r2,-24(fp)
    f438:	1885c83a 	sub	r2,r3,r2
    f43c:	1000010e 	bge	r2,zero,f444 <altera_a10_cdr_calc_params+0x1e8>
    f440:	0085c83a 	sub	r2,zero,r2
    f444:	2080120e 	bge	r4,r2,f490 <altera_a10_cdr_calc_params+0x234>
					*best_n = n;
    f448:	e0bff317 	ldw	r2,-52(fp)
    f44c:	e0fffe17 	ldw	r3,-8(fp)
    f450:	10c00015 	stw	r3,0(r2)
					*best_m = m;
    f454:	e0bff217 	ldw	r2,-56(fp)
    f458:	e0ffff17 	ldw	r3,-4(fp)
    f45c:	10c00015 	stw	r3,0(r2)
					*best_lpfd = lpfd;
    f460:	e0800217 	ldw	r2,8(fp)
    f464:	e0fffc17 	ldw	r3,-16(fp)
    f468:	10c00015 	stw	r3,0(r2)
					*best_fvco = fvco;
    f46c:	e0800417 	ldw	r2,16(fp)
    f470:	e0fff617 	ldw	r3,-40(fp)
    f474:	10c00015 	stw	r3,0(r2)
					*best_lpd = lpd;
    f478:	e0800317 	ldw	r2,12(fp)
    f47c:	e0fffd17 	ldw	r3,-12(fp)
    f480:	10c00015 	stw	r3,0(r2)
					if (target_fvco == fvco)
    f484:	e0fffa17 	ldw	r3,-24(fp)
    f488:	e0bff617 	ldw	r2,-40(fp)
    f48c:	18801726 	beq	r3,r2,f4ec <altera_a10_cdr_calc_params+0x290>
			for (m = m_min; m <= m_max; m++) {
    f490:	e0bfff17 	ldw	r2,-4(fp)
    f494:	10800044 	addi	r2,r2,1
    f498:	e0bfff15 	stw	r2,-4(fp)
    f49c:	e0bfff17 	ldw	r2,-4(fp)
    f4a0:	e0fff817 	ldw	r3,-32(fp)
    f4a4:	18bfd22e 	bgeu	r3,r2,f3f0 <__alt_mem_mcu_subsystem_ram_0+0x77fef3f0>
		for (lpfd = lpfd_min; lpfd <= 2; lpfd++) {
    f4a8:	e0bffc17 	ldw	r2,-16(fp)
    f4ac:	10800044 	addi	r2,r2,1
    f4b0:	e0bffc15 	stw	r2,-16(fp)
    f4b4:	e0bffc17 	ldw	r2,-16(fp)
    f4b8:	108000f0 	cmpltui	r2,r2,3
    f4bc:	103fc91e 	bne	r2,zero,f3e4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3e4>
    f4c0:	00000106 	br	f4c8 <altera_a10_cdr_calc_params+0x26c>
			continue;
    f4c4:	0001883a 	nop
	for (n = 1; n <= 8; n *= 2) {
    f4c8:	e0bffe17 	ldw	r2,-8(fp)
    f4cc:	1085883a 	add	r2,r2,r2
    f4d0:	e0bffe15 	stw	r2,-8(fp)
    f4d4:	e0bffe17 	ldw	r2,-8(fp)
    f4d8:	10800270 	cmpltui	r2,r2,9
    f4dc:	103fb31e 	bne	r2,zero,f3ac <__alt_mem_mcu_subsystem_ram_0+0x77fef3ac>
    f4e0:	00000306 	br	f4f0 <altera_a10_cdr_calc_params+0x294>
			break;
    f4e4:	0001883a 	nop
    f4e8:	00000106 	br	f4f0 <altera_a10_cdr_calc_params+0x294>
						return;
    f4ec:	0001883a 	nop
				}
			}
		}
	}
}
    f4f0:	e037883a 	mov	sp,fp
    f4f4:	dfc00117 	ldw	ra,4(sp)
    f4f8:	df000017 	ldw	fp,0(sp)
    f4fc:	dec00204 	addi	sp,sp,8
    f500:	f800283a 	ret

0000f504 <altera_a10_cdr_pll_round_rate>:

/*******************************************************************************
* @brief altera_a10_cdr_pll_round_rate
*******************************************************************************/
uint32_t altera_a10_cdr_pll_round_rate(uint32_t l_rate_kbps, uint32_t fref_khz)
{
    f504:	defff004 	addi	sp,sp,-64
    f508:	dfc00f15 	stw	ra,60(sp)
    f50c:	df000e15 	stw	fp,56(sp)
    f510:	dc400d15 	stw	r17,52(sp)
    f514:	dc000c15 	stw	r16,48(sp)
    f518:	df000e04 	addi	fp,sp,56
    f51c:	e13ff615 	stw	r4,-40(fp)
    f520:	e17ff515 	stw	r5,-44(fp)
	uint32_t n, m, lpfd, lpd, fout_khz;
	uint32_t fvco;
	uint32_t tmp;

	fout_khz = l_rate_kbps / 2;
    f524:	e0bff617 	ldw	r2,-40(fp)
    f528:	1004d07a 	srli	r2,r2,1
    f52c:	e0bffd15 	stw	r2,-12(fp)

	altera_a10_cdr_calc_params(fref_khz, fout_khz, &n, &m, &lpfd, &lpd, &fvco);
    f530:	e13ffa04 	addi	r4,fp,-24
    f534:	e0fffb04 	addi	r3,fp,-20
    f538:	e0bff704 	addi	r2,fp,-36
    f53c:	d8800215 	stw	r2,8(sp)
    f540:	e0bff804 	addi	r2,fp,-32
    f544:	d8800115 	stw	r2,4(sp)
    f548:	e0bff904 	addi	r2,fp,-28
    f54c:	d8800015 	stw	r2,0(sp)
    f550:	200f883a 	mov	r7,r4
    f554:	180d883a 	mov	r6,r3
    f558:	e17ffd17 	ldw	r5,-12(fp)
    f55c:	e13ff517 	ldw	r4,-44(fp)
    f560:	000f25c0 	call	f25c <altera_a10_cdr_calc_params>

	if (n == 0 || m == 0 || lpfd == 0 || lpd == 0)
    f564:	e0bffb17 	ldw	r2,-20(fp)
    f568:	10000626 	beq	r2,zero,f584 <altera_a10_cdr_pll_round_rate+0x80>
    f56c:	e0bffa17 	ldw	r2,-24(fp)
    f570:	10000426 	beq	r2,zero,f584 <altera_a10_cdr_pll_round_rate+0x80>
    f574:	e0bff917 	ldw	r2,-28(fp)
    f578:	10000226 	beq	r2,zero,f584 <altera_a10_cdr_pll_round_rate+0x80>
    f57c:	e0bff817 	ldw	r2,-32(fp)
    f580:	1000021e 	bne	r2,zero,f58c <altera_a10_cdr_pll_round_rate+0x88>
		return -1;
    f584:	00bfffc4 	movi	r2,-1
    f588:	00002b06 	br	f638 <altera_a10_cdr_pll_round_rate+0x134>

	tmp = (uint32_t)fref_khz * m * lpfd * 2;
    f58c:	e0fffa17 	ldw	r3,-24(fp)
    f590:	e0bff517 	ldw	r2,-44(fp)
    f594:	1887383a 	mul	r3,r3,r2
    f598:	e0bff917 	ldw	r2,-28(fp)
    f59c:	1885383a 	mul	r2,r3,r2
    f5a0:	1085883a 	add	r2,r2,r2
    f5a4:	e0bffc15 	stw	r2,-16(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, n * lpd);
    f5a8:	e13ffc17 	ldw	r4,-16(fp)
    f5ac:	0014dac0 	call	14dac <__floatunsidf>
    f5b0:	1021883a 	mov	r16,r2
    f5b4:	1823883a 	mov	r17,r3
    f5b8:	e0fffb17 	ldw	r3,-20(fp)
    f5bc:	e0bff817 	ldw	r2,-32(fp)
    f5c0:	1885383a 	mul	r2,r3,r2
    f5c4:	1009883a 	mov	r4,r2
    f5c8:	0014dac0 	call	14dac <__floatunsidf>
    f5cc:	1009883a 	mov	r4,r2
    f5d0:	180b883a 	mov	r5,r3
    f5d4:	200d883a 	mov	r6,r4
    f5d8:	280f883a 	mov	r7,r5
    f5dc:	8009883a 	mov	r4,r16
    f5e0:	880b883a 	mov	r5,r17
    f5e4:	00133d00 	call	133d0 <__divdf3>
    f5e8:	1009883a 	mov	r4,r2
    f5ec:	180b883a 	mov	r5,r3
    f5f0:	2005883a 	mov	r2,r4
    f5f4:	2807883a 	mov	r3,r5
    f5f8:	000d883a 	mov	r6,zero
    f5fc:	01cff834 	movhi	r7,16352
    f600:	1009883a 	mov	r4,r2
    f604:	180b883a 	mov	r5,r3
    f608:	0012b100 	call	12b10 <__adddf3>
    f60c:	1009883a 	mov	r4,r2
    f610:	180b883a 	mov	r5,r3
    f614:	2005883a 	mov	r2,r4
    f618:	2807883a 	mov	r3,r5
    f61c:	1009883a 	mov	r4,r2
    f620:	180b883a 	mov	r5,r3
    f624:	0011dd80 	call	11dd8 <__fixunsdfdi>
    f628:	1009883a 	mov	r4,r2
    f62c:	180b883a 	mov	r5,r3
    f630:	e13ffc15 	stw	r4,-16(fp)

	return min_t(uint32_t, tmp, LONG_MAX);
    f634:	e0bffc17 	ldw	r2,-16(fp)
}
    f638:	e6fffe04 	addi	sp,fp,-8
    f63c:	dfc00317 	ldw	ra,12(sp)
    f640:	df000217 	ldw	fp,8(sp)
    f644:	dc400117 	ldw	r17,4(sp)
    f648:	dc000017 	ldw	r16,0(sp)
    f64c:	dec00404 	addi	sp,sp,16
    f650:	f800283a 	ret

0000f654 <altera_a10_cdr_pll_set_rate>:
/*******************************************************************************
* @brief altera_a10_cdr_pll_set_rate
*******************************************************************************/
int32_t altera_a10_cdr_pll_set_rate(xcvr_core *core,
	uint32_t l_rate_kbps, uint32_t fref_khz)
{
    f654:	deffe904 	addi	sp,sp,-92
    f658:	dfc01615 	stw	ra,88(sp)
    f65c:	df001515 	stw	fp,84(sp)
    f660:	df001504 	addi	fp,sp,84
    f664:	e13ff015 	stw	r4,-64(fp)
    f668:	e17fef15 	stw	r5,-68(fp)
    f66c:	e1bfee15 	stw	r6,-72(fp)
	uint32_t cp_current_pd, lfr_pd;
	uint32_t cp_current_pfd, lfr_pfd;
	uint32_t clkdiv_low;
	uint32_t fast_lock;

	fout_khz = l_rate_kbps/2;
    f670:	e0bfef17 	ldw	r2,-68(fp)
    f674:	1004d07a 	srli	r2,r2,1
    f678:	e0bffe15 	stw	r2,-8(fp)

	altera_a10_cdr_calc_params(fref_khz, fout_khz, &n, &m, &lpfd, &lpd, &fvco);
    f67c:	e13ff404 	addi	r4,fp,-48
    f680:	e0fff504 	addi	r3,fp,-44
    f684:	e0bff104 	addi	r2,fp,-60
    f688:	d8800215 	stw	r2,8(sp)
    f68c:	e0bff204 	addi	r2,fp,-56
    f690:	d8800115 	stw	r2,4(sp)
    f694:	e0bff304 	addi	r2,fp,-52
    f698:	d8800015 	stw	r2,0(sp)
    f69c:	200f883a 	mov	r7,r4
    f6a0:	180d883a 	mov	r6,r3
    f6a4:	e17ffe17 	ldw	r5,-8(fp)
    f6a8:	e13fee17 	ldw	r4,-72(fp)
    f6ac:	000f25c0 	call	f25c <altera_a10_cdr_calc_params>
	printf("\tlpfd: %d\n", lpfd);
	printf("\tlpd: %d\n", lpd);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || lpfd == 0 || lpd == 0)
    f6b0:	e0bff517 	ldw	r2,-44(fp)
    f6b4:	10000626 	beq	r2,zero,f6d0 <altera_a10_cdr_pll_set_rate+0x7c>
    f6b8:	e0bff417 	ldw	r2,-48(fp)
    f6bc:	10000426 	beq	r2,zero,f6d0 <altera_a10_cdr_pll_set_rate+0x7c>
    f6c0:	e0bff317 	ldw	r2,-52(fp)
    f6c4:	10000226 	beq	r2,zero,f6d0 <altera_a10_cdr_pll_set_rate+0x7c>
    f6c8:	e0bff217 	ldw	r2,-56(fp)
    f6cc:	1000021e 	bne	r2,zero,f6d8 <altera_a10_cdr_pll_set_rate+0x84>
		return -1;
    f6d0:	00bfffc4 	movi	r2,-1
    f6d4:	00012a06 	br	fb80 <altera_a10_cdr_pll_set_rate+0x52c>

	switch (n) {
    f6d8:	e0bff517 	ldw	r2,-44(fp)
    f6dc:	10c000a0 	cmpeqi	r3,r2,2
    f6e0:	1800061e 	bne	r3,zero,f6fc <altera_a10_cdr_pll_set_rate+0xa8>
    f6e4:	10c00120 	cmpeqi	r3,r2,4
    f6e8:	1800071e 	bne	r3,zero,f708 <altera_a10_cdr_pll_set_rate+0xb4>
    f6ec:	10800060 	cmpeqi	r2,r2,1
    f6f0:	10000826 	beq	r2,zero,f714 <altera_a10_cdr_pll_set_rate+0xc0>
	case 1:
		n = 0;
    f6f4:	e03ff515 	stw	zero,-44(fp)
		break;
    f6f8:	00000906 	br	f720 <altera_a10_cdr_pll_set_rate+0xcc>
	case 2:
		n = 1;
    f6fc:	00800044 	movi	r2,1
    f700:	e0bff515 	stw	r2,-44(fp)
		break;
    f704:	00000606 	br	f720 <altera_a10_cdr_pll_set_rate+0xcc>
	case 4:
		n = 2;
    f708:	00800084 	movi	r2,2
    f70c:	e0bff515 	stw	r2,-44(fp)
		break;
    f710:	00000306 	br	f720 <altera_a10_cdr_pll_set_rate+0xcc>
	default:
		n = 3;
    f714:	008000c4 	movi	r2,3
    f718:	e0bff515 	stw	r2,-44(fp)
		break;
    f71c:	0001883a 	nop
	}

	switch (lpd) {
    f720:	e0bff217 	ldw	r2,-56(fp)
    f724:	10c000a0 	cmpeqi	r3,r2,2
    f728:	18000d1e 	bne	r3,zero,f760 <altera_a10_cdr_pll_set_rate+0x10c>
    f72c:	10c000e8 	cmpgeui	r3,r2,3
    f730:	1800031e 	bne	r3,zero,f740 <altera_a10_cdr_pll_set_rate+0xec>
    f734:	10800060 	cmpeqi	r2,r2,1
    f738:	1000061e 	bne	r2,zero,f754 <altera_a10_cdr_pll_set_rate+0x100>
    f73c:	00001106 	br	f784 <altera_a10_cdr_pll_set_rate+0x130>
    f740:	10c00120 	cmpeqi	r3,r2,4
    f744:	1800091e 	bne	r3,zero,f76c <altera_a10_cdr_pll_set_rate+0x118>
    f748:	10800220 	cmpeqi	r2,r2,8
    f74c:	10000a1e 	bne	r2,zero,f778 <altera_a10_cdr_pll_set_rate+0x124>
    f750:	00000c06 	br	f784 <altera_a10_cdr_pll_set_rate+0x130>
	case 1:
		lpd = 1;
    f754:	00800044 	movi	r2,1
    f758:	e0bff215 	stw	r2,-56(fp)
		break;
    f75c:	00000c06 	br	f790 <altera_a10_cdr_pll_set_rate+0x13c>
	case 2:
		lpd = 3;
    f760:	008000c4 	movi	r2,3
    f764:	e0bff215 	stw	r2,-56(fp)
		break;
    f768:	00000906 	br	f790 <altera_a10_cdr_pll_set_rate+0x13c>
	case 4:
		lpd = 4;
    f76c:	00800104 	movi	r2,4
    f770:	e0bff215 	stw	r2,-56(fp)
		break;
    f774:	00000606 	br	f790 <altera_a10_cdr_pll_set_rate+0x13c>
	case 8:
		lpd = 5;
    f778:	00800144 	movi	r2,5
    f77c:	e0bff215 	stw	r2,-56(fp)
		break;
    f780:	00000306 	br	f790 <altera_a10_cdr_pll_set_rate+0x13c>
	default:
		lpd = 6;
    f784:	00800184 	movi	r2,6
    f788:	e0bff215 	stw	r2,-56(fp)
		break;
    f78c:	0001883a 	nop
	}

	switch (lpfd) {
    f790:	e0bff317 	ldw	r2,-52(fp)
    f794:	10800060 	cmpeqi	r2,r2,1
    f798:	10000326 	beq	r2,zero,f7a8 <altera_a10_cdr_pll_set_rate+0x154>
	case 1:
		lpfd = 2;
    f79c:	00800084 	movi	r2,2
    f7a0:	e0bff315 	stw	r2,-52(fp)
		break;
    f7a4:	00000306 	br	f7b4 <altera_a10_cdr_pll_set_rate+0x160>
	default:
		lpfd = 3;
    f7a8:	008000c4 	movi	r2,3
    f7ac:	e0bff315 	stw	r2,-52(fp)
		break;
    f7b0:	0001883a 	nop
	}

	vco_speed = altera_a10_cdr_lookup_vco_speed(fvco);
    f7b4:	e0bff117 	ldw	r2,-60(fp)
    f7b8:	1009883a 	mov	r4,r2
    f7bc:	000eaf80 	call	eaf8 <altera_a10_cdr_lookup_vco_speed>
    f7c0:	e0bffd15 	stw	r2,-12(fp)
	vco_speed_fix = altera_a10_cdr_lookup_vco_speed_fix(fvco);
    f7c4:	e0bff117 	ldw	r2,-60(fp)
    f7c8:	1009883a 	mov	r4,r2
    f7cc:	000eb4c0 	call	eb4c <altera_a10_cdr_lookup_vco_speed_fix>
    f7d0:	e0bffc15 	stw	r2,-16(fp)
	clkdiv_low = altera_a10_cdr_lookup_clklow_div(fref_khz);
    f7d4:	e13fee17 	ldw	r4,-72(fp)
    f7d8:	000ec4c0 	call	ec4c <altera_a10_cdr_lookup_clklow_div>
    f7dc:	e0bffb15 	stw	r2,-20(fp)
	fast_lock = altera_a10_cdr_lookup_fastlock(lpd);
    f7e0:	e0bff217 	ldw	r2,-56(fp)
    f7e4:	1009883a 	mov	r4,r2
    f7e8:	000ec880 	call	ec88 <altera_a10_cdr_lookup_fastlock>
    f7ec:	e0bffa15 	stw	r2,-24(fp)
	cp_current_pd = altera_a10_cdr_lookup_cp_current_pd(fvco, lpd);
    f7f0:	e0bff117 	ldw	r2,-60(fp)
    f7f4:	e0fff217 	ldw	r3,-56(fp)
    f7f8:	180b883a 	mov	r5,r3
    f7fc:	1009883a 	mov	r4,r2
    f800:	000ec000 	call	ec00 <altera_a10_cdr_lookup_cp_current_pd>
    f804:	e0bff915 	stw	r2,-28(fp)
	lfr_pd = altera_a10_cdr_lookup_lf_resistor_pd(fvco, lpd);
    f808:	e0bff117 	ldw	r2,-60(fp)
    f80c:	e0fff217 	ldw	r3,-56(fp)
    f810:	180b883a 	mov	r5,r3
    f814:	1009883a 	mov	r4,r2
    f818:	000ecc00 	call	ecc0 <altera_a10_cdr_lookup_lf_resistor_pd>
    f81c:	e0bff815 	stw	r2,-32(fp)
	cp_current_pfd = altera_a10_cdr_lookup_cp_current_pfd(fvco, m, lpfd);
    f820:	e0bff117 	ldw	r2,-60(fp)
    f824:	e0fff417 	ldw	r3,-48(fp)
    f828:	e13ff317 	ldw	r4,-52(fp)
    f82c:	200d883a 	mov	r6,r4
    f830:	180b883a 	mov	r5,r3
    f834:	1009883a 	mov	r4,r2
    f838:	000eec00 	call	eec0 <altera_a10_cdr_lookup_cp_current_pfd>
    f83c:	e0bff715 	stw	r2,-36(fp)
	lfr_pfd = altera_a10_cdr_lookup_lf_resistor_pfd(fvco, m, lpfd);
    f840:	e0bff117 	ldw	r2,-60(fp)
    f844:	e0fff417 	ldw	r3,-48(fp)
    f848:	e13ff317 	ldw	r4,-52(fp)
    f84c:	200d883a 	mov	r6,r4
    f850:	180b883a 	mov	r5,r3
    f854:	1009883a 	mov	r4,r2
    f858:	000ed4c0 	call	ed4c <altera_a10_cdr_lookup_lf_resistor_pfd>
    f85c:	e0bff615 	stw	r2,-40(fp)

	for (i = 0; i < core->lanes_per_link; i++) {
    f860:	e03fff15 	stw	zero,-4(fp)
    f864:	0000be06 	br	fb60 <altera_a10_cdr_pll_set_rate+0x50c>
		altera_a10_acquire_arbitration(&(core->dev.channel_pll[i]));
    f868:	e0bfff17 	ldw	r2,-4(fp)
    f86c:	10800324 	muli	r2,r2,12
    f870:	10800e04 	addi	r2,r2,56
    f874:	e0fff017 	ldw	r3,-64(fp)
    f878:	1885883a 	add	r2,r3,r2
    f87c:	1009883a 	mov	r4,r2
    f880:	000fdc80 	call	fdc8 <altera_a10_acquire_arbitration>

		pll_update(&(core->dev.channel_pll[i]), 0x132, 0x05, ((vco_speed_fix & 0x80) >> 7) | ((vco_speed_fix & 0x40) >> 4));
    f884:	e0bfff17 	ldw	r2,-4(fp)
    f888:	10800324 	muli	r2,r2,12
    f88c:	10800e04 	addi	r2,r2,56
    f890:	e0fff017 	ldw	r3,-64(fp)
    f894:	1889883a 	add	r4,r3,r2
    f898:	e0bffc17 	ldw	r2,-16(fp)
    f89c:	1004d1fa 	srli	r2,r2,7
    f8a0:	10c0004c 	andi	r3,r2,1
    f8a4:	e0bffc17 	ldw	r2,-16(fp)
    f8a8:	1004d13a 	srli	r2,r2,4
    f8ac:	1080010c 	andi	r2,r2,4
    f8b0:	1884b03a 	or	r2,r3,r2
    f8b4:	100f883a 	mov	r7,r2
    f8b8:	01800144 	movi	r6,5
    f8bc:	01404c84 	movi	r5,306
    f8c0:	000fd440 	call	fd44 <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x133, 0xe0, cp_current_pd << 5);
    f8c4:	e0bfff17 	ldw	r2,-4(fp)
    f8c8:	10800324 	muli	r2,r2,12
    f8cc:	10800e04 	addi	r2,r2,56
    f8d0:	e0fff017 	ldw	r3,-64(fp)
    f8d4:	1887883a 	add	r3,r3,r2
    f8d8:	e0bff917 	ldw	r2,-28(fp)
    f8dc:	1004917a 	slli	r2,r2,5
    f8e0:	100f883a 	mov	r7,r2
    f8e4:	01803804 	movi	r6,224
    f8e8:	01404cc4 	movi	r5,307
    f8ec:	1809883a 	mov	r4,r3
    f8f0:	000fd440 	call	fd44 <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x134, 0x40, (vco_speed_fix & 0x10) << 2);
    f8f4:	e0bfff17 	ldw	r2,-4(fp)
    f8f8:	10800324 	muli	r2,r2,12
    f8fc:	10800e04 	addi	r2,r2,56
    f900:	e0fff017 	ldw	r3,-64(fp)
    f904:	1887883a 	add	r3,r3,r2
    f908:	e0bffc17 	ldw	r2,-16(fp)
    f90c:	100490ba 	slli	r2,r2,2
    f910:	1080100c 	andi	r2,r2,64
    f914:	100f883a 	mov	r7,r2
    f918:	01801004 	movi	r6,64
    f91c:	01404d04 	movi	r5,308
    f920:	1809883a 	mov	r4,r3
    f924:	000fd440 	call	fd44 <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x135, 0x4f, (vco_speed_fix & 0x20) << 1 | (lfr_pd << 2) | lfr_pfd);
    f928:	e0bfff17 	ldw	r2,-4(fp)
    f92c:	10800324 	muli	r2,r2,12
    f930:	10800e04 	addi	r2,r2,56
    f934:	e0fff017 	ldw	r3,-64(fp)
    f938:	1889883a 	add	r4,r3,r2
    f93c:	e0bffc17 	ldw	r2,-16(fp)
    f940:	1085883a 	add	r2,r2,r2
    f944:	10c0100c 	andi	r3,r2,64
    f948:	e0bff817 	ldw	r2,-32(fp)
    f94c:	100490ba 	slli	r2,r2,2
    f950:	1886b03a 	or	r3,r3,r2
    f954:	e0bff617 	ldw	r2,-40(fp)
    f958:	1884b03a 	or	r2,r3,r2
    f95c:	100f883a 	mov	r7,r2
    f960:	018013c4 	movi	r6,79
    f964:	01404d44 	movi	r5,309
    f968:	000fd440 	call	fd44 <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x136, 0x0f, vco_speed_fix & 0xf);
    f96c:	e0bfff17 	ldw	r2,-4(fp)
    f970:	10800324 	muli	r2,r2,12
    f974:	10800e04 	addi	r2,r2,56
    f978:	e0fff017 	ldw	r3,-64(fp)
    f97c:	1887883a 	add	r3,r3,r2
    f980:	e0bffc17 	ldw	r2,-16(fp)
    f984:	108003cc 	andi	r2,r2,15
    f988:	100f883a 	mov	r7,r2
    f98c:	018003c4 	movi	r6,15
    f990:	01404d84 	movi	r5,310
    f994:	1809883a 	mov	r4,r3
    f998:	000fd440 	call	fd44 <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x137, 0x7c, vco_speed << 2);
    f99c:	e0bfff17 	ldw	r2,-4(fp)
    f9a0:	10800324 	muli	r2,r2,12
    f9a4:	10800e04 	addi	r2,r2,56
    f9a8:	e0fff017 	ldw	r3,-64(fp)
    f9ac:	1887883a 	add	r3,r3,r2
    f9b0:	e0bffd17 	ldw	r2,-12(fp)
    f9b4:	100490ba 	slli	r2,r2,2
    f9b8:	100f883a 	mov	r7,r2
    f9bc:	01801f04 	movi	r6,124
    f9c0:	01404dc4 	movi	r5,311
    f9c4:	1809883a 	mov	r4,r3
    f9c8:	000fd440 	call	fd44 <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x139, 0xbf, (fast_lock << 7) | (cp_current_pd << 3) | cp_current_pfd);
    f9cc:	e0bfff17 	ldw	r2,-4(fp)
    f9d0:	10800324 	muli	r2,r2,12
    f9d4:	10800e04 	addi	r2,r2,56
    f9d8:	e0fff017 	ldw	r3,-64(fp)
    f9dc:	1889883a 	add	r4,r3,r2
    f9e0:	e0bffa17 	ldw	r2,-24(fp)
    f9e4:	100691fa 	slli	r3,r2,7
    f9e8:	e0bff917 	ldw	r2,-28(fp)
    f9ec:	100490fa 	slli	r2,r2,3
    f9f0:	1886b03a 	or	r3,r3,r2
    f9f4:	e0bff717 	ldw	r2,-36(fp)
    f9f8:	1884b03a 	or	r2,r3,r2
    f9fc:	100f883a 	mov	r7,r2
    fa00:	01802fc4 	movi	r6,191
    fa04:	01404e44 	movi	r5,313
    fa08:	000fd440 	call	fd44 <pll_update>
		a10_pll_write(&(core->dev.channel_pll[i]), 0x13a, (clkdiv_low << 6) | (lpd << 3) | lpfd);
    fa0c:	e0bfff17 	ldw	r2,-4(fp)
    fa10:	10800324 	muli	r2,r2,12
    fa14:	10800e04 	addi	r2,r2,56
    fa18:	e0fff017 	ldw	r3,-64(fp)
    fa1c:	1889883a 	add	r4,r3,r2
    fa20:	e0bffb17 	ldw	r2,-20(fp)
    fa24:	100691ba 	slli	r3,r2,6
    fa28:	e0bff217 	ldw	r2,-56(fp)
    fa2c:	100490fa 	slli	r2,r2,3
    fa30:	1886b03a 	or	r3,r3,r2
    fa34:	e0bff317 	ldw	r2,-52(fp)
    fa38:	1884b03a 	or	r2,r3,r2
    fa3c:	100d883a 	mov	r6,r2
    fa40:	01404e84 	movi	r5,314
    fa44:	000fcf80 	call	fcf8 <a10_pll_write>

		a10_pll_write(&(core->dev.channel_pll[i]), 0x13b, m);
    fa48:	e0bfff17 	ldw	r2,-4(fp)
    fa4c:	10800324 	muli	r2,r2,12
    fa50:	10800e04 	addi	r2,r2,56
    fa54:	e0fff017 	ldw	r3,-64(fp)
    fa58:	1885883a 	add	r2,r3,r2
    fa5c:	e0fff417 	ldw	r3,-48(fp)
    fa60:	180d883a 	mov	r6,r3
    fa64:	01404ec4 	movi	r5,315
    fa68:	1009883a 	mov	r4,r2
    fa6c:	000fcf80 	call	fcf8 <a10_pll_write>

		pll_update(&(core->dev.channel_pll[i]), 0x13c, 0x0c, n << 2);
    fa70:	e0bfff17 	ldw	r2,-4(fp)
    fa74:	10800324 	muli	r2,r2,12
    fa78:	10800e04 	addi	r2,r2,56
    fa7c:	e0fff017 	ldw	r3,-64(fp)
    fa80:	1887883a 	add	r3,r3,r2
    fa84:	e0bff517 	ldw	r2,-44(fp)
    fa88:	100490ba 	slli	r2,r2,2
    fa8c:	100f883a 	mov	r7,r2
    fa90:	01800304 	movi	r6,12
    fa94:	01404f04 	movi	r5,316
    fa98:	1809883a 	mov	r4,r3
    fa9c:	000fd440 	call	fd44 <pll_update>

		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_CALIB_PMA_EN,
    faa0:	e0bfff17 	ldw	r2,-4(fp)
    faa4:	10800324 	muli	r2,r2,12
    faa8:	10800e04 	addi	r2,r2,56
    faac:	e0fff017 	ldw	r3,-64(fp)
    fab0:	1885883a 	add	r2,r3,r2
    fab4:	01c00084 	movi	r7,2
    fab8:	01800084 	movi	r6,2
    fabc:	01404004 	movi	r5,256
    fac0:	1009883a 	mov	r4,r2
    fac4:	000fd440 	call	fd44 <pll_update>
			XCVR_CALIB_CMU_CDR_PLL_EN_MASK,
			XCVR_CALIB_CMU_CDR_PLL_EN);

		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_RATE_SWITCH_FLAG,
    fac8:	e0bfff17 	ldw	r2,-4(fp)
    facc:	10800324 	muli	r2,r2,12
    fad0:	10800e04 	addi	r2,r2,56
    fad4:	e0fff017 	ldw	r3,-64(fp)
    fad8:	1885883a 	add	r2,r3,r2
    fadc:	000f883a 	mov	r7,zero
    fae0:	01802004 	movi	r6,128
    fae4:	01405984 	movi	r5,358
    fae8:	1009883a 	mov	r4,r2
    faec:	000fd440 	call	fd44 <pll_update>

		/*
		 * Disable tx_cal_busy and enable rx_cal_busy output through
		 * capability register.
		 */
		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_CAPAB_PMA,
    faf0:	e0bfff17 	ldw	r2,-4(fp)
    faf4:	10800324 	muli	r2,r2,12
    faf8:	10800e04 	addi	r2,r2,56
    fafc:	e0fff017 	ldw	r3,-64(fp)
    fb00:	1885883a 	add	r2,r3,r2
    fb04:	01c00804 	movi	r7,32
    fb08:	01800c04 	movi	r6,48
    fb0c:	0140a044 	movi	r5,641
    fb10:	1009883a 	mov	r4,r2
    fb14:	000fd440 	call	fd44 <pll_update>
			XCVR_CAPAB_RX_CAL_BUSY_EN_MASK |
			XCVR_CAPAB_TX_CAL_BUSY_EN_MASK,
			XCVR_CAPAB_RX_CAL_BUSY_EN |
			XCVR_CAPAB_TX_CAL_BUSY_DIS);

		altera_a10_release_arbitration(&(core->dev.channel_pll[i]), TRUE);
    fb18:	e0bfff17 	ldw	r2,-4(fp)
    fb1c:	10800324 	muli	r2,r2,12
    fb20:	10800e04 	addi	r2,r2,56
    fb24:	e0fff017 	ldw	r3,-64(fp)
    fb28:	1885883a 	add	r2,r3,r2
    fb2c:	01400044 	movi	r5,1
    fb30:	1009883a 	mov	r4,r2
    fb34:	000feb00 	call	feb0 <altera_a10_release_arbitration>

		pll_calibration_check(&(core->dev.channel_pll[i]));
    fb38:	e0bfff17 	ldw	r2,-4(fp)
    fb3c:	10800324 	muli	r2,r2,12
    fb40:	10800e04 	addi	r2,r2,56
    fb44:	e0fff017 	ldw	r3,-64(fp)
    fb48:	1885883a 	add	r2,r3,r2
    fb4c:	1009883a 	mov	r4,r2
    fb50:	000ff080 	call	ff08 <pll_calibration_check>
	for (i = 0; i < core->lanes_per_link; i++) {
    fb54:	e0bfff17 	ldw	r2,-4(fp)
    fb58:	10800044 	addi	r2,r2,1
    fb5c:	e0bfff15 	stw	r2,-4(fp)
    fb60:	e0bff017 	ldw	r2,-64(fp)
    fb64:	10800443 	ldbu	r2,17(r2)
    fb68:	10803fcc 	andi	r2,r2,255
    fb6c:	e0ffff17 	ldw	r3,-4(fp)
    fb70:	18bf3d36 	bltu	r3,r2,f868 <__alt_mem_mcu_subsystem_ram_0+0x77fef868>
	}

	core->initial_recalc = FALSE;
    fb74:	e0bff017 	ldw	r2,-64(fp)
    fb78:	10000705 	stb	zero,28(r2)

	return 0;
    fb7c:	0005883a 	mov	r2,zero
}
    fb80:	e037883a 	mov	sp,fp
    fb84:	dfc00117 	ldw	ra,4(sp)
    fb88:	df000017 	ldw	fp,0(sp)
    fb8c:	dec00204 	addi	sp,sp,8
    fb90:	f800283a 	ret

0000fb94 <altera_a10_calib_tx_pll>:

/*******************************************************************************
* @brief altera_a10_calib_tx_pll
*******************************************************************************/
int32_t altera_a10_calib_tx_pll(xcvr_core *core)
{
    fb94:	defffc04 	addi	sp,sp,-16
    fb98:	dfc00315 	stw	ra,12(sp)
    fb9c:	df000215 	stw	fp,8(sp)
    fba0:	df000204 	addi	fp,sp,8
    fba4:	e13ffe15 	stw	r4,-8(fp)
	uint16_t lane;
	uint16_t err = 0;
    fba8:	e03fff0d 	sth	zero,-4(fp)

	for (lane = 0; lane < core->lanes_per_link; lane++) {
    fbac:	e03fff8d 	sth	zero,-2(fp)
    fbb0:	00003106 	br	fc78 <altera_a10_calib_tx_pll+0xe4>
		altera_a10_acquire_arbitration(&(core->dev.channel_pll[lane]));
    fbb4:	e0bfff8b 	ldhu	r2,-2(fp)
    fbb8:	10800324 	muli	r2,r2,12
    fbbc:	10800e04 	addi	r2,r2,56
    fbc0:	e0fffe17 	ldw	r3,-8(fp)
    fbc4:	1885883a 	add	r2,r3,r2
    fbc8:	1009883a 	mov	r4,r2
    fbcc:	000fdc80 	call	fdc8 <altera_a10_acquire_arbitration>

		/* Perform TX termination & Vod calibration through
		   PMA calibration enable register */
		pll_update(&(core->dev.channel_pll[lane]), XCVR_REG_CALIB_PMA_EN,
    fbd0:	e0bfff8b 	ldhu	r2,-2(fp)
    fbd4:	10800324 	muli	r2,r2,12
    fbd8:	10800e04 	addi	r2,r2,56
    fbdc:	e0fffe17 	ldw	r3,-8(fp)
    fbe0:	1885883a 	add	r2,r3,r2
    fbe4:	01c00804 	movi	r7,32
    fbe8:	01800804 	movi	r6,32
    fbec:	01404004 	movi	r5,256
    fbf0:	1009883a 	mov	r4,r2
    fbf4:	000fd440 	call	fd44 <pll_update>
			XCVR_CALIB_TX_TERM_VOD_MASK,
			XCVR_CALIB_TX_TERM_VOD_EN);

		/* Disable rx_cal_busy and enable tx_cal_busy output through
		   capability register */
		pll_update(&(core->dev.channel_pll[lane]), XCVR_REG_CAPAB_PMA,
    fbf8:	e0bfff8b 	ldhu	r2,-2(fp)
    fbfc:	10800324 	muli	r2,r2,12
    fc00:	10800e04 	addi	r2,r2,56
    fc04:	e0fffe17 	ldw	r3,-8(fp)
    fc08:	1885883a 	add	r2,r3,r2
    fc0c:	01c00404 	movi	r7,16
    fc10:	01800c04 	movi	r6,48
    fc14:	0140a044 	movi	r5,641
    fc18:	1009883a 	mov	r4,r2
    fc1c:	000fd440 	call	fd44 <pll_update>
			XCVR_CAPAB_RX_CAL_BUSY_EN_MASK |
			XCVR_CAPAB_TX_CAL_BUSY_EN_MASK,
			XCVR_CAPAB_RX_CAL_BUSY_DIS |
			XCVR_CAPAB_TX_CAL_BUSY_EN);

		altera_a10_release_arbitration(&(core->dev.channel_pll[lane]), TRUE);
    fc20:	e0bfff8b 	ldhu	r2,-2(fp)
    fc24:	10800324 	muli	r2,r2,12
    fc28:	10800e04 	addi	r2,r2,56
    fc2c:	e0fffe17 	ldw	r3,-8(fp)
    fc30:	1885883a 	add	r2,r3,r2
    fc34:	01400044 	movi	r5,1
    fc38:	1009883a 	mov	r4,r2
    fc3c:	000feb00 	call	feb0 <altera_a10_release_arbitration>

		err |= pll_calibration_check(&(core->dev.channel_pll[lane]));
    fc40:	e0bfff8b 	ldhu	r2,-2(fp)
    fc44:	10800324 	muli	r2,r2,12
    fc48:	10800e04 	addi	r2,r2,56
    fc4c:	e0fffe17 	ldw	r3,-8(fp)
    fc50:	1885883a 	add	r2,r3,r2
    fc54:	1009883a 	mov	r4,r2
    fc58:	000ff080 	call	ff08 <pll_calibration_check>
    fc5c:	10803fcc 	andi	r2,r2,255
    fc60:	e0ffff0b 	ldhu	r3,-4(fp)
    fc64:	1884b03a 	or	r2,r3,r2
    fc68:	e0bfff0d 	sth	r2,-4(fp)
	for (lane = 0; lane < core->lanes_per_link; lane++) {
    fc6c:	e0bfff8b 	ldhu	r2,-2(fp)
    fc70:	10800044 	addi	r2,r2,1
    fc74:	e0bfff8d 	sth	r2,-2(fp)
    fc78:	e0bffe17 	ldw	r2,-8(fp)
    fc7c:	10800443 	ldbu	r2,17(r2)
    fc80:	10803fcc 	andi	r2,r2,255
    fc84:	e0ffff8b 	ldhu	r3,-2(fp)
    fc88:	10bfffcc 	andi	r2,r2,65535
    fc8c:	18bfc936 	bltu	r3,r2,fbb4 <__alt_mem_mcu_subsystem_ram_0+0x77fefbb4>
	}

	return err;
    fc90:	e0bfff0b 	ldhu	r2,-4(fp)
}
    fc94:	e037883a 	mov	sp,fp
    fc98:	dfc00117 	ldw	ra,4(sp)
    fc9c:	df000017 	ldw	fp,0(sp)
    fca0:	dec00204 	addi	sp,sp,8
    fca4:	f800283a 	ret

0000fca8 <a10_pll_read>:
* @brief a10_pll_read
*******************************************************************************/
int32_t a10_pll_read(xcvr_pll *mypll,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    fca8:	defffc04 	addi	sp,sp,-16
    fcac:	df000315 	stw	fp,12(sp)
    fcb0:	df000304 	addi	fp,sp,12
    fcb4:	e13fff15 	stw	r4,-4(fp)
    fcb8:	e17ffe15 	stw	r5,-8(fp)
    fcbc:	e1bffd15 	stw	r6,-12(fp)
	//reg_addr = reg_addr << 2; // left shift 2 (byte align address)
	//*reg_data = ad_reg_read((mypll->base_address + reg_addr));
   *reg_data = IORD_32DIRECT(mypll->base_address, reg_addr << 2);
    fcc0:	e0bffe17 	ldw	r2,-8(fp)
    fcc4:	100690ba 	slli	r3,r2,2
    fcc8:	e0bfff17 	ldw	r2,-4(fp)
    fccc:	10800117 	ldw	r2,4(r2)
    fcd0:	1885883a 	add	r2,r3,r2
    fcd4:	10800037 	ldwio	r2,0(r2)
    fcd8:	1007883a 	mov	r3,r2
    fcdc:	e0bffd17 	ldw	r2,-12(fp)
    fce0:	10c00015 	stw	r3,0(r2)

	return 0;
    fce4:	0005883a 	mov	r2,zero
}
    fce8:	e037883a 	mov	sp,fp
    fcec:	df000017 	ldw	fp,0(sp)
    fcf0:	dec00104 	addi	sp,sp,4
    fcf4:	f800283a 	ret

0000fcf8 <a10_pll_write>:
* @brief a10_pll_write
*******************************************************************************/
int32_t a10_pll_write(xcvr_pll *mypll,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    fcf8:	defffc04 	addi	sp,sp,-16
    fcfc:	df000315 	stw	fp,12(sp)
    fd00:	df000304 	addi	fp,sp,12
    fd04:	e13fff15 	stw	r4,-4(fp)
    fd08:	e17ffe15 	stw	r5,-8(fp)
    fd0c:	e1bffd15 	stw	r6,-12(fp)
	//reg_addr = reg_addr << 2; // left shift 2 (byte align address)
	//ad_reg_write((mypll->base_address + reg_addr), reg_data);
   IOWR_32DIRECT(mypll->base_address, reg_addr << 2, reg_data);
    fd10:	e0bffe17 	ldw	r2,-8(fp)
    fd14:	100690ba 	slli	r3,r2,2
    fd18:	e0bfff17 	ldw	r2,-4(fp)
    fd1c:	10800117 	ldw	r2,4(r2)
    fd20:	1885883a 	add	r2,r3,r2
    fd24:	1007883a 	mov	r3,r2
    fd28:	e0bffd17 	ldw	r2,-12(fp)
    fd2c:	18800035 	stwio	r2,0(r3)

	return 0;
    fd30:	0005883a 	mov	r2,zero
}
    fd34:	e037883a 	mov	sp,fp
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00104 	addi	sp,sp,4
    fd40:	f800283a 	ret

0000fd44 <pll_update>:
/*******************************************************************************
* @brief pll_update
*******************************************************************************/
void pll_update(xcvr_pll *mypll,
	uint32_t addr, uint32_t mask, uint32_t val)
{
    fd44:	defff904 	addi	sp,sp,-28
    fd48:	dfc00615 	stw	ra,24(sp)
    fd4c:	df000515 	stw	fp,20(sp)
    fd50:	df000504 	addi	fp,sp,20
    fd54:	e13ffe15 	stw	r4,-8(fp)
    fd58:	e17ffd15 	stw	r5,-12(fp)
    fd5c:	e1bffc15 	stw	r6,-16(fp)
    fd60:	e1fffb15 	stw	r7,-20(fp)
	uint32_t rval;

	a10_pll_read(mypll, addr, &rval);
    fd64:	e0bfff04 	addi	r2,fp,-4
    fd68:	100d883a 	mov	r6,r2
    fd6c:	e17ffd17 	ldw	r5,-12(fp)
    fd70:	e13ffe17 	ldw	r4,-8(fp)
    fd74:	000fca80 	call	fca8 <a10_pll_read>
	rval &= ~mask;
    fd78:	e0bffc17 	ldw	r2,-16(fp)
    fd7c:	0086303a 	nor	r3,zero,r2
    fd80:	e0bfff17 	ldw	r2,-4(fp)
    fd84:	1884703a 	and	r2,r3,r2
    fd88:	e0bfff15 	stw	r2,-4(fp)
	rval |= val;
    fd8c:	e0ffff17 	ldw	r3,-4(fp)
    fd90:	e0bffb17 	ldw	r2,-20(fp)
    fd94:	1884b03a 	or	r2,r3,r2
    fd98:	e0bfff15 	stw	r2,-4(fp)
	a10_pll_write(mypll, addr, rval);
    fd9c:	e0bfff17 	ldw	r2,-4(fp)
    fda0:	100d883a 	mov	r6,r2
    fda4:	e17ffd17 	ldw	r5,-12(fp)
    fda8:	e13ffe17 	ldw	r4,-8(fp)
    fdac:	000fcf80 	call	fcf8 <a10_pll_write>
}
    fdb0:	0001883a 	nop
    fdb4:	e037883a 	mov	sp,fp
    fdb8:	dfc00117 	ldw	ra,4(sp)
    fdbc:	df000017 	ldw	fp,0(sp)
    fdc0:	dec00204 	addi	sp,sp,8
    fdc4:	f800283a 	ret

0000fdc8 <altera_a10_acquire_arbitration>:

/*******************************************************************************
* @brief altera_a10_acquire_arbitration
*******************************************************************************/
uint32_t altera_a10_acquire_arbitration(xcvr_pll *mypll)
{
    fdc8:	defffa04 	addi	sp,sp,-24
    fdcc:	dfc00515 	stw	ra,20(sp)
    fdd0:	df000415 	stw	fp,16(sp)
    fdd4:	df000404 	addi	fp,sp,16
    fdd8:	e13ffc15 	stw	r4,-16(fp)
	uint32_t timeout = 0;
    fddc:	e03fff15 	stw	zero,-4(fp)
	uint32_t status;
	uint32_t arb_status;

	switch (mypll->type) {
    fde0:	e0bffc17 	ldw	r2,-16(fp)
    fde4:	10800017 	ldw	r2,0(r2)
    fde8:	10c000b0 	cmpltui	r3,r2,2
    fdec:	1800031e 	bne	r3,zero,fdfc <altera_a10_acquire_arbitration+0x34>
    fdf0:	10800128 	cmpgeui	r2,r2,4
    fdf4:	1000071e 	bne	r2,zero,fe14 <altera_a10_acquire_arbitration+0x4c>
    fdf8:	00000306 	br	fe08 <altera_a10_acquire_arbitration+0x40>
		case fpll_type:
		case atx_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
    fdfc:	0080a004 	movi	r2,640
    fe00:	e0bffe15 	stw	r2,-8(fp)
			break;
    fe04:	00000a06 	br	fe30 <altera_a10_acquire_arbitration+0x68>
		case cmu_cdr_type: // PMA
		case cmu_tx_type:
			arb_status = XCVR_REG_CAPAB_PMA;
    fe08:	0080a044 	movi	r2,641
    fe0c:	e0bffe15 	stw	r2,-8(fp)
			break;
    fe10:	00000706 	br	fe30 <altera_a10_acquire_arbitration+0x68>
		default:
			printf("%s: Pll type not defined!\n", __func__);
    fe14:	014000f4 	movhi	r5,3
    fe18:	294c7204 	addi	r5,r5,12744
    fe1c:	010000f4 	movhi	r4,3
    fe20:	210c3504 	addi	r4,r4,12500
    fe24:	001634c0 	call	1634c <printf>
			return -1;
    fe28:	00bfffc4 	movi	r2,-1
    fe2c:	00001b06 	br	fe9c <altera_a10_acquire_arbitration+0xd4>
		}

	a10_pll_write(mypll, XCVR_REG_ARBITRATION, XCVR_ARBITRATION_GET_AVMM);
    fe30:	01800084 	movi	r6,2
    fe34:	000b883a 	mov	r5,zero
    fe38:	e13ffc17 	ldw	r4,-16(fp)
    fe3c:	000fcf80 	call	fcf8 <a10_pll_write>

	do {
		a10_pll_read(mypll, arb_status /* / 4 */, &status);
    fe40:	e0bffd04 	addi	r2,fp,-12
    fe44:	100d883a 	mov	r6,r2
    fe48:	e17ffe17 	ldw	r5,-8(fp)
    fe4c:	e13ffc17 	ldw	r4,-16(fp)
    fe50:	000fca80 	call	fca8 <a10_pll_read>
		if ((status & BIT(2)) == 0) {
    fe54:	e0bffd17 	ldw	r2,-12(fp)
    fe58:	1080010c 	andi	r2,r2,4
    fe5c:	1000021e 	bne	r2,zero,fe68 <altera_a10_acquire_arbitration+0xa0>
			return 0;
    fe60:	0005883a 	mov	r2,zero
    fe64:	00000d06 	br	fe9c <altera_a10_acquire_arbitration+0xd4>
		}
		mdelay(1);
    fe68:	0100fa04 	movi	r4,1000
    fe6c:	0025e400 	call	25e40 <usleep>
	} while (timeout++ < 100);
    fe70:	e0bfff17 	ldw	r2,-4(fp)
    fe74:	10c00044 	addi	r3,r2,1
    fe78:	e0ffff15 	stw	r3,-4(fp)
    fe7c:	10801930 	cmpltui	r2,r2,100
    fe80:	103fef1e 	bne	r2,zero,fe40 <__alt_mem_mcu_subsystem_ram_0+0x77fefe40>

	printf("%s: Failed to acquire arbitration\n", __func__);
    fe84:	014000f4 	movhi	r5,3
    fe88:	294c7204 	addi	r5,r5,12744
    fe8c:	010000f4 	movhi	r4,3
    fe90:	210c3c04 	addi	r4,r4,12528
    fe94:	001634c0 	call	1634c <printf>

	return -1;
    fe98:	00bfffc4 	movi	r2,-1
}
    fe9c:	e037883a 	mov	sp,fp
    fea0:	dfc00117 	ldw	ra,4(sp)
    fea4:	df000017 	ldw	fp,0(sp)
    fea8:	dec00204 	addi	sp,sp,8
    feac:	f800283a 	ret

0000feb0 <altera_a10_release_arbitration>:
/*******************************************************************************
* @brief altera_a10_release_arbitration
*******************************************************************************/
void altera_a10_release_arbitration(xcvr_pll *mypll,
	uint8_t run_calibration)
{
    feb0:	defffc04 	addi	sp,sp,-16
    feb4:	dfc00315 	stw	ra,12(sp)
    feb8:	df000215 	stw	fp,8(sp)
    febc:	df000204 	addi	fp,sp,8
    fec0:	e13fff15 	stw	r4,-4(fp)
    fec4:	2805883a 	mov	r2,r5
    fec8:	e0bffe05 	stb	r2,-8(fp)
	a10_pll_write(mypll, XCVR_REG_ARBITRATION, (run_calibration ? 0x1 : 0x3));
    fecc:	e0bffe03 	ldbu	r2,-8(fp)
    fed0:	10000226 	beq	r2,zero,fedc <altera_a10_release_arbitration+0x2c>
    fed4:	00800044 	movi	r2,1
    fed8:	00000106 	br	fee0 <altera_a10_release_arbitration+0x30>
    fedc:	008000c4 	movi	r2,3
    fee0:	100d883a 	mov	r6,r2
    fee4:	000b883a 	mov	r5,zero
    fee8:	e13fff17 	ldw	r4,-4(fp)
    feec:	000fcf80 	call	fcf8 <a10_pll_write>
}
    fef0:	0001883a 	nop
    fef4:	e037883a 	mov	sp,fp
    fef8:	dfc00117 	ldw	ra,4(sp)
    fefc:	df000017 	ldw	fp,0(sp)
    ff00:	dec00204 	addi	sp,sp,8
    ff04:	f800283a 	ret

0000ff08 <pll_calibration_check>:

/*******************************************************************************
* @brief pll_calibration_check
*******************************************************************************/
uint8_t pll_calibration_check(xcvr_pll *my_pll)
{
    ff08:	defff804 	addi	sp,sp,-32
    ff0c:	dfc00715 	stw	ra,28(sp)
    ff10:	df000615 	stw	fp,24(sp)
    ff14:	df000604 	addi	fp,sp,24
    ff18:	e13ffa15 	stw	r4,-24(fp)
	uint32_t timeout = 0;
    ff1c:	e03fff15 	stw	zero,-4(fp)
	uint32_t val;
	uint32_t mask;
	uint32_t arb_status;
	const char *msg;

	switch (my_pll->type) {
    ff20:	e0bffa17 	ldw	r2,-24(fp)
    ff24:	10800017 	ldw	r2,0(r2)
    ff28:	10c00060 	cmpeqi	r3,r2,1
    ff2c:	1800061e 	bne	r3,zero,ff48 <pll_calibration_check+0x40>
    ff30:	00800d2e 	bgeu	zero,r2,ff68 <pll_calibration_check+0x60>
    ff34:	10c000a0 	cmpeqi	r3,r2,2
    ff38:	1800131e 	bne	r3,zero,ff88 <pll_calibration_check+0x80>
    ff3c:	108000e0 	cmpeqi	r2,r2,3
    ff40:	1000191e 	bne	r2,zero,ffa8 <pll_calibration_check+0xa0>
    ff44:	00002006 	br	ffc8 <pll_calibration_check+0xc0>
		case fpll_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
    ff48:	0080a004 	movi	r2,640
    ff4c:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_PLL_CAL_BSY_MASK;
    ff50:	00800084 	movi	r2,2
    ff54:	e0bffe15 	stw	r2,-8(fp)
			msg = "FPLL calibration";
    ff58:	008000f4 	movhi	r2,3
    ff5c:	108c4504 	addi	r2,r2,12564
    ff60:	e0bffc15 	stw	r2,-16(fp)
			break;
    ff64:	00002306 	br	fff4 <pll_calibration_check+0xec>
		case atx_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
    ff68:	0080a004 	movi	r2,640
    ff6c:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_PLL_CAL_BSY_MASK;
    ff70:	00800084 	movi	r2,2
    ff74:	e0bffe15 	stw	r2,-8(fp)
			msg = "ATX PLL calibration";
    ff78:	008000f4 	movhi	r2,3
    ff7c:	108c4a04 	addi	r2,r2,12584
    ff80:	e0bffc15 	stw	r2,-16(fp)
			break;
    ff84:	00001b06 	br	fff4 <pll_calibration_check+0xec>
		case cmu_cdr_type: // PMA RX
			arb_status = XCVR_REG_CAPAB_PMA;
    ff88:	0080a044 	movi	r2,641
    ff8c:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_RX_CAL_BUSY_MASK;
    ff90:	00800084 	movi	r2,2
    ff94:	e0bffe15 	stw	r2,-8(fp)
			msg = "CMU/CDR PLL calibration";
    ff98:	008000f4 	movhi	r2,3
    ff9c:	108c4f04 	addi	r2,r2,12604
    ffa0:	e0bffc15 	stw	r2,-16(fp)
			break;
    ffa4:	00001306 	br	fff4 <pll_calibration_check+0xec>
		case cmu_tx_type: // PMA TX
			arb_status = XCVR_REG_CAPAB_PMA;
    ffa8:	0080a044 	movi	r2,641
    ffac:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_TX_CAL_BUSY_MASK;
    ffb0:	00800044 	movi	r2,1
    ffb4:	e0bffe15 	stw	r2,-8(fp)
			msg = "CMU/TX PLL calibration";
    ffb8:	008000f4 	movhi	r2,3
    ffbc:	108c5504 	addi	r2,r2,12628
    ffc0:	e0bffc15 	stw	r2,-16(fp)
			break;
    ffc4:	00000b06 	br	fff4 <pll_calibration_check+0xec>
		default:
			printf("%s: %x Pll type not defined!\n", __func__,
				my_pll->type);
    ffc8:	e0bffa17 	ldw	r2,-24(fp)
    ffcc:	10800017 	ldw	r2,0(r2)
			printf("%s: %x Pll type not defined!\n", __func__,
    ffd0:	100d883a 	mov	r6,r2
    ffd4:	014000f4 	movhi	r5,3
    ffd8:	294c7a04 	addi	r5,r5,12776
    ffdc:	010000f4 	movhi	r4,3
    ffe0:	210c5b04 	addi	r4,r4,12652
    ffe4:	001634c0 	call	1634c <printf>
			return -1;
    ffe8:	00bfffc4 	movi	r2,-1
    ffec:	00001b06 	br	1005c <pll_calibration_check+0x154>
		}
	/* Wait max 100ms for cal_busy to de-assert */
	do {
    fff0:	0001883a 	nop
		udelay(100);
    fff4:	01001904 	movi	r4,100
    fff8:	0025e400 	call	25e40 <usleep>

		/* Read PLL calibration status from capability register */
		a10_pll_read(my_pll, arb_status, &val);
    fffc:	e0bffb04 	addi	r2,fp,-20
   10000:	100d883a 	mov	r6,r2
   10004:	e17ffd17 	ldw	r5,-12(fp)
   10008:	e13ffa17 	ldw	r4,-24(fp)
   1000c:	000fca80 	call	fca8 <a10_pll_read>
		if ((val & mask) == 0x00) {
   10010:	e0fffb17 	ldw	r3,-20(fp)
   10014:	e0bffe17 	ldw	r2,-8(fp)
   10018:	1884703a 	and	r2,r3,r2
   1001c:	1000021e 	bne	r2,zero,10028 <pll_calibration_check+0x120>
#ifdef DEBUG
			printf("%s OK (%d us, addr 0x%x)\n", msg,
				timeout * 100, my_pll->base_address);
#endif
			return 0;
   10020:	0005883a 	mov	r2,zero
   10024:	00000d06 	br	1005c <pll_calibration_check+0x154>
		}
	} while (timeout++ < 1000);
   10028:	e0bfff17 	ldw	r2,-4(fp)
   1002c:	10c00044 	addi	r3,r2,1
   10030:	e0ffff15 	stw	r3,-4(fp)
   10034:	1080fa30 	cmpltui	r2,r2,1000
   10038:	103fed1e 	bne	r2,zero,fff0 <__alt_mem_mcu_subsystem_ram_0+0x77fefff0>

	printf("%s FAILED (addr 0x%x)\n", msg,
   1003c:	e0bffa17 	ldw	r2,-24(fp)
   10040:	10800117 	ldw	r2,4(r2)
   10044:	100d883a 	mov	r6,r2
   10048:	e17ffc17 	ldw	r5,-16(fp)
   1004c:	010000f4 	movhi	r4,3
   10050:	210c6304 	addi	r4,r4,12684
   10054:	001634c0 	call	1634c <printf>
		my_pll->base_address);

	return 1;
   10058:	00800044 	movi	r2,1
}
   1005c:	e037883a 	mov	sp,fp
   10060:	dfc00117 	ldw	ra,4(sp)
   10064:	df000017 	ldw	fp,0(sp)
   10068:	dec00204 	addi	sp,sp,8
   1006c:	f800283a 	ret

00010070 <pll_is_enabled>:

/*******************************************************************************
* @brief pll_is_enabled
*******************************************************************************/
uint32_t pll_is_enabled(xcvr_pll *mypll)
{
   10070:	defffc04 	addi	sp,sp,-16
   10074:	dfc00315 	stw	ra,12(sp)
   10078:	df000215 	stw	fp,8(sp)
   1007c:	df000204 	addi	fp,sp,8
   10080:	e13ffe15 	stw	r4,-8(fp)
	switch (mypll->type) {
   10084:	e0bffe17 	ldw	r2,-8(fp)
   10088:	10800017 	ldw	r2,0(r2)
   1008c:	10c000b0 	cmpltui	r3,r2,2
   10090:	1800101e 	bne	r3,zero,100d4 <pll_is_enabled+0x64>
   10094:	10800128 	cmpgeui	r2,r2,4
   10098:	1000071e 	bne	r2,zero,100b8 <pll_is_enabled+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n",
   1009c:	014000f4 	movhi	r5,3
   100a0:	294c8004 	addi	r5,r5,12800
   100a4:	010000f4 	movhi	r4,3
   100a8:	210c6904 	addi	r4,r4,12708
   100ac:	001634c0 	call	1634c <printf>
				__func__);
			return 0;
   100b0:	0005883a 	mov	r2,zero
   100b4:	00001006 	br	100f8 <pll_is_enabled+0x88>
		default:
			printf("%s: Pll type not defined!\n", __func__);
   100b8:	014000f4 	movhi	r5,3
   100bc:	294c8004 	addi	r5,r5,12800
   100c0:	010000f4 	movhi	r4,3
   100c4:	210c3504 	addi	r4,r4,12500
   100c8:	001634c0 	call	1634c <printf>
			return -1;
   100cc:	00bfffc4 	movi	r2,-1
   100d0:	00000906 	br	100f8 <pll_is_enabled+0x88>
			break;
   100d4:	0001883a 	nop
		}
	uint32_t ret;
	a10_pll_read(mypll, 0x2e0, &ret);
   100d8:	e0bfff04 	addi	r2,fp,-4
   100dc:	100d883a 	mov	r6,r2
   100e0:	0140b804 	movi	r5,736
   100e4:	e13ffe17 	ldw	r4,-8(fp)
   100e8:	000fca80 	call	fca8 <a10_pll_read>
	return ret != 0x3;
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	108000d8 	cmpnei	r2,r2,3
   100f4:	10803fcc 	andi	r2,r2,255
}
   100f8:	e037883a 	mov	sp,fp
   100fc:	dfc00117 	ldw	ra,4(sp)
   10100:	df000017 	ldw	fp,0(sp)
   10104:	dec00204 	addi	sp,sp,8
   10108:	f800283a 	ret

0001010c <pll_enable>:

/*******************************************************************************
* @brief pll_enable
*******************************************************************************/
uint32_t pll_enable(xcvr_pll *mypll)
{
   1010c:	defffd04 	addi	sp,sp,-12
   10110:	dfc00215 	stw	ra,8(sp)
   10114:	df000115 	stw	fp,4(sp)
   10118:	df000104 	addi	fp,sp,4
   1011c:	e13fff15 	stw	r4,-4(fp)
	switch (mypll->type) {
   10120:	e0bfff17 	ldw	r2,-4(fp)
   10124:	10800017 	ldw	r2,0(r2)
   10128:	10c000b0 	cmpltui	r3,r2,2
   1012c:	1800101e 	bne	r3,zero,10170 <pll_enable+0x64>
   10130:	10800128 	cmpgeui	r2,r2,4
   10134:	1000071e 	bne	r2,zero,10154 <pll_enable+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n",
   10138:	014000f4 	movhi	r5,3
   1013c:	294c8404 	addi	r5,r5,12816
   10140:	010000f4 	movhi	r4,3
   10144:	210c6904 	addi	r4,r4,12708
   10148:	001634c0 	call	1634c <printf>
				__func__);
			return 0;
   1014c:	0005883a 	mov	r2,zero
   10150:	00000d06 	br	10188 <pll_enable+0x7c>
		default:
			printf("%s: Pll type not defined!\n", __func__);
   10154:	014000f4 	movhi	r5,3
   10158:	294c8404 	addi	r5,r5,12816
   1015c:	010000f4 	movhi	r4,3
   10160:	210c3504 	addi	r4,r4,12500
   10164:	001634c0 	call	1634c <printf>
			return -1;
   10168:	00bfffc4 	movi	r2,-1
   1016c:	00000606 	br	10188 <pll_enable+0x7c>
			break;
   10170:	0001883a 	nop
		}
		a10_pll_write(mypll, 0x2e0, 0x2);
   10174:	01800084 	movi	r6,2
   10178:	0140b804 	movi	r5,736
   1017c:	e13fff17 	ldw	r4,-4(fp)
   10180:	000fcf80 	call	fcf8 <a10_pll_write>
		return 0;
   10184:	0005883a 	mov	r2,zero
}
   10188:	e037883a 	mov	sp,fp
   1018c:	dfc00117 	ldw	ra,4(sp)
   10190:	df000017 	ldw	fp,0(sp)
   10194:	dec00204 	addi	sp,sp,8
   10198:	f800283a 	ret

0001019c <pll_disable>:

/*******************************************************************************
* @brief pll_disable
*******************************************************************************/
uint32_t pll_disable(xcvr_pll *mypll)
{
   1019c:	defffd04 	addi	sp,sp,-12
   101a0:	dfc00215 	stw	ra,8(sp)
   101a4:	df000115 	stw	fp,4(sp)
   101a8:	df000104 	addi	fp,sp,4
   101ac:	e13fff15 	stw	r4,-4(fp)
	switch (mypll->type) {
   101b0:	e0bfff17 	ldw	r2,-4(fp)
   101b4:	10800017 	ldw	r2,0(r2)
   101b8:	10c000b0 	cmpltui	r3,r2,2
   101bc:	1800101e 	bne	r3,zero,10200 <pll_disable+0x64>
   101c0:	10800128 	cmpgeui	r2,r2,4
   101c4:	1000071e 	bne	r2,zero,101e4 <pll_disable+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n", __func__);
   101c8:	014000f4 	movhi	r5,3
   101cc:	294c8704 	addi	r5,r5,12828
   101d0:	010000f4 	movhi	r4,3
   101d4:	210c6904 	addi	r4,r4,12708
   101d8:	001634c0 	call	1634c <printf>
			return 0;
   101dc:	0005883a 	mov	r2,zero
   101e0:	00000d06 	br	10218 <pll_disable+0x7c>
		default:
			printf("%s: Pll type not defined!\n", __func__);
   101e4:	014000f4 	movhi	r5,3
   101e8:	294c8704 	addi	r5,r5,12828
   101ec:	010000f4 	movhi	r4,3
   101f0:	210c3504 	addi	r4,r4,12500
   101f4:	001634c0 	call	1634c <printf>
			return -1;
   101f8:	00bfffc4 	movi	r2,-1
   101fc:	00000606 	br	10218 <pll_disable+0x7c>
			break;
   10200:	0001883a 	nop
		}
		a10_pll_write(mypll, 0x2e0, 0x3);
   10204:	018000c4 	movi	r6,3
   10208:	0140b804 	movi	r5,736
   1020c:	e13fff17 	ldw	r4,-4(fp)
   10210:	000fcf80 	call	fcf8 <a10_pll_write>
	return 0;
   10214:	0005883a 	mov	r2,zero
}
   10218:	e037883a 	mov	sp,fp
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	df000017 	ldw	fp,0(sp)
   10224:	dec00204 	addi	sp,sp,8
   10228:	f800283a 	ret

0001022c <iioscope_init>:

static uint8_t iio_buffer_tx[5000];
static uint8_t iio_buffer_rx[5000];

void iioscope_init()
{
   1022c:	defffc04 	addi	sp,sp,-16
   10230:	dfc00315 	stw	ra,12(sp)
   10234:	df000215 	stw	fp,8(sp)
   10238:	dc400115 	stw	r17,4(sp)
   1023c:	dc000015 	stw	r16,0(sp)
   10240:	df000204 	addi	fp,sp,8
   app_ctx.net_socket   = 0;
   10244:	008002b4 	movhi	r2,10
   10248:	10002e15 	stw	zero,184(r2)
   app_ctx.ts           = alt_timestamp();
   1024c:	00288cc0 	call	288cc <alt_timestamp>
   10250:	1009883a 	mov	r4,r2
   10254:	180b883a 	mov	r5,r3
   10258:	008002b4 	movhi	r2,10
   1025c:	11003015 	stw	r4,192(r2)
   10260:	008002b4 	movhi	r2,10
   10264:	11403115 	stw	r5,196(r2)
   app_ctx.ts_frequency = alt_timestamp_freq();
   10268:	0028a780 	call	28a78 <alt_timestamp_freq>
   1026c:	1007883a 	mov	r3,r2
   10270:	008002b4 	movhi	r2,10
   10274:	10c03215 	stw	r3,200(r2)
   app_ctx.interval     = app_ctx.ts_frequency / 1000 * APP_INTERVAL_MS;
   10278:	008002b4 	movhi	r2,10
   1027c:	10803217 	ldw	r2,200(r2)
   10280:	0140fa04 	movi	r5,1000
   10284:	1009883a 	mov	r4,r2
   10288:	0012a540 	call	12a54 <__udivsi3>
   1028c:	10800ca4 	muli	r2,r2,50
   10290:	1021883a 	mov	r16,r2
   10294:	0023883a 	mov	r17,zero
   10298:	008002b4 	movhi	r2,10
   1029c:	14003315 	stw	r16,204(r2)
   102a0:	008002b4 	movhi	r2,10
   102a4:	14403415 	stw	r17,208(r2)
   memset(iio_buffer_rx, 0, sizeof(iio_buffer_rx));
   102a8:	0184e204 	movi	r6,5000
   102ac:	000b883a 	mov	r5,zero
   102b0:	010002b4 	movhi	r4,10
   102b4:	21051704 	addi	r4,r4,5212
   102b8:	0015bb00 	call	15bb0 <memset>
   memset(iio_buffer_tx, 0, sizeof(iio_buffer_tx));
   102bc:	0184e204 	movi	r6,5000
   102c0:	000b883a 	mov	r5,zero
   102c4:	010002b4 	movhi	r4,10
   102c8:	21003504 	addi	r4,r4,212
   102cc:	0015bb00 	call	15bb0 <memset>
}
   102d0:	0001883a 	nop
   102d4:	e6fffe04 	addi	sp,fp,-8
   102d8:	dfc00317 	ldw	ra,12(sp)
   102dc:	df000217 	ldw	fp,8(sp)
   102e0:	dc400117 	ldw	r17,4(sp)
   102e4:	dc000017 	ldw	r16,0(sp)
   102e8:	dec00404 	addi	sp,sp,16
   102ec:	f800283a 	ret

000102f0 <iioscope_process_rx>:

void iioscope_process_rx(uint8_t *buffer, uint32_t len)
{
   102f0:	defffb04 	addi	sp,sp,-20
   102f4:	df000415 	stw	fp,16(sp)
   102f8:	df000404 	addi	fp,sp,16
   102fc:	e13ffd15 	stw	r4,-12(fp)
   10300:	e17ffc15 	stw	r5,-16(fp)
   eth_udp_packet_t *udp = (eth_udp_packet_t*)buffer;
   10304:	e0bffd17 	ldw	r2,-12(fp)
   10308:	e0bfff15 	stw	r2,-4(fp)
   app_data_packet_t *data = (app_data_packet_t*)(udp->data);
   1030c:	e0bfff17 	ldw	r2,-4(fp)
   10310:	10800a84 	addi	r2,r2,42
   10314:	e0bffe15 	stw	r2,-8(fp)
}
   10318:	0001883a 	nop
   1031c:	e037883a 	mov	sp,fp
   10320:	df000017 	ldw	fp,0(sp)
   10324:	dec00104 	addi	sp,sp,4
   10328:	f800283a 	ret

0001032c <iioscope_process_ctrl_rx>:

void iioscope_process_ctrl_rx(uint8_t *buffer, uint32_t len)
{
   1032c:	defffb04 	addi	sp,sp,-20
   10330:	df000415 	stw	fp,16(sp)
   10334:	df000404 	addi	fp,sp,16
   10338:	e13ffd15 	stw	r4,-12(fp)
   1033c:	e17ffc15 	stw	r5,-16(fp)
   eth_udp_packet_t *udp = (eth_udp_packet_t*)buffer;
   10340:	e0bffd17 	ldw	r2,-12(fp)
   10344:	e0bfff15 	stw	r2,-4(fp)
   app_data_packet_t *data = (app_data_packet_t*)(udp->data);
   10348:	e0bfff17 	ldw	r2,-4(fp)
   1034c:	10800a84 	addi	r2,r2,42
   10350:	e0bffe15 	stw	r2,-8(fp)
}
   10354:	0001883a 	nop
   10358:	e037883a 	mov	sp,fp
   1035c:	df000017 	ldw	fp,0(sp)
   10360:	dec00104 	addi	sp,sp,4
   10364:	f800283a 	ret

00010368 <iioscope_process>:

void iioscope_process(uint32_t handle)
{
   10368:	defff804 	addi	sp,sp,-32
   1036c:	dfc00715 	stw	ra,28(sp)
   10370:	df000615 	stw	fp,24(sp)
   10374:	dc000515 	stw	r16,20(sp)
   10378:	df000604 	addi	fp,sp,24
   1037c:	e13ffb15 	stw	r4,-20(fp)
   ip_addr_t target_ip;
   alt_timestamp_type ts = alt_timestamp();
   10380:	00288cc0 	call	288cc <alt_timestamp>
   10384:	e0bffd15 	stw	r2,-12(fp)
   10388:	e0fffe15 	stw	r3,-8(fp)
   if((ts - app_ctx.ts) >= app_ctx.interval)
   1038c:	008002b4 	movhi	r2,10
   10390:	11803017 	ldw	r6,192(r2)
   10394:	008002b4 	movhi	r2,10
   10398:	11c03117 	ldw	r7,196(r2)
   1039c:	e13ffd17 	ldw	r4,-12(fp)
   103a0:	e17ffe17 	ldw	r5,-8(fp)
   103a4:	2185c83a 	sub	r2,r4,r6
   103a8:	2091803a 	cmpltu	r8,r4,r2
   103ac:	29c7c83a 	sub	r3,r5,r7
   103b0:	1a09c83a 	sub	r4,r3,r8
   103b4:	2007883a 	mov	r3,r4
   103b8:	1009883a 	mov	r4,r2
   103bc:	180b883a 	mov	r5,r3
   103c0:	018002b4 	movhi	r6,10
   103c4:	30803317 	ldw	r2,204(r6)
   103c8:	018002b4 	movhi	r6,10
   103cc:	30c03417 	ldw	r3,208(r6)
   103d0:	28c03236 	bltu	r5,r3,1049c <iioscope_process+0x134>
   103d4:	1940011e 	bne	r3,r5,103dc <iioscope_process+0x74>
   103d8:	20803036 	bltu	r4,r2,1049c <iioscope_process+0x134>
   {
      app_ctx.ts = ts;
   103dc:	e0fffd17 	ldw	r3,-12(fp)
   103e0:	008002b4 	movhi	r2,10
   103e4:	10c03015 	stw	r3,192(r2)
   103e8:	e0fffe17 	ldw	r3,-8(fp)
   103ec:	008002b4 	movhi	r2,10
   103f0:	10c03115 	stw	r3,196(r2)
      if(app_ctx.net_socket == 0)
   103f4:	008002b4 	movhi	r2,10
   103f8:	10802e17 	ldw	r2,184(r2)
   103fc:	10000e1e 	bne	r2,zero,10438 <iioscope_process+0xd0>
      {
         target_ip.addr32 = APP_TARGET_IP;
   10400:	00a702f4 	movhi	r2,39947
   10404:	10aa3004 	addi	r2,r2,-22336
   10408:	e0bffc15 	stw	r2,-16(fp)
         app_ctx.net_socket = open_socket(target_ip, APP_DST_PORT, APP_DST_PORT, IPV4_PROTOCOL_UDP, iioscope_process_rx);
   1040c:	00800074 	movhi	r2,1
   10410:	1080bc04 	addi	r2,r2,752
   10414:	d8800015 	stw	r2,0(sp)
   10418:	01c00444 	movi	r7,17
   1041c:	01840804 	movi	r6,4128
   10420:	01440804 	movi	r5,4128
   10424:	e13ffc17 	ldw	r4,-16(fp)
   10428:	0002fd80 	call	2fd8 <open_socket>
   1042c:	1007883a 	mov	r3,r2
   10430:	008002b4 	movhi	r2,10
   10434:	10c02e15 	stw	r3,184(r2)
      }
      if(app_ctx.net_socket_ctrl == 0)
   10438:	008002b4 	movhi	r2,10
   1043c:	10802f17 	ldw	r2,188(r2)
   10440:	10000b1e 	bne	r2,zero,10470 <iioscope_process+0x108>
      {
         app_ctx.net_socket_ctrl = open_socket(target_ip, APP_CTRL_DST_PORT, APP_CTRL_DST_PORT, IPV4_PROTOCOL_UDP, iioscope_process_ctrl_rx);
   10444:	00800074 	movhi	r2,1
   10448:	1080cb04 	addi	r2,r2,812
   1044c:	d8800015 	stw	r2,0(sp)
   10450:	01c00444 	movi	r7,17
   10454:	01840844 	movi	r6,4129
   10458:	01440844 	movi	r5,4129
   1045c:	e13ffc17 	ldw	r4,-16(fp)
   10460:	0002fd80 	call	2fd8 <open_socket>
   10464:	1007883a 	mov	r3,r2
   10468:	008002b4 	movhi	r2,10
   1046c:	10c02f15 	stw	r3,188(r2)
      }


      if(app_ctx.net_socket != 0)
   10470:	008002b4 	movhi	r2,10
   10474:	10802e17 	ldw	r2,184(r2)
   10478:	10000826 	beq	r2,zero,1049c <iioscope_process+0x134>
      {
         daq2_transaction_adc();
   1047c:	001179c0 	call	1179c <daq2_transaction_adc>
         udp_send(app_ctx.net_socket, (uint8_t*)get_adc_buffer(), DMA_NUMBER_OF_SAMPLES);
   10480:	008002b4 	movhi	r2,10
   10484:	14002e17 	ldw	r16,184(r2)
   10488:	00104b80 	call	104b8 <get_adc_buffer>
   1048c:	01840004 	movi	r6,4096
   10490:	100b883a 	mov	r5,r2
   10494:	8009883a 	mov	r4,r16
   10498:	00024780 	call	2478 <udp_send>
      }
   }
}
   1049c:	0001883a 	nop
   104a0:	e6ffff04 	addi	sp,fp,-4
   104a4:	dfc00217 	ldw	ra,8(sp)
   104a8:	df000117 	ldw	fp,4(sp)
   104ac:	dc000017 	ldw	r16,0(sp)
   104b0:	dec00304 	addi	sp,sp,12
   104b4:	f800283a 	ret

000104b8 <get_adc_buffer>:
#define DMA_BUFFER         1

static fmcdaq2_ctx_t fmcdaq2_ctx;

uint32_t *get_adc_buffer()
{
   104b8:	deffff04 	addi	sp,sp,-4
   104bc:	df000015 	stw	fp,0(sp)
   104c0:	d839883a 	mov	fp,sp
   return fmcdaq2_ctx.rx_xfer_buf;
   104c4:	008002b4 	movhi	r2,10
   104c8:	108af404 	addi	r2,r2,11216
}
   104cc:	e037883a 	mov	sp,fp
   104d0:	df000017 	ldw	fp,0(sp)
   104d4:	dec00104 	addi	sp,sp,4
   104d8:	f800283a 	ret

000104dc <memory_testing>:

int memory_testing()
{
   104dc:	defff904 	addi	sp,sp,-28
   104e0:	dfc00615 	stw	ra,24(sp)
   104e4:	df000515 	stw	fp,20(sp)
   104e8:	df000504 	addi	fp,sp,20
   int result = 0, temp = 0;
   104ec:	e03fff15 	stw	zero,-4(fp)
   104f0:	e03ffe15 	stw	zero,-8(fp)
   unsigned long rx_size = sizeof(fmcdaq2_ctx.rx_xfer_buf) / sizeof(uint32_t);
   104f4:	00804034 	movhi	r2,256
   104f8:	e0bffc15 	stw	r2,-16(fp)
   unsigned long tx_size = sizeof(fmcdaq2_ctx.tx_xfer_buf) / sizeof(uint32_t);
   104fc:	00804034 	movhi	r2,256
   10500:	e0bffb15 	stw	r2,-20(fp)
   unsigned long i;
   printf("saving test data in RX buffer\n");
   10504:	010000f4 	movhi	r4,3
   10508:	210c8a04 	addi	r4,r4,12840
   1050c:	00164700 	call	16470 <puts>
   for(i = 0; i < rx_size; i++)
   10510:	e03ffd15 	stw	zero,-12(fp)
   10514:	00000b06 	br	10544 <memory_testing+0x68>
   {
      fmcdaq2_ctx.rx_xfer_buf[i] = i + 1;
   10518:	e0bffd17 	ldw	r2,-12(fp)
   1051c:	10c00044 	addi	r3,r2,1
   10520:	e0bffd17 	ldw	r2,-12(fp)
   10524:	10803ec4 	addi	r2,r2,251
   10528:	100890ba 	slli	r4,r2,2
   1052c:	008002b4 	movhi	r2,10
   10530:	2085883a 	add	r2,r4,r2
   10534:	10c9f915 	stw	r3,10212(r2)
   for(i = 0; i < rx_size; i++)
   10538:	e0bffd17 	ldw	r2,-12(fp)
   1053c:	10800044 	addi	r2,r2,1
   10540:	e0bffd15 	stw	r2,-12(fp)
   10544:	e0fffd17 	ldw	r3,-12(fp)
   10548:	e0bffc17 	ldw	r2,-16(fp)
   1054c:	18bff236 	bltu	r3,r2,10518 <__alt_mem_mcu_subsystem_ram_0+0x77ff0518>
   }
   printf("saving test data in RX buffer - done\n");
   10550:	010000f4 	movhi	r4,3
   10554:	210c9204 	addi	r4,r4,12872
   10558:	00164700 	call	16470 <puts>
   printf("saving test data in TX buffer\n");
   1055c:	010000f4 	movhi	r4,3
   10560:	210c9c04 	addi	r4,r4,12912
   10564:	00164700 	call	16470 <puts>
   for(i = 0; i < tx_size; i++)
   10568:	e03ffd15 	stw	zero,-12(fp)
   1056c:	00000d06 	br	105a4 <memory_testing+0xc8>
   {
      fmcdaq2_ctx.tx_xfer_buf[i] = i + 1;
   10570:	e0bffd17 	ldw	r2,-12(fp)
   10574:	10c00044 	addi	r3,r2,1
   10578:	e13ffd17 	ldw	r4,-12(fp)
   1057c:	00804034 	movhi	r2,256
   10580:	10803ec4 	addi	r2,r2,251
   10584:	2085883a 	add	r2,r4,r2
   10588:	100890ba 	slli	r4,r2,2
   1058c:	008002b4 	movhi	r2,10
   10590:	2085883a 	add	r2,r4,r2
   10594:	10c9f915 	stw	r3,10212(r2)
   for(i = 0; i < tx_size; i++)
   10598:	e0bffd17 	ldw	r2,-12(fp)
   1059c:	10800044 	addi	r2,r2,1
   105a0:	e0bffd15 	stw	r2,-12(fp)
   105a4:	e0fffd17 	ldw	r3,-12(fp)
   105a8:	e0bffb17 	ldw	r2,-20(fp)
   105ac:	18bff036 	bltu	r3,r2,10570 <__alt_mem_mcu_subsystem_ram_0+0x77ff0570>
   }
   printf("saving test data in TX buffer - done\n");
   105b0:	010000f4 	movhi	r4,3
   105b4:	210ca404 	addi	r4,r4,12944
   105b8:	00164700 	call	16470 <puts>
   printf("checking data in RX buffer\n");
   105bc:	010000f4 	movhi	r4,3
   105c0:	210cae04 	addi	r4,r4,12984
   105c4:	00164700 	call	16470 <puts>
   for(i = 0; i < rx_size; i++)
   105c8:	e03ffd15 	stw	zero,-12(fp)
   105cc:	00001106 	br	10614 <memory_testing+0x138>
   {
      if(fmcdaq2_ctx.rx_xfer_buf[i] != i + 1)
   105d0:	e0bffd17 	ldw	r2,-12(fp)
   105d4:	10803ec4 	addi	r2,r2,251
   105d8:	100690ba 	slli	r3,r2,2
   105dc:	008002b4 	movhi	r2,10
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	10c9f917 	ldw	r3,10212(r2)
   105e8:	e0bffd17 	ldw	r2,-12(fp)
   105ec:	10800044 	addi	r2,r2,1
   105f0:	18800526 	beq	r3,r2,10608 <memory_testing+0x12c>
      {
         temp = -1;
   105f4:	00bfffc4 	movi	r2,-1
   105f8:	e0bffe15 	stw	r2,-8(fp)
         result = -1;
   105fc:	00bfffc4 	movi	r2,-1
   10600:	e0bfff15 	stw	r2,-4(fp)
         break;
   10604:	00000606 	br	10620 <memory_testing+0x144>
   for(i = 0; i < rx_size; i++)
   10608:	e0bffd17 	ldw	r2,-12(fp)
   1060c:	10800044 	addi	r2,r2,1
   10610:	e0bffd15 	stw	r2,-12(fp)
   10614:	e0fffd17 	ldw	r3,-12(fp)
   10618:	e0bffc17 	ldw	r2,-16(fp)
   1061c:	18bfec36 	bltu	r3,r2,105d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff05d0>
      }
   }
   if(temp != 0)
   10620:	e0bffe17 	ldw	r2,-8(fp)
   10624:	10000426 	beq	r2,zero,10638 <memory_testing+0x15c>
   {
      printf("RX buffer failed at: %d\n", i);
   10628:	e17ffd17 	ldw	r5,-12(fp)
   1062c:	010000f4 	movhi	r4,3
   10630:	210cb504 	addi	r4,r4,13012
   10634:	001634c0 	call	1634c <printf>
   }
   temp = 0;
   10638:	e03ffe15 	stw	zero,-8(fp)
   printf("checking data in TX buffer\n");
   1063c:	010000f4 	movhi	r4,3
   10640:	210cbc04 	addi	r4,r4,13040
   10644:	00164700 	call	16470 <puts>
   for(i = 0; i < tx_size; i++)
   10648:	e03ffd15 	stw	zero,-12(fp)
   1064c:	00001306 	br	1069c <memory_testing+0x1c0>
   {
      if(fmcdaq2_ctx.tx_xfer_buf[i] != i + 1)
   10650:	e0fffd17 	ldw	r3,-12(fp)
   10654:	00804034 	movhi	r2,256
   10658:	10803ec4 	addi	r2,r2,251
   1065c:	1885883a 	add	r2,r3,r2
   10660:	100690ba 	slli	r3,r2,2
   10664:	008002b4 	movhi	r2,10
   10668:	1885883a 	add	r2,r3,r2
   1066c:	10c9f917 	ldw	r3,10212(r2)
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	10800044 	addi	r2,r2,1
   10678:	18800526 	beq	r3,r2,10690 <memory_testing+0x1b4>
      {
         temp = -1;
   1067c:	00bfffc4 	movi	r2,-1
   10680:	e0bffe15 	stw	r2,-8(fp)
         result = -1;
   10684:	00bfffc4 	movi	r2,-1
   10688:	e0bfff15 	stw	r2,-4(fp)
         break;
   1068c:	00000606 	br	106a8 <memory_testing+0x1cc>
   for(i = 0; i < tx_size; i++)
   10690:	e0bffd17 	ldw	r2,-12(fp)
   10694:	10800044 	addi	r2,r2,1
   10698:	e0bffd15 	stw	r2,-12(fp)
   1069c:	e0fffd17 	ldw	r3,-12(fp)
   106a0:	e0bffb17 	ldw	r2,-20(fp)
   106a4:	18bfea36 	bltu	r3,r2,10650 <__alt_mem_mcu_subsystem_ram_0+0x77ff0650>
      }
   }
   if(temp != 0)
   106a8:	e0bffe17 	ldw	r2,-8(fp)
   106ac:	10000426 	beq	r2,zero,106c0 <memory_testing+0x1e4>
   {
      printf("TX buffer failed at: %d\n", i);
   106b0:	e17ffd17 	ldw	r5,-12(fp)
   106b4:	010000f4 	movhi	r4,3
   106b8:	210cc304 	addi	r4,r4,13068
   106bc:	001634c0 	call	1634c <printf>
   }

   return result;
   106c0:	e0bfff17 	ldw	r2,-4(fp)
}
   106c4:	e037883a 	mov	sp,fp
   106c8:	dfc00117 	ldw	ra,4(sp)
   106cc:	df000017 	ldw	fp,0(sp)
   106d0:	dec00204 	addi	sp,sp,8
   106d4:	f800283a 	ret

000106d8 <fmcdaq2_reconfig>:
int fmcdaq2_reconfig(struct ad9144_init_param *p_ad9144_param,
           xcvr_core *p_ad9144_xcvr,
           struct ad9680_init_param *p_ad9680_param,
           xcvr_core *p_ad9680_xcvr,
           struct ad9523_platform_data *p_ad9523_param, int8_t rate)
{
   106d8:	defff804 	addi	sp,sp,-32
   106dc:	dfc00715 	stw	ra,28(sp)
   106e0:	df000615 	stw	fp,24(sp)
   106e4:	df000604 	addi	fp,sp,24
   106e8:	e13ffe15 	stw	r4,-8(fp)
   106ec:	e17ffd15 	stw	r5,-12(fp)
   106f0:	e1bffc15 	stw	r6,-16(fp)
   106f4:	e1fffb15 	stw	r7,-20(fp)
   106f8:	e0800317 	ldw	r2,12(fp)
   106fc:	e0bffa05 	stb	r2,-24(fp)
   uint8_t mode = 0;
   10700:	e03fffc5 	stb	zero,-1(fp)

   printf ("Available sampling rates:\n");
   10704:	010000f4 	movhi	r4,3
   10708:	210cca04 	addi	r4,r4,13096
   1070c:	00164700 	call	16470 <puts>
   printf ("\t1 - ADC 1000 MSPS; DAC 1000 MSPS\n");
   10710:	010000f4 	movhi	r4,3
   10714:	210cd104 	addi	r4,r4,13124
   10718:	00164700 	call	16470 <puts>
   printf ("\t2 - ADC  500 MSPS; DAC 1000 MSPS\n");
   1071c:	010000f4 	movhi	r4,3
   10720:	210cda04 	addi	r4,r4,13160
   10724:	00164700 	call	16470 <puts>
   printf ("\t3 - ADC  500 MSPS; DAC  500 MSPS\n");
   10728:	010000f4 	movhi	r4,3
   1072c:	210ce304 	addi	r4,r4,13196
   10730:	00164700 	call	16470 <puts>
   printf ("\t4 - ADC  600 MSPS; DAC  600 MSPS\n");
   10734:	010000f4 	movhi	r4,3
   10738:	210cec04 	addi	r4,r4,13232
   1073c:	00164700 	call	16470 <puts>
   printf ("\t5 - ADC 1000 MSPS; DAC 2000 MSPS (2x interpolation)\n");
   10740:	010000f4 	movhi	r4,3
   10744:	210cf504 	addi	r4,r4,13268
   10748:	00164700 	call	16470 <puts>
   printf ("choose an option [default 1]:\n");
   1074c:	010000f4 	movhi	r4,3
   10750:	210d0304 	addi	r4,r4,13324
   10754:	00164700 	call	16470 <puts>

   if(rate < 0)
   10758:	e0bffa07 	ldb	r2,-24(fp)
   1075c:	1000030e 	bge	r2,zero,1076c <fmcdaq2_reconfig+0x94>
   {
      mode = ad_uart_read();
   10760:	000c6880 	call	c688 <ad_uart_read>
   10764:	e0bfffc5 	stb	r2,-1(fp)
   10768:	00000306 	br	10778 <fmcdaq2_reconfig+0xa0>
   }
   else
   {
      mode = (uint8_t)'0' + rate;
   1076c:	e0bffa03 	ldbu	r2,-24(fp)
   10770:	10800c04 	addi	r2,r2,48
   10774:	e0bfffc5 	stb	r2,-1(fp)
   }

   switch (mode) {
   10778:	e0bfffc3 	ldbu	r2,-1(fp)
   1077c:	10c00ce0 	cmpeqi	r3,r2,51
   10780:	18005e1e 	bne	r3,zero,108fc <fmcdaq2_reconfig+0x224>
   10784:	10c00d08 	cmpgei	r3,r2,52
   10788:	1800031e 	bne	r3,zero,10798 <fmcdaq2_reconfig+0xc0>
   1078c:	10800ca0 	cmpeqi	r2,r2,50
   10790:	1000a41e 	bne	r2,zero,10a24 <fmcdaq2_reconfig+0x34c>
   10794:	0000e506 	br	10b2c <fmcdaq2_reconfig+0x454>
   10798:	10c00d20 	cmpeqi	r3,r2,52
   1079c:	1800151e 	bne	r3,zero,107f4 <fmcdaq2_reconfig+0x11c>
   107a0:	10800d60 	cmpeqi	r2,r2,53
   107a4:	1000e126 	beq	r2,zero,10b2c <fmcdaq2_reconfig+0x454>
   case '5':
      // REF clock = 100 MHz
      p_ad9523_param->channels[DAC_DEVICE_CLK].channel_divider = 10;
   107a8:	e0800217 	ldw	r2,8(fp)
   107ac:	10800c17 	ldw	r2,48(r2)
   107b0:	00c00284 	movi	r3,10
   107b4:	10c0020d 	sth	r3,8(r2)
      p_ad9144_param->pll_ref_frequency_khz = 100000;
   107b8:	e0fffe17 	ldw	r3,-8(fp)
   107bc:	008000b4 	movhi	r2,2
   107c0:	10a1a804 	addi	r2,r2,-31072
   107c4:	18801a15 	stw	r2,104(r3)

      // DAC at 2 GHz using the internal PLL and 2 times interpolation
      p_ad9144_param->interpolation = 2;
   107c8:	e0bffe17 	ldw	r2,-8(fp)
   107cc:	00c00084 	movi	r3,2
   107d0:	10c00445 	stb	r3,17(r2)
      p_ad9144_param->pll_enable = 1;
   107d4:	e0bffe17 	ldw	r2,-8(fp)
   107d8:	00c00044 	movi	r3,1
   107dc:	10c019c5 	stb	r3,103(r2)
      p_ad9144_param->pll_dac_frequency_khz = 2000000;
   107e0:	e0fffe17 	ldw	r3,-8(fp)
   107e4:	008007f4 	movhi	r2,31
   107e8:	10a12004 	addi	r2,r2,-31616
   107ec:	18801b15 	stw	r2,108(r3)
      break;
   107f0:	0000d206 	br	10b3c <fmcdaq2_reconfig+0x464>
   case '4':
      printf ("4 - ADC  600 MSPS; DAC  600 MSPS\n");
   107f4:	010000f4 	movhi	r4,3
   107f8:	210d0b04 	addi	r4,r4,13356
   107fc:	00164700 	call	16470 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 5;
   10800:	e0800217 	ldw	r2,8(fp)
   10804:	00c00144 	movi	r3,5
   10808:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 2;
   1080c:	e0800217 	ldw	r2,8(fp)
   10810:	10800c17 	ldw	r2,48(r2)
   10814:	10800d04 	addi	r2,r2,52
   10818:	00c00084 	movi	r3,2
   1081c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 1;
   10820:	e0800217 	ldw	r2,8(fp)
   10824:	10800c17 	ldw	r2,48(r2)
   10828:	00c00044 	movi	r3,1
   1082c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 128;
   10830:	e0800217 	ldw	r2,8(fp)
   10834:	10800c17 	ldw	r2,48(r2)
   10838:	10800684 	addi	r2,r2,26
   1083c:	00c02004 	movi	r3,128
   10840:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 128;
   10844:	e0800217 	ldw	r2,8(fp)
   10848:	10800c17 	ldw	r2,48(r2)
   1084c:	10801384 	addi	r2,r2,78
   10850:	00c02004 	movi	r3,128
   10854:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 2;
   10858:	e0800217 	ldw	r2,8(fp)
   1085c:	10800c17 	ldw	r2,48(r2)
   10860:	10802704 	addi	r2,r2,156
   10864:	00c00084 	movi	r3,2
   10868:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 1;
   1086c:	e0800217 	ldw	r2,8(fp)
   10870:	10800c17 	ldw	r2,48(r2)
   10874:	10801a04 	addi	r2,r2,104
   10878:	00c00044 	movi	r3,1
   1087c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 128;
   10880:	e0800217 	ldw	r2,8(fp)
   10884:	10800c17 	ldw	r2,48(r2)
   10888:	10802084 	addi	r2,r2,130
   1088c:	00c02004 	movi	r3,128
   10890:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 128;
   10894:	e0800217 	ldw	r2,8(fp)
   10898:	10800c17 	ldw	r2,48(r2)
   1089c:	10802d84 	addi	r2,r2,182
   108a0:	00c02004 	movi	r3,128
   108a4:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	10000405 	stb	zero,16(r2)
      p_ad9144_param->lane_rate_kbps = 6000000;
   108b0:	e0fffe17 	ldw	r3,-8(fp)
   108b4:	00801734 	movhi	r2,92
   108b8:	10a36004 	addi	r2,r2,-29312
   108bc:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 6000000;
   108c0:	e0fffd17 	ldw	r3,-12(fp)
   108c4:	00801734 	movhi	r2,92
   108c8:	10a36004 	addi	r2,r2,-29312
   108cc:	18800315 	stw	r2,12(r3)
#ifdef XILINX
      p_ad9144_xcvr->ref_rate_khz = 300000;
#endif
      p_ad9680_xcvr->reconfig_bypass = 0;
   108d0:	e0bffb17 	ldw	r2,-20(fp)
   108d4:	10000405 	stb	zero,16(r2)
      p_ad9680_param->lane_rate_kbps = 6000000;
   108d8:	e0fffc17 	ldw	r3,-16(fp)
   108dc:	00801734 	movhi	r2,92
   108e0:	10a36004 	addi	r2,r2,-29312
   108e4:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 6000000;
   108e8:	e0fffb17 	ldw	r3,-20(fp)
   108ec:	00801734 	movhi	r2,92
   108f0:	10a36004 	addi	r2,r2,-29312
   108f4:	18800315 	stw	r2,12(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
   108f8:	00009006 	br	10b3c <fmcdaq2_reconfig+0x464>
   case '3':
      printf ("3 - ADC  500 MSPS; DAC  500 MSPS\n");
   108fc:	010000f4 	movhi	r4,3
   10900:	210d1404 	addi	r4,r4,13392
   10904:	00164700 	call	16470 <puts>
      p_ad9523_param->pll2_vco_diff_m1                                  = 3;
   10908:	e0800217 	ldw	r2,8(fp)
   1090c:	00c000c4 	movi	r3,3
   10910:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider        = 4;
   10914:	e0800217 	ldw	r2,8(fp)
   10918:	10800c17 	ldw	r2,48(r2)
   1091c:	10800d04 	addi	r2,r2,52
   10920:	00c00104 	movi	r3,4
   10924:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider      = 2;
   10928:	e0800217 	ldw	r2,8(fp)
   1092c:	10800c17 	ldw	r2,48(r2)
   10930:	00c00084 	movi	r3,2
   10934:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider   = 256;
   10938:	e0800217 	ldw	r2,8(fp)
   1093c:	10800c17 	ldw	r2,48(r2)
   10940:	10800684 	addi	r2,r2,26
   10944:	00c04004 	movi	r3,256
   10948:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider     = 256;
   1094c:	e0800217 	ldw	r2,8(fp)
   10950:	10800c17 	ldw	r2,48(r2)
   10954:	10801384 	addi	r2,r2,78
   10958:	00c04004 	movi	r3,256
   1095c:	10c0020d 	sth	r3,8(r2)

      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider        = 4;
   10960:	e0800217 	ldw	r2,8(fp)
   10964:	10800c17 	ldw	r2,48(r2)
   10968:	10802704 	addi	r2,r2,156
   1096c:	00c00104 	movi	r3,4
   10970:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider      = 2;
   10974:	e0800217 	ldw	r2,8(fp)
   10978:	10800c17 	ldw	r2,48(r2)
   1097c:	10801a04 	addi	r2,r2,104
   10980:	00c00084 	movi	r3,2
   10984:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider   = 256;
   10988:	e0800217 	ldw	r2,8(fp)
   1098c:	10800c17 	ldw	r2,48(r2)
   10990:	10802084 	addi	r2,r2,130
   10994:	00c04004 	movi	r3,256
   10998:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider     = 256;
   1099c:	e0800217 	ldw	r2,8(fp)
   109a0:	10800c17 	ldw	r2,48(r2)
   109a4:	10802d84 	addi	r2,r2,182
   109a8:	00c04004 	movi	r3,256
   109ac:	10c0020d 	sth	r3,8(r2)

      p_ad9144_xcvr->reconfig_bypass                                    = 0;
   109b0:	e0bffd17 	ldw	r2,-12(fp)
   109b4:	10000405 	stb	zero,16(r2)
      p_ad9144_param->lane_rate_kbps                                    = 5000000;
   109b8:	e0fffe17 	ldw	r3,-8(fp)
   109bc:	00801334 	movhi	r2,76
   109c0:	1092d004 	addi	r2,r2,19264
   109c4:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps                                     = 5000000;
   109c8:	e0fffd17 	ldw	r3,-12(fp)
   109cc:	00801334 	movhi	r2,76
   109d0:	1092d004 	addi	r2,r2,19264
   109d4:	18800315 	stw	r2,12(r3)
#ifdef XILINX
      p_ad9144_xcvr->ref_rate_khz = 250000;
#endif
      p_ad9680_xcvr->reconfig_bypass                                    = 0;
   109d8:	e0bffb17 	ldw	r2,-20(fp)
   109dc:	10000405 	stb	zero,16(r2)
      p_ad9680_param->lane_rate_kbps                                    = 5000000;
   109e0:	e0fffc17 	ldw	r3,-16(fp)
   109e4:	00801334 	movhi	r2,76
   109e8:	1092d004 	addi	r2,r2,19264
   109ec:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps                                     = 5000000;
   109f0:	e0fffb17 	ldw	r3,-20(fp)
   109f4:	00801334 	movhi	r2,76
   109f8:	1092d004 	addi	r2,r2,19264
   109fc:	18800315 	stw	r2,12(r3)

      p_ad9144_xcvr->ref_clock_khz                                      = 250000;
   10a00:	e0fffd17 	ldw	r3,-12(fp)
   10a04:	00800134 	movhi	r2,4
   10a08:	10b42404 	addi	r2,r2,-12144
   10a0c:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->ref_clock_khz                                      = 250000;
   10a10:	e0fffb17 	ldw	r3,-20(fp)
   10a14:	00800134 	movhi	r2,4
   10a18:	10b42404 	addi	r2,r2,-12144
   10a1c:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
   10a20:	00004606 	br	10b3c <fmcdaq2_reconfig+0x464>
   case '2':
      printf ("2 - ADC  500 MSPS; DAC 1000 MSPS\n");
   10a24:	010000f4 	movhi	r4,3
   10a28:	210d1d04 	addi	r4,r4,13428
   10a2c:	00164700 	call	16470 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 3;
   10a30:	e0800217 	ldw	r2,8(fp)
   10a34:	00c000c4 	movi	r3,3
   10a38:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 2;
   10a3c:	e0800217 	ldw	r2,8(fp)
   10a40:	10800c17 	ldw	r2,48(r2)
   10a44:	10800d04 	addi	r2,r2,52
   10a48:	00c00084 	movi	r3,2
   10a4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 1;
   10a50:	e0800217 	ldw	r2,8(fp)
   10a54:	10800c17 	ldw	r2,48(r2)
   10a58:	00c00044 	movi	r3,1
   10a5c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 128;
   10a60:	e0800217 	ldw	r2,8(fp)
   10a64:	10800c17 	ldw	r2,48(r2)
   10a68:	10800684 	addi	r2,r2,26
   10a6c:	00c02004 	movi	r3,128
   10a70:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 128;
   10a74:	e0800217 	ldw	r2,8(fp)
   10a78:	10800c17 	ldw	r2,48(r2)
   10a7c:	10801384 	addi	r2,r2,78
   10a80:	00c02004 	movi	r3,128
   10a84:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 4;
   10a88:	e0800217 	ldw	r2,8(fp)
   10a8c:	10800c17 	ldw	r2,48(r2)
   10a90:	10802704 	addi	r2,r2,156
   10a94:	00c00104 	movi	r3,4
   10a98:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 2;
   10a9c:	e0800217 	ldw	r2,8(fp)
   10aa0:	10800c17 	ldw	r2,48(r2)
   10aa4:	10801a04 	addi	r2,r2,104
   10aa8:	00c00084 	movi	r3,2
   10aac:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 256;
   10ab0:	e0800217 	ldw	r2,8(fp)
   10ab4:	10800c17 	ldw	r2,48(r2)
   10ab8:	10802084 	addi	r2,r2,130
   10abc:	00c04004 	movi	r3,256
   10ac0:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 256;
   10ac4:	e0800217 	ldw	r2,8(fp)
   10ac8:	10800c17 	ldw	r2,48(r2)
   10acc:	10802d84 	addi	r2,r2,182
   10ad0:	00c04004 	movi	r3,256
   10ad4:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
   10ad8:	e0bffd17 	ldw	r2,-12(fp)
   10adc:	10000405 	stb	zero,16(r2)
      p_ad9144_param->lane_rate_kbps = 10000000;
   10ae0:	e0fffe17 	ldw	r3,-8(fp)
   10ae4:	00802674 	movhi	r2,153
   10ae8:	10a5a004 	addi	r2,r2,-27008
   10aec:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 10000000;
   10af0:	e0fffd17 	ldw	r3,-12(fp)
   10af4:	00802674 	movhi	r2,153
   10af8:	10a5a004 	addi	r2,r2,-27008
   10afc:	18800315 	stw	r2,12(r3)
#ifdef XILINX
      p_ad9144_xcvr->ref_rate_khz = 500000;
#endif
      p_ad9680_xcvr->reconfig_bypass = 0;
   10b00:	e0bffb17 	ldw	r2,-20(fp)
   10b04:	10000405 	stb	zero,16(r2)
      p_ad9680_param->lane_rate_kbps = 5000000;
   10b08:	e0fffc17 	ldw	r3,-16(fp)
   10b0c:	00801334 	movhi	r2,76
   10b10:	1092d004 	addi	r2,r2,19264
   10b14:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 5000000;
   10b18:	e0fffb17 	ldw	r3,-20(fp)
   10b1c:	00801334 	movhi	r2,76
   10b20:	1092d004 	addi	r2,r2,19264
   10b24:	18800315 	stw	r2,12(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
   10b28:	00000406 	br	10b3c <fmcdaq2_reconfig+0x464>
   default:
      printf ("1 - ADC 1000 MSPS; DAC 1000 MSPS\n");
   10b2c:	010000f4 	movhi	r4,3
   10b30:	210d2604 	addi	r4,r4,13464
   10b34:	00164700 	call	16470 <puts>
#ifdef XILINX
      p_ad9144_xcvr->ref_rate_khz = 500000;
      p_ad9680_xcvr->ref_rate_khz = 500000;
#endif
      break;
   10b38:	0001883a 	nop
   }
   return(0);
   10b3c:	0005883a 	mov	r2,zero
}
   10b40:	e037883a 	mov	sp,fp
   10b44:	dfc00117 	ldw	ra,4(sp)
   10b48:	df000017 	ldw	fp,0(sp)
   10b4c:	dec00204 	addi	sp,sp,8
   10b50:	f800283a 	ret

00010b54 <daq2_deinit>:

int daq2_deinit()
{
   10b54:	defffe04 	addi	sp,sp,-8
   10b58:	dfc00115 	stw	ra,4(sp)
   10b5c:	df000015 	stw	fp,0(sp)
   10b60:	d839883a 	mov	fp,sp
   // Memory deallocation for devices and spi
   ad9144_remove(fmcdaq2_ctx.ad9144_device);
   10b64:	008002b4 	movhi	r2,10
   10b68:	108a7117 	ldw	r2,10692(r2)
   10b6c:	1009883a 	mov	r4,r2
   10b70:	00051d00 	call	51d0 <ad9144_remove>
   ad9523_remove(fmcdaq2_ctx.ad9523_device);
   10b74:	008002b4 	movhi	r2,10
   10b78:	108a7017 	ldw	r2,10688(r2)
   10b7c:	1009883a 	mov	r4,r2
   10b80:	0006e800 	call	6e80 <ad9523_remove>
   ad9680_remove(fmcdaq2_ctx.ad9680_device);
   10b84:	008002b4 	movhi	r2,10
   10b88:	108a7217 	ldw	r2,10696(r2)
   10b8c:	1009883a 	mov	r4,r2
   10b90:	00073800 	call	7380 <ad9680_remove>

   // Memory deallocation for gpios
   gpio_remove(fmcdaq2_ctx.clkd_sync);
   10b94:	008002b4 	movhi	r2,10
   10b98:	108af017 	ldw	r2,11200(r2)
   10b9c:	1009883a 	mov	r4,r2
   10ba0:	000c1600 	call	c160 <gpio_remove>
   gpio_remove(fmcdaq2_ctx.dac_reset);
   10ba4:	008002b4 	movhi	r2,10
   10ba8:	108af117 	ldw	r2,11204(r2)
   10bac:	1009883a 	mov	r4,r2
   10bb0:	000c1600 	call	c160 <gpio_remove>
   gpio_remove(fmcdaq2_ctx.dac_txen);
   10bb4:	008002b4 	movhi	r2,10
   10bb8:	108af217 	ldw	r2,11208(r2)
   10bbc:	1009883a 	mov	r4,r2
   10bc0:	000c1600 	call	c160 <gpio_remove>
   gpio_remove(fmcdaq2_ctx.adc_pd);
   10bc4:	008002b4 	movhi	r2,10
   10bc8:	108af317 	ldw	r2,11212(r2)
   10bcc:	1009883a 	mov	r4,r2
   10bd0:	000c1600 	call	c160 <gpio_remove>

   return 0;
   10bd4:	0005883a 	mov	r2,zero
}
   10bd8:	e037883a 	mov	sp,fp
   10bdc:	dfc00117 	ldw	ra,4(sp)
   10be0:	df000017 	ldw	fp,0(sp)
   10be4:	dec00204 	addi	sp,sp,8
   10be8:	f800283a 	ret

00010bec <daq2_init>:

int daq2_init()
{
   10bec:	defffb04 	addi	sp,sp,-20
   10bf0:	dfc00415 	stw	ra,16(sp)
   10bf4:	df000315 	stw	fp,12(sp)
   10bf8:	df000304 	addi	fp,sp,12

   // register interrupts
   //alt_ic_isr_register(0, 11, axi_jesd204_tx_irq, 0, 0);
   //alt_ic_isr_register(0, 13, axi_jesd204_rx_irq, 0, 0);

   fmcdaq2_ctx.ad9523_spi_param.type = NIOS_II_SPI;
   10bfc:	00c000c4 	movi	r3,3
   10c00:	008002b4 	movhi	r2,10
   10c04:	10c9f915 	stw	r3,10212(r2)
   fmcdaq2_ctx.ad9144_spi_param.type = NIOS_II_SPI;
   10c08:	00c000c4 	movi	r3,3
   10c0c:	008002b4 	movhi	r2,10
   10c10:	10c9fd15 	stw	r3,10228(r2)
   fmcdaq2_ctx.ad9680_spi_param.type = NIOS_II_SPI;
   10c14:	00c000c4 	movi	r3,3
   10c18:	008002b4 	movhi	r2,10
   10c1c:	10ca0115 	stw	r3,10244(r2)

   fmcdaq2_ctx.ad9523_spi_param.chip_select = SPI_CHIP_SELECT(0);
   10c20:	00ffff84 	movi	r3,-2
   10c24:	008002b4 	movhi	r2,10
   10c28:	10c9fa05 	stb	r3,10216(r2)
   fmcdaq2_ctx.ad9144_spi_param.chip_select = SPI_CHIP_SELECT(1);
   10c2c:	00ffff44 	movi	r3,-3
   10c30:	008002b4 	movhi	r2,10
   10c34:	10c9fe05 	stb	r3,10232(r2)
   fmcdaq2_ctx.ad9680_spi_param.chip_select = SPI_CHIP_SELECT(2);
   10c38:	00fffec4 	movi	r3,-5
   10c3c:	008002b4 	movhi	r2,10
   10c40:	10ca0205 	stb	r3,10248(r2)
   fmcdaq2_ctx.ad9523_spi_param.cpha = 0;
   10c44:	008002b4 	movhi	r2,10
   10c48:	1009fb15 	stw	zero,10220(r2)
   fmcdaq2_ctx.ad9144_spi_param.cpha = 0;
   10c4c:	008002b4 	movhi	r2,10
   10c50:	1009ff15 	stw	zero,10236(r2)
   fmcdaq2_ctx.ad9680_spi_param.cpha = 0;
   10c54:	008002b4 	movhi	r2,10
   10c58:	100a0315 	stw	zero,10252(r2)
   fmcdaq2_ctx.ad9523_spi_param.cpol = 0;
   10c5c:	008002b4 	movhi	r2,10
   10c60:	1009fc15 	stw	zero,10224(r2)
   fmcdaq2_ctx.ad9144_spi_param.cpol = 0;
   10c64:	008002b4 	movhi	r2,10
   10c68:	100a0015 	stw	zero,10240(r2)
   fmcdaq2_ctx.ad9680_spi_param.cpol = 0;
   10c6c:	008002b4 	movhi	r2,10
   10c70:	100a0415 	stw	zero,10256(r2)

   // R. Gisko
   memset(fmcdaq2_ctx.ad9523_channels, 0, sizeof(fmcdaq2_ctx.ad9523_channels));
   10c74:	01803404 	movi	r6,208
   10c78:	000b883a 	mov	r5,zero
   10c7c:	010002b4 	movhi	r4,10
   10c80:	210a0504 	addi	r4,r4,10260
   10c84:	0015bb00 	call	15bb0 <memset>
   memset(&fmcdaq2_ctx.ad9523_pdata, 0, sizeof(fmcdaq2_ctx.ad9523_pdata));
   10c88:	01801104 	movi	r6,68
   10c8c:	000b883a 	mov	r5,zero
   10c90:	010002b4 	movhi	r4,10
   10c94:	210a3904 	addi	r4,r4,10468
   10c98:	0015bb00 	call	15bb0 <memset>
   memset(&fmcdaq2_ctx.ad9523_param, 0, sizeof(fmcdaq2_ctx.ad9523_param));
   10c9c:	01800504 	movi	r6,20
   10ca0:	000b883a 	mov	r5,zero
   10ca4:	010002b4 	movhi	r4,10
   10ca8:	210a4a04 	addi	r4,r4,10536
   10cac:	0015bb00 	call	15bb0 <memset>


   fmcdaq2_ctx.ad9523_param.spi_init = fmcdaq2_ctx.ad9523_spi_param;
   10cb0:	008002b4 	movhi	r2,10
   10cb4:	10c9f917 	ldw	r3,10212(r2)
   10cb8:	008002b4 	movhi	r2,10
   10cbc:	10ca4a15 	stw	r3,10536(r2)
   10cc0:	008002b4 	movhi	r2,10
   10cc4:	10c9fa17 	ldw	r3,10216(r2)
   10cc8:	008002b4 	movhi	r2,10
   10ccc:	10ca4b15 	stw	r3,10540(r2)
   10cd0:	008002b4 	movhi	r2,10
   10cd4:	10c9fb17 	ldw	r3,10220(r2)
   10cd8:	008002b4 	movhi	r2,10
   10cdc:	10ca4c15 	stw	r3,10544(r2)
   10ce0:	008002b4 	movhi	r2,10
   10ce4:	10c9fc17 	ldw	r3,10224(r2)
   10ce8:	008002b4 	movhi	r2,10
   10cec:	10ca4d15 	stw	r3,10548(r2)
   fmcdaq2_ctx.ad9144_param.spi_init = fmcdaq2_ctx.ad9144_spi_param;
   10cf0:	008002b4 	movhi	r2,10
   10cf4:	10c9fd17 	ldw	r3,10228(r2)
   10cf8:	008002b4 	movhi	r2,10
   10cfc:	10ca4f15 	stw	r3,10556(r2)
   10d00:	008002b4 	movhi	r2,10
   10d04:	10c9fe17 	ldw	r3,10232(r2)
   10d08:	008002b4 	movhi	r2,10
   10d0c:	10ca5015 	stw	r3,10560(r2)
   10d10:	008002b4 	movhi	r2,10
   10d14:	10c9ff17 	ldw	r3,10236(r2)
   10d18:	008002b4 	movhi	r2,10
   10d1c:	10ca5115 	stw	r3,10564(r2)
   10d20:	008002b4 	movhi	r2,10
   10d24:	10ca0017 	ldw	r3,10240(r2)
   10d28:	008002b4 	movhi	r2,10
   10d2c:	10ca5215 	stw	r3,10568(r2)
   fmcdaq2_ctx.ad9680_param.spi_init = fmcdaq2_ctx.ad9680_spi_param;
   10d30:	008002b4 	movhi	r2,10
   10d34:	10ca0117 	ldw	r3,10244(r2)
   10d38:	008002b4 	movhi	r2,10
   10d3c:	10ca6b15 	stw	r3,10668(r2)
   10d40:	008002b4 	movhi	r2,10
   10d44:	10ca0217 	ldw	r3,10248(r2)
   10d48:	008002b4 	movhi	r2,10
   10d4c:	10ca6c15 	stw	r3,10672(r2)
   10d50:	008002b4 	movhi	r2,10
   10d54:	10ca0317 	ldw	r3,10252(r2)
   10d58:	008002b4 	movhi	r2,10
   10d5c:	10ca6d15 	stw	r3,10676(r2)
   10d60:	008002b4 	movhi	r2,10
   10d64:	10ca0417 	ldw	r3,10256(r2)
   10d68:	008002b4 	movhi	r2,10
   10d6c:	10ca6e15 	stw	r3,10680(r2)

   // 9144 XCVR
   fmcdaq2_ctx.ad9144_xcvr.base_address              = AD9144_JESD204_LINK_MANAGEMENT_BASE;
   10d70:	00a201f4 	movhi	r2,34823
   10d74:	10980004 	addi	r2,r2,24576
   10d78:	00c002b4 	movhi	r3,10
   10d7c:	188a9315 	stw	r2,10828(r3)
   fmcdaq2_ctx.ad9144_xcvr.dev.link_pll.base_address = AD9144_JESD204_LINK_PLL_RECONFIG_BASE;
   10d80:	00a201f4 	movhi	r2,34823
   10d84:	10900004 	addi	r2,r2,16384
   10d88:	00c002b4 	movhi	r3,10
   10d8c:	188a9b15 	stw	r2,10860(r3)
   fmcdaq2_ctx.ad9144_xcvr.dev.atx_pll.base_address  = AD9144_JESD204_LANE_PLL_RECONFIG_BASE;
   10d90:	00a201f4 	movhi	r2,34823
   10d94:	109c0004 	addi	r2,r2,28672
   10d98:	00c002b4 	movhi	r3,10
   10d9c:	188a9e15 	stw	r2,10872(r3)
   fmcdaq2_ctx.ad9144_core.base_address              = AD9144_CORE_BASE;
   10da0:	00e20174 	movhi	r3,34821
   10da4:	008002b4 	movhi	r2,10
   10da8:	10ca7315 	stw	r3,10700(r2)
   fmcdaq2_ctx.ad9680_xcvr.base_address              = AD9680_JESD204_LINK_MANAGEMENT_BASE;
   10dac:	00a201f4 	movhi	r2,34823
   10db0:	10940004 	addi	r2,r2,20480
   10db4:	00c002b4 	movhi	r3,10
   10db8:	188ac115 	stw	r2,11012(r3)
   fmcdaq2_ctx.ad9680_xcvr.dev.link_pll.base_address = AD9680_JESD204_LINK_PLL_RECONFIG_BASE;
   10dbc:	00a201f4 	movhi	r2,34823
   10dc0:	108c0004 	addi	r2,r2,12288
   10dc4:	00c002b4 	movhi	r3,10
   10dc8:	188ac915 	stw	r2,11044(r3)
   fmcdaq2_ctx.ad9680_core.base_address              = AD9680_CORE_BASE;
   10dcc:	00e20134 	movhi	r3,34820
   10dd0:	008002b4 	movhi	r2,10
   10dd4:	10cab815 	stw	r3,10976(r2)
   fmcdaq2_ctx.ad9144_jesd.base_address              = AD9144_JESD204_LINK_RECONFIG_BASE;
   10dd8:	00a201b4 	movhi	r2,34822
   10ddc:	10900004 	addi	r2,r2,16384
   10de0:	00c002b4 	movhi	r3,10
   10de4:	188a8815 	stw	r2,10784(r3)
   fmcdaq2_ctx.ad9680_jesd.base_address              = AD9680_JESD204_LINK_RECONFIG_BASE;
   10de8:	00e201b4 	movhi	r3,34822
   10dec:	008002b4 	movhi	r2,10
   10df0:	10caba15 	stw	r3,10984(r2)

   fmcdaq2_ctx.ad9144_xcvr.dev.channel_pll[0].type         = cmu_tx_type;
   10df4:	00c000c4 	movi	r3,3
   10df8:	008002b4 	movhi	r2,10
   10dfc:	10caa015 	stw	r3,10880(r2)
   fmcdaq2_ctx.ad9680_xcvr.dev.channel_pll[0].type         = cmu_cdr_type;
   10e00:	00c00084 	movi	r3,2
   10e04:	008002b4 	movhi	r2,10
   10e08:	10cace15 	stw	r3,11064(r2)
   fmcdaq2_ctx.ad9144_xcvr.dev.channel_pll[0].base_address = AVL_ADXCFG_0_RCFG_S0_BASE;
   10e0c:	00a201f4 	movhi	r2,34823
   10e10:	10880004 	addi	r2,r2,8192
   10e14:	00c002b4 	movhi	r3,10
   10e18:	188aa115 	stw	r2,10884(r3)
   fmcdaq2_ctx.ad9144_xcvr.dev.channel_pll[1].base_address = AVL_ADXCFG_1_RCFG_S0_BASE;
   10e1c:	00a201f4 	movhi	r2,34823
   10e20:	10840004 	addi	r2,r2,4096
   10e24:	00c002b4 	movhi	r3,10
   10e28:	188aa415 	stw	r2,10896(r3)
   fmcdaq2_ctx.ad9144_xcvr.dev.channel_pll[2].base_address = AVL_ADXCFG_2_RCFG_S0_BASE;
   10e2c:	00e201f4 	movhi	r3,34823
   10e30:	008002b4 	movhi	r2,10
   10e34:	10caa715 	stw	r3,10908(r2)
   fmcdaq2_ctx.ad9144_xcvr.dev.channel_pll[3].base_address = AVL_ADXCFG_3_RCFG_S0_BASE;
   10e38:	00a201f4 	movhi	r2,34823
   10e3c:	10bc0004 	addi	r2,r2,-4096
   10e40:	00c002b4 	movhi	r3,10
   10e44:	188aaa15 	stw	r2,10920(r3)

   fmcdaq2_ctx.ad9680_xcvr.dev.channel_pll[0].base_address = AVL_ADXCFG_0_RCFG_S1_BASE;
   10e48:	00a201f4 	movhi	r2,34823
   10e4c:	10b80004 	addi	r2,r2,-8192
   10e50:	00c002b4 	movhi	r3,10
   10e54:	188acf15 	stw	r2,11068(r3)
   fmcdaq2_ctx.ad9680_xcvr.dev.channel_pll[1].base_address = AVL_ADXCFG_1_RCFG_S1_BASE;
   10e58:	00a201f4 	movhi	r2,34823
   10e5c:	10b40004 	addi	r2,r2,-12288
   10e60:	00c002b4 	movhi	r3,10
   10e64:	188ad215 	stw	r2,11080(r3)
   fmcdaq2_ctx.ad9680_xcvr.dev.channel_pll[2].base_address = AVL_ADXCFG_2_RCFG_S1_BASE;
   10e68:	00a201f4 	movhi	r2,34823
   10e6c:	10b00004 	addi	r2,r2,-16384
   10e70:	00c002b4 	movhi	r3,10
   10e74:	188ad515 	stw	r2,11092(r3)
   fmcdaq2_ctx.ad9680_xcvr.dev.channel_pll[3].base_address = AVL_ADXCFG_3_RCFG_S1_BASE;
   10e78:	00a201f4 	movhi	r2,34823
   10e7c:	10ac0004 	addi	r2,r2,-20480
   10e80:	00c002b4 	movhi	r3,10
   10e84:	188ad815 	stw	r2,11104(r3)

   fmcdaq2_ctx.ad9680_dma.base_address = AD9680_DMA_BASE;
   10e88:	00a201f4 	movhi	r2,34823
   10e8c:	10a00004 	addi	r2,r2,-32768
   10e90:	00c002b4 	movhi	r3,10
   10e94:	188ae615 	stw	r2,11160(r3)
   fmcdaq2_ctx.ad9144_dma.base_address = AD9144_DMA_BASE;
   10e98:	00a201f4 	movhi	r2,34823
   10e9c:	10a40004 	addi	r2,r2,-28672
   10ea0:	00c002b4 	movhi	r3,10
   10ea4:	188a8e15 	stw	r2,10808(r3)
   fmcdaq2_ctx.rx_xfer.start_address   = (uint32_t)fmcdaq2_ctx.rx_xfer_buf;;
   10ea8:	008002b4 	movhi	r2,10
   10eac:	108af404 	addi	r2,r2,11216
   10eb0:	00c002b4 	movhi	r3,10
   10eb4:	188aeb15 	stw	r2,11180(r3)
   fmcdaq2_ctx.tx_xfer.start_address   = (uint32_t)fmcdaq2_ctx.tx_xfer_buf;;
   10eb8:	008102b4 	movhi	r2,1034
   10ebc:	108af404 	addi	r2,r2,11216
   10ec0:	00c002b4 	movhi	r3,10
   10ec4:	188aee15 	stw	r2,11192(r3)

   //******************************************************************************
   // clock distribution device (AD9523) configuration
   //******************************************************************************
   fmcdaq2_ctx.ad9523_pdata.num_channels = 8;
   10ec8:	00c00204 	movi	r3,8
   10ecc:	008002b4 	movhi	r2,10
   10ed0:	10ca4415 	stw	r3,10512(r2)
   fmcdaq2_ctx.ad9523_pdata.channels     = &fmcdaq2_ctx.ad9523_channels[0];
   10ed4:	008002b4 	movhi	r2,10
   10ed8:	108a0504 	addi	r2,r2,10260
   10edc:	00c002b4 	movhi	r3,10
   10ee0:	188a4515 	stw	r2,10516(r3)
   fmcdaq2_ctx.ad9523_param.pdata        = &fmcdaq2_ctx.ad9523_pdata;
   10ee4:	008002b4 	movhi	r2,10
   10ee8:	108a3904 	addi	r2,r2,10468
   10eec:	00c002b4 	movhi	r3,10
   10ef0:	188a4e15 	stw	r2,10552(r3)
   ad9523_init(&fmcdaq2_ctx.ad9523_param);
   10ef4:	010002b4 	movhi	r4,10
   10ef8:	210a4a04 	addi	r4,r4,10536
   10efc:	0005f500 	call	5f50 <ad9523_init>
   // 8  => DAC SYSREF
   // 9  => DAC CLK (FMC)
   // 13 => ADC CLK
   //

   fmcdaq2_ctx.ad9523_channels[DAC_DEVICE_CLK].channel_num = 1;
   10f00:	00c00044 	movi	r3,1
   10f04:	008002b4 	movhi	r2,10
   10f08:	10ca0505 	stb	r3,10260(r2)
   fmcdaq2_ctx.ad9523_channels[DAC_DEVICE_CLK].channel_divider = 1;
   10f0c:	00c00044 	movi	r3,1
   10f10:	008002b4 	movhi	r2,10
   10f14:	10ca070d 	sth	r3,10268(r2)

   fmcdaq2_ctx.ad9523_channels[DAC_DEVICE_SYSREF].channel_num = 8;
   10f18:	00c00204 	movi	r3,8
   10f1c:	008002b4 	movhi	r2,10
   10f20:	10ca0b85 	stb	r3,10286(r2)
   fmcdaq2_ctx.ad9523_channels[DAC_DEVICE_SYSREF].channel_divider = 128;
   10f24:	00c02004 	movi	r3,128
   10f28:	008002b4 	movhi	r2,10
   10f2c:	10ca0d8d 	sth	r3,10294(r2)

   fmcdaq2_ctx.ad9523_channels[DAC_FPGA_CLK].channel_num = 9;
   10f30:	00c00244 	movi	r3,9
   10f34:	008002b4 	movhi	r2,10
   10f38:	10ca1205 	stb	r3,10312(r2)
   fmcdaq2_ctx.ad9523_channels[DAC_FPGA_CLK].channel_divider = 2;
   10f3c:	00c00084 	movi	r3,2
   10f40:	008002b4 	movhi	r2,10
   10f44:	10ca140d 	sth	r3,10320(r2)

   fmcdaq2_ctx.ad9523_channels[DAC_FPGA_SYSREF].channel_num = 7;
   10f48:	00c001c4 	movi	r3,7
   10f4c:	008002b4 	movhi	r2,10
   10f50:	10ca1885 	stb	r3,10338(r2)
   fmcdaq2_ctx.ad9523_channels[DAC_FPGA_SYSREF].channel_divider = 128;
   10f54:	00c02004 	movi	r3,128
   10f58:	008002b4 	movhi	r2,10
   10f5c:	10ca1a8d 	sth	r3,10346(r2)

   // adc device-clk-sysref, fpga-clk-sysref

   fmcdaq2_ctx.ad9523_channels[ADC_DEVICE_CLK].channel_num = 13;
   10f60:	00c00344 	movi	r3,13
   10f64:	008002b4 	movhi	r2,10
   10f68:	10ca1f05 	stb	r3,10364(r2)
   fmcdaq2_ctx.ad9523_channels[ADC_DEVICE_CLK].channel_divider = 1;
   10f6c:	00c00044 	movi	r3,1
   10f70:	008002b4 	movhi	r2,10
   10f74:	10ca210d 	sth	r3,10372(r2)

   fmcdaq2_ctx.ad9523_channels[ADC_DEVICE_SYSREF].channel_num = 5;
   10f78:	00c00144 	movi	r3,5
   10f7c:	008002b4 	movhi	r2,10
   10f80:	10ca2585 	stb	r3,10390(r2)
   fmcdaq2_ctx.ad9523_channels[ADC_DEVICE_SYSREF].channel_divider = 128;
   10f84:	00c02004 	movi	r3,128
   10f88:	008002b4 	movhi	r2,10
   10f8c:	10ca278d 	sth	r3,10398(r2)

   fmcdaq2_ctx.ad9523_channels[ADC_FPGA_CLK].channel_num = 4;
   10f90:	00c00104 	movi	r3,4
   10f94:	008002b4 	movhi	r2,10
   10f98:	10ca2c05 	stb	r3,10416(r2)
   fmcdaq2_ctx.ad9523_channels[ADC_FPGA_CLK].channel_divider = 2;
   10f9c:	00c00084 	movi	r3,2
   10fa0:	008002b4 	movhi	r2,10
   10fa4:	10ca2e0d 	sth	r3,10424(r2)

   fmcdaq2_ctx.ad9523_channels[ADC_FPGA_SYSREF].channel_num = 6;
   10fa8:	00c00184 	movi	r3,6
   10fac:	008002b4 	movhi	r2,10
   10fb0:	10ca3285 	stb	r3,10442(r2)
   fmcdaq2_ctx.ad9523_channels[ADC_FPGA_SYSREF].channel_divider = 128;
   10fb4:	00c02004 	movi	r3,128
   10fb8:	008002b4 	movhi	r2,10
   10fbc:	10ca348d 	sth	r3,10450(r2)

   // VCXO 125MHz

   fmcdaq2_ctx.ad9523_pdata.vcxo_freq = 125000000;
   10fc0:	0081dcf4 	movhi	r2,1907
   10fc4:	10965004 	addi	r2,r2,22848
   10fc8:	00c002b4 	movhi	r3,10
   10fcc:	188a3915 	stw	r2,10468(r3)
   fmcdaq2_ctx.ad9523_pdata.spi3wire = 1;
   10fd0:	00c00044 	movi	r3,1
   10fd4:	008002b4 	movhi	r2,10
   10fd8:	10ca3a05 	stb	r3,10472(r2)
   fmcdaq2_ctx.ad9523_pdata.osc_in_diff_en = 1;
   10fdc:	00c00044 	movi	r3,1
   10fe0:	008002b4 	movhi	r2,10
   10fe4:	10ca3b05 	stb	r3,10476(r2)
   fmcdaq2_ctx.ad9523_pdata.pll2_charge_pump_current_nA = 413000;
   10fe8:	008001b4 	movhi	r2,6
   10fec:	10935204 	addi	r2,r2,19784
   10ff0:	00c002b4 	movhi	r3,10
   10ff4:	188a4015 	stw	r2,10496(r3)
   fmcdaq2_ctx.ad9523_pdata.pll2_freq_doubler_en = 0;
   10ff8:	008002b4 	movhi	r2,10
   10ffc:	100a4185 	stb	zero,10502(r2)
   fmcdaq2_ctx.ad9523_pdata.pll2_r2_div = 1;
   11000:	00c00044 	movi	r3,1
   11004:	008002b4 	movhi	r2,10
   11008:	10ca41c5 	stb	r3,10503(r2)
   fmcdaq2_ctx.ad9523_pdata.pll2_ndiv_a_cnt = 0;
   1100c:	008002b4 	movhi	r2,10
   11010:	100a4105 	stb	zero,10500(r2)
   fmcdaq2_ctx.ad9523_pdata.pll2_ndiv_b_cnt = 6;
   11014:	00c00184 	movi	r3,6
   11018:	008002b4 	movhi	r2,10
   1101c:	10ca4145 	stb	r3,10501(r2)
   fmcdaq2_ctx.ad9523_pdata.pll2_vco_diff_m1 = 3;
   11020:	00c000c4 	movi	r3,3
   11024:	008002b4 	movhi	r2,10
   11028:	10ca4205 	stb	r3,10504(r2)
   fmcdaq2_ctx.ad9523_pdata.pll2_vco_diff_m2 = 0;
   1102c:	008002b4 	movhi	r2,10
   11030:	100a4245 	stb	zero,10505(r2)
   fmcdaq2_ctx.ad9523_pdata.rpole2 = 0;
   11034:	008002b4 	movhi	r2,10
   11038:	100a4285 	stb	zero,10506(r2)
   fmcdaq2_ctx.ad9523_pdata.rzero = 7;
   1103c:	00c001c4 	movi	r3,7
   11040:	008002b4 	movhi	r2,10
   11044:	10ca42c5 	stb	r3,10507(r2)
   fmcdaq2_ctx.ad9523_pdata.cpole1 = 2;
   11048:	00c00084 	movi	r3,2
   1104c:	008002b4 	movhi	r2,10
   11050:	10ca4305 	stb	r3,10508(r2)
   //******************************************************************************
   // DAC (AD9144) and the transmit path (AXI_ADXCVR,
   // JESD204, AXI_AD9144, TX DMAC) configuration
   //******************************************************************************

   xcvr_getconfig(&fmcdaq2_ctx.ad9144_xcvr);
   11054:	010002b4 	movhi	r4,10
   11058:	210a9204 	addi	r4,r4,10824
   1105c:	000c9380 	call	c938 <xcvr_getconfig>
   fmcdaq2_ctx.ad9144_xcvr.reconfig_bypass = 1;
   11060:	00c00044 	movi	r3,1
   11064:	008002b4 	movhi	r2,10
   11068:	10ca9605 	stb	r3,10840(r2)

   fmcdaq2_ctx.ad9144_xcvr.lane_rate_kbps = 10000000;
   1106c:	00802674 	movhi	r2,153
   11070:	10a5a004 	addi	r2,r2,-27008
   11074:	00c002b4 	movhi	r3,10
   11078:	188a9515 	stw	r2,10836(r3)

   //ad9144_jesd.rx_tx_n = 0;
   fmcdaq2_ctx.ad9144_jesd.scramble_enable = 1;
   1107c:	00c00044 	movi	r3,1
   11080:	008002b4 	movhi	r2,10
   11084:	10ca8905 	stb	r3,10788(r2)
   fmcdaq2_ctx.ad9144_jesd.octets_per_frame = 1;
   11088:	00c00044 	movi	r3,1
   1108c:	008002b4 	movhi	r2,10
   11090:	10ca8985 	stb	r3,10790(r2)
   fmcdaq2_ctx.ad9144_jesd.frames_per_multiframe = 32;
   11094:	00c00804 	movi	r3,32
   11098:	008002b4 	movhi	r2,10
   1109c:	10ca89c5 	stb	r3,10791(r2)
   fmcdaq2_ctx.ad9144_jesd.subclass_mode = 1;
   110a0:	00c00044 	movi	r3,1
   110a4:	008002b4 	movhi	r2,10
   110a8:	10ca8b05 	stb	r3,10796(r2)

   fmcdaq2_ctx.ad9144_channels[0].dds_dual_tone = 0;
   110ac:	008002b4 	movhi	r2,10
   110b0:	100a7c15 	stw	zero,10736(r2)
   fmcdaq2_ctx.ad9144_channels[0].dds_frequency_0 = 33*1000*1000;
   110b4:	00807e34 	movhi	r2,504
   110b8:	10a29004 	addi	r2,r2,-30144
   110bc:	00c002b4 	movhi	r3,10
   110c0:	188a7615 	stw	r2,10712(r3)
   fmcdaq2_ctx.ad9144_channels[0].dds_phase_0 = 0;
   110c4:	008002b4 	movhi	r2,10
   110c8:	100a7715 	stw	zero,10716(r2)
   fmcdaq2_ctx.ad9144_channels[0].dds_scale_0 = 500000;
   110cc:	00800234 	movhi	r2,8
   110d0:	10a84804 	addi	r2,r2,-24288
   110d4:	00c002b4 	movhi	r3,10
   110d8:	188a7815 	stw	r2,10720(r3)
   fmcdaq2_ctx.ad9144_channels[0].pat_data = 0xb1b0a1a0;
   110dc:	00ac6c74 	movhi	r2,45489
   110e0:	10a86804 	addi	r2,r2,-24160
   110e4:	00c002b4 	movhi	r3,10
   110e8:	188a7d15 	stw	r2,10740(r3)
   fmcdaq2_ctx.ad9144_channels[1].dds_dual_tone = 0;
   110ec:	008002b4 	movhi	r2,10
   110f0:	100a8515 	stw	zero,10772(r2)
   fmcdaq2_ctx.ad9144_channels[1].dds_frequency_0 = 11*1000*1000;
   110f4:	00802a34 	movhi	r2,168
   110f8:	10b63004 	addi	r2,r2,-10048
   110fc:	00c002b4 	movhi	r3,10
   11100:	188a7f15 	stw	r2,10748(r3)
   fmcdaq2_ctx.ad9144_channels[1].dds_phase_0 = 0;
   11104:	008002b4 	movhi	r2,10
   11108:	100a8015 	stw	zero,10752(r2)
   fmcdaq2_ctx.ad9144_channels[1].dds_scale_0 = 500000;
   1110c:	00800234 	movhi	r2,8
   11110:	10a84804 	addi	r2,r2,-24288
   11114:	00c002b4 	movhi	r3,10
   11118:	188a8115 	stw	r2,10756(r3)
   fmcdaq2_ctx.ad9144_channels[1].pat_data = 0xd1d0c1c0;
   1111c:	00b47474 	movhi	r2,53713
   11120:	10b07004 	addi	r2,r2,-15936
   11124:	00c002b4 	movhi	r3,10
   11128:	188a8615 	stw	r2,10776(r3)
   fmcdaq2_ctx.ad9144_channels[0].sel = DAC_SRC_DDS;
   1112c:	008002b4 	movhi	r2,10
   11130:	100a7e15 	stw	zero,10744(r2)
   fmcdaq2_ctx.ad9144_channels[1].sel = DAC_SRC_DDS;
   11134:	008002b4 	movhi	r2,10
   11138:	100a8715 	stw	zero,10780(r2)

   fmcdaq2_ctx.ad9144_param.lane_rate_kbps = 10000000;
   1113c:	00802674 	movhi	r2,153
   11140:	10a5a004 	addi	r2,r2,-27008
   11144:	00c002b4 	movhi	r3,10
   11148:	188a6415 	stw	r2,10640(r3)
   fmcdaq2_ctx.ad9144_param.spi3wire = 1;
   1114c:	00c00044 	movi	r3,1
   11150:	008002b4 	movhi	r2,10
   11154:	10ca5305 	stb	r3,10572(r2)
   fmcdaq2_ctx.ad9144_param.interpolation = 1;
   11158:	00c00044 	movi	r3,1
   1115c:	008002b4 	movhi	r2,10
   11160:	10ca5345 	stb	r3,10573(r2)
   fmcdaq2_ctx.ad9144_param.pll_enable = 0;
   11164:	008002b4 	movhi	r2,10
   11168:	100a68c5 	stb	zero,10659(r2)
   fmcdaq2_ctx.ad9144_param.jesd204_subclass = 1;
   1116c:	00c00044 	movi	r3,1
   11170:	008002b4 	movhi	r2,10
   11174:	10ca6645 	stb	r3,10649(r2)
   fmcdaq2_ctx.ad9144_param.jesd204_scrambling = 1;
   11178:	00c00044 	movi	r3,1
   1117c:	008002b4 	movhi	r2,10
   11180:	10ca6685 	stb	r3,10650(r2)
   fmcdaq2_ctx.ad9144_param.jesd204_mode = 4;
   11184:	00c00104 	movi	r3,4
   11188:	008002b4 	movhi	r2,10
   1118c:	10ca6605 	stb	r3,10648(r2)
   for(n=0; n<ARRAY_SIZE(fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar); n++) {
   11190:	e03fff15 	stw	zero,-4(fp)
   11194:	00000906 	br	111bc <daq2_init+0x5d0>
      fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar[n] = n;
   11198:	e0bfff17 	ldw	r2,-4(fp)
   1119c:	1009883a 	mov	r4,r2
   111a0:	e0ffff17 	ldw	r3,-4(fp)
   111a4:	008002b4 	movhi	r2,10
   111a8:	1885883a 	add	r2,r3,r2
   111ac:	110a66c5 	stb	r4,10651(r2)
   for(n=0; n<ARRAY_SIZE(fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar); n++) {
   111b0:	e0bfff17 	ldw	r2,-4(fp)
   111b4:	10800044 	addi	r2,r2,1
   111b8:	e0bfff15 	stw	r2,-4(fp)
   111bc:	e0bfff17 	ldw	r2,-4(fp)
   111c0:	10800230 	cmpltui	r2,r2,8
   111c4:	103ff41e 	bne	r2,zero,11198 <__alt_mem_mcu_subsystem_ram_0+0x77ff1198>
   }

   // R. Gisko => added
   fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar[0] = 0;// ok
   111c8:	008002b4 	movhi	r2,10
   111cc:	100a66c5 	stb	zero,10651(r2)
   fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar[1] = 3;// ok
   111d0:	00c000c4 	movi	r3,3
   111d4:	008002b4 	movhi	r2,10
   111d8:	10ca6705 	stb	r3,10652(r2)
   fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar[2] = 1;
   111dc:	00c00044 	movi	r3,1
   111e0:	008002b4 	movhi	r2,10
   111e4:	10ca6745 	stb	r3,10653(r2)
   fmcdaq2_ctx.ad9144_param.jesd204_lane_xbar[3] = 2;
   111e8:	00c00084 	movi	r3,2
   111ec:	008002b4 	movhi	r2,10
   111f0:	10ca6785 	stb	r3,10654(r2)

   fmcdaq2_ctx.ad9144_core.no_of_channels = 2;
   111f4:	00c00084 	movi	r3,2
   111f8:	008002b4 	movhi	r2,10
   111fc:	10ca7445 	stb	r3,10705(r2)
   fmcdaq2_ctx.ad9144_core.resolution = 16;
   11200:	00c00404 	movi	r3,16
   11204:	008002b4 	movhi	r2,10
   11208:	10ca7405 	stb	r3,10704(r2)
   fmcdaq2_ctx.ad9144_core.channels = &fmcdaq2_ctx.ad9144_channels[0];
   1120c:	008002b4 	movhi	r2,10
   11210:	108a7604 	addi	r2,r2,10712
   11214:	00c002b4 	movhi	r3,10
   11218:	188a7515 	stw	r2,10708(r3)

   fmcdaq2_ctx.ad9144_param.stpl_samples[0][0] = (fmcdaq2_ctx.ad9144_channels[0].pat_data >> 0)  & 0xffff;
   1121c:	008002b4 	movhi	r2,10
   11220:	108a7d17 	ldw	r2,10740(r2)
   11224:	10ffffcc 	andi	r3,r2,65535
   11228:	008002b4 	movhi	r2,10
   1122c:	10ca5415 	stw	r3,10576(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[0][1] = (fmcdaq2_ctx.ad9144_channels[0].pat_data >> 16) & 0xffff;
   11230:	008002b4 	movhi	r2,10
   11234:	108a7d17 	ldw	r2,10740(r2)
   11238:	1006d43a 	srli	r3,r2,16
   1123c:	008002b4 	movhi	r2,10
   11240:	10ca5515 	stw	r3,10580(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[0][2] = (fmcdaq2_ctx.ad9144_channels[0].pat_data >> 0)  & 0xffff;
   11244:	008002b4 	movhi	r2,10
   11248:	108a7d17 	ldw	r2,10740(r2)
   1124c:	10ffffcc 	andi	r3,r2,65535
   11250:	008002b4 	movhi	r2,10
   11254:	10ca5615 	stw	r3,10584(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[0][3] = (fmcdaq2_ctx.ad9144_channels[0].pat_data >> 16) & 0xffff;
   11258:	008002b4 	movhi	r2,10
   1125c:	108a7d17 	ldw	r2,10740(r2)
   11260:	1006d43a 	srli	r3,r2,16
   11264:	008002b4 	movhi	r2,10
   11268:	10ca5715 	stw	r3,10588(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[1][0] = (fmcdaq2_ctx.ad9144_channels[1].pat_data >> 0)  & 0xffff;
   1126c:	008002b4 	movhi	r2,10
   11270:	108a8617 	ldw	r2,10776(r2)
   11274:	10ffffcc 	andi	r3,r2,65535
   11278:	008002b4 	movhi	r2,10
   1127c:	10ca5815 	stw	r3,10592(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[1][1] = (fmcdaq2_ctx.ad9144_channels[1].pat_data >> 16) & 0xffff;
   11280:	008002b4 	movhi	r2,10
   11284:	108a8617 	ldw	r2,10776(r2)
   11288:	1006d43a 	srli	r3,r2,16
   1128c:	008002b4 	movhi	r2,10
   11290:	10ca5915 	stw	r3,10596(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[1][2] = (fmcdaq2_ctx.ad9144_channels[1].pat_data >> 0)  & 0xffff;
   11294:	008002b4 	movhi	r2,10
   11298:	108a8617 	ldw	r2,10776(r2)
   1129c:	10ffffcc 	andi	r3,r2,65535
   112a0:	008002b4 	movhi	r2,10
   112a4:	10ca5a15 	stw	r3,10600(r2)
   fmcdaq2_ctx.ad9144_param.stpl_samples[1][3] = (fmcdaq2_ctx.ad9144_channels[1].pat_data >> 16) & 0xffff;
   112a8:	008002b4 	movhi	r2,10
   112ac:	108a8617 	ldw	r2,10776(r2)
   112b0:	1006d43a 	srli	r3,r2,16
   112b4:	008002b4 	movhi	r2,10
   112b8:	10ca5b15 	stw	r3,10604(r2)
   //******************************************************************************
   // ADC (AD9680) and the receive path ( AXI_ADXCVR,
   // JESD204, AXI_AD9680, TX DMAC) configuration
   //******************************************************************************

   fmcdaq2_ctx.ad9680_param.lane_rate_kbps = 10000000;
   112bc:	00802674 	movhi	r2,153
   112c0:	10a5a004 	addi	r2,r2,-27008
   112c4:	00c002b4 	movhi	r3,10
   112c8:	188a6f15 	stw	r2,10684(r3)

   xcvr_getconfig(&fmcdaq2_ctx.ad9680_xcvr);
   112cc:	010002b4 	movhi	r4,10
   112d0:	210ac004 	addi	r4,r4,11008
   112d4:	000c9380 	call	c938 <xcvr_getconfig>
   fmcdaq2_ctx.ad9680_xcvr.reconfig_bypass = 1;
   112d8:	00c00044 	movi	r3,1
   112dc:	008002b4 	movhi	r2,10
   112e0:	10cac405 	stb	r3,11024(r2)

   fmcdaq2_ctx.ad9680_xcvr.rx_tx_n = 1;
   112e4:	00c00044 	movi	r3,1
   112e8:	008002b4 	movhi	r2,10
   112ec:	10cac045 	stb	r3,11009(r2)
   fmcdaq2_ctx.ad9680_xcvr.lane_rate_kbps = fmcdaq2_ctx.ad9680_param.lane_rate_kbps;
   112f0:	008002b4 	movhi	r2,10
   112f4:	10ca6f17 	ldw	r3,10684(r2)
   112f8:	008002b4 	movhi	r2,10
   112fc:	10cac315 	stw	r3,11020(r2)

   fmcdaq2_ctx.ad9680_jesd.scramble_enable = 1;
   11300:	00c00044 	movi	r3,1
   11304:	008002b4 	movhi	r2,10
   11308:	10cabb05 	stb	r3,10988(r2)
   fmcdaq2_ctx.ad9680_jesd.octets_per_frame = 1;
   1130c:	00c00044 	movi	r3,1
   11310:	008002b4 	movhi	r2,10
   11314:	10cabb85 	stb	r3,10990(r2)
   fmcdaq2_ctx.ad9680_jesd.frames_per_multiframe = 32;
   11318:	00c00804 	movi	r3,32
   1131c:	008002b4 	movhi	r2,10
   11320:	10cabbc5 	stb	r3,10991(r2)
   fmcdaq2_ctx.ad9680_jesd.subclass_mode = 1;
   11324:	00c00044 	movi	r3,1
   11328:	008002b4 	movhi	r2,10
   1132c:	10cabd05 	stb	r3,10996(r2)

   fmcdaq2_ctx.ad9680_core.no_of_channels = 2;
   11330:	00c00084 	movi	r3,2
   11334:	008002b4 	movhi	r2,10
   11338:	10cab945 	stb	r3,10981(r2)
   fmcdaq2_ctx.ad9680_core.resolution = 14;
   1133c:	00c00384 	movi	r3,14
   11340:	008002b4 	movhi	r2,10
   11344:	10cab985 	stb	r3,10982(r2)

   //******************************************************************************
   // configure the receiver DMA
   //******************************************************************************

   fmcdaq2_ctx.ad9680_dma.type = DMAC_RX;
   11348:	008002b4 	movhi	r2,10
   1134c:	100ae705 	stb	zero,11164(r2)
   fmcdaq2_ctx.ad9680_dma.transfer = &fmcdaq2_ctx.rx_xfer;
   11350:	008002b4 	movhi	r2,10
   11354:	108aea04 	addi	r2,r2,11176
   11358:	00c002b4 	movhi	r3,10
   1135c:	188ae915 	stw	r2,11172(r3)
   fmcdaq2_ctx.rx_xfer.id = 0;
   11360:	008002b4 	movhi	r2,10
   11364:	100aea15 	stw	zero,11176(r2)
   fmcdaq2_ctx.rx_xfer.no_of_samples = DMA_NUMBER_OF_SAMPLES;
   11368:	00c40004 	movi	r3,4096
   1136c:	008002b4 	movhi	r2,10
   11370:	10caec15 	stw	r3,11184(r2)

   fmcdaq2_ctx.ad9144_dma.type = DMAC_TX;
   11374:	00c00044 	movi	r3,1
   11378:	008002b4 	movhi	r2,10
   1137c:	10ca8f05 	stb	r3,10812(r2)
   fmcdaq2_ctx.ad9144_dma.transfer = &fmcdaq2_ctx.tx_xfer;
   11380:	008002b4 	movhi	r2,10
   11384:	108aed04 	addi	r2,r2,11188
   11388:	00c002b4 	movhi	r3,10
   1138c:	188a9115 	stw	r2,10820(r3)
   fmcdaq2_ctx.ad9144_dma.flags = DMAC_FLAGS_TLAST;
   11390:	00c00084 	movi	r3,2
   11394:	008002b4 	movhi	r2,10
   11398:	10ca8f45 	stb	r3,10813(r2)
   fmcdaq2_ctx.tx_xfer.id = 0;
   1139c:	008002b4 	movhi	r2,10
   113a0:	100aed15 	stw	zero,11188(r2)
   fmcdaq2_ctx.tx_xfer.no_of_samples = dac_buffer_load(fmcdaq2_ctx.ad9144_core, fmcdaq2_ctx.tx_xfer.start_address);
   113a4:	008002b4 	movhi	r2,10
   113a8:	108aee17 	ldw	r2,11192(r2)
   113ac:	100f883a 	mov	r7,r2
   113b0:	008002b4 	movhi	r2,10
   113b4:	110a7317 	ldw	r4,10700(r2)
   113b8:	008002b4 	movhi	r2,10
   113bc:	114a7417 	ldw	r5,10704(r2)
   113c0:	008002b4 	movhi	r2,10
   113c4:	118a7517 	ldw	r6,10708(r2)
   113c8:	00083240 	call	8324 <dac_buffer_load>
   113cc:	1007883a 	mov	r3,r2
   113d0:	008002b4 	movhi	r2,10
   113d4:	10caef15 	stw	r3,11196(r2)

   // change the default JESD configurations, if required
   fmcdaq2_reconfig(&fmcdaq2_ctx.ad9144_param,
   113d8:	008002b4 	movhi	r2,10
   113dc:	108a4e17 	ldw	r2,10552(r2)
   113e0:	00c000c4 	movi	r3,3
   113e4:	d8c00115 	stw	r3,4(sp)
   113e8:	d8800015 	stw	r2,0(sp)
   113ec:	01c002b4 	movhi	r7,10
   113f0:	39cac004 	addi	r7,r7,11008
   113f4:	018002b4 	movhi	r6,10
   113f8:	318a6b04 	addi	r6,r6,10668
   113fc:	014002b4 	movhi	r5,10
   11400:	294a9204 	addi	r5,r5,10824
   11404:	010002b4 	movhi	r4,10
   11408:	210a4f04 	addi	r4,r4,10556
   1140c:	00106d80 	call	106d8 <fmcdaq2_reconfig>
   // bring up the system
   //******************************************************************************

   // setup GPIOs

   gpio_get(&fmcdaq2_ctx.clkd_sync, GPIO_CLKD_SYNC, 1);
   11410:	01800044 	movi	r6,1
   11414:	01400984 	movi	r5,38
   11418:	010002b4 	movhi	r4,10
   1141c:	210af004 	addi	r4,r4,11200
   11420:	000c0b00 	call	c0b0 <gpio_get>
   gpio_get(&fmcdaq2_ctx.dac_reset, GPIO_DAC_RESET, 1);
   11424:	01800044 	movi	r6,1
   11428:	01400a04 	movi	r5,40
   1142c:	010002b4 	movhi	r4,10
   11430:	210af104 	addi	r4,r4,11204
   11434:	000c0b00 	call	c0b0 <gpio_get>
   gpio_get(&fmcdaq2_ctx.dac_txen,  GPIO_DAC_TXEN,  1);
   11438:	01800044 	movi	r6,1
   1143c:	01400a44 	movi	r5,41
   11440:	010002b4 	movhi	r4,10
   11444:	210af204 	addi	r4,r4,11208
   11448:	000c0b00 	call	c0b0 <gpio_get>
   gpio_get(&fmcdaq2_ctx.adc_pd,    GPIO_ADC_PD,    1);
   1144c:	01800044 	movi	r6,1
   11450:	01400a84 	movi	r5,42
   11454:	010002b4 	movhi	r4,10
   11458:	210af304 	addi	r4,r4,11212
   1145c:	000c0b00 	call	c0b0 <gpio_get>

   gpio_set_value(fmcdaq2_ctx.clkd_sync, 0);
   11460:	008002b4 	movhi	r2,10
   11464:	108af017 	ldw	r2,11200(r2)
   11468:	000b883a 	mov	r5,zero
   1146c:	1009883a 	mov	r4,r2
   11470:	000c20c0 	call	c20c <gpio_set_value>
   gpio_set_value(fmcdaq2_ctx.dac_reset, 0);
   11474:	008002b4 	movhi	r2,10
   11478:	108af117 	ldw	r2,11204(r2)
   1147c:	000b883a 	mov	r5,zero
   11480:	1009883a 	mov	r4,r2
   11484:	000c20c0 	call	c20c <gpio_set_value>
   gpio_set_value(fmcdaq2_ctx.dac_txen,  0);
   11488:	008002b4 	movhi	r2,10
   1148c:	108af217 	ldw	r2,11208(r2)
   11490:	000b883a 	mov	r5,zero
   11494:	1009883a 	mov	r4,r2
   11498:	000c20c0 	call	c20c <gpio_set_value>
   gpio_set_value(fmcdaq2_ctx.adc_pd,    1);
   1149c:	008002b4 	movhi	r2,10
   114a0:	108af317 	ldw	r2,11212(r2)
   114a4:	01400044 	movi	r5,1
   114a8:	1009883a 	mov	r4,r2
   114ac:	000c20c0 	call	c20c <gpio_set_value>
   mdelay(250);
   114b0:	01000134 	movhi	r4,4
   114b4:	21342404 	addi	r4,r4,-12144
   114b8:	0025e400 	call	25e40 <usleep>

   gpio_set_value(fmcdaq2_ctx.clkd_sync, 1);
   114bc:	008002b4 	movhi	r2,10
   114c0:	108af017 	ldw	r2,11200(r2)
   114c4:	01400044 	movi	r5,1
   114c8:	1009883a 	mov	r4,r2
   114cc:	000c20c0 	call	c20c <gpio_set_value>
   gpio_set_value(fmcdaq2_ctx.dac_reset, 1);
   114d0:	008002b4 	movhi	r2,10
   114d4:	108af117 	ldw	r2,11204(r2)
   114d8:	01400044 	movi	r5,1
   114dc:	1009883a 	mov	r4,r2
   114e0:	000c20c0 	call	c20c <gpio_set_value>
   gpio_set_value(fmcdaq2_ctx.dac_txen,  1);
   114e4:	008002b4 	movhi	r2,10
   114e8:	108af217 	ldw	r2,11208(r2)
   114ec:	01400044 	movi	r5,1
   114f0:	1009883a 	mov	r4,r2
   114f4:	000c20c0 	call	c20c <gpio_set_value>
   gpio_set_value(fmcdaq2_ctx.adc_pd,    0);
   114f8:	008002b4 	movhi	r2,10
   114fc:	108af317 	ldw	r2,11212(r2)
   11500:	000b883a 	mov	r5,zero
   11504:	1009883a 	mov	r4,r2
   11508:	000c20c0 	call	c20c <gpio_set_value>

   mdelay(250);
   1150c:	01000134 	movhi	r4,4
   11510:	21342404 	addi	r4,r4,-12144
   11514:	0025e400 	call	25e40 <usleep>

   // setup clocks
   ad9523_setup(&fmcdaq2_ctx.ad9523_device, &fmcdaq2_ctx.ad9523_param);
   11518:	014002b4 	movhi	r5,10
   1151c:	294a4a04 	addi	r5,r5,10536
   11520:	010002b4 	movhi	r4,10
   11524:	210a7004 	addi	r4,r4,10688
   11528:	00062200 	call	6220 <ad9523_setup>
   // Both sequences are interleaved here so that the transceivers which might
   // be shared between the DAC and ADC link are enabled at the same time.


   // ADC
   ad9680_setup(&fmcdaq2_ctx.ad9680_device, &fmcdaq2_ctx.ad9680_param);
   1152c:	014002b4 	movhi	r5,10
   11530:	294a6b04 	addi	r5,r5,10668
   11534:	010002b4 	movhi	r4,10
   11538:	210a7204 	addi	r4,r4,10696
   1153c:	00071440 	call	7144 <ad9680_setup>

   // DAC FPGA JESD204 link layer
   jesd_setup(&fmcdaq2_ctx.ad9144_jesd);
   11540:	010002b4 	movhi	r4,10
   11544:	210a8804 	addi	r4,r4,10784
   11548:	000b3f00 	call	b3f0 <jesd_setup>

   // ADC and DAC FPGA JESD204 PHY layer
#ifdef ALTERA
   printf("AD9144 Setup\n");
   1154c:	010000f4 	movhi	r4,3
   11550:	210d2f04 	addi	r4,r4,13500
   11554:	00164700 	call	16470 <puts>
   fmcdaq2_ctx.ad9144_xcvr.rx_tx_n = 0;
   11558:	008002b4 	movhi	r2,10
   1155c:	100a9245 	stb	zero,10825(r2)
   xcvr_setup(&fmcdaq2_ctx.ad9144_xcvr);
   11560:	010002b4 	movhi	r4,10
   11564:	210a9204 	addi	r4,r4,10824
   11568:	000c7bc0 	call	c7bc <xcvr_setup>

   printf("AD9680 Setup\n");
   1156c:	010000f4 	movhi	r4,3
   11570:	210d3304 	addi	r4,r4,13516
   11574:	00164700 	call	16470 <puts>
   xcvr_setup(&fmcdaq2_ctx.ad9680_xcvr);
   11578:	010002b4 	movhi	r4,10
   1157c:	210ac004 	addi	r4,r4,11008
   11580:	000c7bc0 	call	c7bc <xcvr_setup>
#endif

   // ADC FPGA JESD204 link layer
   jesd_setup(&fmcdaq2_ctx.ad9680_jesd);
   11584:	010002b4 	movhi	r4,10
   11588:	210aba04 	addi	r4,r4,10984
   1158c:	000b3f00 	call	b3f0 <jesd_setup>

   // DAC
   ad9144_setup(&fmcdaq2_ctx.ad9144_device, &fmcdaq2_ctx.ad9144_param);
   11590:	014002b4 	movhi	r5,10
   11594:	294a4f04 	addi	r5,r5,10556
   11598:	010002b4 	movhi	r4,10
   1159c:	210a7104 	addi	r4,r4,10692
   115a0:	0004aa00 	call	4aa0 <ad9144_setup>

   // JESD core status
   axi_jesd204_tx_status_read(&fmcdaq2_ctx.ad9144_jesd);
   115a4:	010002b4 	movhi	r4,10
   115a8:	210a8804 	addi	r4,r4,10784
   115ac:	000b8280 	call	b828 <axi_jesd204_tx_status_read>
   axi_jesd204_rx_status_read(&fmcdaq2_ctx.ad9680_jesd);
   115b0:	010002b4 	movhi	r4,10
   115b4:	210aba04 	addi	r4,r4,10984
   115b8:	000b6300 	call	b630 <axi_jesd204_rx_status_read>

   // interface core set up
   adc_setup(fmcdaq2_ctx.ad9680_core);
   115bc:	008002b4 	movhi	r2,10
   115c0:	110ab817 	ldw	r4,10976(r2)
   115c4:	008002b4 	movhi	r2,10
   115c8:	114ab917 	ldw	r5,10980(r2)
   115cc:	00074780 	call	7478 <adc_setup>
   dac_setup(&fmcdaq2_ctx.ad9144_core);
   115d0:	010002b4 	movhi	r4,10
   115d4:	210a7304 	addi	r4,r4,10700
   115d8:	0008bf80 	call	8bf8 <dac_setup>

   ad9144_status(fmcdaq2_ctx.ad9144_device);
   115dc:	008002b4 	movhi	r2,10
   115e0:	108a7117 	ldw	r2,10692(r2)
   115e4:	1009883a 	mov	r4,r2
   115e8:	00052180 	call	5218 <ad9144_status>

   axi_jesd204_rx_laneinfo_read(&fmcdaq2_ctx.ad9680_jesd, 0);
   115ec:	000b883a 	mov	r5,zero
   115f0:	010002b4 	movhi	r4,10
   115f4:	210aba04 	addi	r4,r4,10984
   115f8:	000ba300 	call	ba30 <axi_jesd204_rx_laneinfo_read>
   axi_jesd204_rx_laneinfo_read(&fmcdaq2_ctx.ad9680_jesd, 1);
   115fc:	01400044 	movi	r5,1
   11600:	010002b4 	movhi	r4,10
   11604:	210aba04 	addi	r4,r4,10984
   11608:	000ba300 	call	ba30 <axi_jesd204_rx_laneinfo_read>
   axi_jesd204_rx_laneinfo_read(&fmcdaq2_ctx.ad9680_jesd, 2);
   1160c:	01400084 	movi	r5,2
   11610:	010002b4 	movhi	r4,10
   11614:	210aba04 	addi	r4,r4,10984
   11618:	000ba300 	call	ba30 <axi_jesd204_rx_laneinfo_read>
   axi_jesd204_rx_laneinfo_read(&fmcdaq2_ctx.ad9680_jesd, 3);
   1161c:	014000c4 	movi	r5,3
   11620:	010002b4 	movhi	r4,10
   11624:	210aba04 	addi	r4,r4,10984
   11628:	000ba300 	call	ba30 <axi_jesd204_rx_laneinfo_read>

   //******************************************************************************
   // transport path testing
   //******************************************************************************

   fmcdaq2_ctx.ad9144_channels[0].sel = DAC_SRC_SED;
   1162c:	00c00044 	movi	r3,1
   11630:	008002b4 	movhi	r2,10
   11634:	10ca7e15 	stw	r3,10744(r2)
   fmcdaq2_ctx.ad9144_channels[1].sel = DAC_SRC_SED;
   11638:	00c00044 	movi	r3,1
   1163c:	008002b4 	movhi	r2,10
   11640:	10ca8715 	stw	r3,10780(r2)
   dac_data_setup(&fmcdaq2_ctx.ad9144_core);
   11644:	010002b4 	movhi	r4,10
   11648:	210a7304 	addi	r4,r4,10700
   1164c:	0008cf80 	call	8cf8 <dac_data_setup>
   ad9144_short_pattern_test(fmcdaq2_ctx.ad9144_device, &fmcdaq2_ctx.ad9144_param);
   11650:	008002b4 	movhi	r2,10
   11654:	108a7117 	ldw	r2,10692(r2)
   11658:	014002b4 	movhi	r5,10
   1165c:	294a4f04 	addi	r5,r5,10556
   11660:	1009883a 	mov	r4,r2
   11664:	00054480 	call	5448 <ad9144_short_pattern_test>

   // PN7 data path test

   fmcdaq2_ctx.ad9144_channels[0].sel = DAC_SRC_PN23;
   11668:	00c00184 	movi	r3,6
   1166c:	008002b4 	movhi	r2,10
   11670:	10ca7e15 	stw	r3,10744(r2)
   fmcdaq2_ctx.ad9144_channels[1].sel = DAC_SRC_PN23;
   11674:	00c00184 	movi	r3,6
   11678:	008002b4 	movhi	r2,10
   1167c:	10ca8715 	stw	r3,10780(r2)
   dac_data_setup(&fmcdaq2_ctx.ad9144_core);
   11680:	010002b4 	movhi	r4,10
   11684:	210a7304 	addi	r4,r4,10700
   11688:	0008cf80 	call	8cf8 <dac_data_setup>
   fmcdaq2_ctx.ad9144_param.prbs_type = AD9144_PRBS7;
   1168c:	008002b4 	movhi	r2,10
   11690:	100a6515 	stw	zero,10644(r2)
   ad9144_datapath_prbs_test(fmcdaq2_ctx.ad9144_device, &fmcdaq2_ctx.ad9144_param);
   11694:	008002b4 	movhi	r2,10
   11698:	108a7117 	ldw	r2,10692(r2)
   1169c:	014002b4 	movhi	r5,10
   116a0:	294a4f04 	addi	r5,r5,10556
   116a4:	1009883a 	mov	r4,r2
   116a8:	00056700 	call	5670 <ad9144_datapath_prbs_test>

   // PN15 data path test

   fmcdaq2_ctx.ad9144_channels[0].sel = DAC_SRC_PN31;
   116ac:	00c001c4 	movi	r3,7
   116b0:	008002b4 	movhi	r2,10
   116b4:	10ca7e15 	stw	r3,10744(r2)
   fmcdaq2_ctx.ad9144_channels[1].sel = DAC_SRC_PN31;
   116b8:	00c001c4 	movi	r3,7
   116bc:	008002b4 	movhi	r2,10
   116c0:	10ca8715 	stw	r3,10780(r2)
   dac_data_setup(&fmcdaq2_ctx.ad9144_core);
   116c4:	010002b4 	movhi	r4,10
   116c8:	210a7304 	addi	r4,r4,10700
   116cc:	0008cf80 	call	8cf8 <dac_data_setup>
   fmcdaq2_ctx.ad9144_param.prbs_type = AD9144_PRBS15;
   116d0:	00c00044 	movi	r3,1
   116d4:	008002b4 	movhi	r2,10
   116d8:	10ca6515 	stw	r3,10644(r2)
   ad9144_datapath_prbs_test(fmcdaq2_ctx.ad9144_device, &fmcdaq2_ctx.ad9144_param);
   116dc:	008002b4 	movhi	r2,10
   116e0:	108a7117 	ldw	r2,10692(r2)
   116e4:	014002b4 	movhi	r5,10
   116e8:	294a4f04 	addi	r5,r5,10556
   116ec:	1009883a 	mov	r4,r2
   116f0:	00056700 	call	5670 <ad9144_datapath_prbs_test>

   //******************************************************************************
   // receive path testing
   //******************************************************************************

   ad9680_test(fmcdaq2_ctx.ad9680_device, AD9680_TEST_PN9);
   116f4:	008002b4 	movhi	r2,10
   116f8:	108a7217 	ldw	r2,10696(r2)
   116fc:	01400184 	movi	r5,6
   11700:	1009883a 	mov	r4,r2
   11704:	00070800 	call	7080 <ad9680_test>
   if(adc_pn_mon(fmcdaq2_ctx.ad9680_core, ADC_PN9) == -1) {
   11708:	000d883a 	mov	r6,zero
   1170c:	008002b4 	movhi	r2,10
   11710:	110ab817 	ldw	r4,10976(r2)
   11714:	008002b4 	movhi	r2,10
   11718:	114ab917 	ldw	r5,10980(r2)
   1171c:	0007b500 	call	7b50 <adc_pn_mon>
   11720:	10bfffd8 	cmpnei	r2,r2,-1
   11724:	1000051e 	bne	r2,zero,1173c <daq2_init+0xb50>
      printf("%s ad9680 - PN9 sequence mismatch!\n", __func__);
   11728:	014000f4 	movhi	r5,3
   1172c:	294d5a04 	addi	r5,r5,13672
   11730:	010000f4 	movhi	r4,3
   11734:	210d3704 	addi	r4,r4,13532
   11738:	001634c0 	call	1634c <printf>
   };
   ad9680_test(fmcdaq2_ctx.ad9680_device, AD9680_TEST_PN23);
   1173c:	008002b4 	movhi	r2,10
   11740:	108a7217 	ldw	r2,10696(r2)
   11744:	01400144 	movi	r5,5
   11748:	1009883a 	mov	r4,r2
   1174c:	00070800 	call	7080 <ad9680_test>
   if(adc_pn_mon(fmcdaq2_ctx.ad9680_core, ADC_PN23A) == -1) {
   11750:	01800044 	movi	r6,1
   11754:	008002b4 	movhi	r2,10
   11758:	110ab817 	ldw	r4,10976(r2)
   1175c:	008002b4 	movhi	r2,10
   11760:	114ab917 	ldw	r5,10980(r2)
   11764:	0007b500 	call	7b50 <adc_pn_mon>
   11768:	10bfffd8 	cmpnei	r2,r2,-1
   1176c:	1000051e 	bne	r2,zero,11784 <daq2_init+0xb98>
      printf("%s ad9680 - PN23 sequence mismatch!\n", __func__);
   11770:	014000f4 	movhi	r5,3
   11774:	294d5a04 	addi	r5,r5,13672
   11778:	010000f4 	movhi	r4,3
   1177c:	210d4004 	addi	r4,r4,13568
   11780:	001634c0 	call	1634c <printf>
   };

   //daq2_transaction_adc();
   //daq2_transaction_adc();

   return 0;
   11784:	0005883a 	mov	r2,zero
}
   11788:	e037883a 	mov	sp,fp
   1178c:	dfc00117 	ldw	ra,4(sp)
   11790:	df000017 	ldw	fp,0(sp)
   11794:	dec00204 	addi	sp,sp,8
   11798:	f800283a 	ret

0001179c <daq2_transaction_adc>:


int daq2_transaction_adc()
{
   1179c:	defffc04 	addi	sp,sp,-16
   117a0:	dfc00315 	stw	ra,12(sp)
   117a4:	df000215 	stw	fp,8(sp)
   117a8:	df000204 	addi	fp,sp,8
   //******************************************************************************
   // external loopback - capture data with DMA
   //******************************************************************************

   ad9680_test(fmcdaq2_ctx.ad9680_device, AD9680_TEST_OFF);
   117ac:	008002b4 	movhi	r2,10
   117b0:	108a7217 	ldw	r2,10696(r2)
   117b4:	000b883a 	mov	r5,zero
   117b8:	1009883a 	mov	r4,r2
   117bc:	00070800 	call	7080 <ad9680_test>
   if(!dmac_start_transaction(fmcdaq2_ctx.ad9680_dma)) {
   117c0:	008002b4 	movhi	r2,10
   117c4:	110ae617 	ldw	r4,11160(r2)
   117c8:	008002b4 	movhi	r2,10
   117cc:	114ae717 	ldw	r5,11164(r2)
   117d0:	008002b4 	movhi	r2,10
   117d4:	118ae817 	ldw	r6,11168(r2)
   117d8:	008002b4 	movhi	r2,10
   117dc:	11cae917 	ldw	r7,11172(r2)
   117e0:	0008f980 	call	8f98 <dmac_start_transaction>
   117e4:	1000421e 	bne	r2,zero,118f0 <daq2_transaction_adc+0x154>
      printf("daq2: RX capture done.\n");
   117e8:	010000f4 	movhi	r4,3
   117ec:	210d4a04 	addi	r4,r4,13608
   117f0:	00164700 	call	16470 <puts>

      for(int i = 0; i < 16; i++) {
   117f4:	e03fff15 	stw	zero,-4(fp)
   117f8:	00001806 	br	1185c <daq2_transaction_adc+0xc0>
         printf("%8.4f\t", ((float)((short)(fmcdaq2_ctx.rx_xfer_buf[i] & 0x0000ffff)))/16384);
   117fc:	e0bfff17 	ldw	r2,-4(fp)
   11800:	10803ec4 	addi	r2,r2,251
   11804:	100690ba 	slli	r3,r2,2
   11808:	008002b4 	movhi	r2,10
   1180c:	1885883a 	add	r2,r3,r2
   11810:	1089f917 	ldw	r2,10212(r2)
   11814:	10bfffcc 	andi	r2,r2,65535
   11818:	10a0001c 	xori	r2,r2,32768
   1181c:	10a00004 	addi	r2,r2,-32768
   11820:	1007feb2 	custom	250,r3,r2,zero
   11824:	0091a034 	movhi	r2,18048
   11828:	1885fff2 	custom	255,r2,r3,r2
   1182c:	1009883a 	mov	r4,r2
   11830:	0014e480 	call	14e48 <__extendsfdf2>
   11834:	100d883a 	mov	r6,r2
   11838:	180f883a 	mov	r7,r3
   1183c:	300b883a 	mov	r5,r6
   11840:	380d883a 	mov	r6,r7
   11844:	010000f4 	movhi	r4,3
   11848:	210d5004 	addi	r4,r4,13632
   1184c:	001634c0 	call	1634c <printf>
      for(int i = 0; i < 16; i++) {
   11850:	e0bfff17 	ldw	r2,-4(fp)
   11854:	10800044 	addi	r2,r2,1
   11858:	e0bfff15 	stw	r2,-4(fp)
   1185c:	e0bfff17 	ldw	r2,-4(fp)
   11860:	10800410 	cmplti	r2,r2,16
   11864:	103fe51e 	bne	r2,zero,117fc <__alt_mem_mcu_subsystem_ram_0+0x77ff17fc>
      }
      printf("\n");
   11868:	01000284 	movi	r4,10
   1186c:	001638c0 	call	1638c <putchar>
      for(int i = 0; i < 16; i++) {
   11870:	e03ffe15 	stw	zero,-8(fp)
   11874:	00001906 	br	118dc <daq2_transaction_adc+0x140>
         printf("%8.4f\t", ((float)((short)((fmcdaq2_ctx.rx_xfer_buf[i]>>16) & 0x0000ffff)))/16384);
   11878:	e0bffe17 	ldw	r2,-8(fp)
   1187c:	10803ec4 	addi	r2,r2,251
   11880:	100690ba 	slli	r3,r2,2
   11884:	008002b4 	movhi	r2,10
   11888:	1885883a 	add	r2,r3,r2
   1188c:	1089f917 	ldw	r2,10212(r2)
   11890:	1004d43a 	srli	r2,r2,16
   11894:	10bfffcc 	andi	r2,r2,65535
   11898:	10a0001c 	xori	r2,r2,32768
   1189c:	10a00004 	addi	r2,r2,-32768
   118a0:	1007feb2 	custom	250,r3,r2,zero
   118a4:	0091a034 	movhi	r2,18048
   118a8:	1885fff2 	custom	255,r2,r3,r2
   118ac:	1009883a 	mov	r4,r2
   118b0:	0014e480 	call	14e48 <__extendsfdf2>
   118b4:	100d883a 	mov	r6,r2
   118b8:	180f883a 	mov	r7,r3
   118bc:	300b883a 	mov	r5,r6
   118c0:	380d883a 	mov	r6,r7
   118c4:	010000f4 	movhi	r4,3
   118c8:	210d5004 	addi	r4,r4,13632
   118cc:	001634c0 	call	1634c <printf>
      for(int i = 0; i < 16; i++) {
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	10800044 	addi	r2,r2,1
   118d8:	e0bffe15 	stw	r2,-8(fp)
   118dc:	e0bffe17 	ldw	r2,-8(fp)
   118e0:	10800410 	cmplti	r2,r2,16
   118e4:	103fe41e 	bne	r2,zero,11878 <__alt_mem_mcu_subsystem_ram_0+0x77ff1878>
      }
      printf("\n");
   118e8:	01000284 	movi	r4,10
   118ec:	001638c0 	call	1638c <putchar>

   };

   return 0;
   118f0:	0005883a 	mov	r2,zero
}
   118f4:	e037883a 	mov	sp,fp
   118f8:	dfc00117 	ldw	ra,4(sp)
   118fc:	df000017 	ldw	fp,0(sp)
   11900:	dec00204 	addi	sp,sp,8
   11904:	f800283a 	ret

00011908 <daq2_transaction_dac>:

int daq2_transaction_dac()
{
   11908:	defffe04 	addi	sp,sp,-8
   1190c:	dfc00115 	stw	ra,4(sp)
   11910:	df000015 	stw	fp,0(sp)
   11914:	d839883a 	mov	fp,sp
   // default data

#if DMA_BUFFER
   fmcdaq2_ctx.ad9144_channels[0].sel = DAC_SRC_DMA;
   11918:	00c00084 	movi	r3,2
   1191c:	008002b4 	movhi	r2,10
   11920:	10ca7e15 	stw	r3,10744(r2)
   fmcdaq2_ctx.ad9144_channels[1].sel = DAC_SRC_DMA;
   11924:	00c00084 	movi	r3,2
   11928:	008002b4 	movhi	r2,10
   1192c:	10ca8715 	stw	r3,10780(r2)
   dac_data_setup(&fmcdaq2_ctx.ad9144_core);
   11930:	010002b4 	movhi	r4,10
   11934:	210a7304 	addi	r4,r4,10700
   11938:	0008cf80 	call	8cf8 <dac_data_setup>

   if(!dmac_start_transaction(fmcdaq2_ctx.ad9144_dma)) {
   1193c:	008002b4 	movhi	r2,10
   11940:	110a8e17 	ldw	r4,10808(r2)
   11944:	008002b4 	movhi	r2,10
   11948:	114a8f17 	ldw	r5,10812(r2)
   1194c:	008002b4 	movhi	r2,10
   11950:	118a9017 	ldw	r6,10816(r2)
   11954:	008002b4 	movhi	r2,10
   11958:	11ca9117 	ldw	r7,10820(r2)
   1195c:	0008f980 	call	8f98 <dmac_start_transaction>
   11960:	1000031e 	bne	r2,zero,11970 <daq2_transaction_dac+0x68>
      printf("daq2: transmit data from memory\n");
   11964:	010000f4 	movhi	r4,3
   11968:	210d5204 	addi	r4,r4,13640
   1196c:	00164700 	call	16470 <puts>
   dac_data_setup(&ad9144_core);

   printf("daq2: setup and configuration is done\n");
#endif

   return 0;
   11970:	0005883a 	mov	r2,zero
}
   11974:	e037883a 	mov	sp,fp
   11978:	dfc00117 	ldw	ra,4(sp)
   1197c:	df000017 	ldw	fp,0(sp)
   11980:	dec00204 	addi	sp,sp,8
   11984:	f800283a 	ret

00011988 <mem_writing>:


void mem_writing(unsigned int size)
{
   11988:	defffb04 	addi	sp,sp,-20
   1198c:	dfc00415 	stw	ra,16(sp)
   11990:	df000315 	stw	fp,12(sp)
   11994:	df000304 	addi	fp,sp,12
   11998:	e13ffd15 	stw	r4,-12(fp)
   unsigned int i;
   volatile unsigned int *ptr;
   ptr = (volatile unsigned int*)DDR3_CTRL_AMM_0_BASE;
   1199c:	e03ffe15 	stw	zero,-8(fp)
   memset(ptr, 0, sizeof(int)*size);
   119a0:	e0bffd17 	ldw	r2,-12(fp)
   119a4:	100490ba 	slli	r2,r2,2
   119a8:	100d883a 	mov	r6,r2
   119ac:	000b883a 	mov	r5,zero
   119b0:	e13ffe17 	ldw	r4,-8(fp)
   119b4:	0015bb00 	call	15bb0 <memset>
   for(i = 0; i < size; i++)
   119b8:	e03fff15 	stw	zero,-4(fp)
   119bc:	00000906 	br	119e4 <mem_writing+0x5c>
   {
      ptr[i] = i;
   119c0:	e0bfff17 	ldw	r2,-4(fp)
   119c4:	100490ba 	slli	r2,r2,2
   119c8:	e0fffe17 	ldw	r3,-8(fp)
   119cc:	1885883a 	add	r2,r3,r2
   119d0:	e0ffff17 	ldw	r3,-4(fp)
   119d4:	10c00035 	stwio	r3,0(r2)
   for(i = 0; i < size; i++)
   119d8:	e0bfff17 	ldw	r2,-4(fp)
   119dc:	10800044 	addi	r2,r2,1
   119e0:	e0bfff15 	stw	r2,-4(fp)
   119e4:	e0ffff17 	ldw	r3,-4(fp)
   119e8:	e0bffd17 	ldw	r2,-12(fp)
   119ec:	18bff436 	bltu	r3,r2,119c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff19c0>
   }
}
   119f0:	0001883a 	nop
   119f4:	e037883a 	mov	sp,fp
   119f8:	dfc00117 	ldw	ra,4(sp)
   119fc:	df000017 	ldw	fp,0(sp)
   11a00:	dec00204 	addi	sp,sp,8
   11a04:	f800283a 	ret

00011a08 <mem_reading>:

unsigned int mem_reading(unsigned int size)
{
   11a08:	defffa04 	addi	sp,sp,-24
   11a0c:	df000515 	stw	fp,20(sp)
   11a10:	df000504 	addi	fp,sp,20
   11a14:	e13ffb15 	stw	r4,-20(fp)
   unsigned int value, i;
   unsigned int result = 0;
   11a18:	e03ffe15 	stw	zero,-8(fp)
   volatile unsigned int *ptr;

   ptr = (volatile unsigned int*)DDR3_CTRL_AMM_0_BASE;
   11a1c:	e03ffd15 	stw	zero,-12(fp)
   for(i = 0; i < size; i++)
   11a20:	e03fff15 	stw	zero,-4(fp)
   11a24:	00000f06 	br	11a64 <mem_reading+0x5c>
   {
      value = ptr[i];
   11a28:	e0bfff17 	ldw	r2,-4(fp)
   11a2c:	100490ba 	slli	r2,r2,2
   11a30:	e0fffd17 	ldw	r3,-12(fp)
   11a34:	1885883a 	add	r2,r3,r2
   11a38:	10800037 	ldwio	r2,0(r2)
   11a3c:	e0bffc15 	stw	r2,-16(fp)
      if(value != i)
   11a40:	e0fffc17 	ldw	r3,-16(fp)
   11a44:	e0bfff17 	ldw	r2,-4(fp)
   11a48:	18800326 	beq	r3,r2,11a58 <mem_reading+0x50>
      {
         result++;
   11a4c:	e0bffe17 	ldw	r2,-8(fp)
   11a50:	10800044 	addi	r2,r2,1
   11a54:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i < size; i++)
   11a58:	e0bfff17 	ldw	r2,-4(fp)
   11a5c:	10800044 	addi	r2,r2,1
   11a60:	e0bfff15 	stw	r2,-4(fp)
   11a64:	e0ffff17 	ldw	r3,-4(fp)
   11a68:	e0bffb17 	ldw	r2,-20(fp)
   11a6c:	18bfee36 	bltu	r3,r2,11a28 <__alt_mem_mcu_subsystem_ram_0+0x77ff1a28>
      }
   }
   return result;
   11a70:	e0bffe17 	ldw	r2,-8(fp)
}
   11a74:	e037883a 	mov	sp,fp
   11a78:	df000017 	ldw	fp,0(sp)
   11a7c:	dec00104 	addi	sp,sp,4
   11a80:	f800283a 	ret

00011a84 <mem_testing>:

unsigned int mem_testing(unsigned int size)
{
   11a84:	defffb04 	addi	sp,sp,-20
   11a88:	dfc00415 	stw	ra,16(sp)
   11a8c:	df000315 	stw	fp,12(sp)
   11a90:	df000304 	addi	fp,sp,12
   11a94:	e13ffd15 	stw	r4,-12(fp)
   unsigned int i, value;
   unsigned int result  = 0;
   11a98:	e03fff15 	stw	zero,-4(fp)
   volatile unsigned int *ptr;

   ptr = (volatile unsigned int*)DDR3_CTRL_AMM_0_BASE;
   11a9c:	e03ffe15 	stw	zero,-8(fp)

   mem_writing(size);
   11aa0:	e13ffd17 	ldw	r4,-12(fp)
   11aa4:	00119880 	call	11988 <mem_writing>
   result = mem_reading(size);
   11aa8:	e13ffd17 	ldw	r4,-12(fp)
   11aac:	0011a080 	call	11a08 <mem_reading>
   11ab0:	e0bfff15 	stw	r2,-4(fp)

   return result;
   11ab4:	e0bfff17 	ldw	r2,-4(fp)
}
   11ab8:	e037883a 	mov	sp,fp
   11abc:	dfc00117 	ldw	ra,4(sp)
   11ac0:	df000017 	ldw	fp,0(sp)
   11ac4:	dec00204 	addi	sp,sp,8
   11ac8:	f800283a 	ret

00011acc <axi_jesd204_tx_irq>:

static void axi_jesd204_tx_irq (void *context)
{
   11acc:	defffd04 	addi	sp,sp,-12
   11ad0:	df000215 	stw	fp,8(sp)
   11ad4:	df000204 	addi	fp,sp,8
   11ad8:	e13ffe15 	stw	r4,-8(fp)
   unsigned int pending;
   pending = IORD_32DIRECT(AD9144_JESD204_LINK_MANAGEMENT_BASE, JESD204_REG_IRQ_PENDING);
   11adc:	00a201f4 	movhi	r2,34823
   11ae0:	10982137 	ldwio	r2,24708(r2)
   11ae4:	e0bfff15 	stw	r2,-4(fp)
   if(pending)
   11ae8:	e0bfff17 	ldw	r2,-4(fp)
   11aec:	10000326 	beq	r2,zero,11afc <axi_jesd204_tx_irq+0x30>
   {
      IOWR_32DIRECT(AD9144_JESD204_LINK_MANAGEMENT_BASE, JESD204_REG_IRQ_PENDING, pending);
   11af0:	e0ffff17 	ldw	r3,-4(fp)
   11af4:	00a201f4 	movhi	r2,34823
   11af8:	10d82135 	stwio	r3,24708(r2)
   }
}
   11afc:	0001883a 	nop
   11b00:	e037883a 	mov	sp,fp
   11b04:	df000017 	ldw	fp,0(sp)
   11b08:	dec00104 	addi	sp,sp,4
   11b0c:	f800283a 	ret

00011b10 <axi_jesd204_rx_irq>:

static void axi_jesd204_rx_irq (void *context)
{
   11b10:	defffd04 	addi	sp,sp,-12
   11b14:	df000215 	stw	fp,8(sp)
   11b18:	df000204 	addi	fp,sp,8
   11b1c:	e13ffe15 	stw	r4,-8(fp)
   unsigned int pending;
   pending = IORD_32DIRECT(AD9680_JESD204_LINK_MANAGEMENT_BASE, JESD204_REG_IRQ_PENDING);
   11b20:	00a201f4 	movhi	r2,34823
   11b24:	10942137 	ldwio	r2,20612(r2)
   11b28:	e0bfff15 	stw	r2,-4(fp)
   if(pending)
   11b2c:	e0bfff17 	ldw	r2,-4(fp)
   11b30:	10000326 	beq	r2,zero,11b40 <axi_jesd204_rx_irq+0x30>
   {
      IOWR_32DIRECT(AD9680_JESD204_LINK_MANAGEMENT_BASE, JESD204_REG_IRQ_PENDING, pending);
   11b34:	e0ffff17 	ldw	r3,-4(fp)
   11b38:	00a201f4 	movhi	r2,34823
   11b3c:	10d42135 	stwio	r3,20612(r2)
   }
}
   11b40:	0001883a 	nop
   11b44:	e037883a 	mov	sp,fp
   11b48:	df000017 	ldw	fp,0(sp)
   11b4c:	dec00104 	addi	sp,sp,4
   11b50:	f800283a 	ret

00011b54 <exception_handler>:
#include "main.h"
#include "iioscope.h"
#include "jesd204b.h"

alt_exception_result exception_handler(alt_exception_cause cause, alt_u32 exception_pc, alt_u32 bad_addr)
{
   11b54:	defffb04 	addi	sp,sp,-20
   11b58:	df000415 	stw	fp,16(sp)
   11b5c:	df000404 	addi	fp,sp,16
   11b60:	e13ffe15 	stw	r4,-8(fp)
   11b64:	e17ffd15 	stw	r5,-12(fp)
   11b68:	e1bffc15 	stw	r6,-16(fp)
   alt_exception_result result = NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   11b6c:	e03fff15 	stw	zero,-4(fp)

   return result;
   11b70:	e0bfff17 	ldw	r2,-4(fp)
}
   11b74:	e037883a 	mov	sp,fp
   11b78:	df000017 	ldw	fp,0(sp)
   11b7c:	dec00104 	addi	sp,sp,4
   11b80:	f800283a 	ret

00011b84 <main>:

int main()
{
   11b84:	defffd04 	addi	sp,sp,-12
   11b88:	dfc00215 	stw	ra,8(sp)
   11b8c:	df000115 	stw	fp,4(sp)
   11b90:	df000104 	addi	fp,sp,4
   uint32_t net_ctx;

   alt_instruction_exception_register(exception_handler);
   11b94:	01000074 	movhi	r4,1
   11b98:	2106d504 	addi	r4,r4,6996
   11b9c:	00255d40 	call	255d4 <alt_instruction_exception_register>
   alt_ic_irq_enable(0, 11);
   11ba0:	014002c4 	movi	r5,11
   11ba4:	0009883a 	mov	r4,zero
   11ba8:	00253900 	call	25390 <alt_ic_irq_enable>
   alt_ic_irq_enable(0, 13);
   11bac:	01400344 	movi	r5,13
   11bb0:	0009883a 	mov	r4,zero
   11bb4:	00253900 	call	25390 <alt_ic_irq_enable>
   {
      printf("RX/TX Memory test failed\n");
   }
   */

   printf("----- FMCDAQ2 Demo -------\n");
   11bb8:	010000f4 	movhi	r4,3
   11bbc:	210d5d04 	addi	r4,r4,13684
   11bc0:	00164700 	call	16470 <puts>
   daq2_init();
   11bc4:	0010bec0 	call	10bec <daq2_init>

   daq2_transaction_dac();
   11bc8:	00119080 	call	11908 <daq2_transaction_dac>

   printf("----- Ethernet Init ------\n");
   11bcc:	010000f4 	movhi	r4,3
   11bd0:	210d6404 	addi	r4,r4,13712
   11bd4:	00164700 	call	16470 <puts>
   net_ctx = network_init();
   11bd8:	0003a440 	call	3a44 <network_init>
   11bdc:	e0bfff15 	stw	r2,-4(fp)

   while(1)
   {
      network_task(net_ctx);
   11be0:	e13fff17 	ldw	r4,-4(fp)
   11be4:	0003f600 	call	3f60 <network_task>
   11be8:	003ffd06 	br	11be0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be0>

00011bec <cmp_s>:


// 0 - equal
// -1 - not equal
int cmp_s(const char* src1, const int len1, const char* src2, const int len2)
{
   11bec:	defff804 	addi	sp,sp,-32
   11bf0:	df000715 	stw	fp,28(sp)
   11bf4:	df000704 	addi	fp,sp,28
   11bf8:	e13ffc15 	stw	r4,-16(fp)
   11bfc:	e17ffb15 	stw	r5,-20(fp)
   11c00:	e1bffa15 	stw	r6,-24(fp)
   11c04:	e1fff915 	stw	r7,-28(fp)
   int result = 0, cnt1, cnt2;
   11c08:	e03fff15 	stw	zero,-4(fp)

   cnt1 = 0;
   11c0c:	e03ffe15 	stw	zero,-8(fp)
   cnt2 = 0;
   11c10:	e03ffd15 	stw	zero,-12(fp)
   if(len1 == len2)
   11c14:	e0fffb17 	ldw	r3,-20(fp)
   11c18:	e0bff917 	ldw	r2,-28(fp)
   11c1c:	1880281e 	bne	r3,r2,11cc0 <cmp_s+0xd4>
   {
      while((*src1 != 0) && (*src2 != 0) && (cnt1++ < len1) && (cnt2++ < len2))
   11c20:	00001006 	br	11c64 <cmp_s+0x78>
      {
         if(*src1++ != *src2)
   11c24:	e0bffc17 	ldw	r2,-16(fp)
   11c28:	10c00044 	addi	r3,r2,1
   11c2c:	e0fffc15 	stw	r3,-16(fp)
   11c30:	10c00003 	ldbu	r3,0(r2)
   11c34:	e0bffa17 	ldw	r2,-24(fp)
   11c38:	10800003 	ldbu	r2,0(r2)
   11c3c:	18c03fcc 	andi	r3,r3,255
   11c40:	18c0201c 	xori	r3,r3,128
   11c44:	18ffe004 	addi	r3,r3,-128
   11c48:	10803fcc 	andi	r2,r2,255
   11c4c:	1080201c 	xori	r2,r2,128
   11c50:	10bfe004 	addi	r2,r2,-128
   11c54:	18800326 	beq	r3,r2,11c64 <cmp_s+0x78>
         {
            result = -1;
   11c58:	00bfffc4 	movi	r2,-1
   11c5c:	e0bfff15 	stw	r2,-4(fp)
            break;
   11c60:	00001906 	br	11cc8 <cmp_s+0xdc>
      while((*src1 != 0) && (*src2 != 0) && (cnt1++ < len1) && (cnt2++ < len2))
   11c64:	e0bffc17 	ldw	r2,-16(fp)
   11c68:	10800003 	ldbu	r2,0(r2)
   11c6c:	10803fcc 	andi	r2,r2,255
   11c70:	1080201c 	xori	r2,r2,128
   11c74:	10bfe004 	addi	r2,r2,-128
   11c78:	10001326 	beq	r2,zero,11cc8 <cmp_s+0xdc>
   11c7c:	e0bffa17 	ldw	r2,-24(fp)
   11c80:	10800003 	ldbu	r2,0(r2)
   11c84:	10803fcc 	andi	r2,r2,255
   11c88:	1080201c 	xori	r2,r2,128
   11c8c:	10bfe004 	addi	r2,r2,-128
   11c90:	10000d26 	beq	r2,zero,11cc8 <cmp_s+0xdc>
   11c94:	e0bffe17 	ldw	r2,-8(fp)
   11c98:	10c00044 	addi	r3,r2,1
   11c9c:	e0fffe15 	stw	r3,-8(fp)
   11ca0:	e0fffb17 	ldw	r3,-20(fp)
   11ca4:	10c0080e 	bge	r2,r3,11cc8 <cmp_s+0xdc>
   11ca8:	e0bffd17 	ldw	r2,-12(fp)
   11cac:	10c00044 	addi	r3,r2,1
   11cb0:	e0fffd15 	stw	r3,-12(fp)
   11cb4:	e0fff917 	ldw	r3,-28(fp)
   11cb8:	10ffda16 	blt	r2,r3,11c24 <__alt_mem_mcu_subsystem_ram_0+0x77ff1c24>
   11cbc:	00000206 	br	11cc8 <cmp_s+0xdc>
         }
      }
   }
   else
   {
      result = -1;
   11cc0:	00bfffc4 	movi	r2,-1
   11cc4:	e0bfff15 	stw	r2,-4(fp)
   }

   return result;
   11cc8:	e0bfff17 	ldw	r2,-4(fp)
}
   11ccc:	e037883a 	mov	sp,fp
   11cd0:	df000017 	ldw	fp,0(sp)
   11cd4:	dec00104 	addi	sp,sp,4
   11cd8:	f800283a 	ret

00011cdc <__muldi3>:
   11cdc:	20bfffcc 	andi	r2,r4,65535
   11ce0:	2012d43a 	srli	r9,r4,16
   11ce4:	32bfffcc 	andi	r10,r6,65535
   11ce8:	3018d43a 	srli	r12,r6,16
   11cec:	1297383a 	mul	r11,r2,r10
   11cf0:	4a95383a 	mul	r10,r9,r10
   11cf4:	1311383a 	mul	r8,r2,r12
   11cf8:	5804d43a 	srli	r2,r11,16
   11cfc:	4291883a 	add	r8,r8,r10
   11d00:	1205883a 	add	r2,r2,r8
   11d04:	4b11383a 	mul	r8,r9,r12
   11d08:	1280022e 	bgeu	r2,r10,11d14 <__muldi3+0x38>
   11d0c:	00c00074 	movhi	r3,1
   11d10:	40d1883a 	add	r8,r8,r3
   11d14:	1006d43a 	srli	r3,r2,16
   11d18:	21c9383a 	mul	r4,r4,r7
   11d1c:	314d383a 	mul	r6,r6,r5
   11d20:	1004943a 	slli	r2,r2,16
   11d24:	1a11883a 	add	r8,r3,r8
   11d28:	5affffcc 	andi	r11,r11,65535
   11d2c:	2209883a 	add	r4,r4,r8
   11d30:	12c5883a 	add	r2,r2,r11
   11d34:	2187883a 	add	r3,r4,r6
   11d38:	f800283a 	ret

00011d3c <__bswapsi2>:
   11d3c:	200a963a 	slli	r5,r4,24
   11d40:	2004d63a 	srli	r2,r4,24
   11d44:	2007d23a 	srai	r3,r4,8
   11d48:	2008923a 	slli	r4,r4,8
   11d4c:	1144b03a 	or	r2,r2,r5
   11d50:	18ffc00c 	andi	r3,r3,65280
   11d54:	10c4b03a 	or	r2,r2,r3
   11d58:	21003fec 	andhi	r4,r4,255
   11d5c:	1104b03a 	or	r2,r2,r4
   11d60:	f800283a 	ret

00011d64 <__fixunsdfsi>:
   11d64:	defffd04 	addi	sp,sp,-12
   11d68:	000d883a 	mov	r6,zero
   11d6c:	01d07834 	movhi	r7,16864
   11d70:	dc400115 	stw	r17,4(sp)
   11d74:	dc000015 	stw	r16,0(sp)
   11d78:	dfc00215 	stw	ra,8(sp)
   11d7c:	2023883a 	mov	r17,r4
   11d80:	2821883a 	mov	r16,r5
   11d84:	0013c9c0 	call	13c9c <__gedf2>
   11d88:	1000080e 	bge	r2,zero,11dac <__fixunsdfsi+0x48>
   11d8c:	8809883a 	mov	r4,r17
   11d90:	800b883a 	mov	r5,r16
   11d94:	0014d2c0 	call	14d2c <__fixdfsi>
   11d98:	dfc00217 	ldw	ra,8(sp)
   11d9c:	dc400117 	ldw	r17,4(sp)
   11da0:	dc000017 	ldw	r16,0(sp)
   11da4:	dec00304 	addi	sp,sp,12
   11da8:	f800283a 	ret
   11dac:	000d883a 	mov	r6,zero
   11db0:	01d07834 	movhi	r7,16864
   11db4:	8809883a 	mov	r4,r17
   11db8:	800b883a 	mov	r5,r16
   11dbc:	00144580 	call	14458 <__subdf3>
   11dc0:	180b883a 	mov	r5,r3
   11dc4:	1009883a 	mov	r4,r2
   11dc8:	0014d2c0 	call	14d2c <__fixdfsi>
   11dcc:	00e00034 	movhi	r3,32768
   11dd0:	10c5883a 	add	r2,r2,r3
   11dd4:	003ff006 	br	11d98 <__alt_mem_mcu_subsystem_ram_0+0x77ff1d98>

00011dd8 <__fixunsdfdi>:
   11dd8:	defffc04 	addi	sp,sp,-16
   11ddc:	000d883a 	mov	r6,zero
   11de0:	01cf7c34 	movhi	r7,15856
   11de4:	dfc00315 	stw	ra,12(sp)
   11de8:	dc800215 	stw	r18,8(sp)
   11dec:	dc400115 	stw	r17,4(sp)
   11df0:	dc000015 	stw	r16,0(sp)
   11df4:	2025883a 	mov	r18,r4
   11df8:	2823883a 	mov	r17,r5
   11dfc:	0013d7c0 	call	13d7c <__muldf3>
   11e00:	180b883a 	mov	r5,r3
   11e04:	1009883a 	mov	r4,r2
   11e08:	0011d640 	call	11d64 <__fixunsdfsi>
   11e0c:	1009883a 	mov	r4,r2
   11e10:	1021883a 	mov	r16,r2
   11e14:	0014dac0 	call	14dac <__floatunsidf>
   11e18:	000d883a 	mov	r6,zero
   11e1c:	01d07c34 	movhi	r7,16880
   11e20:	1009883a 	mov	r4,r2
   11e24:	180b883a 	mov	r5,r3
   11e28:	0013d7c0 	call	13d7c <__muldf3>
   11e2c:	100d883a 	mov	r6,r2
   11e30:	180f883a 	mov	r7,r3
   11e34:	9009883a 	mov	r4,r18
   11e38:	880b883a 	mov	r5,r17
   11e3c:	00144580 	call	14458 <__subdf3>
   11e40:	180b883a 	mov	r5,r3
   11e44:	1009883a 	mov	r4,r2
   11e48:	0011d640 	call	11d64 <__fixunsdfsi>
   11e4c:	8007883a 	mov	r3,r16
   11e50:	dfc00317 	ldw	ra,12(sp)
   11e54:	dc800217 	ldw	r18,8(sp)
   11e58:	dc400117 	ldw	r17,4(sp)
   11e5c:	dc000017 	ldw	r16,0(sp)
   11e60:	dec00404 	addi	sp,sp,16
   11e64:	f800283a 	ret

00011e68 <__udivdi3>:
   11e68:	defff504 	addi	sp,sp,-44
   11e6c:	dd400615 	stw	r21,24(sp)
   11e70:	dc000115 	stw	r16,4(sp)
   11e74:	dfc00a15 	stw	ra,40(sp)
   11e78:	df000915 	stw	fp,36(sp)
   11e7c:	ddc00815 	stw	r23,32(sp)
   11e80:	dd800715 	stw	r22,28(sp)
   11e84:	dd000515 	stw	r20,20(sp)
   11e88:	dcc00415 	stw	r19,16(sp)
   11e8c:	dc800315 	stw	r18,12(sp)
   11e90:	dc400215 	stw	r17,8(sp)
   11e94:	202b883a 	mov	r21,r4
   11e98:	2821883a 	mov	r16,r5
   11e9c:	38003e1e 	bne	r7,zero,11f98 <__udivdi3+0x130>
   11ea0:	3827883a 	mov	r19,r7
   11ea4:	3023883a 	mov	r17,r6
   11ea8:	2025883a 	mov	r18,r4
   11eac:	29804c2e 	bgeu	r5,r6,11fe0 <__udivdi3+0x178>
   11eb0:	00bfffd4 	movui	r2,65535
   11eb4:	282d883a 	mov	r22,r5
   11eb8:	1180a02e 	bgeu	r2,r6,1213c <__udivdi3+0x2d4>
   11ebc:	00804034 	movhi	r2,256
   11ec0:	30813036 	bltu	r6,r2,12384 <__udivdi3+0x51c>
   11ec4:	3006d63a 	srli	r3,r6,24
   11ec8:	04c00604 	movi	r19,24
   11ecc:	008000f4 	movhi	r2,3
   11ed0:	1885883a 	add	r2,r3,r2
   11ed4:	108d6ac3 	ldbu	r2,13739(r2)
   11ed8:	14e7883a 	add	r19,r2,r19
   11edc:	00800804 	movi	r2,32
   11ee0:	14c5c83a 	sub	r2,r2,r19
   11ee4:	10000526 	beq	r2,zero,11efc <__udivdi3+0x94>
   11ee8:	80a0983a 	sll	r16,r16,r2
   11eec:	ace6d83a 	srl	r19,r21,r19
   11ef0:	30a2983a 	sll	r17,r6,r2
   11ef4:	a8a4983a 	sll	r18,r21,r2
   11ef8:	9c2cb03a 	or	r22,r19,r16
   11efc:	882ad43a 	srli	r21,r17,16
   11f00:	b009883a 	mov	r4,r22
   11f04:	8d3fffcc 	andi	r20,r17,65535
   11f08:	a80b883a 	mov	r5,r21
   11f0c:	0012ab80 	call	12ab8 <__umodsi3>
   11f10:	a80b883a 	mov	r5,r21
   11f14:	b009883a 	mov	r4,r22
   11f18:	1027883a 	mov	r19,r2
   11f1c:	0012a540 	call	12a54 <__udivsi3>
   11f20:	1021883a 	mov	r16,r2
   11f24:	9826943a 	slli	r19,r19,16
   11f28:	9004d43a 	srli	r2,r18,16
   11f2c:	a407383a 	mul	r3,r20,r16
   11f30:	9884b03a 	or	r2,r19,r2
   11f34:	10c0052e 	bgeu	r2,r3,11f4c <__udivdi3+0xe4>
   11f38:	1445883a 	add	r2,r2,r17
   11f3c:	813fffc4 	addi	r4,r16,-1
   11f40:	14400136 	bltu	r2,r17,11f48 <__udivdi3+0xe0>
   11f44:	10c12836 	bltu	r2,r3,123e8 <__udivdi3+0x580>
   11f48:	2021883a 	mov	r16,r4
   11f4c:	10e7c83a 	sub	r19,r2,r3
   11f50:	a80b883a 	mov	r5,r21
   11f54:	9809883a 	mov	r4,r19
   11f58:	0012ab80 	call	12ab8 <__umodsi3>
   11f5c:	102d883a 	mov	r22,r2
   11f60:	a80b883a 	mov	r5,r21
   11f64:	9809883a 	mov	r4,r19
   11f68:	0012a540 	call	12a54 <__udivsi3>
   11f6c:	b02c943a 	slli	r22,r22,16
   11f70:	a0a9383a 	mul	r20,r20,r2
   11f74:	94bfffcc 	andi	r18,r18,65535
   11f78:	b4a4b03a 	or	r18,r22,r18
   11f7c:	9500752e 	bgeu	r18,r20,12154 <__udivdi3+0x2ec>
   11f80:	8ca5883a 	add	r18,r17,r18
   11f84:	10ffffc4 	addi	r3,r2,-1
   11f88:	94407136 	bltu	r18,r17,12150 <__udivdi3+0x2e8>
   11f8c:	9500702e 	bgeu	r18,r20,12150 <__udivdi3+0x2e8>
   11f90:	10bfff84 	addi	r2,r2,-2
   11f94:	00006f06 	br	12154 <__udivdi3+0x2ec>
   11f98:	29c05036 	bltu	r5,r7,120dc <__udivdi3+0x274>
   11f9c:	00bfffd4 	movui	r2,65535
   11fa0:	11c05c2e 	bgeu	r2,r7,12114 <__udivdi3+0x2ac>
   11fa4:	00804034 	movhi	r2,256
   11fa8:	3880f036 	bltu	r7,r2,1236c <__udivdi3+0x504>
   11fac:	3806d63a 	srli	r3,r7,24
   11fb0:	01000604 	movi	r4,24
   11fb4:	008000f4 	movhi	r2,3
   11fb8:	1885883a 	add	r2,r3,r2
   11fbc:	10cd6ac3 	ldbu	r3,13739(r2)
   11fc0:	1907883a 	add	r3,r3,r4
   11fc4:	01000804 	movi	r4,32
   11fc8:	20edc83a 	sub	r22,r4,r3
   11fcc:	b000691e 	bne	r22,zero,12174 <__udivdi3+0x30c>
   11fd0:	3c00f636 	bltu	r7,r16,123ac <__udivdi3+0x544>
   11fd4:	a985403a 	cmpgeu	r2,r21,r6
   11fd8:	0007883a 	mov	r3,zero
   11fdc:	00004106 	br	120e4 <__udivdi3+0x27c>
   11fe0:	3000041e 	bne	r6,zero,11ff4 <__udivdi3+0x18c>
   11fe4:	000b883a 	mov	r5,zero
   11fe8:	01000044 	movi	r4,1
   11fec:	0012a540 	call	12a54 <__udivsi3>
   11ff0:	1023883a 	mov	r17,r2
   11ff4:	00bfffd4 	movui	r2,65535
   11ff8:	14404b2e 	bgeu	r2,r17,12128 <__udivdi3+0x2c0>
   11ffc:	00804034 	movhi	r2,256
   12000:	8880e536 	bltu	r17,r2,12398 <__udivdi3+0x530>
   12004:	8806d63a 	srli	r3,r17,24
   12008:	04c00604 	movi	r19,24
   1200c:	008000f4 	movhi	r2,3
   12010:	1885883a 	add	r2,r3,r2
   12014:	108d6ac3 	ldbu	r2,13739(r2)
   12018:	14e7883a 	add	r19,r2,r19
   1201c:	00800804 	movi	r2,32
   12020:	14c5c83a 	sub	r2,r2,r19
   12024:	1000981e 	bne	r2,zero,12288 <__udivdi3+0x420>
   12028:	8828d43a 	srli	r20,r17,16
   1202c:	8461c83a 	sub	r16,r16,r17
   12030:	8d7fffcc 	andi	r21,r17,65535
   12034:	00c00044 	movi	r3,1
   12038:	8009883a 	mov	r4,r16
   1203c:	a00b883a 	mov	r5,r20
   12040:	d8c00015 	stw	r3,0(sp)
   12044:	0012ab80 	call	12ab8 <__umodsi3>
   12048:	8009883a 	mov	r4,r16
   1204c:	a00b883a 	mov	r5,r20
   12050:	1027883a 	mov	r19,r2
   12054:	0012a540 	call	12a54 <__udivsi3>
   12058:	1021883a 	mov	r16,r2
   1205c:	9826943a 	slli	r19,r19,16
   12060:	9004d43a 	srli	r2,r18,16
   12064:	8549383a 	mul	r4,r16,r21
   12068:	d8c00017 	ldw	r3,0(sp)
   1206c:	9884b03a 	or	r2,r19,r2
   12070:	1100052e 	bgeu	r2,r4,12088 <__udivdi3+0x220>
   12074:	1445883a 	add	r2,r2,r17
   12078:	817fffc4 	addi	r5,r16,-1
   1207c:	14400136 	bltu	r2,r17,12084 <__udivdi3+0x21c>
   12080:	1100dc36 	bltu	r2,r4,123f4 <__udivdi3+0x58c>
   12084:	2821883a 	mov	r16,r5
   12088:	1127c83a 	sub	r19,r2,r4
   1208c:	a00b883a 	mov	r5,r20
   12090:	9809883a 	mov	r4,r19
   12094:	d8c00015 	stw	r3,0(sp)
   12098:	0012ab80 	call	12ab8 <__umodsi3>
   1209c:	102d883a 	mov	r22,r2
   120a0:	a00b883a 	mov	r5,r20
   120a4:	9809883a 	mov	r4,r19
   120a8:	0012a540 	call	12a54 <__udivsi3>
   120ac:	b02c943a 	slli	r22,r22,16
   120b0:	156b383a 	mul	r21,r2,r21
   120b4:	94bfffcc 	andi	r18,r18,65535
   120b8:	b4a4b03a 	or	r18,r22,r18
   120bc:	d8c00017 	ldw	r3,0(sp)
   120c0:	9540292e 	bgeu	r18,r21,12168 <__udivdi3+0x300>
   120c4:	8ca5883a 	add	r18,r17,r18
   120c8:	113fffc4 	addi	r4,r2,-1
   120cc:	94402536 	bltu	r18,r17,12164 <__udivdi3+0x2fc>
   120d0:	9540242e 	bgeu	r18,r21,12164 <__udivdi3+0x2fc>
   120d4:	10bfff84 	addi	r2,r2,-2
   120d8:	00002306 	br	12168 <__udivdi3+0x300>
   120dc:	0007883a 	mov	r3,zero
   120e0:	0005883a 	mov	r2,zero
   120e4:	dfc00a17 	ldw	ra,40(sp)
   120e8:	df000917 	ldw	fp,36(sp)
   120ec:	ddc00817 	ldw	r23,32(sp)
   120f0:	dd800717 	ldw	r22,28(sp)
   120f4:	dd400617 	ldw	r21,24(sp)
   120f8:	dd000517 	ldw	r20,20(sp)
   120fc:	dcc00417 	ldw	r19,16(sp)
   12100:	dc800317 	ldw	r18,12(sp)
   12104:	dc400217 	ldw	r17,8(sp)
   12108:	dc000117 	ldw	r16,4(sp)
   1210c:	dec00b04 	addi	sp,sp,44
   12110:	f800283a 	ret
   12114:	38804030 	cmpltui	r2,r7,256
   12118:	1000971e 	bne	r2,zero,12378 <__udivdi3+0x510>
   1211c:	3806d23a 	srli	r3,r7,8
   12120:	01000204 	movi	r4,8
   12124:	003fa306 	br	11fb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fb4>
   12128:	88804030 	cmpltui	r2,r17,256
   1212c:	1000981e 	bne	r2,zero,12390 <__udivdi3+0x528>
   12130:	8806d23a 	srli	r3,r17,8
   12134:	04c00204 	movi	r19,8
   12138:	003fb406 	br	1200c <__alt_mem_mcu_subsystem_ram_0+0x77ff200c>
   1213c:	30804030 	cmpltui	r2,r6,256
   12140:	1000981e 	bne	r2,zero,123a4 <__udivdi3+0x53c>
   12144:	3006d23a 	srli	r3,r6,8
   12148:	04c00204 	movi	r19,8
   1214c:	003f5f06 	br	11ecc <__alt_mem_mcu_subsystem_ram_0+0x77ff1ecc>
   12150:	1805883a 	mov	r2,r3
   12154:	800c943a 	slli	r6,r16,16
   12158:	0007883a 	mov	r3,zero
   1215c:	3084b03a 	or	r2,r6,r2
   12160:	003fe006 	br	120e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff20e4>
   12164:	2005883a 	mov	r2,r4
   12168:	800c943a 	slli	r6,r16,16
   1216c:	3084b03a 	or	r2,r6,r2
   12170:	003fdc06 	br	120e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff20e4>
   12174:	30f8d83a 	srl	fp,r6,r3
   12178:	3d8e983a 	sll	r7,r7,r22
   1217c:	80eed83a 	srl	r23,r16,r3
   12180:	a8c6d83a 	srl	r3,r21,r3
   12184:	e1f8b03a 	or	fp,fp,r7
   12188:	e024d43a 	srli	r18,fp,16
   1218c:	85a0983a 	sll	r16,r16,r22
   12190:	b809883a 	mov	r4,r23
   12194:	900b883a 	mov	r5,r18
   12198:	1c22b03a 	or	r17,r3,r16
   1219c:	35a8983a 	sll	r20,r6,r22
   121a0:	0012ab80 	call	12ab8 <__umodsi3>
   121a4:	b809883a 	mov	r4,r23
   121a8:	900b883a 	mov	r5,r18
   121ac:	1027883a 	mov	r19,r2
   121b0:	0012a540 	call	12a54 <__udivsi3>
   121b4:	1021883a 	mov	r16,r2
   121b8:	e0ffffcc 	andi	r3,fp,65535
   121bc:	9826943a 	slli	r19,r19,16
   121c0:	8804d43a 	srli	r2,r17,16
   121c4:	1c09383a 	mul	r4,r3,r16
   121c8:	9884b03a 	or	r2,r19,r2
   121cc:	1100042e 	bgeu	r2,r4,121e0 <__udivdi3+0x378>
   121d0:	1705883a 	add	r2,r2,fp
   121d4:	817fffc4 	addi	r5,r16,-1
   121d8:	17007b2e 	bgeu	r2,fp,123c8 <__udivdi3+0x560>
   121dc:	2821883a 	mov	r16,r5
   121e0:	1127c83a 	sub	r19,r2,r4
   121e4:	900b883a 	mov	r5,r18
   121e8:	9809883a 	mov	r4,r19
   121ec:	d8c00015 	stw	r3,0(sp)
   121f0:	0012ab80 	call	12ab8 <__umodsi3>
   121f4:	9809883a 	mov	r4,r19
   121f8:	900b883a 	mov	r5,r18
   121fc:	102f883a 	mov	r23,r2
   12200:	0012a540 	call	12a54 <__udivsi3>
   12204:	d8c00017 	ldw	r3,0(sp)
   12208:	b82e943a 	slli	r23,r23,16
   1220c:	8c7fffcc 	andi	r17,r17,65535
   12210:	1889383a 	mul	r4,r3,r2
   12214:	bc62b03a 	or	r17,r23,r17
   12218:	8900042e 	bgeu	r17,r4,1222c <__udivdi3+0x3c4>
   1221c:	8f23883a 	add	r17,r17,fp
   12220:	10ffffc4 	addi	r3,r2,-1
   12224:	8f00642e 	bgeu	r17,fp,123b8 <__udivdi3+0x550>
   12228:	1805883a 	mov	r2,r3
   1222c:	8020943a 	slli	r16,r16,16
   12230:	a17fffcc 	andi	r5,r20,65535
   12234:	a00cd43a 	srli	r6,r20,16
   12238:	8084b03a 	or	r2,r16,r2
   1223c:	10ffffcc 	andi	r3,r2,65535
   12240:	1028d43a 	srli	r20,r2,16
   12244:	1951383a 	mul	r8,r3,r5
   12248:	1987383a 	mul	r3,r3,r6
   1224c:	a14b383a 	mul	r5,r20,r5
   12250:	400ed43a 	srli	r7,r8,16
   12254:	8923c83a 	sub	r17,r17,r4
   12258:	1947883a 	add	r3,r3,r5
   1225c:	38c7883a 	add	r3,r7,r3
   12260:	a1a9383a 	mul	r20,r20,r6
   12264:	1940022e 	bgeu	r3,r5,12270 <__udivdi3+0x408>
   12268:	01000074 	movhi	r4,1
   1226c:	a129883a 	add	r20,r20,r4
   12270:	180cd43a 	srli	r6,r3,16
   12274:	3529883a 	add	r20,r6,r20
   12278:	8d003a36 	bltu	r17,r20,12364 <__udivdi3+0x4fc>
   1227c:	8d003426 	beq	r17,r20,12350 <__udivdi3+0x4e8>
   12280:	0007883a 	mov	r3,zero
   12284:	003f9706 	br	120e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff20e4>
   12288:	88a2983a 	sll	r17,r17,r2
   1228c:	84ecd83a 	srl	r22,r16,r19
   12290:	80a0983a 	sll	r16,r16,r2
   12294:	8828d43a 	srli	r20,r17,16
   12298:	b009883a 	mov	r4,r22
   1229c:	ace6d83a 	srl	r19,r21,r19
   122a0:	a00b883a 	mov	r5,r20
   122a4:	a8a4983a 	sll	r18,r21,r2
   122a8:	0012ab80 	call	12ab8 <__umodsi3>
   122ac:	b009883a 	mov	r4,r22
   122b0:	a00b883a 	mov	r5,r20
   122b4:	9c26b03a 	or	r19,r19,r16
   122b8:	1021883a 	mov	r16,r2
   122bc:	0012a540 	call	12a54 <__udivsi3>
   122c0:	102f883a 	mov	r23,r2
   122c4:	8d7fffcc 	andi	r21,r17,65535
   122c8:	8020943a 	slli	r16,r16,16
   122cc:	9804d43a 	srli	r2,r19,16
   122d0:	aded383a 	mul	r22,r21,r23
   122d4:	8084b03a 	or	r2,r16,r2
   122d8:	1580062e 	bgeu	r2,r22,122f4 <__udivdi3+0x48c>
   122dc:	1445883a 	add	r2,r2,r17
   122e0:	b8ffffc4 	addi	r3,r23,-1
   122e4:	14403e36 	bltu	r2,r17,123e0 <__udivdi3+0x578>
   122e8:	15803d2e 	bgeu	r2,r22,123e0 <__udivdi3+0x578>
   122ec:	bdffff84 	addi	r23,r23,-2
   122f0:	1445883a 	add	r2,r2,r17
   122f4:	15adc83a 	sub	r22,r2,r22
   122f8:	a00b883a 	mov	r5,r20
   122fc:	b009883a 	mov	r4,r22
   12300:	0012ab80 	call	12ab8 <__umodsi3>
   12304:	1021883a 	mov	r16,r2
   12308:	b009883a 	mov	r4,r22
   1230c:	a00b883a 	mov	r5,r20
   12310:	0012a540 	call	12a54 <__udivsi3>
   12314:	8020943a 	slli	r16,r16,16
   12318:	a889383a 	mul	r4,r21,r2
   1231c:	9cffffcc 	andi	r19,r19,65535
   12320:	84e0b03a 	or	r16,r16,r19
   12324:	8100062e 	bgeu	r16,r4,12340 <__udivdi3+0x4d8>
   12328:	8461883a 	add	r16,r16,r17
   1232c:	10ffffc4 	addi	r3,r2,-1
   12330:	84402936 	bltu	r16,r17,123d8 <__udivdi3+0x570>
   12334:	8100282e 	bgeu	r16,r4,123d8 <__udivdi3+0x570>
   12338:	10bfff84 	addi	r2,r2,-2
   1233c:	8461883a 	add	r16,r16,r17
   12340:	b806943a 	slli	r3,r23,16
   12344:	8121c83a 	sub	r16,r16,r4
   12348:	1886b03a 	or	r3,r3,r2
   1234c:	003f3a06 	br	12038 <__alt_mem_mcu_subsystem_ram_0+0x77ff2038>
   12350:	1806943a 	slli	r3,r3,16
   12354:	ad88983a 	sll	r4,r21,r22
   12358:	423fffcc 	andi	r8,r8,65535
   1235c:	1a07883a 	add	r3,r3,r8
   12360:	20ffc72e 	bgeu	r4,r3,12280 <__alt_mem_mcu_subsystem_ram_0+0x77ff2280>
   12364:	10bfffc4 	addi	r2,r2,-1
   12368:	003fc506 	br	12280 <__alt_mem_mcu_subsystem_ram_0+0x77ff2280>
   1236c:	3806d43a 	srli	r3,r7,16
   12370:	01000404 	movi	r4,16
   12374:	003f0f06 	br	11fb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fb4>
   12378:	3807883a 	mov	r3,r7
   1237c:	0009883a 	mov	r4,zero
   12380:	003f0c06 	br	11fb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fb4>
   12384:	3006d43a 	srli	r3,r6,16
   12388:	04c00404 	movi	r19,16
   1238c:	003ecf06 	br	11ecc <__alt_mem_mcu_subsystem_ram_0+0x77ff1ecc>
   12390:	8807883a 	mov	r3,r17
   12394:	003f1d06 	br	1200c <__alt_mem_mcu_subsystem_ram_0+0x77ff200c>
   12398:	8806d43a 	srli	r3,r17,16
   1239c:	04c00404 	movi	r19,16
   123a0:	003f1a06 	br	1200c <__alt_mem_mcu_subsystem_ram_0+0x77ff200c>
   123a4:	3007883a 	mov	r3,r6
   123a8:	003ec806 	br	11ecc <__alt_mem_mcu_subsystem_ram_0+0x77ff1ecc>
   123ac:	0007883a 	mov	r3,zero
   123b0:	00800044 	movi	r2,1
   123b4:	003f4b06 	br	120e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff20e4>
   123b8:	893f9b2e 	bgeu	r17,r4,12228 <__alt_mem_mcu_subsystem_ram_0+0x77ff2228>
   123bc:	10bfff84 	addi	r2,r2,-2
   123c0:	8f23883a 	add	r17,r17,fp
   123c4:	003f9906 	br	1222c <__alt_mem_mcu_subsystem_ram_0+0x77ff222c>
   123c8:	113f842e 	bgeu	r2,r4,121dc <__alt_mem_mcu_subsystem_ram_0+0x77ff21dc>
   123cc:	843fff84 	addi	r16,r16,-2
   123d0:	1705883a 	add	r2,r2,fp
   123d4:	003f8206 	br	121e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff21e0>
   123d8:	1805883a 	mov	r2,r3
   123dc:	003fd806 	br	12340 <__alt_mem_mcu_subsystem_ram_0+0x77ff2340>
   123e0:	182f883a 	mov	r23,r3
   123e4:	003fc306 	br	122f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff22f4>
   123e8:	843fff84 	addi	r16,r16,-2
   123ec:	1445883a 	add	r2,r2,r17
   123f0:	003ed606 	br	11f4c <__alt_mem_mcu_subsystem_ram_0+0x77ff1f4c>
   123f4:	843fff84 	addi	r16,r16,-2
   123f8:	1445883a 	add	r2,r2,r17
   123fc:	003f2206 	br	12088 <__alt_mem_mcu_subsystem_ram_0+0x77ff2088>

00012400 <__umoddi3>:
   12400:	defff404 	addi	sp,sp,-48
   12404:	df000a15 	stw	fp,40(sp)
   12408:	dc400315 	stw	r17,12(sp)
   1240c:	dc000215 	stw	r16,8(sp)
   12410:	dfc00b15 	stw	ra,44(sp)
   12414:	ddc00915 	stw	r23,36(sp)
   12418:	dd800815 	stw	r22,32(sp)
   1241c:	dd400715 	stw	r21,28(sp)
   12420:	dd000615 	stw	r20,24(sp)
   12424:	dcc00515 	stw	r19,20(sp)
   12428:	dc800415 	stw	r18,16(sp)
   1242c:	2021883a 	mov	r16,r4
   12430:	2823883a 	mov	r17,r5
   12434:	2839883a 	mov	fp,r5
   12438:	38003c1e 	bne	r7,zero,1252c <__umoddi3+0x12c>
   1243c:	3825883a 	mov	r18,r7
   12440:	3027883a 	mov	r19,r6
   12444:	2029883a 	mov	r20,r4
   12448:	29804e2e 	bgeu	r5,r6,12584 <__umoddi3+0x184>
   1244c:	00bfffd4 	movui	r2,65535
   12450:	11809736 	bltu	r2,r6,126b0 <__umoddi3+0x2b0>
   12454:	30804030 	cmpltui	r2,r6,256
   12458:	10012c1e 	bne	r2,zero,1290c <__umoddi3+0x50c>
   1245c:	3006d23a 	srli	r3,r6,8
   12460:	04800204 	movi	r18,8
   12464:	008000f4 	movhi	r2,3
   12468:	1885883a 	add	r2,r3,r2
   1246c:	114d6ac3 	ldbu	r5,13739(r2)
   12470:	00800804 	movi	r2,32
   12474:	2c8b883a 	add	r5,r5,r18
   12478:	1165c83a 	sub	r18,r2,r5
   1247c:	90000526 	beq	r18,zero,12494 <__umoddi3+0x94>
   12480:	8c8e983a 	sll	r7,r17,r18
   12484:	814ad83a 	srl	r5,r16,r5
   12488:	34a6983a 	sll	r19,r6,r18
   1248c:	84a8983a 	sll	r20,r16,r18
   12490:	29f8b03a 	or	fp,r5,r7
   12494:	982ed43a 	srli	r23,r19,16
   12498:	e009883a 	mov	r4,fp
   1249c:	9dbfffcc 	andi	r22,r19,65535
   124a0:	b80b883a 	mov	r5,r23
   124a4:	0012ab80 	call	12ab8 <__umodsi3>
   124a8:	b80b883a 	mov	r5,r23
   124ac:	e009883a 	mov	r4,fp
   124b0:	102b883a 	mov	r21,r2
   124b4:	0012a540 	call	12a54 <__udivsi3>
   124b8:	a82a943a 	slli	r21,r21,16
   124bc:	a006d43a 	srli	r3,r20,16
   124c0:	b085383a 	mul	r2,r22,r2
   124c4:	a8c6b03a 	or	r3,r21,r3
   124c8:	1880032e 	bgeu	r3,r2,124d8 <__umoddi3+0xd8>
   124cc:	1cc7883a 	add	r3,r3,r19
   124d0:	1cc00136 	bltu	r3,r19,124d8 <__umoddi3+0xd8>
   124d4:	18811736 	bltu	r3,r2,12934 <__umoddi3+0x534>
   124d8:	18abc83a 	sub	r21,r3,r2
   124dc:	b80b883a 	mov	r5,r23
   124e0:	a809883a 	mov	r4,r21
   124e4:	0012ab80 	call	12ab8 <__umodsi3>
   124e8:	1023883a 	mov	r17,r2
   124ec:	b80b883a 	mov	r5,r23
   124f0:	a809883a 	mov	r4,r21
   124f4:	0012a540 	call	12a54 <__udivsi3>
   124f8:	8822943a 	slli	r17,r17,16
   124fc:	b085383a 	mul	r2,r22,r2
   12500:	a0ffffcc 	andi	r3,r20,65535
   12504:	88c6b03a 	or	r3,r17,r3
   12508:	1880042e 	bgeu	r3,r2,1251c <__umoddi3+0x11c>
   1250c:	1cc7883a 	add	r3,r3,r19
   12510:	1cc00236 	bltu	r3,r19,1251c <__umoddi3+0x11c>
   12514:	1880012e 	bgeu	r3,r2,1251c <__umoddi3+0x11c>
   12518:	1cc7883a 	add	r3,r3,r19
   1251c:	1885c83a 	sub	r2,r3,r2
   12520:	1484d83a 	srl	r2,r2,r18
   12524:	0007883a 	mov	r3,zero
   12528:	00004b06 	br	12658 <__umoddi3+0x258>
   1252c:	29c04836 	bltu	r5,r7,12650 <__umoddi3+0x250>
   12530:	00bfffd4 	movui	r2,65535
   12534:	11c0542e 	bgeu	r2,r7,12688 <__umoddi3+0x288>
   12538:	00804034 	movhi	r2,256
   1253c:	3880e836 	bltu	r7,r2,128e0 <__umoddi3+0x4e0>
   12540:	3808d63a 	srli	r4,r7,24
   12544:	00800604 	movi	r2,24
   12548:	00c000f4 	movhi	r3,3
   1254c:	20c7883a 	add	r3,r4,r3
   12550:	1ccd6ac3 	ldbu	r19,13739(r3)
   12554:	00c00804 	movi	r3,32
   12558:	98a7883a 	add	r19,r19,r2
   1255c:	1ce9c83a 	sub	r20,r3,r19
   12560:	a000581e 	bne	r20,zero,126c4 <__umoddi3+0x2c4>
   12564:	3c400136 	bltu	r7,r17,1256c <__umoddi3+0x16c>
   12568:	8180f436 	bltu	r16,r6,1293c <__umoddi3+0x53c>
   1256c:	8185c83a 	sub	r2,r16,r6
   12570:	89cfc83a 	sub	r7,r17,r7
   12574:	808b803a 	cmpltu	r5,r16,r2
   12578:	3979c83a 	sub	fp,r7,r5
   1257c:	e007883a 	mov	r3,fp
   12580:	00003506 	br	12658 <__umoddi3+0x258>
   12584:	3000041e 	bne	r6,zero,12598 <__umoddi3+0x198>
   12588:	000b883a 	mov	r5,zero
   1258c:	01000044 	movi	r4,1
   12590:	0012a540 	call	12a54 <__udivsi3>
   12594:	1027883a 	mov	r19,r2
   12598:	00bfffd4 	movui	r2,65535
   1259c:	14c03f2e 	bgeu	r2,r19,1269c <__umoddi3+0x29c>
   125a0:	00804034 	movhi	r2,256
   125a4:	9880d436 	bltu	r19,r2,128f8 <__umoddi3+0x4f8>
   125a8:	9806d63a 	srli	r3,r19,24
   125ac:	04800604 	movi	r18,24
   125b0:	008000f4 	movhi	r2,3
   125b4:	1885883a 	add	r2,r3,r2
   125b8:	10cd6ac3 	ldbu	r3,13739(r2)
   125bc:	00800804 	movi	r2,32
   125c0:	1c87883a 	add	r3,r3,r18
   125c4:	10e5c83a 	sub	r18,r2,r3
   125c8:	90008a1e 	bne	r18,zero,127f4 <__umoddi3+0x3f4>
   125cc:	982cd43a 	srli	r22,r19,16
   125d0:	8ce3c83a 	sub	r17,r17,r19
   125d4:	9d7fffcc 	andi	r21,r19,65535
   125d8:	b00b883a 	mov	r5,r22
   125dc:	8809883a 	mov	r4,r17
   125e0:	0012ab80 	call	12ab8 <__umodsi3>
   125e4:	b00b883a 	mov	r5,r22
   125e8:	8809883a 	mov	r4,r17
   125ec:	1021883a 	mov	r16,r2
   125f0:	0012a540 	call	12a54 <__udivsi3>
   125f4:	8020943a 	slli	r16,r16,16
   125f8:	a006d43a 	srli	r3,r20,16
   125fc:	1545383a 	mul	r2,r2,r21
   12600:	80c6b03a 	or	r3,r16,r3
   12604:	1880042e 	bgeu	r3,r2,12618 <__umoddi3+0x218>
   12608:	1cc7883a 	add	r3,r3,r19
   1260c:	1cc00236 	bltu	r3,r19,12618 <__umoddi3+0x218>
   12610:	1880012e 	bgeu	r3,r2,12618 <__umoddi3+0x218>
   12614:	1cc7883a 	add	r3,r3,r19
   12618:	18a1c83a 	sub	r16,r3,r2
   1261c:	b00b883a 	mov	r5,r22
   12620:	8009883a 	mov	r4,r16
   12624:	0012ab80 	call	12ab8 <__umodsi3>
   12628:	1023883a 	mov	r17,r2
   1262c:	b00b883a 	mov	r5,r22
   12630:	8009883a 	mov	r4,r16
   12634:	0012a540 	call	12a54 <__udivsi3>
   12638:	8822943a 	slli	r17,r17,16
   1263c:	1545383a 	mul	r2,r2,r21
   12640:	a53fffcc 	andi	r20,r20,65535
   12644:	8d06b03a 	or	r3,r17,r20
   12648:	18bfb42e 	bgeu	r3,r2,1251c <__alt_mem_mcu_subsystem_ram_0+0x77ff251c>
   1264c:	003faf06 	br	1250c <__alt_mem_mcu_subsystem_ram_0+0x77ff250c>
   12650:	2005883a 	mov	r2,r4
   12654:	2807883a 	mov	r3,r5
   12658:	dfc00b17 	ldw	ra,44(sp)
   1265c:	df000a17 	ldw	fp,40(sp)
   12660:	ddc00917 	ldw	r23,36(sp)
   12664:	dd800817 	ldw	r22,32(sp)
   12668:	dd400717 	ldw	r21,28(sp)
   1266c:	dd000617 	ldw	r20,24(sp)
   12670:	dcc00517 	ldw	r19,20(sp)
   12674:	dc800417 	ldw	r18,16(sp)
   12678:	dc400317 	ldw	r17,12(sp)
   1267c:	dc000217 	ldw	r16,8(sp)
   12680:	dec00c04 	addi	sp,sp,48
   12684:	f800283a 	ret
   12688:	38804030 	cmpltui	r2,r7,256
   1268c:	1000911e 	bne	r2,zero,128d4 <__umoddi3+0x4d4>
   12690:	3808d23a 	srli	r4,r7,8
   12694:	00800204 	movi	r2,8
   12698:	003fab06 	br	12548 <__alt_mem_mcu_subsystem_ram_0+0x77ff2548>
   1269c:	98804030 	cmpltui	r2,r19,256
   126a0:	1000981e 	bne	r2,zero,12904 <__umoddi3+0x504>
   126a4:	9806d23a 	srli	r3,r19,8
   126a8:	04800204 	movi	r18,8
   126ac:	003fc006 	br	125b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff25b0>
   126b0:	00804034 	movhi	r2,256
   126b4:	30808d36 	bltu	r6,r2,128ec <__umoddi3+0x4ec>
   126b8:	3006d63a 	srli	r3,r6,24
   126bc:	04800604 	movi	r18,24
   126c0:	003f6806 	br	12464 <__alt_mem_mcu_subsystem_ram_0+0x77ff2464>
   126c4:	34eed83a 	srl	r23,r6,r19
   126c8:	3d0e983a 	sll	r7,r7,r20
   126cc:	8cf8d83a 	srl	fp,r17,r19
   126d0:	84c4d83a 	srl	r2,r16,r19
   126d4:	b9eeb03a 	or	r23,r23,r7
   126d8:	b82cd43a 	srli	r22,r23,16
   126dc:	8d22983a 	sll	r17,r17,r20
   126e0:	e009883a 	mov	r4,fp
   126e4:	b00b883a 	mov	r5,r22
   126e8:	3524983a 	sll	r18,r6,r20
   126ec:	1462b03a 	or	r17,r2,r17
   126f0:	0012ab80 	call	12ab8 <__umodsi3>
   126f4:	e009883a 	mov	r4,fp
   126f8:	b00b883a 	mov	r5,r22
   126fc:	102b883a 	mov	r21,r2
   12700:	0012a540 	call	12a54 <__udivsi3>
   12704:	100d883a 	mov	r6,r2
   12708:	b8ffffcc 	andi	r3,r23,65535
   1270c:	a82a943a 	slli	r21,r21,16
   12710:	8804d43a 	srli	r2,r17,16
   12714:	1989383a 	mul	r4,r3,r6
   12718:	8520983a 	sll	r16,r16,r20
   1271c:	a884b03a 	or	r2,r21,r2
   12720:	1100042e 	bgeu	r2,r4,12734 <__umoddi3+0x334>
   12724:	15c5883a 	add	r2,r2,r23
   12728:	317fffc4 	addi	r5,r6,-1
   1272c:	15c07d2e 	bgeu	r2,r23,12924 <__umoddi3+0x524>
   12730:	280d883a 	mov	r6,r5
   12734:	112bc83a 	sub	r21,r2,r4
   12738:	b00b883a 	mov	r5,r22
   1273c:	a809883a 	mov	r4,r21
   12740:	d9800115 	stw	r6,4(sp)
   12744:	d8c00015 	stw	r3,0(sp)
   12748:	0012ab80 	call	12ab8 <__umodsi3>
   1274c:	b00b883a 	mov	r5,r22
   12750:	a809883a 	mov	r4,r21
   12754:	1039883a 	mov	fp,r2
   12758:	0012a540 	call	12a54 <__udivsi3>
   1275c:	d8c00017 	ldw	r3,0(sp)
   12760:	e038943a 	slli	fp,fp,16
   12764:	8c7fffcc 	andi	r17,r17,65535
   12768:	1887383a 	mul	r3,r3,r2
   1276c:	e462b03a 	or	r17,fp,r17
   12770:	d9800117 	ldw	r6,4(sp)
   12774:	88c0042e 	bgeu	r17,r3,12788 <__umoddi3+0x388>
   12778:	8de3883a 	add	r17,r17,r23
   1277c:	113fffc4 	addi	r4,r2,-1
   12780:	8dc0642e 	bgeu	r17,r23,12914 <__umoddi3+0x514>
   12784:	2005883a 	mov	r2,r4
   12788:	3008943a 	slli	r4,r6,16
   1278c:	917fffcc 	andi	r5,r18,65535
   12790:	9010d43a 	srli	r8,r18,16
   12794:	2084b03a 	or	r2,r4,r2
   12798:	11bfffcc 	andi	r6,r2,65535
   1279c:	1004d43a 	srli	r2,r2,16
   127a0:	314f383a 	mul	r7,r6,r5
   127a4:	320d383a 	mul	r6,r6,r8
   127a8:	114b383a 	mul	r5,r2,r5
   127ac:	3808d43a 	srli	r4,r7,16
   127b0:	88e3c83a 	sub	r17,r17,r3
   127b4:	314d883a 	add	r6,r6,r5
   127b8:	2189883a 	add	r4,r4,r6
   127bc:	1205383a 	mul	r2,r2,r8
   127c0:	2140022e 	bgeu	r4,r5,127cc <__umoddi3+0x3cc>
   127c4:	00c00074 	movhi	r3,1
   127c8:	10c5883a 	add	r2,r2,r3
   127cc:	2006d43a 	srli	r3,r4,16
   127d0:	2008943a 	slli	r4,r4,16
   127d4:	39ffffcc 	andi	r7,r7,65535
   127d8:	1885883a 	add	r2,r3,r2
   127dc:	21c9883a 	add	r4,r4,r7
   127e0:	88802f36 	bltu	r17,r2,128a0 <__umoddi3+0x4a0>
   127e4:	88805726 	beq	r17,r2,12944 <__umoddi3+0x544>
   127e8:	8887c83a 	sub	r3,r17,r2
   127ec:	200d883a 	mov	r6,r4
   127f0:	00003006 	br	128b4 <__umoddi3+0x4b4>
   127f4:	9ca6983a 	sll	r19,r19,r18
   127f8:	88e8d83a 	srl	r20,r17,r3
   127fc:	80c6d83a 	srl	r3,r16,r3
   12800:	982cd43a 	srli	r22,r19,16
   12804:	8ca2983a 	sll	r17,r17,r18
   12808:	a009883a 	mov	r4,r20
   1280c:	b00b883a 	mov	r5,r22
   12810:	1c6eb03a 	or	r23,r3,r17
   12814:	0012ab80 	call	12ab8 <__umodsi3>
   12818:	a009883a 	mov	r4,r20
   1281c:	b00b883a 	mov	r5,r22
   12820:	1023883a 	mov	r17,r2
   12824:	0012a540 	call	12a54 <__udivsi3>
   12828:	9d7fffcc 	andi	r21,r19,65535
   1282c:	8822943a 	slli	r17,r17,16
   12830:	b806d43a 	srli	r3,r23,16
   12834:	a885383a 	mul	r2,r21,r2
   12838:	84a8983a 	sll	r20,r16,r18
   1283c:	88c6b03a 	or	r3,r17,r3
   12840:	1880042e 	bgeu	r3,r2,12854 <__umoddi3+0x454>
   12844:	1cc7883a 	add	r3,r3,r19
   12848:	1cc00236 	bltu	r3,r19,12854 <__umoddi3+0x454>
   1284c:	1880012e 	bgeu	r3,r2,12854 <__umoddi3+0x454>
   12850:	1cc7883a 	add	r3,r3,r19
   12854:	18a3c83a 	sub	r17,r3,r2
   12858:	8809883a 	mov	r4,r17
   1285c:	b00b883a 	mov	r5,r22
   12860:	0012ab80 	call	12ab8 <__umodsi3>
   12864:	1021883a 	mov	r16,r2
   12868:	8809883a 	mov	r4,r17
   1286c:	b00b883a 	mov	r5,r22
   12870:	0012a540 	call	12a54 <__udivsi3>
   12874:	8022943a 	slli	r17,r16,16
   12878:	a885383a 	mul	r2,r21,r2
   1287c:	bdffffcc 	andi	r23,r23,65535
   12880:	8de2b03a 	or	r17,r17,r23
   12884:	8880042e 	bgeu	r17,r2,12898 <__umoddi3+0x498>
   12888:	8ce3883a 	add	r17,r17,r19
   1288c:	8cc00236 	bltu	r17,r19,12898 <__umoddi3+0x498>
   12890:	8880012e 	bgeu	r17,r2,12898 <__umoddi3+0x498>
   12894:	8ce3883a 	add	r17,r17,r19
   12898:	88a3c83a 	sub	r17,r17,r2
   1289c:	003f4e06 	br	125d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff25d8>
   128a0:	248dc83a 	sub	r6,r4,r18
   128a4:	15c5c83a 	sub	r2,r2,r23
   128a8:	2189803a 	cmpltu	r4,r4,r6
   128ac:	1109c83a 	sub	r4,r2,r4
   128b0:	8907c83a 	sub	r3,r17,r4
   128b4:	818dc83a 	sub	r6,r16,r6
   128b8:	81a1803a 	cmpltu	r16,r16,r6
   128bc:	1c23c83a 	sub	r17,r3,r16
   128c0:	8ce0983a 	sll	r16,r17,r19
   128c4:	3504d83a 	srl	r2,r6,r20
   128c8:	8d06d83a 	srl	r3,r17,r20
   128cc:	8084b03a 	or	r2,r16,r2
   128d0:	003f6106 	br	12658 <__alt_mem_mcu_subsystem_ram_0+0x77ff2658>
   128d4:	3809883a 	mov	r4,r7
   128d8:	0005883a 	mov	r2,zero
   128dc:	003f1a06 	br	12548 <__alt_mem_mcu_subsystem_ram_0+0x77ff2548>
   128e0:	3808d43a 	srli	r4,r7,16
   128e4:	00800404 	movi	r2,16
   128e8:	003f1706 	br	12548 <__alt_mem_mcu_subsystem_ram_0+0x77ff2548>
   128ec:	3006d43a 	srli	r3,r6,16
   128f0:	04800404 	movi	r18,16
   128f4:	003edb06 	br	12464 <__alt_mem_mcu_subsystem_ram_0+0x77ff2464>
   128f8:	9806d43a 	srli	r3,r19,16
   128fc:	04800404 	movi	r18,16
   12900:	003f2b06 	br	125b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff25b0>
   12904:	9807883a 	mov	r3,r19
   12908:	003f2906 	br	125b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff25b0>
   1290c:	3007883a 	mov	r3,r6
   12910:	003ed406 	br	12464 <__alt_mem_mcu_subsystem_ram_0+0x77ff2464>
   12914:	88ff9b2e 	bgeu	r17,r3,12784 <__alt_mem_mcu_subsystem_ram_0+0x77ff2784>
   12918:	10bfff84 	addi	r2,r2,-2
   1291c:	8de3883a 	add	r17,r17,r23
   12920:	003f9906 	br	12788 <__alt_mem_mcu_subsystem_ram_0+0x77ff2788>
   12924:	113f822e 	bgeu	r2,r4,12730 <__alt_mem_mcu_subsystem_ram_0+0x77ff2730>
   12928:	31bfff84 	addi	r6,r6,-2
   1292c:	15c5883a 	add	r2,r2,r23
   12930:	003f8006 	br	12734 <__alt_mem_mcu_subsystem_ram_0+0x77ff2734>
   12934:	1cc7883a 	add	r3,r3,r19
   12938:	003ee706 	br	124d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff24d8>
   1293c:	8005883a 	mov	r2,r16
   12940:	003f0e06 	br	1257c <__alt_mem_mcu_subsystem_ram_0+0x77ff257c>
   12944:	813fd636 	bltu	r16,r4,128a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff28a0>
   12948:	200d883a 	mov	r6,r4
   1294c:	0007883a 	mov	r3,zero
   12950:	003fd806 	br	128b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff28b4>

00012954 <__divsi3>:
   12954:	20001c16 	blt	r4,zero,129c8 <__divsi3+0x74>
   12958:	000f883a 	mov	r7,zero
   1295c:	2800020e 	bge	r5,zero,12968 <__divsi3+0x14>
   12960:	014bc83a 	sub	r5,zero,r5
   12964:	39c0005c 	xori	r7,r7,1
   12968:	200d883a 	mov	r6,r4
   1296c:	2900192e 	bgeu	r5,r4,129d4 <__divsi3+0x80>
   12970:	00800804 	movi	r2,32
   12974:	00c00044 	movi	r3,1
   12978:	00000206 	br	12984 <__divsi3+0x30>
   1297c:	10001026 	beq	r2,zero,129c0 <__divsi3+0x6c>
   12980:	28000516 	blt	r5,zero,12998 <__divsi3+0x44>
   12984:	294b883a 	add	r5,r5,r5
   12988:	10bfffc4 	addi	r2,r2,-1
   1298c:	18c7883a 	add	r3,r3,r3
   12990:	293ffa36 	bltu	r5,r4,1297c <__alt_mem_mcu_subsystem_ram_0+0x77ff297c>
   12994:	18000a26 	beq	r3,zero,129c0 <__divsi3+0x6c>
   12998:	0005883a 	mov	r2,zero
   1299c:	31400236 	bltu	r6,r5,129a8 <__divsi3+0x54>
   129a0:	314dc83a 	sub	r6,r6,r5
   129a4:	10c4b03a 	or	r2,r2,r3
   129a8:	1806d07a 	srli	r3,r3,1
   129ac:	280ad07a 	srli	r5,r5,1
   129b0:	183ffa1e 	bne	r3,zero,1299c <__alt_mem_mcu_subsystem_ram_0+0x77ff299c>
   129b4:	38000126 	beq	r7,zero,129bc <__divsi3+0x68>
   129b8:	0085c83a 	sub	r2,zero,r2
   129bc:	f800283a 	ret
   129c0:	0005883a 	mov	r2,zero
   129c4:	003ffb06 	br	129b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff29b4>
   129c8:	0109c83a 	sub	r4,zero,r4
   129cc:	01c00044 	movi	r7,1
   129d0:	003fe206 	br	1295c <__alt_mem_mcu_subsystem_ram_0+0x77ff295c>
   129d4:	00c00044 	movi	r3,1
   129d8:	003fef06 	br	12998 <__alt_mem_mcu_subsystem_ram_0+0x77ff2998>

000129dc <__modsi3>:
   129dc:	20001816 	blt	r4,zero,12a40 <__modsi3+0x64>
   129e0:	000f883a 	mov	r7,zero
   129e4:	2005883a 	mov	r2,r4
   129e8:	28001316 	blt	r5,zero,12a38 <__modsi3+0x5c>
   129ec:	2900172e 	bgeu	r5,r4,12a4c <__modsi3+0x70>
   129f0:	01800804 	movi	r6,32
   129f4:	00c00044 	movi	r3,1
   129f8:	00000206 	br	12a04 <__modsi3+0x28>
   129fc:	30000b26 	beq	r6,zero,12a2c <__modsi3+0x50>
   12a00:	28000516 	blt	r5,zero,12a18 <__modsi3+0x3c>
   12a04:	294b883a 	add	r5,r5,r5
   12a08:	31bfffc4 	addi	r6,r6,-1
   12a0c:	18c7883a 	add	r3,r3,r3
   12a10:	293ffa36 	bltu	r5,r4,129fc <__alt_mem_mcu_subsystem_ram_0+0x77ff29fc>
   12a14:	18000526 	beq	r3,zero,12a2c <__modsi3+0x50>
   12a18:	1806d07a 	srli	r3,r3,1
   12a1c:	11400136 	bltu	r2,r5,12a24 <__modsi3+0x48>
   12a20:	1145c83a 	sub	r2,r2,r5
   12a24:	280ad07a 	srli	r5,r5,1
   12a28:	183ffb1e 	bne	r3,zero,12a18 <__alt_mem_mcu_subsystem_ram_0+0x77ff2a18>
   12a2c:	38000126 	beq	r7,zero,12a34 <__modsi3+0x58>
   12a30:	0085c83a 	sub	r2,zero,r2
   12a34:	f800283a 	ret
   12a38:	014bc83a 	sub	r5,zero,r5
   12a3c:	003feb06 	br	129ec <__alt_mem_mcu_subsystem_ram_0+0x77ff29ec>
   12a40:	0109c83a 	sub	r4,zero,r4
   12a44:	01c00044 	movi	r7,1
   12a48:	003fe606 	br	129e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff29e4>
   12a4c:	00c00044 	movi	r3,1
   12a50:	003ff106 	br	12a18 <__alt_mem_mcu_subsystem_ram_0+0x77ff2a18>

00012a54 <__udivsi3>:
   12a54:	200d883a 	mov	r6,r4
   12a58:	2900152e 	bgeu	r5,r4,12ab0 <__udivsi3+0x5c>
   12a5c:	28001416 	blt	r5,zero,12ab0 <__udivsi3+0x5c>
   12a60:	00800804 	movi	r2,32
   12a64:	00c00044 	movi	r3,1
   12a68:	00000206 	br	12a74 <__udivsi3+0x20>
   12a6c:	10000e26 	beq	r2,zero,12aa8 <__udivsi3+0x54>
   12a70:	28000516 	blt	r5,zero,12a88 <__udivsi3+0x34>
   12a74:	294b883a 	add	r5,r5,r5
   12a78:	10bfffc4 	addi	r2,r2,-1
   12a7c:	18c7883a 	add	r3,r3,r3
   12a80:	293ffa36 	bltu	r5,r4,12a6c <__alt_mem_mcu_subsystem_ram_0+0x77ff2a6c>
   12a84:	18000826 	beq	r3,zero,12aa8 <__udivsi3+0x54>
   12a88:	0005883a 	mov	r2,zero
   12a8c:	31400236 	bltu	r6,r5,12a98 <__udivsi3+0x44>
   12a90:	314dc83a 	sub	r6,r6,r5
   12a94:	10c4b03a 	or	r2,r2,r3
   12a98:	1806d07a 	srli	r3,r3,1
   12a9c:	280ad07a 	srli	r5,r5,1
   12aa0:	183ffa1e 	bne	r3,zero,12a8c <__alt_mem_mcu_subsystem_ram_0+0x77ff2a8c>
   12aa4:	f800283a 	ret
   12aa8:	0005883a 	mov	r2,zero
   12aac:	f800283a 	ret
   12ab0:	00c00044 	movi	r3,1
   12ab4:	003ff406 	br	12a88 <__alt_mem_mcu_subsystem_ram_0+0x77ff2a88>

00012ab8 <__umodsi3>:
   12ab8:	2005883a 	mov	r2,r4
   12abc:	2900122e 	bgeu	r5,r4,12b08 <__umodsi3+0x50>
   12ac0:	28001116 	blt	r5,zero,12b08 <__umodsi3+0x50>
   12ac4:	01800804 	movi	r6,32
   12ac8:	00c00044 	movi	r3,1
   12acc:	00000206 	br	12ad8 <__umodsi3+0x20>
   12ad0:	30000b26 	beq	r6,zero,12b00 <__umodsi3+0x48>
   12ad4:	28000516 	blt	r5,zero,12aec <__umodsi3+0x34>
   12ad8:	294b883a 	add	r5,r5,r5
   12adc:	31bfffc4 	addi	r6,r6,-1
   12ae0:	18c7883a 	add	r3,r3,r3
   12ae4:	293ffa36 	bltu	r5,r4,12ad0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2ad0>
   12ae8:	18000626 	beq	r3,zero,12b04 <__umodsi3+0x4c>
   12aec:	1806d07a 	srli	r3,r3,1
   12af0:	11400136 	bltu	r2,r5,12af8 <__umodsi3+0x40>
   12af4:	1145c83a 	sub	r2,r2,r5
   12af8:	280ad07a 	srli	r5,r5,1
   12afc:	183ffb1e 	bne	r3,zero,12aec <__alt_mem_mcu_subsystem_ram_0+0x77ff2aec>
   12b00:	f800283a 	ret
   12b04:	f800283a 	ret
   12b08:	00c00044 	movi	r3,1
   12b0c:	003ff706 	br	12aec <__alt_mem_mcu_subsystem_ram_0+0x77ff2aec>

00012b10 <__adddf3>:
   12b10:	02400434 	movhi	r9,16
   12b14:	defffb04 	addi	sp,sp,-20
   12b18:	4a7fffc4 	addi	r9,r9,-1
   12b1c:	2a50703a 	and	r8,r5,r9
   12b20:	3a54703a 	and	r10,r7,r9
   12b24:	3816d7fa 	srli	r11,r7,31
   12b28:	dc800215 	stw	r18,8(sp)
   12b2c:	380ed53a 	srli	r7,r7,20
   12b30:	2824d7fa 	srli	r18,r5,31
   12b34:	280ad53a 	srli	r5,r5,20
   12b38:	400490fa 	slli	r2,r8,3
   12b3c:	501490fa 	slli	r10,r10,3
   12b40:	2010d77a 	srli	r8,r4,29
   12b44:	3006d77a 	srli	r3,r6,29
   12b48:	dc000015 	stw	r16,0(sp)
   12b4c:	39c1ffcc 	andi	r7,r7,2047
   12b50:	2c01ffcc 	andi	r16,r5,2047
   12b54:	dfc00415 	stw	ra,16(sp)
   12b58:	dcc00315 	stw	r19,12(sp)
   12b5c:	dc400115 	stw	r17,4(sp)
   12b60:	93403fcc 	andi	r13,r18,255
   12b64:	5b803fcc 	andi	r14,r11,255
   12b68:	1a86b03a 	or	r3,r3,r10
   12b6c:	4090b03a 	or	r8,r8,r2
   12b70:	201890fa 	slli	r12,r4,3
   12b74:	301490fa 	slli	r10,r6,3
   12b78:	81cbc83a 	sub	r5,r16,r7
   12b7c:	6b805426 	beq	r13,r14,12cd0 <__adddf3+0x1c0>
   12b80:	0140420e 	bge	zero,r5,12c8c <__adddf3+0x17c>
   12b84:	38006e1e 	bne	r7,zero,12d40 <__adddf3+0x230>
   12b88:	1a84b03a 	or	r2,r3,r10
   12b8c:	1000ce26 	beq	r2,zero,12ec8 <__adddf3+0x3b8>
   12b90:	28bfffc4 	addi	r2,r5,-1
   12b94:	1001171e 	bne	r2,zero,12ff4 <__adddf3+0x4e4>
   12b98:	62a3c83a 	sub	r17,r12,r10
   12b9c:	40c9c83a 	sub	r4,r8,r3
   12ba0:	6445803a 	cmpltu	r2,r12,r17
   12ba4:	2091c83a 	sub	r8,r4,r2
   12ba8:	04000044 	movi	r16,1
   12bac:	4080202c 	andhi	r2,r8,128
   12bb0:	1000b126 	beq	r2,zero,12e78 <__adddf3+0x368>
   12bb4:	04c02034 	movhi	r19,128
   12bb8:	9cffffc4 	addi	r19,r19,-1
   12bbc:	44e6703a 	and	r19,r8,r19
   12bc0:	9800ec26 	beq	r19,zero,12f74 <__adddf3+0x464>
   12bc4:	9809883a 	mov	r4,r19
   12bc8:	0014f540 	call	14f54 <__clzsi2>
   12bcc:	10fffe04 	addi	r3,r2,-8
   12bd0:	19000808 	cmpgei	r4,r3,32
   12bd4:	2000ed1e 	bne	r4,zero,12f8c <__adddf3+0x47c>
   12bd8:	01000804 	movi	r4,32
   12bdc:	20c9c83a 	sub	r4,r4,r3
   12be0:	8908d83a 	srl	r4,r17,r4
   12be4:	98e6983a 	sll	r19,r19,r3
   12be8:	88e2983a 	sll	r17,r17,r3
   12bec:	24c8b03a 	or	r4,r4,r19
   12bf0:	1c00ea16 	blt	r3,r16,12f9c <__adddf3+0x48c>
   12bf4:	1c21c83a 	sub	r16,r3,r16
   12bf8:	82000044 	addi	r8,r16,1
   12bfc:	40800808 	cmpgei	r2,r8,32
   12c00:	1001001e 	bne	r2,zero,13004 <__adddf3+0x4f4>
   12c04:	00800804 	movi	r2,32
   12c08:	1205c83a 	sub	r2,r2,r8
   12c0c:	8a06d83a 	srl	r3,r17,r8
   12c10:	88a2983a 	sll	r17,r17,r2
   12c14:	2084983a 	sll	r2,r4,r2
   12c18:	2210d83a 	srl	r8,r4,r8
   12c1c:	8822c03a 	cmpne	r17,r17,zero
   12c20:	10c4b03a 	or	r2,r2,r3
   12c24:	1462b03a 	or	r17,r2,r17
   12c28:	888001cc 	andi	r2,r17,7
   12c2c:	0021883a 	mov	r16,zero
   12c30:	10000726 	beq	r2,zero,12c50 <__adddf3+0x140>
   12c34:	888003cc 	andi	r2,r17,15
   12c38:	10800120 	cmpeqi	r2,r2,4
   12c3c:	1000041e 	bne	r2,zero,12c50 <__adddf3+0x140>
   12c40:	88c00104 	addi	r3,r17,4
   12c44:	1c63803a 	cmpltu	r17,r3,r17
   12c48:	4451883a 	add	r8,r8,r17
   12c4c:	1823883a 	mov	r17,r3
   12c50:	4080202c 	andhi	r2,r8,128
   12c54:	10016b26 	beq	r2,zero,13204 <__adddf3+0x6f4>
   12c58:	84000044 	addi	r16,r16,1
   12c5c:	8081ffe0 	cmpeqi	r2,r16,2047
   12c60:	8401ffcc 	andi	r16,r16,2047
   12c64:	1000bf1e 	bne	r2,zero,12f64 <__adddf3+0x454>
   12c68:	013fe034 	movhi	r4,65408
   12c6c:	213fffc4 	addi	r4,r4,-1
   12c70:	4108703a 	and	r4,r8,r4
   12c74:	2004977a 	slli	r2,r4,29
   12c78:	8822d0fa 	srli	r17,r17,3
   12c7c:	2008927a 	slli	r4,r4,9
   12c80:	1444b03a 	or	r2,r2,r17
   12c84:	2008d33a 	srli	r4,r4,12
   12c88:	00006106 	br	12e10 <__adddf3+0x300>
   12c8c:	2800951e 	bne	r5,zero,12ee4 <__adddf3+0x3d4>
   12c90:	80800044 	addi	r2,r16,1
   12c94:	1081ffcc 	andi	r2,r2,2047
   12c98:	10800088 	cmpgei	r2,r2,2
   12c9c:	1000cb26 	beq	r2,zero,12fcc <__adddf3+0x4bc>
   12ca0:	62a3c83a 	sub	r17,r12,r10
   12ca4:	40e7c83a 	sub	r19,r8,r3
   12ca8:	6449803a 	cmpltu	r4,r12,r17
   12cac:	9927c83a 	sub	r19,r19,r4
   12cb0:	9880202c 	andhi	r2,r19,128
   12cb4:	1000e11e 	bne	r2,zero,1303c <__adddf3+0x52c>
   12cb8:	8ccab03a 	or	r5,r17,r19
   12cbc:	283fc01e 	bne	r5,zero,12bc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2bc0>
   12cc0:	0005883a 	mov	r2,zero
   12cc4:	0025883a 	mov	r18,zero
   12cc8:	0021883a 	mov	r16,zero
   12ccc:	00004c06 	br	12e00 <__adddf3+0x2f0>
   12cd0:	01409d0e 	bge	zero,r5,12f48 <__adddf3+0x438>
   12cd4:	38005d26 	beq	r7,zero,12e4c <__adddf3+0x33c>
   12cd8:	8181ffe0 	cmpeqi	r6,r16,2047
   12cdc:	3000431e 	bne	r6,zero,12dec <__adddf3+0x2dc>
   12ce0:	18c02034 	orhi	r3,r3,128
   12ce4:	28800e48 	cmpgei	r2,r5,57
   12ce8:	1000da26 	beq	r2,zero,13054 <__adddf3+0x544>
   12cec:	1aa2b03a 	or	r17,r3,r10
   12cf0:	8822c03a 	cmpne	r17,r17,zero
   12cf4:	8b23883a 	add	r17,r17,r12
   12cf8:	8b05803a 	cmpltu	r2,r17,r12
   12cfc:	4091883a 	add	r8,r8,r2
   12d00:	4080202c 	andhi	r2,r8,128
   12d04:	10005c26 	beq	r2,zero,12e78 <__adddf3+0x368>
   12d08:	84000044 	addi	r16,r16,1
   12d0c:	8181ffe0 	cmpeqi	r6,r16,2047
   12d10:	3000941e 	bne	r6,zero,12f64 <__adddf3+0x454>
   12d14:	013fe034 	movhi	r4,65408
   12d18:	213fffc4 	addi	r4,r4,-1
   12d1c:	8804d07a 	srli	r2,r17,1
   12d20:	4108703a 	and	r4,r8,r4
   12d24:	200697fa 	slli	r3,r4,31
   12d28:	8c40004c 	andi	r17,r17,1
   12d2c:	1462b03a 	or	r17,r2,r17
   12d30:	1c62b03a 	or	r17,r3,r17
   12d34:	2010d07a 	srli	r8,r4,1
   12d38:	888001cc 	andi	r2,r17,7
   12d3c:	003fbc06 	br	12c30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2c30>
   12d40:	8181ffe0 	cmpeqi	r6,r16,2047
   12d44:	3000291e 	bne	r6,zero,12dec <__adddf3+0x2dc>
   12d48:	18c02034 	orhi	r3,r3,128
   12d4c:	28800e48 	cmpgei	r2,r5,57
   12d50:	1000981e 	bne	r2,zero,12fb4 <__adddf3+0x4a4>
   12d54:	28800808 	cmpgei	r2,r5,32
   12d58:	1000cb26 	beq	r2,zero,13088 <__adddf3+0x578>
   12d5c:	2c7ff804 	addi	r17,r5,-32
   12d60:	29000820 	cmpeqi	r4,r5,32
   12d64:	1c44d83a 	srl	r2,r3,r17
   12d68:	2000041e 	bne	r4,zero,12d7c <__adddf3+0x26c>
   12d6c:	01001004 	movi	r4,64
   12d70:	214bc83a 	sub	r5,r4,r5
   12d74:	1946983a 	sll	r3,r3,r5
   12d78:	50d4b03a 	or	r10,r10,r3
   12d7c:	5022c03a 	cmpne	r17,r10,zero
   12d80:	88a2b03a 	or	r17,r17,r2
   12d84:	00008d06 	br	12fbc <__adddf3+0x4ac>
   12d88:	10016e26 	beq	r2,zero,13344 <__adddf3+0x834>
   12d8c:	1a94b03a 	or	r10,r3,r10
   12d90:	5000e726 	beq	r10,zero,13130 <__adddf3+0x620>
   12d94:	400ad0fa 	srli	r5,r8,3
   12d98:	01c80034 	movhi	r7,8192
   12d9c:	4010977a 	slli	r8,r8,29
   12da0:	39ffffc4 	addi	r7,r7,-1
   12da4:	21c4703a 	and	r2,r4,r7
   12da8:	2a40022c 	andhi	r9,r5,8
   12dac:	1204b03a 	or	r2,r2,r8
   12db0:	48000726 	beq	r9,zero,12dd0 <__adddf3+0x2c0>
   12db4:	1808d0fa 	srli	r4,r3,3
   12db8:	2200022c 	andhi	r8,r4,8
   12dbc:	4000041e 	bne	r8,zero,12dd0 <__adddf3+0x2c0>
   12dc0:	1804977a 	slli	r2,r3,29
   12dc4:	31c6703a 	and	r3,r6,r7
   12dc8:	200b883a 	mov	r5,r4
   12dcc:	1884b03a 	or	r2,r3,r2
   12dd0:	280a90fa 	slli	r5,r5,3
   12dd4:	1008d77a 	srli	r4,r2,29
   12dd8:	101890fa 	slli	r12,r2,3
   12ddc:	6825883a 	mov	r18,r13
   12de0:	2150b03a 	or	r8,r4,r5
   12de4:	0401ffc4 	movi	r16,2047
   12de8:	01800044 	movi	r6,1
   12dec:	4004977a 	slli	r2,r8,29
   12df0:	6018d0fa 	srli	r12,r12,3
   12df4:	400ad0fa 	srli	r5,r8,3
   12df8:	1304b03a 	or	r2,r2,r12
   12dfc:	3000261e 	bne	r6,zero,12e98 <__adddf3+0x388>
   12e00:	01000434 	movhi	r4,16
   12e04:	213fffc4 	addi	r4,r4,-1
   12e08:	2908703a 	and	r4,r5,r4
   12e0c:	8401ffcc 	andi	r16,r16,2047
   12e10:	8020953a 	slli	r16,r16,20
   12e14:	00c00434 	movhi	r3,16
   12e18:	94803fcc 	andi	r18,r18,255
   12e1c:	902497fa 	slli	r18,r18,31
   12e20:	18ffffc4 	addi	r3,r3,-1
   12e24:	20c6703a 	and	r3,r4,r3
   12e28:	1c06b03a 	or	r3,r3,r16
   12e2c:	1c86b03a 	or	r3,r3,r18
   12e30:	dfc00417 	ldw	ra,16(sp)
   12e34:	dcc00317 	ldw	r19,12(sp)
   12e38:	dc800217 	ldw	r18,8(sp)
   12e3c:	dc400117 	ldw	r17,4(sp)
   12e40:	dc000017 	ldw	r16,0(sp)
   12e44:	dec00504 	addi	sp,sp,20
   12e48:	f800283a 	ret
   12e4c:	1a84b03a 	or	r2,r3,r10
   12e50:	10001d26 	beq	r2,zero,12ec8 <__adddf3+0x3b8>
   12e54:	28bfffc4 	addi	r2,r5,-1
   12e58:	1000b11e 	bne	r2,zero,13120 <__adddf3+0x610>
   12e5c:	62a3883a 	add	r17,r12,r10
   12e60:	8b05803a 	cmpltu	r2,r17,r12
   12e64:	40c9883a 	add	r4,r8,r3
   12e68:	2091883a 	add	r8,r4,r2
   12e6c:	4080202c 	andhi	r2,r8,128
   12e70:	10011a1e 	bne	r2,zero,132dc <__adddf3+0x7cc>
   12e74:	04000044 	movi	r16,1
   12e78:	888001cc 	andi	r2,r17,7
   12e7c:	103f6d1e 	bne	r2,zero,12c34 <__alt_mem_mcu_subsystem_ram_0+0x77ff2c34>
   12e80:	8822d0fa 	srli	r17,r17,3
   12e84:	4004977a 	slli	r2,r8,29
   12e88:	8181ffe0 	cmpeqi	r6,r16,2047
   12e8c:	400ad0fa 	srli	r5,r8,3
   12e90:	8884b03a 	or	r2,r17,r2
   12e94:	303fda26 	beq	r6,zero,12e00 <__alt_mem_mcu_subsystem_ram_0+0x77ff2e00>
   12e98:	2886b03a 	or	r3,r5,r2
   12e9c:	18014826 	beq	r3,zero,133c0 <__adddf3+0x8b0>
   12ea0:	00c00434 	movhi	r3,16
   12ea4:	29000234 	orhi	r4,r5,8
   12ea8:	18ffffc4 	addi	r3,r3,-1
   12eac:	20c8703a 	and	r4,r4,r3
   12eb0:	0401ffc4 	movi	r16,2047
   12eb4:	003fd606 	br	12e10 <__alt_mem_mcu_subsystem_ram_0+0x77ff2e10>
   12eb8:	5825883a 	mov	r18,r11
   12ebc:	380b883a 	mov	r5,r7
   12ec0:	1811883a 	mov	r8,r3
   12ec4:	5019883a 	mov	r12,r10
   12ec8:	4004977a 	slli	r2,r8,29
   12ecc:	6018d0fa 	srli	r12,r12,3
   12ed0:	2821883a 	mov	r16,r5
   12ed4:	2981ffe0 	cmpeqi	r6,r5,2047
   12ed8:	1304b03a 	or	r2,r2,r12
   12edc:	400ad0fa 	srli	r5,r8,3
   12ee0:	003fc606 	br	12dfc <__alt_mem_mcu_subsystem_ram_0+0x77ff2dfc>
   12ee4:	80007326 	beq	r16,zero,130b4 <__adddf3+0x5a4>
   12ee8:	3881ffe0 	cmpeqi	r2,r7,2047
   12eec:	1000ae1e 	bne	r2,zero,131a8 <__adddf3+0x698>
   12ef0:	014bc83a 	sub	r5,zero,r5
   12ef4:	42002034 	orhi	r8,r8,128
   12ef8:	28800e48 	cmpgei	r2,r5,57
   12efc:	1000d41e 	bne	r2,zero,13250 <__adddf3+0x740>
   12f00:	28800808 	cmpgei	r2,r5,32
   12f04:	1000fa1e 	bne	r2,zero,132f0 <__adddf3+0x7e0>
   12f08:	00800804 	movi	r2,32
   12f0c:	1145c83a 	sub	r2,r2,r5
   12f10:	40a2983a 	sll	r17,r8,r2
   12f14:	6148d83a 	srl	r4,r12,r5
   12f18:	6084983a 	sll	r2,r12,r2
   12f1c:	414ad83a 	srl	r5,r8,r5
   12f20:	8922b03a 	or	r17,r17,r4
   12f24:	1004c03a 	cmpne	r2,r2,zero
   12f28:	88a2b03a 	or	r17,r17,r2
   12f2c:	1947c83a 	sub	r3,r3,r5
   12f30:	5463c83a 	sub	r17,r10,r17
   12f34:	5449803a 	cmpltu	r4,r10,r17
   12f38:	1911c83a 	sub	r8,r3,r4
   12f3c:	5825883a 	mov	r18,r11
   12f40:	3821883a 	mov	r16,r7
   12f44:	003f1906 	br	12bac <__alt_mem_mcu_subsystem_ram_0+0x77ff2bac>
   12f48:	28007c1e 	bne	r5,zero,1313c <__adddf3+0x62c>
   12f4c:	81400044 	addi	r5,r16,1
   12f50:	2881ffcc 	andi	r2,r5,2047
   12f54:	10800088 	cmpgei	r2,r2,2
   12f58:	10009926 	beq	r2,zero,131c0 <__adddf3+0x6b0>
   12f5c:	2881ffe0 	cmpeqi	r2,r5,2047
   12f60:	10005c26 	beq	r2,zero,130d4 <__adddf3+0x5c4>
   12f64:	0401ffc4 	movi	r16,2047
   12f68:	0009883a 	mov	r4,zero
   12f6c:	0005883a 	mov	r2,zero
   12f70:	003fa706 	br	12e10 <__alt_mem_mcu_subsystem_ram_0+0x77ff2e10>
   12f74:	8809883a 	mov	r4,r17
   12f78:	0014f540 	call	14f54 <__clzsi2>
   12f7c:	10800804 	addi	r2,r2,32
   12f80:	10fffe04 	addi	r3,r2,-8
   12f84:	19000808 	cmpgei	r4,r3,32
   12f88:	203f1326 	beq	r4,zero,12bd8 <__alt_mem_mcu_subsystem_ram_0+0x77ff2bd8>
   12f8c:	14fff604 	addi	r19,r2,-40
   12f90:	8cc8983a 	sll	r4,r17,r19
   12f94:	0023883a 	mov	r17,zero
   12f98:	1c3f160e 	bge	r3,r16,12bf4 <__alt_mem_mcu_subsystem_ram_0+0x77ff2bf4>
   12f9c:	023fe034 	movhi	r8,65408
   12fa0:	423fffc4 	addi	r8,r8,-1
   12fa4:	80e1c83a 	sub	r16,r16,r3
   12fa8:	2210703a 	and	r8,r4,r8
   12fac:	888001cc 	andi	r2,r17,7
   12fb0:	003f1f06 	br	12c30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2c30>
   12fb4:	1aa2b03a 	or	r17,r3,r10
   12fb8:	8822c03a 	cmpne	r17,r17,zero
   12fbc:	6463c83a 	sub	r17,r12,r17
   12fc0:	6445803a 	cmpltu	r2,r12,r17
   12fc4:	4091c83a 	sub	r8,r8,r2
   12fc8:	003ef806 	br	12bac <__alt_mem_mcu_subsystem_ram_0+0x77ff2bac>
   12fcc:	4304b03a 	or	r2,r8,r12
   12fd0:	1a8ab03a 	or	r5,r3,r10
   12fd4:	80004a1e 	bne	r16,zero,13100 <__adddf3+0x5f0>
   12fd8:	1000a01e 	bne	r2,zero,1325c <__adddf3+0x74c>
   12fdc:	2800cf26 	beq	r5,zero,1331c <__adddf3+0x80c>
   12fe0:	5825883a 	mov	r18,r11
   12fe4:	1811883a 	mov	r8,r3
   12fe8:	5019883a 	mov	r12,r10
   12fec:	000d883a 	mov	r6,zero
   12ff0:	003f7e06 	br	12dec <__alt_mem_mcu_subsystem_ram_0+0x77ff2dec>
   12ff4:	2941ffe0 	cmpeqi	r5,r5,2047
   12ff8:	28004d1e 	bne	r5,zero,13130 <__adddf3+0x620>
   12ffc:	100b883a 	mov	r5,r2
   13000:	003f5206 	br	12d4c <__alt_mem_mcu_subsystem_ram_0+0x77ff2d4c>
   13004:	843ff844 	addi	r16,r16,-31
   13008:	40800820 	cmpeqi	r2,r8,32
   1300c:	2406d83a 	srl	r3,r4,r16
   13010:	1000041e 	bne	r2,zero,13024 <__adddf3+0x514>
   13014:	04c01004 	movi	r19,64
   13018:	9a11c83a 	sub	r8,r19,r8
   1301c:	2226983a 	sll	r19,r4,r8
   13020:	8ce2b03a 	or	r17,r17,r19
   13024:	8822c03a 	cmpne	r17,r17,zero
   13028:	88e2b03a 	or	r17,r17,r3
   1302c:	888001cc 	andi	r2,r17,7
   13030:	0011883a 	mov	r8,zero
   13034:	0021883a 	mov	r16,zero
   13038:	003f9006 	br	12e7c <__alt_mem_mcu_subsystem_ram_0+0x77ff2e7c>
   1303c:	5323c83a 	sub	r17,r10,r12
   13040:	1a09c83a 	sub	r4,r3,r8
   13044:	5455803a 	cmpltu	r10,r10,r17
   13048:	22a7c83a 	sub	r19,r4,r10
   1304c:	5825883a 	mov	r18,r11
   13050:	003edb06 	br	12bc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2bc0>
   13054:	28800808 	cmpgei	r2,r5,32
   13058:	10006d1e 	bne	r2,zero,13210 <__adddf3+0x700>
   1305c:	00800804 	movi	r2,32
   13060:	1145c83a 	sub	r2,r2,r5
   13064:	18a2983a 	sll	r17,r3,r2
   13068:	5148d83a 	srl	r4,r10,r5
   1306c:	5094983a 	sll	r10,r10,r2
   13070:	1946d83a 	srl	r3,r3,r5
   13074:	8922b03a 	or	r17,r17,r4
   13078:	5014c03a 	cmpne	r10,r10,zero
   1307c:	8aa2b03a 	or	r17,r17,r10
   13080:	40d1883a 	add	r8,r8,r3
   13084:	003f1b06 	br	12cf4 <__alt_mem_mcu_subsystem_ram_0+0x77ff2cf4>
   13088:	00800804 	movi	r2,32
   1308c:	1145c83a 	sub	r2,r2,r5
   13090:	18a2983a 	sll	r17,r3,r2
   13094:	5148d83a 	srl	r4,r10,r5
   13098:	5094983a 	sll	r10,r10,r2
   1309c:	1946d83a 	srl	r3,r3,r5
   130a0:	8922b03a 	or	r17,r17,r4
   130a4:	5014c03a 	cmpne	r10,r10,zero
   130a8:	8aa2b03a 	or	r17,r17,r10
   130ac:	40d1c83a 	sub	r8,r8,r3
   130b0:	003fc206 	br	12fbc <__alt_mem_mcu_subsystem_ram_0+0x77ff2fbc>
   130b4:	4304b03a 	or	r2,r8,r12
   130b8:	103f7f26 	beq	r2,zero,12eb8 <__alt_mem_mcu_subsystem_ram_0+0x77ff2eb8>
   130bc:	28bfffd8 	cmpnei	r2,r5,-1
   130c0:	10009926 	beq	r2,zero,13328 <__adddf3+0x818>
   130c4:	3881ffe0 	cmpeqi	r2,r7,2047
   130c8:	1000371e 	bne	r2,zero,131a8 <__adddf3+0x698>
   130cc:	014a303a 	nor	r5,zero,r5
   130d0:	003f8906 	br	12ef8 <__alt_mem_mcu_subsystem_ram_0+0x77ff2ef8>
   130d4:	6295883a 	add	r10,r12,r10
   130d8:	40c9883a 	add	r4,r8,r3
   130dc:	5311803a 	cmpltu	r8,r10,r12
   130e0:	2209883a 	add	r4,r4,r8
   130e4:	202297fa 	slli	r17,r4,31
   130e8:	5014d07a 	srli	r10,r10,1
   130ec:	2010d07a 	srli	r8,r4,1
   130f0:	2821883a 	mov	r16,r5
   130f4:	8aa2b03a 	or	r17,r17,r10
   130f8:	888001cc 	andi	r2,r17,7
   130fc:	003ecc06 	br	12c30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2c30>
   13100:	1000641e 	bne	r2,zero,13294 <__adddf3+0x784>
   13104:	28009426 	beq	r5,zero,13358 <__adddf3+0x848>
   13108:	5825883a 	mov	r18,r11
   1310c:	1811883a 	mov	r8,r3
   13110:	5019883a 	mov	r12,r10
   13114:	0401ffc4 	movi	r16,2047
   13118:	01800044 	movi	r6,1
   1311c:	003f3306 	br	12dec <__alt_mem_mcu_subsystem_ram_0+0x77ff2dec>
   13120:	2941ffe0 	cmpeqi	r5,r5,2047
   13124:	2800021e 	bne	r5,zero,13130 <__adddf3+0x620>
   13128:	100b883a 	mov	r5,r2
   1312c:	003eed06 	br	12ce4 <__alt_mem_mcu_subsystem_ram_0+0x77ff2ce4>
   13130:	0401ffc4 	movi	r16,2047
   13134:	01800044 	movi	r6,1
   13138:	003f2c06 	br	12dec <__alt_mem_mcu_subsystem_ram_0+0x77ff2dec>
   1313c:	80003f1e 	bne	r16,zero,1323c <__adddf3+0x72c>
   13140:	4304b03a 	or	r2,r8,r12
   13144:	103f5d26 	beq	r2,zero,12ebc <__alt_mem_mcu_subsystem_ram_0+0x77ff2ebc>
   13148:	28bfffd8 	cmpnei	r2,r5,-1
   1314c:	10009126 	beq	r2,zero,13394 <__adddf3+0x884>
   13150:	3881ffe0 	cmpeqi	r2,r7,2047
   13154:	1000151e 	bne	r2,zero,131ac <__adddf3+0x69c>
   13158:	014a303a 	nor	r5,zero,r5
   1315c:	28800e48 	cmpgei	r2,r5,57
   13160:	1000601e 	bne	r2,zero,132e4 <__adddf3+0x7d4>
   13164:	28800808 	cmpgei	r2,r5,32
   13168:	10007f1e 	bne	r2,zero,13368 <__adddf3+0x858>
   1316c:	00800804 	movi	r2,32
   13170:	1145c83a 	sub	r2,r2,r5
   13174:	40a2983a 	sll	r17,r8,r2
   13178:	6148d83a 	srl	r4,r12,r5
   1317c:	6084983a 	sll	r2,r12,r2
   13180:	414ad83a 	srl	r5,r8,r5
   13184:	8922b03a 	or	r17,r17,r4
   13188:	1004c03a 	cmpne	r2,r2,zero
   1318c:	88a2b03a 	or	r17,r17,r2
   13190:	1947883a 	add	r3,r3,r5
   13194:	8aa3883a 	add	r17,r17,r10
   13198:	8a89803a 	cmpltu	r4,r17,r10
   1319c:	20d1883a 	add	r8,r4,r3
   131a0:	3821883a 	mov	r16,r7
   131a4:	003ed606 	br	12d00 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d00>
   131a8:	5825883a 	mov	r18,r11
   131ac:	0401ffc4 	movi	r16,2047
   131b0:	1811883a 	mov	r8,r3
   131b4:	5019883a 	mov	r12,r10
   131b8:	01800044 	movi	r6,1
   131bc:	003f0b06 	br	12dec <__alt_mem_mcu_subsystem_ram_0+0x77ff2dec>
   131c0:	4304b03a 	or	r2,r8,r12
   131c4:	803ef01e 	bne	r16,zero,12d88 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d88>
   131c8:	103f8626 	beq	r2,zero,12fe4 <__alt_mem_mcu_subsystem_ram_0+0x77ff2fe4>
   131cc:	1a84b03a 	or	r2,r3,r10
   131d0:	103f8626 	beq	r2,zero,12fec <__alt_mem_mcu_subsystem_ram_0+0x77ff2fec>
   131d4:	62a3883a 	add	r17,r12,r10
   131d8:	40c9883a 	add	r4,r8,r3
   131dc:	8b05803a 	cmpltu	r2,r17,r12
   131e0:	2091883a 	add	r8,r4,r2
   131e4:	40c0202c 	andhi	r3,r8,128
   131e8:	888001cc 	andi	r2,r17,7
   131ec:	183f2326 	beq	r3,zero,12e7c <__alt_mem_mcu_subsystem_ram_0+0x77ff2e7c>
   131f0:	00ffe034 	movhi	r3,65408
   131f4:	18ffffc4 	addi	r3,r3,-1
   131f8:	40d0703a 	and	r8,r8,r3
   131fc:	04000044 	movi	r16,1
   13200:	003e8b06 	br	12c30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2c30>
   13204:	8819883a 	mov	r12,r17
   13208:	8181ffe0 	cmpeqi	r6,r16,2047
   1320c:	003ef706 	br	12dec <__alt_mem_mcu_subsystem_ram_0+0x77ff2dec>
   13210:	2c7ff804 	addi	r17,r5,-32
   13214:	29000820 	cmpeqi	r4,r5,32
   13218:	1c44d83a 	srl	r2,r3,r17
   1321c:	2000041e 	bne	r4,zero,13230 <__adddf3+0x720>
   13220:	01001004 	movi	r4,64
   13224:	214bc83a 	sub	r5,r4,r5
   13228:	1946983a 	sll	r3,r3,r5
   1322c:	50d4b03a 	or	r10,r10,r3
   13230:	5022c03a 	cmpne	r17,r10,zero
   13234:	88a2b03a 	or	r17,r17,r2
   13238:	003eae06 	br	12cf4 <__alt_mem_mcu_subsystem_ram_0+0x77ff2cf4>
   1323c:	3881ffe0 	cmpeqi	r2,r7,2047
   13240:	103fda1e 	bne	r2,zero,131ac <__alt_mem_mcu_subsystem_ram_0+0x77ff31ac>
   13244:	014bc83a 	sub	r5,zero,r5
   13248:	42002034 	orhi	r8,r8,128
   1324c:	003fc306 	br	1315c <__alt_mem_mcu_subsystem_ram_0+0x77ff315c>
   13250:	4322b03a 	or	r17,r8,r12
   13254:	8822c03a 	cmpne	r17,r17,zero
   13258:	003f3506 	br	12f30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2f30>
   1325c:	283f6326 	beq	r5,zero,12fec <__alt_mem_mcu_subsystem_ram_0+0x77ff2fec>
   13260:	62a3c83a 	sub	r17,r12,r10
   13264:	6445803a 	cmpltu	r2,r12,r17
   13268:	40c9c83a 	sub	r4,r8,r3
   1326c:	2089c83a 	sub	r4,r4,r2
   13270:	2080202c 	andhi	r2,r4,128
   13274:	10004d26 	beq	r2,zero,133ac <__adddf3+0x89c>
   13278:	5323c83a 	sub	r17,r10,r12
   1327c:	1a09c83a 	sub	r4,r3,r8
   13280:	5455803a 	cmpltu	r10,r10,r17
   13284:	2291c83a 	sub	r8,r4,r10
   13288:	888001cc 	andi	r2,r17,7
   1328c:	5825883a 	mov	r18,r11
   13290:	003e6706 	br	12c30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2c30>
   13294:	283fa626 	beq	r5,zero,13130 <__alt_mem_mcu_subsystem_ram_0+0x77ff3130>
   13298:	400ad0fa 	srli	r5,r8,3
   1329c:	01c80034 	movhi	r7,8192
   132a0:	4010977a 	slli	r8,r8,29
   132a4:	39ffffc4 	addi	r7,r7,-1
   132a8:	21c4703a 	and	r2,r4,r7
   132ac:	2a40022c 	andhi	r9,r5,8
   132b0:	1204b03a 	or	r2,r2,r8
   132b4:	483ec626 	beq	r9,zero,12dd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2dd0>
   132b8:	1808d0fa 	srli	r4,r3,3
   132bc:	2200022c 	andhi	r8,r4,8
   132c0:	403ec31e 	bne	r8,zero,12dd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2dd0>
   132c4:	1804977a 	slli	r2,r3,29
   132c8:	31c6703a 	and	r3,r6,r7
   132cc:	200b883a 	mov	r5,r4
   132d0:	1884b03a 	or	r2,r3,r2
   132d4:	701b883a 	mov	r13,r14
   132d8:	003ebd06 	br	12dd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2dd0>
   132dc:	04000084 	movi	r16,2
   132e0:	003e8c06 	br	12d14 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d14>
   132e4:	4322b03a 	or	r17,r8,r12
   132e8:	8822c03a 	cmpne	r17,r17,zero
   132ec:	003fa906 	br	13194 <__alt_mem_mcu_subsystem_ram_0+0x77ff3194>
   132f0:	28bff804 	addi	r2,r5,-32
   132f4:	29000820 	cmpeqi	r4,r5,32
   132f8:	4084d83a 	srl	r2,r8,r2
   132fc:	2000041e 	bne	r4,zero,13310 <__adddf3+0x800>
   13300:	01001004 	movi	r4,64
   13304:	214bc83a 	sub	r5,r4,r5
   13308:	4148983a 	sll	r4,r8,r5
   1330c:	6118b03a 	or	r12,r12,r4
   13310:	6022c03a 	cmpne	r17,r12,zero
   13314:	88a2b03a 	or	r17,r17,r2
   13318:	003f0506 	br	12f30 <__alt_mem_mcu_subsystem_ram_0+0x77ff2f30>
   1331c:	0005883a 	mov	r2,zero
   13320:	0025883a 	mov	r18,zero
   13324:	003eb606 	br	12e00 <__alt_mem_mcu_subsystem_ram_0+0x77ff2e00>
   13328:	5323c83a 	sub	r17,r10,r12
   1332c:	1a09c83a 	sub	r4,r3,r8
   13330:	5455803a 	cmpltu	r10,r10,r17
   13334:	2291c83a 	sub	r8,r4,r10
   13338:	5825883a 	mov	r18,r11
   1333c:	3821883a 	mov	r16,r7
   13340:	003e1a06 	br	12bac <__alt_mem_mcu_subsystem_ram_0+0x77ff2bac>
   13344:	1811883a 	mov	r8,r3
   13348:	5019883a 	mov	r12,r10
   1334c:	0401ffc4 	movi	r16,2047
   13350:	01800044 	movi	r6,1
   13354:	003ea506 	br	12dec <__alt_mem_mcu_subsystem_ram_0+0x77ff2dec>
   13358:	0025883a 	mov	r18,zero
   1335c:	480b883a 	mov	r5,r9
   13360:	00bfffc4 	movi	r2,-1
   13364:	003ece06 	br	12ea0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2ea0>
   13368:	28bff804 	addi	r2,r5,-32
   1336c:	29000820 	cmpeqi	r4,r5,32
   13370:	4084d83a 	srl	r2,r8,r2
   13374:	2000041e 	bne	r4,zero,13388 <__adddf3+0x878>
   13378:	01001004 	movi	r4,64
   1337c:	214bc83a 	sub	r5,r4,r5
   13380:	4148983a 	sll	r4,r8,r5
   13384:	6118b03a 	or	r12,r12,r4
   13388:	6022c03a 	cmpne	r17,r12,zero
   1338c:	88a2b03a 	or	r17,r17,r2
   13390:	003f8006 	br	13194 <__alt_mem_mcu_subsystem_ram_0+0x77ff3194>
   13394:	62a3883a 	add	r17,r12,r10
   13398:	40c9883a 	add	r4,r8,r3
   1339c:	8a95803a 	cmpltu	r10,r17,r10
   133a0:	2291883a 	add	r8,r4,r10
   133a4:	3821883a 	mov	r16,r7
   133a8:	003e5506 	br	12d00 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d00>
   133ac:	890ab03a 	or	r5,r17,r4
   133b0:	283fda26 	beq	r5,zero,1331c <__alt_mem_mcu_subsystem_ram_0+0x77ff331c>
   133b4:	888001cc 	andi	r2,r17,7
   133b8:	2011883a 	mov	r8,r4
   133bc:	003eaf06 	br	12e7c <__alt_mem_mcu_subsystem_ram_0+0x77ff2e7c>
   133c0:	0005883a 	mov	r2,zero
   133c4:	0401ffc4 	movi	r16,2047
   133c8:	0009883a 	mov	r4,zero
   133cc:	003e9006 	br	12e10 <__alt_mem_mcu_subsystem_ram_0+0x77ff2e10>

000133d0 <__divdf3>:
   133d0:	defff104 	addi	sp,sp,-60
   133d4:	dc400615 	stw	r17,24(sp)
   133d8:	2822d53a 	srli	r17,r5,20
   133dc:	dd000915 	stw	r20,36(sp)
   133e0:	2828d7fa 	srli	r20,r5,31
   133e4:	dc800715 	stw	r18,28(sp)
   133e8:	04800434 	movhi	r18,16
   133ec:	dd800b15 	stw	r22,44(sp)
   133f0:	94bfffc4 	addi	r18,r18,-1
   133f4:	dfc00e15 	stw	ra,56(sp)
   133f8:	df000d15 	stw	fp,52(sp)
   133fc:	ddc00c15 	stw	r23,48(sp)
   13400:	dd400a15 	stw	r21,40(sp)
   13404:	dcc00815 	stw	r19,32(sp)
   13408:	dc000515 	stw	r16,20(sp)
   1340c:	8c41ffcc 	andi	r17,r17,2047
   13410:	2ca4703a 	and	r18,r5,r18
   13414:	a5803fcc 	andi	r22,r20,255
   13418:	88007c26 	beq	r17,zero,1360c <__divdf3+0x23c>
   1341c:	8881ffe0 	cmpeqi	r2,r17,2047
   13420:	2027883a 	mov	r19,r4
   13424:	1000331e 	bne	r2,zero,134f4 <__divdf3+0x124>
   13428:	900a90fa 	slli	r5,r18,3
   1342c:	2020d77a 	srli	r16,r4,29
   13430:	202690fa 	slli	r19,r4,3
   13434:	29402034 	orhi	r5,r5,128
   13438:	8c7f0044 	addi	r17,r17,-1023
   1343c:	8160b03a 	or	r16,r16,r5
   13440:	002f883a 	mov	r23,zero
   13444:	0011883a 	mov	r8,zero
   13448:	3806d53a 	srli	r3,r7,20
   1344c:	3838d7fa 	srli	fp,r7,31
   13450:	01000434 	movhi	r4,16
   13454:	213fffc4 	addi	r4,r4,-1
   13458:	18c1ffcc 	andi	r3,r3,2047
   1345c:	300b883a 	mov	r5,r6
   13460:	3924703a 	and	r18,r7,r4
   13464:	e2403fcc 	andi	r9,fp,255
   13468:	18008826 	beq	r3,zero,1368c <__divdf3+0x2bc>
   1346c:	1881ffe0 	cmpeqi	r2,r3,2047
   13470:	10007f1e 	bne	r2,zero,13670 <__divdf3+0x2a0>
   13474:	900890fa 	slli	r4,r18,3
   13478:	302ad77a 	srli	r21,r6,29
   1347c:	300a90fa 	slli	r5,r6,3
   13480:	18ff0044 	addi	r3,r3,-1023
   13484:	21002034 	orhi	r4,r4,128
   13488:	88e3c83a 	sub	r17,r17,r3
   1348c:	a92ab03a 	or	r21,r21,r4
   13490:	0007883a 	mov	r3,zero
   13494:	b9000428 	cmpgeui	r4,r23,16
   13498:	a724f03a 	xor	r18,r20,fp
   1349c:	2000b71e 	bne	r4,zero,1377c <__divdf3+0x3ac>
   134a0:	b80890ba 	slli	r4,r23,2
   134a4:	00800074 	movhi	r2,1
   134a8:	2085883a 	add	r2,r4,r2
   134ac:	108d2d17 	ldw	r2,13492(r2)
   134b0:	1000683a 	jmp	r2
   134b4:	0001377c 	xorhi	zero,zero,1245
   134b8:	00013588 	cmpgei	zero,zero,1238
   134bc:	000135fc 	xorhi	zero,zero,1239
   134c0:	00013520 	cmpeqi	zero,zero,1236
   134c4:	000135fc 	xorhi	zero,zero,1239
   134c8:	00013738 	rdprs	zero,zero,1244
   134cc:	000135fc 	xorhi	zero,zero,1239
   134d0:	00013520 	cmpeqi	zero,zero,1236
   134d4:	00013588 	cmpgei	zero,zero,1238
   134d8:	00013588 	cmpgei	zero,zero,1238
   134dc:	00013738 	rdprs	zero,zero,1244
   134e0:	00013520 	cmpeqi	zero,zero,1236
   134e4:	00013510 	cmplti	zero,zero,1236
   134e8:	00013510 	cmplti	zero,zero,1236
   134ec:	00013510 	cmplti	zero,zero,1236
   134f0:	00013750 	cmplti	zero,zero,1245
   134f4:	24a0b03a 	or	r16,r4,r18
   134f8:	80007d1e 	bne	r16,zero,136f0 <__divdf3+0x320>
   134fc:	05c00204 	movi	r23,8
   13500:	0027883a 	mov	r19,zero
   13504:	0441ffc4 	movi	r17,2047
   13508:	02000084 	movi	r8,2
   1350c:	003fce06 	br	13448 <__alt_mem_mcu_subsystem_ram_0+0x77ff3448>
   13510:	802b883a 	mov	r21,r16
   13514:	980b883a 	mov	r5,r19
   13518:	b013883a 	mov	r9,r22
   1351c:	4007883a 	mov	r3,r8
   13520:	188000a0 	cmpeqi	r2,r3,2
   13524:	4825883a 	mov	r18,r9
   13528:	1000171e 	bne	r2,zero,13588 <__divdf3+0x1b8>
   1352c:	188000e0 	cmpeqi	r2,r3,3
   13530:	1001c11e 	bne	r2,zero,13c38 <__divdf3+0x868>
   13534:	18c00060 	cmpeqi	r3,r3,1
   13538:	1800301e 	bne	r3,zero,135fc <__divdf3+0x22c>
   1353c:	8980ffc4 	addi	r6,r17,1023
   13540:	01802a0e 	bge	zero,r6,135ec <__divdf3+0x21c>
   13544:	288001cc 	andi	r2,r5,7
   13548:	1001951e 	bne	r2,zero,13ba0 <__divdf3+0x7d0>
   1354c:	280ad0fa 	srli	r5,r5,3
   13550:	a880402c 	andhi	r2,r21,256
   13554:	10000426 	beq	r2,zero,13568 <__divdf3+0x198>
   13558:	00bfc034 	movhi	r2,65280
   1355c:	10bfffc4 	addi	r2,r2,-1
   13560:	a8aa703a 	and	r21,r21,r2
   13564:	89810004 	addi	r6,r17,1024
   13568:	3081ffc8 	cmpgei	r2,r6,2047
   1356c:	1000061e 	bne	r2,zero,13588 <__divdf3+0x1b8>
   13570:	a826977a 	slli	r19,r21,29
   13574:	a820927a 	slli	r16,r21,9
   13578:	3101ffcc 	andi	r4,r6,2047
   1357c:	9966b03a 	or	r19,r19,r5
   13580:	8020d33a 	srli	r16,r16,12
   13584:	00000306 	br	13594 <__divdf3+0x1c4>
   13588:	0101ffc4 	movi	r4,2047
   1358c:	0021883a 	mov	r16,zero
   13590:	0027883a 	mov	r19,zero
   13594:	2008953a 	slli	r4,r4,20
   13598:	90803fcc 	andi	r2,r18,255
   1359c:	00c00434 	movhi	r3,16
   135a0:	18ffffc4 	addi	r3,r3,-1
   135a4:	100497fa 	slli	r2,r2,31
   135a8:	80e0703a 	and	r16,r16,r3
   135ac:	8106b03a 	or	r3,r16,r4
   135b0:	1886b03a 	or	r3,r3,r2
   135b4:	9805883a 	mov	r2,r19
   135b8:	dfc00e17 	ldw	ra,56(sp)
   135bc:	df000d17 	ldw	fp,52(sp)
   135c0:	ddc00c17 	ldw	r23,48(sp)
   135c4:	dd800b17 	ldw	r22,44(sp)
   135c8:	dd400a17 	ldw	r21,40(sp)
   135cc:	dd000917 	ldw	r20,36(sp)
   135d0:	dcc00817 	ldw	r19,32(sp)
   135d4:	dc800717 	ldw	r18,28(sp)
   135d8:	dc400617 	ldw	r17,24(sp)
   135dc:	dc000517 	ldw	r16,20(sp)
   135e0:	dec00f04 	addi	sp,sp,60
   135e4:	f800283a 	ret
   135e8:	017fffc4 	movi	r5,-1
   135ec:	04000044 	movi	r16,1
   135f0:	81a1c83a 	sub	r16,r16,r6
   135f4:	80800e48 	cmpgei	r2,r16,57
   135f8:	10013826 	beq	r2,zero,13adc <__divdf3+0x70c>
   135fc:	0009883a 	mov	r4,zero
   13600:	0021883a 	mov	r16,zero
   13604:	0027883a 	mov	r19,zero
   13608:	003fe206 	br	13594 <__alt_mem_mcu_subsystem_ram_0+0x77ff3594>
   1360c:	24a0b03a 	or	r16,r4,r18
   13610:	202b883a 	mov	r21,r4
   13614:	80003b26 	beq	r16,zero,13704 <__divdf3+0x334>
   13618:	d9c00115 	stw	r7,4(sp)
   1361c:	d9800015 	stw	r6,0(sp)
   13620:	90012426 	beq	r18,zero,13ab4 <__divdf3+0x6e4>
   13624:	9009883a 	mov	r4,r18
   13628:	0014f540 	call	14f54 <__clzsi2>
   1362c:	d9800017 	ldw	r6,0(sp)
   13630:	d9c00117 	ldw	r7,4(sp)
   13634:	10fffd44 	addi	r3,r2,-11
   13638:	19000748 	cmpgei	r4,r3,29
   1363c:	2001191e 	bne	r4,zero,13aa4 <__divdf3+0x6d4>
   13640:	04000744 	movi	r16,29
   13644:	14fffe04 	addi	r19,r2,-8
   13648:	80e1c83a 	sub	r16,r16,r3
   1364c:	94ca983a 	sll	r5,r18,r19
   13650:	ac20d83a 	srl	r16,r21,r16
   13654:	ace6983a 	sll	r19,r21,r19
   13658:	8160b03a 	or	r16,r16,r5
   1365c:	047f0344 	movi	r17,-1011
   13660:	88a3c83a 	sub	r17,r17,r2
   13664:	002f883a 	mov	r23,zero
   13668:	0011883a 	mov	r8,zero
   1366c:	003f7606 	br	13448 <__alt_mem_mcu_subsystem_ram_0+0x77ff3448>
   13670:	91aab03a 	or	r21,r18,r6
   13674:	8c7e0044 	addi	r17,r17,-2047
   13678:	a800271e 	bne	r21,zero,13718 <__divdf3+0x348>
   1367c:	bdc00094 	ori	r23,r23,2
   13680:	000b883a 	mov	r5,zero
   13684:	00c00084 	movi	r3,2
   13688:	003f8206 	br	13494 <__alt_mem_mcu_subsystem_ram_0+0x77ff3494>
   1368c:	91aab03a 	or	r21,r18,r6
   13690:	a8002526 	beq	r21,zero,13728 <__divdf3+0x358>
   13694:	9000f926 	beq	r18,zero,13a7c <__divdf3+0x6ac>
   13698:	9009883a 	mov	r4,r18
   1369c:	d9800215 	stw	r6,8(sp)
   136a0:	da000115 	stw	r8,4(sp)
   136a4:	da400015 	stw	r9,0(sp)
   136a8:	0014f540 	call	14f54 <__clzsi2>
   136ac:	da400017 	ldw	r9,0(sp)
   136b0:	da000117 	ldw	r8,4(sp)
   136b4:	d9800217 	ldw	r6,8(sp)
   136b8:	10fffd44 	addi	r3,r2,-11
   136bc:	19000748 	cmpgei	r4,r3,29
   136c0:	2000ea1e 	bne	r4,zero,13a6c <__divdf3+0x69c>
   136c4:	05400744 	movi	r21,29
   136c8:	117ffe04 	addi	r5,r2,-8
   136cc:	a8ebc83a 	sub	r21,r21,r3
   136d0:	9148983a 	sll	r4,r18,r5
   136d4:	356ad83a 	srl	r21,r6,r21
   136d8:	314a983a 	sll	r5,r6,r5
   136dc:	a92ab03a 	or	r21,r21,r4
   136e0:	1463883a 	add	r17,r2,r17
   136e4:	8c40fcc4 	addi	r17,r17,1011
   136e8:	0007883a 	mov	r3,zero
   136ec:	003f6906 	br	13494 <__alt_mem_mcu_subsystem_ram_0+0x77ff3494>
   136f0:	9021883a 	mov	r16,r18
   136f4:	05c00304 	movi	r23,12
   136f8:	0441ffc4 	movi	r17,2047
   136fc:	020000c4 	movi	r8,3
   13700:	003f5106 	br	13448 <__alt_mem_mcu_subsystem_ram_0+0x77ff3448>
   13704:	05c00104 	movi	r23,4
   13708:	0027883a 	mov	r19,zero
   1370c:	0023883a 	mov	r17,zero
   13710:	02000044 	movi	r8,1
   13714:	003f4c06 	br	13448 <__alt_mem_mcu_subsystem_ram_0+0x77ff3448>
   13718:	bdc000d4 	ori	r23,r23,3
   1371c:	902b883a 	mov	r21,r18
   13720:	00c000c4 	movi	r3,3
   13724:	003f5b06 	br	13494 <__alt_mem_mcu_subsystem_ram_0+0x77ff3494>
   13728:	bdc00054 	ori	r23,r23,1
   1372c:	000b883a 	mov	r5,zero
   13730:	00c00044 	movi	r3,1
   13734:	003f5706 	br	13494 <__alt_mem_mcu_subsystem_ram_0+0x77ff3494>
   13738:	04000434 	movhi	r16,16
   1373c:	0025883a 	mov	r18,zero
   13740:	843fffc4 	addi	r16,r16,-1
   13744:	04ffffc4 	movi	r19,-1
   13748:	0101ffc4 	movi	r4,2047
   1374c:	003f9106 	br	13594 <__alt_mem_mcu_subsystem_ram_0+0x77ff3594>
   13750:	8080022c 	andhi	r2,r16,8
   13754:	1000a526 	beq	r2,zero,139ec <__divdf3+0x61c>
   13758:	a880022c 	andhi	r2,r21,8
   1375c:	1000a31e 	bne	r2,zero,139ec <__divdf3+0x61c>
   13760:	00800434 	movhi	r2,16
   13764:	ac000234 	orhi	r16,r21,8
   13768:	10bfffc4 	addi	r2,r2,-1
   1376c:	80a0703a 	and	r16,r16,r2
   13770:	e025883a 	mov	r18,fp
   13774:	2827883a 	mov	r19,r5
   13778:	003ff306 	br	13748 <__alt_mem_mcu_subsystem_ram_0+0x77ff3748>
   1377c:	ac00b536 	bltu	r21,r16,13a54 <__divdf3+0x684>
   13780:	8540b326 	beq	r16,r21,13a50 <__divdf3+0x680>
   13784:	8c7fffc4 	addi	r17,r17,-1
   13788:	8029883a 	mov	r20,r16
   1378c:	000d883a 	mov	r6,zero
   13790:	2804d63a 	srli	r2,r5,24
   13794:	a820923a 	slli	r16,r21,8
   13798:	a009883a 	mov	r4,r20
   1379c:	282e923a 	slli	r23,r5,8
   137a0:	1420b03a 	or	r16,r2,r16
   137a4:	802cd43a 	srli	r22,r16,16
   137a8:	d9800015 	stw	r6,0(sp)
   137ac:	873fffcc 	andi	fp,r16,65535
   137b0:	b00b883a 	mov	r5,r22
   137b4:	0012a540 	call	12a54 <__udivsi3>
   137b8:	a009883a 	mov	r4,r20
   137bc:	b00b883a 	mov	r5,r22
   137c0:	102b883a 	mov	r21,r2
   137c4:	0012ab80 	call	12ab8 <__umodsi3>
   137c8:	1006943a 	slli	r3,r2,16
   137cc:	9804d43a 	srli	r2,r19,16
   137d0:	e569383a 	mul	r20,fp,r21
   137d4:	d9800017 	ldw	r6,0(sp)
   137d8:	10c4b03a 	or	r2,r2,r3
   137dc:	1500042e 	bgeu	r2,r20,137f0 <__divdf3+0x420>
   137e0:	1405883a 	add	r2,r2,r16
   137e4:	a8ffffc4 	addi	r3,r21,-1
   137e8:	1400d92e 	bgeu	r2,r16,13b50 <__divdf3+0x780>
   137ec:	182b883a 	mov	r21,r3
   137f0:	1529c83a 	sub	r20,r2,r20
   137f4:	b00b883a 	mov	r5,r22
   137f8:	a009883a 	mov	r4,r20
   137fc:	d9800115 	stw	r6,4(sp)
   13800:	0012a540 	call	12a54 <__udivsi3>
   13804:	b00b883a 	mov	r5,r22
   13808:	a009883a 	mov	r4,r20
   1380c:	d8800015 	stw	r2,0(sp)
   13810:	0012ab80 	call	12ab8 <__umodsi3>
   13814:	d8c00017 	ldw	r3,0(sp)
   13818:	1004943a 	slli	r2,r2,16
   1381c:	9cffffcc 	andi	r19,r19,65535
   13820:	e0d1383a 	mul	r8,fp,r3
   13824:	98a6b03a 	or	r19,r19,r2
   13828:	d9800117 	ldw	r6,4(sp)
   1382c:	9a00042e 	bgeu	r19,r8,13840 <__divdf3+0x470>
   13830:	9c27883a 	add	r19,r19,r16
   13834:	18bfffc4 	addi	r2,r3,-1
   13838:	9c00c12e 	bgeu	r19,r16,13b40 <__divdf3+0x770>
   1383c:	1007883a 	mov	r3,r2
   13840:	a82a943a 	slli	r21,r21,16
   13844:	b828d43a 	srli	r20,r23,16
   13848:	b9ffffcc 	andi	r7,r23,65535
   1384c:	a8eab03a 	or	r21,r21,r3
   13850:	a804d43a 	srli	r2,r21,16
   13854:	a93fffcc 	andi	r4,r21,65535
   13858:	21cb383a 	mul	r5,r4,r7
   1385c:	11d3383a 	mul	r9,r2,r7
   13860:	a109383a 	mul	r4,r20,r4
   13864:	2806d43a 	srli	r3,r5,16
   13868:	9a27c83a 	sub	r19,r19,r8
   1386c:	2249883a 	add	r4,r4,r9
   13870:	1907883a 	add	r3,r3,r4
   13874:	1509383a 	mul	r4,r2,r20
   13878:	1a40022e 	bgeu	r3,r9,13884 <__divdf3+0x4b4>
   1387c:	00800074 	movhi	r2,1
   13880:	2089883a 	add	r4,r4,r2
   13884:	1804d43a 	srli	r2,r3,16
   13888:	1806943a 	slli	r3,r3,16
   1388c:	297fffcc 	andi	r5,r5,65535
   13890:	1105883a 	add	r2,r2,r4
   13894:	1947883a 	add	r3,r3,r5
   13898:	98806236 	bltu	r19,r2,13a24 <__divdf3+0x654>
   1389c:	9880b026 	beq	r19,r2,13b60 <__divdf3+0x790>
   138a0:	9885c83a 	sub	r2,r19,r2
   138a4:	30c7c83a 	sub	r3,r6,r3
   138a8:	30e7803a 	cmpltu	r19,r6,r3
   138ac:	d9c00115 	stw	r7,4(sp)
   138b0:	d8c00015 	stw	r3,0(sp)
   138b4:	14e7c83a 	sub	r19,r2,r19
   138b8:	8980ffc4 	addi	r6,r17,1023
   138bc:	84c0af26 	beq	r16,r19,13b7c <__divdf3+0x7ac>
   138c0:	9809883a 	mov	r4,r19
   138c4:	b00b883a 	mov	r5,r22
   138c8:	d9800315 	stw	r6,12(sp)
   138cc:	0012a540 	call	12a54 <__udivsi3>
   138d0:	9809883a 	mov	r4,r19
   138d4:	b00b883a 	mov	r5,r22
   138d8:	d8800215 	stw	r2,8(sp)
   138dc:	0012ab80 	call	12ab8 <__umodsi3>
   138e0:	d8c00017 	ldw	r3,0(sp)
   138e4:	da000217 	ldw	r8,8(sp)
   138e8:	1008943a 	slli	r4,r2,16
   138ec:	1804d43a 	srli	r2,r3,16
   138f0:	e227383a 	mul	r19,fp,r8
   138f4:	d9800317 	ldw	r6,12(sp)
   138f8:	1104b03a 	or	r2,r2,r4
   138fc:	d9c00117 	ldw	r7,4(sp)
   13900:	14c0062e 	bgeu	r2,r19,1391c <__divdf3+0x54c>
   13904:	1405883a 	add	r2,r2,r16
   13908:	413fffc4 	addi	r4,r8,-1
   1390c:	1400a236 	bltu	r2,r16,13b98 <__divdf3+0x7c8>
   13910:	14c0a12e 	bgeu	r2,r19,13b98 <__divdf3+0x7c8>
   13914:	423fff84 	addi	r8,r8,-2
   13918:	1405883a 	add	r2,r2,r16
   1391c:	14e7c83a 	sub	r19,r2,r19
   13920:	b00b883a 	mov	r5,r22
   13924:	9809883a 	mov	r4,r19
   13928:	d9800415 	stw	r6,16(sp)
   1392c:	d8c00315 	stw	r3,12(sp)
   13930:	d9c00215 	stw	r7,8(sp)
   13934:	da000115 	stw	r8,4(sp)
   13938:	0012a540 	call	12a54 <__udivsi3>
   1393c:	b00b883a 	mov	r5,r22
   13940:	9809883a 	mov	r4,r19
   13944:	d8800015 	stw	r2,0(sp)
   13948:	0012ab80 	call	12ab8 <__umodsi3>
   1394c:	da400017 	ldw	r9,0(sp)
   13950:	d8c00317 	ldw	r3,12(sp)
   13954:	1004943a 	slli	r2,r2,16
   13958:	e279383a 	mul	fp,fp,r9
   1395c:	18ffffcc 	andi	r3,r3,65535
   13960:	1886b03a 	or	r3,r3,r2
   13964:	da000117 	ldw	r8,4(sp)
   13968:	d9c00217 	ldw	r7,8(sp)
   1396c:	d9800417 	ldw	r6,16(sp)
   13970:	1f00062e 	bgeu	r3,fp,1398c <__divdf3+0x5bc>
   13974:	1c07883a 	add	r3,r3,r16
   13978:	48bfffc4 	addi	r2,r9,-1
   1397c:	1c008436 	bltu	r3,r16,13b90 <__divdf3+0x7c0>
   13980:	1f00832e 	bgeu	r3,fp,13b90 <__divdf3+0x7c0>
   13984:	4a7fff84 	addi	r9,r9,-2
   13988:	1c07883a 	add	r3,r3,r16
   1398c:	400a943a 	slli	r5,r8,16
   13990:	1f07c83a 	sub	r3,r3,fp
   13994:	2a4ab03a 	or	r5,r5,r9
   13998:	2812d43a 	srli	r9,r5,16
   1399c:	293fffcc 	andi	r4,r5,65535
   139a0:	3911383a 	mul	r8,r7,r4
   139a4:	a109383a 	mul	r4,r20,r4
   139a8:	49cf383a 	mul	r7,r9,r7
   139ac:	4004d43a 	srli	r2,r8,16
   139b0:	a269383a 	mul	r20,r20,r9
   139b4:	21c9883a 	add	r4,r4,r7
   139b8:	1105883a 	add	r2,r2,r4
   139bc:	11c0022e 	bgeu	r2,r7,139c8 <__divdf3+0x5f8>
   139c0:	01000074 	movhi	r4,1
   139c4:	a129883a 	add	r20,r20,r4
   139c8:	1008d43a 	srli	r4,r2,16
   139cc:	1004943a 	slli	r2,r2,16
   139d0:	423fffcc 	andi	r8,r8,65535
   139d4:	2529883a 	add	r20,r4,r20
   139d8:	1205883a 	add	r2,r2,r8
   139dc:	1d000a36 	bltu	r3,r20,13a08 <__divdf3+0x638>
   139e0:	1d000826 	beq	r3,r20,13a04 <__divdf3+0x634>
   139e4:	29400054 	ori	r5,r5,1
   139e8:	003ed506 	br	13540 <__alt_mem_mcu_subsystem_ram_0+0x77ff3540>
   139ec:	00800434 	movhi	r2,16
   139f0:	84000234 	orhi	r16,r16,8
   139f4:	10bfffc4 	addi	r2,r2,-1
   139f8:	80a0703a 	and	r16,r16,r2
   139fc:	a025883a 	mov	r18,r20
   13a00:	003f5106 	br	13748 <__alt_mem_mcu_subsystem_ram_0+0x77ff3748>
   13a04:	103ece26 	beq	r2,zero,13540 <__alt_mem_mcu_subsystem_ram_0+0x77ff3540>
   13a08:	80c7883a 	add	r3,r16,r3
   13a0c:	293fffc4 	addi	r4,r5,-1
   13a10:	1c005636 	bltu	r3,r16,13b6c <__divdf3+0x79c>
   13a14:	1d006f36 	bltu	r3,r20,13bd4 <__divdf3+0x804>
   13a18:	1d009c26 	beq	r3,r20,13c8c <__divdf3+0x8bc>
   13a1c:	200b883a 	mov	r5,r4
   13a20:	003ff006 	br	139e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff39e4>
   13a24:	35cd883a 	add	r6,r6,r23
   13a28:	35c9803a 	cmpltu	r4,r6,r23
   13a2c:	2409883a 	add	r4,r4,r16
   13a30:	24e7883a 	add	r19,r4,r19
   13a34:	a93fffc4 	addi	r4,r21,-1
   13a38:	84c0232e 	bgeu	r16,r19,13ac8 <__divdf3+0x6f8>
   13a3c:	98805f36 	bltu	r19,r2,13bbc <__divdf3+0x7ec>
   13a40:	14c08f26 	beq	r2,r19,13c80 <__divdf3+0x8b0>
   13a44:	9885c83a 	sub	r2,r19,r2
   13a48:	202b883a 	mov	r21,r4
   13a4c:	003f9506 	br	138a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff38a4>
   13a50:	997f4c36 	bltu	r19,r5,13784 <__alt_mem_mcu_subsystem_ram_0+0x77ff3784>
   13a54:	800697fa 	slli	r3,r16,31
   13a58:	9804d07a 	srli	r2,r19,1
   13a5c:	980c97fa 	slli	r6,r19,31
   13a60:	8028d07a 	srli	r20,r16,1
   13a64:	18a6b03a 	or	r19,r3,r2
   13a68:	003f4906 	br	13790 <__alt_mem_mcu_subsystem_ram_0+0x77ff3790>
   13a6c:	157ff604 	addi	r21,r2,-40
   13a70:	356a983a 	sll	r21,r6,r21
   13a74:	000b883a 	mov	r5,zero
   13a78:	003f1906 	br	136e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff36e0>
   13a7c:	3009883a 	mov	r4,r6
   13a80:	da000215 	stw	r8,8(sp)
   13a84:	da400115 	stw	r9,4(sp)
   13a88:	d9800015 	stw	r6,0(sp)
   13a8c:	0014f540 	call	14f54 <__clzsi2>
   13a90:	10800804 	addi	r2,r2,32
   13a94:	da000217 	ldw	r8,8(sp)
   13a98:	da400117 	ldw	r9,4(sp)
   13a9c:	d9800017 	ldw	r6,0(sp)
   13aa0:	003f0506 	br	136b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff36b8>
   13aa4:	143ff604 	addi	r16,r2,-40
   13aa8:	ac20983a 	sll	r16,r21,r16
   13aac:	0027883a 	mov	r19,zero
   13ab0:	003eea06 	br	1365c <__alt_mem_mcu_subsystem_ram_0+0x77ff365c>
   13ab4:	0014f540 	call	14f54 <__clzsi2>
   13ab8:	10800804 	addi	r2,r2,32
   13abc:	d9c00117 	ldw	r7,4(sp)
   13ac0:	d9800017 	ldw	r6,0(sp)
   13ac4:	003edb06 	br	13634 <__alt_mem_mcu_subsystem_ram_0+0x77ff3634>
   13ac8:	84ffde1e 	bne	r16,r19,13a44 <__alt_mem_mcu_subsystem_ram_0+0x77ff3a44>
   13acc:	35ffdb2e 	bgeu	r6,r23,13a3c <__alt_mem_mcu_subsystem_ram_0+0x77ff3a3c>
   13ad0:	8085c83a 	sub	r2,r16,r2
   13ad4:	202b883a 	mov	r21,r4
   13ad8:	003f7206 	br	138a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff38a4>
   13adc:	80800808 	cmpgei	r2,r16,32
   13ae0:	1000441e 	bne	r2,zero,13bf4 <__divdf3+0x824>
   13ae4:	8c410784 	addi	r17,r17,1054
   13ae8:	2c06d83a 	srl	r3,r5,r16
   13aec:	ac44983a 	sll	r2,r21,r17
   13af0:	2c4a983a 	sll	r5,r5,r17
   13af4:	ac2ad83a 	srl	r21,r21,r16
   13af8:	10c4b03a 	or	r2,r2,r3
   13afc:	280ac03a 	cmpne	r5,r5,zero
   13b00:	1144b03a 	or	r2,r2,r5
   13b04:	10c001cc 	andi	r3,r2,7
   13b08:	18000726 	beq	r3,zero,13b28 <__divdf3+0x758>
   13b0c:	10c003cc 	andi	r3,r2,15
   13b10:	18c00120 	cmpeqi	r3,r3,4
   13b14:	1800041e 	bne	r3,zero,13b28 <__divdf3+0x758>
   13b18:	100b883a 	mov	r5,r2
   13b1c:	28800104 	addi	r2,r5,4
   13b20:	114b803a 	cmpltu	r5,r2,r5
   13b24:	a96b883a 	add	r21,r21,r5
   13b28:	a8c0202c 	andhi	r3,r21,128
   13b2c:	18004f26 	beq	r3,zero,13c6c <__divdf3+0x89c>
   13b30:	01000044 	movi	r4,1
   13b34:	0021883a 	mov	r16,zero
   13b38:	0027883a 	mov	r19,zero
   13b3c:	003e9506 	br	13594 <__alt_mem_mcu_subsystem_ram_0+0x77ff3594>
   13b40:	9a3f3e2e 	bgeu	r19,r8,1383c <__alt_mem_mcu_subsystem_ram_0+0x77ff383c>
   13b44:	18ffff84 	addi	r3,r3,-2
   13b48:	9c27883a 	add	r19,r19,r16
   13b4c:	003f3c06 	br	13840 <__alt_mem_mcu_subsystem_ram_0+0x77ff3840>
   13b50:	153f262e 	bgeu	r2,r20,137ec <__alt_mem_mcu_subsystem_ram_0+0x77ff37ec>
   13b54:	ad7fff84 	addi	r21,r21,-2
   13b58:	1405883a 	add	r2,r2,r16
   13b5c:	003f2406 	br	137f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff37f0>
   13b60:	30ffb036 	bltu	r6,r3,13a24 <__alt_mem_mcu_subsystem_ram_0+0x77ff3a24>
   13b64:	0005883a 	mov	r2,zero
   13b68:	003f4e06 	br	138a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff38a4>
   13b6c:	200b883a 	mov	r5,r4
   13b70:	1d3f9c1e 	bne	r3,r20,139e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff39e4>
   13b74:	15ff9b1e 	bne	r2,r23,139e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff39e4>
   13b78:	003e7106 	br	13540 <__alt_mem_mcu_subsystem_ram_0+0x77ff3540>
   13b7c:	01be9a0e 	bge	zero,r6,135e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff35e8>
   13b80:	000b883a 	mov	r5,zero
   13b84:	00800044 	movi	r2,1
   13b88:	a8ab883a 	add	r21,r21,r2
   13b8c:	003e7006 	br	13550 <__alt_mem_mcu_subsystem_ram_0+0x77ff3550>
   13b90:	1013883a 	mov	r9,r2
   13b94:	003f7d06 	br	1398c <__alt_mem_mcu_subsystem_ram_0+0x77ff398c>
   13b98:	2011883a 	mov	r8,r4
   13b9c:	003f5f06 	br	1391c <__alt_mem_mcu_subsystem_ram_0+0x77ff391c>
   13ba0:	288003cc 	andi	r2,r5,15
   13ba4:	10800118 	cmpnei	r2,r2,4
   13ba8:	103e6826 	beq	r2,zero,1354c <__alt_mem_mcu_subsystem_ram_0+0x77ff354c>
   13bac:	2cc00104 	addi	r19,r5,4
   13bb0:	9945803a 	cmpltu	r2,r19,r5
   13bb4:	980ad0fa 	srli	r5,r19,3
   13bb8:	003ff306 	br	13b88 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b88>
   13bbc:	35cd883a 	add	r6,r6,r23
   13bc0:	35c9803a 	cmpltu	r4,r6,r23
   13bc4:	2409883a 	add	r4,r4,r16
   13bc8:	24e7883a 	add	r19,r4,r19
   13bcc:	ad7fff84 	addi	r21,r21,-2
   13bd0:	003f3306 	br	138a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff38a0>
   13bd4:	bdc9883a 	add	r4,r23,r23
   13bd8:	25ef803a 	cmpltu	r23,r4,r23
   13bdc:	bc21883a 	add	r16,r23,r16
   13be0:	1c07883a 	add	r3,r3,r16
   13be4:	297fff84 	addi	r5,r5,-2
   13be8:	202f883a 	mov	r23,r4
   13bec:	1d3fe126 	beq	r3,r20,13b74 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b74>
   13bf0:	003f7c06 	br	139e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff39e4>
   13bf4:	013ff844 	movi	r4,-31
   13bf8:	2189c83a 	sub	r4,r4,r6
   13bfc:	84000820 	cmpeqi	r16,r16,32
   13c00:	a908d83a 	srl	r4,r21,r4
   13c04:	8000031e 	bne	r16,zero,13c14 <__divdf3+0x844>
   13c08:	8c010f84 	addi	r16,r17,1086
   13c0c:	ac20983a 	sll	r16,r21,r16
   13c10:	2c0ab03a 	or	r5,r5,r16
   13c14:	280ac03a 	cmpne	r5,r5,zero
   13c18:	290ab03a 	or	r5,r5,r4
   13c1c:	2d4001cc 	andi	r21,r5,7
   13c20:	a8000b1e 	bne	r21,zero,13c50 <__divdf3+0x880>
   13c24:	0021883a 	mov	r16,zero
   13c28:	280ad0fa 	srli	r5,r5,3
   13c2c:	0009883a 	mov	r4,zero
   13c30:	2d66b03a 	or	r19,r5,r21
   13c34:	003e5706 	br	13594 <__alt_mem_mcu_subsystem_ram_0+0x77ff3594>
   13c38:	00800434 	movhi	r2,16
   13c3c:	ac000234 	orhi	r16,r21,8
   13c40:	10bfffc4 	addi	r2,r2,-1
   13c44:	80a0703a 	and	r16,r16,r2
   13c48:	2827883a 	mov	r19,r5
   13c4c:	003ebe06 	br	13748 <__alt_mem_mcu_subsystem_ram_0+0x77ff3748>
   13c50:	288003cc 	andi	r2,r5,15
   13c54:	10800118 	cmpnei	r2,r2,4
   13c58:	10000226 	beq	r2,zero,13c64 <__divdf3+0x894>
   13c5c:	002b883a 	mov	r21,zero
   13c60:	003fae06 	br	13b1c <__alt_mem_mcu_subsystem_ram_0+0x77ff3b1c>
   13c64:	2805883a 	mov	r2,r5
   13c68:	002b883a 	mov	r21,zero
   13c6c:	a820927a 	slli	r16,r21,9
   13c70:	100b883a 	mov	r5,r2
   13c74:	a82a977a 	slli	r21,r21,29
   13c78:	8020d33a 	srli	r16,r16,12
   13c7c:	003fea06 	br	13c28 <__alt_mem_mcu_subsystem_ram_0+0x77ff3c28>
   13c80:	30ffce36 	bltu	r6,r3,13bbc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bbc>
   13c84:	202b883a 	mov	r21,r4
   13c88:	003fb606 	br	13b64 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b64>
   13c8c:	b8bfd136 	bltu	r23,r2,13bd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3bd4>
   13c90:	200b883a 	mov	r5,r4
   13c94:	15ff531e 	bne	r2,r23,139e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff39e4>
   13c98:	003e2906 	br	13540 <__alt_mem_mcu_subsystem_ram_0+0x77ff3540>

00013c9c <__gedf2>:
   13c9c:	2810d53a 	srli	r8,r5,20
   13ca0:	3806d53a 	srli	r3,r7,20
   13ca4:	00800434 	movhi	r2,16
   13ca8:	4201ffcc 	andi	r8,r8,2047
   13cac:	10bfffc4 	addi	r2,r2,-1
   13cb0:	4241ffd8 	cmpnei	r9,r8,2047
   13cb4:	2894703a 	and	r10,r5,r2
   13cb8:	18c1ffcc 	andi	r3,r3,2047
   13cbc:	3884703a 	and	r2,r7,r2
   13cc0:	280ad7fa 	srli	r5,r5,31
   13cc4:	380ed7fa 	srli	r7,r7,31
   13cc8:	48000e26 	beq	r9,zero,13d04 <__gedf2+0x68>
   13ccc:	1a41ffd8 	cmpnei	r9,r3,2047
   13cd0:	48000826 	beq	r9,zero,13cf4 <__gedf2+0x58>
   13cd4:	40000f1e 	bne	r8,zero,13d14 <__gedf2+0x78>
   13cd8:	5112b03a 	or	r9,r10,r4
   13cdc:	1800131e 	bne	r3,zero,13d2c <__gedf2+0x90>
   13ce0:	1196b03a 	or	r11,r2,r6
   13ce4:	5800111e 	bne	r11,zero,13d2c <__gedf2+0x90>
   13ce8:	48000d1e 	bne	r9,zero,13d20 <__gedf2+0x84>
   13cec:	0005883a 	mov	r2,zero
   13cf0:	f800283a 	ret
   13cf4:	1192b03a 	or	r9,r2,r6
   13cf8:	483ff626 	beq	r9,zero,13cd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3cd4>
   13cfc:	00bfff84 	movi	r2,-2
   13d00:	f800283a 	ret
   13d04:	5112b03a 	or	r9,r10,r4
   13d08:	483ffc1e 	bne	r9,zero,13cfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3cfc>
   13d0c:	1a41ffd8 	cmpnei	r9,r3,2047
   13d10:	48001226 	beq	r9,zero,13d5c <__gedf2+0xc0>
   13d14:	1800131e 	bne	r3,zero,13d64 <__gedf2+0xc8>
   13d18:	1192b03a 	or	r9,r2,r6
   13d1c:	4800111e 	bne	r9,zero,13d64 <__gedf2+0xc8>
   13d20:	00800044 	movi	r2,1
   13d24:	2800081e 	bne	r5,zero,13d48 <__gedf2+0xac>
   13d28:	f800283a 	ret
   13d2c:	48000826 	beq	r9,zero,13d50 <__gedf2+0xb4>
   13d30:	29fffb1e 	bne	r5,r7,13d20 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d20>
   13d34:	40c00316 	blt	r8,r3,13d44 <__gedf2+0xa8>
   13d38:	12bff936 	bltu	r2,r10,13d20 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d20>
   13d3c:	50800c26 	beq	r10,r2,13d70 <__gedf2+0xd4>
   13d40:	50bfea2e 	bgeu	r10,r2,13cec <__alt_mem_mcu_subsystem_ram_0+0x77ff3cec>
   13d44:	2800031e 	bne	r5,zero,13d54 <__gedf2+0xb8>
   13d48:	00bfffc4 	movi	r2,-1
   13d4c:	f800283a 	ret
   13d50:	383ffd26 	beq	r7,zero,13d48 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d48>
   13d54:	00800044 	movi	r2,1
   13d58:	f800283a 	ret
   13d5c:	1192b03a 	or	r9,r2,r6
   13d60:	483fe61e 	bne	r9,zero,13cfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3cfc>
   13d64:	29ffee1e 	bne	r5,r7,13d20 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d20>
   13d68:	1a3fed16 	blt	r3,r8,13d20 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d20>
   13d6c:	003ff106 	br	13d34 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d34>
   13d70:	313feb36 	bltu	r6,r4,13d20 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d20>
   13d74:	21bff336 	bltu	r4,r6,13d44 <__alt_mem_mcu_subsystem_ram_0+0x77ff3d44>
   13d78:	003fdc06 	br	13cec <__alt_mem_mcu_subsystem_ram_0+0x77ff3cec>

00013d7c <__muldf3>:
   13d7c:	defff404 	addi	sp,sp,-48
   13d80:	dc400315 	stw	r17,12(sp)
   13d84:	2822d53a 	srli	r17,r5,20
   13d88:	dd000615 	stw	r20,24(sp)
   13d8c:	2828d7fa 	srli	r20,r5,31
   13d90:	dc800415 	stw	r18,16(sp)
   13d94:	04800434 	movhi	r18,16
   13d98:	dd400715 	stw	r21,28(sp)
   13d9c:	94bfffc4 	addi	r18,r18,-1
   13da0:	dfc00b15 	stw	ra,44(sp)
   13da4:	df000a15 	stw	fp,40(sp)
   13da8:	ddc00915 	stw	r23,36(sp)
   13dac:	dd800815 	stw	r22,32(sp)
   13db0:	dcc00515 	stw	r19,20(sp)
   13db4:	dc000215 	stw	r16,8(sp)
   13db8:	8c41ffcc 	andi	r17,r17,2047
   13dbc:	2ca4703a 	and	r18,r5,r18
   13dc0:	a5403fcc 	andi	r21,r20,255
   13dc4:	88006226 	beq	r17,zero,13f50 <__muldf3+0x1d4>
   13dc8:	8881ffe0 	cmpeqi	r2,r17,2047
   13dcc:	2027883a 	mov	r19,r4
   13dd0:	1000361e 	bne	r2,zero,13eac <__muldf3+0x130>
   13dd4:	900a90fa 	slli	r5,r18,3
   13dd8:	2020d77a 	srli	r16,r4,29
   13ddc:	202690fa 	slli	r19,r4,3
   13de0:	29402034 	orhi	r5,r5,128
   13de4:	8c7f0044 	addi	r17,r17,-1023
   13de8:	8160b03a 	or	r16,r16,r5
   13dec:	0025883a 	mov	r18,zero
   13df0:	002f883a 	mov	r23,zero
   13df4:	3804d53a 	srli	r2,r7,20
   13df8:	382cd7fa 	srli	r22,r7,31
   13dfc:	01000434 	movhi	r4,16
   13e00:	213fffc4 	addi	r4,r4,-1
   13e04:	1081ffcc 	andi	r2,r2,2047
   13e08:	3011883a 	mov	r8,r6
   13e0c:	390e703a 	and	r7,r7,r4
   13e10:	b7003fcc 	andi	fp,r22,255
   13e14:	10006e26 	beq	r2,zero,13fd0 <__muldf3+0x254>
   13e18:	10c1ffe0 	cmpeqi	r3,r2,2047
   13e1c:	1800651e 	bne	r3,zero,13fb4 <__muldf3+0x238>
   13e20:	380890fa 	slli	r4,r7,3
   13e24:	3006d77a 	srli	r3,r6,29
   13e28:	301090fa 	slli	r8,r6,3
   13e2c:	10bf0044 	addi	r2,r2,-1023
   13e30:	21002034 	orhi	r4,r4,128
   13e34:	1908b03a 	or	r4,r3,r4
   13e38:	88a3883a 	add	r17,r17,r2
   13e3c:	0015883a 	mov	r10,zero
   13e40:	a584f03a 	xor	r2,r20,r22
   13e44:	91800428 	cmpgeui	r6,r18,16
   13e48:	100f883a 	mov	r7,r2
   13e4c:	8a400044 	addi	r9,r17,1
   13e50:	10803fcc 	andi	r2,r2,255
   13e54:	3000791e 	bne	r6,zero,1403c <__muldf3+0x2c0>
   13e58:	900a90ba 	slli	r5,r18,2
   13e5c:	00c00074 	movhi	r3,1
   13e60:	28c7883a 	add	r3,r5,r3
   13e64:	18cf9b17 	ldw	r3,15980(r3)
   13e68:	1800683a 	jmp	r3
   13e6c:	0001403c 	xorhi	zero,zero,1280
   13e70:	00013ed4 	movui	zero,1275
   13e74:	00013ed4 	movui	zero,1275
   13e78:	000142b0 	cmpltui	zero,zero,1290
   13e7c:	00013ec8 	cmpgei	zero,zero,1275
   13e80:	00013ec8 	cmpgei	zero,zero,1275
   13e84:	00014284 	movi	zero,1290
   13e88:	000142b0 	cmpltui	zero,zero,1290
   13e8c:	00013ec8 	cmpgei	zero,zero,1275
   13e90:	00014284 	movi	zero,1290
   13e94:	00013ec8 	cmpgei	zero,zero,1275
   13e98:	000142b0 	cmpltui	zero,zero,1290
   13e9c:	0001429c 	xori	zero,zero,1290
   13ea0:	0001429c 	xori	zero,zero,1290
   13ea4:	0001429c 	xori	zero,zero,1290
   13ea8:	000142b8 	rdprs	zero,zero,1290
   13eac:	9120b03a 	or	r16,r18,r4
   13eb0:	8000e71e 	bne	r16,zero,14250 <__muldf3+0x4d4>
   13eb4:	04800204 	movi	r18,8
   13eb8:	0027883a 	mov	r19,zero
   13ebc:	0441ffc4 	movi	r17,2047
   13ec0:	05c00084 	movi	r23,2
   13ec4:	003fcb06 	br	13df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df4>
   13ec8:	8009883a 	mov	r4,r16
   13ecc:	9811883a 	mov	r8,r19
   13ed0:	b815883a 	mov	r10,r23
   13ed4:	50c000a0 	cmpeqi	r3,r10,2
   13ed8:	100f883a 	mov	r7,r2
   13edc:	1800531e 	bne	r3,zero,1402c <__muldf3+0x2b0>
   13ee0:	508000e0 	cmpeqi	r2,r10,3
   13ee4:	1001561e 	bne	r2,zero,14440 <__muldf3+0x6c4>
   13ee8:	50800060 	cmpeqi	r2,r10,1
   13eec:	1000b926 	beq	r2,zero,141d4 <__muldf3+0x458>
   13ef0:	0007883a 	mov	r3,zero
   13ef4:	0021883a 	mov	r16,zero
   13ef8:	0027883a 	mov	r19,zero
   13efc:	38803fcc 	andi	r2,r7,255
   13f00:	01000434 	movhi	r4,16
   13f04:	1806953a 	slli	r3,r3,20
   13f08:	213fffc4 	addi	r4,r4,-1
   13f0c:	100497fa 	slli	r2,r2,31
   13f10:	8120703a 	and	r16,r16,r4
   13f14:	80c6b03a 	or	r3,r16,r3
   13f18:	1886b03a 	or	r3,r3,r2
   13f1c:	9805883a 	mov	r2,r19
   13f20:	dfc00b17 	ldw	ra,44(sp)
   13f24:	df000a17 	ldw	fp,40(sp)
   13f28:	ddc00917 	ldw	r23,36(sp)
   13f2c:	dd800817 	ldw	r22,32(sp)
   13f30:	dd400717 	ldw	r21,28(sp)
   13f34:	dd000617 	ldw	r20,24(sp)
   13f38:	dcc00517 	ldw	r19,20(sp)
   13f3c:	dc800417 	ldw	r18,16(sp)
   13f40:	dc400317 	ldw	r17,12(sp)
   13f44:	dc000217 	ldw	r16,8(sp)
   13f48:	dec00c04 	addi	sp,sp,48
   13f4c:	f800283a 	ret
   13f50:	9120b03a 	or	r16,r18,r4
   13f54:	202d883a 	mov	r22,r4
   13f58:	8000b826 	beq	r16,zero,1423c <__muldf3+0x4c0>
   13f5c:	d9c00115 	stw	r7,4(sp)
   13f60:	d9800015 	stw	r6,0(sp)
   13f64:	90010626 	beq	r18,zero,14380 <__muldf3+0x604>
   13f68:	9009883a 	mov	r4,r18
   13f6c:	0014f540 	call	14f54 <__clzsi2>
   13f70:	d9800017 	ldw	r6,0(sp)
   13f74:	d9c00117 	ldw	r7,4(sp)
   13f78:	10fffd44 	addi	r3,r2,-11
   13f7c:	19000748 	cmpgei	r4,r3,29
   13f80:	2000fb1e 	bne	r4,zero,14370 <__muldf3+0x5f4>
   13f84:	04000744 	movi	r16,29
   13f88:	14fffe04 	addi	r19,r2,-8
   13f8c:	80e1c83a 	sub	r16,r16,r3
   13f90:	94ca983a 	sll	r5,r18,r19
   13f94:	b420d83a 	srl	r16,r22,r16
   13f98:	b4e6983a 	sll	r19,r22,r19
   13f9c:	8160b03a 	or	r16,r16,r5
   13fa0:	047f0344 	movi	r17,-1011
   13fa4:	88a3c83a 	sub	r17,r17,r2
   13fa8:	0025883a 	mov	r18,zero
   13fac:	002f883a 	mov	r23,zero
   13fb0:	003f9006 	br	13df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df4>
   13fb4:	31c8b03a 	or	r4,r6,r7
   13fb8:	8c41ffc4 	addi	r17,r17,2047
   13fbc:	2000ad1e 	bne	r4,zero,14274 <__muldf3+0x4f8>
   13fc0:	94800094 	ori	r18,r18,2
   13fc4:	0011883a 	mov	r8,zero
   13fc8:	02800084 	movi	r10,2
   13fcc:	003f9c06 	br	13e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e40>
   13fd0:	31c8b03a 	or	r4,r6,r7
   13fd4:	2000a326 	beq	r4,zero,14264 <__muldf3+0x4e8>
   13fd8:	3800f226 	beq	r7,zero,143a4 <__muldf3+0x628>
   13fdc:	3809883a 	mov	r4,r7
   13fe0:	d9800115 	stw	r6,4(sp)
   13fe4:	d9c00015 	stw	r7,0(sp)
   13fe8:	0014f540 	call	14f54 <__clzsi2>
   13fec:	d9c00017 	ldw	r7,0(sp)
   13ff0:	d9800117 	ldw	r6,4(sp)
   13ff4:	113ffd44 	addi	r4,r2,-11
   13ff8:	20c00748 	cmpgei	r3,r4,29
   13ffc:	1800e51e 	bne	r3,zero,14394 <__muldf3+0x618>
   14000:	00c00744 	movi	r3,29
   14004:	123ffe04 	addi	r8,r2,-8
   14008:	1907c83a 	sub	r3,r3,r4
   1400c:	30c6d83a 	srl	r3,r6,r3
   14010:	3a08983a 	sll	r4,r7,r8
   14014:	3210983a 	sll	r8,r6,r8
   14018:	1908b03a 	or	r4,r3,r4
   1401c:	88a3c83a 	sub	r17,r17,r2
   14020:	8c7f0344 	addi	r17,r17,-1011
   14024:	0015883a 	mov	r10,zero
   14028:	003f8506 	br	13e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e40>
   1402c:	00c1ffc4 	movi	r3,2047
   14030:	0021883a 	mov	r16,zero
   14034:	0027883a 	mov	r19,zero
   14038:	003fb006 	br	13efc <__alt_mem_mcu_subsystem_ram_0+0x77ff3efc>
   1403c:	9806d43a 	srli	r3,r19,16
   14040:	4014d43a 	srli	r10,r8,16
   14044:	9cffffcc 	andi	r19,r19,65535
   14048:	423fffcc 	andi	r8,r8,65535
   1404c:	44cb383a 	mul	r5,r8,r19
   14050:	1a0d383a 	mul	r6,r3,r8
   14054:	54c5383a 	mul	r2,r10,r19
   14058:	2818d43a 	srli	r12,r5,16
   1405c:	1a9d383a 	mul	r14,r3,r10
   14060:	1185883a 	add	r2,r2,r6
   14064:	6099883a 	add	r12,r12,r2
   14068:	6180022e 	bgeu	r12,r6,14074 <__muldf3+0x2f8>
   1406c:	00800074 	movhi	r2,1
   14070:	709d883a 	add	r14,r14,r2
   14074:	201ed43a 	srli	r15,r4,16
   14078:	213fffcc 	andi	r4,r4,65535
   1407c:	24cd383a 	mul	r6,r4,r19
   14080:	191b383a 	mul	r13,r3,r4
   14084:	7ce7383a 	mul	r19,r15,r19
   14088:	3016d43a 	srli	r11,r6,16
   1408c:	6004943a 	slli	r2,r12,16
   14090:	9b67883a 	add	r19,r19,r13
   14094:	297fffcc 	andi	r5,r5,65535
   14098:	5ce7883a 	add	r19,r11,r19
   1409c:	6018d43a 	srli	r12,r12,16
   140a0:	1157883a 	add	r11,r2,r5
   140a4:	1bc7383a 	mul	r3,r3,r15
   140a8:	9b40022e 	bgeu	r19,r13,140b4 <__muldf3+0x338>
   140ac:	00800074 	movhi	r2,1
   140b0:	1887883a 	add	r3,r3,r2
   140b4:	8028d43a 	srli	r20,r16,16
   140b8:	80bfffcc 	andi	r2,r16,65535
   140bc:	40ab383a 	mul	r21,r8,r2
   140c0:	508b383a 	mul	r5,r10,r2
   140c4:	a211383a 	mul	r8,r20,r8
   140c8:	981a943a 	slli	r13,r19,16
   140cc:	a824d43a 	srli	r18,r21,16
   140d0:	9826d43a 	srli	r19,r19,16
   140d4:	31bfffcc 	andi	r6,r6,65535
   140d8:	2a0b883a 	add	r5,r5,r8
   140dc:	699b883a 	add	r13,r13,r6
   140e0:	914b883a 	add	r5,r18,r5
   140e4:	98e7883a 	add	r19,r19,r3
   140e8:	634d883a 	add	r6,r12,r13
   140ec:	5515383a 	mul	r10,r10,r20
   140f0:	2a00022e 	bgeu	r5,r8,140fc <__muldf3+0x380>
   140f4:	00c00074 	movhi	r3,1
   140f8:	50d5883a 	add	r10,r10,r3
   140fc:	2091383a 	mul	r8,r4,r2
   14100:	a121383a 	mul	r16,r20,r4
   14104:	7885383a 	mul	r2,r15,r2
   14108:	4018d43a 	srli	r12,r8,16
   1410c:	2824d43a 	srli	r18,r5,16
   14110:	280a943a 	slli	r5,r5,16
   14114:	1405883a 	add	r2,r2,r16
   14118:	ad7fffcc 	andi	r21,r21,65535
   1411c:	6085883a 	add	r2,r12,r2
   14120:	92a5883a 	add	r18,r18,r10
   14124:	2d4b883a 	add	r5,r5,r21
   14128:	7d09383a 	mul	r4,r15,r20
   1412c:	1400022e 	bgeu	r2,r16,14138 <__muldf3+0x3bc>
   14130:	00c00074 	movhi	r3,1
   14134:	20c9883a 	add	r4,r4,r3
   14138:	1006943a 	slli	r3,r2,16
   1413c:	423fffcc 	andi	r8,r8,65535
   14140:	338d883a 	add	r6,r6,r14
   14144:	1a07883a 	add	r3,r3,r8
   14148:	335b803a 	cmpltu	r13,r6,r13
   1414c:	1cc7883a 	add	r3,r3,r19
   14150:	314d883a 	add	r6,r6,r5
   14154:	1b5d883a 	add	r14,r3,r13
   14158:	314b803a 	cmpltu	r5,r6,r5
   1415c:	7495883a 	add	r10,r14,r18
   14160:	1018d43a 	srli	r12,r2,16
   14164:	5151883a 	add	r8,r10,r5
   14168:	1cc7803a 	cmpltu	r3,r3,r19
   1416c:	7361803a 	cmpltu	r16,r14,r13
   14170:	1c20b03a 	or	r16,r3,r16
   14174:	414b803a 	cmpltu	r5,r8,r5
   14178:	5495803a 	cmpltu	r10,r10,r18
   1417c:	8321883a 	add	r16,r16,r12
   14180:	514ab03a 	or	r5,r10,r5
   14184:	8161883a 	add	r16,r16,r5
   14188:	8121883a 	add	r16,r16,r4
   1418c:	3004927a 	slli	r2,r6,9
   14190:	4008d5fa 	srli	r4,r8,23
   14194:	8020927a 	slli	r16,r16,9
   14198:	300cd5fa 	srli	r6,r6,23
   1419c:	12c4b03a 	or	r2,r2,r11
   141a0:	4010927a 	slli	r8,r8,9
   141a4:	8108b03a 	or	r4,r16,r4
   141a8:	1004c03a 	cmpne	r2,r2,zero
   141ac:	1184b03a 	or	r2,r2,r6
   141b0:	20c0402c 	andhi	r3,r4,256
   141b4:	1210b03a 	or	r8,r2,r8
   141b8:	18008226 	beq	r3,zero,143c4 <__muldf3+0x648>
   141bc:	4006d07a 	srli	r3,r8,1
   141c0:	200a97fa 	slli	r5,r4,31
   141c4:	4080004c 	andi	r2,r8,1
   141c8:	2008d07a 	srli	r4,r4,1
   141cc:	1884b03a 	or	r2,r3,r2
   141d0:	1150b03a 	or	r8,r2,r5
   141d4:	48c0ffc4 	addi	r3,r9,1023
   141d8:	00c0420e 	bge	zero,r3,142e4 <__muldf3+0x568>
   141dc:	408001cc 	andi	r2,r8,7
   141e0:	10000726 	beq	r2,zero,14200 <__muldf3+0x484>
   141e4:	408003cc 	andi	r2,r8,15
   141e8:	10800120 	cmpeqi	r2,r2,4
   141ec:	1000041e 	bne	r2,zero,14200 <__muldf3+0x484>
   141f0:	41400104 	addi	r5,r8,4
   141f4:	2a05803a 	cmpltu	r2,r5,r8
   141f8:	2089883a 	add	r4,r4,r2
   141fc:	2811883a 	mov	r8,r5
   14200:	2080402c 	andhi	r2,r4,256
   14204:	10000426 	beq	r2,zero,14218 <__muldf3+0x49c>
   14208:	00bfc034 	movhi	r2,65280
   1420c:	10bfffc4 	addi	r2,r2,-1
   14210:	2088703a 	and	r4,r4,r2
   14214:	48c10004 	addi	r3,r9,1024
   14218:	1881ffc8 	cmpgei	r2,r3,2047
   1421c:	103f831e 	bne	r2,zero,1402c <__alt_mem_mcu_subsystem_ram_0+0x77ff402c>
   14220:	4004d0fa 	srli	r2,r8,3
   14224:	2026977a 	slli	r19,r4,29
   14228:	2020927a 	slli	r16,r4,9
   1422c:	18c1ffcc 	andi	r3,r3,2047
   14230:	98a6b03a 	or	r19,r19,r2
   14234:	8020d33a 	srli	r16,r16,12
   14238:	003f3006 	br	13efc <__alt_mem_mcu_subsystem_ram_0+0x77ff3efc>
   1423c:	04800104 	movi	r18,4
   14240:	0027883a 	mov	r19,zero
   14244:	0023883a 	mov	r17,zero
   14248:	05c00044 	movi	r23,1
   1424c:	003ee906 	br	13df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df4>
   14250:	9021883a 	mov	r16,r18
   14254:	0441ffc4 	movi	r17,2047
   14258:	04800304 	movi	r18,12
   1425c:	05c000c4 	movi	r23,3
   14260:	003ee406 	br	13df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df4>
   14264:	94800054 	ori	r18,r18,1
   14268:	0011883a 	mov	r8,zero
   1426c:	02800044 	movi	r10,1
   14270:	003ef306 	br	13e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e40>
   14274:	948000d4 	ori	r18,r18,3
   14278:	3809883a 	mov	r4,r7
   1427c:	028000c4 	movi	r10,3
   14280:	003eef06 	br	13e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e40>
   14284:	04000434 	movhi	r16,16
   14288:	000f883a 	mov	r7,zero
   1428c:	843fffc4 	addi	r16,r16,-1
   14290:	04ffffc4 	movi	r19,-1
   14294:	00c1ffc4 	movi	r3,2047
   14298:	003f1806 	br	13efc <__alt_mem_mcu_subsystem_ram_0+0x77ff3efc>
   1429c:	8009883a 	mov	r4,r16
   142a0:	9811883a 	mov	r8,r19
   142a4:	a805883a 	mov	r2,r21
   142a8:	b815883a 	mov	r10,r23
   142ac:	003f0906 	br	13ed4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ed4>
   142b0:	e005883a 	mov	r2,fp
   142b4:	003f0706 	br	13ed4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ed4>
   142b8:	8080022c 	andhi	r2,r16,8
   142bc:	10002626 	beq	r2,zero,14358 <__muldf3+0x5dc>
   142c0:	2080022c 	andhi	r2,r4,8
   142c4:	1000241e 	bne	r2,zero,14358 <__muldf3+0x5dc>
   142c8:	00800434 	movhi	r2,16
   142cc:	24000234 	orhi	r16,r4,8
   142d0:	10bfffc4 	addi	r2,r2,-1
   142d4:	80a0703a 	and	r16,r16,r2
   142d8:	b00f883a 	mov	r7,r22
   142dc:	4027883a 	mov	r19,r8
   142e0:	003fec06 	br	14294 <__alt_mem_mcu_subsystem_ram_0+0x77ff4294>
   142e4:	04000044 	movi	r16,1
   142e8:	80e1c83a 	sub	r16,r16,r3
   142ec:	80800e48 	cmpgei	r2,r16,57
   142f0:	103eff1e 	bne	r2,zero,13ef0 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ef0>
   142f4:	80800808 	cmpgei	r2,r16,32
   142f8:	1000341e 	bne	r2,zero,143cc <__muldf3+0x650>
   142fc:	4a410784 	addi	r9,r9,1054
   14300:	2246983a 	sll	r3,r4,r9
   14304:	4404d83a 	srl	r2,r8,r16
   14308:	4252983a 	sll	r9,r8,r9
   1430c:	2408d83a 	srl	r4,r4,r16
   14310:	1886b03a 	or	r3,r3,r2
   14314:	4812c03a 	cmpne	r9,r9,zero
   14318:	1a46b03a 	or	r3,r3,r9
   1431c:	188001cc 	andi	r2,r3,7
   14320:	10000726 	beq	r2,zero,14340 <__muldf3+0x5c4>
   14324:	188003cc 	andi	r2,r3,15
   14328:	10800120 	cmpeqi	r2,r2,4
   1432c:	1000041e 	bne	r2,zero,14340 <__muldf3+0x5c4>
   14330:	1805883a 	mov	r2,r3
   14334:	10c00104 	addi	r3,r2,4
   14338:	1885803a 	cmpltu	r2,r3,r2
   1433c:	2089883a 	add	r4,r4,r2
   14340:	2080202c 	andhi	r2,r4,128
   14344:	10003426 	beq	r2,zero,14418 <__muldf3+0x69c>
   14348:	00c00044 	movi	r3,1
   1434c:	0021883a 	mov	r16,zero
   14350:	0027883a 	mov	r19,zero
   14354:	003ee906 	br	13efc <__alt_mem_mcu_subsystem_ram_0+0x77ff3efc>
   14358:	00800434 	movhi	r2,16
   1435c:	84000234 	orhi	r16,r16,8
   14360:	10bfffc4 	addi	r2,r2,-1
   14364:	80a0703a 	and	r16,r16,r2
   14368:	a00f883a 	mov	r7,r20
   1436c:	003fc906 	br	14294 <__alt_mem_mcu_subsystem_ram_0+0x77ff4294>
   14370:	143ff604 	addi	r16,r2,-40
   14374:	b420983a 	sll	r16,r22,r16
   14378:	0027883a 	mov	r19,zero
   1437c:	003f0806 	br	13fa0 <__alt_mem_mcu_subsystem_ram_0+0x77ff3fa0>
   14380:	0014f540 	call	14f54 <__clzsi2>
   14384:	10800804 	addi	r2,r2,32
   14388:	d9c00117 	ldw	r7,4(sp)
   1438c:	d9800017 	ldw	r6,0(sp)
   14390:	003ef906 	br	13f78 <__alt_mem_mcu_subsystem_ram_0+0x77ff3f78>
   14394:	113ff604 	addi	r4,r2,-40
   14398:	3108983a 	sll	r4,r6,r4
   1439c:	0011883a 	mov	r8,zero
   143a0:	003f1e06 	br	1401c <__alt_mem_mcu_subsystem_ram_0+0x77ff401c>
   143a4:	3009883a 	mov	r4,r6
   143a8:	d9c00115 	stw	r7,4(sp)
   143ac:	d9800015 	stw	r6,0(sp)
   143b0:	0014f540 	call	14f54 <__clzsi2>
   143b4:	10800804 	addi	r2,r2,32
   143b8:	d9c00117 	ldw	r7,4(sp)
   143bc:	d9800017 	ldw	r6,0(sp)
   143c0:	003f0c06 	br	13ff4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ff4>
   143c4:	8813883a 	mov	r9,r17
   143c8:	003f8206 	br	141d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff41d4>
   143cc:	00bff844 	movi	r2,-31
   143d0:	10c7c83a 	sub	r3,r2,r3
   143d4:	84000820 	cmpeqi	r16,r16,32
   143d8:	20c6d83a 	srl	r3,r4,r3
   143dc:	8000031e 	bne	r16,zero,143ec <__muldf3+0x670>
   143e0:	4a410f84 	addi	r9,r9,1086
   143e4:	2260983a 	sll	r16,r4,r9
   143e8:	4410b03a 	or	r8,r8,r16
   143ec:	4004c03a 	cmpne	r2,r8,zero
   143f0:	10c4b03a 	or	r2,r2,r3
   143f4:	110001cc 	andi	r4,r2,7
   143f8:	20000c1e 	bne	r4,zero,1442c <__muldf3+0x6b0>
   143fc:	0021883a 	mov	r16,zero
   14400:	1004d0fa 	srli	r2,r2,3
   14404:	0007883a 	mov	r3,zero
   14408:	1126b03a 	or	r19,r2,r4
   1440c:	003ebb06 	br	13efc <__alt_mem_mcu_subsystem_ram_0+0x77ff3efc>
   14410:	1007883a 	mov	r3,r2
   14414:	0009883a 	mov	r4,zero
   14418:	2020927a 	slli	r16,r4,9
   1441c:	1805883a 	mov	r2,r3
   14420:	2008977a 	slli	r4,r4,29
   14424:	8020d33a 	srli	r16,r16,12
   14428:	003ff506 	br	14400 <__alt_mem_mcu_subsystem_ram_0+0x77ff4400>
   1442c:	10c003cc 	andi	r3,r2,15
   14430:	18c00118 	cmpnei	r3,r3,4
   14434:	183ff626 	beq	r3,zero,14410 <__alt_mem_mcu_subsystem_ram_0+0x77ff4410>
   14438:	0009883a 	mov	r4,zero
   1443c:	003fbd06 	br	14334 <__alt_mem_mcu_subsystem_ram_0+0x77ff4334>
   14440:	00800434 	movhi	r2,16
   14444:	24000234 	orhi	r16,r4,8
   14448:	10bfffc4 	addi	r2,r2,-1
   1444c:	80a0703a 	and	r16,r16,r2
   14450:	4027883a 	mov	r19,r8
   14454:	003f8f06 	br	14294 <__alt_mem_mcu_subsystem_ram_0+0x77ff4294>

00014458 <__subdf3>:
   14458:	00800434 	movhi	r2,16
   1445c:	10bfffc4 	addi	r2,r2,-1
   14460:	3814d53a 	srli	r10,r7,20
   14464:	defffb04 	addi	sp,sp,-20
   14468:	2890703a 	and	r8,r5,r2
   1446c:	3884703a 	and	r2,r7,r2
   14470:	2816d7fa 	srli	r11,r5,31
   14474:	400690fa 	slli	r3,r8,3
   14478:	dcc00315 	stw	r19,12(sp)
   1447c:	280ad53a 	srli	r5,r5,20
   14480:	2010d77a 	srli	r8,r4,29
   14484:	100490fa 	slli	r2,r2,3
   14488:	3026d77a 	srli	r19,r6,29
   1448c:	5281ffcc 	andi	r10,r10,2047
   14490:	dc800215 	stw	r18,8(sp)
   14494:	dc000015 	stw	r16,0(sp)
   14498:	dfc00415 	stw	ra,16(sp)
   1449c:	dc400115 	stw	r17,4(sp)
   144a0:	5301ffd8 	cmpnei	r12,r10,2047
   144a4:	5825883a 	mov	r18,r11
   144a8:	2c01ffcc 	andi	r16,r5,2047
   144ac:	5ac03fcc 	andi	r11,r11,255
   144b0:	40d0b03a 	or	r8,r8,r3
   144b4:	201290fa 	slli	r9,r4,3
   144b8:	380ed7fa 	srli	r7,r7,31
   144bc:	9884b03a 	or	r2,r19,r2
   144c0:	301a90fa 	slli	r13,r6,3
   144c4:	60007326 	beq	r12,zero,14694 <__subdf3+0x23c>
   144c8:	39c0005c 	xori	r7,r7,1
   144cc:	8287c83a 	sub	r3,r16,r10
   144d0:	3ac05426 	beq	r7,r11,14624 <__subdf3+0x1cc>
   144d4:	00c0420e 	bge	zero,r3,145e0 <__subdf3+0x188>
   144d8:	5000721e 	bne	r10,zero,146a4 <__subdf3+0x24c>
   144dc:	1348b03a 	or	r4,r2,r13
   144e0:	2000d126 	beq	r4,zero,14828 <__subdf3+0x3d0>
   144e4:	193fffc4 	addi	r4,r3,-1
   144e8:	20011a1e 	bne	r4,zero,14954 <__subdf3+0x4fc>
   144ec:	4b63c83a 	sub	r17,r9,r13
   144f0:	4089c83a 	sub	r4,r8,r2
   144f4:	4c51803a 	cmpltu	r8,r9,r17
   144f8:	2211c83a 	sub	r8,r4,r8
   144fc:	04000044 	movi	r16,1
   14500:	4080202c 	andhi	r2,r8,128
   14504:	1000b526 	beq	r2,zero,147dc <__subdf3+0x384>
   14508:	04c02034 	movhi	r19,128
   1450c:	9cffffc4 	addi	r19,r19,-1
   14510:	44e6703a 	and	r19,r8,r19
   14514:	9800ef26 	beq	r19,zero,148d4 <__subdf3+0x47c>
   14518:	9809883a 	mov	r4,r19
   1451c:	0014f540 	call	14f54 <__clzsi2>
   14520:	10fffe04 	addi	r3,r2,-8
   14524:	19000808 	cmpgei	r4,r3,32
   14528:	2000f01e 	bne	r4,zero,148ec <__subdf3+0x494>
   1452c:	01000804 	movi	r4,32
   14530:	20c9c83a 	sub	r4,r4,r3
   14534:	8908d83a 	srl	r4,r17,r4
   14538:	98e6983a 	sll	r19,r19,r3
   1453c:	88e2983a 	sll	r17,r17,r3
   14540:	24c8b03a 	or	r4,r4,r19
   14544:	1c00ed16 	blt	r3,r16,148fc <__subdf3+0x4a4>
   14548:	1c21c83a 	sub	r16,r3,r16
   1454c:	82000044 	addi	r8,r16,1
   14550:	40800808 	cmpgei	r2,r8,32
   14554:	1001031e 	bne	r2,zero,14964 <__subdf3+0x50c>
   14558:	00800804 	movi	r2,32
   1455c:	1205c83a 	sub	r2,r2,r8
   14560:	8a06d83a 	srl	r3,r17,r8
   14564:	88a2983a 	sll	r17,r17,r2
   14568:	2084983a 	sll	r2,r4,r2
   1456c:	2210d83a 	srl	r8,r4,r8
   14570:	8822c03a 	cmpne	r17,r17,zero
   14574:	10c4b03a 	or	r2,r2,r3
   14578:	1462b03a 	or	r17,r2,r17
   1457c:	888001cc 	andi	r2,r17,7
   14580:	0021883a 	mov	r16,zero
   14584:	10000726 	beq	r2,zero,145a4 <__subdf3+0x14c>
   14588:	888003cc 	andi	r2,r17,15
   1458c:	10800120 	cmpeqi	r2,r2,4
   14590:	1000041e 	bne	r2,zero,145a4 <__subdf3+0x14c>
   14594:	88c00104 	addi	r3,r17,4
   14598:	1c63803a 	cmpltu	r17,r3,r17
   1459c:	4451883a 	add	r8,r8,r17
   145a0:	1823883a 	mov	r17,r3
   145a4:	4080202c 	andhi	r2,r8,128
   145a8:	10016d26 	beq	r2,zero,14b60 <__subdf3+0x708>
   145ac:	84000044 	addi	r16,r16,1
   145b0:	8081ffe0 	cmpeqi	r2,r16,2047
   145b4:	8401ffcc 	andi	r16,r16,2047
   145b8:	1000c21e 	bne	r2,zero,148c4 <__subdf3+0x46c>
   145bc:	013fe034 	movhi	r4,65408
   145c0:	213fffc4 	addi	r4,r4,-1
   145c4:	4108703a 	and	r4,r8,r4
   145c8:	2004977a 	slli	r2,r4,29
   145cc:	8822d0fa 	srli	r17,r17,3
   145d0:	2008927a 	slli	r4,r4,9
   145d4:	1444b03a 	or	r2,r2,r17
   145d8:	2008d33a 	srli	r4,r4,12
   145dc:	00006506 	br	14774 <__subdf3+0x31c>
   145e0:	1800981e 	bne	r3,zero,14844 <__subdf3+0x3ec>
   145e4:	80c00044 	addi	r3,r16,1
   145e8:	18c1ffcc 	andi	r3,r3,2047
   145ec:	18c00088 	cmpgei	r3,r3,2
   145f0:	1800ce26 	beq	r3,zero,1492c <__subdf3+0x4d4>
   145f4:	4b63c83a 	sub	r17,r9,r13
   145f8:	40a7c83a 	sub	r19,r8,r2
   145fc:	4c49803a 	cmpltu	r4,r9,r17
   14600:	9927c83a 	sub	r19,r19,r4
   14604:	98c0202c 	andhi	r3,r19,128
   14608:	1800e41e 	bne	r3,zero,1499c <__subdf3+0x544>
   1460c:	8ccab03a 	or	r5,r17,r19
   14610:	283fc01e 	bne	r5,zero,14514 <__alt_mem_mcu_subsystem_ram_0+0x77ff4514>
   14614:	0005883a 	mov	r2,zero
   14618:	0025883a 	mov	r18,zero
   1461c:	0021883a 	mov	r16,zero
   14620:	00005006 	br	14764 <__subdf3+0x30c>
   14624:	00c0a00e 	bge	zero,r3,148a8 <__subdf3+0x450>
   14628:	50006126 	beq	r10,zero,147b0 <__subdf3+0x358>
   1462c:	8101ffe0 	cmpeqi	r4,r16,2047
   14630:	2000471e 	bne	r4,zero,14750 <__subdf3+0x2f8>
   14634:	10802034 	orhi	r2,r2,128
   14638:	19000e48 	cmpgei	r4,r3,57
   1463c:	2000dd26 	beq	r4,zero,149b4 <__subdf3+0x55c>
   14640:	1344b03a 	or	r2,r2,r13
   14644:	1022c03a 	cmpne	r17,r2,zero
   14648:	8a63883a 	add	r17,r17,r9
   1464c:	8a53803a 	cmpltu	r9,r17,r9
   14650:	4251883a 	add	r8,r8,r9
   14654:	4080202c 	andhi	r2,r8,128
   14658:	10006026 	beq	r2,zero,147dc <__subdf3+0x384>
   1465c:	84000044 	addi	r16,r16,1
   14660:	8101ffe0 	cmpeqi	r4,r16,2047
   14664:	2000971e 	bne	r4,zero,148c4 <__subdf3+0x46c>
   14668:	013fe034 	movhi	r4,65408
   1466c:	213fffc4 	addi	r4,r4,-1
   14670:	8804d07a 	srli	r2,r17,1
   14674:	4108703a 	and	r4,r8,r4
   14678:	200697fa 	slli	r3,r4,31
   1467c:	8c40004c 	andi	r17,r17,1
   14680:	1462b03a 	or	r17,r2,r17
   14684:	1c62b03a 	or	r17,r3,r17
   14688:	2010d07a 	srli	r8,r4,1
   1468c:	888001cc 	andi	r2,r17,7
   14690:	003fbc06 	br	14584 <__alt_mem_mcu_subsystem_ram_0+0x77ff4584>
   14694:	1346b03a 	or	r3,r2,r13
   14698:	183f8b26 	beq	r3,zero,144c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff44c8>
   1469c:	39c03fcc 	andi	r7,r7,255
   146a0:	003f8a06 	br	144cc <__alt_mem_mcu_subsystem_ram_0+0x77ff44cc>
   146a4:	8101ffe0 	cmpeqi	r4,r16,2047
   146a8:	2000291e 	bne	r4,zero,14750 <__subdf3+0x2f8>
   146ac:	10802034 	orhi	r2,r2,128
   146b0:	19000e48 	cmpgei	r4,r3,57
   146b4:	2000971e 	bne	r4,zero,14914 <__subdf3+0x4bc>
   146b8:	19000808 	cmpgei	r4,r3,32
   146bc:	2000ca26 	beq	r4,zero,149e8 <__subdf3+0x590>
   146c0:	1c7ff804 	addi	r17,r3,-32
   146c4:	19000820 	cmpeqi	r4,r3,32
   146c8:	144ad83a 	srl	r5,r2,r17
   146cc:	2000041e 	bne	r4,zero,146e0 <__subdf3+0x288>
   146d0:	01001004 	movi	r4,64
   146d4:	20c7c83a 	sub	r3,r4,r3
   146d8:	10c4983a 	sll	r2,r2,r3
   146dc:	689ab03a 	or	r13,r13,r2
   146e0:	6822c03a 	cmpne	r17,r13,zero
   146e4:	8962b03a 	or	r17,r17,r5
   146e8:	00008c06 	br	1491c <__subdf3+0x4c4>
   146ec:	18016b26 	beq	r3,zero,14c9c <__subdf3+0x844>
   146f0:	135ab03a 	or	r13,r2,r13
   146f4:	6800e626 	beq	r13,zero,14a90 <__subdf3+0x638>
   146f8:	4006d0fa 	srli	r3,r8,3
   146fc:	01480034 	movhi	r5,8192
   14700:	4010977a 	slli	r8,r8,29
   14704:	297fffc4 	addi	r5,r5,-1
   14708:	2152703a 	and	r9,r4,r5
   1470c:	19c0022c 	andhi	r7,r3,8
   14710:	4a12b03a 	or	r9,r9,r8
   14714:	38000726 	beq	r7,zero,14734 <__subdf3+0x2dc>
   14718:	1008d0fa 	srli	r4,r2,3
   1471c:	21c0022c 	andhi	r7,r4,8
   14720:	3800041e 	bne	r7,zero,14734 <__subdf3+0x2dc>
   14724:	1012977a 	slli	r9,r2,29
   14728:	3144703a 	and	r2,r6,r5
   1472c:	2007883a 	mov	r3,r4
   14730:	1252b03a 	or	r9,r2,r9
   14734:	4808d77a 	srli	r4,r9,29
   14738:	180690fa 	slli	r3,r3,3
   1473c:	481290fa 	slli	r9,r9,3
   14740:	5c80004c 	andi	r18,r11,1
   14744:	20d0b03a 	or	r8,r4,r3
   14748:	0401ffc4 	movi	r16,2047
   1474c:	01000044 	movi	r4,1
   14750:	4822d0fa 	srli	r17,r9,3
   14754:	4004977a 	slli	r2,r8,29
   14758:	400ad0fa 	srli	r5,r8,3
   1475c:	8884b03a 	or	r2,r17,r2
   14760:	2000261e 	bne	r4,zero,147fc <__subdf3+0x3a4>
   14764:	01000434 	movhi	r4,16
   14768:	213fffc4 	addi	r4,r4,-1
   1476c:	2908703a 	and	r4,r5,r4
   14770:	8401ffcc 	andi	r16,r16,2047
   14774:	8020953a 	slli	r16,r16,20
   14778:	00c00434 	movhi	r3,16
   1477c:	94803fcc 	andi	r18,r18,255
   14780:	902497fa 	slli	r18,r18,31
   14784:	18ffffc4 	addi	r3,r3,-1
   14788:	20c6703a 	and	r3,r4,r3
   1478c:	1c06b03a 	or	r3,r3,r16
   14790:	1c86b03a 	or	r3,r3,r18
   14794:	dfc00417 	ldw	ra,16(sp)
   14798:	dcc00317 	ldw	r19,12(sp)
   1479c:	dc800217 	ldw	r18,8(sp)
   147a0:	dc400117 	ldw	r17,4(sp)
   147a4:	dc000017 	ldw	r16,0(sp)
   147a8:	dec00504 	addi	sp,sp,20
   147ac:	f800283a 	ret
   147b0:	1348b03a 	or	r4,r2,r13
   147b4:	20001c26 	beq	r4,zero,14828 <__subdf3+0x3d0>
   147b8:	193fffc4 	addi	r4,r3,-1
   147bc:	2000b01e 	bne	r4,zero,14a80 <__subdf3+0x628>
   147c0:	4b63883a 	add	r17,r9,r13
   147c4:	4089883a 	add	r4,r8,r2
   147c8:	8a51803a 	cmpltu	r8,r17,r9
   147cc:	2211883a 	add	r8,r4,r8
   147d0:	4080202c 	andhi	r2,r8,128
   147d4:	1001181e 	bne	r2,zero,14c38 <__subdf3+0x7e0>
   147d8:	04000044 	movi	r16,1
   147dc:	888001cc 	andi	r2,r17,7
   147e0:	103f691e 	bne	r2,zero,14588 <__alt_mem_mcu_subsystem_ram_0+0x77ff4588>
   147e4:	4004977a 	slli	r2,r8,29
   147e8:	8822d0fa 	srli	r17,r17,3
   147ec:	8101ffe0 	cmpeqi	r4,r16,2047
   147f0:	400ad0fa 	srli	r5,r8,3
   147f4:	1444b03a 	or	r2,r2,r17
   147f8:	203fda26 	beq	r4,zero,14764 <__alt_mem_mcu_subsystem_ram_0+0x77ff4764>
   147fc:	2886b03a 	or	r3,r5,r2
   14800:	18014626 	beq	r3,zero,14d1c <__subdf3+0x8c4>
   14804:	00c00434 	movhi	r3,16
   14808:	29000234 	orhi	r4,r5,8
   1480c:	18ffffc4 	addi	r3,r3,-1
   14810:	20c8703a 	and	r4,r4,r3
   14814:	0401ffc4 	movi	r16,2047
   14818:	003fd606 	br	14774 <__alt_mem_mcu_subsystem_ram_0+0x77ff4774>
   1481c:	5007883a 	mov	r3,r10
   14820:	1011883a 	mov	r8,r2
   14824:	6813883a 	mov	r9,r13
   14828:	4822d0fa 	srli	r17,r9,3
   1482c:	4004977a 	slli	r2,r8,29
   14830:	1821883a 	mov	r16,r3
   14834:	1901ffe0 	cmpeqi	r4,r3,2047
   14838:	400ad0fa 	srli	r5,r8,3
   1483c:	8884b03a 	or	r2,r17,r2
   14840:	003fc706 	br	14760 <__alt_mem_mcu_subsystem_ram_0+0x77ff4760>
   14844:	3825883a 	mov	r18,r7
   14848:	80007226 	beq	r16,zero,14a14 <__subdf3+0x5bc>
   1484c:	5101ffe0 	cmpeqi	r4,r10,2047
   14850:	2000ad1e 	bne	r4,zero,14b08 <__subdf3+0x6b0>
   14854:	00c7c83a 	sub	r3,zero,r3
   14858:	42002034 	orhi	r8,r8,128
   1485c:	19000e48 	cmpgei	r4,r3,57
   14860:	2000d21e 	bne	r4,zero,14bac <__subdf3+0x754>
   14864:	19000808 	cmpgei	r4,r3,32
   14868:	2000f81e 	bne	r4,zero,14c4c <__subdf3+0x7f4>
   1486c:	01000804 	movi	r4,32
   14870:	20c9c83a 	sub	r4,r4,r3
   14874:	4122983a 	sll	r17,r8,r4
   14878:	48cad83a 	srl	r5,r9,r3
   1487c:	4908983a 	sll	r4,r9,r4
   14880:	40c6d83a 	srl	r3,r8,r3
   14884:	8962b03a 	or	r17,r17,r5
   14888:	2008c03a 	cmpne	r4,r4,zero
   1488c:	8922b03a 	or	r17,r17,r4
   14890:	10c5c83a 	sub	r2,r2,r3
   14894:	6c63c83a 	sub	r17,r13,r17
   14898:	6c49803a 	cmpltu	r4,r13,r17
   1489c:	1111c83a 	sub	r8,r2,r4
   148a0:	5021883a 	mov	r16,r10
   148a4:	003f1606 	br	14500 <__alt_mem_mcu_subsystem_ram_0+0x77ff4500>
   148a8:	18007c1e 	bne	r3,zero,14a9c <__subdf3+0x644>
   148ac:	81400044 	addi	r5,r16,1
   148b0:	28c1ffcc 	andi	r3,r5,2047
   148b4:	18c00088 	cmpgei	r3,r3,2
   148b8:	18009826 	beq	r3,zero,14b1c <__subdf3+0x6c4>
   148bc:	28c1ffe0 	cmpeqi	r3,r5,2047
   148c0:	18005c26 	beq	r3,zero,14a34 <__subdf3+0x5dc>
   148c4:	0401ffc4 	movi	r16,2047
   148c8:	0009883a 	mov	r4,zero
   148cc:	0005883a 	mov	r2,zero
   148d0:	003fa806 	br	14774 <__alt_mem_mcu_subsystem_ram_0+0x77ff4774>
   148d4:	8809883a 	mov	r4,r17
   148d8:	0014f540 	call	14f54 <__clzsi2>
   148dc:	10800804 	addi	r2,r2,32
   148e0:	10fffe04 	addi	r3,r2,-8
   148e4:	19000808 	cmpgei	r4,r3,32
   148e8:	203f1026 	beq	r4,zero,1452c <__alt_mem_mcu_subsystem_ram_0+0x77ff452c>
   148ec:	14fff604 	addi	r19,r2,-40
   148f0:	8cc8983a 	sll	r4,r17,r19
   148f4:	0023883a 	mov	r17,zero
   148f8:	1c3f130e 	bge	r3,r16,14548 <__alt_mem_mcu_subsystem_ram_0+0x77ff4548>
   148fc:	023fe034 	movhi	r8,65408
   14900:	423fffc4 	addi	r8,r8,-1
   14904:	80e1c83a 	sub	r16,r16,r3
   14908:	2210703a 	and	r8,r4,r8
   1490c:	888001cc 	andi	r2,r17,7
   14910:	003f1c06 	br	14584 <__alt_mem_mcu_subsystem_ram_0+0x77ff4584>
   14914:	1344b03a 	or	r2,r2,r13
   14918:	1022c03a 	cmpne	r17,r2,zero
   1491c:	4c63c83a 	sub	r17,r9,r17
   14920:	4c53803a 	cmpltu	r9,r9,r17
   14924:	4251c83a 	sub	r8,r8,r9
   14928:	003ef506 	br	14500 <__alt_mem_mcu_subsystem_ram_0+0x77ff4500>
   1492c:	4246b03a 	or	r3,r8,r9
   14930:	134ab03a 	or	r5,r2,r13
   14934:	80004a1e 	bne	r16,zero,14a60 <__subdf3+0x608>
   14938:	18009f1e 	bne	r3,zero,14bb8 <__subdf3+0x760>
   1493c:	2800ce26 	beq	r5,zero,14c78 <__subdf3+0x820>
   14940:	3825883a 	mov	r18,r7
   14944:	1011883a 	mov	r8,r2
   14948:	6813883a 	mov	r9,r13
   1494c:	0009883a 	mov	r4,zero
   14950:	003f7f06 	br	14750 <__alt_mem_mcu_subsystem_ram_0+0x77ff4750>
   14954:	18c1ffe0 	cmpeqi	r3,r3,2047
   14958:	18004d1e 	bne	r3,zero,14a90 <__subdf3+0x638>
   1495c:	2007883a 	mov	r3,r4
   14960:	003f5306 	br	146b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff46b0>
   14964:	843ff844 	addi	r16,r16,-31
   14968:	40800820 	cmpeqi	r2,r8,32
   1496c:	2406d83a 	srl	r3,r4,r16
   14970:	1000041e 	bne	r2,zero,14984 <__subdf3+0x52c>
   14974:	04c01004 	movi	r19,64
   14978:	9a11c83a 	sub	r8,r19,r8
   1497c:	2226983a 	sll	r19,r4,r8
   14980:	8ce2b03a 	or	r17,r17,r19
   14984:	8822c03a 	cmpne	r17,r17,zero
   14988:	88e2b03a 	or	r17,r17,r3
   1498c:	888001cc 	andi	r2,r17,7
   14990:	0011883a 	mov	r8,zero
   14994:	0021883a 	mov	r16,zero
   14998:	003f9106 	br	147e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff47e0>
   1499c:	6a63c83a 	sub	r17,r13,r9
   149a0:	1209c83a 	sub	r4,r2,r8
   149a4:	6c67803a 	cmpltu	r19,r13,r17
   149a8:	24e7c83a 	sub	r19,r4,r19
   149ac:	3825883a 	mov	r18,r7
   149b0:	003ed806 	br	14514 <__alt_mem_mcu_subsystem_ram_0+0x77ff4514>
   149b4:	19000808 	cmpgei	r4,r3,32
   149b8:	20006c1e 	bne	r4,zero,14b6c <__subdf3+0x714>
   149bc:	01000804 	movi	r4,32
   149c0:	20c9c83a 	sub	r4,r4,r3
   149c4:	1122983a 	sll	r17,r2,r4
   149c8:	68cad83a 	srl	r5,r13,r3
   149cc:	691a983a 	sll	r13,r13,r4
   149d0:	10c4d83a 	srl	r2,r2,r3
   149d4:	8962b03a 	or	r17,r17,r5
   149d8:	681ac03a 	cmpne	r13,r13,zero
   149dc:	8b62b03a 	or	r17,r17,r13
   149e0:	4091883a 	add	r8,r8,r2
   149e4:	003f1806 	br	14648 <__alt_mem_mcu_subsystem_ram_0+0x77ff4648>
   149e8:	01000804 	movi	r4,32
   149ec:	20c9c83a 	sub	r4,r4,r3
   149f0:	1122983a 	sll	r17,r2,r4
   149f4:	68cad83a 	srl	r5,r13,r3
   149f8:	691a983a 	sll	r13,r13,r4
   149fc:	10c4d83a 	srl	r2,r2,r3
   14a00:	8962b03a 	or	r17,r17,r5
   14a04:	681ac03a 	cmpne	r13,r13,zero
   14a08:	8b62b03a 	or	r17,r17,r13
   14a0c:	4091c83a 	sub	r8,r8,r2
   14a10:	003fc206 	br	1491c <__alt_mem_mcu_subsystem_ram_0+0x77ff491c>
   14a14:	4248b03a 	or	r4,r8,r9
   14a18:	203f8026 	beq	r4,zero,1481c <__alt_mem_mcu_subsystem_ram_0+0x77ff481c>
   14a1c:	193fffd8 	cmpnei	r4,r3,-1
   14a20:	20009826 	beq	r4,zero,14c84 <__subdf3+0x82c>
   14a24:	5101ffe0 	cmpeqi	r4,r10,2047
   14a28:	2000371e 	bne	r4,zero,14b08 <__subdf3+0x6b0>
   14a2c:	00c6303a 	nor	r3,zero,r3
   14a30:	003f8a06 	br	1485c <__alt_mem_mcu_subsystem_ram_0+0x77ff485c>
   14a34:	4b5b883a 	add	r13,r9,r13
   14a38:	4089883a 	add	r4,r8,r2
   14a3c:	6a51803a 	cmpltu	r8,r13,r9
   14a40:	2209883a 	add	r4,r4,r8
   14a44:	202297fa 	slli	r17,r4,31
   14a48:	681ad07a 	srli	r13,r13,1
   14a4c:	2010d07a 	srli	r8,r4,1
   14a50:	2821883a 	mov	r16,r5
   14a54:	8b62b03a 	or	r17,r17,r13
   14a58:	888001cc 	andi	r2,r17,7
   14a5c:	003ec906 	br	14584 <__alt_mem_mcu_subsystem_ram_0+0x77ff4584>
   14a60:	1800631e 	bne	r3,zero,14bf0 <__subdf3+0x798>
   14a64:	28009226 	beq	r5,zero,14cb0 <__subdf3+0x858>
   14a68:	3825883a 	mov	r18,r7
   14a6c:	1011883a 	mov	r8,r2
   14a70:	6813883a 	mov	r9,r13
   14a74:	0401ffc4 	movi	r16,2047
   14a78:	01000044 	movi	r4,1
   14a7c:	003f3406 	br	14750 <__alt_mem_mcu_subsystem_ram_0+0x77ff4750>
   14a80:	18c1ffe0 	cmpeqi	r3,r3,2047
   14a84:	1800021e 	bne	r3,zero,14a90 <__subdf3+0x638>
   14a88:	2007883a 	mov	r3,r4
   14a8c:	003eea06 	br	14638 <__alt_mem_mcu_subsystem_ram_0+0x77ff4638>
   14a90:	0401ffc4 	movi	r16,2047
   14a94:	01000044 	movi	r4,1
   14a98:	003f2d06 	br	14750 <__alt_mem_mcu_subsystem_ram_0+0x77ff4750>
   14a9c:	80003e1e 	bne	r16,zero,14b98 <__subdf3+0x740>
   14aa0:	4248b03a 	or	r4,r8,r9
   14aa4:	203f5d26 	beq	r4,zero,1481c <__alt_mem_mcu_subsystem_ram_0+0x77ff481c>
   14aa8:	193fffd8 	cmpnei	r4,r3,-1
   14aac:	20009026 	beq	r4,zero,14cf0 <__subdf3+0x898>
   14ab0:	5101ffe0 	cmpeqi	r4,r10,2047
   14ab4:	2000141e 	bne	r4,zero,14b08 <__subdf3+0x6b0>
   14ab8:	00c6303a 	nor	r3,zero,r3
   14abc:	19000e48 	cmpgei	r4,r3,57
   14ac0:	20005f1e 	bne	r4,zero,14c40 <__subdf3+0x7e8>
   14ac4:	19000808 	cmpgei	r4,r3,32
   14ac8:	20007e1e 	bne	r4,zero,14cc4 <__subdf3+0x86c>
   14acc:	01000804 	movi	r4,32
   14ad0:	20c9c83a 	sub	r4,r4,r3
   14ad4:	4122983a 	sll	r17,r8,r4
   14ad8:	48cad83a 	srl	r5,r9,r3
   14adc:	4908983a 	sll	r4,r9,r4
   14ae0:	40c6d83a 	srl	r3,r8,r3
   14ae4:	8962b03a 	or	r17,r17,r5
   14ae8:	2008c03a 	cmpne	r4,r4,zero
   14aec:	8922b03a 	or	r17,r17,r4
   14af0:	10c5883a 	add	r2,r2,r3
   14af4:	8b63883a 	add	r17,r17,r13
   14af8:	8b49803a 	cmpltu	r4,r17,r13
   14afc:	2091883a 	add	r8,r4,r2
   14b00:	5021883a 	mov	r16,r10
   14b04:	003ed306 	br	14654 <__alt_mem_mcu_subsystem_ram_0+0x77ff4654>
   14b08:	0401ffc4 	movi	r16,2047
   14b0c:	1011883a 	mov	r8,r2
   14b10:	6813883a 	mov	r9,r13
   14b14:	01000044 	movi	r4,1
   14b18:	003f0d06 	br	14750 <__alt_mem_mcu_subsystem_ram_0+0x77ff4750>
   14b1c:	4246b03a 	or	r3,r8,r9
   14b20:	803ef21e 	bne	r16,zero,146ec <__alt_mem_mcu_subsystem_ram_0+0x77ff46ec>
   14b24:	183f8726 	beq	r3,zero,14944 <__alt_mem_mcu_subsystem_ram_0+0x77ff4944>
   14b28:	1346b03a 	or	r3,r2,r13
   14b2c:	183f8726 	beq	r3,zero,1494c <__alt_mem_mcu_subsystem_ram_0+0x77ff494c>
   14b30:	4b63883a 	add	r17,r9,r13
   14b34:	4089883a 	add	r4,r8,r2
   14b38:	8a51803a 	cmpltu	r8,r17,r9
   14b3c:	2211883a 	add	r8,r4,r8
   14b40:	40c0202c 	andhi	r3,r8,128
   14b44:	888001cc 	andi	r2,r17,7
   14b48:	183f2526 	beq	r3,zero,147e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff47e0>
   14b4c:	00ffe034 	movhi	r3,65408
   14b50:	18ffffc4 	addi	r3,r3,-1
   14b54:	40d0703a 	and	r8,r8,r3
   14b58:	04000044 	movi	r16,1
   14b5c:	003e8906 	br	14584 <__alt_mem_mcu_subsystem_ram_0+0x77ff4584>
   14b60:	8813883a 	mov	r9,r17
   14b64:	8101ffe0 	cmpeqi	r4,r16,2047
   14b68:	003ef906 	br	14750 <__alt_mem_mcu_subsystem_ram_0+0x77ff4750>
   14b6c:	1c7ff804 	addi	r17,r3,-32
   14b70:	19400820 	cmpeqi	r5,r3,32
   14b74:	1448d83a 	srl	r4,r2,r17
   14b78:	2800041e 	bne	r5,zero,14b8c <__subdf3+0x734>
   14b7c:	01401004 	movi	r5,64
   14b80:	28c7c83a 	sub	r3,r5,r3
   14b84:	10c4983a 	sll	r2,r2,r3
   14b88:	689ab03a 	or	r13,r13,r2
   14b8c:	6822c03a 	cmpne	r17,r13,zero
   14b90:	8922b03a 	or	r17,r17,r4
   14b94:	003eac06 	br	14648 <__alt_mem_mcu_subsystem_ram_0+0x77ff4648>
   14b98:	5101ffe0 	cmpeqi	r4,r10,2047
   14b9c:	203fda1e 	bne	r4,zero,14b08 <__alt_mem_mcu_subsystem_ram_0+0x77ff4b08>
   14ba0:	00c7c83a 	sub	r3,zero,r3
   14ba4:	42002034 	orhi	r8,r8,128
   14ba8:	003fc406 	br	14abc <__alt_mem_mcu_subsystem_ram_0+0x77ff4abc>
   14bac:	4262b03a 	or	r17,r8,r9
   14bb0:	8822c03a 	cmpne	r17,r17,zero
   14bb4:	003f3706 	br	14894 <__alt_mem_mcu_subsystem_ram_0+0x77ff4894>
   14bb8:	283f6426 	beq	r5,zero,1494c <__alt_mem_mcu_subsystem_ram_0+0x77ff494c>
   14bbc:	4b63c83a 	sub	r17,r9,r13
   14bc0:	4c49803a 	cmpltu	r4,r9,r17
   14bc4:	4087c83a 	sub	r3,r8,r2
   14bc8:	1907c83a 	sub	r3,r3,r4
   14bcc:	1900202c 	andhi	r4,r3,128
   14bd0:	20004d26 	beq	r4,zero,14d08 <__subdf3+0x8b0>
   14bd4:	6a63c83a 	sub	r17,r13,r9
   14bd8:	1209c83a 	sub	r4,r2,r8
   14bdc:	6c5b803a 	cmpltu	r13,r13,r17
   14be0:	2351c83a 	sub	r8,r4,r13
   14be4:	888001cc 	andi	r2,r17,7
   14be8:	3825883a 	mov	r18,r7
   14bec:	003e6506 	br	14584 <__alt_mem_mcu_subsystem_ram_0+0x77ff4584>
   14bf0:	283fa726 	beq	r5,zero,14a90 <__alt_mem_mcu_subsystem_ram_0+0x77ff4a90>
   14bf4:	4006d0fa 	srli	r3,r8,3
   14bf8:	01480034 	movhi	r5,8192
   14bfc:	4010977a 	slli	r8,r8,29
   14c00:	297fffc4 	addi	r5,r5,-1
   14c04:	2152703a 	and	r9,r4,r5
   14c08:	1a80022c 	andhi	r10,r3,8
   14c0c:	4a12b03a 	or	r9,r9,r8
   14c10:	503ec826 	beq	r10,zero,14734 <__alt_mem_mcu_subsystem_ram_0+0x77ff4734>
   14c14:	1008d0fa 	srli	r4,r2,3
   14c18:	2200022c 	andhi	r8,r4,8
   14c1c:	403ec51e 	bne	r8,zero,14734 <__alt_mem_mcu_subsystem_ram_0+0x77ff4734>
   14c20:	1012977a 	slli	r9,r2,29
   14c24:	3144703a 	and	r2,r6,r5
   14c28:	2007883a 	mov	r3,r4
   14c2c:	1252b03a 	or	r9,r2,r9
   14c30:	3817883a 	mov	r11,r7
   14c34:	003ebf06 	br	14734 <__alt_mem_mcu_subsystem_ram_0+0x77ff4734>
   14c38:	04000084 	movi	r16,2
   14c3c:	003e8a06 	br	14668 <__alt_mem_mcu_subsystem_ram_0+0x77ff4668>
   14c40:	4262b03a 	or	r17,r8,r9
   14c44:	8822c03a 	cmpne	r17,r17,zero
   14c48:	003faa06 	br	14af4 <__alt_mem_mcu_subsystem_ram_0+0x77ff4af4>
   14c4c:	193ff804 	addi	r4,r3,-32
   14c50:	19400820 	cmpeqi	r5,r3,32
   14c54:	4108d83a 	srl	r4,r8,r4
   14c58:	2800041e 	bne	r5,zero,14c6c <__subdf3+0x814>
   14c5c:	01401004 	movi	r5,64
   14c60:	28c7c83a 	sub	r3,r5,r3
   14c64:	40d0983a 	sll	r8,r8,r3
   14c68:	4a12b03a 	or	r9,r9,r8
   14c6c:	4822c03a 	cmpne	r17,r9,zero
   14c70:	8922b03a 	or	r17,r17,r4
   14c74:	003f0706 	br	14894 <__alt_mem_mcu_subsystem_ram_0+0x77ff4894>
   14c78:	0005883a 	mov	r2,zero
   14c7c:	0025883a 	mov	r18,zero
   14c80:	003eb806 	br	14764 <__alt_mem_mcu_subsystem_ram_0+0x77ff4764>
   14c84:	6a63c83a 	sub	r17,r13,r9
   14c88:	1209c83a 	sub	r4,r2,r8
   14c8c:	6c5b803a 	cmpltu	r13,r13,r17
   14c90:	2351c83a 	sub	r8,r4,r13
   14c94:	5021883a 	mov	r16,r10
   14c98:	003e1906 	br	14500 <__alt_mem_mcu_subsystem_ram_0+0x77ff4500>
   14c9c:	1011883a 	mov	r8,r2
   14ca0:	6813883a 	mov	r9,r13
   14ca4:	0401ffc4 	movi	r16,2047
   14ca8:	01000044 	movi	r4,1
   14cac:	003ea806 	br	14750 <__alt_mem_mcu_subsystem_ram_0+0x77ff4750>
   14cb0:	01400434 	movhi	r5,16
   14cb4:	0025883a 	mov	r18,zero
   14cb8:	297fffc4 	addi	r5,r5,-1
   14cbc:	00bfffc4 	movi	r2,-1
   14cc0:	003ed006 	br	14804 <__alt_mem_mcu_subsystem_ram_0+0x77ff4804>
   14cc4:	193ff804 	addi	r4,r3,-32
   14cc8:	19400820 	cmpeqi	r5,r3,32
   14ccc:	4108d83a 	srl	r4,r8,r4
   14cd0:	2800041e 	bne	r5,zero,14ce4 <__subdf3+0x88c>
   14cd4:	01401004 	movi	r5,64
   14cd8:	28c7c83a 	sub	r3,r5,r3
   14cdc:	40d0983a 	sll	r8,r8,r3
   14ce0:	4a12b03a 	or	r9,r9,r8
   14ce4:	4822c03a 	cmpne	r17,r9,zero
   14ce8:	8922b03a 	or	r17,r17,r4
   14cec:	003f8106 	br	14af4 <__alt_mem_mcu_subsystem_ram_0+0x77ff4af4>
   14cf0:	4b63883a 	add	r17,r9,r13
   14cf4:	4089883a 	add	r4,r8,r2
   14cf8:	8b5b803a 	cmpltu	r13,r17,r13
   14cfc:	2351883a 	add	r8,r4,r13
   14d00:	5021883a 	mov	r16,r10
   14d04:	003e5306 	br	14654 <__alt_mem_mcu_subsystem_ram_0+0x77ff4654>
   14d08:	88cab03a 	or	r5,r17,r3
   14d0c:	283fda26 	beq	r5,zero,14c78 <__alt_mem_mcu_subsystem_ram_0+0x77ff4c78>
   14d10:	888001cc 	andi	r2,r17,7
   14d14:	1811883a 	mov	r8,r3
   14d18:	003eb106 	br	147e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff47e0>
   14d1c:	0005883a 	mov	r2,zero
   14d20:	0401ffc4 	movi	r16,2047
   14d24:	0009883a 	mov	r4,zero
   14d28:	003e9206 	br	14774 <__alt_mem_mcu_subsystem_ram_0+0x77ff4774>

00014d2c <__fixdfsi>:
   14d2c:	280cd53a 	srli	r6,r5,20
   14d30:	00c00434 	movhi	r3,16
   14d34:	18ffffc4 	addi	r3,r3,-1
   14d38:	3181ffcc 	andi	r6,r6,2047
   14d3c:	31c0ffd0 	cmplti	r7,r6,1023
   14d40:	28c6703a 	and	r3,r5,r3
   14d44:	280ad7fa 	srli	r5,r5,31
   14d48:	3800121e 	bne	r7,zero,14d94 <__fixdfsi+0x68>
   14d4c:	30810790 	cmplti	r2,r6,1054
   14d50:	10000c26 	beq	r2,zero,14d84 <__fixdfsi+0x58>
   14d54:	01c10cc4 	movi	r7,1075
   14d58:	398fc83a 	sub	r7,r7,r6
   14d5c:	38800808 	cmpgei	r2,r7,32
   14d60:	18c00434 	orhi	r3,r3,16
   14d64:	10000d1e 	bne	r2,zero,14d9c <__fixdfsi+0x70>
   14d68:	30befb44 	addi	r2,r6,-1043
   14d6c:	1884983a 	sll	r2,r3,r2
   14d70:	21c8d83a 	srl	r4,r4,r7
   14d74:	1104b03a 	or	r2,r2,r4
   14d78:	28000726 	beq	r5,zero,14d98 <__fixdfsi+0x6c>
   14d7c:	0085c83a 	sub	r2,zero,r2
   14d80:	f800283a 	ret
   14d84:	00a00034 	movhi	r2,32768
   14d88:	10bfffc4 	addi	r2,r2,-1
   14d8c:	2885883a 	add	r2,r5,r2
   14d90:	f800283a 	ret
   14d94:	0005883a 	mov	r2,zero
   14d98:	f800283a 	ret
   14d9c:	008104c4 	movi	r2,1043
   14da0:	1185c83a 	sub	r2,r2,r6
   14da4:	1884d83a 	srl	r2,r3,r2
   14da8:	003ff306 	br	14d78 <__alt_mem_mcu_subsystem_ram_0+0x77ff4d78>

00014dac <__floatunsidf>:
   14dac:	defffe04 	addi	sp,sp,-8
   14db0:	dfc00115 	stw	ra,4(sp)
   14db4:	dc000015 	stw	r16,0(sp)
   14db8:	20001f26 	beq	r4,zero,14e38 <__floatunsidf+0x8c>
   14dbc:	2021883a 	mov	r16,r4
   14dc0:	0014f540 	call	14f54 <__clzsi2>
   14dc4:	01010784 	movi	r4,1054
   14dc8:	2089c83a 	sub	r4,r4,r2
   14dcc:	10c002c8 	cmpgei	r3,r2,11
   14dd0:	2101ffcc 	andi	r4,r4,2047
   14dd4:	18000f26 	beq	r3,zero,14e14 <__floatunsidf+0x68>
   14dd8:	10bffd44 	addi	r2,r2,-11
   14ddc:	8086983a 	sll	r3,r16,r2
   14de0:	00800434 	movhi	r2,16
   14de4:	10bfffc4 	addi	r2,r2,-1
   14de8:	1886703a 	and	r3,r3,r2
   14dec:	0005883a 	mov	r2,zero
   14df0:	2008953a 	slli	r4,r4,20
   14df4:	01400434 	movhi	r5,16
   14df8:	297fffc4 	addi	r5,r5,-1
   14dfc:	1946703a 	and	r3,r3,r5
   14e00:	1906b03a 	or	r3,r3,r4
   14e04:	dfc00117 	ldw	ra,4(sp)
   14e08:	dc000017 	ldw	r16,0(sp)
   14e0c:	dec00204 	addi	sp,sp,8
   14e10:	f800283a 	ret
   14e14:	00c002c4 	movi	r3,11
   14e18:	1887c83a 	sub	r3,r3,r2
   14e1c:	80c6d83a 	srl	r3,r16,r3
   14e20:	01400434 	movhi	r5,16
   14e24:	10800544 	addi	r2,r2,21
   14e28:	297fffc4 	addi	r5,r5,-1
   14e2c:	8084983a 	sll	r2,r16,r2
   14e30:	1946703a 	and	r3,r3,r5
   14e34:	003fee06 	br	14df0 <__alt_mem_mcu_subsystem_ram_0+0x77ff4df0>
   14e38:	0009883a 	mov	r4,zero
   14e3c:	0007883a 	mov	r3,zero
   14e40:	0005883a 	mov	r2,zero
   14e44:	003fea06 	br	14df0 <__alt_mem_mcu_subsystem_ram_0+0x77ff4df0>

00014e48 <__extendsfdf2>:
   14e48:	200ad5fa 	srli	r5,r4,23
   14e4c:	defffd04 	addi	sp,sp,-12
   14e50:	dc000015 	stw	r16,0(sp)
   14e54:	29403fcc 	andi	r5,r5,255
   14e58:	28800044 	addi	r2,r5,1
   14e5c:	04002034 	movhi	r16,128
   14e60:	10803fcc 	andi	r2,r2,255
   14e64:	dc400115 	stw	r17,4(sp)
   14e68:	843fffc4 	addi	r16,r16,-1
   14e6c:	dfc00215 	stw	ra,8(sp)
   14e70:	10800090 	cmplti	r2,r2,2
   14e74:	8120703a 	and	r16,r16,r4
   14e78:	2022d7fa 	srli	r17,r4,31
   14e7c:	1000101e 	bne	r2,zero,14ec0 <__extendsfdf2+0x78>
   14e80:	8004d0fa 	srli	r2,r16,3
   14e84:	8020977a 	slli	r16,r16,29
   14e88:	2940e004 	addi	r5,r5,896
   14e8c:	01800434 	movhi	r6,16
   14e90:	280a953a 	slli	r5,r5,20
   14e94:	31bfffc4 	addi	r6,r6,-1
   14e98:	880697fa 	slli	r3,r17,31
   14e9c:	1184703a 	and	r2,r2,r6
   14ea0:	114ab03a 	or	r5,r2,r5
   14ea4:	28c6b03a 	or	r3,r5,r3
   14ea8:	8005883a 	mov	r2,r16
   14eac:	dfc00217 	ldw	ra,8(sp)
   14eb0:	dc400117 	ldw	r17,4(sp)
   14eb4:	dc000017 	ldw	r16,0(sp)
   14eb8:	dec00304 	addi	sp,sp,12
   14ebc:	f800283a 	ret
   14ec0:	2800111e 	bne	r5,zero,14f08 <__extendsfdf2+0xc0>
   14ec4:	80001c26 	beq	r16,zero,14f38 <__extendsfdf2+0xf0>
   14ec8:	8009883a 	mov	r4,r16
   14ecc:	0014f540 	call	14f54 <__clzsi2>
   14ed0:	10c002c8 	cmpgei	r3,r2,11
   14ed4:	18001b1e 	bne	r3,zero,14f44 <__extendsfdf2+0xfc>
   14ed8:	018002c4 	movi	r6,11
   14edc:	308dc83a 	sub	r6,r6,r2
   14ee0:	10c00544 	addi	r3,r2,21
   14ee4:	818cd83a 	srl	r6,r16,r6
   14ee8:	80e0983a 	sll	r16,r16,r3
   14eec:	00c00434 	movhi	r3,16
   14ef0:	0140e244 	movi	r5,905
   14ef4:	288bc83a 	sub	r5,r5,r2
   14ef8:	18ffffc4 	addi	r3,r3,-1
   14efc:	30c4703a 	and	r2,r6,r3
   14f00:	2941ffcc 	andi	r5,r5,2047
   14f04:	003fe106 	br	14e8c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e8c>
   14f08:	80000826 	beq	r16,zero,14f2c <__extendsfdf2+0xe4>
   14f0c:	8004d0fa 	srli	r2,r16,3
   14f10:	00c00434 	movhi	r3,16
   14f14:	18ffffc4 	addi	r3,r3,-1
   14f18:	10800234 	orhi	r2,r2,8
   14f1c:	8020977a 	slli	r16,r16,29
   14f20:	10c4703a 	and	r2,r2,r3
   14f24:	0141ffc4 	movi	r5,2047
   14f28:	003fd806 	br	14e8c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e8c>
   14f2c:	0141ffc4 	movi	r5,2047
   14f30:	0005883a 	mov	r2,zero
   14f34:	003fd506 	br	14e8c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e8c>
   14f38:	000b883a 	mov	r5,zero
   14f3c:	0005883a 	mov	r2,zero
   14f40:	003fd206 	br	14e8c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e8c>
   14f44:	11bffd44 	addi	r6,r2,-11
   14f48:	818c983a 	sll	r6,r16,r6
   14f4c:	0021883a 	mov	r16,zero
   14f50:	003fe606 	br	14eec <__alt_mem_mcu_subsystem_ram_0+0x77ff4eec>

00014f54 <__clzsi2>:
   14f54:	00bfffd4 	movui	r2,65535
   14f58:	11000436 	bltu	r2,r4,14f6c <__clzsi2+0x18>
   14f5c:	20804030 	cmpltui	r2,r4,256
   14f60:	10000b26 	beq	r2,zero,14f90 <__clzsi2+0x3c>
   14f64:	01400804 	movi	r5,32
   14f68:	00000406 	br	14f7c <__clzsi2+0x28>
   14f6c:	00804034 	movhi	r2,256
   14f70:	20800a36 	bltu	r4,r2,14f9c <__clzsi2+0x48>
   14f74:	2008d63a 	srli	r4,r4,24
   14f78:	01400204 	movi	r5,8
   14f7c:	00c000f4 	movhi	r3,3
   14f80:	20c7883a 	add	r3,r4,r3
   14f84:	188d6ac3 	ldbu	r2,13739(r3)
   14f88:	2885c83a 	sub	r2,r5,r2
   14f8c:	f800283a 	ret
   14f90:	2008d23a 	srli	r4,r4,8
   14f94:	01400604 	movi	r5,24
   14f98:	003ff806 	br	14f7c <__alt_mem_mcu_subsystem_ram_0+0x77ff4f7c>
   14f9c:	2008d43a 	srli	r4,r4,16
   14fa0:	01400404 	movi	r5,16
   14fa4:	003ff506 	br	14f7c <__alt_mem_mcu_subsystem_ram_0+0x77ff4f7c>

00014fa8 <calloc>:
   14fa8:	008000f4 	movhi	r2,3
   14fac:	280d883a 	mov	r6,r5
   14fb0:	200b883a 	mov	r5,r4
   14fb4:	111e6617 	ldw	r4,31128(r2)
   14fb8:	0014fbc1 	jmpi	14fbc <_calloc_r>

00014fbc <_calloc_r>:
   14fbc:	298b383a 	mul	r5,r5,r6
   14fc0:	defffe04 	addi	sp,sp,-8
   14fc4:	dc000015 	stw	r16,0(sp)
   14fc8:	dfc00115 	stw	ra,4(sp)
   14fcc:	001527c0 	call	1527c <_malloc_r>
   14fd0:	1021883a 	mov	r16,r2
   14fd4:	10001626 	beq	r2,zero,15030 <_calloc_r+0x74>
   14fd8:	11bfff17 	ldw	r6,-4(r2)
   14fdc:	00bfff04 	movi	r2,-4
   14fe0:	308c703a 	and	r6,r6,r2
   14fe4:	31bfff04 	addi	r6,r6,-4
   14fe8:	30800968 	cmpgeui	r2,r6,37
   14fec:	10001a1e 	bne	r2,zero,15058 <_calloc_r+0x9c>
   14ff0:	30800530 	cmpltui	r2,r6,20
   14ff4:	1000131e 	bne	r2,zero,15044 <_calloc_r+0x88>
   14ff8:	80000015 	stw	zero,0(r16)
   14ffc:	80000115 	stw	zero,4(r16)
   15000:	30800728 	cmpgeui	r2,r6,28
   15004:	10001826 	beq	r2,zero,15068 <_calloc_r+0xac>
   15008:	80000215 	stw	zero,8(r16)
   1500c:	80000315 	stw	zero,12(r16)
   15010:	31800920 	cmpeqi	r6,r6,36
   15014:	30001626 	beq	r6,zero,15070 <_calloc_r+0xb4>
   15018:	80000415 	stw	zero,16(r16)
   1501c:	80800604 	addi	r2,r16,24
   15020:	80000515 	stw	zero,20(r16)
   15024:	10000015 	stw	zero,0(r2)
   15028:	10000115 	stw	zero,4(r2)
   1502c:	10000215 	stw	zero,8(r2)
   15030:	8005883a 	mov	r2,r16
   15034:	dfc00117 	ldw	ra,4(sp)
   15038:	dc000017 	ldw	r16,0(sp)
   1503c:	dec00204 	addi	sp,sp,8
   15040:	f800283a 	ret
   15044:	8005883a 	mov	r2,r16
   15048:	10000015 	stw	zero,0(r2)
   1504c:	10000115 	stw	zero,4(r2)
   15050:	10000215 	stw	zero,8(r2)
   15054:	003ff606 	br	15030 <__alt_mem_mcu_subsystem_ram_0+0x77ff5030>
   15058:	000b883a 	mov	r5,zero
   1505c:	8009883a 	mov	r4,r16
   15060:	0015bb00 	call	15bb0 <memset>
   15064:	003ff206 	br	15030 <__alt_mem_mcu_subsystem_ram_0+0x77ff5030>
   15068:	80800204 	addi	r2,r16,8
   1506c:	003ff606 	br	15048 <__alt_mem_mcu_subsystem_ram_0+0x77ff5048>
   15070:	80800404 	addi	r2,r16,16
   15074:	003ff406 	br	15048 <__alt_mem_mcu_subsystem_ram_0+0x77ff5048>

00015078 <_getc_r>:
   15078:	defffd04 	addi	sp,sp,-12
   1507c:	dc000115 	stw	r16,4(sp)
   15080:	dfc00215 	stw	ra,8(sp)
   15084:	2021883a 	mov	r16,r4
   15088:	20000226 	beq	r4,zero,15094 <_getc_r+0x1c>
   1508c:	20800e17 	ldw	r2,56(r4)
   15090:	10000c26 	beq	r2,zero,150c4 <_getc_r+0x4c>
   15094:	28800117 	ldw	r2,4(r5)
   15098:	10bfffc4 	addi	r2,r2,-1
   1509c:	28800115 	stw	r2,4(r5)
   150a0:	10000f16 	blt	r2,zero,150e0 <_getc_r+0x68>
   150a4:	28800017 	ldw	r2,0(r5)
   150a8:	10c00044 	addi	r3,r2,1
   150ac:	28c00015 	stw	r3,0(r5)
   150b0:	10800003 	ldbu	r2,0(r2)
   150b4:	dfc00217 	ldw	ra,8(sp)
   150b8:	dc000117 	ldw	r16,4(sp)
   150bc:	dec00304 	addi	sp,sp,12
   150c0:	f800283a 	ret
   150c4:	d9400015 	stw	r5,0(sp)
   150c8:	001d0240 	call	1d024 <__sinit>
   150cc:	d9400017 	ldw	r5,0(sp)
   150d0:	28800117 	ldw	r2,4(r5)
   150d4:	10bfffc4 	addi	r2,r2,-1
   150d8:	28800115 	stw	r2,4(r5)
   150dc:	103ff10e 	bge	r2,zero,150a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff50a4>
   150e0:	8009883a 	mov	r4,r16
   150e4:	dfc00217 	ldw	ra,8(sp)
   150e8:	dc000117 	ldw	r16,4(sp)
   150ec:	dec00304 	addi	sp,sp,12
   150f0:	00164801 	jmpi	16480 <__srget_r>

000150f4 <getc>:
   150f4:	defffd04 	addi	sp,sp,-12
   150f8:	008000f4 	movhi	r2,3
   150fc:	dc400115 	stw	r17,4(sp)
   15100:	145e6617 	ldw	r17,31128(r2)
   15104:	dc000015 	stw	r16,0(sp)
   15108:	dfc00215 	stw	ra,8(sp)
   1510c:	2021883a 	mov	r16,r4
   15110:	88000226 	beq	r17,zero,1511c <getc+0x28>
   15114:	88800e17 	ldw	r2,56(r17)
   15118:	10000d26 	beq	r2,zero,15150 <getc+0x5c>
   1511c:	80800117 	ldw	r2,4(r16)
   15120:	10bfffc4 	addi	r2,r2,-1
   15124:	80800115 	stw	r2,4(r16)
   15128:	10000f16 	blt	r2,zero,15168 <getc+0x74>
   1512c:	80800017 	ldw	r2,0(r16)
   15130:	10c00044 	addi	r3,r2,1
   15134:	80c00015 	stw	r3,0(r16)
   15138:	10800003 	ldbu	r2,0(r2)
   1513c:	dfc00217 	ldw	ra,8(sp)
   15140:	dc400117 	ldw	r17,4(sp)
   15144:	dc000017 	ldw	r16,0(sp)
   15148:	dec00304 	addi	sp,sp,12
   1514c:	f800283a 	ret
   15150:	8809883a 	mov	r4,r17
   15154:	001d0240 	call	1d024 <__sinit>
   15158:	80800117 	ldw	r2,4(r16)
   1515c:	10bfffc4 	addi	r2,r2,-1
   15160:	80800115 	stw	r2,4(r16)
   15164:	103ff10e 	bge	r2,zero,1512c <__alt_mem_mcu_subsystem_ram_0+0x77ff512c>
   15168:	800b883a 	mov	r5,r16
   1516c:	8809883a 	mov	r4,r17
   15170:	dfc00217 	ldw	ra,8(sp)
   15174:	dc400117 	ldw	r17,4(sp)
   15178:	dc000017 	ldw	r16,0(sp)
   1517c:	dec00304 	addi	sp,sp,12
   15180:	00164801 	jmpi	16480 <__srget_r>

00015184 <_setlocale_r>:
   15184:	30001b26 	beq	r6,zero,151f4 <_setlocale_r+0x70>
   15188:	014000f4 	movhi	r5,3
   1518c:	defffe04 	addi	sp,sp,-8
   15190:	294dac04 	addi	r5,r5,14000
   15194:	3009883a 	mov	r4,r6
   15198:	dc000015 	stw	r16,0(sp)
   1519c:	dfc00115 	stw	ra,4(sp)
   151a0:	3021883a 	mov	r16,r6
   151a4:	00166140 	call	16614 <strcmp>
   151a8:	1000061e 	bne	r2,zero,151c4 <_setlocale_r+0x40>
   151ac:	008000f4 	movhi	r2,3
   151b0:	108dab04 	addi	r2,r2,13996
   151b4:	dfc00117 	ldw	ra,4(sp)
   151b8:	dc000017 	ldw	r16,0(sp)
   151bc:	dec00204 	addi	sp,sp,8
   151c0:	f800283a 	ret
   151c4:	014000f4 	movhi	r5,3
   151c8:	294dab04 	addi	r5,r5,13996
   151cc:	8009883a 	mov	r4,r16
   151d0:	00166140 	call	16614 <strcmp>
   151d4:	103ff526 	beq	r2,zero,151ac <__alt_mem_mcu_subsystem_ram_0+0x77ff51ac>
   151d8:	014000f4 	movhi	r5,3
   151dc:	294dd004 	addi	r5,r5,14144
   151e0:	8009883a 	mov	r4,r16
   151e4:	00166140 	call	16614 <strcmp>
   151e8:	103ff026 	beq	r2,zero,151ac <__alt_mem_mcu_subsystem_ram_0+0x77ff51ac>
   151ec:	0005883a 	mov	r2,zero
   151f0:	003ff006 	br	151b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff51b4>
   151f4:	008000f4 	movhi	r2,3
   151f8:	108dab04 	addi	r2,r2,13996
   151fc:	f800283a 	ret

00015200 <__locale_mb_cur_max>:
   15200:	008000f4 	movhi	r2,3
   15204:	109e6617 	ldw	r2,31128(r2)
   15208:	10800d17 	ldw	r2,52(r2)
   1520c:	1000021e 	bne	r2,zero,15218 <__locale_mb_cur_max+0x18>
   15210:	008000f4 	movhi	r2,3
   15214:	10980104 	addi	r2,r2,24580
   15218:	10804a07 	ldb	r2,296(r2)
   1521c:	f800283a 	ret

00015220 <__locale_ctype_ptr_l>:
   15220:	20803b17 	ldw	r2,236(r4)
   15224:	f800283a 	ret

00015228 <__locale_ctype_ptr>:
   15228:	008000f4 	movhi	r2,3
   1522c:	109e6617 	ldw	r2,31128(r2)
   15230:	10800d17 	ldw	r2,52(r2)
   15234:	1000021e 	bne	r2,zero,15240 <__locale_ctype_ptr+0x18>
   15238:	008000f4 	movhi	r2,3
   1523c:	10980104 	addi	r2,r2,24580
   15240:	10803b17 	ldw	r2,236(r2)
   15244:	f800283a 	ret

00015248 <setlocale>:
   15248:	008000f4 	movhi	r2,3
   1524c:	280d883a 	mov	r6,r5
   15250:	200b883a 	mov	r5,r4
   15254:	111e6617 	ldw	r4,31128(r2)
   15258:	00151841 	jmpi	15184 <_setlocale_r>

0001525c <malloc>:
   1525c:	008000f4 	movhi	r2,3
   15260:	200b883a 	mov	r5,r4
   15264:	111e6617 	ldw	r4,31128(r2)
   15268:	001527c1 	jmpi	1527c <_malloc_r>

0001526c <free>:
   1526c:	008000f4 	movhi	r2,3
   15270:	200b883a 	mov	r5,r4
   15274:	111e6617 	ldw	r4,31128(r2)
   15278:	001d1881 	jmpi	1d188 <_free_r>

0001527c <_malloc_r>:
   1527c:	defff804 	addi	sp,sp,-32
   15280:	dc400115 	stw	r17,4(sp)
   15284:	2c4002c4 	addi	r17,r5,11
   15288:	dcc00315 	stw	r19,12(sp)
   1528c:	dfc00715 	stw	ra,28(sp)
   15290:	dd800615 	stw	r22,24(sp)
   15294:	dd400515 	stw	r21,20(sp)
   15298:	dd000415 	stw	r20,16(sp)
   1529c:	dc800215 	stw	r18,8(sp)
   152a0:	dc000015 	stw	r16,0(sp)
   152a4:	888005e8 	cmpgeui	r2,r17,23
   152a8:	2027883a 	mov	r19,r4
   152ac:	1000241e 	bne	r2,zero,15340 <_malloc_r+0xc4>
   152b0:	29400468 	cmpgeui	r5,r5,17
   152b4:	28009e1e 	bne	r5,zero,15530 <_malloc_r+0x2b4>
   152b8:	002595c0 	call	2595c <__malloc_lock>
   152bc:	04400404 	movi	r17,16
   152c0:	00800604 	movi	r2,24
   152c4:	01800084 	movi	r6,2
   152c8:	048000f4 	movhi	r18,3
   152cc:	94985c04 	addi	r18,r18,24944
   152d0:	9085883a 	add	r2,r18,r2
   152d4:	14000117 	ldw	r16,4(r2)
   152d8:	10fffe04 	addi	r3,r2,-8
   152dc:	80c10e26 	beq	r16,r3,15718 <_malloc_r+0x49c>
   152e0:	80800117 	ldw	r2,4(r16)
   152e4:	81000317 	ldw	r4,12(r16)
   152e8:	00ffff04 	movi	r3,-4
   152ec:	10c4703a 	and	r2,r2,r3
   152f0:	81400217 	ldw	r5,8(r16)
   152f4:	8085883a 	add	r2,r16,r2
   152f8:	10c00117 	ldw	r3,4(r2)
   152fc:	29000315 	stw	r4,12(r5)
   15300:	21400215 	stw	r5,8(r4)
   15304:	18c00054 	ori	r3,r3,1
   15308:	10c00115 	stw	r3,4(r2)
   1530c:	9809883a 	mov	r4,r19
   15310:	00259800 	call	25980 <__malloc_unlock>
   15314:	80800204 	addi	r2,r16,8
   15318:	dfc00717 	ldw	ra,28(sp)
   1531c:	dd800617 	ldw	r22,24(sp)
   15320:	dd400517 	ldw	r21,20(sp)
   15324:	dd000417 	ldw	r20,16(sp)
   15328:	dcc00317 	ldw	r19,12(sp)
   1532c:	dc800217 	ldw	r18,8(sp)
   15330:	dc400117 	ldw	r17,4(sp)
   15334:	dc000017 	ldw	r16,0(sp)
   15338:	dec00804 	addi	sp,sp,32
   1533c:	f800283a 	ret
   15340:	00bffe04 	movi	r2,-8
   15344:	88a2703a 	and	r17,r17,r2
   15348:	88007916 	blt	r17,zero,15530 <_malloc_r+0x2b4>
   1534c:	89407836 	bltu	r17,r5,15530 <_malloc_r+0x2b4>
   15350:	002595c0 	call	2595c <__malloc_lock>
   15354:	88807e28 	cmpgeui	r2,r17,504
   15358:	10011326 	beq	r2,zero,157a8 <_malloc_r+0x52c>
   1535c:	8804d27a 	srli	r2,r17,9
   15360:	10007726 	beq	r2,zero,15540 <_malloc_r+0x2c4>
   15364:	10c00168 	cmpgeui	r3,r2,5
   15368:	1800f71e 	bne	r3,zero,15748 <_malloc_r+0x4cc>
   1536c:	8804d1ba 	srli	r2,r17,6
   15370:	11800e44 	addi	r6,r2,57
   15374:	300890fa 	slli	r4,r6,3
   15378:	12000e04 	addi	r8,r2,56
   1537c:	048000f4 	movhi	r18,3
   15380:	94985c04 	addi	r18,r18,24944
   15384:	9109883a 	add	r4,r18,r4
   15388:	24000117 	ldw	r16,4(r4)
   1538c:	213ffe04 	addi	r4,r4,-8
   15390:	24001126 	beq	r4,r16,153d8 <_malloc_r+0x15c>
   15394:	80800117 	ldw	r2,4(r16)
   15398:	00ffff04 	movi	r3,-4
   1539c:	10c4703a 	and	r2,r2,r3
   153a0:	1447c83a 	sub	r3,r2,r17
   153a4:	19400408 	cmpgei	r5,r3,16
   153a8:	2800d71e 	bne	r5,zero,15708 <_malloc_r+0x48c>
   153ac:	1800d80e 	bge	r3,zero,15710 <_malloc_r+0x494>
   153b0:	01ffff04 	movi	r7,-4
   153b4:	00000606 	br	153d0 <_malloc_r+0x154>
   153b8:	80800117 	ldw	r2,4(r16)
   153bc:	11c4703a 	and	r2,r2,r7
   153c0:	1447c83a 	sub	r3,r2,r17
   153c4:	19400408 	cmpgei	r5,r3,16
   153c8:	2800cf1e 	bne	r5,zero,15708 <_malloc_r+0x48c>
   153cc:	1800d00e 	bge	r3,zero,15710 <_malloc_r+0x494>
   153d0:	84000317 	ldw	r16,12(r16)
   153d4:	243ff81e 	bne	r4,r16,153b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff53b8>
   153d8:	94000417 	ldw	r16,16(r18)
   153dc:	014000f4 	movhi	r5,3
   153e0:	29585e04 	addi	r5,r5,24952
   153e4:	81405a26 	beq	r16,r5,15550 <_malloc_r+0x2d4>
   153e8:	80c00117 	ldw	r3,4(r16)
   153ec:	00bfff04 	movi	r2,-4
   153f0:	188e703a 	and	r7,r3,r2
   153f4:	3c45c83a 	sub	r2,r7,r17
   153f8:	10c00410 	cmplti	r3,r2,16
   153fc:	1800db26 	beq	r3,zero,1576c <_malloc_r+0x4f0>
   15400:	91400515 	stw	r5,20(r18)
   15404:	91400415 	stw	r5,16(r18)
   15408:	1000c70e 	bge	r2,zero,15728 <_malloc_r+0x4ac>
   1540c:	38808028 	cmpgeui	r2,r7,512
   15410:	1000f91e 	bne	r2,zero,157f8 <_malloc_r+0x57c>
   15414:	3804d0fa 	srli	r2,r7,3
   15418:	92000117 	ldw	r8,4(r18)
   1541c:	10c00044 	addi	r3,r2,1
   15420:	100fd0ba 	srai	r7,r2,2
   15424:	180690fa 	slli	r3,r3,3
   15428:	00800044 	movi	r2,1
   1542c:	11c4983a 	sll	r2,r2,r7
   15430:	90c7883a 	add	r3,r18,r3
   15434:	19000017 	ldw	r4,0(r3)
   15438:	1204b03a 	or	r2,r2,r8
   1543c:	19fffe04 	addi	r7,r3,-8
   15440:	81c00315 	stw	r7,12(r16)
   15444:	81000215 	stw	r4,8(r16)
   15448:	90800115 	stw	r2,4(r18)
   1544c:	1c000015 	stw	r16,0(r3)
   15450:	24000315 	stw	r16,12(r4)
   15454:	3007d0ba 	srai	r3,r6,2
   15458:	01000044 	movi	r4,1
   1545c:	20c8983a 	sll	r4,r4,r3
   15460:	11004036 	bltu	r2,r4,15564 <_malloc_r+0x2e8>
   15464:	2086703a 	and	r3,r4,r2
   15468:	18000a1e 	bne	r3,zero,15494 <_malloc_r+0x218>
   1546c:	00ffff04 	movi	r3,-4
   15470:	2109883a 	add	r4,r4,r4
   15474:	30cc703a 	and	r6,r6,r3
   15478:	2086703a 	and	r3,r4,r2
   1547c:	31800104 	addi	r6,r6,4
   15480:	1800041e 	bne	r3,zero,15494 <_malloc_r+0x218>
   15484:	2109883a 	add	r4,r4,r4
   15488:	2086703a 	and	r3,r4,r2
   1548c:	31800104 	addi	r6,r6,4
   15490:	183ffc26 	beq	r3,zero,15484 <__alt_mem_mcu_subsystem_ram_0+0x77ff5484>
   15494:	027fff04 	movi	r9,-4
   15498:	301490fa 	slli	r10,r6,3
   1549c:	3017883a 	mov	r11,r6
   154a0:	9295883a 	add	r10,r18,r10
   154a4:	5011883a 	mov	r8,r10
   154a8:	44000317 	ldw	r16,12(r8)
   154ac:	4400c126 	beq	r8,r16,157b4 <_malloc_r+0x538>
   154b0:	80800117 	ldw	r2,4(r16)
   154b4:	1244703a 	and	r2,r2,r9
   154b8:	1447c83a 	sub	r3,r2,r17
   154bc:	19c00408 	cmpgei	r7,r3,16
   154c0:	3800081e 	bne	r7,zero,154e4 <_malloc_r+0x268>
   154c4:	1800c00e 	bge	r3,zero,157c8 <_malloc_r+0x54c>
   154c8:	84000317 	ldw	r16,12(r16)
   154cc:	4400b926 	beq	r8,r16,157b4 <_malloc_r+0x538>
   154d0:	80800117 	ldw	r2,4(r16)
   154d4:	1244703a 	and	r2,r2,r9
   154d8:	1447c83a 	sub	r3,r2,r17
   154dc:	19c00410 	cmplti	r7,r3,16
   154e0:	383ff81e 	bne	r7,zero,154c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff54c4>
   154e4:	81000317 	ldw	r4,12(r16)
   154e8:	81800217 	ldw	r6,8(r16)
   154ec:	89c00054 	ori	r7,r17,1
   154f0:	81c00115 	stw	r7,4(r16)
   154f4:	31000315 	stw	r4,12(r6)
   154f8:	21800215 	stw	r6,8(r4)
   154fc:	8463883a 	add	r17,r16,r17
   15500:	94400515 	stw	r17,20(r18)
   15504:	94400415 	stw	r17,16(r18)
   15508:	19000054 	ori	r4,r3,1
   1550c:	89000115 	stw	r4,4(r17)
   15510:	8085883a 	add	r2,r16,r2
   15514:	89400315 	stw	r5,12(r17)
   15518:	89400215 	stw	r5,8(r17)
   1551c:	10c00015 	stw	r3,0(r2)
   15520:	9809883a 	mov	r4,r19
   15524:	00259800 	call	25980 <__malloc_unlock>
   15528:	80800204 	addi	r2,r16,8
   1552c:	003f7a06 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   15530:	00800304 	movi	r2,12
   15534:	98800015 	stw	r2,0(r19)
   15538:	0005883a 	mov	r2,zero
   1553c:	003f7606 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   15540:	01008004 	movi	r4,512
   15544:	01801004 	movi	r6,64
   15548:	02000fc4 	movi	r8,63
   1554c:	003f8b06 	br	1537c <__alt_mem_mcu_subsystem_ram_0+0x77ff537c>
   15550:	3007d0ba 	srai	r3,r6,2
   15554:	01000044 	movi	r4,1
   15558:	90800117 	ldw	r2,4(r18)
   1555c:	20c8983a 	sll	r4,r4,r3
   15560:	113fc02e 	bgeu	r2,r4,15464 <__alt_mem_mcu_subsystem_ram_0+0x77ff5464>
   15564:	94000217 	ldw	r16,8(r18)
   15568:	00bfff04 	movi	r2,-4
   1556c:	85400117 	ldw	r21,4(r16)
   15570:	a8aa703a 	and	r21,r21,r2
   15574:	ac400336 	bltu	r21,r17,15584 <_malloc_r+0x308>
   15578:	ac45c83a 	sub	r2,r21,r17
   1557c:	10c00408 	cmpgei	r3,r2,16
   15580:	1800571e 	bne	r3,zero,156e0 <_malloc_r+0x464>
   15584:	008000f4 	movhi	r2,3
   15588:	109e6717 	ldw	r2,31132(r2)
   1558c:	00c00134 	movhi	r3,4
   15590:	1d260f17 	ldw	r20,-26564(r3)
   15594:	10bfffd8 	cmpnei	r2,r2,-1
   15598:	8d29883a 	add	r20,r17,r20
   1559c:	1000da26 	beq	r2,zero,15908 <_malloc_r+0x68c>
   155a0:	a50403c4 	addi	r20,r20,4111
   155a4:	00bc0004 	movi	r2,-4096
   155a8:	a0a8703a 	and	r20,r20,r2
   155ac:	a00b883a 	mov	r5,r20
   155b0:	9809883a 	mov	r4,r19
   155b4:	00165040 	call	16504 <_sbrk_r>
   155b8:	102d883a 	mov	r22,r2
   155bc:	10bfffd8 	cmpnei	r2,r2,-1
   155c0:	1000ab26 	beq	r2,zero,15870 <_malloc_r+0x5f4>
   155c4:	8547883a 	add	r3,r16,r21
   155c8:	b0c0a836 	bltu	r22,r3,1586c <_malloc_r+0x5f0>
   155cc:	008202b4 	movhi	r2,2058
   155d0:	108af417 	ldw	r2,11216(r2)
   155d4:	010202b4 	movhi	r4,2058
   155d8:	a085883a 	add	r2,r20,r2
   155dc:	208af415 	stw	r2,11216(r4)
   155e0:	1d80e226 	beq	r3,r22,1596c <_malloc_r+0x6f0>
   155e4:	010000f4 	movhi	r4,3
   155e8:	211e6717 	ldw	r4,31132(r4)
   155ec:	213fffd8 	cmpnei	r4,r4,-1
   155f0:	2000f226 	beq	r4,zero,159bc <_malloc_r+0x740>
   155f4:	b0c7c83a 	sub	r3,r22,r3
   155f8:	1885883a 	add	r2,r3,r2
   155fc:	00c202b4 	movhi	r3,2058
   15600:	188af415 	stw	r2,11216(r3)
   15604:	b0c001cc 	andi	r3,r22,7
   15608:	1800cf26 	beq	r3,zero,15948 <_malloc_r+0x6cc>
   1560c:	b0edc83a 	sub	r22,r22,r3
   15610:	00840204 	movi	r2,4104
   15614:	b5800204 	addi	r22,r22,8
   15618:	10c5c83a 	sub	r2,r2,r3
   1561c:	b529883a 	add	r20,r22,r20
   15620:	a503ffcc 	andi	r20,r20,4095
   15624:	1529c83a 	sub	r20,r2,r20
   15628:	a00b883a 	mov	r5,r20
   1562c:	9809883a 	mov	r4,r19
   15630:	00165040 	call	16504 <_sbrk_r>
   15634:	10ffffe0 	cmpeqi	r3,r2,-1
   15638:	1800dd1e 	bne	r3,zero,159b0 <_malloc_r+0x734>
   1563c:	1587c83a 	sub	r3,r2,r22
   15640:	1d07883a 	add	r3,r3,r20
   15644:	18c00054 	ori	r3,r3,1
   15648:	008202b4 	movhi	r2,2058
   1564c:	108af417 	ldw	r2,11216(r2)
   15650:	95800215 	stw	r22,8(r18)
   15654:	010202b4 	movhi	r4,2058
   15658:	a085883a 	add	r2,r20,r2
   1565c:	208af415 	stw	r2,11216(r4)
   15660:	b0c00115 	stw	r3,4(r22)
   15664:	84800f26 	beq	r16,r18,156a4 <_malloc_r+0x428>
   15668:	a8c00428 	cmpgeui	r3,r21,16
   1566c:	1800cd26 	beq	r3,zero,159a4 <_malloc_r+0x728>
   15670:	81000117 	ldw	r4,4(r16)
   15674:	017ffe04 	movi	r5,-8
   15678:	a8fffd04 	addi	r3,r21,-12
   1567c:	1946703a 	and	r3,r3,r5
   15680:	2100004c 	andi	r4,r4,1
   15684:	20c8b03a 	or	r4,r4,r3
   15688:	81000115 	stw	r4,4(r16)
   1568c:	01400144 	movi	r5,5
   15690:	80c9883a 	add	r4,r16,r3
   15694:	21400115 	stw	r5,4(r4)
   15698:	21400215 	stw	r5,8(r4)
   1569c:	18c00430 	cmpltui	r3,r3,16
   156a0:	1800da26 	beq	r3,zero,15a0c <_malloc_r+0x790>
   156a4:	00c00134 	movhi	r3,4
   156a8:	18e60e17 	ldw	r3,-26568(r3)
   156ac:	1880022e 	bgeu	r3,r2,156b8 <_malloc_r+0x43c>
   156b0:	00c00134 	movhi	r3,4
   156b4:	18a60e15 	stw	r2,-26568(r3)
   156b8:	94000217 	ldw	r16,8(r18)
   156bc:	00c00134 	movhi	r3,4
   156c0:	19260d17 	ldw	r4,-26572(r3)
   156c4:	80c00117 	ldw	r3,4(r16)
   156c8:	017fff04 	movi	r5,-4
   156cc:	1946703a 	and	r3,r3,r5
   156d0:	20806b2e 	bgeu	r4,r2,15880 <_malloc_r+0x604>
   156d4:	01000134 	movhi	r4,4
   156d8:	20a60d15 	stw	r2,-26572(r4)
   156dc:	00006806 	br	15880 <_malloc_r+0x604>
   156e0:	88c00054 	ori	r3,r17,1
   156e4:	80c00115 	stw	r3,4(r16)
   156e8:	8463883a 	add	r17,r16,r17
   156ec:	10800054 	ori	r2,r2,1
   156f0:	94400215 	stw	r17,8(r18)
   156f4:	88800115 	stw	r2,4(r17)
   156f8:	9809883a 	mov	r4,r19
   156fc:	00259800 	call	25980 <__malloc_unlock>
   15700:	80800204 	addi	r2,r16,8
   15704:	003f0406 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   15708:	400d883a 	mov	r6,r8
   1570c:	003f3206 	br	153d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff53d8>
   15710:	81000317 	ldw	r4,12(r16)
   15714:	003ef606 	br	152f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff52f0>
   15718:	14000317 	ldw	r16,12(r2)
   1571c:	31800084 	addi	r6,r6,2
   15720:	143f2d26 	beq	r2,r16,153d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff53d8>
   15724:	003eee06 	br	152e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff52e0>
   15728:	81c5883a 	add	r2,r16,r7
   1572c:	11400117 	ldw	r5,4(r2)
   15730:	9809883a 	mov	r4,r19
   15734:	29400054 	ori	r5,r5,1
   15738:	11400115 	stw	r5,4(r2)
   1573c:	00259800 	call	25980 <__malloc_unlock>
   15740:	80800204 	addi	r2,r16,8
   15744:	003ef406 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   15748:	10c00568 	cmpgeui	r3,r2,21
   1574c:	18004326 	beq	r3,zero,1585c <_malloc_r+0x5e0>
   15750:	10c01568 	cmpgeui	r3,r2,85
   15754:	18006e1e 	bne	r3,zero,15910 <_malloc_r+0x694>
   15758:	8804d33a 	srli	r2,r17,12
   1575c:	11801bc4 	addi	r6,r2,111
   15760:	12001b84 	addi	r8,r2,110
   15764:	300890fa 	slli	r4,r6,3
   15768:	003f0406 	br	1537c <__alt_mem_mcu_subsystem_ram_0+0x77ff537c>
   1576c:	88c00054 	ori	r3,r17,1
   15770:	80c00115 	stw	r3,4(r16)
   15774:	8463883a 	add	r17,r16,r17
   15778:	94400515 	stw	r17,20(r18)
   1577c:	94400415 	stw	r17,16(r18)
   15780:	10c00054 	ori	r3,r2,1
   15784:	88c00115 	stw	r3,4(r17)
   15788:	89400315 	stw	r5,12(r17)
   1578c:	89400215 	stw	r5,8(r17)
   15790:	81c7883a 	add	r3,r16,r7
   15794:	18800015 	stw	r2,0(r3)
   15798:	9809883a 	mov	r4,r19
   1579c:	00259800 	call	25980 <__malloc_unlock>
   157a0:	80800204 	addi	r2,r16,8
   157a4:	003edc06 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   157a8:	880cd0fa 	srli	r6,r17,3
   157ac:	88800204 	addi	r2,r17,8
   157b0:	003ec506 	br	152c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff52c8>
   157b4:	5ac00044 	addi	r11,r11,1
   157b8:	588000cc 	andi	r2,r11,3
   157bc:	42000204 	addi	r8,r8,8
   157c0:	103f391e 	bne	r2,zero,154a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff54a8>
   157c4:	00003e06 	br	158c0 <_malloc_r+0x644>
   157c8:	8085883a 	add	r2,r16,r2
   157cc:	10c00117 	ldw	r3,4(r2)
   157d0:	81000317 	ldw	r4,12(r16)
   157d4:	81400217 	ldw	r5,8(r16)
   157d8:	18c00054 	ori	r3,r3,1
   157dc:	10c00115 	stw	r3,4(r2)
   157e0:	29000315 	stw	r4,12(r5)
   157e4:	21400215 	stw	r5,8(r4)
   157e8:	9809883a 	mov	r4,r19
   157ec:	00259800 	call	25980 <__malloc_unlock>
   157f0:	80800204 	addi	r2,r16,8
   157f4:	003ec806 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   157f8:	3804d27a 	srli	r2,r7,9
   157fc:	10c00168 	cmpgeui	r3,r2,5
   15800:	18002726 	beq	r3,zero,158a0 <_malloc_r+0x624>
   15804:	10c00568 	cmpgeui	r3,r2,21
   15808:	1800511e 	bne	r3,zero,15950 <_malloc_r+0x6d4>
   1580c:	11001704 	addi	r4,r2,92
   15810:	200890fa 	slli	r4,r4,3
   15814:	108016c4 	addi	r2,r2,91
   15818:	9109883a 	add	r4,r18,r4
   1581c:	20c00017 	ldw	r3,0(r4)
   15820:	213ffe04 	addi	r4,r4,-8
   15824:	20c04126 	beq	r4,r3,1592c <_malloc_r+0x6b0>
   15828:	023fff04 	movi	r8,-4
   1582c:	18800117 	ldw	r2,4(r3)
   15830:	1204703a 	and	r2,r2,r8
   15834:	3880022e 	bgeu	r7,r2,15840 <_malloc_r+0x5c4>
   15838:	18c00217 	ldw	r3,8(r3)
   1583c:	20fffb1e 	bne	r4,r3,1582c <__alt_mem_mcu_subsystem_ram_0+0x77ff582c>
   15840:	19000317 	ldw	r4,12(r3)
   15844:	90800117 	ldw	r2,4(r18)
   15848:	81000315 	stw	r4,12(r16)
   1584c:	80c00215 	stw	r3,8(r16)
   15850:	24000215 	stw	r16,8(r4)
   15854:	1c000315 	stw	r16,12(r3)
   15858:	003efe06 	br	15454 <__alt_mem_mcu_subsystem_ram_0+0x77ff5454>
   1585c:	11801704 	addi	r6,r2,92
   15860:	120016c4 	addi	r8,r2,91
   15864:	300890fa 	slli	r4,r6,3
   15868:	003ec406 	br	1537c <__alt_mem_mcu_subsystem_ram_0+0x77ff537c>
   1586c:	84805626 	beq	r16,r18,159c8 <_malloc_r+0x74c>
   15870:	94000217 	ldw	r16,8(r18)
   15874:	00bfff04 	movi	r2,-4
   15878:	80c00117 	ldw	r3,4(r16)
   1587c:	1886703a 	and	r3,r3,r2
   15880:	1c45c83a 	sub	r2,r3,r17
   15884:	1c400236 	bltu	r3,r17,15890 <_malloc_r+0x614>
   15888:	10c00408 	cmpgei	r3,r2,16
   1588c:	183f941e 	bne	r3,zero,156e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff56e0>
   15890:	9809883a 	mov	r4,r19
   15894:	00259800 	call	25980 <__malloc_unlock>
   15898:	0005883a 	mov	r2,zero
   1589c:	003e9e06 	br	15318 <__alt_mem_mcu_subsystem_ram_0+0x77ff5318>
   158a0:	3804d1ba 	srli	r2,r7,6
   158a4:	11000e44 	addi	r4,r2,57
   158a8:	200890fa 	slli	r4,r4,3
   158ac:	10800e04 	addi	r2,r2,56
   158b0:	003fd906 	br	15818 <__alt_mem_mcu_subsystem_ram_0+0x77ff5818>
   158b4:	52800017 	ldw	r10,0(r10)
   158b8:	31bfffc4 	addi	r6,r6,-1
   158bc:	50c0631e 	bne	r10,r3,15a4c <_malloc_r+0x7d0>
   158c0:	308000cc 	andi	r2,r6,3
   158c4:	50fffe04 	addi	r3,r10,-8
   158c8:	103ffa1e 	bne	r2,zero,158b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff58b4>
   158cc:	90c00117 	ldw	r3,4(r18)
   158d0:	0104303a 	nor	r2,zero,r4
   158d4:	10c4703a 	and	r2,r2,r3
   158d8:	90800115 	stw	r2,4(r18)
   158dc:	2109883a 	add	r4,r4,r4
   158e0:	113f2036 	bltu	r2,r4,15564 <__alt_mem_mcu_subsystem_ram_0+0x77ff5564>
   158e4:	203f1f26 	beq	r4,zero,15564 <__alt_mem_mcu_subsystem_ram_0+0x77ff5564>
   158e8:	2086703a 	and	r3,r4,r2
   158ec:	1800041e 	bne	r3,zero,15900 <_malloc_r+0x684>
   158f0:	2109883a 	add	r4,r4,r4
   158f4:	2086703a 	and	r3,r4,r2
   158f8:	5ac00104 	addi	r11,r11,4
   158fc:	183ffc26 	beq	r3,zero,158f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff58f0>
   15900:	580d883a 	mov	r6,r11
   15904:	003ee406 	br	15498 <__alt_mem_mcu_subsystem_ram_0+0x77ff5498>
   15908:	a5000404 	addi	r20,r20,16
   1590c:	003f2706 	br	155ac <__alt_mem_mcu_subsystem_ram_0+0x77ff55ac>
   15910:	10c05568 	cmpgeui	r3,r2,341
   15914:	18001c1e 	bne	r3,zero,15988 <_malloc_r+0x70c>
   15918:	8804d3fa 	srli	r2,r17,15
   1591c:	11801e04 	addi	r6,r2,120
   15920:	12001dc4 	addi	r8,r2,119
   15924:	300890fa 	slli	r4,r6,3
   15928:	003e9406 	br	1537c <__alt_mem_mcu_subsystem_ram_0+0x77ff537c>
   1592c:	100fd0ba 	srai	r7,r2,2
   15930:	00800044 	movi	r2,1
   15934:	92000117 	ldw	r8,4(r18)
   15938:	11c4983a 	sll	r2,r2,r7
   1593c:	1204b03a 	or	r2,r2,r8
   15940:	90800115 	stw	r2,4(r18)
   15944:	003fc006 	br	15848 <__alt_mem_mcu_subsystem_ram_0+0x77ff5848>
   15948:	00840004 	movi	r2,4096
   1594c:	003f3306 	br	1561c <__alt_mem_mcu_subsystem_ram_0+0x77ff561c>
   15950:	10c01568 	cmpgeui	r3,r2,85
   15954:	1800221e 	bne	r3,zero,159e0 <_malloc_r+0x764>
   15958:	3804d33a 	srli	r2,r7,12
   1595c:	11001bc4 	addi	r4,r2,111
   15960:	200890fa 	slli	r4,r4,3
   15964:	10801b84 	addi	r2,r2,110
   15968:	003fab06 	br	15818 <__alt_mem_mcu_subsystem_ram_0+0x77ff5818>
   1596c:	1903ffcc 	andi	r4,r3,4095
   15970:	203f1c1e 	bne	r4,zero,155e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff55e4>
   15974:	91000217 	ldw	r4,8(r18)
   15978:	ad07883a 	add	r3,r21,r20
   1597c:	18c00054 	ori	r3,r3,1
   15980:	20c00115 	stw	r3,4(r4)
   15984:	003f4706 	br	156a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff56a4>
   15988:	10815568 	cmpgeui	r2,r2,1365
   1598c:	10001b1e 	bne	r2,zero,159fc <_malloc_r+0x780>
   15990:	8804d4ba 	srli	r2,r17,18
   15994:	11801f44 	addi	r6,r2,125
   15998:	12001f04 	addi	r8,r2,124
   1599c:	300890fa 	slli	r4,r6,3
   159a0:	003e7606 	br	1537c <__alt_mem_mcu_subsystem_ram_0+0x77ff537c>
   159a4:	00800044 	movi	r2,1
   159a8:	b0800115 	stw	r2,4(r22)
   159ac:	003fb806 	br	15890 <__alt_mem_mcu_subsystem_ram_0+0x77ff5890>
   159b0:	00c00044 	movi	r3,1
   159b4:	0029883a 	mov	r20,zero
   159b8:	003f2306 	br	15648 <__alt_mem_mcu_subsystem_ram_0+0x77ff5648>
   159bc:	008000f4 	movhi	r2,3
   159c0:	159e6715 	stw	r22,31132(r2)
   159c4:	003f0f06 	br	15604 <__alt_mem_mcu_subsystem_ram_0+0x77ff5604>
   159c8:	008202b4 	movhi	r2,2058
   159cc:	108af417 	ldw	r2,11216(r2)
   159d0:	010202b4 	movhi	r4,2058
   159d4:	a085883a 	add	r2,r20,r2
   159d8:	208af415 	stw	r2,11216(r4)
   159dc:	003f0106 	br	155e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff55e4>
   159e0:	10c05568 	cmpgeui	r3,r2,341
   159e4:	18000f1e 	bne	r3,zero,15a24 <_malloc_r+0x7a8>
   159e8:	3804d3fa 	srli	r2,r7,15
   159ec:	11001e04 	addi	r4,r2,120
   159f0:	200890fa 	slli	r4,r4,3
   159f4:	10801dc4 	addi	r2,r2,119
   159f8:	003f8706 	br	15818 <__alt_mem_mcu_subsystem_ram_0+0x77ff5818>
   159fc:	0100fe04 	movi	r4,1016
   15a00:	01801fc4 	movi	r6,127
   15a04:	02001f84 	movi	r8,126
   15a08:	003e5c06 	br	1537c <__alt_mem_mcu_subsystem_ram_0+0x77ff537c>
   15a0c:	81400204 	addi	r5,r16,8
   15a10:	9809883a 	mov	r4,r19
   15a14:	001d1880 	call	1d188 <_free_r>
   15a18:	008202b4 	movhi	r2,2058
   15a1c:	108af417 	ldw	r2,11216(r2)
   15a20:	003f2006 	br	156a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff56a4>
   15a24:	10815568 	cmpgeui	r2,r2,1365
   15a28:	1000051e 	bne	r2,zero,15a40 <_malloc_r+0x7c4>
   15a2c:	3804d4ba 	srli	r2,r7,18
   15a30:	11001f44 	addi	r4,r2,125
   15a34:	200890fa 	slli	r4,r4,3
   15a38:	10801f04 	addi	r2,r2,124
   15a3c:	003f7606 	br	15818 <__alt_mem_mcu_subsystem_ram_0+0x77ff5818>
   15a40:	0100fe04 	movi	r4,1016
   15a44:	00801f84 	movi	r2,126
   15a48:	003f7306 	br	15818 <__alt_mem_mcu_subsystem_ram_0+0x77ff5818>
   15a4c:	90800117 	ldw	r2,4(r18)
   15a50:	003fa206 	br	158dc <__alt_mem_mcu_subsystem_ram_0+0x77ff58dc>

00015a54 <_mbtowc_r>:
   15a54:	008000f4 	movhi	r2,3
   15a58:	109e6617 	ldw	r2,31128(r2)
   15a5c:	d8c00017 	ldw	r3,0(sp)
   15a60:	10800d17 	ldw	r2,52(r2)
   15a64:	1000021e 	bne	r2,zero,15a70 <_mbtowc_r+0x1c>
   15a68:	008000f4 	movhi	r2,3
   15a6c:	10980104 	addi	r2,r2,24580
   15a70:	d8c00015 	stw	r3,0(sp)
   15a74:	10803917 	ldw	r2,228(r2)
   15a78:	1000683a 	jmp	r2

00015a7c <__ascii_mbtowc>:
   15a7c:	deffff04 	addi	sp,sp,-4
   15a80:	28000826 	beq	r5,zero,15aa4 <__ascii_mbtowc+0x28>
   15a84:	30000926 	beq	r6,zero,15aac <__ascii_mbtowc+0x30>
   15a88:	38000b26 	beq	r7,zero,15ab8 <__ascii_mbtowc+0x3c>
   15a8c:	30800003 	ldbu	r2,0(r6)
   15a90:	28800015 	stw	r2,0(r5)
   15a94:	30800003 	ldbu	r2,0(r6)
   15a98:	1004c03a 	cmpne	r2,r2,zero
   15a9c:	dec00104 	addi	sp,sp,4
   15aa0:	f800283a 	ret
   15aa4:	d80b883a 	mov	r5,sp
   15aa8:	303ff71e 	bne	r6,zero,15a88 <__alt_mem_mcu_subsystem_ram_0+0x77ff5a88>
   15aac:	0005883a 	mov	r2,zero
   15ab0:	dec00104 	addi	sp,sp,4
   15ab4:	f800283a 	ret
   15ab8:	00bfff84 	movi	r2,-2
   15abc:	003ff706 	br	15a9c <__alt_mem_mcu_subsystem_ram_0+0x77ff5a9c>

00015ac0 <memcpy>:
   15ac0:	30c00430 	cmpltui	r3,r6,16
   15ac4:	2005883a 	mov	r2,r4
   15ac8:	1800321e 	bne	r3,zero,15b94 <memcpy+0xd4>
   15acc:	2906b03a 	or	r3,r5,r4
   15ad0:	18c000cc 	andi	r3,r3,3
   15ad4:	1800321e 	bne	r3,zero,15ba0 <memcpy+0xe0>
   15ad8:	32fffc04 	addi	r11,r6,-16
   15adc:	5816d13a 	srli	r11,r11,4
   15ae0:	2811883a 	mov	r8,r5
   15ae4:	200f883a 	mov	r7,r4
   15ae8:	5ac00044 	addi	r11,r11,1
   15aec:	5816913a 	slli	r11,r11,4
   15af0:	22c7883a 	add	r3,r4,r11
   15af4:	41000017 	ldw	r4,0(r8)
   15af8:	42800117 	ldw	r10,4(r8)
   15afc:	42400217 	ldw	r9,8(r8)
   15b00:	42000404 	addi	r8,r8,16
   15b04:	39000015 	stw	r4,0(r7)
   15b08:	413fff17 	ldw	r4,-4(r8)
   15b0c:	3a800115 	stw	r10,4(r7)
   15b10:	3a400215 	stw	r9,8(r7)
   15b14:	39c00404 	addi	r7,r7,16
   15b18:	393fff15 	stw	r4,-4(r7)
   15b1c:	19fff51e 	bne	r3,r7,15af4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5af4>
   15b20:	310003cc 	andi	r4,r6,15
   15b24:	21c00130 	cmpltui	r7,r4,4
   15b28:	2acb883a 	add	r5,r5,r11
   15b2c:	38001e1e 	bne	r7,zero,15ba8 <memcpy+0xe8>
   15b30:	213fff04 	addi	r4,r4,-4
   15b34:	200ed0ba 	srli	r7,r4,2
   15b38:	1811883a 	mov	r8,r3
   15b3c:	2809883a 	mov	r4,r5
   15b40:	381290ba 	slli	r9,r7,2
   15b44:	4a400104 	addi	r9,r9,4
   15b48:	4953883a 	add	r9,r9,r5
   15b4c:	22800017 	ldw	r10,0(r4)
   15b50:	42000104 	addi	r8,r8,4
   15b54:	21000104 	addi	r4,r4,4
   15b58:	42bfff15 	stw	r10,-4(r8)
   15b5c:	227ffb1e 	bne	r4,r9,15b4c <__alt_mem_mcu_subsystem_ram_0+0x77ff5b4c>
   15b60:	39000044 	addi	r4,r7,1
   15b64:	200890ba 	slli	r4,r4,2
   15b68:	318000cc 	andi	r6,r6,3
   15b6c:	1907883a 	add	r3,r3,r4
   15b70:	290b883a 	add	r5,r5,r4
   15b74:	30000926 	beq	r6,zero,15b9c <memcpy+0xdc>
   15b78:	198d883a 	add	r6,r3,r6
   15b7c:	29400044 	addi	r5,r5,1
   15b80:	29ffffc3 	ldbu	r7,-1(r5)
   15b84:	18c00044 	addi	r3,r3,1
   15b88:	19ffffc5 	stb	r7,-1(r3)
   15b8c:	19bffb1e 	bne	r3,r6,15b7c <__alt_mem_mcu_subsystem_ram_0+0x77ff5b7c>
   15b90:	f800283a 	ret
   15b94:	2007883a 	mov	r3,r4
   15b98:	303ff71e 	bne	r6,zero,15b78 <__alt_mem_mcu_subsystem_ram_0+0x77ff5b78>
   15b9c:	f800283a 	ret
   15ba0:	2007883a 	mov	r3,r4
   15ba4:	003ff406 	br	15b78 <__alt_mem_mcu_subsystem_ram_0+0x77ff5b78>
   15ba8:	200d883a 	mov	r6,r4
   15bac:	003ff106 	br	15b74 <__alt_mem_mcu_subsystem_ram_0+0x77ff5b74>

00015bb0 <memset>:
   15bb0:	20c000cc 	andi	r3,r4,3
   15bb4:	2005883a 	mov	r2,r4
   15bb8:	18003726 	beq	r3,zero,15c98 <memset+0xe8>
   15bbc:	31ffffc4 	addi	r7,r6,-1
   15bc0:	30003326 	beq	r6,zero,15c90 <memset+0xe0>
   15bc4:	2811883a 	mov	r8,r5
   15bc8:	2007883a 	mov	r3,r4
   15bcc:	00000306 	br	15bdc <memset+0x2c>
   15bd0:	39ffffc4 	addi	r7,r7,-1
   15bd4:	39bfffe0 	cmpeqi	r6,r7,-1
   15bd8:	30002d1e 	bne	r6,zero,15c90 <memset+0xe0>
   15bdc:	18c00044 	addi	r3,r3,1
   15be0:	1a3fffc5 	stb	r8,-1(r3)
   15be4:	198000cc 	andi	r6,r3,3
   15be8:	303ff91e 	bne	r6,zero,15bd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bd0>
   15bec:	39000128 	cmpgeui	r4,r7,4
   15bf0:	20002226 	beq	r4,zero,15c7c <memset+0xcc>
   15bf4:	29003fcc 	andi	r4,r5,255
   15bf8:	200c923a 	slli	r6,r4,8
   15bfc:	3a000430 	cmpltui	r8,r7,16
   15c00:	3108b03a 	or	r4,r6,r4
   15c04:	200c943a 	slli	r6,r4,16
   15c08:	310cb03a 	or	r6,r6,r4
   15c0c:	4000251e 	bne	r8,zero,15ca4 <memset+0xf4>
   15c10:	3a3ffc04 	addi	r8,r7,-16
   15c14:	4010d13a 	srli	r8,r8,4
   15c18:	42000044 	addi	r8,r8,1
   15c1c:	4010913a 	slli	r8,r8,4
   15c20:	1a11883a 	add	r8,r3,r8
   15c24:	19800015 	stw	r6,0(r3)
   15c28:	19800115 	stw	r6,4(r3)
   15c2c:	19800215 	stw	r6,8(r3)
   15c30:	18c00404 	addi	r3,r3,16
   15c34:	19bfff15 	stw	r6,-4(r3)
   15c38:	40fffa1e 	bne	r8,r3,15c24 <__alt_mem_mcu_subsystem_ram_0+0x77ff5c24>
   15c3c:	39c003cc 	andi	r7,r7,15
   15c40:	39000130 	cmpltui	r4,r7,4
   15c44:	20000d1e 	bne	r4,zero,15c7c <memset+0xcc>
   15c48:	38ffff04 	addi	r3,r7,-4
   15c4c:	1806d0ba 	srli	r3,r3,2
   15c50:	42400104 	addi	r9,r8,4
   15c54:	4009883a 	mov	r4,r8
   15c58:	181490ba 	slli	r10,r3,2
   15c5c:	5253883a 	add	r9,r10,r9
   15c60:	21800015 	stw	r6,0(r4)
   15c64:	21000104 	addi	r4,r4,4
   15c68:	227ffd1e 	bne	r4,r9,15c60 <__alt_mem_mcu_subsystem_ram_0+0x77ff5c60>
   15c6c:	18c00044 	addi	r3,r3,1
   15c70:	180690ba 	slli	r3,r3,2
   15c74:	39c000cc 	andi	r7,r7,3
   15c78:	40c7883a 	add	r3,r8,r3
   15c7c:	38000526 	beq	r7,zero,15c94 <memset+0xe4>
   15c80:	19cf883a 	add	r7,r3,r7
   15c84:	18c00044 	addi	r3,r3,1
   15c88:	197fffc5 	stb	r5,-1(r3)
   15c8c:	38fffd1e 	bne	r7,r3,15c84 <__alt_mem_mcu_subsystem_ram_0+0x77ff5c84>
   15c90:	f800283a 	ret
   15c94:	f800283a 	ret
   15c98:	2007883a 	mov	r3,r4
   15c9c:	300f883a 	mov	r7,r6
   15ca0:	003fd206 	br	15bec <__alt_mem_mcu_subsystem_ram_0+0x77ff5bec>
   15ca4:	1811883a 	mov	r8,r3
   15ca8:	003fe706 	br	15c48 <__alt_mem_mcu_subsystem_ram_0+0x77ff5c48>

00015cac <validate_structure>:
   15cac:	defffb04 	addi	sp,sp,-20
   15cb0:	dc800215 	stw	r18,8(sp)
   15cb4:	2025883a 	mov	r18,r4
   15cb8:	21000017 	ldw	r4,0(r4)
   15cbc:	dfc00415 	stw	ra,16(sp)
   15cc0:	dcc00315 	stw	r19,12(sp)
   15cc4:	dc400115 	stw	r17,4(sp)
   15cc8:	dc000015 	stw	r16,0(sp)
   15ccc:	20800f28 	cmpgeui	r2,r4,60
   15cd0:	10007c1e 	bne	r2,zero,15ec4 <validate_structure+0x218>
   15cd4:	91000117 	ldw	r4,4(r18)
   15cd8:	20800f28 	cmpgeui	r2,r4,60
   15cdc:	1000711e 	bne	r2,zero,15ea4 <validate_structure+0x1f8>
   15ce0:	91000217 	ldw	r4,8(r18)
   15ce4:	20800628 	cmpgeui	r2,r4,24
   15ce8:	1000661e 	bne	r2,zero,15e84 <validate_structure+0x1d8>
   15cec:	94000417 	ldw	r16,16(r18)
   15cf0:	80800328 	cmpgeui	r2,r16,12
   15cf4:	1000591e 	bne	r2,zero,15e5c <validate_structure+0x1b0>
   15cf8:	94400517 	ldw	r17,20(r18)
   15cfc:	888000cc 	andi	r2,r17,3
   15d00:	10000a1e 	bne	r2,zero,15d2c <validate_structure+0x80>
   15d04:	01401904 	movi	r5,100
   15d08:	8809883a 	mov	r4,r17
   15d0c:	00129dc0 	call	129dc <__modsi3>
   15d10:	10000226 	beq	r2,zero,15d1c <validate_structure+0x70>
   15d14:	01800744 	movi	r6,29
   15d18:	00000506 	br	15d30 <validate_structure+0x84>
   15d1c:	01406404 	movi	r5,400
   15d20:	8901db04 	addi	r4,r17,1900
   15d24:	00129dc0 	call	129dc <__modsi3>
   15d28:	103ffa26 	beq	r2,zero,15d14 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d14>
   15d2c:	01800704 	movi	r6,28
   15d30:	94400317 	ldw	r17,12(r18)
   15d34:	04401e0e 	bge	zero,r17,15db0 <validate_structure+0x104>
   15d38:	04c000f4 	movhi	r19,3
   15d3c:	9ccdbb04 	addi	r19,r19,14060
   15d40:	800890ba 	slli	r4,r16,2
   15d44:	80c00044 	addi	r3,r16,1
   15d48:	9909883a 	add	r4,r19,r4
   15d4c:	00000806 	br	15d70 <validate_structure+0xc4>
   15d50:	20800017 	ldw	r2,0(r4)
   15d54:	1440250e 	bge	r2,r17,15dec <validate_structure+0x140>
   15d58:	88a3c83a 	sub	r17,r17,r2
   15d5c:	90c00415 	stw	r3,16(r18)
   15d60:	94400315 	stw	r17,12(r18)
   15d64:	28002a26 	beq	r5,zero,15e10 <validate_structure+0x164>
   15d68:	18c00044 	addi	r3,r3,1
   15d6c:	21000104 	addi	r4,r4,4
   15d70:	188000a0 	cmpeqi	r2,r3,2
   15d74:	19400318 	cmpnei	r5,r3,12
   15d78:	103ff526 	beq	r2,zero,15d50 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d50>
   15d7c:	34401b0e 	bge	r6,r17,15dec <validate_structure+0x140>
   15d80:	89a3c83a 	sub	r17,r17,r6
   15d84:	94400315 	stw	r17,12(r18)
   15d88:	90c00415 	stw	r3,16(r18)
   15d8c:	003ff606 	br	15d68 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d68>
   15d90:	80800060 	cmpeqi	r2,r16,1
   15d94:	10001c1e 	bne	r2,zero,15e08 <validate_structure+0x15c>
   15d98:	800690ba 	slli	r3,r16,2
   15d9c:	008000f4 	movhi	r2,3
   15da0:	1885883a 	add	r2,r3,r2
   15da4:	108dbb17 	ldw	r2,14060(r2)
   15da8:	88a3883a 	add	r17,r17,r2
   15dac:	04400d16 	blt	zero,r17,15de4 <validate_structure+0x138>
   15db0:	843fffc4 	addi	r16,r16,-1
   15db4:	80bfffd8 	cmpnei	r2,r16,-1
   15db8:	103ff51e 	bne	r2,zero,15d90 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d90>
   15dbc:	94000517 	ldw	r16,20(r18)
   15dc0:	813fffc4 	addi	r4,r16,-1
   15dc4:	91000515 	stw	r4,20(r18)
   15dc8:	208000cc 	andi	r2,r4,3
   15dcc:	10001926 	beq	r2,zero,15e34 <validate_structure+0x188>
   15dd0:	01800704 	movi	r6,28
   15dd4:	008007c4 	movi	r2,31
   15dd8:	88a3883a 	add	r17,r17,r2
   15ddc:	040002c4 	movi	r16,11
   15de0:	047ff30e 	bge	zero,r17,15db0 <__alt_mem_mcu_subsystem_ram_0+0x77ff5db0>
   15de4:	94000415 	stw	r16,16(r18)
   15de8:	94400315 	stw	r17,12(r18)
   15dec:	dfc00417 	ldw	ra,16(sp)
   15df0:	dcc00317 	ldw	r19,12(sp)
   15df4:	dc800217 	ldw	r18,8(sp)
   15df8:	dc400117 	ldw	r17,4(sp)
   15dfc:	dc000017 	ldw	r16,0(sp)
   15e00:	dec00504 	addi	sp,sp,20
   15e04:	f800283a 	ret
   15e08:	3005883a 	mov	r2,r6
   15e0c:	003fe606 	br	15da8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5da8>
   15e10:	94000517 	ldw	r16,20(r18)
   15e14:	90000415 	stw	zero,16(r18)
   15e18:	81000044 	addi	r4,r16,1
   15e1c:	91000515 	stw	r4,20(r18)
   15e20:	208000cc 	andi	r2,r4,3
   15e24:	10000826 	beq	r2,zero,15e48 <validate_structure+0x19c>
   15e28:	01800704 	movi	r6,28
   15e2c:	0021883a 	mov	r16,zero
   15e30:	003fc306 	br	15d40 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d40>
   15e34:	01401904 	movi	r5,100
   15e38:	00129dc0 	call	129dc <__modsi3>
   15e3c:	10002926 	beq	r2,zero,15ee4 <validate_structure+0x238>
   15e40:	01800744 	movi	r6,29
   15e44:	003fe306 	br	15dd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5dd4>
   15e48:	01401904 	movi	r5,100
   15e4c:	00129dc0 	call	129dc <__modsi3>
   15e50:	10002926 	beq	r2,zero,15ef8 <validate_structure+0x24c>
   15e54:	01800744 	movi	r6,29
   15e58:	003ff406 	br	15e2c <__alt_mem_mcu_subsystem_ram_0+0x77ff5e2c>
   15e5c:	8009883a 	mov	r4,r16
   15e60:	01400304 	movi	r5,12
   15e64:	001b1500 	call	1b150 <div>
   15e68:	94400517 	ldw	r17,20(r18)
   15e6c:	1821883a 	mov	r16,r3
   15e70:	88a3883a 	add	r17,r17,r2
   15e74:	94400515 	stw	r17,20(r18)
   15e78:	18002416 	blt	r3,zero,15f0c <validate_structure+0x260>
   15e7c:	90c00415 	stw	r3,16(r18)
   15e80:	003f9e06 	br	15cfc <__alt_mem_mcu_subsystem_ram_0+0x77ff5cfc>
   15e84:	01400604 	movi	r5,24
   15e88:	001b1500 	call	1b150 <div>
   15e8c:	91000317 	ldw	r4,12(r18)
   15e90:	2085883a 	add	r2,r4,r2
   15e94:	90800315 	stw	r2,12(r18)
   15e98:	18002b16 	blt	r3,zero,15f48 <validate_structure+0x29c>
   15e9c:	90c00215 	stw	r3,8(r18)
   15ea0:	003f9206 	br	15cec <__alt_mem_mcu_subsystem_ram_0+0x77ff5cec>
   15ea4:	01400f04 	movi	r5,60
   15ea8:	001b1500 	call	1b150 <div>
   15eac:	91000217 	ldw	r4,8(r18)
   15eb0:	2089883a 	add	r4,r4,r2
   15eb4:	91000215 	stw	r4,8(r18)
   15eb8:	18001e16 	blt	r3,zero,15f34 <validate_structure+0x288>
   15ebc:	90c00115 	stw	r3,4(r18)
   15ec0:	003f8806 	br	15ce4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ce4>
   15ec4:	01400f04 	movi	r5,60
   15ec8:	001b1500 	call	1b150 <div>
   15ecc:	91000117 	ldw	r4,4(r18)
   15ed0:	2089883a 	add	r4,r4,r2
   15ed4:	91000115 	stw	r4,4(r18)
   15ed8:	18001116 	blt	r3,zero,15f20 <validate_structure+0x274>
   15edc:	90c00015 	stw	r3,0(r18)
   15ee0:	003f7d06 	br	15cd8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5cd8>
   15ee4:	01406404 	movi	r5,400
   15ee8:	8101dac4 	addi	r4,r16,1899
   15eec:	00129dc0 	call	129dc <__modsi3>
   15ef0:	103fb71e 	bne	r2,zero,15dd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff5dd0>
   15ef4:	003fd206 	br	15e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff5e40>
   15ef8:	01406404 	movi	r5,400
   15efc:	8101db44 	addi	r4,r16,1901
   15f00:	00129dc0 	call	129dc <__modsi3>
   15f04:	103fc81e 	bne	r2,zero,15e28 <__alt_mem_mcu_subsystem_ram_0+0x77ff5e28>
   15f08:	003fd206 	br	15e54 <__alt_mem_mcu_subsystem_ram_0+0x77ff5e54>
   15f0c:	1c000304 	addi	r16,r3,12
   15f10:	8c7fffc4 	addi	r17,r17,-1
   15f14:	94000415 	stw	r16,16(r18)
   15f18:	94400515 	stw	r17,20(r18)
   15f1c:	003f7706 	br	15cfc <__alt_mem_mcu_subsystem_ram_0+0x77ff5cfc>
   15f20:	18c00f04 	addi	r3,r3,60
   15f24:	213fffc4 	addi	r4,r4,-1
   15f28:	90c00015 	stw	r3,0(r18)
   15f2c:	91000115 	stw	r4,4(r18)
   15f30:	003f6906 	br	15cd8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5cd8>
   15f34:	18c00f04 	addi	r3,r3,60
   15f38:	213fffc4 	addi	r4,r4,-1
   15f3c:	90c00115 	stw	r3,4(r18)
   15f40:	91000215 	stw	r4,8(r18)
   15f44:	003f6706 	br	15ce4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ce4>
   15f48:	18c00604 	addi	r3,r3,24
   15f4c:	10bfffc4 	addi	r2,r2,-1
   15f50:	90c00215 	stw	r3,8(r18)
   15f54:	90800315 	stw	r2,12(r18)
   15f58:	003f6406 	br	15cec <__alt_mem_mcu_subsystem_ram_0+0x77ff5cec>

00015f5c <mktime>:
   15f5c:	defff804 	addi	sp,sp,-32
   15f60:	dfc00715 	stw	ra,28(sp)
   15f64:	dd400515 	stw	r21,20(sp)
   15f68:	dd000415 	stw	r20,16(sp)
   15f6c:	dcc00315 	stw	r19,12(sp)
   15f70:	dc800215 	stw	r18,8(sp)
   15f74:	dc400115 	stw	r17,4(sp)
   15f78:	2025883a 	mov	r18,r4
   15f7c:	dd800615 	stw	r22,24(sp)
   15f80:	dc000015 	stw	r16,0(sp)
   15f84:	001db8c0 	call	1db8c <__gettzinfo>
   15f88:	9009883a 	mov	r4,r18
   15f8c:	1029883a 	mov	r20,r2
   15f90:	0015cac0 	call	15cac <validate_structure>
   15f94:	90c00417 	ldw	r3,16(r18)
   15f98:	90800117 	ldw	r2,4(r18)
   15f9c:	95400217 	ldw	r21,8(r18)
   15fa0:	180c90ba 	slli	r6,r3,2
   15fa4:	010000f4 	movhi	r4,3
   15fa8:	10800f24 	muli	r2,r2,60
   15fac:	91400017 	ldw	r5,0(r18)
   15fb0:	94400317 	ldw	r17,12(r18)
   15fb4:	3109883a 	add	r4,r6,r4
   15fb8:	ad438424 	muli	r21,r21,3600
   15fbc:	210daf17 	ldw	r4,14012(r4)
   15fc0:	1145883a 	add	r2,r2,r5
   15fc4:	8c7fffc4 	addi	r17,r17,-1
   15fc8:	18c00088 	cmpgei	r3,r3,2
   15fcc:	94c00517 	ldw	r19,20(r18)
   15fd0:	156b883a 	add	r21,r2,r21
   15fd4:	8923883a 	add	r17,r17,r4
   15fd8:	18000226 	beq	r3,zero,15fe4 <mktime+0x88>
   15fdc:	988000cc 	andi	r2,r19,3
   15fe0:	10006526 	beq	r2,zero,16178 <mktime+0x21c>
   15fe4:	98c9c404 	addi	r3,r19,10000
   15fe8:	94400715 	stw	r17,28(r18)
   15fec:	18d38868 	cmpgeui	r3,r3,20001
   15ff0:	1800b11e 	bne	r3,zero,162b8 <mktime+0x35c>
   15ff4:	988011d0 	cmplti	r2,r19,71
   15ff8:	10003f1e 	bne	r2,zero,160f8 <mktime+0x19c>
   15ffc:	04001184 	movi	r16,70
   16000:	00000a06 	br	1602c <mktime+0xd0>
   16004:	00129dc0 	call	129dc <__modsi3>
   16008:	8101db04 	addi	r4,r16,1900
   1600c:	01406404 	movi	r5,400
   16010:	1000021e 	bne	r2,zero,1601c <mktime+0xc0>
   16014:	00129dc0 	call	129dc <__modsi3>
   16018:	1000081e 	bne	r2,zero,1603c <mktime+0xe0>
   1601c:	00805b84 	movi	r2,366
   16020:	84000044 	addi	r16,r16,1
   16024:	88a3883a 	add	r17,r17,r2
   16028:	84c00826 	beq	r16,r19,1604c <mktime+0xf0>
   1602c:	808000cc 	andi	r2,r16,3
   16030:	8009883a 	mov	r4,r16
   16034:	01401904 	movi	r5,100
   16038:	103ff226 	beq	r2,zero,16004 <__alt_mem_mcu_subsystem_ram_0+0x77ff6004>
   1603c:	00805b44 	movi	r2,365
   16040:	84000044 	addi	r16,r16,1
   16044:	88a3883a 	add	r17,r17,r2
   16048:	84fff81e 	bne	r16,r19,1602c <__alt_mem_mcu_subsystem_ram_0+0x77ff602c>
   1604c:	00800074 	movhi	r2,1
   16050:	10946004 	addi	r2,r2,20864
   16054:	8885383a 	mul	r2,r17,r2
   16058:	156b883a 	add	r21,r2,r21
   1605c:	00189d80 	call	189d8 <__tz_lock>
   16060:	00189e00 	call	189e0 <_tzset_unlocked>
   16064:	00800134 	movhi	r2,4
   16068:	14e61217 	ldw	r19,-26552(r2)
   1606c:	98005b26 	beq	r19,zero,161dc <mktime+0x280>
   16070:	91000517 	ldw	r4,20(r18)
   16074:	95800817 	ldw	r22,32(r18)
   16078:	2101db04 	addi	r4,r4,1900
   1607c:	b027883a 	mov	r19,r22
   16080:	0580010e 	bge	zero,r22,16088 <mktime+0x12c>
   16084:	04c00044 	movi	r19,1
   16088:	a0800117 	ldw	r2,4(r20)
   1608c:	11004226 	beq	r2,r4,16198 <mktime+0x23c>
   16090:	00187b00 	call	187b0 <__tzcalc_limits>
   16094:	1000401e 	bne	r2,zero,16198 <mktime+0x23c>
   16098:	98800060 	cmpeqi	r2,r19,1
   1609c:	10004f26 	beq	r2,zero,161dc <mktime+0x280>
   160a0:	a0c00f17 	ldw	r3,60(r20)
   160a4:	a8eb883a 	add	r21,r21,r3
   160a8:	04c00044 	movi	r19,1
   160ac:	00189dc0 	call	189dc <__tz_unlock>
   160b0:	014001c4 	movi	r5,7
   160b4:	94c00815 	stw	r19,32(r18)
   160b8:	89000104 	addi	r4,r17,4
   160bc:	00129dc0 	call	129dc <__modsi3>
   160c0:	1000010e 	bge	r2,zero,160c8 <mktime+0x16c>
   160c4:	108001c4 	addi	r2,r2,7
   160c8:	90800615 	stw	r2,24(r18)
   160cc:	a805883a 	mov	r2,r21
   160d0:	dfc00717 	ldw	ra,28(sp)
   160d4:	dd800617 	ldw	r22,24(sp)
   160d8:	dd400517 	ldw	r21,20(sp)
   160dc:	dd000417 	ldw	r20,16(sp)
   160e0:	dcc00317 	ldw	r19,12(sp)
   160e4:	dc800217 	ldw	r18,8(sp)
   160e8:	dc400117 	ldw	r17,4(sp)
   160ec:	dc000017 	ldw	r16,0(sp)
   160f0:	dec00804 	addi	sp,sp,32
   160f4:	f800283a 	ret
   160f8:	988011a0 	cmpeqi	r2,r19,70
   160fc:	10003a1e 	bne	r2,zero,161e8 <mktime+0x28c>
   16100:	98801160 	cmpeqi	r2,r19,69
   16104:	04001144 	movi	r16,69
   16108:	1000181e 	bne	r2,zero,1616c <mktime+0x210>
   1610c:	808000cc 	andi	r2,r16,3
   16110:	8009883a 	mov	r4,r16
   16114:	01401904 	movi	r5,100
   16118:	1000061e 	bne	r2,zero,16134 <mktime+0x1d8>
   1611c:	00129dc0 	call	129dc <__modsi3>
   16120:	8101db04 	addi	r4,r16,1900
   16124:	01406404 	movi	r5,400
   16128:	1000191e 	bne	r2,zero,16190 <mktime+0x234>
   1612c:	00129dc0 	call	129dc <__modsi3>
   16130:	10001726 	beq	r2,zero,16190 <mktime+0x234>
   16134:	00805b44 	movi	r2,365
   16138:	843fffc4 	addi	r16,r16,-1
   1613c:	88a3c83a 	sub	r17,r17,r2
   16140:	84fff21e 	bne	r16,r19,1610c <__alt_mem_mcu_subsystem_ram_0+0x77ff610c>
   16144:	808000cc 	andi	r2,r16,3
   16148:	1000081e 	bne	r2,zero,1616c <mktime+0x210>
   1614c:	01401904 	movi	r5,100
   16150:	8009883a 	mov	r4,r16
   16154:	00129dc0 	call	129dc <__modsi3>
   16158:	1000551e 	bne	r2,zero,162b0 <mktime+0x354>
   1615c:	01406404 	movi	r5,400
   16160:	8101db04 	addi	r4,r16,1900
   16164:	00129dc0 	call	129dc <__modsi3>
   16168:	10005126 	beq	r2,zero,162b0 <mktime+0x354>
   1616c:	00805b44 	movi	r2,365
   16170:	88a3c83a 	sub	r17,r17,r2
   16174:	003fb506 	br	1604c <__alt_mem_mcu_subsystem_ram_0+0x77ff604c>
   16178:	01401904 	movi	r5,100
   1617c:	9809883a 	mov	r4,r19
   16180:	00129dc0 	call	129dc <__modsi3>
   16184:	10001a26 	beq	r2,zero,161f0 <mktime+0x294>
   16188:	8c400044 	addi	r17,r17,1
   1618c:	003f9506 	br	15fe4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5fe4>
   16190:	00805b84 	movi	r2,366
   16194:	003fe806 	br	16138 <__alt_mem_mcu_subsystem_ram_0+0x77ff6138>
   16198:	a1000e17 	ldw	r4,56(r20)
   1619c:	a0800817 	ldw	r2,32(r20)
   161a0:	a0c00f17 	ldw	r3,60(r20)
   161a4:	208bc83a 	sub	r5,r4,r2
   161a8:	a9400216 	blt	r21,r5,161b4 <mktime+0x258>
   161ac:	20c9c83a 	sub	r4,r4,r3
   161b0:	a93fb916 	blt	r21,r4,16098 <__alt_mem_mcu_subsystem_ram_0+0x77ff6098>
   161b4:	a1000717 	ldw	r4,28(r20)
   161b8:	a4c00017 	ldw	r19,0(r20)
   161bc:	20c9c83a 	sub	r4,r4,r3
   161c0:	98001026 	beq	r19,zero,16204 <mktime+0x2a8>
   161c4:	a9003716 	blt	r21,r4,162a4 <mktime+0x348>
   161c8:	a940360e 	bge	r21,r5,162a4 <mktime+0x348>
   161cc:	b03fb51e 	bne	r22,zero,160a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff60a4>
   161d0:	10c5c83a 	sub	r2,r2,r3
   161d4:	04c00044 	movi	r19,1
   161d8:	00001006 	br	1621c <mktime+0x2c0>
   161dc:	a0800817 	ldw	r2,32(r20)
   161e0:	a8ab883a 	add	r21,r21,r2
   161e4:	003fb106 	br	160ac <__alt_mem_mcu_subsystem_ram_0+0x77ff60ac>
   161e8:	04001184 	movi	r16,70
   161ec:	003f9706 	br	1604c <__alt_mem_mcu_subsystem_ram_0+0x77ff604c>
   161f0:	01406404 	movi	r5,400
   161f4:	9901db04 	addi	r4,r19,1900
   161f8:	00129dc0 	call	129dc <__modsi3>
   161fc:	103f791e 	bne	r2,zero,15fe4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5fe4>
   16200:	003fe106 	br	16188 <__alt_mem_mcu_subsystem_ram_0+0x77ff6188>
   16204:	a900240e 	bge	r21,r4,16298 <mktime+0x33c>
   16208:	a9402316 	blt	r21,r5,16298 <mktime+0x33c>
   1620c:	05bff40e 	bge	zero,r22,161e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff61e0>
   16210:	10c5c83a 	sub	r2,r2,r3
   16214:	0085c83a 	sub	r2,zero,r2
   16218:	0027883a 	mov	r19,zero
   1621c:	90c00017 	ldw	r3,0(r18)
   16220:	9009883a 	mov	r4,r18
   16224:	95800317 	ldw	r22,12(r18)
   16228:	1887883a 	add	r3,r3,r2
   1622c:	90c00015 	stw	r3,0(r18)
   16230:	a8ab883a 	add	r21,r21,r2
   16234:	0015cac0 	call	15cac <validate_structure>
   16238:	90800317 	ldw	r2,12(r18)
   1623c:	1585c83a 	sub	r2,r2,r22
   16240:	103f9526 	beq	r2,zero,16098 <__alt_mem_mcu_subsystem_ram_0+0x77ff6098>
   16244:	10c00088 	cmpgei	r3,r2,2
   16248:	18002c26 	beq	r3,zero,162fc <mktime+0x3a0>
   1624c:	00bfffc4 	movi	r2,-1
   16250:	95800717 	ldw	r22,28(r18)
   16254:	88a3883a 	add	r17,r17,r2
   16258:	15ad883a 	add	r22,r2,r22
   1625c:	b0001a16 	blt	r22,zero,162c8 <mktime+0x36c>
   16260:	808000cc 	andi	r2,r16,3
   16264:	1000161e 	bne	r2,zero,162c0 <mktime+0x364>
   16268:	01401904 	movi	r5,100
   1626c:	8009883a 	mov	r4,r16
   16270:	00129dc0 	call	129dc <__modsi3>
   16274:	1000041e 	bne	r2,zero,16288 <mktime+0x32c>
   16278:	01406404 	movi	r5,400
   1627c:	8101db04 	addi	r4,r16,1900
   16280:	00129dc0 	call	129dc <__modsi3>
   16284:	10000e1e 	bne	r2,zero,162c0 <mktime+0x364>
   16288:	00805b84 	movi	r2,366
   1628c:	b0801f0e 	bge	r22,r2,1630c <mktime+0x3b0>
   16290:	95800715 	stw	r22,28(r18)
   16294:	003f8006 	br	16098 <__alt_mem_mcu_subsystem_ram_0+0x77ff6098>
   16298:	b03f8216 	blt	r22,zero,160a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff60a4>
   1629c:	b03f811e 	bne	r22,zero,160a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff60a4>
   162a0:	003fcb06 	br	161d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff61d0>
   162a4:	05bfda16 	blt	zero,r22,16210 <__alt_mem_mcu_subsystem_ram_0+0x77ff6210>
   162a8:	0027883a 	mov	r19,zero
   162ac:	003fcc06 	br	161e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff61e0>
   162b0:	00805b84 	movi	r2,366
   162b4:	003fae06 	br	16170 <__alt_mem_mcu_subsystem_ram_0+0x77ff6170>
   162b8:	057fffc4 	movi	r21,-1
   162bc:	003f8306 	br	160cc <__alt_mem_mcu_subsystem_ram_0+0x77ff60cc>
   162c0:	00805b44 	movi	r2,365
   162c4:	003ff106 	br	1628c <__alt_mem_mcu_subsystem_ram_0+0x77ff628c>
   162c8:	813fffc4 	addi	r4,r16,-1
   162cc:	208000cc 	andi	r2,r4,3
   162d0:	1000101e 	bne	r2,zero,16314 <mktime+0x3b8>
   162d4:	01401904 	movi	r5,100
   162d8:	00129dc0 	call	129dc <__modsi3>
   162dc:	1000041e 	bne	r2,zero,162f0 <mktime+0x394>
   162e0:	01406404 	movi	r5,400
   162e4:	8101dac4 	addi	r4,r16,1899
   162e8:	00129dc0 	call	129dc <__modsi3>
   162ec:	1000091e 	bne	r2,zero,16314 <mktime+0x3b8>
   162f0:	00805b44 	movi	r2,365
   162f4:	90800715 	stw	r2,28(r18)
   162f8:	003f6706 	br	16098 <__alt_mem_mcu_subsystem_ram_0+0x77ff6098>
   162fc:	10ffffd0 	cmplti	r3,r2,-1
   16300:	183fd326 	beq	r3,zero,16250 <__alt_mem_mcu_subsystem_ram_0+0x77ff6250>
   16304:	00800044 	movi	r2,1
   16308:	003fd106 	br	16250 <__alt_mem_mcu_subsystem_ram_0+0x77ff6250>
   1630c:	b085c83a 	sub	r2,r22,r2
   16310:	003ff806 	br	162f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff62f4>
   16314:	00805b04 	movi	r2,364
   16318:	003ff606 	br	162f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff62f4>

0001631c <_printf_r>:
   1631c:	defffd04 	addi	sp,sp,-12
   16320:	2805883a 	mov	r2,r5
   16324:	dfc00015 	stw	ra,0(sp)
   16328:	d9800115 	stw	r6,4(sp)
   1632c:	d9c00215 	stw	r7,8(sp)
   16330:	21400217 	ldw	r5,8(r4)
   16334:	d9c00104 	addi	r7,sp,4
   16338:	100d883a 	mov	r6,r2
   1633c:	0018f1c0 	call	18f1c <___vfprintf_internal_r>
   16340:	dfc00017 	ldw	ra,0(sp)
   16344:	dec00304 	addi	sp,sp,12
   16348:	f800283a 	ret

0001634c <printf>:
   1634c:	defffc04 	addi	sp,sp,-16
   16350:	dfc00015 	stw	ra,0(sp)
   16354:	d9400115 	stw	r5,4(sp)
   16358:	d9800215 	stw	r6,8(sp)
   1635c:	d9c00315 	stw	r7,12(sp)
   16360:	008000f4 	movhi	r2,3
   16364:	109e6617 	ldw	r2,31128(r2)
   16368:	200b883a 	mov	r5,r4
   1636c:	d9800104 	addi	r6,sp,4
   16370:	11000217 	ldw	r4,8(r2)
   16374:	001aed00 	call	1aed0 <__vfprintf_internal>
   16378:	dfc00017 	ldw	ra,0(sp)
   1637c:	dec00404 	addi	sp,sp,16
   16380:	f800283a 	ret

00016384 <_putchar_r>:
   16384:	21800217 	ldw	r6,8(r4)
   16388:	001ef101 	jmpi	1ef10 <_putc_r>

0001638c <putchar>:
   1638c:	008000f4 	movhi	r2,3
   16390:	109e6617 	ldw	r2,31128(r2)
   16394:	200b883a 	mov	r5,r4
   16398:	11800217 	ldw	r6,8(r2)
   1639c:	1009883a 	mov	r4,r2
   163a0:	001ef101 	jmpi	1ef10 <_putc_r>

000163a4 <_puts_r>:
   163a4:	defff504 	addi	sp,sp,-44
   163a8:	dc000815 	stw	r16,32(sp)
   163ac:	2021883a 	mov	r16,r4
   163b0:	2809883a 	mov	r4,r5
   163b4:	dc400915 	stw	r17,36(sp)
   163b8:	dfc00a15 	stw	ra,40(sp)
   163bc:	2823883a 	mov	r17,r5
   163c0:	001676c0 	call	1676c <strlen>
   163c4:	11000044 	addi	r4,r2,1
   163c8:	d8800515 	stw	r2,20(sp)
   163cc:	00800044 	movi	r2,1
   163d0:	00c000f4 	movhi	r3,3
   163d4:	d8800715 	stw	r2,28(sp)
   163d8:	d8800404 	addi	r2,sp,16
   163dc:	18cdc704 	addi	r3,r3,14108
   163e0:	d8800115 	stw	r2,4(sp)
   163e4:	00800084 	movi	r2,2
   163e8:	dc400415 	stw	r17,16(sp)
   163ec:	d8c00615 	stw	r3,24(sp)
   163f0:	d9000315 	stw	r4,12(sp)
   163f4:	d8800215 	stw	r2,8(sp)
   163f8:	81400217 	ldw	r5,8(r16)
   163fc:	80000226 	beq	r16,zero,16408 <_puts_r+0x64>
   16400:	80800e17 	ldw	r2,56(r16)
   16404:	10001326 	beq	r2,zero,16454 <_puts_r+0xb0>
   16408:	2880030b 	ldhu	r2,12(r5)
   1640c:	10c8000c 	andi	r3,r2,8192
   16410:	1800061e 	bne	r3,zero,1642c <_puts_r+0x88>
   16414:	28c01917 	ldw	r3,100(r5)
   16418:	0137ffc4 	movi	r4,-8193
   1641c:	10880014 	ori	r2,r2,8192
   16420:	1906703a 	and	r3,r3,r4
   16424:	2880030d 	sth	r2,12(r5)
   16428:	28c01915 	stw	r3,100(r5)
   1642c:	d9800104 	addi	r6,sp,4
   16430:	8009883a 	mov	r4,r16
   16434:	001d4780 	call	1d478 <__sfvwrite_r>
   16438:	10000b1e 	bne	r2,zero,16468 <_puts_r+0xc4>
   1643c:	00800284 	movi	r2,10
   16440:	dfc00a17 	ldw	ra,40(sp)
   16444:	dc400917 	ldw	r17,36(sp)
   16448:	dc000817 	ldw	r16,32(sp)
   1644c:	dec00b04 	addi	sp,sp,44
   16450:	f800283a 	ret
   16454:	8009883a 	mov	r4,r16
   16458:	d9400015 	stw	r5,0(sp)
   1645c:	001d0240 	call	1d024 <__sinit>
   16460:	d9400017 	ldw	r5,0(sp)
   16464:	003fe806 	br	16408 <__alt_mem_mcu_subsystem_ram_0+0x77ff6408>
   16468:	00bfffc4 	movi	r2,-1
   1646c:	003ff406 	br	16440 <__alt_mem_mcu_subsystem_ram_0+0x77ff6440>

00016470 <puts>:
   16470:	008000f4 	movhi	r2,3
   16474:	200b883a 	mov	r5,r4
   16478:	111e6617 	ldw	r4,31128(r2)
   1647c:	00163a41 	jmpi	163a4 <_puts_r>

00016480 <__srget_r>:
   16480:	defffd04 	addi	sp,sp,-12
   16484:	dc400115 	stw	r17,4(sp)
   16488:	dc000015 	stw	r16,0(sp)
   1648c:	dfc00215 	stw	ra,8(sp)
   16490:	2023883a 	mov	r17,r4
   16494:	2821883a 	mov	r16,r5
   16498:	20000226 	beq	r4,zero,164a4 <__srget_r+0x24>
   1649c:	20800e17 	ldw	r2,56(r4)
   164a0:	10001026 	beq	r2,zero,164e4 <__srget_r+0x64>
   164a4:	800b883a 	mov	r5,r16
   164a8:	8809883a 	mov	r4,r17
   164ac:	001f6500 	call	1f650 <__srefill_r>
   164b0:	10000e1e 	bne	r2,zero,164ec <__srget_r+0x6c>
   164b4:	80c00017 	ldw	r3,0(r16)
   164b8:	80800117 	ldw	r2,4(r16)
   164bc:	19000044 	addi	r4,r3,1
   164c0:	10bfffc4 	addi	r2,r2,-1
   164c4:	80800115 	stw	r2,4(r16)
   164c8:	81000015 	stw	r4,0(r16)
   164cc:	18800003 	ldbu	r2,0(r3)
   164d0:	dfc00217 	ldw	ra,8(sp)
   164d4:	dc400117 	ldw	r17,4(sp)
   164d8:	dc000017 	ldw	r16,0(sp)
   164dc:	dec00304 	addi	sp,sp,12
   164e0:	f800283a 	ret
   164e4:	001d0240 	call	1d024 <__sinit>
   164e8:	003fee06 	br	164a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff64a4>
   164ec:	00bfffc4 	movi	r2,-1
   164f0:	003ff706 	br	164d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff64d0>

000164f4 <__srget>:
   164f4:	008000f4 	movhi	r2,3
   164f8:	200b883a 	mov	r5,r4
   164fc:	111e6617 	ldw	r4,31128(r2)
   16500:	00164801 	jmpi	16480 <__srget_r>

00016504 <_sbrk_r>:
   16504:	defffe04 	addi	sp,sp,-8
   16508:	dc000015 	stw	r16,0(sp)
   1650c:	00800134 	movhi	r2,4
   16510:	2021883a 	mov	r16,r4
   16514:	2809883a 	mov	r4,r5
   16518:	dfc00115 	stw	ra,4(sp)
   1651c:	10261315 	stw	zero,-26548(r2)
   16520:	0025d900 	call	25d90 <sbrk>
   16524:	10ffffd8 	cmpnei	r3,r2,-1
   16528:	18000426 	beq	r3,zero,1653c <_sbrk_r+0x38>
   1652c:	dfc00117 	ldw	ra,4(sp)
   16530:	dc000017 	ldw	r16,0(sp)
   16534:	dec00204 	addi	sp,sp,8
   16538:	f800283a 	ret
   1653c:	00c00134 	movhi	r3,4
   16540:	18e61317 	ldw	r3,-26548(r3)
   16544:	183ff926 	beq	r3,zero,1652c <__alt_mem_mcu_subsystem_ram_0+0x77ff652c>
   16548:	80c00015 	stw	r3,0(r16)
   1654c:	dfc00117 	ldw	ra,4(sp)
   16550:	dc000017 	ldw	r16,0(sp)
   16554:	dec00204 	addi	sp,sp,8
   16558:	f800283a 	ret

0001655c <_sprintf_r>:
   1655c:	deffe404 	addi	sp,sp,-112
   16560:	2811883a 	mov	r8,r5
   16564:	dfc01a15 	stw	ra,104(sp)
   16568:	d9c01b15 	stw	r7,108(sp)
   1656c:	00a00034 	movhi	r2,32768
   16570:	00fffff4 	movhi	r3,65535
   16574:	10bfffc4 	addi	r2,r2,-1
   16578:	18c08204 	addi	r3,r3,520
   1657c:	d9c01b04 	addi	r7,sp,108
   16580:	d80b883a 	mov	r5,sp
   16584:	d8c00315 	stw	r3,12(sp)
   16588:	da000015 	stw	r8,0(sp)
   1658c:	da000415 	stw	r8,16(sp)
   16590:	d8800515 	stw	r2,20(sp)
   16594:	d8800215 	stw	r2,8(sp)
   16598:	00167fc0 	call	167fc <___svfprintf_internal_r>
   1659c:	d8c00017 	ldw	r3,0(sp)
   165a0:	18000005 	stb	zero,0(r3)
   165a4:	dfc01a17 	ldw	ra,104(sp)
   165a8:	dec01c04 	addi	sp,sp,112
   165ac:	f800283a 	ret

000165b0 <sprintf>:
   165b0:	deffe304 	addi	sp,sp,-116
   165b4:	2011883a 	mov	r8,r4
   165b8:	dfc01a15 	stw	ra,104(sp)
   165bc:	d9801b15 	stw	r6,108(sp)
   165c0:	d9c01c15 	stw	r7,112(sp)
   165c4:	008000f4 	movhi	r2,3
   165c8:	111e6617 	ldw	r4,31128(r2)
   165cc:	00fffff4 	movhi	r3,65535
   165d0:	00a00034 	movhi	r2,32768
   165d4:	10bfffc4 	addi	r2,r2,-1
   165d8:	18c08204 	addi	r3,r3,520
   165dc:	280d883a 	mov	r6,r5
   165e0:	d9c01b04 	addi	r7,sp,108
   165e4:	d80b883a 	mov	r5,sp
   165e8:	d8c00315 	stw	r3,12(sp)
   165ec:	da000015 	stw	r8,0(sp)
   165f0:	da000415 	stw	r8,16(sp)
   165f4:	d8800515 	stw	r2,20(sp)
   165f8:	d8800215 	stw	r2,8(sp)
   165fc:	00167fc0 	call	167fc <___svfprintf_internal_r>
   16600:	d8c00017 	ldw	r3,0(sp)
   16604:	18000005 	stb	zero,0(r3)
   16608:	dfc01a17 	ldw	ra,104(sp)
   1660c:	dec01d04 	addi	sp,sp,116
   16610:	f800283a 	ret

00016614 <strcmp>:
   16614:	2144b03a 	or	r2,r4,r5
   16618:	108000cc 	andi	r2,r2,3
   1661c:	1000171e 	bne	r2,zero,1667c <strcmp+0x68>
   16620:	20800017 	ldw	r2,0(r4)
   16624:	28c00017 	ldw	r3,0(r5)
   16628:	10c0141e 	bne	r2,r3,1667c <strcmp+0x68>
   1662c:	027fbff4 	movhi	r9,65279
   16630:	4a7fbfc4 	addi	r9,r9,-257
   16634:	1247883a 	add	r3,r2,r9
   16638:	02202074 	movhi	r8,32897
   1663c:	0084303a 	nor	r2,zero,r2
   16640:	1884703a 	and	r2,r3,r2
   16644:	42202004 	addi	r8,r8,-32640
   16648:	1204703a 	and	r2,r2,r8
   1664c:	10000226 	beq	r2,zero,16658 <strcmp+0x44>
   16650:	00002106 	br	166d8 <strcmp+0xc4>
   16654:	1000201e 	bne	r2,zero,166d8 <strcmp+0xc4>
   16658:	21000104 	addi	r4,r4,4
   1665c:	20c00017 	ldw	r3,0(r4)
   16660:	29400104 	addi	r5,r5,4
   16664:	29800017 	ldw	r6,0(r5)
   16668:	1a45883a 	add	r2,r3,r9
   1666c:	00ce303a 	nor	r7,zero,r3
   16670:	11c4703a 	and	r2,r2,r7
   16674:	1204703a 	and	r2,r2,r8
   16678:	19bff626 	beq	r3,r6,16654 <__alt_mem_mcu_subsystem_ram_0+0x77ff6654>
   1667c:	20800003 	ldbu	r2,0(r4)
   16680:	10c03fcc 	andi	r3,r2,255
   16684:	18c0201c 	xori	r3,r3,128
   16688:	18ffe004 	addi	r3,r3,-128
   1668c:	1800081e 	bne	r3,zero,166b0 <strcmp+0x9c>
   16690:	00000d06 	br	166c8 <strcmp+0xb4>
   16694:	21000044 	addi	r4,r4,1
   16698:	20800003 	ldbu	r2,0(r4)
   1669c:	29400044 	addi	r5,r5,1
   166a0:	10c03fcc 	andi	r3,r2,255
   166a4:	18c0201c 	xori	r3,r3,128
   166a8:	18ffe004 	addi	r3,r3,-128
   166ac:	18000626 	beq	r3,zero,166c8 <strcmp+0xb4>
   166b0:	29800007 	ldb	r6,0(r5)
   166b4:	19bff726 	beq	r3,r6,16694 <__alt_mem_mcu_subsystem_ram_0+0x77ff6694>
   166b8:	28c00003 	ldbu	r3,0(r5)
   166bc:	10803fcc 	andi	r2,r2,255
   166c0:	10c5c83a 	sub	r2,r2,r3
   166c4:	f800283a 	ret
   166c8:	28c00003 	ldbu	r3,0(r5)
   166cc:	0005883a 	mov	r2,zero
   166d0:	10c5c83a 	sub	r2,r2,r3
   166d4:	f800283a 	ret
   166d8:	0005883a 	mov	r2,zero
   166dc:	f800283a 	ret

000166e0 <strcpy>:
   166e0:	2906b03a 	or	r3,r5,r4
   166e4:	18c000cc 	andi	r3,r3,3
   166e8:	2005883a 	mov	r2,r4
   166ec:	18001d1e 	bne	r3,zero,16764 <strcpy+0x84>
   166f0:	29c00017 	ldw	r7,0(r5)
   166f4:	027fbff4 	movhi	r9,65279
   166f8:	4a7fbfc4 	addi	r9,r9,-257
   166fc:	3a47883a 	add	r3,r7,r9
   16700:	01c8303a 	nor	r4,zero,r7
   16704:	02202074 	movhi	r8,32897
   16708:	1906703a 	and	r3,r3,r4
   1670c:	42202004 	addi	r8,r8,-32640
   16710:	1a06703a 	and	r3,r3,r8
   16714:	100d883a 	mov	r6,r2
   16718:	1800091e 	bne	r3,zero,16740 <strcpy+0x60>
   1671c:	31800104 	addi	r6,r6,4
   16720:	29400104 	addi	r5,r5,4
   16724:	31ffff15 	stw	r7,-4(r6)
   16728:	29c00017 	ldw	r7,0(r5)
   1672c:	3a47883a 	add	r3,r7,r9
   16730:	01d4303a 	nor	r10,zero,r7
   16734:	1a86703a 	and	r3,r3,r10
   16738:	1a06703a 	and	r3,r3,r8
   1673c:	183ff726 	beq	r3,zero,1671c <__alt_mem_mcu_subsystem_ram_0+0x77ff671c>
   16740:	29400044 	addi	r5,r5,1
   16744:	28ffffc3 	ldbu	r3,-1(r5)
   16748:	31800044 	addi	r6,r6,1
   1674c:	30ffffc5 	stb	r3,-1(r6)
   16750:	18c03fcc 	andi	r3,r3,255
   16754:	18c0201c 	xori	r3,r3,128
   16758:	18ffe004 	addi	r3,r3,-128
   1675c:	183ff81e 	bne	r3,zero,16740 <__alt_mem_mcu_subsystem_ram_0+0x77ff6740>
   16760:	f800283a 	ret
   16764:	200d883a 	mov	r6,r4
   16768:	003ff506 	br	16740 <__alt_mem_mcu_subsystem_ram_0+0x77ff6740>

0001676c <strlen>:
   1676c:	20c000cc 	andi	r3,r4,3
   16770:	2005883a 	mov	r2,r4
   16774:	18000826 	beq	r3,zero,16798 <strlen+0x2c>
   16778:	20c00007 	ldb	r3,0(r4)
   1677c:	1800031e 	bne	r3,zero,1678c <strlen+0x20>
   16780:	00001c06 	br	167f4 <strlen+0x88>
   16784:	20c00007 	ldb	r3,0(r4)
   16788:	18001826 	beq	r3,zero,167ec <strlen+0x80>
   1678c:	21000044 	addi	r4,r4,1
   16790:	20c000cc 	andi	r3,r4,3
   16794:	183ffb1e 	bne	r3,zero,16784 <__alt_mem_mcu_subsystem_ram_0+0x77ff6784>
   16798:	21400017 	ldw	r5,0(r4)
   1679c:	01ffbff4 	movhi	r7,65279
   167a0:	39ffbfc4 	addi	r7,r7,-257
   167a4:	29c7883a 	add	r3,r5,r7
   167a8:	01a02074 	movhi	r6,32897
   167ac:	014a303a 	nor	r5,zero,r5
   167b0:	1946703a 	and	r3,r3,r5
   167b4:	31a02004 	addi	r6,r6,-32640
   167b8:	1986703a 	and	r3,r3,r6
   167bc:	1800091e 	bne	r3,zero,167e4 <strlen+0x78>
   167c0:	21000104 	addi	r4,r4,4
   167c4:	21400017 	ldw	r5,0(r4)
   167c8:	29c7883a 	add	r3,r5,r7
   167cc:	014a303a 	nor	r5,zero,r5
   167d0:	1946703a 	and	r3,r3,r5
   167d4:	1986703a 	and	r3,r3,r6
   167d8:	183ff926 	beq	r3,zero,167c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff67c0>
   167dc:	00000106 	br	167e4 <strlen+0x78>
   167e0:	21000044 	addi	r4,r4,1
   167e4:	20c00007 	ldb	r3,0(r4)
   167e8:	183ffd1e 	bne	r3,zero,167e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff67e0>
   167ec:	2085c83a 	sub	r2,r4,r2
   167f0:	f800283a 	ret
   167f4:	0005883a 	mov	r2,zero
   167f8:	f800283a 	ret

000167fc <___svfprintf_internal_r>:
   167fc:	deffbd04 	addi	sp,sp,-268
   16800:	dfc04215 	stw	ra,264(sp)
   16804:	ddc04015 	stw	r23,256(sp)
   16808:	dc003915 	stw	r16,228(sp)
   1680c:	d9400415 	stw	r5,16(sp)
   16810:	2821883a 	mov	r16,r5
   16814:	d9000515 	stw	r4,20(sp)
   16818:	302f883a 	mov	r23,r6
   1681c:	d9c00815 	stw	r7,32(sp)
   16820:	df004115 	stw	fp,260(sp)
   16824:	dd803f15 	stw	r22,252(sp)
   16828:	dd403e15 	stw	r21,248(sp)
   1682c:	dd003d15 	stw	r20,244(sp)
   16830:	dcc03c15 	stw	r19,240(sp)
   16834:	dc803b15 	stw	r18,236(sp)
   16838:	dc403a15 	stw	r17,232(sp)
   1683c:	001dba00 	call	1dba0 <_localeconv_r>
   16840:	10800017 	ldw	r2,0(r2)
   16844:	1009883a 	mov	r4,r2
   16848:	d8801015 	stw	r2,64(sp)
   1684c:	001676c0 	call	1676c <strlen>
   16850:	d8800f15 	stw	r2,60(sp)
   16854:	8080030b 	ldhu	r2,12(r16)
   16858:	1080200c 	andi	r2,r2,128
   1685c:	10000226 	beq	r2,zero,16868 <___svfprintf_internal_r+0x6c>
   16860:	80800417 	ldw	r2,16(r16)
   16864:	10054326 	beq	r2,zero,17d74 <___svfprintf_internal_r+0x1578>
   16868:	dd402904 	addi	r21,sp,164
   1686c:	dd401c15 	stw	r21,112(sp)
   16870:	d8001e15 	stw	zero,120(sp)
   16874:	d8001d15 	stw	zero,116(sp)
   16878:	d8000a15 	stw	zero,40(sp)
   1687c:	d8000b15 	stw	zero,44(sp)
   16880:	d8000c15 	stw	zero,48(sp)
   16884:	a811883a 	mov	r8,r21
   16888:	d8000e15 	stw	zero,56(sp)
   1688c:	d8001115 	stw	zero,68(sp)
   16890:	d8000615 	stw	zero,24(sp)
   16894:	b839883a 	mov	fp,r23
   16898:	e0800007 	ldb	r2,0(fp)
   1689c:	10008c26 	beq	r2,zero,16ad0 <___svfprintf_internal_r+0x2d4>
   168a0:	10800960 	cmpeqi	r2,r2,37
   168a4:	e021883a 	mov	r16,fp
   168a8:	10000226 	beq	r2,zero,168b4 <___svfprintf_internal_r+0xb8>
   168ac:	00001706 	br	1690c <___svfprintf_internal_r+0x110>
   168b0:	18000426 	beq	r3,zero,168c4 <___svfprintf_internal_r+0xc8>
   168b4:	84000044 	addi	r16,r16,1
   168b8:	80800007 	ldb	r2,0(r16)
   168bc:	10c00958 	cmpnei	r3,r2,37
   168c0:	103ffb1e 	bne	r2,zero,168b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff68b0>
   168c4:	8723c83a 	sub	r17,r16,fp
   168c8:	88000e26 	beq	r17,zero,16904 <___svfprintf_internal_r+0x108>
   168cc:	d8c01e17 	ldw	r3,120(sp)
   168d0:	d8801d17 	ldw	r2,116(sp)
   168d4:	47000015 	stw	fp,0(r8)
   168d8:	1c47883a 	add	r3,r3,r17
   168dc:	10800044 	addi	r2,r2,1
   168e0:	d8801d15 	stw	r2,116(sp)
   168e4:	44400115 	stw	r17,4(r8)
   168e8:	d8c01e15 	stw	r3,120(sp)
   168ec:	10800208 	cmpgei	r2,r2,8
   168f0:	1000701e 	bne	r2,zero,16ab4 <___svfprintf_internal_r+0x2b8>
   168f4:	42000204 	addi	r8,r8,8
   168f8:	d8800617 	ldw	r2,24(sp)
   168fc:	1445883a 	add	r2,r2,r17
   16900:	d8800615 	stw	r2,24(sp)
   16904:	80800007 	ldb	r2,0(r16)
   16908:	10007126 	beq	r2,zero,16ad0 <___svfprintf_internal_r+0x2d4>
   1690c:	87000044 	addi	fp,r16,1
   16910:	84000047 	ldb	r16,1(r16)
   16914:	d8001545 	stb	zero,85(sp)
   16918:	0009883a 	mov	r4,zero
   1691c:	000b883a 	mov	r5,zero
   16920:	05bfffc4 	movi	r22,-1
   16924:	0023883a 	mov	r17,zero
   16928:	0017883a 	mov	r11,zero
   1692c:	e7000044 	addi	fp,fp,1
   16930:	80bff804 	addi	r2,r16,-32
   16934:	10c01668 	cmpgeui	r3,r2,89
   16938:	1800cd1e 	bne	r3,zero,16c70 <___svfprintf_internal_r+0x474>
   1693c:	100490ba 	slli	r2,r2,2
   16940:	00c00074 	movhi	r3,1
   16944:	10c7883a 	add	r3,r2,r3
   16948:	189a5417 	ldw	r2,26960(r3)
   1694c:	1000683a 	jmp	r2
   16950:	000171c8 	cmpgei	zero,zero,1479
   16954:	00016c70 	cmpltui	zero,zero,1457
   16958:	00016c70 	cmpltui	zero,zero,1457
   1695c:	000171bc 	xorhi	zero,zero,1478
   16960:	00016c70 	cmpltui	zero,zero,1457
   16964:	00016c70 	cmpltui	zero,zero,1457
   16968:	00016c70 	cmpltui	zero,zero,1457
   1696c:	00016c70 	cmpltui	zero,zero,1457
   16970:	00016c70 	cmpltui	zero,zero,1457
   16974:	00016c70 	cmpltui	zero,zero,1457
   16978:	00017194 	movui	zero,1478
   1697c:	000172a4 	muli	zero,zero,1482
   16980:	00016c70 	cmpltui	zero,zero,1457
   16984:	0001728c 	andi	zero,zero,1482
   16988:	00017248 	cmpgei	zero,zero,1481
   1698c:	00016c70 	cmpltui	zero,zero,1457
   16990:	0001723c 	xorhi	zero,zero,1480
   16994:	00016c40 	call	16c4 <arp_process_rx+0x454>
   16998:	00016c40 	call	16c4 <arp_process_rx+0x454>
   1699c:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169a0:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169a4:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169a8:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169ac:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169b0:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169b4:	00016c40 	call	16c4 <arp_process_rx+0x454>
   169b8:	00016c70 	cmpltui	zero,zero,1457
   169bc:	00016c70 	cmpltui	zero,zero,1457
   169c0:	00016c70 	cmpltui	zero,zero,1457
   169c4:	00016c70 	cmpltui	zero,zero,1457
   169c8:	00016c70 	cmpltui	zero,zero,1457
   169cc:	00016c70 	cmpltui	zero,zero,1457
   169d0:	00016c70 	cmpltui	zero,zero,1457
   169d4:	00016c70 	cmpltui	zero,zero,1457
   169d8:	00016c70 	cmpltui	zero,zero,1457
   169dc:	00016c70 	cmpltui	zero,zero,1457
   169e0:	00017390 	cmplti	zero,zero,1486
   169e4:	000172c0 	call	172c <arp_process_rx+0x4bc>
   169e8:	00016c70 	cmpltui	zero,zero,1457
   169ec:	000172c0 	call	172c <arp_process_rx+0x4bc>
   169f0:	00016c70 	cmpltui	zero,zero,1457
   169f4:	00016c70 	cmpltui	zero,zero,1457
   169f8:	00016c70 	cmpltui	zero,zero,1457
   169fc:	00016c70 	cmpltui	zero,zero,1457
   16a00:	000172b4 	movhi	zero,1482
   16a04:	00016c70 	cmpltui	zero,zero,1457
   16a08:	00016c70 	cmpltui	zero,zero,1457
   16a0c:	00016b90 	cmplti	zero,zero,1454
   16a10:	00016c70 	cmpltui	zero,zero,1457
   16a14:	00016c70 	cmpltui	zero,zero,1457
   16a18:	00016c70 	cmpltui	zero,zero,1457
   16a1c:	00016c70 	cmpltui	zero,zero,1457
   16a20:	00016c70 	cmpltui	zero,zero,1457
   16a24:	00016b2c 	andhi	zero,zero,1452
   16a28:	00016c70 	cmpltui	zero,zero,1457
   16a2c:	00016c70 	cmpltui	zero,zero,1457
   16a30:	0001714c 	andi	zero,zero,1477
   16a34:	00016c70 	cmpltui	zero,zero,1457
   16a38:	00016c70 	cmpltui	zero,zero,1457
   16a3c:	00016c70 	cmpltui	zero,zero,1457
   16a40:	00016c70 	cmpltui	zero,zero,1457
   16a44:	00016c70 	cmpltui	zero,zero,1457
   16a48:	00016c70 	cmpltui	zero,zero,1457
   16a4c:	00016c70 	cmpltui	zero,zero,1457
   16a50:	00016c70 	cmpltui	zero,zero,1457
   16a54:	00016c70 	cmpltui	zero,zero,1457
   16a58:	00016c70 	cmpltui	zero,zero,1457
   16a5c:	00016dd0 	cmplti	zero,zero,1463
   16a60:	00016d94 	movui	zero,1462
   16a64:	000172c0 	call	172c <arp_process_rx+0x4bc>
   16a68:	000172c0 	call	172c <arp_process_rx+0x4bc>
   16a6c:	000172c0 	call	172c <arp_process_rx+0x4bc>
   16a70:	00016d88 	cmpgei	zero,zero,1462
   16a74:	00016d94 	movui	zero,1462
   16a78:	00016c70 	cmpltui	zero,zero,1457
   16a7c:	00016c70 	cmpltui	zero,zero,1457
   16a80:	00016d74 	movhi	zero,1461
   16a84:	00016c70 	cmpltui	zero,zero,1457
   16a88:	00016d38 	rdprs	zero,zero,1460
   16a8c:	00016b94 	movui	zero,1454
   16a90:	00016c88 	cmpgei	zero,zero,1458
   16a94:	00016d2c 	andhi	zero,zero,1460
   16a98:	00016c70 	cmpltui	zero,zero,1457
   16a9c:	00016cc8 	cmpgei	zero,zero,1459
   16aa0:	00016c70 	cmpltui	zero,zero,1457
   16aa4:	00016b30 	cmpltui	zero,zero,1452
   16aa8:	00016c70 	cmpltui	zero,zero,1457
   16aac:	00016c70 	cmpltui	zero,zero,1457
   16ab0:	000171f4 	movhi	zero,1479
   16ab4:	d9400417 	ldw	r5,16(sp)
   16ab8:	d9000517 	ldw	r4,20(sp)
   16abc:	d9801c04 	addi	r6,sp,112
   16ac0:	001fe040 	call	1fe04 <__ssprint_r>
   16ac4:	1000081e 	bne	r2,zero,16ae8 <___svfprintf_internal_r+0x2ec>
   16ac8:	a811883a 	mov	r8,r21
   16acc:	003f8a06 	br	168f8 <__alt_mem_mcu_subsystem_ram_0+0x77ff68f8>
   16ad0:	d8801e17 	ldw	r2,120(sp)
   16ad4:	10000426 	beq	r2,zero,16ae8 <___svfprintf_internal_r+0x2ec>
   16ad8:	d9400417 	ldw	r5,16(sp)
   16adc:	d9000517 	ldw	r4,20(sp)
   16ae0:	d9801c04 	addi	r6,sp,112
   16ae4:	001fe040 	call	1fe04 <__ssprint_r>
   16ae8:	d8800417 	ldw	r2,16(sp)
   16aec:	1080030b 	ldhu	r2,12(r2)
   16af0:	1080100c 	andi	r2,r2,64
   16af4:	10067c1e 	bne	r2,zero,184e8 <___svfprintf_internal_r+0x1cec>
   16af8:	d8800617 	ldw	r2,24(sp)
   16afc:	dfc04217 	ldw	ra,264(sp)
   16b00:	df004117 	ldw	fp,260(sp)
   16b04:	ddc04017 	ldw	r23,256(sp)
   16b08:	dd803f17 	ldw	r22,252(sp)
   16b0c:	dd403e17 	ldw	r21,248(sp)
   16b10:	dd003d17 	ldw	r20,244(sp)
   16b14:	dcc03c17 	ldw	r19,240(sp)
   16b18:	dc803b17 	ldw	r18,236(sp)
   16b1c:	dc403a17 	ldw	r17,232(sp)
   16b20:	dc003917 	ldw	r16,228(sp)
   16b24:	dec04304 	addi	sp,sp,268
   16b28:	f800283a 	ret
   16b2c:	5ac00414 	ori	r11,r11,16
   16b30:	5880080c 	andi	r2,r11,32
   16b34:	1003d626 	beq	r2,zero,17a90 <___svfprintf_internal_r+0x1294>
   16b38:	d8c00817 	ldw	r3,32(sp)
   16b3c:	00800044 	movi	r2,1
   16b40:	1d000017 	ldw	r20,0(r3)
   16b44:	1dc00117 	ldw	r23,4(r3)
   16b48:	18c00204 	addi	r3,r3,8
   16b4c:	d8c00815 	stw	r3,32(sp)
   16b50:	d8001545 	stb	zero,85(sp)
   16b54:	b0ffffe0 	cmpeqi	r3,r22,-1
   16b58:	1800191e 	bne	r3,zero,16bc0 <___svfprintf_internal_r+0x3c4>
   16b5c:	0019883a 	mov	r12,zero
   16b60:	04ffdfc4 	movi	r19,-129
   16b64:	a5c6b03a 	or	r3,r20,r23
   16b68:	5ce6703a 	and	r19,r11,r19
   16b6c:	1800161e 	bne	r3,zero,16bc8 <___svfprintf_internal_r+0x3cc>
   16b70:	b004f31e 	bne	r22,zero,17f40 <___svfprintf_internal_r+0x1744>
   16b74:	1003a01e 	bne	r2,zero,179f8 <___svfprintf_internal_r+0x11fc>
   16b78:	5dc0004c 	andi	r23,r11,1
   16b7c:	b803ef26 	beq	r23,zero,17b3c <___svfprintf_internal_r+0x1340>
   16b80:	00800c04 	movi	r2,48
   16b84:	d88028c5 	stb	r2,163(sp)
   16b88:	dc8028c4 	addi	r18,sp,163
   16b8c:	00023206 	br	17458 <___svfprintf_internal_r+0xc5c>
   16b90:	5ac00414 	ori	r11,r11,16
   16b94:	5880080c 	andi	r2,r11,32
   16b98:	1003c926 	beq	r2,zero,17ac0 <___svfprintf_internal_r+0x12c4>
   16b9c:	d8c00817 	ldw	r3,32(sp)
   16ba0:	d8001545 	stb	zero,85(sp)
   16ba4:	0005883a 	mov	r2,zero
   16ba8:	1d000017 	ldw	r20,0(r3)
   16bac:	1dc00117 	ldw	r23,4(r3)
   16bb0:	18c00204 	addi	r3,r3,8
   16bb4:	d8c00815 	stw	r3,32(sp)
   16bb8:	b0ffffe0 	cmpeqi	r3,r22,-1
   16bbc:	183fe726 	beq	r3,zero,16b5c <__alt_mem_mcu_subsystem_ram_0+0x77ff6b5c>
   16bc0:	5827883a 	mov	r19,r11
   16bc4:	0019883a 	mov	r12,zero
   16bc8:	10c00060 	cmpeqi	r3,r2,1
   16bcc:	18020c1e 	bne	r3,zero,17400 <___svfprintf_internal_r+0xc04>
   16bd0:	108000a0 	cmpeqi	r2,r2,2
   16bd4:	1002121e 	bne	r2,zero,17420 <___svfprintf_internal_r+0xc24>
   16bd8:	a807883a 	mov	r3,r21
   16bdc:	00000106 	br	16be4 <___svfprintf_internal_r+0x3e8>
   16be0:	9007883a 	mov	r3,r18
   16be4:	a008d0fa 	srli	r4,r20,3
   16be8:	b80a977a 	slli	r5,r23,29
   16bec:	b82ed0fa 	srli	r23,r23,3
   16bf0:	a50001cc 	andi	r20,r20,7
   16bf4:	a0800c04 	addi	r2,r20,48
   16bf8:	2928b03a 	or	r20,r5,r4
   16bfc:	18bfffc5 	stb	r2,-1(r3)
   16c00:	a5c8b03a 	or	r4,r20,r23
   16c04:	1cbfffc4 	addi	r18,r3,-1
   16c08:	203ff51e 	bne	r4,zero,16be0 <__alt_mem_mcu_subsystem_ram_0+0x77ff6be0>
   16c0c:	9900004c 	andi	r4,r19,1
   16c10:	20021026 	beq	r4,zero,17454 <___svfprintf_internal_r+0xc58>
   16c14:	10803fcc 	andi	r2,r2,255
   16c18:	1080201c 	xori	r2,r2,128
   16c1c:	10bfe004 	addi	r2,r2,-128
   16c20:	10800c18 	cmpnei	r2,r2,48
   16c24:	10020b26 	beq	r2,zero,17454 <___svfprintf_internal_r+0xc58>
   16c28:	18ffff84 	addi	r3,r3,-2
   16c2c:	00800c04 	movi	r2,48
   16c30:	90bfffc5 	stb	r2,-1(r18)
   16c34:	a8efc83a 	sub	r23,r21,r3
   16c38:	1825883a 	mov	r18,r3
   16c3c:	00020606 	br	17458 <___svfprintf_internal_r+0xc5c>
   16c40:	0023883a 	mov	r17,zero
   16c44:	80bff404 	addi	r2,r16,-48
   16c48:	e7000044 	addi	fp,fp,1
   16c4c:	8c4002a4 	muli	r17,r17,10
   16c50:	e43fffc7 	ldb	r16,-1(fp)
   16c54:	1463883a 	add	r17,r2,r17
   16c58:	80bff404 	addi	r2,r16,-48
   16c5c:	10c002b0 	cmpltui	r3,r2,10
   16c60:	183ff91e 	bne	r3,zero,16c48 <__alt_mem_mcu_subsystem_ram_0+0x77ff6c48>
   16c64:	80bff804 	addi	r2,r16,-32
   16c68:	10c01668 	cmpgeui	r3,r2,89
   16c6c:	183f3326 	beq	r3,zero,1693c <__alt_mem_mcu_subsystem_ram_0+0x77ff693c>
   16c70:	21003fcc 	andi	r4,r4,255
   16c74:	2006ca1e 	bne	r4,zero,187a0 <___svfprintf_internal_r+0x1fa4>
   16c78:	803f9526 	beq	r16,zero,16ad0 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ad0>
   16c7c:	dc001f05 	stb	r16,124(sp)
   16c80:	d8001545 	stb	zero,85(sp)
   16c84:	00005806 	br	16de8 <___svfprintf_internal_r+0x5ec>
   16c88:	d8c00817 	ldw	r3,32(sp)
   16c8c:	00800c04 	movi	r2,48
   16c90:	d8801585 	stb	r2,86(sp)
   16c94:	00801e04 	movi	r2,120
   16c98:	010000f4 	movhi	r4,3
   16c9c:	d88015c5 	stb	r2,87(sp)
   16ca0:	18800104 	addi	r2,r3,4
   16ca4:	d8800815 	stw	r2,32(sp)
   16ca8:	208dd104 	addi	r2,r4,14148
   16cac:	d8800e15 	stw	r2,56(sp)
   16cb0:	1d000017 	ldw	r20,0(r3)
   16cb4:	002f883a 	mov	r23,zero
   16cb8:	5ac00094 	ori	r11,r11,2
   16cbc:	00800084 	movi	r2,2
   16cc0:	04001e04 	movi	r16,120
   16cc4:	003fa206 	br	16b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b50>
   16cc8:	d8800817 	ldw	r2,32(sp)
   16ccc:	d8001545 	stb	zero,85(sp)
   16cd0:	14800017 	ldw	r18,0(r2)
   16cd4:	14c00104 	addi	r19,r2,4
   16cd8:	90044d26 	beq	r18,zero,17e10 <___svfprintf_internal_r+0x1614>
   16cdc:	da000815 	stw	r8,32(sp)
   16ce0:	dac00715 	stw	r11,28(sp)
   16ce4:	b0bfffe0 	cmpeqi	r2,r22,-1
   16ce8:	1004f11e 	bne	r2,zero,180b0 <___svfprintf_internal_r+0x18b4>
   16cec:	b00d883a 	mov	r6,r22
   16cf0:	000b883a 	mov	r5,zero
   16cf4:	9009883a 	mov	r4,r18
   16cf8:	001ddb00 	call	1ddb0 <memchr>
   16cfc:	dac00717 	ldw	r11,28(sp)
   16d00:	da000817 	ldw	r8,32(sp)
   16d04:	1005a826 	beq	r2,zero,183a8 <___svfprintf_internal_r+0x1bac>
   16d08:	14afc83a 	sub	r23,r2,r18
   16d0c:	db001543 	ldbu	r12,85(sp)
   16d10:	b829883a 	mov	r20,r23
   16d14:	b804ee16 	blt	r23,zero,180d0 <___svfprintf_internal_r+0x18d4>
   16d18:	dcc00815 	stw	r19,32(sp)
   16d1c:	002d883a 	mov	r22,zero
   16d20:	5827883a 	mov	r19,r11
   16d24:	d8000915 	stw	zero,36(sp)
   16d28:	0001cf06 	br	17468 <___svfprintf_internal_r+0xc6c>
   16d2c:	5ac00814 	ori	r11,r11,32
   16d30:	e4000007 	ldb	r16,0(fp)
   16d34:	003efd06 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   16d38:	21003fcc 	andi	r4,r4,255
   16d3c:	2006941e 	bne	r4,zero,18790 <___svfprintf_internal_r+0x1f94>
   16d40:	d9000817 	ldw	r4,32(sp)
   16d44:	5880080c 	andi	r2,r11,32
   16d48:	20c00017 	ldw	r3,0(r4)
   16d4c:	21000104 	addi	r4,r4,4
   16d50:	d9000815 	stw	r4,32(sp)
   16d54:	1003851e 	bne	r2,zero,17b6c <___svfprintf_internal_r+0x1370>
   16d58:	5880040c 	andi	r2,r11,16
   16d5c:	1004561e 	bne	r2,zero,17eb8 <___svfprintf_internal_r+0x16bc>
   16d60:	5ac0100c 	andi	r11,r11,64
   16d64:	58045426 	beq	r11,zero,17eb8 <___svfprintf_internal_r+0x16bc>
   16d68:	d8800617 	ldw	r2,24(sp)
   16d6c:	1880000d 	sth	r2,0(r3)
   16d70:	003ec906 	br	16898 <__alt_mem_mcu_subsystem_ram_0+0x77ff6898>
   16d74:	e4000007 	ldb	r16,0(fp)
   16d78:	80801b18 	cmpnei	r2,r16,108
   16d7c:	10041326 	beq	r2,zero,17dcc <___svfprintf_internal_r+0x15d0>
   16d80:	5ac00414 	ori	r11,r11,16
   16d84:	003ee906 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   16d88:	5ac01014 	ori	r11,r11,64
   16d8c:	e4000007 	ldb	r16,0(fp)
   16d90:	003ee606 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   16d94:	21003fcc 	andi	r4,r4,255
   16d98:	20067b1e 	bne	r4,zero,18788 <___svfprintf_internal_r+0x1f8c>
   16d9c:	5880080c 	andi	r2,r11,32
   16da0:	10018026 	beq	r2,zero,173a4 <___svfprintf_internal_r+0xba8>
   16da4:	d8800817 	ldw	r2,32(sp)
   16da8:	15000017 	ldw	r20,0(r2)
   16dac:	15c00117 	ldw	r23,4(r2)
   16db0:	10800204 	addi	r2,r2,8
   16db4:	d8800815 	stw	r2,32(sp)
   16db8:	b8018716 	blt	r23,zero,173d8 <___svfprintf_internal_r+0xbdc>
   16dbc:	b0bfffd8 	cmpnei	r2,r22,-1
   16dc0:	db001543 	ldbu	r12,85(sp)
   16dc4:	10018d26 	beq	r2,zero,173fc <___svfprintf_internal_r+0xc00>
   16dc8:	00800044 	movi	r2,1
   16dcc:	003f6406 	br	16b60 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b60>
   16dd0:	d8c00817 	ldw	r3,32(sp)
   16dd4:	d8001545 	stb	zero,85(sp)
   16dd8:	18800017 	ldw	r2,0(r3)
   16ddc:	18c00104 	addi	r3,r3,4
   16de0:	d8c00815 	stw	r3,32(sp)
   16de4:	d8801f05 	stb	r2,124(sp)
   16de8:	5827883a 	mov	r19,r11
   16dec:	05000044 	movi	r20,1
   16df0:	05c00044 	movi	r23,1
   16df4:	002d883a 	mov	r22,zero
   16df8:	d8000915 	stw	zero,36(sp)
   16dfc:	dc801f04 	addi	r18,sp,124
   16e00:	0005883a 	mov	r2,zero
   16e04:	9b00008c 	andi	r12,r19,2
   16e08:	60000126 	beq	r12,zero,16e10 <___svfprintf_internal_r+0x614>
   16e0c:	a5000084 	addi	r20,r20,2
   16e10:	9ac0210c 	andi	r11,r19,132
   16e14:	d8c01e17 	ldw	r3,120(sp)
   16e18:	5800381e 	bne	r11,zero,16efc <___svfprintf_internal_r+0x700>
   16e1c:	8d1bc83a 	sub	r13,r17,r20
   16e20:	0340360e 	bge	zero,r13,16efc <___svfprintf_internal_r+0x700>
   16e24:	01c000f4 	movhi	r7,3
   16e28:	69000450 	cmplti	r4,r13,17
   16e2c:	39cddc84 	addi	r7,r7,14194
   16e30:	d8801d17 	ldw	r2,116(sp)
   16e34:	2000271e 	bne	r4,zero,16ed4 <___svfprintf_internal_r+0x6d8>
   16e38:	dc001315 	stw	r16,76(sp)
   16e3c:	dc401415 	stw	r17,80(sp)
   16e40:	03800404 	movi	r14,16
   16e44:	db000d15 	stw	r12,52(sp)
   16e48:	dac01215 	stw	r11,72(sp)
   16e4c:	6821883a 	mov	r16,r13
   16e50:	3823883a 	mov	r17,r7
   16e54:	00000406 	br	16e68 <___svfprintf_internal_r+0x66c>
   16e58:	843ffc04 	addi	r16,r16,-16
   16e5c:	81000448 	cmpgei	r4,r16,17
   16e60:	42000204 	addi	r8,r8,8
   16e64:	20001526 	beq	r4,zero,16ebc <___svfprintf_internal_r+0x6c0>
   16e68:	10800044 	addi	r2,r2,1
   16e6c:	18c00404 	addi	r3,r3,16
   16e70:	44400015 	stw	r17,0(r8)
   16e74:	43800115 	stw	r14,4(r8)
   16e78:	d8c01e15 	stw	r3,120(sp)
   16e7c:	d8801d15 	stw	r2,116(sp)
   16e80:	11000208 	cmpgei	r4,r2,8
   16e84:	203ff426 	beq	r4,zero,16e58 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e58>
   16e88:	d9400417 	ldw	r5,16(sp)
   16e8c:	d9000517 	ldw	r4,20(sp)
   16e90:	d9801c04 	addi	r6,sp,112
   16e94:	db800715 	stw	r14,28(sp)
   16e98:	001fe040 	call	1fe04 <__ssprint_r>
   16e9c:	103f121e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   16ea0:	843ffc04 	addi	r16,r16,-16
   16ea4:	81000448 	cmpgei	r4,r16,17
   16ea8:	d8c01e17 	ldw	r3,120(sp)
   16eac:	d8801d17 	ldw	r2,116(sp)
   16eb0:	a811883a 	mov	r8,r21
   16eb4:	db800717 	ldw	r14,28(sp)
   16eb8:	203feb1e 	bne	r4,zero,16e68 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e68>
   16ebc:	801b883a 	mov	r13,r16
   16ec0:	880f883a 	mov	r7,r17
   16ec4:	db000d17 	ldw	r12,52(sp)
   16ec8:	dac01217 	ldw	r11,72(sp)
   16ecc:	dc001317 	ldw	r16,76(sp)
   16ed0:	dc401417 	ldw	r17,80(sp)
   16ed4:	10800044 	addi	r2,r2,1
   16ed8:	1b47883a 	add	r3,r3,r13
   16edc:	d8801d15 	stw	r2,116(sp)
   16ee0:	41c00015 	stw	r7,0(r8)
   16ee4:	43400115 	stw	r13,4(r8)
   16ee8:	d8c01e15 	stw	r3,120(sp)
   16eec:	10800208 	cmpgei	r2,r2,8
   16ef0:	1003f41e 	bne	r2,zero,17ec4 <___svfprintf_internal_r+0x16c8>
   16ef4:	d8801547 	ldb	r2,85(sp)
   16ef8:	42000204 	addi	r8,r8,8
   16efc:	10000c26 	beq	r2,zero,16f30 <___svfprintf_internal_r+0x734>
   16f00:	d8801d17 	ldw	r2,116(sp)
   16f04:	d9001544 	addi	r4,sp,85
   16f08:	18c00044 	addi	r3,r3,1
   16f0c:	10800044 	addi	r2,r2,1
   16f10:	41000015 	stw	r4,0(r8)
   16f14:	01000044 	movi	r4,1
   16f18:	d8801d15 	stw	r2,116(sp)
   16f1c:	41000115 	stw	r4,4(r8)
   16f20:	d8c01e15 	stw	r3,120(sp)
   16f24:	10800208 	cmpgei	r2,r2,8
   16f28:	1002391e 	bne	r2,zero,17810 <___svfprintf_internal_r+0x1014>
   16f2c:	42000204 	addi	r8,r8,8
   16f30:	60000c26 	beq	r12,zero,16f64 <___svfprintf_internal_r+0x768>
   16f34:	d8801d17 	ldw	r2,116(sp)
   16f38:	d9001584 	addi	r4,sp,86
   16f3c:	18c00084 	addi	r3,r3,2
   16f40:	10800044 	addi	r2,r2,1
   16f44:	41000015 	stw	r4,0(r8)
   16f48:	01000084 	movi	r4,2
   16f4c:	d8801d15 	stw	r2,116(sp)
   16f50:	41000115 	stw	r4,4(r8)
   16f54:	d8c01e15 	stw	r3,120(sp)
   16f58:	10800208 	cmpgei	r2,r2,8
   16f5c:	1002381e 	bne	r2,zero,17840 <___svfprintf_internal_r+0x1044>
   16f60:	42000204 	addi	r8,r8,8
   16f64:	5ac02018 	cmpnei	r11,r11,128
   16f68:	58019326 	beq	r11,zero,175b8 <___svfprintf_internal_r+0xdbc>
   16f6c:	b5edc83a 	sub	r22,r22,r23
   16f70:	0580330e 	bge	zero,r22,17040 <___svfprintf_internal_r+0x844>
   16f74:	02c000f4 	movhi	r11,3
   16f78:	b1000450 	cmplti	r4,r22,17
   16f7c:	5acdd884 	addi	r11,r11,14178
   16f80:	d8801d17 	ldw	r2,116(sp)
   16f84:	2000251e 	bne	r4,zero,1701c <___svfprintf_internal_r+0x820>
   16f88:	dc000d15 	stw	r16,52(sp)
   16f8c:	02800404 	movi	r10,16
   16f90:	b021883a 	mov	r16,r22
   16f94:	982d883a 	mov	r22,r19
   16f98:	8827883a 	mov	r19,r17
   16f9c:	5823883a 	mov	r17,r11
   16fa0:	00000406 	br	16fb4 <___svfprintf_internal_r+0x7b8>
   16fa4:	843ffc04 	addi	r16,r16,-16
   16fa8:	81000448 	cmpgei	r4,r16,17
   16fac:	42000204 	addi	r8,r8,8
   16fb0:	20001526 	beq	r4,zero,17008 <___svfprintf_internal_r+0x80c>
   16fb4:	10800044 	addi	r2,r2,1
   16fb8:	18c00404 	addi	r3,r3,16
   16fbc:	44400015 	stw	r17,0(r8)
   16fc0:	42800115 	stw	r10,4(r8)
   16fc4:	d8c01e15 	stw	r3,120(sp)
   16fc8:	d8801d15 	stw	r2,116(sp)
   16fcc:	11000208 	cmpgei	r4,r2,8
   16fd0:	203ff426 	beq	r4,zero,16fa4 <__alt_mem_mcu_subsystem_ram_0+0x77ff6fa4>
   16fd4:	d9400417 	ldw	r5,16(sp)
   16fd8:	d9000517 	ldw	r4,20(sp)
   16fdc:	d9801c04 	addi	r6,sp,112
   16fe0:	da800715 	stw	r10,28(sp)
   16fe4:	001fe040 	call	1fe04 <__ssprint_r>
   16fe8:	103ebf1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   16fec:	843ffc04 	addi	r16,r16,-16
   16ff0:	81000448 	cmpgei	r4,r16,17
   16ff4:	d8c01e17 	ldw	r3,120(sp)
   16ff8:	d8801d17 	ldw	r2,116(sp)
   16ffc:	a811883a 	mov	r8,r21
   17000:	da800717 	ldw	r10,28(sp)
   17004:	203feb1e 	bne	r4,zero,16fb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff6fb4>
   17008:	8817883a 	mov	r11,r17
   1700c:	9823883a 	mov	r17,r19
   17010:	b027883a 	mov	r19,r22
   17014:	802d883a 	mov	r22,r16
   17018:	dc000d17 	ldw	r16,52(sp)
   1701c:	10800044 	addi	r2,r2,1
   17020:	1d87883a 	add	r3,r3,r22
   17024:	d8801d15 	stw	r2,116(sp)
   17028:	42c00015 	stw	r11,0(r8)
   1702c:	45800115 	stw	r22,4(r8)
   17030:	d8c01e15 	stw	r3,120(sp)
   17034:	10800208 	cmpgei	r2,r2,8
   17038:	10020b1e 	bne	r2,zero,17868 <___svfprintf_internal_r+0x106c>
   1703c:	42000204 	addi	r8,r8,8
   17040:	9880400c 	andi	r2,r19,256
   17044:	10010e1e 	bne	r2,zero,17480 <___svfprintf_internal_r+0xc84>
   17048:	d8801d17 	ldw	r2,116(sp)
   1704c:	1dc7883a 	add	r3,r3,r23
   17050:	44800015 	stw	r18,0(r8)
   17054:	10800044 	addi	r2,r2,1
   17058:	d8801d15 	stw	r2,116(sp)
   1705c:	45c00115 	stw	r23,4(r8)
   17060:	d8c01e15 	stw	r3,120(sp)
   17064:	10800208 	cmpgei	r2,r2,8
   17068:	1001a01e 	bne	r2,zero,176ec <___svfprintf_internal_r+0xef0>
   1706c:	42000204 	addi	r8,r8,8
   17070:	9cc0010c 	andi	r19,r19,4
   17074:	98002c26 	beq	r19,zero,17128 <___svfprintf_internal_r+0x92c>
   17078:	8d21c83a 	sub	r16,r17,r20
   1707c:	04002a0e 	bge	zero,r16,17128 <___svfprintf_internal_r+0x92c>
   17080:	01c000f4 	movhi	r7,3
   17084:	81000450 	cmplti	r4,r16,17
   17088:	39cddc84 	addi	r7,r7,14194
   1708c:	d8801d17 	ldw	r2,116(sp)
   17090:	20001d1e 	bne	r4,zero,17108 <___svfprintf_internal_r+0x90c>
   17094:	04800404 	movi	r18,16
   17098:	dcc00517 	ldw	r19,20(sp)
   1709c:	dd800417 	ldw	r22,16(sp)
   170a0:	382f883a 	mov	r23,r7
   170a4:	00000406 	br	170b8 <___svfprintf_internal_r+0x8bc>
   170a8:	843ffc04 	addi	r16,r16,-16
   170ac:	81000448 	cmpgei	r4,r16,17
   170b0:	42000204 	addi	r8,r8,8
   170b4:	20001326 	beq	r4,zero,17104 <___svfprintf_internal_r+0x908>
   170b8:	10800044 	addi	r2,r2,1
   170bc:	18c00404 	addi	r3,r3,16
   170c0:	45c00015 	stw	r23,0(r8)
   170c4:	44800115 	stw	r18,4(r8)
   170c8:	d8c01e15 	stw	r3,120(sp)
   170cc:	d8801d15 	stw	r2,116(sp)
   170d0:	11000208 	cmpgei	r4,r2,8
   170d4:	203ff426 	beq	r4,zero,170a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff70a8>
   170d8:	d9801c04 	addi	r6,sp,112
   170dc:	b00b883a 	mov	r5,r22
   170e0:	9809883a 	mov	r4,r19
   170e4:	001fe040 	call	1fe04 <__ssprint_r>
   170e8:	103e7f1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   170ec:	843ffc04 	addi	r16,r16,-16
   170f0:	81000448 	cmpgei	r4,r16,17
   170f4:	d8c01e17 	ldw	r3,120(sp)
   170f8:	d8801d17 	ldw	r2,116(sp)
   170fc:	a811883a 	mov	r8,r21
   17100:	203fed1e 	bne	r4,zero,170b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff70b8>
   17104:	b80f883a 	mov	r7,r23
   17108:	10800044 	addi	r2,r2,1
   1710c:	1c07883a 	add	r3,r3,r16
   17110:	d8801d15 	stw	r2,116(sp)
   17114:	41c00015 	stw	r7,0(r8)
   17118:	44000115 	stw	r16,4(r8)
   1711c:	d8c01e15 	stw	r3,120(sp)
   17120:	10800210 	cmplti	r2,r2,8
   17124:	10027e26 	beq	r2,zero,17b20 <___svfprintf_internal_r+0x1324>
   17128:	8d00010e 	bge	r17,r20,17130 <___svfprintf_internal_r+0x934>
   1712c:	a023883a 	mov	r17,r20
   17130:	d8800617 	ldw	r2,24(sp)
   17134:	1445883a 	add	r2,r2,r17
   17138:	d8800615 	stw	r2,24(sp)
   1713c:	1801521e 	bne	r3,zero,17688 <___svfprintf_internal_r+0xe8c>
   17140:	d8001d15 	stw	zero,116(sp)
   17144:	a811883a 	mov	r8,r21
   17148:	003dd306 	br	16898 <__alt_mem_mcu_subsystem_ram_0+0x77ff6898>
   1714c:	21003fcc 	andi	r4,r4,255
   17150:	20058b1e 	bne	r4,zero,18780 <___svfprintf_internal_r+0x1f84>
   17154:	008000f4 	movhi	r2,3
   17158:	108dcc04 	addi	r2,r2,14128
   1715c:	d8800e15 	stw	r2,56(sp)
   17160:	5880080c 	andi	r2,r11,32
   17164:	10002a26 	beq	r2,zero,17210 <___svfprintf_internal_r+0xa14>
   17168:	d8800817 	ldw	r2,32(sp)
   1716c:	15000017 	ldw	r20,0(r2)
   17170:	15c00117 	ldw	r23,4(r2)
   17174:	10800204 	addi	r2,r2,8
   17178:	d8800815 	stw	r2,32(sp)
   1717c:	5880004c 	andi	r2,r11,1
   17180:	10000226 	beq	r2,zero,1718c <___svfprintf_internal_r+0x990>
   17184:	a5c4b03a 	or	r2,r20,r23
   17188:	1002721e 	bne	r2,zero,17b54 <___svfprintf_internal_r+0x1358>
   1718c:	00800084 	movi	r2,2
   17190:	003e6f06 	br	16b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b50>
   17194:	d8800817 	ldw	r2,32(sp)
   17198:	e4000003 	ldbu	r16,0(fp)
   1719c:	14400017 	ldw	r17,0(r2)
   171a0:	10800104 	addi	r2,r2,4
   171a4:	8802f016 	blt	r17,zero,17d68 <___svfprintf_internal_r+0x156c>
   171a8:	d8800815 	stw	r2,32(sp)
   171ac:	84003fcc 	andi	r16,r16,255
   171b0:	8400201c 	xori	r16,r16,128
   171b4:	843fe004 	addi	r16,r16,-128
   171b8:	003ddc06 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   171bc:	5ac00054 	ori	r11,r11,1
   171c0:	e4000007 	ldb	r16,0(fp)
   171c4:	003dd906 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   171c8:	28803fcc 	andi	r2,r5,255
   171cc:	1080201c 	xori	r2,r2,128
   171d0:	10bfe004 	addi	r2,r2,-128
   171d4:	e4000003 	ldbu	r16,0(fp)
   171d8:	103ff41e 	bne	r2,zero,171ac <__alt_mem_mcu_subsystem_ram_0+0x77ff71ac>
   171dc:	84003fcc 	andi	r16,r16,255
   171e0:	8400201c 	xori	r16,r16,128
   171e4:	01000044 	movi	r4,1
   171e8:	01400804 	movi	r5,32
   171ec:	843fe004 	addi	r16,r16,-128
   171f0:	003dce06 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   171f4:	21003fcc 	andi	r4,r4,255
   171f8:	2005591e 	bne	r4,zero,18760 <___svfprintf_internal_r+0x1f64>
   171fc:	008000f4 	movhi	r2,3
   17200:	108dd104 	addi	r2,r2,14148
   17204:	d8800e15 	stw	r2,56(sp)
   17208:	5880080c 	andi	r2,r11,32
   1720c:	103fd61e 	bne	r2,zero,17168 <__alt_mem_mcu_subsystem_ram_0+0x77ff7168>
   17210:	d8c00817 	ldw	r3,32(sp)
   17214:	5880040c 	andi	r2,r11,16
   17218:	1d000017 	ldw	r20,0(r3)
   1721c:	18c00104 	addi	r3,r3,4
   17220:	d8c00815 	stw	r3,32(sp)
   17224:	1002471e 	bne	r2,zero,17b44 <___svfprintf_internal_r+0x1348>
   17228:	5880100c 	andi	r2,r11,64
   1722c:	10024526 	beq	r2,zero,17b44 <___svfprintf_internal_r+0x1348>
   17230:	a53fffcc 	andi	r20,r20,65535
   17234:	002f883a 	mov	r23,zero
   17238:	003fd006 	br	1717c <__alt_mem_mcu_subsystem_ram_0+0x77ff717c>
   1723c:	5ac02014 	ori	r11,r11,128
   17240:	e4000007 	ldb	r16,0(fp)
   17244:	003db906 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   17248:	e4000007 	ldb	r16,0(fp)
   1724c:	e0c00044 	addi	r3,fp,1
   17250:	80800aa0 	cmpeqi	r2,r16,42
   17254:	1005291e 	bne	r2,zero,186fc <___svfprintf_internal_r+0x1f00>
   17258:	80bff404 	addi	r2,r16,-48
   1725c:	118002b0 	cmpltui	r6,r2,10
   17260:	1839883a 	mov	fp,r3
   17264:	002d883a 	mov	r22,zero
   17268:	303db126 	beq	r6,zero,16930 <__alt_mem_mcu_subsystem_ram_0+0x77ff6930>
   1726c:	e7000044 	addi	fp,fp,1
   17270:	b58002a4 	muli	r22,r22,10
   17274:	e43fffc7 	ldb	r16,-1(fp)
   17278:	b0ad883a 	add	r22,r22,r2
   1727c:	80bff404 	addi	r2,r16,-48
   17280:	10c002b0 	cmpltui	r3,r2,10
   17284:	183ff91e 	bne	r3,zero,1726c <__alt_mem_mcu_subsystem_ram_0+0x77ff726c>
   17288:	003da906 	br	16930 <__alt_mem_mcu_subsystem_ram_0+0x77ff6930>
   1728c:	e4000003 	ldbu	r16,0(fp)
   17290:	84003fcc 	andi	r16,r16,255
   17294:	8400201c 	xori	r16,r16,128
   17298:	5ac00114 	ori	r11,r11,4
   1729c:	843fe004 	addi	r16,r16,-128
   172a0:	003da206 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   172a4:	01000044 	movi	r4,1
   172a8:	01400ac4 	movi	r5,43
   172ac:	e4000007 	ldb	r16,0(fp)
   172b0:	003d9e06 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   172b4:	5ac00214 	ori	r11,r11,8
   172b8:	e4000007 	ldb	r16,0(fp)
   172bc:	003d9b06 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   172c0:	21003fcc 	andi	r4,r4,255
   172c4:	2005381e 	bne	r4,zero,187a8 <___svfprintf_internal_r+0x1fac>
   172c8:	d8c00817 	ldw	r3,32(sp)
   172cc:	00a00034 	movhi	r2,32768
   172d0:	10bfffc4 	addi	r2,r2,-1
   172d4:	1d000117 	ldw	r20,4(r3)
   172d8:	1cc00017 	ldw	r19,0(r3)
   172dc:	01dffc34 	movhi	r7,32752
   172e0:	a0a4703a 	and	r18,r20,r2
   172e4:	01bfffc4 	movi	r6,-1
   172e8:	18800204 	addi	r2,r3,8
   172ec:	39ffffc4 	addi	r7,r7,-1
   172f0:	9809883a 	mov	r4,r19
   172f4:	900b883a 	mov	r5,r18
   172f8:	da000915 	stw	r8,36(sp)
   172fc:	dac00715 	stw	r11,28(sp)
   17300:	dd000c15 	stw	r20,48(sp)
   17304:	dcc00b15 	stw	r19,44(sp)
   17308:	d8800815 	stw	r2,32(sp)
   1730c:	0024df80 	call	24df8 <__unorddf2>
   17310:	dac00717 	ldw	r11,28(sp)
   17314:	da000917 	ldw	r8,36(sp)
   17318:	1002191e 	bne	r2,zero,17b80 <___svfprintf_internal_r+0x1384>
   1731c:	01dffc34 	movhi	r7,32752
   17320:	01bfffc4 	movi	r6,-1
   17324:	39ffffc4 	addi	r7,r7,-1
   17328:	9809883a 	mov	r4,r19
   1732c:	900b883a 	mov	r5,r18
   17330:	0024d180 	call	24d18 <__ledf2>
   17334:	dac00717 	ldw	r11,28(sp)
   17338:	da000917 	ldw	r8,36(sp)
   1733c:	0082100e 	bge	zero,r2,17b80 <___svfprintf_internal_r+0x1384>
   17340:	000d883a 	mov	r6,zero
   17344:	000f883a 	mov	r7,zero
   17348:	9809883a 	mov	r4,r19
   1734c:	a00b883a 	mov	r5,r20
   17350:	0024d180 	call	24d18 <__ledf2>
   17354:	dac00717 	ldw	r11,28(sp)
   17358:	da000917 	ldw	r8,36(sp)
   1735c:	1003c316 	blt	r2,zero,1826c <___svfprintf_internal_r+0x1a70>
   17360:	db001543 	ldbu	r12,85(sp)
   17364:	80801208 	cmpgei	r2,r16,72
   17368:	10034e1e 	bne	r2,zero,180a4 <___svfprintf_internal_r+0x18a8>
   1736c:	048000f4 	movhi	r18,3
   17370:	948dc804 	addi	r18,r18,14112
   17374:	04ffdfc4 	movi	r19,-129
   17378:	5ce6703a 	and	r19,r11,r19
   1737c:	050000c4 	movi	r20,3
   17380:	05c000c4 	movi	r23,3
   17384:	002d883a 	mov	r22,zero
   17388:	d8000915 	stw	zero,36(sp)
   1738c:	00003606 	br	17468 <___svfprintf_internal_r+0xc6c>
   17390:	21003fcc 	andi	r4,r4,255
   17394:	2005001e 	bne	r4,zero,18798 <___svfprintf_internal_r+0x1f9c>
   17398:	5ac00414 	ori	r11,r11,16
   1739c:	5880080c 	andi	r2,r11,32
   173a0:	103e801e 	bne	r2,zero,16da4 <__alt_mem_mcu_subsystem_ram_0+0x77ff6da4>
   173a4:	d8c00817 	ldw	r3,32(sp)
   173a8:	5880040c 	andi	r2,r11,16
   173ac:	1d000017 	ldw	r20,0(r3)
   173b0:	18c00104 	addi	r3,r3,4
   173b4:	d8c00815 	stw	r3,32(sp)
   173b8:	1001e41e 	bne	r2,zero,17b4c <___svfprintf_internal_r+0x1350>
   173bc:	5880100c 	andi	r2,r11,64
   173c0:	1001e226 	beq	r2,zero,17b4c <___svfprintf_internal_r+0x1350>
   173c4:	a53fffcc 	andi	r20,r20,65535
   173c8:	a520001c 	xori	r20,r20,32768
   173cc:	a5200004 	addi	r20,r20,-32768
   173d0:	a02fd7fa 	srai	r23,r20,31
   173d4:	b83e790e 	bge	r23,zero,16dbc <__alt_mem_mcu_subsystem_ram_0+0x77ff6dbc>
   173d8:	0529c83a 	sub	r20,zero,r20
   173dc:	a004c03a 	cmpne	r2,r20,zero
   173e0:	05efc83a 	sub	r23,zero,r23
   173e4:	b8afc83a 	sub	r23,r23,r2
   173e8:	00800b44 	movi	r2,45
   173ec:	d8801545 	stb	r2,85(sp)
   173f0:	b0bfffd8 	cmpnei	r2,r22,-1
   173f4:	03000b44 	movi	r12,45
   173f8:	103e731e 	bne	r2,zero,16dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6dc8>
   173fc:	5827883a 	mov	r19,r11
   17400:	b8028f1e 	bne	r23,zero,17e40 <___svfprintf_internal_r+0x1644>
   17404:	a08002a8 	cmpgeui	r2,r20,10
   17408:	10028d1e 	bne	r2,zero,17e40 <___svfprintf_internal_r+0x1644>
   1740c:	a5000c04 	addi	r20,r20,48
   17410:	dd0028c5 	stb	r20,163(sp)
   17414:	05c00044 	movi	r23,1
   17418:	dc8028c4 	addi	r18,sp,163
   1741c:	00000e06 	br	17458 <___svfprintf_internal_r+0xc5c>
   17420:	d9000e17 	ldw	r4,56(sp)
   17424:	a825883a 	mov	r18,r21
   17428:	a08003cc 	andi	r2,r20,15
   1742c:	b806973a 	slli	r3,r23,28
   17430:	2085883a 	add	r2,r4,r2
   17434:	a028d13a 	srli	r20,r20,4
   17438:	10800003 	ldbu	r2,0(r2)
   1743c:	b82ed13a 	srli	r23,r23,4
   17440:	94bfffc4 	addi	r18,r18,-1
   17444:	1d28b03a 	or	r20,r3,r20
   17448:	90800005 	stb	r2,0(r18)
   1744c:	a5c4b03a 	or	r2,r20,r23
   17450:	103ff51e 	bne	r2,zero,17428 <__alt_mem_mcu_subsystem_ram_0+0x77ff7428>
   17454:	acafc83a 	sub	r23,r21,r18
   17458:	b029883a 	mov	r20,r22
   1745c:	b5c0010e 	bge	r22,r23,17464 <___svfprintf_internal_r+0xc68>
   17460:	b829883a 	mov	r20,r23
   17464:	d8000915 	stw	zero,36(sp)
   17468:	60803fcc 	andi	r2,r12,255
   1746c:	1080201c 	xori	r2,r2,128
   17470:	10bfe004 	addi	r2,r2,-128
   17474:	103e6326 	beq	r2,zero,16e04 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e04>
   17478:	a5000044 	addi	r20,r20,1
   1747c:	003e6106 	br	16e04 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e04>
   17480:	84001990 	cmplti	r16,r16,102
   17484:	8000a11e 	bne	r16,zero,1770c <___svfprintf_internal_r+0xf10>
   17488:	d9000b17 	ldw	r4,44(sp)
   1748c:	d9400c17 	ldw	r5,48(sp)
   17490:	000d883a 	mov	r6,zero
   17494:	000f883a 	mov	r7,zero
   17498:	da000d15 	stw	r8,52(sp)
   1749c:	d8c00715 	stw	r3,28(sp)
   174a0:	0024c980 	call	24c98 <__eqdf2>
   174a4:	d8c00717 	ldw	r3,28(sp)
   174a8:	da000d17 	ldw	r8,52(sp)
   174ac:	1000f61e 	bne	r2,zero,17888 <___svfprintf_internal_r+0x108c>
   174b0:	d8801d17 	ldw	r2,116(sp)
   174b4:	010000f4 	movhi	r4,3
   174b8:	210dd804 	addi	r4,r4,14176
   174bc:	10800044 	addi	r2,r2,1
   174c0:	18c00044 	addi	r3,r3,1
   174c4:	41000015 	stw	r4,0(r8)
   174c8:	01000044 	movi	r4,1
   174cc:	d8801d15 	stw	r2,116(sp)
   174d0:	41000115 	stw	r4,4(r8)
   174d4:	d8c01e15 	stw	r3,120(sp)
   174d8:	10800208 	cmpgei	r2,r2,8
   174dc:	1002ca1e 	bne	r2,zero,18008 <___svfprintf_internal_r+0x180c>
   174e0:	42000204 	addi	r8,r8,8
   174e4:	d8801617 	ldw	r2,88(sp)
   174e8:	d8c00a17 	ldw	r3,40(sp)
   174ec:	10c00416 	blt	r2,r3,17500 <___svfprintf_internal_r+0xd04>
   174f0:	9880004c 	andi	r2,r19,1
   174f4:	1000021e 	bne	r2,zero,17500 <___svfprintf_internal_r+0xd04>
   174f8:	d8c01e17 	ldw	r3,120(sp)
   174fc:	003edc06 	br	17070 <__alt_mem_mcu_subsystem_ram_0+0x77ff7070>
   17500:	d8801017 	ldw	r2,64(sp)
   17504:	d8c01e17 	ldw	r3,120(sp)
   17508:	d9000f17 	ldw	r4,60(sp)
   1750c:	40800015 	stw	r2,0(r8)
   17510:	d8801d17 	ldw	r2,116(sp)
   17514:	20c7883a 	add	r3,r4,r3
   17518:	41000115 	stw	r4,4(r8)
   1751c:	10800044 	addi	r2,r2,1
   17520:	d8801d15 	stw	r2,116(sp)
   17524:	d8c01e15 	stw	r3,120(sp)
   17528:	10800208 	cmpgei	r2,r2,8
   1752c:	10022e1e 	bne	r2,zero,17de8 <___svfprintf_internal_r+0x15ec>
   17530:	42000204 	addi	r8,r8,8
   17534:	d8800a17 	ldw	r2,40(sp)
   17538:	143fffc4 	addi	r16,r2,-1
   1753c:	043ecc0e 	bge	zero,r16,17070 <__alt_mem_mcu_subsystem_ram_0+0x77ff7070>
   17540:	02c000f4 	movhi	r11,3
   17544:	81000450 	cmplti	r4,r16,17
   17548:	5acdd884 	addi	r11,r11,14178
   1754c:	d8801d17 	ldw	r2,116(sp)
   17550:	20027f1e 	bne	r4,zero,17f50 <___svfprintf_internal_r+0x1754>
   17554:	04800404 	movi	r18,16
   17558:	dd800517 	ldw	r22,20(sp)
   1755c:	582f883a 	mov	r23,r11
   17560:	00000406 	br	17574 <___svfprintf_internal_r+0xd78>
   17564:	42000204 	addi	r8,r8,8
   17568:	843ffc04 	addi	r16,r16,-16
   1756c:	81000448 	cmpgei	r4,r16,17
   17570:	20027626 	beq	r4,zero,17f4c <___svfprintf_internal_r+0x1750>
   17574:	10800044 	addi	r2,r2,1
   17578:	18c00404 	addi	r3,r3,16
   1757c:	45c00015 	stw	r23,0(r8)
   17580:	44800115 	stw	r18,4(r8)
   17584:	d8c01e15 	stw	r3,120(sp)
   17588:	d8801d15 	stw	r2,116(sp)
   1758c:	11000208 	cmpgei	r4,r2,8
   17590:	203ff426 	beq	r4,zero,17564 <__alt_mem_mcu_subsystem_ram_0+0x77ff7564>
   17594:	d9400417 	ldw	r5,16(sp)
   17598:	d9801c04 	addi	r6,sp,112
   1759c:	b009883a 	mov	r4,r22
   175a0:	001fe040 	call	1fe04 <__ssprint_r>
   175a4:	103d501e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   175a8:	d8c01e17 	ldw	r3,120(sp)
   175ac:	d8801d17 	ldw	r2,116(sp)
   175b0:	a811883a 	mov	r8,r21
   175b4:	003fec06 	br	17568 <__alt_mem_mcu_subsystem_ram_0+0x77ff7568>
   175b8:	8d0fc83a 	sub	r7,r17,r20
   175bc:	01fe6b0e 	bge	zero,r7,16f6c <__alt_mem_mcu_subsystem_ram_0+0x77ff6f6c>
   175c0:	02c000f4 	movhi	r11,3
   175c4:	39000450 	cmplti	r4,r7,17
   175c8:	5acdd884 	addi	r11,r11,14178
   175cc:	d8801d17 	ldw	r2,116(sp)
   175d0:	2000231e 	bne	r4,zero,17660 <___svfprintf_internal_r+0xe64>
   175d4:	dc000d15 	stw	r16,52(sp)
   175d8:	dc401215 	stw	r17,72(sp)
   175dc:	03000404 	movi	r12,16
   175e0:	3821883a 	mov	r16,r7
   175e4:	5823883a 	mov	r17,r11
   175e8:	00000406 	br	175fc <___svfprintf_internal_r+0xe00>
   175ec:	843ffc04 	addi	r16,r16,-16
   175f0:	81000448 	cmpgei	r4,r16,17
   175f4:	42000204 	addi	r8,r8,8
   175f8:	20001526 	beq	r4,zero,17650 <___svfprintf_internal_r+0xe54>
   175fc:	10800044 	addi	r2,r2,1
   17600:	18c00404 	addi	r3,r3,16
   17604:	44400015 	stw	r17,0(r8)
   17608:	43000115 	stw	r12,4(r8)
   1760c:	d8c01e15 	stw	r3,120(sp)
   17610:	d8801d15 	stw	r2,116(sp)
   17614:	11000208 	cmpgei	r4,r2,8
   17618:	203ff426 	beq	r4,zero,175ec <__alt_mem_mcu_subsystem_ram_0+0x77ff75ec>
   1761c:	d9400417 	ldw	r5,16(sp)
   17620:	d9000517 	ldw	r4,20(sp)
   17624:	d9801c04 	addi	r6,sp,112
   17628:	db000715 	stw	r12,28(sp)
   1762c:	001fe040 	call	1fe04 <__ssprint_r>
   17630:	103d2d1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17634:	843ffc04 	addi	r16,r16,-16
   17638:	81000448 	cmpgei	r4,r16,17
   1763c:	d8c01e17 	ldw	r3,120(sp)
   17640:	d8801d17 	ldw	r2,116(sp)
   17644:	a811883a 	mov	r8,r21
   17648:	db000717 	ldw	r12,28(sp)
   1764c:	203feb1e 	bne	r4,zero,175fc <__alt_mem_mcu_subsystem_ram_0+0x77ff75fc>
   17650:	800f883a 	mov	r7,r16
   17654:	8817883a 	mov	r11,r17
   17658:	dc000d17 	ldw	r16,52(sp)
   1765c:	dc401217 	ldw	r17,72(sp)
   17660:	10800044 	addi	r2,r2,1
   17664:	19c7883a 	add	r3,r3,r7
   17668:	d8801d15 	stw	r2,116(sp)
   1766c:	42c00015 	stw	r11,0(r8)
   17670:	41c00115 	stw	r7,4(r8)
   17674:	d8c01e15 	stw	r3,120(sp)
   17678:	10800208 	cmpgei	r2,r2,8
   1767c:	10023d1e 	bne	r2,zero,17f74 <___svfprintf_internal_r+0x1778>
   17680:	42000204 	addi	r8,r8,8
   17684:	003e3906 	br	16f6c <__alt_mem_mcu_subsystem_ram_0+0x77ff6f6c>
   17688:	d9400417 	ldw	r5,16(sp)
   1768c:	d9000517 	ldw	r4,20(sp)
   17690:	d9801c04 	addi	r6,sp,112
   17694:	001fe040 	call	1fe04 <__ssprint_r>
   17698:	103ea926 	beq	r2,zero,17140 <__alt_mem_mcu_subsystem_ram_0+0x77ff7140>
   1769c:	003d1206 	br	16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   176a0:	d9400417 	ldw	r5,16(sp)
   176a4:	d9000517 	ldw	r4,20(sp)
   176a8:	d9801c04 	addi	r6,sp,112
   176ac:	001fe040 	call	1fe04 <__ssprint_r>
   176b0:	103d0d1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   176b4:	d9001617 	ldw	r4,88(sp)
   176b8:	d8c01e17 	ldw	r3,120(sp)
   176bc:	d8801d17 	ldw	r2,116(sp)
   176c0:	a811883a 	mov	r8,r21
   176c4:	20036b16 	blt	r4,zero,18474 <___svfprintf_internal_r+0x1c78>
   176c8:	d9000a17 	ldw	r4,40(sp)
   176cc:	10800044 	addi	r2,r2,1
   176d0:	d8801d15 	stw	r2,116(sp)
   176d4:	20c7883a 	add	r3,r4,r3
   176d8:	44800015 	stw	r18,0(r8)
   176dc:	41000115 	stw	r4,4(r8)
   176e0:	d8c01e15 	stw	r3,120(sp)
   176e4:	10800208 	cmpgei	r2,r2,8
   176e8:	103e6026 	beq	r2,zero,1706c <__alt_mem_mcu_subsystem_ram_0+0x77ff706c>
   176ec:	d9400417 	ldw	r5,16(sp)
   176f0:	d9000517 	ldw	r4,20(sp)
   176f4:	d9801c04 	addi	r6,sp,112
   176f8:	001fe040 	call	1fe04 <__ssprint_r>
   176fc:	103cfa1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17700:	d8c01e17 	ldw	r3,120(sp)
   17704:	a811883a 	mov	r8,r21
   17708:	003e5906 	br	17070 <__alt_mem_mcu_subsystem_ram_0+0x77ff7070>
   1770c:	d8800a17 	ldw	r2,40(sp)
   17710:	da801d17 	ldw	r10,116(sp)
   17714:	18c00044 	addi	r3,r3,1
   17718:	10800088 	cmpgei	r2,r2,2
   1771c:	54000044 	addi	r16,r10,1
   17720:	45c00204 	addi	r23,r8,8
   17724:	1000f226 	beq	r2,zero,17af0 <___svfprintf_internal_r+0x12f4>
   17728:	00800044 	movi	r2,1
   1772c:	40800115 	stw	r2,4(r8)
   17730:	44800015 	stw	r18,0(r8)
   17734:	d8c01e15 	stw	r3,120(sp)
   17738:	dc001d15 	stw	r16,116(sp)
   1773c:	80800210 	cmplti	r2,r16,8
   17740:	1001ed26 	beq	r2,zero,17ef8 <___svfprintf_internal_r+0x16fc>
   17744:	d8800f17 	ldw	r2,60(sp)
   17748:	d9001017 	ldw	r4,64(sp)
   1774c:	84000044 	addi	r16,r16,1
   17750:	1887883a 	add	r3,r3,r2
   17754:	b8800115 	stw	r2,4(r23)
   17758:	b9000015 	stw	r4,0(r23)
   1775c:	d8c01e15 	stw	r3,120(sp)
   17760:	dc001d15 	stw	r16,116(sp)
   17764:	80800208 	cmpgei	r2,r16,8
   17768:	1001ec1e 	bne	r2,zero,17f1c <___svfprintf_internal_r+0x1720>
   1776c:	bdc00204 	addi	r23,r23,8
   17770:	d8800a17 	ldw	r2,40(sp)
   17774:	d9000b17 	ldw	r4,44(sp)
   17778:	d9400c17 	ldw	r5,48(sp)
   1777c:	133fffc4 	addi	r12,r2,-1
   17780:	ba000204 	addi	r8,r23,8
   17784:	85800044 	addi	r22,r16,1
   17788:	000d883a 	mov	r6,zero
   1778c:	000f883a 	mov	r7,zero
   17790:	d8c01215 	stw	r3,72(sp)
   17794:	db000915 	stw	r12,36(sp)
   17798:	da000715 	stw	r8,28(sp)
   1779c:	dd800d15 	stw	r22,52(sp)
   177a0:	0024c980 	call	24c98 <__eqdf2>
   177a4:	da000717 	ldw	r8,28(sp)
   177a8:	db000917 	ldw	r12,36(sp)
   177ac:	db400d17 	ldw	r13,52(sp)
   177b0:	d8c01217 	ldw	r3,72(sp)
   177b4:	10009326 	beq	r2,zero,17a04 <___svfprintf_internal_r+0x1208>
   177b8:	94800044 	addi	r18,r18,1
   177bc:	1b07883a 	add	r3,r3,r12
   177c0:	bc800015 	stw	r18,0(r23)
   177c4:	bb000115 	stw	r12,4(r23)
   177c8:	d8c01e15 	stw	r3,120(sp)
   177cc:	dd801d15 	stw	r22,116(sp)
   177d0:	b2800208 	cmpgei	r10,r22,8
   177d4:	5001721e 	bne	r10,zero,17da0 <___svfprintf_internal_r+0x15a4>
   177d8:	b8800404 	addi	r2,r23,16
   177dc:	85800084 	addi	r22,r16,2
   177e0:	402f883a 	mov	r23,r8
   177e4:	1011883a 	mov	r8,r2
   177e8:	d9001117 	ldw	r4,68(sp)
   177ec:	d8801844 	addi	r2,sp,97
   177f0:	b8800015 	stw	r2,0(r23)
   177f4:	20c7883a 	add	r3,r4,r3
   177f8:	b9000115 	stw	r4,4(r23)
   177fc:	d8c01e15 	stw	r3,120(sp)
   17800:	dd801d15 	stw	r22,116(sp)
   17804:	b2800210 	cmplti	r10,r22,8
   17808:	503e191e 	bne	r10,zero,17070 <__alt_mem_mcu_subsystem_ram_0+0x77ff7070>
   1780c:	003fb706 	br	176ec <__alt_mem_mcu_subsystem_ram_0+0x77ff76ec>
   17810:	d9400417 	ldw	r5,16(sp)
   17814:	d9000517 	ldw	r4,20(sp)
   17818:	d9801c04 	addi	r6,sp,112
   1781c:	dac00d15 	stw	r11,52(sp)
   17820:	db000715 	stw	r12,28(sp)
   17824:	001fe040 	call	1fe04 <__ssprint_r>
   17828:	103caf1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   1782c:	d8c01e17 	ldw	r3,120(sp)
   17830:	a811883a 	mov	r8,r21
   17834:	dac00d17 	ldw	r11,52(sp)
   17838:	db000717 	ldw	r12,28(sp)
   1783c:	003dbc06 	br	16f30 <__alt_mem_mcu_subsystem_ram_0+0x77ff6f30>
   17840:	d9400417 	ldw	r5,16(sp)
   17844:	d9000517 	ldw	r4,20(sp)
   17848:	d9801c04 	addi	r6,sp,112
   1784c:	dac00715 	stw	r11,28(sp)
   17850:	001fe040 	call	1fe04 <__ssprint_r>
   17854:	103ca41e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17858:	d8c01e17 	ldw	r3,120(sp)
   1785c:	a811883a 	mov	r8,r21
   17860:	dac00717 	ldw	r11,28(sp)
   17864:	003dbf06 	br	16f64 <__alt_mem_mcu_subsystem_ram_0+0x77ff6f64>
   17868:	d9400417 	ldw	r5,16(sp)
   1786c:	d9000517 	ldw	r4,20(sp)
   17870:	d9801c04 	addi	r6,sp,112
   17874:	001fe040 	call	1fe04 <__ssprint_r>
   17878:	103c9b1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   1787c:	d8c01e17 	ldw	r3,120(sp)
   17880:	a811883a 	mov	r8,r21
   17884:	003dee06 	br	17040 <__alt_mem_mcu_subsystem_ram_0+0x77ff7040>
   17888:	d9001617 	ldw	r4,88(sp)
   1788c:	0101c10e 	bge	zero,r4,17f94 <___svfprintf_internal_r+0x1798>
   17890:	d8800917 	ldw	r2,36(sp)
   17894:	d9000a17 	ldw	r4,40(sp)
   17898:	1021883a 	mov	r16,r2
   1789c:	20810d16 	blt	r4,r2,17cd4 <___svfprintf_internal_r+0x14d8>
   178a0:	04000a0e 	bge	zero,r16,178cc <___svfprintf_internal_r+0x10d0>
   178a4:	d8801d17 	ldw	r2,116(sp)
   178a8:	1c07883a 	add	r3,r3,r16
   178ac:	44800015 	stw	r18,0(r8)
   178b0:	10800044 	addi	r2,r2,1
   178b4:	d8801d15 	stw	r2,116(sp)
   178b8:	44000115 	stw	r16,4(r8)
   178bc:	d8c01e15 	stw	r3,120(sp)
   178c0:	10800208 	cmpgei	r2,r2,8
   178c4:	10026d1e 	bne	r2,zero,1827c <___svfprintf_internal_r+0x1a80>
   178c8:	42000204 	addi	r8,r8,8
   178cc:	80014e16 	blt	r16,zero,17e08 <___svfprintf_internal_r+0x160c>
   178d0:	d8800917 	ldw	r2,36(sp)
   178d4:	1421c83a 	sub	r16,r2,r16
   178d8:	04010116 	blt	zero,r16,17ce0 <___svfprintf_internal_r+0x14e4>
   178dc:	d8801617 	ldw	r2,88(sp)
   178e0:	d9000a17 	ldw	r4,40(sp)
   178e4:	11000216 	blt	r2,r4,178f0 <___svfprintf_internal_r+0x10f4>
   178e8:	9900004c 	andi	r4,r19,1
   178ec:	20000c26 	beq	r4,zero,17920 <___svfprintf_internal_r+0x1124>
   178f0:	d9001017 	ldw	r4,64(sp)
   178f4:	d9400f17 	ldw	r5,60(sp)
   178f8:	41000015 	stw	r4,0(r8)
   178fc:	d9001d17 	ldw	r4,116(sp)
   17900:	1947883a 	add	r3,r3,r5
   17904:	41400115 	stw	r5,4(r8)
   17908:	21000044 	addi	r4,r4,1
   1790c:	d9001d15 	stw	r4,116(sp)
   17910:	d8c01e15 	stw	r3,120(sp)
   17914:	21000208 	cmpgei	r4,r4,8
   17918:	2002611e 	bne	r4,zero,182a0 <___svfprintf_internal_r+0x1aa4>
   1791c:	42000204 	addi	r8,r8,8
   17920:	d9000a17 	ldw	r4,40(sp)
   17924:	d9400917 	ldw	r5,36(sp)
   17928:	2085c83a 	sub	r2,r4,r2
   1792c:	2149c83a 	sub	r4,r4,r5
   17930:	1021883a 	mov	r16,r2
   17934:	2080010e 	bge	r4,r2,1793c <___svfprintf_internal_r+0x1140>
   17938:	2021883a 	mov	r16,r4
   1793c:	04000c0e 	bge	zero,r16,17970 <___svfprintf_internal_r+0x1174>
   17940:	d9000917 	ldw	r4,36(sp)
   17944:	1c07883a 	add	r3,r3,r16
   17948:	44000115 	stw	r16,4(r8)
   1794c:	9125883a 	add	r18,r18,r4
   17950:	d9001d17 	ldw	r4,116(sp)
   17954:	44800015 	stw	r18,0(r8)
   17958:	d8c01e15 	stw	r3,120(sp)
   1795c:	21000044 	addi	r4,r4,1
   17960:	d9001d15 	stw	r4,116(sp)
   17964:	21000208 	cmpgei	r4,r4,8
   17968:	2002841e 	bne	r4,zero,1837c <___svfprintf_internal_r+0x1b80>
   1796c:	42000204 	addi	r8,r8,8
   17970:	8000010e 	bge	r16,zero,17978 <___svfprintf_internal_r+0x117c>
   17974:	0021883a 	mov	r16,zero
   17978:	1421c83a 	sub	r16,r2,r16
   1797c:	043dbc0e 	bge	zero,r16,17070 <__alt_mem_mcu_subsystem_ram_0+0x77ff7070>
   17980:	02c000f4 	movhi	r11,3
   17984:	81000450 	cmplti	r4,r16,17
   17988:	5acdd884 	addi	r11,r11,14178
   1798c:	d8801d17 	ldw	r2,116(sp)
   17990:	20016f1e 	bne	r4,zero,17f50 <___svfprintf_internal_r+0x1754>
   17994:	04800404 	movi	r18,16
   17998:	dd800517 	ldw	r22,20(sp)
   1799c:	582f883a 	mov	r23,r11
   179a0:	00000406 	br	179b4 <___svfprintf_internal_r+0x11b8>
   179a4:	42000204 	addi	r8,r8,8
   179a8:	843ffc04 	addi	r16,r16,-16
   179ac:	81000448 	cmpgei	r4,r16,17
   179b0:	20016626 	beq	r4,zero,17f4c <___svfprintf_internal_r+0x1750>
   179b4:	10800044 	addi	r2,r2,1
   179b8:	18c00404 	addi	r3,r3,16
   179bc:	45c00015 	stw	r23,0(r8)
   179c0:	44800115 	stw	r18,4(r8)
   179c4:	d8c01e15 	stw	r3,120(sp)
   179c8:	d8801d15 	stw	r2,116(sp)
   179cc:	11000208 	cmpgei	r4,r2,8
   179d0:	203ff426 	beq	r4,zero,179a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff79a4>
   179d4:	d9400417 	ldw	r5,16(sp)
   179d8:	d9801c04 	addi	r6,sp,112
   179dc:	b009883a 	mov	r4,r22
   179e0:	001fe040 	call	1fe04 <__ssprint_r>
   179e4:	103c401e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   179e8:	d8c01e17 	ldw	r3,120(sp)
   179ec:	d8801d17 	ldw	r2,116(sp)
   179f0:	a811883a 	mov	r8,r21
   179f4:	003fec06 	br	179a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff79a8>
   179f8:	002f883a 	mov	r23,zero
   179fc:	a825883a 	mov	r18,r21
   17a00:	003e9506 	br	17458 <__alt_mem_mcu_subsystem_ram_0+0x77ff7458>
   17a04:	033f780e 	bge	zero,r12,177e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff77e8>
   17a08:	60800450 	cmplti	r2,r12,17
   17a0c:	02c000f4 	movhi	r11,3
   17a10:	1003241e 	bne	r2,zero,186a4 <___svfprintf_internal_r+0x1ea8>
   17a14:	5acdd884 	addi	r11,r11,14178
   17a18:	b805883a 	mov	r2,r23
   17a1c:	dc400715 	stw	r17,28(sp)
   17a20:	982f883a 	mov	r23,r19
   17a24:	04800404 	movi	r18,16
   17a28:	6023883a 	mov	r17,r12
   17a2c:	dd800517 	ldw	r22,20(sp)
   17a30:	5827883a 	mov	r19,r11
   17a34:	6821883a 	mov	r16,r13
   17a38:	00000506 	br	17a50 <___svfprintf_internal_r+0x1254>
   17a3c:	10800204 	addi	r2,r2,8
   17a40:	8c7ffc04 	addi	r17,r17,-16
   17a44:	89000448 	cmpgei	r4,r17,17
   17a48:	20017626 	beq	r4,zero,18024 <___svfprintf_internal_r+0x1828>
   17a4c:	84000044 	addi	r16,r16,1
   17a50:	18c00404 	addi	r3,r3,16
   17a54:	14c00015 	stw	r19,0(r2)
   17a58:	14800115 	stw	r18,4(r2)
   17a5c:	d8c01e15 	stw	r3,120(sp)
   17a60:	dc001d15 	stw	r16,116(sp)
   17a64:	81000208 	cmpgei	r4,r16,8
   17a68:	203ff426 	beq	r4,zero,17a3c <__alt_mem_mcu_subsystem_ram_0+0x77ff7a3c>
   17a6c:	d9400417 	ldw	r5,16(sp)
   17a70:	d9801c04 	addi	r6,sp,112
   17a74:	b009883a 	mov	r4,r22
   17a78:	001fe040 	call	1fe04 <__ssprint_r>
   17a7c:	103c1a1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17a80:	dc001d17 	ldw	r16,116(sp)
   17a84:	d8c01e17 	ldw	r3,120(sp)
   17a88:	a805883a 	mov	r2,r21
   17a8c:	003fec06 	br	17a40 <__alt_mem_mcu_subsystem_ram_0+0x77ff7a40>
   17a90:	d8c00817 	ldw	r3,32(sp)
   17a94:	5880040c 	andi	r2,r11,16
   17a98:	1d000017 	ldw	r20,0(r3)
   17a9c:	18c00104 	addi	r3,r3,4
   17aa0:	d8c00815 	stw	r3,32(sp)
   17aa4:	1000031e 	bne	r2,zero,17ab4 <___svfprintf_internal_r+0x12b8>
   17aa8:	5880100c 	andi	r2,r11,64
   17aac:	10000126 	beq	r2,zero,17ab4 <___svfprintf_internal_r+0x12b8>
   17ab0:	a53fffcc 	andi	r20,r20,65535
   17ab4:	002f883a 	mov	r23,zero
   17ab8:	00800044 	movi	r2,1
   17abc:	003c2406 	br	16b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b50>
   17ac0:	d8c00817 	ldw	r3,32(sp)
   17ac4:	5880040c 	andi	r2,r11,16
   17ac8:	1d000017 	ldw	r20,0(r3)
   17acc:	18c00104 	addi	r3,r3,4
   17ad0:	d8c00815 	stw	r3,32(sp)
   17ad4:	1000031e 	bne	r2,zero,17ae4 <___svfprintf_internal_r+0x12e8>
   17ad8:	5880100c 	andi	r2,r11,64
   17adc:	10000126 	beq	r2,zero,17ae4 <___svfprintf_internal_r+0x12e8>
   17ae0:	a53fffcc 	andi	r20,r20,65535
   17ae4:	002f883a 	mov	r23,zero
   17ae8:	0005883a 	mov	r2,zero
   17aec:	003c1806 	br	16b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b50>
   17af0:	9880004c 	andi	r2,r19,1
   17af4:	103f0c1e 	bne	r2,zero,17728 <__alt_mem_mcu_subsystem_ram_0+0x77ff7728>
   17af8:	00800044 	movi	r2,1
   17afc:	dc001d15 	stw	r16,116(sp)
   17b00:	44800015 	stw	r18,0(r8)
   17b04:	40800115 	stw	r2,4(r8)
   17b08:	d8c01e15 	stw	r3,120(sp)
   17b0c:	84000208 	cmpgei	r16,r16,8
   17b10:	8000a31e 	bne	r16,zero,17da0 <___svfprintf_internal_r+0x15a4>
   17b14:	55800084 	addi	r22,r10,2
   17b18:	42000404 	addi	r8,r8,16
   17b1c:	003f3206 	br	177e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff77e8>
   17b20:	d9400417 	ldw	r5,16(sp)
   17b24:	d9000517 	ldw	r4,20(sp)
   17b28:	d9801c04 	addi	r6,sp,112
   17b2c:	001fe040 	call	1fe04 <__ssprint_r>
   17b30:	103bed1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17b34:	d8c01e17 	ldw	r3,120(sp)
   17b38:	003d7b06 	br	17128 <__alt_mem_mcu_subsystem_ram_0+0x77ff7128>
   17b3c:	a825883a 	mov	r18,r21
   17b40:	003e4506 	br	17458 <__alt_mem_mcu_subsystem_ram_0+0x77ff7458>
   17b44:	002f883a 	mov	r23,zero
   17b48:	003d8c06 	br	1717c <__alt_mem_mcu_subsystem_ram_0+0x77ff717c>
   17b4c:	a02fd7fa 	srai	r23,r20,31
   17b50:	003c9906 	br	16db8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6db8>
   17b54:	00800c04 	movi	r2,48
   17b58:	d8801585 	stb	r2,86(sp)
   17b5c:	dc0015c5 	stb	r16,87(sp)
   17b60:	5ac00094 	ori	r11,r11,2
   17b64:	00800084 	movi	r2,2
   17b68:	003bf906 	br	16b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b50>
   17b6c:	d9000617 	ldw	r4,24(sp)
   17b70:	2005d7fa 	srai	r2,r4,31
   17b74:	19000015 	stw	r4,0(r3)
   17b78:	18800115 	stw	r2,4(r3)
   17b7c:	003b4606 	br	16898 <__alt_mem_mcu_subsystem_ram_0+0x77ff6898>
   17b80:	d9000b17 	ldw	r4,44(sp)
   17b84:	d9400c17 	ldw	r5,48(sp)
   17b88:	da000915 	stw	r8,36(sp)
   17b8c:	200d883a 	mov	r6,r4
   17b90:	280f883a 	mov	r7,r5
   17b94:	dac00715 	stw	r11,28(sp)
   17b98:	0024df80 	call	24df8 <__unorddf2>
   17b9c:	dac00717 	ldw	r11,28(sp)
   17ba0:	da000917 	ldw	r8,36(sp)
   17ba4:	1002a01e 	bne	r2,zero,18628 <___svfprintf_internal_r+0x1e2c>
   17ba8:	053ff7c4 	movi	r20,-33
   17bac:	b0bfffe0 	cmpeqi	r2,r22,-1
   17bb0:	8528703a 	and	r20,r16,r20
   17bb4:	1001d91e 	bne	r2,zero,1831c <___svfprintf_internal_r+0x1b20>
   17bb8:	a08011d8 	cmpnei	r2,r20,71
   17bbc:	10014b26 	beq	r2,zero,180ec <___svfprintf_internal_r+0x18f0>
   17bc0:	d8800c17 	ldw	r2,48(sp)
   17bc4:	5cc04014 	ori	r19,r11,256
   17bc8:	1001c716 	blt	r2,zero,182e8 <___svfprintf_internal_r+0x1aec>
   17bcc:	d8c00c17 	ldw	r3,48(sp)
   17bd0:	d8000705 	stb	zero,28(sp)
   17bd4:	808019a0 	cmpeqi	r2,r16,102
   17bd8:	d8800d15 	stw	r2,52(sp)
   17bdc:	1001d11e 	bne	r2,zero,18324 <___svfprintf_internal_r+0x1b28>
   17be0:	834011a0 	cmpeqi	r13,r16,70
   17be4:	6802041e 	bne	r13,zero,183f8 <___svfprintf_internal_r+0x1bfc>
   17be8:	a0801158 	cmpnei	r2,r20,69
   17bec:	10014226 	beq	r2,zero,180f8 <___svfprintf_internal_r+0x18fc>
   17bf0:	d8801a04 	addi	r2,sp,104
   17bf4:	d8800315 	stw	r2,12(sp)
   17bf8:	d9400b17 	ldw	r5,44(sp)
   17bfc:	d8801704 	addi	r2,sp,92
   17c00:	d9000517 	ldw	r4,20(sp)
   17c04:	d8800215 	stw	r2,8(sp)
   17c08:	d8801604 	addi	r2,sp,88
   17c0c:	180d883a 	mov	r6,r3
   17c10:	d8800115 	stw	r2,4(sp)
   17c14:	dd800015 	stw	r22,0(sp)
   17c18:	01c00084 	movi	r7,2
   17c1c:	da001315 	stw	r8,76(sp)
   17c20:	db401215 	stw	r13,72(sp)
   17c24:	dac00a15 	stw	r11,40(sp)
   17c28:	d8c00915 	stw	r3,36(sp)
   17c2c:	001b3bc0 	call	1b3bc <_dtoa_r>
   17c30:	1025883a 	mov	r18,r2
   17c34:	808019d8 	cmpnei	r2,r16,103
   17c38:	d8c00917 	ldw	r3,36(sp)
   17c3c:	dac00a17 	ldw	r11,40(sp)
   17c40:	db401217 	ldw	r13,72(sp)
   17c44:	da001317 	ldw	r8,76(sp)
   17c48:	1002c31e 	bne	r2,zero,18758 <___svfprintf_internal_r+0x1f5c>
   17c4c:	5880004c 	andi	r2,r11,1
   17c50:	10014d26 	beq	r2,zero,18188 <___svfprintf_internal_r+0x198c>
   17c54:	95af883a 	add	r23,r18,r22
   17c58:	d9000b17 	ldw	r4,44(sp)
   17c5c:	000d883a 	mov	r6,zero
   17c60:	000f883a 	mov	r7,zero
   17c64:	180b883a 	mov	r5,r3
   17c68:	da000a15 	stw	r8,40(sp)
   17c6c:	dac00915 	stw	r11,36(sp)
   17c70:	0024c980 	call	24c98 <__eqdf2>
   17c74:	dac00917 	ldw	r11,36(sp)
   17c78:	da000a17 	ldw	r8,40(sp)
   17c7c:	1001911e 	bne	r2,zero,182c4 <___svfprintf_internal_r+0x1ac8>
   17c80:	b805883a 	mov	r2,r23
   17c84:	1485c83a 	sub	r2,r2,r18
   17c88:	d8800a15 	stw	r2,40(sp)
   17c8c:	d8801617 	ldw	r2,88(sp)
   17c90:	a50011d8 	cmpnei	r20,r20,71
   17c94:	d8800915 	stw	r2,36(sp)
   17c98:	a0014226 	beq	r20,zero,181a4 <___svfprintf_internal_r+0x19a8>
   17c9c:	d8800d17 	ldw	r2,52(sp)
   17ca0:	10014526 	beq	r2,zero,181b8 <___svfprintf_internal_r+0x19bc>
   17ca4:	d8800917 	ldw	r2,36(sp)
   17ca8:	0082780e 	bge	zero,r2,1868c <___svfprintf_internal_r+0x1e90>
   17cac:	b002661e 	bne	r22,zero,18648 <___svfprintf_internal_r+0x1e4c>
   17cb0:	5ac0004c 	andi	r11,r11,1
   17cb4:	5802641e 	bne	r11,zero,18648 <___svfprintf_internal_r+0x1e4c>
   17cb8:	ddc00917 	ldw	r23,36(sp)
   17cbc:	b829883a 	mov	r20,r23
   17cc0:	d8800707 	ldb	r2,28(sp)
   17cc4:	1001581e 	bne	r2,zero,18228 <___svfprintf_internal_r+0x1a2c>
   17cc8:	db001543 	ldbu	r12,85(sp)
   17ccc:	002d883a 	mov	r22,zero
   17cd0:	003de506 	br	17468 <__alt_mem_mcu_subsystem_ram_0+0x77ff7468>
   17cd4:	2021883a 	mov	r16,r4
   17cd8:	043ef216 	blt	zero,r16,178a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff78a4>
   17cdc:	003efb06 	br	178cc <__alt_mem_mcu_subsystem_ram_0+0x77ff78cc>
   17ce0:	02c000f4 	movhi	r11,3
   17ce4:	81000450 	cmplti	r4,r16,17
   17ce8:	5acdd884 	addi	r11,r11,14178
   17cec:	d8801d17 	ldw	r2,116(sp)
   17cf0:	2000e21e 	bne	r4,zero,1807c <___svfprintf_internal_r+0x1880>
   17cf4:	dc800715 	stw	r18,28(sp)
   17cf8:	dc400d15 	stw	r17,52(sp)
   17cfc:	05c00404 	movi	r23,16
   17d00:	8023883a 	mov	r17,r16
   17d04:	dd800517 	ldw	r22,20(sp)
   17d08:	dc000417 	ldw	r16,16(sp)
   17d0c:	5825883a 	mov	r18,r11
   17d10:	00000406 	br	17d24 <___svfprintf_internal_r+0x1528>
   17d14:	42000204 	addi	r8,r8,8
   17d18:	8c7ffc04 	addi	r17,r17,-16
   17d1c:	89000448 	cmpgei	r4,r17,17
   17d20:	2000d226 	beq	r4,zero,1806c <___svfprintf_internal_r+0x1870>
   17d24:	10800044 	addi	r2,r2,1
   17d28:	18c00404 	addi	r3,r3,16
   17d2c:	44800015 	stw	r18,0(r8)
   17d30:	45c00115 	stw	r23,4(r8)
   17d34:	d8c01e15 	stw	r3,120(sp)
   17d38:	d8801d15 	stw	r2,116(sp)
   17d3c:	11000208 	cmpgei	r4,r2,8
   17d40:	203ff426 	beq	r4,zero,17d14 <__alt_mem_mcu_subsystem_ram_0+0x77ff7d14>
   17d44:	d9801c04 	addi	r6,sp,112
   17d48:	800b883a 	mov	r5,r16
   17d4c:	b009883a 	mov	r4,r22
   17d50:	001fe040 	call	1fe04 <__ssprint_r>
   17d54:	103b641e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17d58:	d8c01e17 	ldw	r3,120(sp)
   17d5c:	d8801d17 	ldw	r2,116(sp)
   17d60:	a811883a 	mov	r8,r21
   17d64:	003fec06 	br	17d18 <__alt_mem_mcu_subsystem_ram_0+0x77ff7d18>
   17d68:	0463c83a 	sub	r17,zero,r17
   17d6c:	d8800815 	stw	r2,32(sp)
   17d70:	003d4706 	br	17290 <__alt_mem_mcu_subsystem_ram_0+0x77ff7290>
   17d74:	d9000517 	ldw	r4,20(sp)
   17d78:	01401004 	movi	r5,64
   17d7c:	001527c0 	call	1527c <_malloc_r>
   17d80:	d8c00417 	ldw	r3,16(sp)
   17d84:	18800015 	stw	r2,0(r3)
   17d88:	18800415 	stw	r2,16(r3)
   17d8c:	10027626 	beq	r2,zero,18768 <___svfprintf_internal_r+0x1f6c>
   17d90:	d8c00417 	ldw	r3,16(sp)
   17d94:	00801004 	movi	r2,64
   17d98:	18800515 	stw	r2,20(r3)
   17d9c:	003ab206 	br	16868 <__alt_mem_mcu_subsystem_ram_0+0x77ff6868>
   17da0:	d9400417 	ldw	r5,16(sp)
   17da4:	d9000517 	ldw	r4,20(sp)
   17da8:	d9801c04 	addi	r6,sp,112
   17dac:	001fe040 	call	1fe04 <__ssprint_r>
   17db0:	103b4d1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17db4:	da801d17 	ldw	r10,116(sp)
   17db8:	d8c01e17 	ldw	r3,120(sp)
   17dbc:	da002b04 	addi	r8,sp,172
   17dc0:	55800044 	addi	r22,r10,1
   17dc4:	a82f883a 	mov	r23,r21
   17dc8:	003e8706 	br	177e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff77e8>
   17dcc:	e4000043 	ldbu	r16,1(fp)
   17dd0:	5ac00814 	ori	r11,r11,32
   17dd4:	e7000044 	addi	fp,fp,1
   17dd8:	84003fcc 	andi	r16,r16,255
   17ddc:	8400201c 	xori	r16,r16,128
   17de0:	843fe004 	addi	r16,r16,-128
   17de4:	003ad106 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   17de8:	d9400417 	ldw	r5,16(sp)
   17dec:	d9000517 	ldw	r4,20(sp)
   17df0:	d9801c04 	addi	r6,sp,112
   17df4:	001fe040 	call	1fe04 <__ssprint_r>
   17df8:	103b3b1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17dfc:	d8c01e17 	ldw	r3,120(sp)
   17e00:	a811883a 	mov	r8,r21
   17e04:	003dcb06 	br	17534 <__alt_mem_mcu_subsystem_ram_0+0x77ff7534>
   17e08:	0021883a 	mov	r16,zero
   17e0c:	003eb006 	br	178d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff78d0>
   17e10:	b08001f0 	cmpltui	r2,r22,7
   17e14:	b029883a 	mov	r20,r22
   17e18:	1000af26 	beq	r2,zero,180d8 <___svfprintf_internal_r+0x18dc>
   17e1c:	048000f4 	movhi	r18,3
   17e20:	dcc00815 	stw	r19,32(sp)
   17e24:	a02f883a 	mov	r23,r20
   17e28:	5827883a 	mov	r19,r11
   17e2c:	002d883a 	mov	r22,zero
   17e30:	d8000915 	stw	zero,36(sp)
   17e34:	948dd604 	addi	r18,r18,14168
   17e38:	0005883a 	mov	r2,zero
   17e3c:	003bf106 	br	16e04 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e04>
   17e40:	dc000715 	stw	r16,28(sp)
   17e44:	dc400915 	stw	r17,36(sp)
   17e48:	a021883a 	mov	r16,r20
   17e4c:	b823883a 	mov	r17,r23
   17e50:	a825883a 	mov	r18,r21
   17e54:	4029883a 	mov	r20,r8
   17e58:	602f883a 	mov	r23,r12
   17e5c:	8009883a 	mov	r4,r16
   17e60:	880b883a 	mov	r5,r17
   17e64:	01800284 	movi	r6,10
   17e68:	000f883a 	mov	r7,zero
   17e6c:	00124000 	call	12400 <__umoddi3>
   17e70:	10800c04 	addi	r2,r2,48
   17e74:	94bfffc4 	addi	r18,r18,-1
   17e78:	8009883a 	mov	r4,r16
   17e7c:	880b883a 	mov	r5,r17
   17e80:	90800005 	stb	r2,0(r18)
   17e84:	01800284 	movi	r6,10
   17e88:	000f883a 	mov	r7,zero
   17e8c:	0011e680 	call	11e68 <__udivdi3>
   17e90:	1021883a 	mov	r16,r2
   17e94:	10c4b03a 	or	r2,r2,r3
   17e98:	1823883a 	mov	r17,r3
   17e9c:	103fef1e 	bne	r2,zero,17e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff7e5c>
   17ea0:	b819883a 	mov	r12,r23
   17ea4:	dc000717 	ldw	r16,28(sp)
   17ea8:	dc400917 	ldw	r17,36(sp)
   17eac:	a011883a 	mov	r8,r20
   17eb0:	acafc83a 	sub	r23,r21,r18
   17eb4:	003d6806 	br	17458 <__alt_mem_mcu_subsystem_ram_0+0x77ff7458>
   17eb8:	d8800617 	ldw	r2,24(sp)
   17ebc:	18800015 	stw	r2,0(r3)
   17ec0:	003a7506 	br	16898 <__alt_mem_mcu_subsystem_ram_0+0x77ff6898>
   17ec4:	d9400417 	ldw	r5,16(sp)
   17ec8:	d9000517 	ldw	r4,20(sp)
   17ecc:	d9801c04 	addi	r6,sp,112
   17ed0:	dac00d15 	stw	r11,52(sp)
   17ed4:	db000715 	stw	r12,28(sp)
   17ed8:	001fe040 	call	1fe04 <__ssprint_r>
   17edc:	103b021e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17ee0:	d8c01e17 	ldw	r3,120(sp)
   17ee4:	d8801547 	ldb	r2,85(sp)
   17ee8:	a811883a 	mov	r8,r21
   17eec:	dac00d17 	ldw	r11,52(sp)
   17ef0:	db000717 	ldw	r12,28(sp)
   17ef4:	003c0106 	br	16efc <__alt_mem_mcu_subsystem_ram_0+0x77ff6efc>
   17ef8:	d9400417 	ldw	r5,16(sp)
   17efc:	d9000517 	ldw	r4,20(sp)
   17f00:	d9801c04 	addi	r6,sp,112
   17f04:	001fe040 	call	1fe04 <__ssprint_r>
   17f08:	103af71e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17f0c:	d8c01e17 	ldw	r3,120(sp)
   17f10:	dc001d17 	ldw	r16,116(sp)
   17f14:	a82f883a 	mov	r23,r21
   17f18:	003e0a06 	br	17744 <__alt_mem_mcu_subsystem_ram_0+0x77ff7744>
   17f1c:	d9400417 	ldw	r5,16(sp)
   17f20:	d9000517 	ldw	r4,20(sp)
   17f24:	d9801c04 	addi	r6,sp,112
   17f28:	001fe040 	call	1fe04 <__ssprint_r>
   17f2c:	103aee1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17f30:	d8c01e17 	ldw	r3,120(sp)
   17f34:	dc001d17 	ldw	r16,116(sp)
   17f38:	a82f883a 	mov	r23,r21
   17f3c:	003e0c06 	br	17770 <__alt_mem_mcu_subsystem_ram_0+0x77ff7770>
   17f40:	10c00060 	cmpeqi	r3,r2,1
   17f44:	183b2226 	beq	r3,zero,16bd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff6bd0>
   17f48:	003d3006 	br	1740c <__alt_mem_mcu_subsystem_ram_0+0x77ff740c>
   17f4c:	b817883a 	mov	r11,r23
   17f50:	10800044 	addi	r2,r2,1
   17f54:	42c00015 	stw	r11,0(r8)
   17f58:	44000115 	stw	r16,4(r8)
   17f5c:	1c07883a 	add	r3,r3,r16
   17f60:	d8801d15 	stw	r2,116(sp)
   17f64:	d8c01e15 	stw	r3,120(sp)
   17f68:	10800208 	cmpgei	r2,r2,8
   17f6c:	103c3f26 	beq	r2,zero,1706c <__alt_mem_mcu_subsystem_ram_0+0x77ff706c>
   17f70:	003dde06 	br	176ec <__alt_mem_mcu_subsystem_ram_0+0x77ff76ec>
   17f74:	d9400417 	ldw	r5,16(sp)
   17f78:	d9000517 	ldw	r4,20(sp)
   17f7c:	d9801c04 	addi	r6,sp,112
   17f80:	001fe040 	call	1fe04 <__ssprint_r>
   17f84:	103ad81e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   17f88:	d8c01e17 	ldw	r3,120(sp)
   17f8c:	a811883a 	mov	r8,r21
   17f90:	003bf606 	br	16f6c <__alt_mem_mcu_subsystem_ram_0+0x77ff6f6c>
   17f94:	d8801d17 	ldw	r2,116(sp)
   17f98:	014000f4 	movhi	r5,3
   17f9c:	294dd804 	addi	r5,r5,14176
   17fa0:	10800044 	addi	r2,r2,1
   17fa4:	18c00044 	addi	r3,r3,1
   17fa8:	41400015 	stw	r5,0(r8)
   17fac:	01400044 	movi	r5,1
   17fb0:	d8801d15 	stw	r2,116(sp)
   17fb4:	41400115 	stw	r5,4(r8)
   17fb8:	d8c01e15 	stw	r3,120(sp)
   17fbc:	10800208 	cmpgei	r2,r2,8
   17fc0:	1000cd1e 	bne	r2,zero,182f8 <___svfprintf_internal_r+0x1afc>
   17fc4:	42000204 	addi	r8,r8,8
   17fc8:	2000021e 	bne	r4,zero,17fd4 <___svfprintf_internal_r+0x17d8>
   17fcc:	d8800a17 	ldw	r2,40(sp)
   17fd0:	10004326 	beq	r2,zero,180e0 <___svfprintf_internal_r+0x18e4>
   17fd4:	d8801017 	ldw	r2,64(sp)
   17fd8:	d9400f17 	ldw	r5,60(sp)
   17fdc:	40800015 	stw	r2,0(r8)
   17fe0:	d8801d17 	ldw	r2,116(sp)
   17fe4:	28c7883a 	add	r3,r5,r3
   17fe8:	41400115 	stw	r5,4(r8)
   17fec:	10800044 	addi	r2,r2,1
   17ff0:	d8c01e15 	stw	r3,120(sp)
   17ff4:	d8801d15 	stw	r2,116(sp)
   17ff8:	11400208 	cmpgei	r5,r2,8
   17ffc:	283da81e 	bne	r5,zero,176a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff76a0>
   18000:	42000204 	addi	r8,r8,8
   18004:	003daf06 	br	176c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff76c4>
   18008:	d9400417 	ldw	r5,16(sp)
   1800c:	d9000517 	ldw	r4,20(sp)
   18010:	d9801c04 	addi	r6,sp,112
   18014:	001fe040 	call	1fe04 <__ssprint_r>
   18018:	103ab31e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   1801c:	a811883a 	mov	r8,r21
   18020:	003d3006 	br	174e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff74e4>
   18024:	8819883a 	mov	r12,r17
   18028:	dc400717 	ldw	r17,28(sp)
   1802c:	9817883a 	mov	r11,r19
   18030:	85800044 	addi	r22,r16,1
   18034:	b827883a 	mov	r19,r23
   18038:	102f883a 	mov	r23,r2
   1803c:	10800204 	addi	r2,r2,8
   18040:	1b07883a 	add	r3,r3,r12
   18044:	bac00015 	stw	r11,0(r23)
   18048:	bb000115 	stw	r12,4(r23)
   1804c:	d8c01e15 	stw	r3,120(sp)
   18050:	dd801d15 	stw	r22,116(sp)
   18054:	b1000208 	cmpgei	r4,r22,8
   18058:	203f511e 	bne	r4,zero,17da0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7da0>
   1805c:	b5800044 	addi	r22,r22,1
   18060:	12000204 	addi	r8,r2,8
   18064:	102f883a 	mov	r23,r2
   18068:	003ddf06 	br	177e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff77e8>
   1806c:	8821883a 	mov	r16,r17
   18070:	9017883a 	mov	r11,r18
   18074:	dc400d17 	ldw	r17,52(sp)
   18078:	dc800717 	ldw	r18,28(sp)
   1807c:	10800044 	addi	r2,r2,1
   18080:	1c07883a 	add	r3,r3,r16
   18084:	d8801d15 	stw	r2,116(sp)
   18088:	42c00015 	stw	r11,0(r8)
   1808c:	44000115 	stw	r16,4(r8)
   18090:	d8c01e15 	stw	r3,120(sp)
   18094:	10800208 	cmpgei	r2,r2,8
   18098:	1000ee1e 	bne	r2,zero,18454 <___svfprintf_internal_r+0x1c58>
   1809c:	42000204 	addi	r8,r8,8
   180a0:	003e0e06 	br	178dc <__alt_mem_mcu_subsystem_ram_0+0x77ff78dc>
   180a4:	048000f4 	movhi	r18,3
   180a8:	948dc904 	addi	r18,r18,14116
   180ac:	003cb106 	br	17374 <__alt_mem_mcu_subsystem_ram_0+0x77ff7374>
   180b0:	9009883a 	mov	r4,r18
   180b4:	001676c0 	call	1676c <strlen>
   180b8:	102f883a 	mov	r23,r2
   180bc:	db001543 	ldbu	r12,85(sp)
   180c0:	1029883a 	mov	r20,r2
   180c4:	dac00717 	ldw	r11,28(sp)
   180c8:	da000817 	ldw	r8,32(sp)
   180cc:	103b120e 	bge	r2,zero,16d18 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d18>
   180d0:	0029883a 	mov	r20,zero
   180d4:	003b1006 	br	16d18 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d18>
   180d8:	05000184 	movi	r20,6
   180dc:	003f4f06 	br	17e1c <__alt_mem_mcu_subsystem_ram_0+0x77ff7e1c>
   180e0:	9880004c 	andi	r2,r19,1
   180e4:	103be226 	beq	r2,zero,17070 <__alt_mem_mcu_subsystem_ram_0+0x77ff7070>
   180e8:	003fba06 	br	17fd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff7fd4>
   180ec:	b03eb41e 	bne	r22,zero,17bc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7bc0>
   180f0:	05800044 	movi	r22,1
   180f4:	003eb206 	br	17bc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7bc0>
   180f8:	d8801a04 	addi	r2,sp,104
   180fc:	d8800315 	stw	r2,12(sp)
   18100:	d9400b17 	ldw	r5,44(sp)
   18104:	d8801704 	addi	r2,sp,92
   18108:	d9000517 	ldw	r4,20(sp)
   1810c:	b3000044 	addi	r12,r22,1
   18110:	d8800215 	stw	r2,8(sp)
   18114:	d8801604 	addi	r2,sp,88
   18118:	db000015 	stw	r12,0(sp)
   1811c:	180d883a 	mov	r6,r3
   18120:	d8800115 	stw	r2,4(sp)
   18124:	01c00084 	movi	r7,2
   18128:	da001415 	stw	r8,80(sp)
   1812c:	db401315 	stw	r13,76(sp)
   18130:	dac01215 	stw	r11,72(sp)
   18134:	db000a15 	stw	r12,40(sp)
   18138:	d8c00915 	stw	r3,36(sp)
   1813c:	001b3bc0 	call	1b3bc <_dtoa_r>
   18140:	d8c00917 	ldw	r3,36(sp)
   18144:	db000a17 	ldw	r12,40(sp)
   18148:	dac01217 	ldw	r11,72(sp)
   1814c:	db401317 	ldw	r13,76(sp)
   18150:	da001417 	ldw	r8,80(sp)
   18154:	1025883a 	mov	r18,r2
   18158:	808011d8 	cmpnei	r2,r16,71
   1815c:	1001651e 	bne	r2,zero,186f4 <___svfprintf_internal_r+0x1ef8>
   18160:	5880004c 	andi	r2,r11,1
   18164:	10015d26 	beq	r2,zero,186dc <___svfprintf_internal_r+0x1ee0>
   18168:	932f883a 	add	r23,r18,r12
   1816c:	683eba26 	beq	r13,zero,17c58 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c58>
   18170:	90800007 	ldb	r2,0(r18)
   18174:	10800c20 	cmpeqi	r2,r2,48
   18178:	1001131e 	bne	r2,zero,185c8 <___svfprintf_internal_r+0x1dcc>
   1817c:	db001617 	ldw	r12,88(sp)
   18180:	bb2f883a 	add	r23,r23,r12
   18184:	003eb406 	br	17c58 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c58>
   18188:	d8801617 	ldw	r2,88(sp)
   1818c:	a50011e0 	cmpeqi	r20,r20,71
   18190:	d8800915 	stw	r2,36(sp)
   18194:	d8801a17 	ldw	r2,104(sp)
   18198:	1485c83a 	sub	r2,r2,r18
   1819c:	d8800a15 	stw	r2,40(sp)
   181a0:	a0000526 	beq	r20,zero,181b8 <___svfprintf_internal_r+0x19bc>
   181a4:	d8c00917 	ldw	r3,36(sp)
   181a8:	18bfff50 	cmplti	r2,r3,-3
   181ac:	1000011e 	bne	r2,zero,181b4 <___svfprintf_internal_r+0x19b8>
   181b0:	b0c0220e 	bge	r22,r3,1823c <___svfprintf_internal_r+0x1a40>
   181b4:	843fff84 	addi	r16,r16,-2
   181b8:	d8800917 	ldw	r2,36(sp)
   181bc:	dc001845 	stb	r16,97(sp)
   181c0:	15ffffc4 	addi	r23,r2,-1
   181c4:	ddc01615 	stw	r23,88(sp)
   181c8:	b8012716 	blt	r23,zero,18668 <___svfprintf_internal_r+0x1e6c>
   181cc:	00800ac4 	movi	r2,43
   181d0:	d8801885 	stb	r2,98(sp)
   181d4:	b8800290 	cmplti	r2,r23,10
   181d8:	1000d126 	beq	r2,zero,18520 <___svfprintf_internal_r+0x1d24>
   181dc:	bdc00c04 	addi	r23,r23,48
   181e0:	00800c04 	movi	r2,48
   181e4:	d88018c5 	stb	r2,99(sp)
   181e8:	ddc01905 	stb	r23,100(sp)
   181ec:	d8c01944 	addi	r3,sp,101
   181f0:	d9000a17 	ldw	r4,40(sp)
   181f4:	d8801844 	addi	r2,sp,97
   181f8:	1887c83a 	sub	r3,r3,r2
   181fc:	d8c01115 	stw	r3,68(sp)
   18200:	20800088 	cmpgei	r2,r4,2
   18204:	192f883a 	add	r23,r3,r4
   18208:	10011c26 	beq	r2,zero,1867c <___svfprintf_internal_r+0x1e80>
   1820c:	d8800f17 	ldw	r2,60(sp)
   18210:	b8af883a 	add	r23,r23,r2
   18214:	b829883a 	mov	r20,r23
   18218:	b800010e 	bge	r23,zero,18220 <___svfprintf_internal_r+0x1a24>
   1821c:	0029883a 	mov	r20,zero
   18220:	d8000915 	stw	zero,36(sp)
   18224:	003ea606 	br	17cc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7cc0>
   18228:	00800b44 	movi	r2,45
   1822c:	d8801545 	stb	r2,85(sp)
   18230:	002d883a 	mov	r22,zero
   18234:	00800b44 	movi	r2,45
   18238:	003c8f06 	br	17478 <__alt_mem_mcu_subsystem_ram_0+0x77ff7478>
   1823c:	d8800917 	ldw	r2,36(sp)
   18240:	d8c00a17 	ldw	r3,40(sp)
   18244:	10c06016 	blt	r2,r3,183c8 <___svfprintf_internal_r+0x1bcc>
   18248:	5ac0004c 	andi	r11,r11,1
   1824c:	5800f026 	beq	r11,zero,18610 <___svfprintf_internal_r+0x1e14>
   18250:	d8800917 	ldw	r2,36(sp)
   18254:	d8c00f17 	ldw	r3,60(sp)
   18258:	10ef883a 	add	r23,r2,r3
   1825c:	b829883a 	mov	r20,r23
   18260:	b8006316 	blt	r23,zero,183f0 <___svfprintf_internal_r+0x1bf4>
   18264:	040019c4 	movi	r16,103
   18268:	003e9506 	br	17cc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7cc0>
   1826c:	00800b44 	movi	r2,45
   18270:	d8801545 	stb	r2,85(sp)
   18274:	03000b44 	movi	r12,45
   18278:	003c3a06 	br	17364 <__alt_mem_mcu_subsystem_ram_0+0x77ff7364>
   1827c:	d9400417 	ldw	r5,16(sp)
   18280:	d9000517 	ldw	r4,20(sp)
   18284:	d9801c04 	addi	r6,sp,112
   18288:	001fe040 	call	1fe04 <__ssprint_r>
   1828c:	103a161e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   18290:	d8c01e17 	ldw	r3,120(sp)
   18294:	a811883a 	mov	r8,r21
   18298:	803d8d0e 	bge	r16,zero,178d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff78d0>
   1829c:	003eda06 	br	17e08 <__alt_mem_mcu_subsystem_ram_0+0x77ff7e08>
   182a0:	d9400417 	ldw	r5,16(sp)
   182a4:	d9000517 	ldw	r4,20(sp)
   182a8:	d9801c04 	addi	r6,sp,112
   182ac:	001fe040 	call	1fe04 <__ssprint_r>
   182b0:	103a0d1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   182b4:	d8801617 	ldw	r2,88(sp)
   182b8:	d8c01e17 	ldw	r3,120(sp)
   182bc:	a811883a 	mov	r8,r21
   182c0:	003d9706 	br	17920 <__alt_mem_mcu_subsystem_ram_0+0x77ff7920>
   182c4:	d8801a17 	ldw	r2,104(sp)
   182c8:	01000c04 	movi	r4,48
   182cc:	15fe6d2e 	bgeu	r2,r23,17c84 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c84>
   182d0:	10c00044 	addi	r3,r2,1
   182d4:	d8c01a15 	stw	r3,104(sp)
   182d8:	11000005 	stb	r4,0(r2)
   182dc:	d8801a17 	ldw	r2,104(sp)
   182e0:	15fffb36 	bltu	r2,r23,182d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff82d0>
   182e4:	003e6706 	br	17c84 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c84>
   182e8:	10e0003c 	xorhi	r3,r2,32768
   182ec:	00800b44 	movi	r2,45
   182f0:	d8800705 	stb	r2,28(sp)
   182f4:	003e3706 	br	17bd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff7bd4>
   182f8:	d9400417 	ldw	r5,16(sp)
   182fc:	d9000517 	ldw	r4,20(sp)
   18300:	d9801c04 	addi	r6,sp,112
   18304:	001fe040 	call	1fe04 <__ssprint_r>
   18308:	1039f71e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   1830c:	d9001617 	ldw	r4,88(sp)
   18310:	d8c01e17 	ldw	r3,120(sp)
   18314:	a811883a 	mov	r8,r21
   18318:	003f2b06 	br	17fc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7fc8>
   1831c:	05800184 	movi	r22,6
   18320:	003e2706 	br	17bc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7bc0>
   18324:	d8801a04 	addi	r2,sp,104
   18328:	d8800315 	stw	r2,12(sp)
   1832c:	d9400b17 	ldw	r5,44(sp)
   18330:	d8801704 	addi	r2,sp,92
   18334:	d9000517 	ldw	r4,20(sp)
   18338:	d8800215 	stw	r2,8(sp)
   1833c:	d8801604 	addi	r2,sp,88
   18340:	180d883a 	mov	r6,r3
   18344:	d8800115 	stw	r2,4(sp)
   18348:	dd800015 	stw	r22,0(sp)
   1834c:	01c000c4 	movi	r7,3
   18350:	da001215 	stw	r8,72(sp)
   18354:	dac00a15 	stw	r11,40(sp)
   18358:	d8c00915 	stw	r3,36(sp)
   1835c:	001b3bc0 	call	1b3bc <_dtoa_r>
   18360:	1025883a 	mov	r18,r2
   18364:	15af883a 	add	r23,r2,r22
   18368:	b019883a 	mov	r12,r22
   1836c:	d8c00917 	ldw	r3,36(sp)
   18370:	dac00a17 	ldw	r11,40(sp)
   18374:	da001217 	ldw	r8,72(sp)
   18378:	003f7d06 	br	18170 <__alt_mem_mcu_subsystem_ram_0+0x77ff8170>
   1837c:	d9400417 	ldw	r5,16(sp)
   18380:	d9000517 	ldw	r4,20(sp)
   18384:	d9801c04 	addi	r6,sp,112
   18388:	001fe040 	call	1fe04 <__ssprint_r>
   1838c:	1039d61e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   18390:	d8801617 	ldw	r2,88(sp)
   18394:	d9000a17 	ldw	r4,40(sp)
   18398:	d8c01e17 	ldw	r3,120(sp)
   1839c:	a811883a 	mov	r8,r21
   183a0:	2085c83a 	sub	r2,r4,r2
   183a4:	003d7206 	br	17970 <__alt_mem_mcu_subsystem_ram_0+0x77ff7970>
   183a8:	b029883a 	mov	r20,r22
   183ac:	b02f883a 	mov	r23,r22
   183b0:	dcc00815 	stw	r19,32(sp)
   183b4:	db001543 	ldbu	r12,85(sp)
   183b8:	5827883a 	mov	r19,r11
   183bc:	002d883a 	mov	r22,zero
   183c0:	d8000915 	stw	zero,36(sp)
   183c4:	003c2806 	br	17468 <__alt_mem_mcu_subsystem_ram_0+0x77ff7468>
   183c8:	d8800a17 	ldw	r2,40(sp)
   183cc:	d8c00f17 	ldw	r3,60(sp)
   183d0:	10ef883a 	add	r23,r2,r3
   183d4:	d8800917 	ldw	r2,36(sp)
   183d8:	00800316 	blt	zero,r2,183e8 <___svfprintf_internal_r+0x1bec>
   183dc:	d8800917 	ldw	r2,36(sp)
   183e0:	b8afc83a 	sub	r23,r23,r2
   183e4:	bdc00044 	addi	r23,r23,1
   183e8:	b829883a 	mov	r20,r23
   183ec:	b83f9d0e 	bge	r23,zero,18264 <__alt_mem_mcu_subsystem_ram_0+0x77ff8264>
   183f0:	0029883a 	mov	r20,zero
   183f4:	003f9b06 	br	18264 <__alt_mem_mcu_subsystem_ram_0+0x77ff8264>
   183f8:	d8801a04 	addi	r2,sp,104
   183fc:	d8800315 	stw	r2,12(sp)
   18400:	d9400b17 	ldw	r5,44(sp)
   18404:	d8801704 	addi	r2,sp,92
   18408:	d9000517 	ldw	r4,20(sp)
   1840c:	d8800215 	stw	r2,8(sp)
   18410:	d8801604 	addi	r2,sp,88
   18414:	180d883a 	mov	r6,r3
   18418:	d8800115 	stw	r2,4(sp)
   1841c:	dd800015 	stw	r22,0(sp)
   18420:	01c000c4 	movi	r7,3
   18424:	da001315 	stw	r8,76(sp)
   18428:	db401215 	stw	r13,72(sp)
   1842c:	dac00a15 	stw	r11,40(sp)
   18430:	d8c00915 	stw	r3,36(sp)
   18434:	001b3bc0 	call	1b3bc <_dtoa_r>
   18438:	1025883a 	mov	r18,r2
   1843c:	b019883a 	mov	r12,r22
   18440:	d8c00917 	ldw	r3,36(sp)
   18444:	dac00a17 	ldw	r11,40(sp)
   18448:	db401217 	ldw	r13,72(sp)
   1844c:	da001317 	ldw	r8,76(sp)
   18450:	003f4506 	br	18168 <__alt_mem_mcu_subsystem_ram_0+0x77ff8168>
   18454:	d9400417 	ldw	r5,16(sp)
   18458:	d9000517 	ldw	r4,20(sp)
   1845c:	d9801c04 	addi	r6,sp,112
   18460:	001fe040 	call	1fe04 <__ssprint_r>
   18464:	1039a01e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   18468:	d8c01e17 	ldw	r3,120(sp)
   1846c:	a811883a 	mov	r8,r21
   18470:	003d1a06 	br	178dc <__alt_mem_mcu_subsystem_ram_0+0x77ff78dc>
   18474:	02c000f4 	movhi	r11,3
   18478:	217ffc08 	cmpgei	r5,r4,-16
   1847c:	5acdd884 	addi	r11,r11,14178
   18480:	0121c83a 	sub	r16,zero,r4
   18484:	28001c1e 	bne	r5,zero,184f8 <___svfprintf_internal_r+0x1cfc>
   18488:	05c00404 	movi	r23,16
   1848c:	582d883a 	mov	r22,r11
   18490:	00000406 	br	184a4 <___svfprintf_internal_r+0x1ca8>
   18494:	42000204 	addi	r8,r8,8
   18498:	843ffc04 	addi	r16,r16,-16
   1849c:	81000448 	cmpgei	r4,r16,17
   184a0:	20001426 	beq	r4,zero,184f4 <___svfprintf_internal_r+0x1cf8>
   184a4:	10800044 	addi	r2,r2,1
   184a8:	18c00404 	addi	r3,r3,16
   184ac:	45800015 	stw	r22,0(r8)
   184b0:	45c00115 	stw	r23,4(r8)
   184b4:	d8c01e15 	stw	r3,120(sp)
   184b8:	d8801d15 	stw	r2,116(sp)
   184bc:	11000208 	cmpgei	r4,r2,8
   184c0:	203ff426 	beq	r4,zero,18494 <__alt_mem_mcu_subsystem_ram_0+0x77ff8494>
   184c4:	d9400417 	ldw	r5,16(sp)
   184c8:	d9000517 	ldw	r4,20(sp)
   184cc:	d9801c04 	addi	r6,sp,112
   184d0:	001fe040 	call	1fe04 <__ssprint_r>
   184d4:	1039841e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   184d8:	d8c01e17 	ldw	r3,120(sp)
   184dc:	d8801d17 	ldw	r2,116(sp)
   184e0:	a811883a 	mov	r8,r21
   184e4:	003fec06 	br	18498 <__alt_mem_mcu_subsystem_ram_0+0x77ff8498>
   184e8:	00bfffc4 	movi	r2,-1
   184ec:	d8800615 	stw	r2,24(sp)
   184f0:	00398106 	br	16af8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6af8>
   184f4:	b017883a 	mov	r11,r22
   184f8:	10800044 	addi	r2,r2,1
   184fc:	1c07883a 	add	r3,r3,r16
   18500:	42c00015 	stw	r11,0(r8)
   18504:	44000115 	stw	r16,4(r8)
   18508:	d8c01e15 	stw	r3,120(sp)
   1850c:	d8801d15 	stw	r2,116(sp)
   18510:	11000208 	cmpgei	r4,r2,8
   18514:	2000851e 	bne	r4,zero,1872c <___svfprintf_internal_r+0x1f30>
   18518:	42000204 	addi	r8,r8,8
   1851c:	003c6a06 	br	176c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff76c8>
   18520:	dd801bc4 	addi	r22,sp,111
   18524:	dc000915 	stw	r16,36(sp)
   18528:	b029883a 	mov	r20,r22
   1852c:	b821883a 	mov	r16,r23
   18530:	dac00d15 	stw	r11,52(sp)
   18534:	982f883a 	mov	r23,r19
   18538:	4027883a 	mov	r19,r8
   1853c:	00000106 	br	18544 <___svfprintf_internal_r+0x1d48>
   18540:	1829883a 	mov	r20,r3
   18544:	8009883a 	mov	r4,r16
   18548:	01400284 	movi	r5,10
   1854c:	00129dc0 	call	129dc <__modsi3>
   18550:	10800c04 	addi	r2,r2,48
   18554:	8009883a 	mov	r4,r16
   18558:	a0bfffc5 	stb	r2,-1(r20)
   1855c:	01400284 	movi	r5,10
   18560:	00129540 	call	12954 <__divsi3>
   18564:	1021883a 	mov	r16,r2
   18568:	10800288 	cmpgei	r2,r2,10
   1856c:	a0ffffc4 	addi	r3,r20,-1
   18570:	103ff31e 	bne	r2,zero,18540 <__alt_mem_mcu_subsystem_ram_0+0x77ff8540>
   18574:	9811883a 	mov	r8,r19
   18578:	b827883a 	mov	r19,r23
   1857c:	802f883a 	mov	r23,r16
   18580:	b8800c04 	addi	r2,r23,48
   18584:	a53fff84 	addi	r20,r20,-2
   18588:	18bfffc5 	stb	r2,-1(r3)
   1858c:	dac00d17 	ldw	r11,52(sp)
   18590:	dc000917 	ldw	r16,36(sp)
   18594:	a5806e2e 	bgeu	r20,r22,18750 <___svfprintf_internal_r+0x1f54>
   18598:	d90018c4 	addi	r4,sp,99
   1859c:	00000106 	br	185a4 <___svfprintf_internal_r+0x1da8>
   185a0:	a0800003 	ldbu	r2,0(r20)
   185a4:	21000044 	addi	r4,r4,1
   185a8:	a5000044 	addi	r20,r20,1
   185ac:	20bfffc5 	stb	r2,-1(r4)
   185b0:	a5bffb1e 	bne	r20,r22,185a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff85a0>
   185b4:	d8801c04 	addi	r2,sp,112
   185b8:	10c7c83a 	sub	r3,r2,r3
   185bc:	d88018c4 	addi	r2,sp,99
   185c0:	10c7883a 	add	r3,r2,r3
   185c4:	003f0a06 	br	181f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff81f0>
   185c8:	d9000b17 	ldw	r4,44(sp)
   185cc:	180b883a 	mov	r5,r3
   185d0:	000d883a 	mov	r6,zero
   185d4:	000f883a 	mov	r7,zero
   185d8:	da001315 	stw	r8,76(sp)
   185dc:	dac00a15 	stw	r11,40(sp)
   185e0:	d8c00915 	stw	r3,36(sp)
   185e4:	db001215 	stw	r12,72(sp)
   185e8:	0024c980 	call	24c98 <__eqdf2>
   185ec:	d8c00917 	ldw	r3,36(sp)
   185f0:	dac00a17 	ldw	r11,40(sp)
   185f4:	da001317 	ldw	r8,76(sp)
   185f8:	103ee026 	beq	r2,zero,1817c <__alt_mem_mcu_subsystem_ram_0+0x77ff817c>
   185fc:	db001217 	ldw	r12,72(sp)
   18600:	00800044 	movi	r2,1
   18604:	1319c83a 	sub	r12,r2,r12
   18608:	db001615 	stw	r12,88(sp)
   1860c:	003edc06 	br	18180 <__alt_mem_mcu_subsystem_ram_0+0x77ff8180>
   18610:	1029883a 	mov	r20,r2
   18614:	1000010e 	bge	r2,zero,1861c <___svfprintf_internal_r+0x1e20>
   18618:	0029883a 	mov	r20,zero
   1861c:	ddc00917 	ldw	r23,36(sp)
   18620:	040019c4 	movi	r16,103
   18624:	003da606 	br	17cc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7cc0>
   18628:	d8800c17 	ldw	r2,48(sp)
   1862c:	10002316 	blt	r2,zero,186bc <___svfprintf_internal_r+0x1ec0>
   18630:	db001543 	ldbu	r12,85(sp)
   18634:	80801208 	cmpgei	r2,r16,72
   18638:	10001d1e 	bne	r2,zero,186b0 <___svfprintf_internal_r+0x1eb4>
   1863c:	048000f4 	movhi	r18,3
   18640:	948dca04 	addi	r18,r18,14120
   18644:	003b4b06 	br	17374 <__alt_mem_mcu_subsystem_ram_0+0x77ff7374>
   18648:	d8800917 	ldw	r2,36(sp)
   1864c:	d8c00f17 	ldw	r3,60(sp)
   18650:	10ef883a 	add	r23,r2,r3
   18654:	bdaf883a 	add	r23,r23,r22
   18658:	b829883a 	mov	r20,r23
   1865c:	b83d980e 	bge	r23,zero,17cc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7cc0>
   18660:	0029883a 	mov	r20,zero
   18664:	003d9606 	br	17cc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7cc0>
   18668:	05c00044 	movi	r23,1
   1866c:	b8afc83a 	sub	r23,r23,r2
   18670:	00800b44 	movi	r2,45
   18674:	d8801885 	stb	r2,98(sp)
   18678:	003ed606 	br	181d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff81d4>
   1867c:	5880004c 	andi	r2,r11,1
   18680:	d8800915 	stw	r2,36(sp)
   18684:	103ee11e 	bne	r2,zero,1820c <__alt_mem_mcu_subsystem_ram_0+0x77ff820c>
   18688:	003ff306 	br	18658 <__alt_mem_mcu_subsystem_ram_0+0x77ff8658>
   1868c:	b0000f1e 	bne	r22,zero,186cc <___svfprintf_internal_r+0x1ed0>
   18690:	5ac0004c 	andi	r11,r11,1
   18694:	58000d1e 	bne	r11,zero,186cc <___svfprintf_internal_r+0x1ed0>
   18698:	05000044 	movi	r20,1
   1869c:	05c00044 	movi	r23,1
   186a0:	003d8706 	br	17cc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7cc0>
   186a4:	4005883a 	mov	r2,r8
   186a8:	5acdd884 	addi	r11,r11,14178
   186ac:	003e6406 	br	18040 <__alt_mem_mcu_subsystem_ram_0+0x77ff8040>
   186b0:	048000f4 	movhi	r18,3
   186b4:	948dcb04 	addi	r18,r18,14124
   186b8:	003b2e06 	br	17374 <__alt_mem_mcu_subsystem_ram_0+0x77ff7374>
   186bc:	00800b44 	movi	r2,45
   186c0:	d8801545 	stb	r2,85(sp)
   186c4:	03000b44 	movi	r12,45
   186c8:	003fda06 	br	18634 <__alt_mem_mcu_subsystem_ram_0+0x77ff8634>
   186cc:	d8800f17 	ldw	r2,60(sp)
   186d0:	15c00044 	addi	r23,r2,1
   186d4:	bdaf883a 	add	r23,r23,r22
   186d8:	003fdf06 	br	18658 <__alt_mem_mcu_subsystem_ram_0+0x77ff8658>
   186dc:	d8801617 	ldw	r2,88(sp)
   186e0:	d8800915 	stw	r2,36(sp)
   186e4:	d8801a17 	ldw	r2,104(sp)
   186e8:	1485c83a 	sub	r2,r2,r18
   186ec:	d8800a15 	stw	r2,40(sp)
   186f0:	003eac06 	br	181a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff81a4>
   186f4:	932f883a 	add	r23,r18,r12
   186f8:	003d5706 	br	17c58 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c58>
   186fc:	d8800817 	ldw	r2,32(sp)
   18700:	15800017 	ldw	r22,0(r2)
   18704:	10800104 	addi	r2,r2,4
   18708:	b000010e 	bge	r22,zero,18710 <___svfprintf_internal_r+0x1f14>
   1870c:	05bfffc4 	movi	r22,-1
   18710:	e4000043 	ldbu	r16,1(fp)
   18714:	d8800815 	stw	r2,32(sp)
   18718:	1839883a 	mov	fp,r3
   1871c:	84003fcc 	andi	r16,r16,255
   18720:	8400201c 	xori	r16,r16,128
   18724:	843fe004 	addi	r16,r16,-128
   18728:	00388006 	br	1692c <__alt_mem_mcu_subsystem_ram_0+0x77ff692c>
   1872c:	d9400417 	ldw	r5,16(sp)
   18730:	d9000517 	ldw	r4,20(sp)
   18734:	d9801c04 	addi	r6,sp,112
   18738:	001fe040 	call	1fe04 <__ssprint_r>
   1873c:	1038ea1e 	bne	r2,zero,16ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6ae8>
   18740:	d8c01e17 	ldw	r3,120(sp)
   18744:	d8801d17 	ldw	r2,116(sp)
   18748:	a811883a 	mov	r8,r21
   1874c:	003bde06 	br	176c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff76c8>
   18750:	d8c018c4 	addi	r3,sp,99
   18754:	003ea606 	br	181f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff81f0>
   18758:	b019883a 	mov	r12,r22
   1875c:	003e7e06 	br	18158 <__alt_mem_mcu_subsystem_ram_0+0x77ff8158>
   18760:	d9401545 	stb	r5,85(sp)
   18764:	003aa506 	br	171fc <__alt_mem_mcu_subsystem_ram_0+0x77ff71fc>
   18768:	d8c00517 	ldw	r3,20(sp)
   1876c:	00800304 	movi	r2,12
   18770:	18800015 	stw	r2,0(r3)
   18774:	00bfffc4 	movi	r2,-1
   18778:	d8800615 	stw	r2,24(sp)
   1877c:	0038de06 	br	16af8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6af8>
   18780:	d9401545 	stb	r5,85(sp)
   18784:	003a7306 	br	17154 <__alt_mem_mcu_subsystem_ram_0+0x77ff7154>
   18788:	d9401545 	stb	r5,85(sp)
   1878c:	00398306 	br	16d9c <__alt_mem_mcu_subsystem_ram_0+0x77ff6d9c>
   18790:	d9401545 	stb	r5,85(sp)
   18794:	00396a06 	br	16d40 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d40>
   18798:	d9401545 	stb	r5,85(sp)
   1879c:	003afe06 	br	17398 <__alt_mem_mcu_subsystem_ram_0+0x77ff7398>
   187a0:	d9401545 	stb	r5,85(sp)
   187a4:	00393406 	br	16c78 <__alt_mem_mcu_subsystem_ram_0+0x77ff6c78>
   187a8:	d9401545 	stb	r5,85(sp)
   187ac:	003ac606 	br	172c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff72c8>

000187b0 <__tzcalc_limits>:
   187b0:	defff204 	addi	sp,sp,-56
   187b4:	dd000815 	stw	r20,32(sp)
   187b8:	dcc00715 	stw	r19,28(sp)
   187bc:	dfc00d15 	stw	ra,52(sp)
   187c0:	2027883a 	mov	r19,r4
   187c4:	df000c15 	stw	fp,48(sp)
   187c8:	ddc00b15 	stw	r23,44(sp)
   187cc:	dd800a15 	stw	r22,40(sp)
   187d0:	dd400915 	stw	r21,36(sp)
   187d4:	dc800615 	stw	r18,24(sp)
   187d8:	dc400515 	stw	r17,20(sp)
   187dc:	dc000415 	stw	r16,16(sp)
   187e0:	001db8c0 	call	1db8c <__gettzinfo>
   187e4:	1029883a 	mov	r20,r2
   187e8:	9881ec90 	cmplti	r2,r19,1970
   187ec:	1000671e 	bne	r2,zero,1898c <__tzcalc_limits+0x1dc>
   187f0:	9c3e1384 	addi	r16,r19,-1970
   187f4:	98be13c4 	addi	r2,r19,-1969
   187f8:	1005d0ba 	srai	r2,r2,2
   187fc:	84005b64 	muli	r16,r16,365
   18800:	993e24c4 	addi	r4,r19,-1901
   18804:	017fe704 	movi	r5,-100
   18808:	a4c00115 	stw	r19,4(r20)
   1880c:	80a1883a 	add	r16,r16,r2
   18810:	00129540 	call	12954 <__divsi3>
   18814:	993e6fc4 	addi	r4,r19,-1601
   18818:	01406404 	movi	r5,400
   1881c:	80a1883a 	add	r16,r16,r2
   18820:	00129540 	call	12954 <__divsi3>
   18824:	9809883a 	mov	r4,r19
   18828:	01401904 	movi	r5,100
   1882c:	80a1883a 	add	r16,r16,r2
   18830:	00129dc0 	call	129dc <__modsi3>
   18834:	9809883a 	mov	r4,r19
   18838:	01406404 	movi	r5,400
   1883c:	1023883a 	mov	r17,r2
   18840:	00129dc0 	call	129dc <__modsi3>
   18844:	102f003a 	cmpeq	r23,r2,zero
   18848:	bdc00c24 	muli	r23,r23,48
   1884c:	058000f4 	movhi	r22,3
   18850:	05400074 	movhi	r21,1
   18854:	100d883a 	mov	r6,r2
   18858:	a4800204 	addi	r18,r20,8
   1885c:	a7001004 	addi	fp,r20,64
   18860:	9cc000cc 	andi	r19,r19,3
   18864:	b58ea204 	addi	r22,r22,14984
   18868:	ad546004 	addi	r21,r21,20864
   1886c:	90800007 	ldb	r2,0(r18)
   18870:	92400317 	ldw	r9,12(r18)
   18874:	10c01298 	cmpnei	r3,r2,74
   18878:	18004626 	beq	r3,zero,18994 <__tzcalc_limits+0x1e4>
   1887c:	10801118 	cmpnei	r2,r2,68
   18880:	10001a1e 	bne	r2,zero,188ec <__tzcalc_limits+0x13c>
   18884:	8245883a 	add	r2,r16,r9
   18888:	91000417 	ldw	r4,16(r18)
   1888c:	1545383a 	mul	r2,r2,r21
   18890:	90c00617 	ldw	r3,24(r18)
   18894:	94800704 	addi	r18,r18,28
   18898:	1105883a 	add	r2,r2,r4
   1889c:	10c5883a 	add	r2,r2,r3
   188a0:	90bffe15 	stw	r2,-8(r18)
   188a4:	e4bff11e 	bne	fp,r18,1886c <__alt_mem_mcu_subsystem_ram_0+0x77ff886c>
   188a8:	a0c00717 	ldw	r3,28(r20)
   188ac:	a1000e17 	ldw	r4,56(r20)
   188b0:	00800044 	movi	r2,1
   188b4:	1906803a 	cmplt	r3,r3,r4
   188b8:	a0c00015 	stw	r3,0(r20)
   188bc:	dfc00d17 	ldw	ra,52(sp)
   188c0:	df000c17 	ldw	fp,48(sp)
   188c4:	ddc00b17 	ldw	r23,44(sp)
   188c8:	dd800a17 	ldw	r22,40(sp)
   188cc:	dd400917 	ldw	r21,36(sp)
   188d0:	dd000817 	ldw	r20,32(sp)
   188d4:	dcc00717 	ldw	r19,28(sp)
   188d8:	dc800617 	ldw	r18,24(sp)
   188dc:	dc400517 	ldw	r17,20(sp)
   188e0:	dc000417 	ldw	r16,16(sp)
   188e4:	dec00e04 	addi	sp,sp,56
   188e8:	f800283a 	ret
   188ec:	98003526 	beq	r19,zero,189c4 <__tzcalc_limits+0x214>
   188f0:	b805883a 	mov	r2,r23
   188f4:	90c00117 	ldw	r3,4(r18)
   188f8:	1591883a 	add	r8,r2,r22
   188fc:	18800090 	cmplti	r2,r3,2
   18900:	1000331e 	bne	r2,zero,189d0 <__tzcalc_limits+0x220>
   18904:	180690ba 	slli	r3,r3,2
   18908:	4005883a 	mov	r2,r8
   1890c:	800f883a 	mov	r7,r16
   18910:	18ffff04 	addi	r3,r3,-4
   18914:	40c7883a 	add	r3,r8,r3
   18918:	11000017 	ldw	r4,0(r2)
   1891c:	10800104 	addi	r2,r2,4
   18920:	390f883a 	add	r7,r7,r4
   18924:	18bffc1e 	bne	r3,r2,18918 <__alt_mem_mcu_subsystem_ram_0+0x77ff8918>
   18928:	1811883a 	mov	r8,r3
   1892c:	39000104 	addi	r4,r7,4
   18930:	014001c4 	movi	r5,7
   18934:	da000315 	stw	r8,12(sp)
   18938:	da400215 	stw	r9,8(sp)
   1893c:	d9800115 	stw	r6,4(sp)
   18940:	d9c00015 	stw	r7,0(sp)
   18944:	00129dc0 	call	129dc <__modsi3>
   18948:	da400217 	ldw	r9,8(sp)
   1894c:	d9c00017 	ldw	r7,0(sp)
   18950:	d9800117 	ldw	r6,4(sp)
   18954:	4885c83a 	sub	r2,r9,r2
   18958:	da000317 	ldw	r8,12(sp)
   1895c:	1000010e 	bge	r2,zero,18964 <__tzcalc_limits+0x1b4>
   18960:	108001c4 	addi	r2,r2,7
   18964:	90c00217 	ldw	r3,8(r18)
   18968:	41000017 	ldw	r4,0(r8)
   1896c:	18ffffc4 	addi	r3,r3,-1
   18970:	18c001e4 	muli	r3,r3,7
   18974:	1885883a 	add	r2,r3,r2
   18978:	11000216 	blt	r2,r4,18984 <__tzcalc_limits+0x1d4>
   1897c:	10bffe44 	addi	r2,r2,-7
   18980:	113ffe0e 	bge	r2,r4,1897c <__alt_mem_mcu_subsystem_ram_0+0x77ff897c>
   18984:	11c5883a 	add	r2,r2,r7
   18988:	003fbf06 	br	18888 <__alt_mem_mcu_subsystem_ram_0+0x77ff8888>
   1898c:	0005883a 	mov	r2,zero
   18990:	003fca06 	br	188bc <__alt_mem_mcu_subsystem_ram_0+0x77ff88bc>
   18994:	8245883a 	add	r2,r16,r9
   18998:	9800061e 	bne	r19,zero,189b4 <__tzcalc_limits+0x204>
   1899c:	88000526 	beq	r17,zero,189b4 <__tzcalc_limits+0x204>
   189a0:	4a400f10 	cmplti	r9,r9,60
   189a4:	4800011e 	bne	r9,zero,189ac <__tzcalc_limits+0x1fc>
   189a8:	10800044 	addi	r2,r2,1
   189ac:	10bfffc4 	addi	r2,r2,-1
   189b0:	003fb506 	br	18888 <__alt_mem_mcu_subsystem_ram_0+0x77ff8888>
   189b4:	303ffd1e 	bne	r6,zero,189ac <__alt_mem_mcu_subsystem_ram_0+0x77ff89ac>
   189b8:	4a400f10 	cmplti	r9,r9,60
   189bc:	483ffb1e 	bne	r9,zero,189ac <__alt_mem_mcu_subsystem_ram_0+0x77ff89ac>
   189c0:	003ff906 	br	189a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff89a8>
   189c4:	883fca26 	beq	r17,zero,188f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff88f0>
   189c8:	00800c04 	movi	r2,48
   189cc:	003fc906 	br	188f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff88f4>
   189d0:	800f883a 	mov	r7,r16
   189d4:	003fd506 	br	1892c <__alt_mem_mcu_subsystem_ram_0+0x77ff892c>

000189d8 <__tz_lock>:
   189d8:	f800283a 	ret

000189dc <__tz_unlock>:
   189dc:	f800283a 	ret

000189e0 <_tzset_unlocked>:
   189e0:	008000f4 	movhi	r2,3
   189e4:	111e6617 	ldw	r4,31128(r2)
   189e8:	0018a101 	jmpi	18a10 <_tzset_unlocked_r>

000189ec <tzset>:
   189ec:	deffff04 	addi	sp,sp,-4
   189f0:	dfc00015 	stw	ra,0(sp)
   189f4:	00189d80 	call	189d8 <__tz_lock>
   189f8:	008000f4 	movhi	r2,3
   189fc:	111e6617 	ldw	r4,31128(r2)
   18a00:	0018a100 	call	18a10 <_tzset_unlocked_r>
   18a04:	dfc00017 	ldw	ra,0(sp)
   18a08:	dec00104 	addi	sp,sp,4
   18a0c:	00189dc1 	jmpi	189dc <__tz_unlock>

00018a10 <_tzset_unlocked_r>:
   18a10:	deffee04 	addi	sp,sp,-72
   18a14:	dc800b15 	stw	r18,44(sp)
   18a18:	dc400a15 	stw	r17,40(sp)
   18a1c:	dfc01115 	stw	ra,68(sp)
   18a20:	ddc01015 	stw	r23,64(sp)
   18a24:	dd800f15 	stw	r22,60(sp)
   18a28:	dd400e15 	stw	r21,56(sp)
   18a2c:	dd000d15 	stw	r20,52(sp)
   18a30:	dcc00c15 	stw	r19,48(sp)
   18a34:	dc000915 	stw	r16,36(sp)
   18a38:	2023883a 	mov	r17,r4
   18a3c:	001db8c0 	call	1db8c <__gettzinfo>
   18a40:	014000f4 	movhi	r5,3
   18a44:	294de104 	addi	r5,r5,14212
   18a48:	8809883a 	mov	r4,r17
   18a4c:	1025883a 	mov	r18,r2
   18a50:	001db700 	call	1db70 <_getenv_r>
   18a54:	1000b726 	beq	r2,zero,18d34 <_tzset_unlocked_r+0x324>
   18a58:	1021883a 	mov	r16,r2
   18a5c:	00800134 	movhi	r2,4
   18a60:	11661017 	ldw	r5,-26560(r2)
   18a64:	28001026 	beq	r5,zero,18aa8 <_tzset_unlocked_r+0x98>
   18a68:	8009883a 	mov	r4,r16
   18a6c:	00166140 	call	16614 <strcmp>
   18a70:	10000b1e 	bne	r2,zero,18aa0 <_tzset_unlocked_r+0x90>
   18a74:	dfc01117 	ldw	ra,68(sp)
   18a78:	ddc01017 	ldw	r23,64(sp)
   18a7c:	dd800f17 	ldw	r22,60(sp)
   18a80:	dd400e17 	ldw	r21,56(sp)
   18a84:	dd000d17 	ldw	r20,52(sp)
   18a88:	dcc00c17 	ldw	r19,48(sp)
   18a8c:	dc800b17 	ldw	r18,44(sp)
   18a90:	dc400a17 	ldw	r17,40(sp)
   18a94:	dc000917 	ldw	r16,36(sp)
   18a98:	dec01204 	addi	sp,sp,72
   18a9c:	f800283a 	ret
   18aa0:	00800134 	movhi	r2,4
   18aa4:	11661017 	ldw	r5,-26560(r2)
   18aa8:	2809883a 	mov	r4,r5
   18aac:	001526c0 	call	1526c <free>
   18ab0:	8009883a 	mov	r4,r16
   18ab4:	001676c0 	call	1676c <strlen>
   18ab8:	11400044 	addi	r5,r2,1
   18abc:	8809883a 	mov	r4,r17
   18ac0:	001527c0 	call	1527c <_malloc_r>
   18ac4:	00c00134 	movhi	r3,4
   18ac8:	18a61015 	stw	r2,-26560(r3)
   18acc:	10000326 	beq	r2,zero,18adc <_tzset_unlocked_r+0xcc>
   18ad0:	800b883a 	mov	r5,r16
   18ad4:	1009883a 	mov	r4,r2
   18ad8:	00166e00 	call	166e0 <strcpy>
   18adc:	80800007 	ldb	r2,0(r16)
   18ae0:	10800e98 	cmpnei	r2,r2,58
   18ae4:	10008e26 	beq	r2,zero,18d20 <_tzset_unlocked_r+0x310>
   18ae8:	dc400704 	addi	r17,sp,28
   18aec:	018202b4 	movhi	r6,2058
   18af0:	014000f4 	movhi	r5,3
   18af4:	880f883a 	mov	r7,r17
   18af8:	318b00c4 	addi	r6,r6,11267
   18afc:	294de304 	addi	r5,r5,14220
   18b00:	8009883a 	mov	r4,r16
   18b04:	001f8180 	call	1f818 <siscanf>
   18b08:	00bfda0e 	bge	zero,r2,18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18b0c:	d8800717 	ldw	r2,28(sp)
   18b10:	80a1883a 	add	r16,r16,r2
   18b14:	80800007 	ldb	r2,0(r16)
   18b18:	10c00b58 	cmpnei	r3,r2,45
   18b1c:	18009526 	beq	r3,zero,18d74 <_tzset_unlocked_r+0x364>
   18b20:	10800ad8 	cmpnei	r2,r2,43
   18b24:	10008026 	beq	r2,zero,18d28 <_tzset_unlocked_r+0x318>
   18b28:	05400044 	movi	r21,1
   18b2c:	dd000504 	addi	r20,sp,20
   18b30:	dcc00484 	addi	r19,sp,18
   18b34:	014000f4 	movhi	r5,3
   18b38:	dc400315 	stw	r17,12(sp)
   18b3c:	dd000215 	stw	r20,8(sp)
   18b40:	dc400115 	stw	r17,4(sp)
   18b44:	dcc00015 	stw	r19,0(sp)
   18b48:	880f883a 	mov	r7,r17
   18b4c:	d9800404 	addi	r6,sp,16
   18b50:	294de704 	addi	r5,r5,14236
   18b54:	8009883a 	mov	r4,r16
   18b58:	d800048d 	sth	zero,18(sp)
   18b5c:	d800050d 	sth	zero,20(sp)
   18b60:	001f8180 	call	1f818 <siscanf>
   18b64:	00bfc30e 	bge	zero,r2,18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18b68:	d880048b 	ldhu	r2,18(sp)
   18b6c:	d8c0040b 	ldhu	r3,16(sp)
   18b70:	d900050b 	ldhu	r4,20(sp)
   18b74:	10800f24 	muli	r2,r2,60
   18b78:	18c38424 	muli	r3,r3,3600
   18b7c:	018202b4 	movhi	r6,2058
   18b80:	1105883a 	add	r2,r2,r4
   18b84:	10c5883a 	add	r2,r2,r3
   18b88:	d9000717 	ldw	r4,28(sp)
   18b8c:	1545383a 	mul	r2,r2,r21
   18b90:	00c202b4 	movhi	r3,2058
   18b94:	8121883a 	add	r16,r16,r4
   18b98:	014000f4 	movhi	r5,3
   18b9c:	054000f4 	movhi	r21,3
   18ba0:	18cb00c4 	addi	r3,r3,11267
   18ba4:	90800815 	stw	r2,32(r18)
   18ba8:	880f883a 	mov	r7,r17
   18bac:	008000f4 	movhi	r2,3
   18bb0:	318afe04 	addi	r6,r6,11256
   18bb4:	294de304 	addi	r5,r5,14220
   18bb8:	8009883a 	mov	r4,r16
   18bbc:	ad5e6904 	addi	r21,r21,31140
   18bc0:	10de6915 	stw	r3,31140(r2)
   18bc4:	001f8180 	call	1f818 <siscanf>
   18bc8:	00806d0e 	bge	zero,r2,18d80 <_tzset_unlocked_r+0x370>
   18bcc:	008202b4 	movhi	r2,2058
   18bd0:	108afe04 	addi	r2,r2,11256
   18bd4:	a8800115 	stw	r2,4(r21)
   18bd8:	d8800717 	ldw	r2,28(sp)
   18bdc:	80a1883a 	add	r16,r16,r2
   18be0:	80800007 	ldb	r2,0(r16)
   18be4:	10c00b58 	cmpnei	r3,r2,45
   18be8:	1800b926 	beq	r3,zero,18ed0 <_tzset_unlocked_r+0x4c0>
   18bec:	10800ad8 	cmpnei	r2,r2,43
   18bf0:	10006c26 	beq	r2,zero,18da4 <_tzset_unlocked_r+0x394>
   18bf4:	05400044 	movi	r21,1
   18bf8:	014000f4 	movhi	r5,3
   18bfc:	dc400315 	stw	r17,12(sp)
   18c00:	dd000215 	stw	r20,8(sp)
   18c04:	dc400115 	stw	r17,4(sp)
   18c08:	dcc00015 	stw	r19,0(sp)
   18c0c:	880f883a 	mov	r7,r17
   18c10:	d9800404 	addi	r6,sp,16
   18c14:	294de704 	addi	r5,r5,14236
   18c18:	8009883a 	mov	r4,r16
   18c1c:	d800040d 	sth	zero,16(sp)
   18c20:	d800048d 	sth	zero,18(sp)
   18c24:	d800050d 	sth	zero,20(sp)
   18c28:	d8000715 	stw	zero,28(sp)
   18c2c:	001f8180 	call	1f818 <siscanf>
   18c30:	0080a30e 	bge	zero,r2,18ec0 <_tzset_unlocked_r+0x4b0>
   18c34:	d880048b 	ldhu	r2,18(sp)
   18c38:	d8c0040b 	ldhu	r3,16(sp)
   18c3c:	d900050b 	ldhu	r4,20(sp)
   18c40:	10800f24 	muli	r2,r2,60
   18c44:	18c38424 	muli	r3,r3,3600
   18c48:	1105883a 	add	r2,r2,r4
   18c4c:	10c5883a 	add	r2,r2,r3
   18c50:	1545383a 	mul	r2,r2,r21
   18c54:	90800f15 	stw	r2,60(r18)
   18c58:	d8800717 	ldw	r2,28(sp)
   18c5c:	95c00204 	addi	r23,r18,8
   18c60:	002d883a 	mov	r22,zero
   18c64:	80a1883a 	add	r16,r16,r2
   18c68:	85400007 	ldb	r21,0(r16)
   18c6c:	a8800b18 	cmpnei	r2,r21,44
   18c70:	1000051e 	bne	r2,zero,18c88 <_tzset_unlocked_r+0x278>
   18c74:	85400043 	ldbu	r21,1(r16)
   18c78:	84000044 	addi	r16,r16,1
   18c7c:	ad403fcc 	andi	r21,r21,255
   18c80:	ad40201c 	xori	r21,r21,128
   18c84:	ad7fe004 	addi	r21,r21,-128
   18c88:	a8801358 	cmpnei	r2,r21,77
   18c8c:	10005626 	beq	r2,zero,18de8 <_tzset_unlocked_r+0x3d8>
   18c90:	ad401298 	cmpnei	r21,r21,74
   18c94:	a8004826 	beq	r21,zero,18db8 <_tzset_unlocked_r+0x3a8>
   18c98:	05401104 	movi	r21,68
   18c9c:	01800284 	movi	r6,10
   18ca0:	d9400804 	addi	r5,sp,32
   18ca4:	8009883a 	mov	r4,r16
   18ca8:	001fdc00 	call	1fdc0 <strtoul>
   18cac:	d8c00817 	ldw	r3,32(sp)
   18cb0:	d880068d 	sth	r2,26(sp)
   18cb4:	1c004326 	beq	r3,r16,18dc4 <_tzset_unlocked_r+0x3b4>
   18cb8:	10bfffcc 	andi	r2,r2,65535
   18cbc:	bd400005 	stb	r21,0(r23)
   18cc0:	b8800315 	stw	r2,12(r23)
   18cc4:	1821883a 	mov	r16,r3
   18cc8:	00800084 	movi	r2,2
   18ccc:	d880040d 	sth	r2,16(sp)
   18cd0:	d800048d 	sth	zero,18(sp)
   18cd4:	d800050d 	sth	zero,20(sp)
   18cd8:	d8000715 	stw	zero,28(sp)
   18cdc:	80800007 	ldb	r2,0(r16)
   18ce0:	10800bd8 	cmpnei	r2,r2,47
   18ce4:	10006226 	beq	r2,zero,18e70 <_tzset_unlocked_r+0x460>
   18ce8:	00870804 	movi	r2,7200
   18cec:	b8800415 	stw	r2,16(r23)
   18cf0:	bdc00704 	addi	r23,r23,28
   18cf4:	b0002e26 	beq	r22,zero,18db0 <_tzset_unlocked_r+0x3a0>
   18cf8:	91000117 	ldw	r4,4(r18)
   18cfc:	00187b00 	call	187b0 <__tzcalc_limits>
   18d00:	90c00817 	ldw	r3,32(r18)
   18d04:	90800f17 	ldw	r2,60(r18)
   18d08:	01000134 	movhi	r4,4
   18d0c:	20e61115 	stw	r3,-26556(r4)
   18d10:	10c4c03a 	cmpne	r2,r2,r3
   18d14:	00c00134 	movhi	r3,4
   18d18:	18a61215 	stw	r2,-26552(r3)
   18d1c:	003f5506 	br	18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18d20:	84000044 	addi	r16,r16,1
   18d24:	003f7006 	br	18ae8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8ae8>
   18d28:	84000044 	addi	r16,r16,1
   18d2c:	05400044 	movi	r21,1
   18d30:	003f7e06 	br	18b2c <__alt_mem_mcu_subsystem_ram_0+0x77ff8b2c>
   18d34:	00800134 	movhi	r2,4
   18d38:	00c00134 	movhi	r3,4
   18d3c:	11261017 	ldw	r4,-26560(r2)
   18d40:	18261115 	stw	zero,-26556(r3)
   18d44:	008000f4 	movhi	r2,3
   18d48:	00c00134 	movhi	r3,4
   18d4c:	108de204 	addi	r2,r2,14216
   18d50:	18261215 	stw	zero,-26552(r3)
   18d54:	00c000f4 	movhi	r3,3
   18d58:	189e6915 	stw	r2,31140(r3)
   18d5c:	00c000f4 	movhi	r3,3
   18d60:	189e6a15 	stw	r2,31144(r3)
   18d64:	001526c0 	call	1526c <free>
   18d68:	00800134 	movhi	r2,4
   18d6c:	10261015 	stw	zero,-26560(r2)
   18d70:	003f4006 	br	18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18d74:	84000044 	addi	r16,r16,1
   18d78:	057fffc4 	movi	r21,-1
   18d7c:	003f6b06 	br	18b2c <__alt_mem_mcu_subsystem_ram_0+0x77ff8b2c>
   18d80:	008000f4 	movhi	r2,3
   18d84:	109e6917 	ldw	r2,31140(r2)
   18d88:	90c00817 	ldw	r3,32(r18)
   18d8c:	a8800115 	stw	r2,4(r21)
   18d90:	00800134 	movhi	r2,4
   18d94:	10e61115 	stw	r3,-26556(r2)
   18d98:	00800134 	movhi	r2,4
   18d9c:	10261215 	stw	zero,-26552(r2)
   18da0:	003f3406 	br	18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18da4:	84000044 	addi	r16,r16,1
   18da8:	05400044 	movi	r21,1
   18dac:	003f9206 	br	18bf8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8bf8>
   18db0:	05800044 	movi	r22,1
   18db4:	003fac06 	br	18c68 <__alt_mem_mcu_subsystem_ram_0+0x77ff8c68>
   18db8:	84000044 	addi	r16,r16,1
   18dbc:	05401284 	movi	r21,74
   18dc0:	003fb606 	br	18c9c <__alt_mem_mcu_subsystem_ram_0+0x77ff8c9c>
   18dc4:	00801344 	movi	r2,77
   18dc8:	b0004426 	beq	r22,zero,18edc <_tzset_unlocked_r+0x4cc>
   18dcc:	90800905 	stb	r2,36(r18)
   18dd0:	008002c4 	movi	r2,11
   18dd4:	90800a15 	stw	r2,40(r18)
   18dd8:	00800044 	movi	r2,1
   18ddc:	90800b15 	stw	r2,44(r18)
   18de0:	90000c15 	stw	zero,48(r18)
   18de4:	003fb706 	br	18cc4 <__alt_mem_mcu_subsystem_ram_0+0x77ff8cc4>
   18de8:	d8800684 	addi	r2,sp,26
   18dec:	d8800215 	stw	r2,8(sp)
   18df0:	014000f4 	movhi	r5,3
   18df4:	d8800604 	addi	r2,sp,24
   18df8:	dc400315 	stw	r17,12(sp)
   18dfc:	dc400115 	stw	r17,4(sp)
   18e00:	d8800015 	stw	r2,0(sp)
   18e04:	880f883a 	mov	r7,r17
   18e08:	d9800584 	addi	r6,sp,22
   18e0c:	294dec04 	addi	r5,r5,14256
   18e10:	8009883a 	mov	r4,r16
   18e14:	001f8180 	call	1f818 <siscanf>
   18e18:	108000d8 	cmpnei	r2,r2,3
   18e1c:	103f151e 	bne	r2,zero,18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18e20:	d8c0058b 	ldhu	r3,22(sp)
   18e24:	18bfffc4 	addi	r2,r3,-1
   18e28:	10bfffcc 	andi	r2,r2,65535
   18e2c:	10800328 	cmpgeui	r2,r2,12
   18e30:	103f101e 	bne	r2,zero,18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18e34:	d900060b 	ldhu	r4,24(sp)
   18e38:	20bfffc4 	addi	r2,r4,-1
   18e3c:	10bfffcc 	andi	r2,r2,65535
   18e40:	10800168 	cmpgeui	r2,r2,5
   18e44:	103f0b1e 	bne	r2,zero,18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18e48:	d880068b 	ldhu	r2,26(sp)
   18e4c:	114001e8 	cmpgeui	r5,r2,7
   18e50:	283f081e 	bne	r5,zero,18a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a74>
   18e54:	bd400005 	stb	r21,0(r23)
   18e58:	b8c00115 	stw	r3,4(r23)
   18e5c:	b9000215 	stw	r4,8(r23)
   18e60:	b8800315 	stw	r2,12(r23)
   18e64:	d8800717 	ldw	r2,28(sp)
   18e68:	80a1883a 	add	r16,r16,r2
   18e6c:	003f9606 	br	18cc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8cc8>
   18e70:	014000f4 	movhi	r5,3
   18e74:	8009883a 	mov	r4,r16
   18e78:	dc400315 	stw	r17,12(sp)
   18e7c:	dd000215 	stw	r20,8(sp)
   18e80:	dc400115 	stw	r17,4(sp)
   18e84:	dcc00015 	stw	r19,0(sp)
   18e88:	880f883a 	mov	r7,r17
   18e8c:	d9800404 	addi	r6,sp,16
   18e90:	294df104 	addi	r5,r5,14276
   18e94:	001f8180 	call	1f818 <siscanf>
   18e98:	d880048b 	ldhu	r2,18(sp)
   18e9c:	d8c0040b 	ldhu	r3,16(sp)
   18ea0:	d900050b 	ldhu	r4,20(sp)
   18ea4:	10800f24 	muli	r2,r2,60
   18ea8:	18c38424 	muli	r3,r3,3600
   18eac:	1105883a 	add	r2,r2,r4
   18eb0:	10c5883a 	add	r2,r2,r3
   18eb4:	d8c00717 	ldw	r3,28(sp)
   18eb8:	80e1883a 	add	r16,r16,r3
   18ebc:	003f8b06 	br	18cec <__alt_mem_mcu_subsystem_ram_0+0x77ff8cec>
   18ec0:	90800817 	ldw	r2,32(r18)
   18ec4:	10bc7c04 	addi	r2,r2,-3600
   18ec8:	90800f15 	stw	r2,60(r18)
   18ecc:	003f6206 	br	18c58 <__alt_mem_mcu_subsystem_ram_0+0x77ff8c58>
   18ed0:	84000044 	addi	r16,r16,1
   18ed4:	057fffc4 	movi	r21,-1
   18ed8:	003f4706 	br	18bf8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8bf8>
   18edc:	90800205 	stb	r2,8(r18)
   18ee0:	008000c4 	movi	r2,3
   18ee4:	90800315 	stw	r2,12(r18)
   18ee8:	00800084 	movi	r2,2
   18eec:	90800415 	stw	r2,16(r18)
   18ef0:	90000515 	stw	zero,20(r18)
   18ef4:	003f7306 	br	18cc4 <__alt_mem_mcu_subsystem_ram_0+0x77ff8cc4>

00018ef8 <_tzset_r>:
   18ef8:	defffe04 	addi	sp,sp,-8
   18efc:	dfc00115 	stw	ra,4(sp)
   18f00:	d9000015 	stw	r4,0(sp)
   18f04:	00189d80 	call	189d8 <__tz_lock>
   18f08:	d9000017 	ldw	r4,0(sp)
   18f0c:	0018a100 	call	18a10 <_tzset_unlocked_r>
   18f10:	dfc00117 	ldw	ra,4(sp)
   18f14:	dec00204 	addi	sp,sp,8
   18f18:	00189dc1 	jmpi	189dc <__tz_unlock>

00018f1c <___vfprintf_internal_r>:
   18f1c:	deffbe04 	addi	sp,sp,-264
   18f20:	dfc04115 	stw	ra,260(sp)
   18f24:	ddc03f15 	stw	r23,252(sp)
   18f28:	dc403915 	stw	r17,228(sp)
   18f2c:	dc003815 	stw	r16,224(sp)
   18f30:	2023883a 	mov	r17,r4
   18f34:	d9000415 	stw	r4,16(sp)
   18f38:	282f883a 	mov	r23,r5
   18f3c:	3021883a 	mov	r16,r6
   18f40:	d9c00715 	stw	r7,28(sp)
   18f44:	df004015 	stw	fp,256(sp)
   18f48:	dd803e15 	stw	r22,248(sp)
   18f4c:	dd403d15 	stw	r21,244(sp)
   18f50:	dd003c15 	stw	r20,240(sp)
   18f54:	dcc03b15 	stw	r19,236(sp)
   18f58:	dc803a15 	stw	r18,232(sp)
   18f5c:	001dba00 	call	1dba0 <_localeconv_r>
   18f60:	10800017 	ldw	r2,0(r2)
   18f64:	1009883a 	mov	r4,r2
   18f68:	d8800f15 	stw	r2,60(sp)
   18f6c:	001676c0 	call	1676c <strlen>
   18f70:	d8800c15 	stw	r2,48(sp)
   18f74:	88000226 	beq	r17,zero,18f80 <___vfprintf_internal_r+0x64>
   18f78:	88800e17 	ldw	r2,56(r17)
   18f7c:	1000b426 	beq	r2,zero,19250 <___vfprintf_internal_r+0x334>
   18f80:	b880030b 	ldhu	r2,12(r23)
   18f84:	10c8000c 	andi	r3,r2,8192
   18f88:	1800061e 	bne	r3,zero,18fa4 <___vfprintf_internal_r+0x88>
   18f8c:	b8c01917 	ldw	r3,100(r23)
   18f90:	0137ffc4 	movi	r4,-8193
   18f94:	10880014 	ori	r2,r2,8192
   18f98:	1906703a 	and	r3,r3,r4
   18f9c:	b880030d 	sth	r2,12(r23)
   18fa0:	b8c01915 	stw	r3,100(r23)
   18fa4:	10c0020c 	andi	r3,r2,8
   18fa8:	18009826 	beq	r3,zero,1920c <___vfprintf_internal_r+0x2f0>
   18fac:	b8c00417 	ldw	r3,16(r23)
   18fb0:	18009626 	beq	r3,zero,1920c <___vfprintf_internal_r+0x2f0>
   18fb4:	1080068c 	andi	r2,r2,26
   18fb8:	10800298 	cmpnei	r2,r2,10
   18fbc:	10009b26 	beq	r2,zero,1922c <___vfprintf_internal_r+0x310>
   18fc0:	d8802804 	addi	r2,sp,160
   18fc4:	d8801b15 	stw	r2,108(sp)
   18fc8:	d8001d15 	stw	zero,116(sp)
   18fcc:	d8001c15 	stw	zero,112(sp)
   18fd0:	d8000915 	stw	zero,36(sp)
   18fd4:	d8000a15 	stw	zero,40(sp)
   18fd8:	d8000b15 	stw	zero,44(sp)
   18fdc:	1011883a 	mov	r8,r2
   18fe0:	d8000e15 	stw	zero,56(sp)
   18fe4:	d8001015 	stw	zero,64(sp)
   18fe8:	d8000515 	stw	zero,20(sp)
   18fec:	8039883a 	mov	fp,r16
   18ff0:	e0800007 	ldb	r2,0(fp)
   18ff4:	10023626 	beq	r2,zero,198d0 <___vfprintf_internal_r+0x9b4>
   18ff8:	10800960 	cmpeqi	r2,r2,37
   18ffc:	e023883a 	mov	r17,fp
   19000:	10000226 	beq	r2,zero,1900c <___vfprintf_internal_r+0xf0>
   19004:	00001706 	br	19064 <___vfprintf_internal_r+0x148>
   19008:	18000426 	beq	r3,zero,1901c <___vfprintf_internal_r+0x100>
   1900c:	8c400044 	addi	r17,r17,1
   19010:	88800007 	ldb	r2,0(r17)
   19014:	10c00958 	cmpnei	r3,r2,37
   19018:	103ffb1e 	bne	r2,zero,19008 <__alt_mem_mcu_subsystem_ram_0+0x77ff9008>
   1901c:	8f21c83a 	sub	r16,r17,fp
   19020:	80000e26 	beq	r16,zero,1905c <___vfprintf_internal_r+0x140>
   19024:	d8c01d17 	ldw	r3,116(sp)
   19028:	d8801c17 	ldw	r2,112(sp)
   1902c:	47000015 	stw	fp,0(r8)
   19030:	1c07883a 	add	r3,r3,r16
   19034:	10800044 	addi	r2,r2,1
   19038:	d8801c15 	stw	r2,112(sp)
   1903c:	44000115 	stw	r16,4(r8)
   19040:	d8c01d15 	stw	r3,116(sp)
   19044:	10800208 	cmpgei	r2,r2,8
   19048:	10038c1e 	bne	r2,zero,19e7c <___vfprintf_internal_r+0xf60>
   1904c:	42000204 	addi	r8,r8,8
   19050:	d8800517 	ldw	r2,20(sp)
   19054:	1405883a 	add	r2,r2,r16
   19058:	d8800515 	stw	r2,20(sp)
   1905c:	88800007 	ldb	r2,0(r17)
   19060:	10021b26 	beq	r2,zero,198d0 <___vfprintf_internal_r+0x9b4>
   19064:	8f000044 	addi	fp,r17,1
   19068:	8c400047 	ldb	r17,1(r17)
   1906c:	d8001445 	stb	zero,81(sp)
   19070:	0009883a 	mov	r4,zero
   19074:	000b883a 	mov	r5,zero
   19078:	05bfffc4 	movi	r22,-1
   1907c:	0025883a 	mov	r18,zero
   19080:	0017883a 	mov	r11,zero
   19084:	e7000044 	addi	fp,fp,1
   19088:	88bff804 	addi	r2,r17,-32
   1908c:	10c01668 	cmpgeui	r3,r2,89
   19090:	1800c41e 	bne	r3,zero,193a4 <___vfprintf_internal_r+0x488>
   19094:	100490ba 	slli	r2,r2,2
   19098:	00c000b4 	movhi	r3,2
   1909c:	10c7883a 	add	r3,r2,r3
   190a0:	18a42a17 	ldw	r2,-28504(r3)
   190a4:	1000683a 	jmp	r2
   190a8:	000199a4 	muli	zero,zero,1638
   190ac:	000193a4 	muli	zero,zero,1614
   190b0:	000193a4 	muli	zero,zero,1614
   190b4:	00019998 	cmpnei	zero,zero,1638
   190b8:	000193a4 	muli	zero,zero,1614
   190bc:	000193a4 	muli	zero,zero,1614
   190c0:	000193a4 	muli	zero,zero,1614
   190c4:	000193a4 	muli	zero,zero,1614
   190c8:	000193a4 	muli	zero,zero,1614
   190cc:	000193a4 	muli	zero,zero,1614
   190d0:	00019970 	cmpltui	zero,zero,1637
   190d4:	00019960 	cmpeqi	zero,zero,1637
   190d8:	000193a4 	muli	zero,zero,1614
   190dc:	00019a14 	movui	zero,1640
   190e0:	000199d0 	cmplti	zero,zero,1639
   190e4:	000193a4 	muli	zero,zero,1614
   190e8:	00019a2c 	andhi	zero,zero,1640
   190ec:	00019374 	movhi	zero,1613
   190f0:	00019374 	movhi	zero,1613
   190f4:	00019374 	movhi	zero,1613
   190f8:	00019374 	movhi	zero,1613
   190fc:	00019374 	movhi	zero,1613
   19100:	00019374 	movhi	zero,1613
   19104:	00019374 	movhi	zero,1613
   19108:	00019374 	movhi	zero,1613
   1910c:	00019374 	movhi	zero,1613
   19110:	000193a4 	muli	zero,zero,1614
   19114:	000193a4 	muli	zero,zero,1614
   19118:	000193a4 	muli	zero,zero,1614
   1911c:	000193a4 	muli	zero,zero,1614
   19120:	000193a4 	muli	zero,zero,1614
   19124:	000193a4 	muli	zero,zero,1614
   19128:	000193a4 	muli	zero,zero,1614
   1912c:	000193a4 	muli	zero,zero,1614
   19130:	000193a4 	muli	zero,zero,1614
   19134:	000193a4 	muli	zero,zero,1614
   19138:	00019b08 	cmpgei	zero,zero,1644
   1913c:	00019a38 	rdprs	zero,zero,1640
   19140:	000193a4 	muli	zero,zero,1614
   19144:	00019a38 	rdprs	zero,zero,1640
   19148:	000193a4 	muli	zero,zero,1614
   1914c:	000193a4 	muli	zero,zero,1614
   19150:	000193a4 	muli	zero,zero,1614
   19154:	000193a4 	muli	zero,zero,1614
   19158:	00019b98 	cmpnei	zero,zero,1646
   1915c:	000193a4 	muli	zero,zero,1614
   19160:	000193a4 	muli	zero,zero,1614
   19164:	000192c0 	call	192c <checksum16+0x3c>
   19168:	000193a4 	muli	zero,zero,1614
   1916c:	000193a4 	muli	zero,zero,1614
   19170:	000193a4 	muli	zero,zero,1614
   19174:	000193a4 	muli	zero,zero,1614
   19178:	000193a4 	muli	zero,zero,1614
   1917c:	0001925c 	xori	zero,zero,1609
   19180:	000193a4 	muli	zero,zero,1614
   19184:	000193a4 	muli	zero,zero,1614
   19188:	00019918 	cmpnei	zero,zero,1636
   1918c:	000193a4 	muli	zero,zero,1614
   19190:	000193a4 	muli	zero,zero,1614
   19194:	000193a4 	muli	zero,zero,1614
   19198:	000193a4 	muli	zero,zero,1614
   1919c:	000193a4 	muli	zero,zero,1614
   191a0:	000193a4 	muli	zero,zero,1614
   191a4:	000193a4 	muli	zero,zero,1614
   191a8:	000193a4 	muli	zero,zero,1614
   191ac:	000193a4 	muli	zero,zero,1614
   191b0:	000193a4 	muli	zero,zero,1614
   191b4:	0001954c 	andi	zero,zero,1621
   191b8:	00019510 	cmplti	zero,zero,1620
   191bc:	00019a38 	rdprs	zero,zero,1640
   191c0:	00019a38 	rdprs	zero,zero,1640
   191c4:	00019a38 	rdprs	zero,zero,1640
   191c8:	00019504 	movi	zero,1620
   191cc:	00019510 	cmplti	zero,zero,1620
   191d0:	000193a4 	muli	zero,zero,1614
   191d4:	000193a4 	muli	zero,zero,1614
   191d8:	000194f0 	cmpltui	zero,zero,1619
   191dc:	000193a4 	muli	zero,zero,1614
   191e0:	000194b4 	movhi	zero,1618
   191e4:	000192c4 	movi	zero,1611
   191e8:	00019410 	cmplti	zero,zero,1616
   191ec:	00019404 	movi	zero,1616
   191f0:	000193a4 	muli	zero,zero,1614
   191f4:	00019450 	cmplti	zero,zero,1617
   191f8:	000193a4 	muli	zero,zero,1614
   191fc:	00019260 	cmpeqi	zero,zero,1609
   19200:	000193a4 	muli	zero,zero,1614
   19204:	000193a4 	muli	zero,zero,1614
   19208:	000193bc 	xorhi	zero,zero,1614
   1920c:	d9000417 	ldw	r4,16(sp)
   19210:	b80b883a 	mov	r5,r23
   19214:	001aff80 	call	1aff8 <__swsetup_r>
   19218:	1006581e 	bne	r2,zero,1ab7c <___vfprintf_internal_r+0x1c60>
   1921c:	b880030b 	ldhu	r2,12(r23)
   19220:	1080068c 	andi	r2,r2,26
   19224:	10800298 	cmpnei	r2,r2,10
   19228:	103f651e 	bne	r2,zero,18fc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8fc0>
   1922c:	b880038f 	ldh	r2,14(r23)
   19230:	103f6316 	blt	r2,zero,18fc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8fc0>
   19234:	d9c00717 	ldw	r7,28(sp)
   19238:	d9000417 	ldw	r4,16(sp)
   1923c:	800d883a 	mov	r6,r16
   19240:	b80b883a 	mov	r5,r23
   19244:	001aee80 	call	1aee8 <__sbprintf>
   19248:	d8800515 	stw	r2,20(sp)
   1924c:	0001a506 	br	198e4 <___vfprintf_internal_r+0x9c8>
   19250:	d9000417 	ldw	r4,16(sp)
   19254:	001d0240 	call	1d024 <__sinit>
   19258:	003f4906 	br	18f80 <__alt_mem_mcu_subsystem_ram_0+0x77ff8f80>
   1925c:	5ac00414 	ori	r11,r11,16
   19260:	5880080c 	andi	r2,r11,32
   19264:	10039f26 	beq	r2,zero,1a0e4 <___vfprintf_internal_r+0x11c8>
   19268:	d8c00717 	ldw	r3,28(sp)
   1926c:	00800044 	movi	r2,1
   19270:	1c000017 	ldw	r16,0(r3)
   19274:	1d400117 	ldw	r21,4(r3)
   19278:	18c00204 	addi	r3,r3,8
   1927c:	d8c00715 	stw	r3,28(sp)
   19280:	d8001445 	stb	zero,81(sp)
   19284:	b0ffffe0 	cmpeqi	r3,r22,-1
   19288:	1800191e 	bne	r3,zero,192f0 <___vfprintf_internal_r+0x3d4>
   1928c:	0019883a 	mov	r12,zero
   19290:	053fdfc4 	movi	r20,-129
   19294:	8546b03a 	or	r3,r16,r21
   19298:	5d28703a 	and	r20,r11,r20
   1929c:	1800161e 	bne	r3,zero,192f8 <___vfprintf_internal_r+0x3dc>
   192a0:	b0052a1e 	bne	r22,zero,1a74c <___vfprintf_internal_r+0x1830>
   192a4:	10035e1e 	bne	r2,zero,1a020 <___vfprintf_internal_r+0x1104>
   192a8:	5c00004c 	andi	r16,r11,1
   192ac:	8003ac26 	beq	r16,zero,1a160 <___vfprintf_internal_r+0x1244>
   192b0:	00800c04 	movi	r2,48
   192b4:	d88027c5 	stb	r2,159(sp)
   192b8:	dcc027c4 	addi	r19,sp,159
   192bc:	00002306 	br	1934c <___vfprintf_internal_r+0x430>
   192c0:	5ac00414 	ori	r11,r11,16
   192c4:	5880080c 	andi	r2,r11,32
   192c8:	10037a26 	beq	r2,zero,1a0b4 <___vfprintf_internal_r+0x1198>
   192cc:	d8c00717 	ldw	r3,28(sp)
   192d0:	d8001445 	stb	zero,81(sp)
   192d4:	0005883a 	mov	r2,zero
   192d8:	1c000017 	ldw	r16,0(r3)
   192dc:	1d400117 	ldw	r21,4(r3)
   192e0:	18c00204 	addi	r3,r3,8
   192e4:	d8c00715 	stw	r3,28(sp)
   192e8:	b0ffffe0 	cmpeqi	r3,r22,-1
   192ec:	183fe726 	beq	r3,zero,1928c <__alt_mem_mcu_subsystem_ram_0+0x77ff928c>
   192f0:	5829883a 	mov	r20,r11
   192f4:	0019883a 	mov	r12,zero
   192f8:	10c00060 	cmpeqi	r3,r2,1
   192fc:	18021e1e 	bne	r3,zero,19b78 <___vfprintf_internal_r+0xc5c>
   19300:	108000a0 	cmpeqi	r2,r2,2
   19304:	1002fa1e 	bne	r2,zero,19ef0 <___vfprintf_internal_r+0xfd4>
   19308:	d8c02804 	addi	r3,sp,160
   1930c:	00000106 	br	19314 <___vfprintf_internal_r+0x3f8>
   19310:	9807883a 	mov	r3,r19
   19314:	8008d0fa 	srli	r4,r16,3
   19318:	a80a977a 	slli	r5,r21,29
   1931c:	a82ad0fa 	srli	r21,r21,3
   19320:	840001cc 	andi	r16,r16,7
   19324:	80800c04 	addi	r2,r16,48
   19328:	2920b03a 	or	r16,r5,r4
   1932c:	18bfffc5 	stb	r2,-1(r3)
   19330:	8548b03a 	or	r4,r16,r21
   19334:	1cffffc4 	addi	r19,r3,-1
   19338:	203ff51e 	bne	r4,zero,19310 <__alt_mem_mcu_subsystem_ram_0+0x77ff9310>
   1933c:	a100004c 	andi	r4,r20,1
   19340:	2003741e 	bne	r4,zero,1a114 <___vfprintf_internal_r+0x11f8>
   19344:	d8802804 	addi	r2,sp,160
   19348:	14e1c83a 	sub	r16,r2,r19
   1934c:	b02b883a 	mov	r21,r22
   19350:	b400010e 	bge	r22,r16,19358 <___vfprintf_internal_r+0x43c>
   19354:	802b883a 	mov	r21,r16
   19358:	d8000815 	stw	zero,32(sp)
   1935c:	60803fcc 	andi	r2,r12,255
   19360:	1080201c 	xori	r2,r2,128
   19364:	10bfe004 	addi	r2,r2,-128
   19368:	10008526 	beq	r2,zero,19580 <___vfprintf_internal_r+0x664>
   1936c:	ad400044 	addi	r21,r21,1
   19370:	00008306 	br	19580 <___vfprintf_internal_r+0x664>
   19374:	0025883a 	mov	r18,zero
   19378:	88bff404 	addi	r2,r17,-48
   1937c:	e7000044 	addi	fp,fp,1
   19380:	948002a4 	muli	r18,r18,10
   19384:	e47fffc7 	ldb	r17,-1(fp)
   19388:	14a5883a 	add	r18,r2,r18
   1938c:	88bff404 	addi	r2,r17,-48
   19390:	10c002b0 	cmpltui	r3,r2,10
   19394:	183ff91e 	bne	r3,zero,1937c <__alt_mem_mcu_subsystem_ram_0+0x77ff937c>
   19398:	88bff804 	addi	r2,r17,-32
   1939c:	10c01668 	cmpgeui	r3,r2,89
   193a0:	183f3c26 	beq	r3,zero,19094 <__alt_mem_mcu_subsystem_ram_0+0x77ff9094>
   193a4:	21003fcc 	andi	r4,r4,255
   193a8:	2006b91e 	bne	r4,zero,1ae90 <___vfprintf_internal_r+0x1f74>
   193ac:	88014826 	beq	r17,zero,198d0 <___vfprintf_internal_r+0x9b4>
   193b0:	dc401e05 	stb	r17,120(sp)
   193b4:	d8001445 	stb	zero,81(sp)
   193b8:	00006a06 	br	19564 <___vfprintf_internal_r+0x648>
   193bc:	21003fcc 	andi	r4,r4,255
   193c0:	2006bd1e 	bne	r4,zero,1aeb8 <___vfprintf_internal_r+0x1f9c>
   193c4:	008000f4 	movhi	r2,3
   193c8:	108dd104 	addi	r2,r2,14148
   193cc:	d8800e15 	stw	r2,56(sp)
   193d0:	5880080c 	andi	r2,r11,32
   193d4:	10015726 	beq	r2,zero,19934 <___vfprintf_internal_r+0xa18>
   193d8:	d8800717 	ldw	r2,28(sp)
   193dc:	14000017 	ldw	r16,0(r2)
   193e0:	15400117 	ldw	r21,4(r2)
   193e4:	10800204 	addi	r2,r2,8
   193e8:	d8800715 	stw	r2,28(sp)
   193ec:	5880004c 	andi	r2,r11,1
   193f0:	10000226 	beq	r2,zero,193fc <___vfprintf_internal_r+0x4e0>
   193f4:	8544b03a 	or	r2,r16,r21
   193f8:	10035f1e 	bne	r2,zero,1a178 <___vfprintf_internal_r+0x125c>
   193fc:	00800084 	movi	r2,2
   19400:	003f9f06 	br	19280 <__alt_mem_mcu_subsystem_ram_0+0x77ff9280>
   19404:	5ac00814 	ori	r11,r11,32
   19408:	e4400007 	ldb	r17,0(fp)
   1940c:	003f1d06 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19410:	d8c00717 	ldw	r3,28(sp)
   19414:	00800c04 	movi	r2,48
   19418:	d8801485 	stb	r2,82(sp)
   1941c:	00801e04 	movi	r2,120
   19420:	010000f4 	movhi	r4,3
   19424:	d88014c5 	stb	r2,83(sp)
   19428:	18800104 	addi	r2,r3,4
   1942c:	d8800715 	stw	r2,28(sp)
   19430:	208dd104 	addi	r2,r4,14148
   19434:	d8800e15 	stw	r2,56(sp)
   19438:	1c000017 	ldw	r16,0(r3)
   1943c:	002b883a 	mov	r21,zero
   19440:	5ac00094 	ori	r11,r11,2
   19444:	00800084 	movi	r2,2
   19448:	04401e04 	movi	r17,120
   1944c:	003f8c06 	br	19280 <__alt_mem_mcu_subsystem_ram_0+0x77ff9280>
   19450:	d8800717 	ldw	r2,28(sp)
   19454:	d8001445 	stb	zero,81(sp)
   19458:	14c00017 	ldw	r19,0(r2)
   1945c:	15000104 	addi	r20,r2,4
   19460:	9803de26 	beq	r19,zero,1a3dc <___vfprintf_internal_r+0x14c0>
   19464:	da000715 	stw	r8,28(sp)
   19468:	dac00615 	stw	r11,24(sp)
   1946c:	b0bfffe0 	cmpeqi	r2,r22,-1
   19470:	1004e21e 	bne	r2,zero,1a7fc <___vfprintf_internal_r+0x18e0>
   19474:	b00d883a 	mov	r6,r22
   19478:	000b883a 	mov	r5,zero
   1947c:	9809883a 	mov	r4,r19
   19480:	001ddb00 	call	1ddb0 <memchr>
   19484:	dac00617 	ldw	r11,24(sp)
   19488:	da000717 	ldw	r8,28(sp)
   1948c:	1005b326 	beq	r2,zero,1ab5c <___vfprintf_internal_r+0x1c40>
   19490:	14e1c83a 	sub	r16,r2,r19
   19494:	db001443 	ldbu	r12,81(sp)
   19498:	802b883a 	mov	r21,r16
   1949c:	8004df16 	blt	r16,zero,1a81c <___vfprintf_internal_r+0x1900>
   194a0:	dd000715 	stw	r20,28(sp)
   194a4:	002d883a 	mov	r22,zero
   194a8:	5829883a 	mov	r20,r11
   194ac:	d8000815 	stw	zero,32(sp)
   194b0:	003faa06 	br	1935c <__alt_mem_mcu_subsystem_ram_0+0x77ff935c>
   194b4:	21003fcc 	andi	r4,r4,255
   194b8:	2006791e 	bne	r4,zero,1aea0 <___vfprintf_internal_r+0x1f84>
   194bc:	d9000717 	ldw	r4,28(sp)
   194c0:	5880080c 	andi	r2,r11,32
   194c4:	20c00017 	ldw	r3,0(r4)
   194c8:	21000104 	addi	r4,r4,4
   194cc:	d9000715 	stw	r4,28(sp)
   194d0:	10032f1e 	bne	r2,zero,1a190 <___vfprintf_internal_r+0x1274>
   194d4:	5880040c 	andi	r2,r11,16
   194d8:	1003e81e 	bne	r2,zero,1a47c <___vfprintf_internal_r+0x1560>
   194dc:	5ac0100c 	andi	r11,r11,64
   194e0:	5803e626 	beq	r11,zero,1a47c <___vfprintf_internal_r+0x1560>
   194e4:	d8800517 	ldw	r2,20(sp)
   194e8:	1880000d 	sth	r2,0(r3)
   194ec:	003ec006 	br	18ff0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8ff0>
   194f0:	e4400007 	ldb	r17,0(fp)
   194f4:	88801b18 	cmpnei	r2,r17,108
   194f8:	1003b126 	beq	r2,zero,1a3c0 <___vfprintf_internal_r+0x14a4>
   194fc:	5ac00414 	ori	r11,r11,16
   19500:	003ee006 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19504:	5ac01014 	ori	r11,r11,64
   19508:	e4400007 	ldb	r17,0(fp)
   1950c:	003edd06 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19510:	21003fcc 	andi	r4,r4,255
   19514:	2006661e 	bne	r4,zero,1aeb0 <___vfprintf_internal_r+0x1f94>
   19518:	5880080c 	andi	r2,r11,32
   1951c:	10017f26 	beq	r2,zero,19b1c <___vfprintf_internal_r+0xc00>
   19520:	d8800717 	ldw	r2,28(sp)
   19524:	14000017 	ldw	r16,0(r2)
   19528:	15400117 	ldw	r21,4(r2)
   1952c:	10800204 	addi	r2,r2,8
   19530:	d8800715 	stw	r2,28(sp)
   19534:	a8018616 	blt	r21,zero,19b50 <___vfprintf_internal_r+0xc34>
   19538:	b0bfffd8 	cmpnei	r2,r22,-1
   1953c:	db001443 	ldbu	r12,81(sp)
   19540:	10018c26 	beq	r2,zero,19b74 <___vfprintf_internal_r+0xc58>
   19544:	00800044 	movi	r2,1
   19548:	003f5106 	br	19290 <__alt_mem_mcu_subsystem_ram_0+0x77ff9290>
   1954c:	d8c00717 	ldw	r3,28(sp)
   19550:	d8001445 	stb	zero,81(sp)
   19554:	18800017 	ldw	r2,0(r3)
   19558:	18c00104 	addi	r3,r3,4
   1955c:	d8c00715 	stw	r3,28(sp)
   19560:	d8801e05 	stb	r2,120(sp)
   19564:	5829883a 	mov	r20,r11
   19568:	05400044 	movi	r21,1
   1956c:	04000044 	movi	r16,1
   19570:	002d883a 	mov	r22,zero
   19574:	d8000815 	stw	zero,32(sp)
   19578:	dcc01e04 	addi	r19,sp,120
   1957c:	0005883a 	mov	r2,zero
   19580:	a300008c 	andi	r12,r20,2
   19584:	60000126 	beq	r12,zero,1958c <___vfprintf_internal_r+0x670>
   19588:	ad400084 	addi	r21,r21,2
   1958c:	a2c0210c 	andi	r11,r20,132
   19590:	d8c01d17 	ldw	r3,116(sp)
   19594:	5800381e 	bne	r11,zero,19678 <___vfprintf_internal_r+0x75c>
   19598:	955bc83a 	sub	r13,r18,r21
   1959c:	0340360e 	bge	zero,r13,19678 <___vfprintf_internal_r+0x75c>
   195a0:	01c000f4 	movhi	r7,3
   195a4:	69000450 	cmplti	r4,r13,17
   195a8:	39cdf9c4 	addi	r7,r7,14311
   195ac:	d8801c17 	ldw	r2,112(sp)
   195b0:	2000271e 	bne	r4,zero,19650 <___vfprintf_internal_r+0x734>
   195b4:	dc401215 	stw	r17,72(sp)
   195b8:	dc001315 	stw	r16,76(sp)
   195bc:	03800404 	movi	r14,16
   195c0:	db000d15 	stw	r12,52(sp)
   195c4:	dac01115 	stw	r11,68(sp)
   195c8:	6821883a 	mov	r16,r13
   195cc:	3823883a 	mov	r17,r7
   195d0:	00000406 	br	195e4 <___vfprintf_internal_r+0x6c8>
   195d4:	843ffc04 	addi	r16,r16,-16
   195d8:	81000448 	cmpgei	r4,r16,17
   195dc:	42000204 	addi	r8,r8,8
   195e0:	20001526 	beq	r4,zero,19638 <___vfprintf_internal_r+0x71c>
   195e4:	10800044 	addi	r2,r2,1
   195e8:	18c00404 	addi	r3,r3,16
   195ec:	44400015 	stw	r17,0(r8)
   195f0:	43800115 	stw	r14,4(r8)
   195f4:	d8c01d15 	stw	r3,116(sp)
   195f8:	d8801c15 	stw	r2,112(sp)
   195fc:	11000208 	cmpgei	r4,r2,8
   19600:	203ff426 	beq	r4,zero,195d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff95d4>
   19604:	d9000417 	ldw	r4,16(sp)
   19608:	d9801b04 	addi	r6,sp,108
   1960c:	b80b883a 	mov	r5,r23
   19610:	db800615 	stw	r14,24(sp)
   19614:	00224e00 	call	224e0 <__sprint_r>
   19618:	1000af1e 	bne	r2,zero,198d8 <___vfprintf_internal_r+0x9bc>
   1961c:	843ffc04 	addi	r16,r16,-16
   19620:	81000448 	cmpgei	r4,r16,17
   19624:	d8c01d17 	ldw	r3,116(sp)
   19628:	d8801c17 	ldw	r2,112(sp)
   1962c:	da002804 	addi	r8,sp,160
   19630:	db800617 	ldw	r14,24(sp)
   19634:	203feb1e 	bne	r4,zero,195e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff95e4>
   19638:	801b883a 	mov	r13,r16
   1963c:	880f883a 	mov	r7,r17
   19640:	db000d17 	ldw	r12,52(sp)
   19644:	dac01117 	ldw	r11,68(sp)
   19648:	dc001317 	ldw	r16,76(sp)
   1964c:	dc401217 	ldw	r17,72(sp)
   19650:	10800044 	addi	r2,r2,1
   19654:	1b47883a 	add	r3,r3,r13
   19658:	d8801c15 	stw	r2,112(sp)
   1965c:	41c00015 	stw	r7,0(r8)
   19660:	43400115 	stw	r13,4(r8)
   19664:	d8c01d15 	stw	r3,116(sp)
   19668:	10800208 	cmpgei	r2,r2,8
   1966c:	1003c01e 	bne	r2,zero,1a570 <___vfprintf_internal_r+0x1654>
   19670:	d8801447 	ldb	r2,81(sp)
   19674:	42000204 	addi	r8,r8,8
   19678:	10000c26 	beq	r2,zero,196ac <___vfprintf_internal_r+0x790>
   1967c:	d8801c17 	ldw	r2,112(sp)
   19680:	d9001444 	addi	r4,sp,81
   19684:	18c00044 	addi	r3,r3,1
   19688:	10800044 	addi	r2,r2,1
   1968c:	41000015 	stw	r4,0(r8)
   19690:	01000044 	movi	r4,1
   19694:	d8801c15 	stw	r2,112(sp)
   19698:	41000115 	stw	r4,4(r8)
   1969c:	d8c01d15 	stw	r3,116(sp)
   196a0:	10800208 	cmpgei	r2,r2,8
   196a4:	1001fc1e 	bne	r2,zero,19e98 <___vfprintf_internal_r+0xf7c>
   196a8:	42000204 	addi	r8,r8,8
   196ac:	60000c26 	beq	r12,zero,196e0 <___vfprintf_internal_r+0x7c4>
   196b0:	d8801c17 	ldw	r2,112(sp)
   196b4:	d9001484 	addi	r4,sp,82
   196b8:	18c00084 	addi	r3,r3,2
   196bc:	10800044 	addi	r2,r2,1
   196c0:	41000015 	stw	r4,0(r8)
   196c4:	01000084 	movi	r4,2
   196c8:	d8801c15 	stw	r2,112(sp)
   196cc:	41000115 	stw	r4,4(r8)
   196d0:	d8c01d15 	stw	r3,116(sp)
   196d4:	10800208 	cmpgei	r2,r2,8
   196d8:	1001fb1e 	bne	r2,zero,19ec8 <___vfprintf_internal_r+0xfac>
   196dc:	42000204 	addi	r8,r8,8
   196e0:	5ac02018 	cmpnei	r11,r11,128
   196e4:	58014f26 	beq	r11,zero,19c24 <___vfprintf_internal_r+0xd08>
   196e8:	b42dc83a 	sub	r22,r22,r16
   196ec:	0580350e 	bge	zero,r22,197c4 <___vfprintf_internal_r+0x8a8>
   196f0:	02c000f4 	movhi	r11,3
   196f4:	b1000450 	cmplti	r4,r22,17
   196f8:	5acdf5c4 	addi	r11,r11,14295
   196fc:	d8801c17 	ldw	r2,112(sp)
   19700:	2000271e 	bne	r4,zero,197a0 <___vfprintf_internal_r+0x884>
   19704:	a009883a 	mov	r4,r20
   19708:	dc400d15 	stw	r17,52(sp)
   1970c:	8029883a 	mov	r20,r16
   19710:	02800404 	movi	r10,16
   19714:	b021883a 	mov	r16,r22
   19718:	5823883a 	mov	r17,r11
   1971c:	202d883a 	mov	r22,r4
   19720:	00000406 	br	19734 <___vfprintf_internal_r+0x818>
   19724:	843ffc04 	addi	r16,r16,-16
   19728:	81000448 	cmpgei	r4,r16,17
   1972c:	42000204 	addi	r8,r8,8
   19730:	20001526 	beq	r4,zero,19788 <___vfprintf_internal_r+0x86c>
   19734:	10800044 	addi	r2,r2,1
   19738:	18c00404 	addi	r3,r3,16
   1973c:	44400015 	stw	r17,0(r8)
   19740:	42800115 	stw	r10,4(r8)
   19744:	d8c01d15 	stw	r3,116(sp)
   19748:	d8801c15 	stw	r2,112(sp)
   1974c:	11000208 	cmpgei	r4,r2,8
   19750:	203ff426 	beq	r4,zero,19724 <__alt_mem_mcu_subsystem_ram_0+0x77ff9724>
   19754:	d9000417 	ldw	r4,16(sp)
   19758:	d9801b04 	addi	r6,sp,108
   1975c:	b80b883a 	mov	r5,r23
   19760:	da800615 	stw	r10,24(sp)
   19764:	00224e00 	call	224e0 <__sprint_r>
   19768:	10005b1e 	bne	r2,zero,198d8 <___vfprintf_internal_r+0x9bc>
   1976c:	843ffc04 	addi	r16,r16,-16
   19770:	81000448 	cmpgei	r4,r16,17
   19774:	d8c01d17 	ldw	r3,116(sp)
   19778:	d8801c17 	ldw	r2,112(sp)
   1977c:	da002804 	addi	r8,sp,160
   19780:	da800617 	ldw	r10,24(sp)
   19784:	203feb1e 	bne	r4,zero,19734 <__alt_mem_mcu_subsystem_ram_0+0x77ff9734>
   19788:	8817883a 	mov	r11,r17
   1978c:	dc400d17 	ldw	r17,52(sp)
   19790:	b009883a 	mov	r4,r22
   19794:	802d883a 	mov	r22,r16
   19798:	a021883a 	mov	r16,r20
   1979c:	2029883a 	mov	r20,r4
   197a0:	10800044 	addi	r2,r2,1
   197a4:	1d87883a 	add	r3,r3,r22
   197a8:	d8801c15 	stw	r2,112(sp)
   197ac:	42c00015 	stw	r11,0(r8)
   197b0:	45800115 	stw	r22,4(r8)
   197b4:	d8c01d15 	stw	r3,116(sp)
   197b8:	10800208 	cmpgei	r2,r2,8
   197bc:	1001da1e 	bne	r2,zero,19f28 <___vfprintf_internal_r+0x100c>
   197c0:	42000204 	addi	r8,r8,8
   197c4:	a080400c 	andi	r2,r20,256
   197c8:	1000f61e 	bne	r2,zero,19ba4 <___vfprintf_internal_r+0xc88>
   197cc:	d8801c17 	ldw	r2,112(sp)
   197d0:	1c07883a 	add	r3,r3,r16
   197d4:	44c00015 	stw	r19,0(r8)
   197d8:	10800044 	addi	r2,r2,1
   197dc:	44000115 	stw	r16,4(r8)
   197e0:	d8801c15 	stw	r2,112(sp)
   197e4:	d8c01d15 	stw	r3,116(sp)
   197e8:	10800208 	cmpgei	r2,r2,8
   197ec:	10015a1e 	bne	r2,zero,19d58 <___vfprintf_internal_r+0xe3c>
   197f0:	42000204 	addi	r8,r8,8
   197f4:	a500010c 	andi	r20,r20,4
   197f8:	a0002b26 	beq	r20,zero,198a8 <___vfprintf_internal_r+0x98c>
   197fc:	9561c83a 	sub	r16,r18,r21
   19800:	0400290e 	bge	zero,r16,198a8 <___vfprintf_internal_r+0x98c>
   19804:	01c000f4 	movhi	r7,3
   19808:	81000450 	cmplti	r4,r16,17
   1980c:	39cdf9c4 	addi	r7,r7,14311
   19810:	d8801c17 	ldw	r2,112(sp)
   19814:	20001c1e 	bne	r4,zero,19888 <___vfprintf_internal_r+0x96c>
   19818:	04400404 	movi	r17,16
   1981c:	dcc00417 	ldw	r19,16(sp)
   19820:	3829883a 	mov	r20,r7
   19824:	00000406 	br	19838 <___vfprintf_internal_r+0x91c>
   19828:	843ffc04 	addi	r16,r16,-16
   1982c:	81000448 	cmpgei	r4,r16,17
   19830:	42000204 	addi	r8,r8,8
   19834:	20001326 	beq	r4,zero,19884 <___vfprintf_internal_r+0x968>
   19838:	10800044 	addi	r2,r2,1
   1983c:	18c00404 	addi	r3,r3,16
   19840:	45000015 	stw	r20,0(r8)
   19844:	44400115 	stw	r17,4(r8)
   19848:	d8c01d15 	stw	r3,116(sp)
   1984c:	d8801c15 	stw	r2,112(sp)
   19850:	11000208 	cmpgei	r4,r2,8
   19854:	203ff426 	beq	r4,zero,19828 <__alt_mem_mcu_subsystem_ram_0+0x77ff9828>
   19858:	d9801b04 	addi	r6,sp,108
   1985c:	b80b883a 	mov	r5,r23
   19860:	9809883a 	mov	r4,r19
   19864:	00224e00 	call	224e0 <__sprint_r>
   19868:	10001b1e 	bne	r2,zero,198d8 <___vfprintf_internal_r+0x9bc>
   1986c:	843ffc04 	addi	r16,r16,-16
   19870:	81000448 	cmpgei	r4,r16,17
   19874:	d8c01d17 	ldw	r3,116(sp)
   19878:	d8801c17 	ldw	r2,112(sp)
   1987c:	da002804 	addi	r8,sp,160
   19880:	203fed1e 	bne	r4,zero,19838 <__alt_mem_mcu_subsystem_ram_0+0x77ff9838>
   19884:	a00f883a 	mov	r7,r20
   19888:	10800044 	addi	r2,r2,1
   1988c:	1c07883a 	add	r3,r3,r16
   19890:	d8801c15 	stw	r2,112(sp)
   19894:	41c00015 	stw	r7,0(r8)
   19898:	44000115 	stw	r16,4(r8)
   1989c:	d8c01d15 	stw	r3,116(sp)
   198a0:	10800210 	cmplti	r2,r2,8
   198a4:	10022726 	beq	r2,zero,1a144 <___vfprintf_internal_r+0x1228>
   198a8:	9540010e 	bge	r18,r21,198b0 <___vfprintf_internal_r+0x994>
   198ac:	a825883a 	mov	r18,r21
   198b0:	d8800517 	ldw	r2,20(sp)
   198b4:	1485883a 	add	r2,r2,r18
   198b8:	d8800515 	stw	r2,20(sp)
   198bc:	18010d1e 	bne	r3,zero,19cf4 <___vfprintf_internal_r+0xdd8>
   198c0:	e0800007 	ldb	r2,0(fp)
   198c4:	d8001c15 	stw	zero,112(sp)
   198c8:	da002804 	addi	r8,sp,160
   198cc:	103dca1e 	bne	r2,zero,18ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8ff8>
   198d0:	d8801d17 	ldw	r2,116(sp)
   198d4:	1003f81e 	bne	r2,zero,1a8b8 <___vfprintf_internal_r+0x199c>
   198d8:	b880030b 	ldhu	r2,12(r23)
   198dc:	1080100c 	andi	r2,r2,64
   198e0:	1004a61e 	bne	r2,zero,1ab7c <___vfprintf_internal_r+0x1c60>
   198e4:	d8800517 	ldw	r2,20(sp)
   198e8:	dfc04117 	ldw	ra,260(sp)
   198ec:	df004017 	ldw	fp,256(sp)
   198f0:	ddc03f17 	ldw	r23,252(sp)
   198f4:	dd803e17 	ldw	r22,248(sp)
   198f8:	dd403d17 	ldw	r21,244(sp)
   198fc:	dd003c17 	ldw	r20,240(sp)
   19900:	dcc03b17 	ldw	r19,236(sp)
   19904:	dc803a17 	ldw	r18,232(sp)
   19908:	dc403917 	ldw	r17,228(sp)
   1990c:	dc003817 	ldw	r16,224(sp)
   19910:	dec04204 	addi	sp,sp,264
   19914:	f800283a 	ret
   19918:	21003fcc 	andi	r4,r4,255
   1991c:	2005681e 	bne	r4,zero,1aec0 <___vfprintf_internal_r+0x1fa4>
   19920:	008000f4 	movhi	r2,3
   19924:	108dcc04 	addi	r2,r2,14128
   19928:	d8800e15 	stw	r2,56(sp)
   1992c:	5880080c 	andi	r2,r11,32
   19930:	103ea91e 	bne	r2,zero,193d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff93d8>
   19934:	d8c00717 	ldw	r3,28(sp)
   19938:	5880040c 	andi	r2,r11,16
   1993c:	1c000017 	ldw	r16,0(r3)
   19940:	18c00104 	addi	r3,r3,4
   19944:	d8c00715 	stw	r3,28(sp)
   19948:	1002071e 	bne	r2,zero,1a168 <___vfprintf_internal_r+0x124c>
   1994c:	5880100c 	andi	r2,r11,64
   19950:	10020526 	beq	r2,zero,1a168 <___vfprintf_internal_r+0x124c>
   19954:	843fffcc 	andi	r16,r16,65535
   19958:	002b883a 	mov	r21,zero
   1995c:	003ea306 	br	193ec <__alt_mem_mcu_subsystem_ram_0+0x77ff93ec>
   19960:	01000044 	movi	r4,1
   19964:	01400ac4 	movi	r5,43
   19968:	e4400007 	ldb	r17,0(fp)
   1996c:	003dc506 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19970:	d8800717 	ldw	r2,28(sp)
   19974:	e4400003 	ldbu	r17,0(fp)
   19978:	14800017 	ldw	r18,0(r2)
   1997c:	10800104 	addi	r2,r2,4
   19980:	90028116 	blt	r18,zero,1a388 <___vfprintf_internal_r+0x146c>
   19984:	d8800715 	stw	r2,28(sp)
   19988:	8c403fcc 	andi	r17,r17,255
   1998c:	8c40201c 	xori	r17,r17,128
   19990:	8c7fe004 	addi	r17,r17,-128
   19994:	003dbb06 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19998:	5ac00054 	ori	r11,r11,1
   1999c:	e4400007 	ldb	r17,0(fp)
   199a0:	003db806 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   199a4:	28803fcc 	andi	r2,r5,255
   199a8:	1080201c 	xori	r2,r2,128
   199ac:	10bfe004 	addi	r2,r2,-128
   199b0:	e4400003 	ldbu	r17,0(fp)
   199b4:	103ff41e 	bne	r2,zero,19988 <__alt_mem_mcu_subsystem_ram_0+0x77ff9988>
   199b8:	8c403fcc 	andi	r17,r17,255
   199bc:	8c40201c 	xori	r17,r17,128
   199c0:	01000044 	movi	r4,1
   199c4:	01400804 	movi	r5,32
   199c8:	8c7fe004 	addi	r17,r17,-128
   199cc:	003dad06 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   199d0:	e4400007 	ldb	r17,0(fp)
   199d4:	e0c00044 	addi	r3,fp,1
   199d8:	88800aa0 	cmpeqi	r2,r17,42
   199dc:	10051c1e 	bne	r2,zero,1ae50 <___vfprintf_internal_r+0x1f34>
   199e0:	88bff404 	addi	r2,r17,-48
   199e4:	118002b0 	cmpltui	r6,r2,10
   199e8:	1839883a 	mov	fp,r3
   199ec:	002d883a 	mov	r22,zero
   199f0:	303da526 	beq	r6,zero,19088 <__alt_mem_mcu_subsystem_ram_0+0x77ff9088>
   199f4:	e7000044 	addi	fp,fp,1
   199f8:	b58002a4 	muli	r22,r22,10
   199fc:	e47fffc7 	ldb	r17,-1(fp)
   19a00:	b0ad883a 	add	r22,r22,r2
   19a04:	88bff404 	addi	r2,r17,-48
   19a08:	10c002b0 	cmpltui	r3,r2,10
   19a0c:	183ff91e 	bne	r3,zero,199f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff99f4>
   19a10:	003d9d06 	br	19088 <__alt_mem_mcu_subsystem_ram_0+0x77ff9088>
   19a14:	e4400003 	ldbu	r17,0(fp)
   19a18:	8c403fcc 	andi	r17,r17,255
   19a1c:	8c40201c 	xori	r17,r17,128
   19a20:	5ac00114 	ori	r11,r11,4
   19a24:	8c7fe004 	addi	r17,r17,-128
   19a28:	003d9606 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19a2c:	5ac02014 	ori	r11,r11,128
   19a30:	e4400007 	ldb	r17,0(fp)
   19a34:	003d9306 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19a38:	21003fcc 	andi	r4,r4,255
   19a3c:	2005161e 	bne	r4,zero,1ae98 <___vfprintf_internal_r+0x1f7c>
   19a40:	d8c00717 	ldw	r3,28(sp)
   19a44:	00a00034 	movhi	r2,32768
   19a48:	10bfffc4 	addi	r2,r2,-1
   19a4c:	1d000117 	ldw	r20,4(r3)
   19a50:	1cc00017 	ldw	r19,0(r3)
   19a54:	01dffc34 	movhi	r7,32752
   19a58:	a0a0703a 	and	r16,r20,r2
   19a5c:	01bfffc4 	movi	r6,-1
   19a60:	18800204 	addi	r2,r3,8
   19a64:	39ffffc4 	addi	r7,r7,-1
   19a68:	9809883a 	mov	r4,r19
   19a6c:	800b883a 	mov	r5,r16
   19a70:	da000815 	stw	r8,32(sp)
   19a74:	dac00615 	stw	r11,24(sp)
   19a78:	dd000b15 	stw	r20,44(sp)
   19a7c:	dcc00a15 	stw	r19,40(sp)
   19a80:	d8800715 	stw	r2,28(sp)
   19a84:	0024df80 	call	24df8 <__unorddf2>
   19a88:	dac00617 	ldw	r11,24(sp)
   19a8c:	da000817 	ldw	r8,32(sp)
   19a90:	1001c41e 	bne	r2,zero,1a1a4 <___vfprintf_internal_r+0x1288>
   19a94:	01dffc34 	movhi	r7,32752
   19a98:	01bfffc4 	movi	r6,-1
   19a9c:	39ffffc4 	addi	r7,r7,-1
   19aa0:	9809883a 	mov	r4,r19
   19aa4:	800b883a 	mov	r5,r16
   19aa8:	0024d180 	call	24d18 <__ledf2>
   19aac:	dac00617 	ldw	r11,24(sp)
   19ab0:	da000817 	ldw	r8,32(sp)
   19ab4:	0081bb0e 	bge	zero,r2,1a1a4 <___vfprintf_internal_r+0x1288>
   19ab8:	000d883a 	mov	r6,zero
   19abc:	000f883a 	mov	r7,zero
   19ac0:	9809883a 	mov	r4,r19
   19ac4:	a00b883a 	mov	r5,r20
   19ac8:	0024d180 	call	24d18 <__ledf2>
   19acc:	dac00617 	ldw	r11,24(sp)
   19ad0:	da000817 	ldw	r8,32(sp)
   19ad4:	1003db16 	blt	r2,zero,1aa44 <___vfprintf_internal_r+0x1b28>
   19ad8:	db001443 	ldbu	r12,81(sp)
   19adc:	88801208 	cmpgei	r2,r17,72
   19ae0:	1003431e 	bne	r2,zero,1a7f0 <___vfprintf_internal_r+0x18d4>
   19ae4:	04c000f4 	movhi	r19,3
   19ae8:	9ccdc804 	addi	r19,r19,14112
   19aec:	053fdfc4 	movi	r20,-129
   19af0:	5d28703a 	and	r20,r11,r20
   19af4:	054000c4 	movi	r21,3
   19af8:	040000c4 	movi	r16,3
   19afc:	002d883a 	mov	r22,zero
   19b00:	d8000815 	stw	zero,32(sp)
   19b04:	003e1506 	br	1935c <__alt_mem_mcu_subsystem_ram_0+0x77ff935c>
   19b08:	21003fcc 	andi	r4,r4,255
   19b0c:	2004ee1e 	bne	r4,zero,1aec8 <___vfprintf_internal_r+0x1fac>
   19b10:	5ac00414 	ori	r11,r11,16
   19b14:	5880080c 	andi	r2,r11,32
   19b18:	103e811e 	bne	r2,zero,19520 <__alt_mem_mcu_subsystem_ram_0+0x77ff9520>
   19b1c:	d8c00717 	ldw	r3,28(sp)
   19b20:	5880040c 	andi	r2,r11,16
   19b24:	1c000017 	ldw	r16,0(r3)
   19b28:	18c00104 	addi	r3,r3,4
   19b2c:	d8c00715 	stw	r3,28(sp)
   19b30:	10018f1e 	bne	r2,zero,1a170 <___vfprintf_internal_r+0x1254>
   19b34:	5880100c 	andi	r2,r11,64
   19b38:	10018d26 	beq	r2,zero,1a170 <___vfprintf_internal_r+0x1254>
   19b3c:	843fffcc 	andi	r16,r16,65535
   19b40:	8420001c 	xori	r16,r16,32768
   19b44:	84200004 	addi	r16,r16,-32768
   19b48:	802bd7fa 	srai	r21,r16,31
   19b4c:	a83e7a0e 	bge	r21,zero,19538 <__alt_mem_mcu_subsystem_ram_0+0x77ff9538>
   19b50:	0421c83a 	sub	r16,zero,r16
   19b54:	8004c03a 	cmpne	r2,r16,zero
   19b58:	056bc83a 	sub	r21,zero,r21
   19b5c:	a8abc83a 	sub	r21,r21,r2
   19b60:	00800b44 	movi	r2,45
   19b64:	d8801445 	stb	r2,81(sp)
   19b68:	b0bfffd8 	cmpnei	r2,r22,-1
   19b6c:	03000b44 	movi	r12,45
   19b70:	103e741e 	bne	r2,zero,19544 <__alt_mem_mcu_subsystem_ram_0+0x77ff9544>
   19b74:	5829883a 	mov	r20,r11
   19b78:	a802241e 	bne	r21,zero,1a40c <___vfprintf_internal_r+0x14f0>
   19b7c:	808002a8 	cmpgeui	r2,r16,10
   19b80:	1002221e 	bne	r2,zero,1a40c <___vfprintf_internal_r+0x14f0>
   19b84:	84000c04 	addi	r16,r16,48
   19b88:	dc0027c5 	stb	r16,159(sp)
   19b8c:	dcc027c4 	addi	r19,sp,159
   19b90:	04000044 	movi	r16,1
   19b94:	003ded06 	br	1934c <__alt_mem_mcu_subsystem_ram_0+0x77ff934c>
   19b98:	5ac00214 	ori	r11,r11,8
   19b9c:	e4400007 	ldb	r17,0(fp)
   19ba0:	003d3806 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   19ba4:	8c401990 	cmplti	r17,r17,102
   19ba8:	8800731e 	bne	r17,zero,19d78 <___vfprintf_internal_r+0xe5c>
   19bac:	d9000a17 	ldw	r4,40(sp)
   19bb0:	d9400b17 	ldw	r5,44(sp)
   19bb4:	000d883a 	mov	r6,zero
   19bb8:	000f883a 	mov	r7,zero
   19bbc:	da000d15 	stw	r8,52(sp)
   19bc0:	d8c00615 	stw	r3,24(sp)
   19bc4:	0024c980 	call	24c98 <__eqdf2>
   19bc8:	d8c00617 	ldw	r3,24(sp)
   19bcc:	da000d17 	ldw	r8,52(sp)
   19bd0:	1000dd1e 	bne	r2,zero,19f48 <___vfprintf_internal_r+0x102c>
   19bd4:	d8801c17 	ldw	r2,112(sp)
   19bd8:	010000f4 	movhi	r4,3
   19bdc:	210dd804 	addi	r4,r4,14176
   19be0:	10800044 	addi	r2,r2,1
   19be4:	18c00044 	addi	r3,r3,1
   19be8:	41000015 	stw	r4,0(r8)
   19bec:	01000044 	movi	r4,1
   19bf0:	d8801c15 	stw	r2,112(sp)
   19bf4:	41000115 	stw	r4,4(r8)
   19bf8:	d8c01d15 	stw	r3,116(sp)
   19bfc:	10800208 	cmpgei	r2,r2,8
   19c00:	1001da1e 	bne	r2,zero,1a36c <___vfprintf_internal_r+0x1450>
   19c04:	42000204 	addi	r8,r8,8
   19c08:	d8801517 	ldw	r2,84(sp)
   19c0c:	d8c00917 	ldw	r3,36(sp)
   19c10:	10c21d16 	blt	r2,r3,1a488 <___vfprintf_internal_r+0x156c>
   19c14:	a080004c 	andi	r2,r20,1
   19c18:	10021b1e 	bne	r2,zero,1a488 <___vfprintf_internal_r+0x156c>
   19c1c:	d8c01d17 	ldw	r3,116(sp)
   19c20:	003ef406 	br	197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   19c24:	954fc83a 	sub	r7,r18,r21
   19c28:	01feaf0e 	bge	zero,r7,196e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff96e8>
   19c2c:	02c000f4 	movhi	r11,3
   19c30:	39000450 	cmplti	r4,r7,17
   19c34:	5acdf5c4 	addi	r11,r11,14295
   19c38:	d8801c17 	ldw	r2,112(sp)
   19c3c:	2000231e 	bne	r4,zero,19ccc <___vfprintf_internal_r+0xdb0>
   19c40:	dc400d15 	stw	r17,52(sp)
   19c44:	dc001115 	stw	r16,68(sp)
   19c48:	03000404 	movi	r12,16
   19c4c:	3821883a 	mov	r16,r7
   19c50:	5823883a 	mov	r17,r11
   19c54:	00000406 	br	19c68 <___vfprintf_internal_r+0xd4c>
   19c58:	843ffc04 	addi	r16,r16,-16
   19c5c:	81000448 	cmpgei	r4,r16,17
   19c60:	42000204 	addi	r8,r8,8
   19c64:	20001526 	beq	r4,zero,19cbc <___vfprintf_internal_r+0xda0>
   19c68:	10800044 	addi	r2,r2,1
   19c6c:	18c00404 	addi	r3,r3,16
   19c70:	44400015 	stw	r17,0(r8)
   19c74:	43000115 	stw	r12,4(r8)
   19c78:	d8c01d15 	stw	r3,116(sp)
   19c7c:	d8801c15 	stw	r2,112(sp)
   19c80:	11000208 	cmpgei	r4,r2,8
   19c84:	203ff426 	beq	r4,zero,19c58 <__alt_mem_mcu_subsystem_ram_0+0x77ff9c58>
   19c88:	d9000417 	ldw	r4,16(sp)
   19c8c:	d9801b04 	addi	r6,sp,108
   19c90:	b80b883a 	mov	r5,r23
   19c94:	db000615 	stw	r12,24(sp)
   19c98:	00224e00 	call	224e0 <__sprint_r>
   19c9c:	103f0e1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19ca0:	843ffc04 	addi	r16,r16,-16
   19ca4:	81000448 	cmpgei	r4,r16,17
   19ca8:	d8c01d17 	ldw	r3,116(sp)
   19cac:	d8801c17 	ldw	r2,112(sp)
   19cb0:	da002804 	addi	r8,sp,160
   19cb4:	db000617 	ldw	r12,24(sp)
   19cb8:	203feb1e 	bne	r4,zero,19c68 <__alt_mem_mcu_subsystem_ram_0+0x77ff9c68>
   19cbc:	800f883a 	mov	r7,r16
   19cc0:	8817883a 	mov	r11,r17
   19cc4:	dc001117 	ldw	r16,68(sp)
   19cc8:	dc400d17 	ldw	r17,52(sp)
   19ccc:	10800044 	addi	r2,r2,1
   19cd0:	19c7883a 	add	r3,r3,r7
   19cd4:	d8801c15 	stw	r2,112(sp)
   19cd8:	42c00015 	stw	r11,0(r8)
   19cdc:	41c00115 	stw	r7,4(r8)
   19ce0:	d8c01d15 	stw	r3,116(sp)
   19ce4:	10800208 	cmpgei	r2,r2,8
   19ce8:	1002a01e 	bne	r2,zero,1a76c <___vfprintf_internal_r+0x1850>
   19cec:	42000204 	addi	r8,r8,8
   19cf0:	003e7d06 	br	196e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff96e8>
   19cf4:	d9000417 	ldw	r4,16(sp)
   19cf8:	d9801b04 	addi	r6,sp,108
   19cfc:	b80b883a 	mov	r5,r23
   19d00:	00224e00 	call	224e0 <__sprint_r>
   19d04:	103eee26 	beq	r2,zero,198c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff98c0>
   19d08:	003ef306 	br	198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19d0c:	d9000417 	ldw	r4,16(sp)
   19d10:	d9801b04 	addi	r6,sp,108
   19d14:	b80b883a 	mov	r5,r23
   19d18:	00224e00 	call	224e0 <__sprint_r>
   19d1c:	103eee1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19d20:	d9001517 	ldw	r4,84(sp)
   19d24:	d8c01d17 	ldw	r3,116(sp)
   19d28:	d8801c17 	ldw	r2,112(sp)
   19d2c:	da002804 	addi	r8,sp,160
   19d30:	2003a916 	blt	r4,zero,1abd8 <___vfprintf_internal_r+0x1cbc>
   19d34:	d9000917 	ldw	r4,36(sp)
   19d38:	10800044 	addi	r2,r2,1
   19d3c:	d8801c15 	stw	r2,112(sp)
   19d40:	20c7883a 	add	r3,r4,r3
   19d44:	44c00015 	stw	r19,0(r8)
   19d48:	41000115 	stw	r4,4(r8)
   19d4c:	d8c01d15 	stw	r3,116(sp)
   19d50:	10800208 	cmpgei	r2,r2,8
   19d54:	103ea626 	beq	r2,zero,197f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f0>
   19d58:	d9000417 	ldw	r4,16(sp)
   19d5c:	d9801b04 	addi	r6,sp,108
   19d60:	b80b883a 	mov	r5,r23
   19d64:	00224e00 	call	224e0 <__sprint_r>
   19d68:	103edb1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19d6c:	d8c01d17 	ldw	r3,116(sp)
   19d70:	da002804 	addi	r8,sp,160
   19d74:	003e9f06 	br	197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   19d78:	d8800917 	ldw	r2,36(sp)
   19d7c:	da801c17 	ldw	r10,112(sp)
   19d80:	18c00044 	addi	r3,r3,1
   19d84:	10800088 	cmpgei	r2,r2,2
   19d88:	54000044 	addi	r16,r10,1
   19d8c:	44400204 	addi	r17,r8,8
   19d90:	1001eb26 	beq	r2,zero,1a540 <___vfprintf_internal_r+0x1624>
   19d94:	00800044 	movi	r2,1
   19d98:	40800115 	stw	r2,4(r8)
   19d9c:	44c00015 	stw	r19,0(r8)
   19da0:	d8c01d15 	stw	r3,116(sp)
   19da4:	dc001c15 	stw	r16,112(sp)
   19da8:	80800210 	cmplti	r2,r16,8
   19dac:	10025526 	beq	r2,zero,1a704 <___vfprintf_internal_r+0x17e8>
   19db0:	d8800c17 	ldw	r2,48(sp)
   19db4:	d9000f17 	ldw	r4,60(sp)
   19db8:	84000044 	addi	r16,r16,1
   19dbc:	1887883a 	add	r3,r3,r2
   19dc0:	88800115 	stw	r2,4(r17)
   19dc4:	89000015 	stw	r4,0(r17)
   19dc8:	d8c01d15 	stw	r3,116(sp)
   19dcc:	dc001c15 	stw	r16,112(sp)
   19dd0:	80800208 	cmpgei	r2,r16,8
   19dd4:	1002541e 	bne	r2,zero,1a728 <___vfprintf_internal_r+0x180c>
   19dd8:	8c400204 	addi	r17,r17,8
   19ddc:	d8800917 	ldw	r2,36(sp)
   19de0:	d9000a17 	ldw	r4,40(sp)
   19de4:	d9400b17 	ldw	r5,44(sp)
   19de8:	133fffc4 	addi	r12,r2,-1
   19dec:	8a000204 	addi	r8,r17,8
   19df0:	85800044 	addi	r22,r16,1
   19df4:	000d883a 	mov	r6,zero
   19df8:	000f883a 	mov	r7,zero
   19dfc:	d8c01115 	stw	r3,68(sp)
   19e00:	db000815 	stw	r12,32(sp)
   19e04:	da000615 	stw	r8,24(sp)
   19e08:	dd800d15 	stw	r22,52(sp)
   19e0c:	0024c980 	call	24c98 <__eqdf2>
   19e10:	da000617 	ldw	r8,24(sp)
   19e14:	db000817 	ldw	r12,32(sp)
   19e18:	db400d17 	ldw	r13,52(sp)
   19e1c:	d8c01117 	ldw	r3,68(sp)
   19e20:	10008226 	beq	r2,zero,1a02c <___vfprintf_internal_r+0x1110>
   19e24:	9cc00044 	addi	r19,r19,1
   19e28:	1b07883a 	add	r3,r3,r12
   19e2c:	8cc00015 	stw	r19,0(r17)
   19e30:	8b000115 	stw	r12,4(r17)
   19e34:	d8c01d15 	stw	r3,116(sp)
   19e38:	dd801c15 	stw	r22,112(sp)
   19e3c:	b2800208 	cmpgei	r10,r22,8
   19e40:	5001541e 	bne	r10,zero,1a394 <___vfprintf_internal_r+0x1478>
   19e44:	88800404 	addi	r2,r17,16
   19e48:	85800084 	addi	r22,r16,2
   19e4c:	4023883a 	mov	r17,r8
   19e50:	1011883a 	mov	r8,r2
   19e54:	d9001017 	ldw	r4,64(sp)
   19e58:	d8801744 	addi	r2,sp,93
   19e5c:	88800015 	stw	r2,0(r17)
   19e60:	20c7883a 	add	r3,r4,r3
   19e64:	89000115 	stw	r4,4(r17)
   19e68:	d8c01d15 	stw	r3,116(sp)
   19e6c:	dd801c15 	stw	r22,112(sp)
   19e70:	b2800210 	cmplti	r10,r22,8
   19e74:	503e5f1e 	bne	r10,zero,197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   19e78:	003fb706 	br	19d58 <__alt_mem_mcu_subsystem_ram_0+0x77ff9d58>
   19e7c:	d9000417 	ldw	r4,16(sp)
   19e80:	d9801b04 	addi	r6,sp,108
   19e84:	b80b883a 	mov	r5,r23
   19e88:	00224e00 	call	224e0 <__sprint_r>
   19e8c:	103e921e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19e90:	da002804 	addi	r8,sp,160
   19e94:	003c6e06 	br	19050 <__alt_mem_mcu_subsystem_ram_0+0x77ff9050>
   19e98:	d9000417 	ldw	r4,16(sp)
   19e9c:	d9801b04 	addi	r6,sp,108
   19ea0:	b80b883a 	mov	r5,r23
   19ea4:	dac00d15 	stw	r11,52(sp)
   19ea8:	db000615 	stw	r12,24(sp)
   19eac:	00224e00 	call	224e0 <__sprint_r>
   19eb0:	103e891e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19eb4:	d8c01d17 	ldw	r3,116(sp)
   19eb8:	da002804 	addi	r8,sp,160
   19ebc:	dac00d17 	ldw	r11,52(sp)
   19ec0:	db000617 	ldw	r12,24(sp)
   19ec4:	003df906 	br	196ac <__alt_mem_mcu_subsystem_ram_0+0x77ff96ac>
   19ec8:	d9000417 	ldw	r4,16(sp)
   19ecc:	d9801b04 	addi	r6,sp,108
   19ed0:	b80b883a 	mov	r5,r23
   19ed4:	dac00615 	stw	r11,24(sp)
   19ed8:	00224e00 	call	224e0 <__sprint_r>
   19edc:	103e7e1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19ee0:	d8c01d17 	ldw	r3,116(sp)
   19ee4:	da002804 	addi	r8,sp,160
   19ee8:	dac00617 	ldw	r11,24(sp)
   19eec:	003dfc06 	br	196e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff96e0>
   19ef0:	d9000e17 	ldw	r4,56(sp)
   19ef4:	dcc02804 	addi	r19,sp,160
   19ef8:	808003cc 	andi	r2,r16,15
   19efc:	a806973a 	slli	r3,r21,28
   19f00:	2085883a 	add	r2,r4,r2
   19f04:	8020d13a 	srli	r16,r16,4
   19f08:	10800003 	ldbu	r2,0(r2)
   19f0c:	a82ad13a 	srli	r21,r21,4
   19f10:	9cffffc4 	addi	r19,r19,-1
   19f14:	1c20b03a 	or	r16,r3,r16
   19f18:	98800005 	stb	r2,0(r19)
   19f1c:	8544b03a 	or	r2,r16,r21
   19f20:	103ff51e 	bne	r2,zero,19ef8 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ef8>
   19f24:	003d0706 	br	19344 <__alt_mem_mcu_subsystem_ram_0+0x77ff9344>
   19f28:	d9000417 	ldw	r4,16(sp)
   19f2c:	d9801b04 	addi	r6,sp,108
   19f30:	b80b883a 	mov	r5,r23
   19f34:	00224e00 	call	224e0 <__sprint_r>
   19f38:	103e671e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   19f3c:	d8c01d17 	ldw	r3,116(sp)
   19f40:	da002804 	addi	r8,sp,160
   19f44:	003e1f06 	br	197c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97c4>
   19f48:	d9001517 	ldw	r4,84(sp)
   19f4c:	0100ea0e 	bge	zero,r4,1a2f8 <___vfprintf_internal_r+0x13dc>
   19f50:	d8800817 	ldw	r2,32(sp)
   19f54:	d9000917 	ldw	r4,36(sp)
   19f58:	1021883a 	mov	r16,r2
   19f5c:	2080010e 	bge	r4,r2,19f64 <___vfprintf_internal_r+0x1048>
   19f60:	2021883a 	mov	r16,r4
   19f64:	04000a0e 	bge	zero,r16,19f90 <___vfprintf_internal_r+0x1074>
   19f68:	d8801c17 	ldw	r2,112(sp)
   19f6c:	1c07883a 	add	r3,r3,r16
   19f70:	44c00015 	stw	r19,0(r8)
   19f74:	10800044 	addi	r2,r2,1
   19f78:	d8801c15 	stw	r2,112(sp)
   19f7c:	44000115 	stw	r16,4(r8)
   19f80:	d8c01d15 	stw	r3,116(sp)
   19f84:	10800208 	cmpgei	r2,r2,8
   19f88:	1002a61e 	bne	r2,zero,1aa24 <___vfprintf_internal_r+0x1b08>
   19f8c:	42000204 	addi	r8,r8,8
   19f90:	8000010e 	bge	r16,zero,19f98 <___vfprintf_internal_r+0x107c>
   19f94:	0021883a 	mov	r16,zero
   19f98:	d8800817 	ldw	r2,32(sp)
   19f9c:	1421c83a 	sub	r16,r2,r16
   19fa0:	0401910e 	bge	zero,r16,1a5e8 <___vfprintf_internal_r+0x16cc>
   19fa4:	02c000f4 	movhi	r11,3
   19fa8:	81000450 	cmplti	r4,r16,17
   19fac:	5acdf5c4 	addi	r11,r11,14295
   19fb0:	d8801c17 	ldw	r2,112(sp)
   19fb4:	20017d1e 	bne	r4,zero,1a5ac <___vfprintf_internal_r+0x1690>
   19fb8:	dc800615 	stw	r18,24(sp)
   19fbc:	04400404 	movi	r17,16
   19fc0:	dd800417 	ldw	r22,16(sp)
   19fc4:	5825883a 	mov	r18,r11
   19fc8:	00000406 	br	19fdc <___vfprintf_internal_r+0x10c0>
   19fcc:	42000204 	addi	r8,r8,8
   19fd0:	843ffc04 	addi	r16,r16,-16
   19fd4:	81000448 	cmpgei	r4,r16,17
   19fd8:	20017226 	beq	r4,zero,1a5a4 <___vfprintf_internal_r+0x1688>
   19fdc:	10800044 	addi	r2,r2,1
   19fe0:	18c00404 	addi	r3,r3,16
   19fe4:	44800015 	stw	r18,0(r8)
   19fe8:	44400115 	stw	r17,4(r8)
   19fec:	d8c01d15 	stw	r3,116(sp)
   19ff0:	d8801c15 	stw	r2,112(sp)
   19ff4:	11000208 	cmpgei	r4,r2,8
   19ff8:	203ff426 	beq	r4,zero,19fcc <__alt_mem_mcu_subsystem_ram_0+0x77ff9fcc>
   19ffc:	d9801b04 	addi	r6,sp,108
   1a000:	b80b883a 	mov	r5,r23
   1a004:	b009883a 	mov	r4,r22
   1a008:	00224e00 	call	224e0 <__sprint_r>
   1a00c:	103e321e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a010:	d8c01d17 	ldw	r3,116(sp)
   1a014:	d8801c17 	ldw	r2,112(sp)
   1a018:	da002804 	addi	r8,sp,160
   1a01c:	003fec06 	br	19fd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9fd0>
   1a020:	0021883a 	mov	r16,zero
   1a024:	dcc02804 	addi	r19,sp,160
   1a028:	003cc806 	br	1934c <__alt_mem_mcu_subsystem_ram_0+0x77ff934c>
   1a02c:	033f890e 	bge	zero,r12,19e54 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e54>
   1a030:	60800450 	cmplti	r2,r12,17
   1a034:	02c000f4 	movhi	r11,3
   1a038:	10036c1e 	bne	r2,zero,1adec <___vfprintf_internal_r+0x1ed0>
   1a03c:	5acdf5c4 	addi	r11,r11,14295
   1a040:	dc800615 	stw	r18,24(sp)
   1a044:	dd000815 	stw	r20,32(sp)
   1a048:	04c00404 	movi	r19,16
   1a04c:	6025883a 	mov	r18,r12
   1a050:	dd800417 	ldw	r22,16(sp)
   1a054:	6821883a 	mov	r16,r13
   1a058:	5829883a 	mov	r20,r11
   1a05c:	00000506 	br	1a074 <___vfprintf_internal_r+0x1158>
   1a060:	8c400204 	addi	r17,r17,8
   1a064:	94bffc04 	addi	r18,r18,-16
   1a068:	90800448 	cmpgei	r2,r18,17
   1a06c:	1001c726 	beq	r2,zero,1a78c <___vfprintf_internal_r+0x1870>
   1a070:	84000044 	addi	r16,r16,1
   1a074:	18c00404 	addi	r3,r3,16
   1a078:	8d000015 	stw	r20,0(r17)
   1a07c:	8cc00115 	stw	r19,4(r17)
   1a080:	d8c01d15 	stw	r3,116(sp)
   1a084:	dc001c15 	stw	r16,112(sp)
   1a088:	80800208 	cmpgei	r2,r16,8
   1a08c:	103ff426 	beq	r2,zero,1a060 <__alt_mem_mcu_subsystem_ram_0+0x77ffa060>
   1a090:	d9801b04 	addi	r6,sp,108
   1a094:	b80b883a 	mov	r5,r23
   1a098:	b009883a 	mov	r4,r22
   1a09c:	00224e00 	call	224e0 <__sprint_r>
   1a0a0:	103e0d1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a0a4:	dc001c17 	ldw	r16,112(sp)
   1a0a8:	d8c01d17 	ldw	r3,116(sp)
   1a0ac:	dc402804 	addi	r17,sp,160
   1a0b0:	003fec06 	br	1a064 <__alt_mem_mcu_subsystem_ram_0+0x77ffa064>
   1a0b4:	d8c00717 	ldw	r3,28(sp)
   1a0b8:	5880040c 	andi	r2,r11,16
   1a0bc:	1c000017 	ldw	r16,0(r3)
   1a0c0:	18c00104 	addi	r3,r3,4
   1a0c4:	d8c00715 	stw	r3,28(sp)
   1a0c8:	1000031e 	bne	r2,zero,1a0d8 <___vfprintf_internal_r+0x11bc>
   1a0cc:	5880100c 	andi	r2,r11,64
   1a0d0:	10000126 	beq	r2,zero,1a0d8 <___vfprintf_internal_r+0x11bc>
   1a0d4:	843fffcc 	andi	r16,r16,65535
   1a0d8:	002b883a 	mov	r21,zero
   1a0dc:	0005883a 	mov	r2,zero
   1a0e0:	003c6706 	br	19280 <__alt_mem_mcu_subsystem_ram_0+0x77ff9280>
   1a0e4:	d8c00717 	ldw	r3,28(sp)
   1a0e8:	5880040c 	andi	r2,r11,16
   1a0ec:	1c000017 	ldw	r16,0(r3)
   1a0f0:	18c00104 	addi	r3,r3,4
   1a0f4:	d8c00715 	stw	r3,28(sp)
   1a0f8:	1000031e 	bne	r2,zero,1a108 <___vfprintf_internal_r+0x11ec>
   1a0fc:	5880100c 	andi	r2,r11,64
   1a100:	10000126 	beq	r2,zero,1a108 <___vfprintf_internal_r+0x11ec>
   1a104:	843fffcc 	andi	r16,r16,65535
   1a108:	002b883a 	mov	r21,zero
   1a10c:	00800044 	movi	r2,1
   1a110:	003c5b06 	br	19280 <__alt_mem_mcu_subsystem_ram_0+0x77ff9280>
   1a114:	10803fcc 	andi	r2,r2,255
   1a118:	1080201c 	xori	r2,r2,128
   1a11c:	10bfe004 	addi	r2,r2,-128
   1a120:	10800c18 	cmpnei	r2,r2,48
   1a124:	103c8726 	beq	r2,zero,19344 <__alt_mem_mcu_subsystem_ram_0+0x77ff9344>
   1a128:	00800c04 	movi	r2,48
   1a12c:	18ffff84 	addi	r3,r3,-2
   1a130:	98bfffc5 	stb	r2,-1(r19)
   1a134:	d8802804 	addi	r2,sp,160
   1a138:	10e1c83a 	sub	r16,r2,r3
   1a13c:	1827883a 	mov	r19,r3
   1a140:	003c8206 	br	1934c <__alt_mem_mcu_subsystem_ram_0+0x77ff934c>
   1a144:	d9000417 	ldw	r4,16(sp)
   1a148:	d9801b04 	addi	r6,sp,108
   1a14c:	b80b883a 	mov	r5,r23
   1a150:	00224e00 	call	224e0 <__sprint_r>
   1a154:	103de01e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a158:	d8c01d17 	ldw	r3,116(sp)
   1a15c:	003dd206 	br	198a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98a8>
   1a160:	dcc02804 	addi	r19,sp,160
   1a164:	003c7906 	br	1934c <__alt_mem_mcu_subsystem_ram_0+0x77ff934c>
   1a168:	002b883a 	mov	r21,zero
   1a16c:	003c9f06 	br	193ec <__alt_mem_mcu_subsystem_ram_0+0x77ff93ec>
   1a170:	802bd7fa 	srai	r21,r16,31
   1a174:	003cef06 	br	19534 <__alt_mem_mcu_subsystem_ram_0+0x77ff9534>
   1a178:	00800c04 	movi	r2,48
   1a17c:	d8801485 	stb	r2,82(sp)
   1a180:	dc4014c5 	stb	r17,83(sp)
   1a184:	5ac00094 	ori	r11,r11,2
   1a188:	00800084 	movi	r2,2
   1a18c:	003c3c06 	br	19280 <__alt_mem_mcu_subsystem_ram_0+0x77ff9280>
   1a190:	d9000517 	ldw	r4,20(sp)
   1a194:	2005d7fa 	srai	r2,r4,31
   1a198:	19000015 	stw	r4,0(r3)
   1a19c:	18800115 	stw	r2,4(r3)
   1a1a0:	003b9306 	br	18ff0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8ff0>
   1a1a4:	d9000a17 	ldw	r4,40(sp)
   1a1a8:	d9400b17 	ldw	r5,44(sp)
   1a1ac:	da000815 	stw	r8,32(sp)
   1a1b0:	200d883a 	mov	r6,r4
   1a1b4:	280f883a 	mov	r7,r5
   1a1b8:	dac00615 	stw	r11,24(sp)
   1a1bc:	0024df80 	call	24df8 <__unorddf2>
   1a1c0:	dac00617 	ldw	r11,24(sp)
   1a1c4:	da000817 	ldw	r8,32(sp)
   1a1c8:	1002e91e 	bne	r2,zero,1ad70 <___vfprintf_internal_r+0x1e54>
   1a1cc:	00fff7c4 	movi	r3,-33
   1a1d0:	b0bfffe0 	cmpeqi	r2,r22,-1
   1a1d4:	88ea703a 	and	r21,r17,r3
   1a1d8:	1002531e 	bne	r2,zero,1ab28 <___vfprintf_internal_r+0x1c0c>
   1a1dc:	a88011d8 	cmpnei	r2,r21,71
   1a1e0:	1001ba26 	beq	r2,zero,1a8cc <___vfprintf_internal_r+0x19b0>
   1a1e4:	d8800b17 	ldw	r2,44(sp)
   1a1e8:	5d004014 	ori	r20,r11,256
   1a1ec:	10022b16 	blt	r2,zero,1aa9c <___vfprintf_internal_r+0x1b80>
   1a1f0:	d8c00b17 	ldw	r3,44(sp)
   1a1f4:	d8000605 	stb	zero,24(sp)
   1a1f8:	888019a0 	cmpeqi	r2,r17,102
   1a1fc:	d8800d15 	stw	r2,52(sp)
   1a200:	1002331e 	bne	r2,zero,1aad0 <___vfprintf_internal_r+0x1bb4>
   1a204:	8b4011a0 	cmpeqi	r13,r17,70
   1a208:	68018d1e 	bne	r13,zero,1a840 <___vfprintf_internal_r+0x1924>
   1a20c:	a8801158 	cmpnei	r2,r21,69
   1a210:	1001b126 	beq	r2,zero,1a8d8 <___vfprintf_internal_r+0x19bc>
   1a214:	d8801904 	addi	r2,sp,100
   1a218:	d8800315 	stw	r2,12(sp)
   1a21c:	d9400a17 	ldw	r5,40(sp)
   1a220:	d8801604 	addi	r2,sp,88
   1a224:	d9000417 	ldw	r4,16(sp)
   1a228:	d8800215 	stw	r2,8(sp)
   1a22c:	d8801504 	addi	r2,sp,84
   1a230:	180d883a 	mov	r6,r3
   1a234:	d8800115 	stw	r2,4(sp)
   1a238:	dd800015 	stw	r22,0(sp)
   1a23c:	01c00084 	movi	r7,2
   1a240:	da001215 	stw	r8,72(sp)
   1a244:	db401115 	stw	r13,68(sp)
   1a248:	dac00915 	stw	r11,36(sp)
   1a24c:	d8c00815 	stw	r3,32(sp)
   1a250:	001b3bc0 	call	1b3bc <_dtoa_r>
   1a254:	1027883a 	mov	r19,r2
   1a258:	888019d8 	cmpnei	r2,r17,103
   1a25c:	d8c00817 	ldw	r3,32(sp)
   1a260:	dac00917 	ldw	r11,36(sp)
   1a264:	db401117 	ldw	r13,68(sp)
   1a268:	da001217 	ldw	r8,72(sp)
   1a26c:	10030e1e 	bne	r2,zero,1aea8 <___vfprintf_internal_r+0x1f8c>
   1a270:	5880004c 	andi	r2,r11,1
   1a274:	10025026 	beq	r2,zero,1abb8 <___vfprintf_internal_r+0x1c9c>
   1a278:	9da1883a 	add	r16,r19,r22
   1a27c:	d9000a17 	ldw	r4,40(sp)
   1a280:	000d883a 	mov	r6,zero
   1a284:	000f883a 	mov	r7,zero
   1a288:	180b883a 	mov	r5,r3
   1a28c:	da000915 	stw	r8,36(sp)
   1a290:	dac00815 	stw	r11,32(sp)
   1a294:	0024c980 	call	24c98 <__eqdf2>
   1a298:	dac00817 	ldw	r11,32(sp)
   1a29c:	da000917 	ldw	r8,36(sp)
   1a2a0:	1001f51e 	bne	r2,zero,1aa78 <___vfprintf_internal_r+0x1b5c>
   1a2a4:	8005883a 	mov	r2,r16
   1a2a8:	14c5c83a 	sub	r2,r2,r19
   1a2ac:	d8800915 	stw	r2,36(sp)
   1a2b0:	d8801517 	ldw	r2,84(sp)
   1a2b4:	a8c011d8 	cmpnei	r3,r21,71
   1a2b8:	d8800815 	stw	r2,32(sp)
   1a2bc:	1801a726 	beq	r3,zero,1a95c <___vfprintf_internal_r+0x1a40>
   1a2c0:	d8800d17 	ldw	r2,52(sp)
   1a2c4:	1001aa26 	beq	r2,zero,1a970 <___vfprintf_internal_r+0x1a54>
   1a2c8:	d8800817 	ldw	r2,32(sp)
   1a2cc:	0082c10e 	bge	zero,r2,1add4 <___vfprintf_internal_r+0x1eb8>
   1a2d0:	b002b61e 	bne	r22,zero,1adac <___vfprintf_internal_r+0x1e90>
   1a2d4:	5ac0004c 	andi	r11,r11,1
   1a2d8:	5802b41e 	bne	r11,zero,1adac <___vfprintf_internal_r+0x1e90>
   1a2dc:	dc000817 	ldw	r16,32(sp)
   1a2e0:	802b883a 	mov	r21,r16
   1a2e4:	d8800607 	ldb	r2,24(sp)
   1a2e8:	1001bd1e 	bne	r2,zero,1a9e0 <___vfprintf_internal_r+0x1ac4>
   1a2ec:	db001443 	ldbu	r12,81(sp)
   1a2f0:	002d883a 	mov	r22,zero
   1a2f4:	003c1906 	br	1935c <__alt_mem_mcu_subsystem_ram_0+0x77ff935c>
   1a2f8:	d8801c17 	ldw	r2,112(sp)
   1a2fc:	014000f4 	movhi	r5,3
   1a300:	294dd804 	addi	r5,r5,14176
   1a304:	10800044 	addi	r2,r2,1
   1a308:	18c00044 	addi	r3,r3,1
   1a30c:	41400015 	stw	r5,0(r8)
   1a310:	01400044 	movi	r5,1
   1a314:	d8801c15 	stw	r2,112(sp)
   1a318:	41400115 	stw	r5,4(r8)
   1a31c:	d8c01d15 	stw	r3,116(sp)
   1a320:	10800208 	cmpgei	r2,r2,8
   1a324:	1001e11e 	bne	r2,zero,1aaac <___vfprintf_internal_r+0x1b90>
   1a328:	42000204 	addi	r8,r8,8
   1a32c:	2000021e 	bne	r4,zero,1a338 <___vfprintf_internal_r+0x141c>
   1a330:	d8800917 	ldw	r2,36(sp)
   1a334:	10013f26 	beq	r2,zero,1a834 <___vfprintf_internal_r+0x1918>
   1a338:	d8800f17 	ldw	r2,60(sp)
   1a33c:	d9400c17 	ldw	r5,48(sp)
   1a340:	40800015 	stw	r2,0(r8)
   1a344:	d8801c17 	ldw	r2,112(sp)
   1a348:	28c7883a 	add	r3,r5,r3
   1a34c:	41400115 	stw	r5,4(r8)
   1a350:	10800044 	addi	r2,r2,1
   1a354:	d8c01d15 	stw	r3,116(sp)
   1a358:	d8801c15 	stw	r2,112(sp)
   1a35c:	11400208 	cmpgei	r5,r2,8
   1a360:	283e6a1e 	bne	r5,zero,19d0c <__alt_mem_mcu_subsystem_ram_0+0x77ff9d0c>
   1a364:	42000204 	addi	r8,r8,8
   1a368:	003e7106 	br	19d30 <__alt_mem_mcu_subsystem_ram_0+0x77ff9d30>
   1a36c:	d9000417 	ldw	r4,16(sp)
   1a370:	d9801b04 	addi	r6,sp,108
   1a374:	b80b883a 	mov	r5,r23
   1a378:	00224e00 	call	224e0 <__sprint_r>
   1a37c:	103d561e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a380:	da002804 	addi	r8,sp,160
   1a384:	003e2006 	br	19c08 <__alt_mem_mcu_subsystem_ram_0+0x77ff9c08>
   1a388:	04a5c83a 	sub	r18,zero,r18
   1a38c:	d8800715 	stw	r2,28(sp)
   1a390:	003da106 	br	19a18 <__alt_mem_mcu_subsystem_ram_0+0x77ff9a18>
   1a394:	d9000417 	ldw	r4,16(sp)
   1a398:	d9801b04 	addi	r6,sp,108
   1a39c:	b80b883a 	mov	r5,r23
   1a3a0:	00224e00 	call	224e0 <__sprint_r>
   1a3a4:	103d4c1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a3a8:	da801c17 	ldw	r10,112(sp)
   1a3ac:	d8c01d17 	ldw	r3,116(sp)
   1a3b0:	da002a04 	addi	r8,sp,168
   1a3b4:	55800044 	addi	r22,r10,1
   1a3b8:	dc402804 	addi	r17,sp,160
   1a3bc:	003ea506 	br	19e54 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e54>
   1a3c0:	e4400043 	ldbu	r17,1(fp)
   1a3c4:	5ac00814 	ori	r11,r11,32
   1a3c8:	e7000044 	addi	fp,fp,1
   1a3cc:	8c403fcc 	andi	r17,r17,255
   1a3d0:	8c40201c 	xori	r17,r17,128
   1a3d4:	8c7fe004 	addi	r17,r17,-128
   1a3d8:	003b2a06 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   1a3dc:	b08001f0 	cmpltui	r2,r22,7
   1a3e0:	b02b883a 	mov	r21,r22
   1a3e4:	10011126 	beq	r2,zero,1a82c <___vfprintf_internal_r+0x1910>
   1a3e8:	04c000f4 	movhi	r19,3
   1a3ec:	dd000715 	stw	r20,28(sp)
   1a3f0:	a821883a 	mov	r16,r21
   1a3f4:	5829883a 	mov	r20,r11
   1a3f8:	002d883a 	mov	r22,zero
   1a3fc:	d8000815 	stw	zero,32(sp)
   1a400:	9ccdd604 	addi	r19,r19,14168
   1a404:	0005883a 	mov	r2,zero
   1a408:	003c5d06 	br	19580 <__alt_mem_mcu_subsystem_ram_0+0x77ff9580>
   1a40c:	dc400615 	stw	r17,24(sp)
   1a410:	dcc02804 	addi	r19,sp,160
   1a414:	a823883a 	mov	r17,r21
   1a418:	da000815 	stw	r8,32(sp)
   1a41c:	602b883a 	mov	r21,r12
   1a420:	8009883a 	mov	r4,r16
   1a424:	880b883a 	mov	r5,r17
   1a428:	01800284 	movi	r6,10
   1a42c:	000f883a 	mov	r7,zero
   1a430:	00124000 	call	12400 <__umoddi3>
   1a434:	10800c04 	addi	r2,r2,48
   1a438:	9cffffc4 	addi	r19,r19,-1
   1a43c:	8009883a 	mov	r4,r16
   1a440:	880b883a 	mov	r5,r17
   1a444:	98800005 	stb	r2,0(r19)
   1a448:	01800284 	movi	r6,10
   1a44c:	000f883a 	mov	r7,zero
   1a450:	0011e680 	call	11e68 <__udivdi3>
   1a454:	1021883a 	mov	r16,r2
   1a458:	10c4b03a 	or	r2,r2,r3
   1a45c:	1823883a 	mov	r17,r3
   1a460:	103fef1e 	bne	r2,zero,1a420 <__alt_mem_mcu_subsystem_ram_0+0x77ffa420>
   1a464:	d8802804 	addi	r2,sp,160
   1a468:	dc400617 	ldw	r17,24(sp)
   1a46c:	da000817 	ldw	r8,32(sp)
   1a470:	a819883a 	mov	r12,r21
   1a474:	14e1c83a 	sub	r16,r2,r19
   1a478:	003bb406 	br	1934c <__alt_mem_mcu_subsystem_ram_0+0x77ff934c>
   1a47c:	d8800517 	ldw	r2,20(sp)
   1a480:	18800015 	stw	r2,0(r3)
   1a484:	003ada06 	br	18ff0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8ff0>
   1a488:	d8800f17 	ldw	r2,60(sp)
   1a48c:	d8c01d17 	ldw	r3,116(sp)
   1a490:	d9000c17 	ldw	r4,48(sp)
   1a494:	40800015 	stw	r2,0(r8)
   1a498:	d8801c17 	ldw	r2,112(sp)
   1a49c:	20c7883a 	add	r3,r4,r3
   1a4a0:	41000115 	stw	r4,4(r8)
   1a4a4:	10800044 	addi	r2,r2,1
   1a4a8:	d8801c15 	stw	r2,112(sp)
   1a4ac:	d8c01d15 	stw	r3,116(sp)
   1a4b0:	10800208 	cmpgei	r2,r2,8
   1a4b4:	1000c61e 	bne	r2,zero,1a7d0 <___vfprintf_internal_r+0x18b4>
   1a4b8:	42000204 	addi	r8,r8,8
   1a4bc:	d8800917 	ldw	r2,36(sp)
   1a4c0:	143fffc4 	addi	r16,r2,-1
   1a4c4:	043ccb0e 	bge	zero,r16,197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   1a4c8:	02c000f4 	movhi	r11,3
   1a4cc:	81000450 	cmplti	r4,r16,17
   1a4d0:	5acdf5c4 	addi	r11,r11,14295
   1a4d4:	d8801c17 	ldw	r2,112(sp)
   1a4d8:	2000a01e 	bne	r4,zero,1a75c <___vfprintf_internal_r+0x1840>
   1a4dc:	04400404 	movi	r17,16
   1a4e0:	dcc00417 	ldw	r19,16(sp)
   1a4e4:	582d883a 	mov	r22,r11
   1a4e8:	00000406 	br	1a4fc <___vfprintf_internal_r+0x15e0>
   1a4ec:	42000204 	addi	r8,r8,8
   1a4f0:	843ffc04 	addi	r16,r16,-16
   1a4f4:	81000448 	cmpgei	r4,r16,17
   1a4f8:	20009726 	beq	r4,zero,1a758 <___vfprintf_internal_r+0x183c>
   1a4fc:	10800044 	addi	r2,r2,1
   1a500:	18c00404 	addi	r3,r3,16
   1a504:	45800015 	stw	r22,0(r8)
   1a508:	44400115 	stw	r17,4(r8)
   1a50c:	d8c01d15 	stw	r3,116(sp)
   1a510:	d8801c15 	stw	r2,112(sp)
   1a514:	11000208 	cmpgei	r4,r2,8
   1a518:	203ff426 	beq	r4,zero,1a4ec <__alt_mem_mcu_subsystem_ram_0+0x77ffa4ec>
   1a51c:	d9801b04 	addi	r6,sp,108
   1a520:	b80b883a 	mov	r5,r23
   1a524:	9809883a 	mov	r4,r19
   1a528:	00224e00 	call	224e0 <__sprint_r>
   1a52c:	103cea1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a530:	d8c01d17 	ldw	r3,116(sp)
   1a534:	d8801c17 	ldw	r2,112(sp)
   1a538:	da002804 	addi	r8,sp,160
   1a53c:	003fec06 	br	1a4f0 <__alt_mem_mcu_subsystem_ram_0+0x77ffa4f0>
   1a540:	a080004c 	andi	r2,r20,1
   1a544:	103e131e 	bne	r2,zero,19d94 <__alt_mem_mcu_subsystem_ram_0+0x77ff9d94>
   1a548:	00800044 	movi	r2,1
   1a54c:	dc001c15 	stw	r16,112(sp)
   1a550:	44c00015 	stw	r19,0(r8)
   1a554:	40800115 	stw	r2,4(r8)
   1a558:	d8c01d15 	stw	r3,116(sp)
   1a55c:	84000208 	cmpgei	r16,r16,8
   1a560:	803f8c1e 	bne	r16,zero,1a394 <__alt_mem_mcu_subsystem_ram_0+0x77ffa394>
   1a564:	55800084 	addi	r22,r10,2
   1a568:	42000404 	addi	r8,r8,16
   1a56c:	003e3906 	br	19e54 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e54>
   1a570:	d9000417 	ldw	r4,16(sp)
   1a574:	d9801b04 	addi	r6,sp,108
   1a578:	b80b883a 	mov	r5,r23
   1a57c:	dac00d15 	stw	r11,52(sp)
   1a580:	db000615 	stw	r12,24(sp)
   1a584:	00224e00 	call	224e0 <__sprint_r>
   1a588:	103cd31e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a58c:	d8c01d17 	ldw	r3,116(sp)
   1a590:	d8801447 	ldb	r2,81(sp)
   1a594:	da002804 	addi	r8,sp,160
   1a598:	dac00d17 	ldw	r11,52(sp)
   1a59c:	db000617 	ldw	r12,24(sp)
   1a5a0:	003c3506 	br	19678 <__alt_mem_mcu_subsystem_ram_0+0x77ff9678>
   1a5a4:	9017883a 	mov	r11,r18
   1a5a8:	dc800617 	ldw	r18,24(sp)
   1a5ac:	10800044 	addi	r2,r2,1
   1a5b0:	1c07883a 	add	r3,r3,r16
   1a5b4:	d8801c15 	stw	r2,112(sp)
   1a5b8:	42c00015 	stw	r11,0(r8)
   1a5bc:	44000115 	stw	r16,4(r8)
   1a5c0:	d8c01d15 	stw	r3,116(sp)
   1a5c4:	10800208 	cmpgei	r2,r2,8
   1a5c8:	10009626 	beq	r2,zero,1a824 <___vfprintf_internal_r+0x1908>
   1a5cc:	d9000417 	ldw	r4,16(sp)
   1a5d0:	d9801b04 	addi	r6,sp,108
   1a5d4:	b80b883a 	mov	r5,r23
   1a5d8:	00224e00 	call	224e0 <__sprint_r>
   1a5dc:	103cbe1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a5e0:	d8c01d17 	ldw	r3,116(sp)
   1a5e4:	da002804 	addi	r8,sp,160
   1a5e8:	d8801517 	ldw	r2,84(sp)
   1a5ec:	d9000917 	ldw	r4,36(sp)
   1a5f0:	11000216 	blt	r2,r4,1a5fc <___vfprintf_internal_r+0x16e0>
   1a5f4:	a100004c 	andi	r4,r20,1
   1a5f8:	20000c26 	beq	r4,zero,1a62c <___vfprintf_internal_r+0x1710>
   1a5fc:	d9000f17 	ldw	r4,60(sp)
   1a600:	d9400c17 	ldw	r5,48(sp)
   1a604:	41000015 	stw	r4,0(r8)
   1a608:	d9001c17 	ldw	r4,112(sp)
   1a60c:	1947883a 	add	r3,r3,r5
   1a610:	41400115 	stw	r5,4(r8)
   1a614:	21000044 	addi	r4,r4,1
   1a618:	d9001c15 	stw	r4,112(sp)
   1a61c:	d8c01d15 	stw	r3,116(sp)
   1a620:	21000208 	cmpgei	r4,r4,8
   1a624:	20010b1e 	bne	r4,zero,1aa54 <___vfprintf_internal_r+0x1b38>
   1a628:	42000204 	addi	r8,r8,8
   1a62c:	d9000917 	ldw	r4,36(sp)
   1a630:	d9400817 	ldw	r5,32(sp)
   1a634:	2085c83a 	sub	r2,r4,r2
   1a638:	2149c83a 	sub	r4,r4,r5
   1a63c:	1021883a 	mov	r16,r2
   1a640:	2080010e 	bge	r4,r2,1a648 <___vfprintf_internal_r+0x172c>
   1a644:	2021883a 	mov	r16,r4
   1a648:	04000c0e 	bge	zero,r16,1a67c <___vfprintf_internal_r+0x1760>
   1a64c:	d9000817 	ldw	r4,32(sp)
   1a650:	1c07883a 	add	r3,r3,r16
   1a654:	44000115 	stw	r16,4(r8)
   1a658:	9927883a 	add	r19,r19,r4
   1a65c:	d9001c17 	ldw	r4,112(sp)
   1a660:	44c00015 	stw	r19,0(r8)
   1a664:	d8c01d15 	stw	r3,116(sp)
   1a668:	21000044 	addi	r4,r4,1
   1a66c:	d9001c15 	stw	r4,112(sp)
   1a670:	21000208 	cmpgei	r4,r4,8
   1a674:	20012e1e 	bne	r4,zero,1ab30 <___vfprintf_internal_r+0x1c14>
   1a678:	42000204 	addi	r8,r8,8
   1a67c:	8000010e 	bge	r16,zero,1a684 <___vfprintf_internal_r+0x1768>
   1a680:	0021883a 	mov	r16,zero
   1a684:	1421c83a 	sub	r16,r2,r16
   1a688:	043c5a0e 	bge	zero,r16,197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   1a68c:	02c000f4 	movhi	r11,3
   1a690:	81000450 	cmplti	r4,r16,17
   1a694:	5acdf5c4 	addi	r11,r11,14295
   1a698:	d8801c17 	ldw	r2,112(sp)
   1a69c:	20002f1e 	bne	r4,zero,1a75c <___vfprintf_internal_r+0x1840>
   1a6a0:	04400404 	movi	r17,16
   1a6a4:	dcc00417 	ldw	r19,16(sp)
   1a6a8:	582d883a 	mov	r22,r11
   1a6ac:	00000406 	br	1a6c0 <___vfprintf_internal_r+0x17a4>
   1a6b0:	42000204 	addi	r8,r8,8
   1a6b4:	843ffc04 	addi	r16,r16,-16
   1a6b8:	81000448 	cmpgei	r4,r16,17
   1a6bc:	20002626 	beq	r4,zero,1a758 <___vfprintf_internal_r+0x183c>
   1a6c0:	10800044 	addi	r2,r2,1
   1a6c4:	18c00404 	addi	r3,r3,16
   1a6c8:	45800015 	stw	r22,0(r8)
   1a6cc:	44400115 	stw	r17,4(r8)
   1a6d0:	d8c01d15 	stw	r3,116(sp)
   1a6d4:	d8801c15 	stw	r2,112(sp)
   1a6d8:	11000208 	cmpgei	r4,r2,8
   1a6dc:	203ff426 	beq	r4,zero,1a6b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffa6b0>
   1a6e0:	d9801b04 	addi	r6,sp,108
   1a6e4:	b80b883a 	mov	r5,r23
   1a6e8:	9809883a 	mov	r4,r19
   1a6ec:	00224e00 	call	224e0 <__sprint_r>
   1a6f0:	103c791e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a6f4:	d8c01d17 	ldw	r3,116(sp)
   1a6f8:	d8801c17 	ldw	r2,112(sp)
   1a6fc:	da002804 	addi	r8,sp,160
   1a700:	003fec06 	br	1a6b4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa6b4>
   1a704:	d9000417 	ldw	r4,16(sp)
   1a708:	d9801b04 	addi	r6,sp,108
   1a70c:	b80b883a 	mov	r5,r23
   1a710:	00224e00 	call	224e0 <__sprint_r>
   1a714:	103c701e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a718:	d8c01d17 	ldw	r3,116(sp)
   1a71c:	dc001c17 	ldw	r16,112(sp)
   1a720:	dc402804 	addi	r17,sp,160
   1a724:	003da206 	br	19db0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9db0>
   1a728:	d9000417 	ldw	r4,16(sp)
   1a72c:	d9801b04 	addi	r6,sp,108
   1a730:	b80b883a 	mov	r5,r23
   1a734:	00224e00 	call	224e0 <__sprint_r>
   1a738:	103c671e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a73c:	d8c01d17 	ldw	r3,116(sp)
   1a740:	dc001c17 	ldw	r16,112(sp)
   1a744:	dc402804 	addi	r17,sp,160
   1a748:	003da406 	br	19ddc <__alt_mem_mcu_subsystem_ram_0+0x77ff9ddc>
   1a74c:	10c00060 	cmpeqi	r3,r2,1
   1a750:	183aeb26 	beq	r3,zero,19300 <__alt_mem_mcu_subsystem_ram_0+0x77ff9300>
   1a754:	003d0b06 	br	19b84 <__alt_mem_mcu_subsystem_ram_0+0x77ff9b84>
   1a758:	b017883a 	mov	r11,r22
   1a75c:	10800044 	addi	r2,r2,1
   1a760:	1c07883a 	add	r3,r3,r16
   1a764:	42c00015 	stw	r11,0(r8)
   1a768:	003c1c06 	br	197dc <__alt_mem_mcu_subsystem_ram_0+0x77ff97dc>
   1a76c:	d9000417 	ldw	r4,16(sp)
   1a770:	d9801b04 	addi	r6,sp,108
   1a774:	b80b883a 	mov	r5,r23
   1a778:	00224e00 	call	224e0 <__sprint_r>
   1a77c:	103c561e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a780:	d8c01d17 	ldw	r3,116(sp)
   1a784:	da002804 	addi	r8,sp,160
   1a788:	003bd706 	br	196e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff96e8>
   1a78c:	9019883a 	mov	r12,r18
   1a790:	a017883a 	mov	r11,r20
   1a794:	dc800617 	ldw	r18,24(sp)
   1a798:	dd000817 	ldw	r20,32(sp)
   1a79c:	85800044 	addi	r22,r16,1
   1a7a0:	88800204 	addi	r2,r17,8
   1a7a4:	1b07883a 	add	r3,r3,r12
   1a7a8:	8ac00015 	stw	r11,0(r17)
   1a7ac:	8b000115 	stw	r12,4(r17)
   1a7b0:	d8c01d15 	stw	r3,116(sp)
   1a7b4:	dd801c15 	stw	r22,112(sp)
   1a7b8:	b1000208 	cmpgei	r4,r22,8
   1a7bc:	203ef51e 	bne	r4,zero,1a394 <__alt_mem_mcu_subsystem_ram_0+0x77ffa394>
   1a7c0:	b5800044 	addi	r22,r22,1
   1a7c4:	12000204 	addi	r8,r2,8
   1a7c8:	1023883a 	mov	r17,r2
   1a7cc:	003da106 	br	19e54 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e54>
   1a7d0:	d9000417 	ldw	r4,16(sp)
   1a7d4:	d9801b04 	addi	r6,sp,108
   1a7d8:	b80b883a 	mov	r5,r23
   1a7dc:	00224e00 	call	224e0 <__sprint_r>
   1a7e0:	103c3d1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a7e4:	d8c01d17 	ldw	r3,116(sp)
   1a7e8:	da002804 	addi	r8,sp,160
   1a7ec:	003f3306 	br	1a4bc <__alt_mem_mcu_subsystem_ram_0+0x77ffa4bc>
   1a7f0:	04c000f4 	movhi	r19,3
   1a7f4:	9ccdc904 	addi	r19,r19,14116
   1a7f8:	003cbc06 	br	19aec <__alt_mem_mcu_subsystem_ram_0+0x77ff9aec>
   1a7fc:	9809883a 	mov	r4,r19
   1a800:	001676c0 	call	1676c <strlen>
   1a804:	1021883a 	mov	r16,r2
   1a808:	db001443 	ldbu	r12,81(sp)
   1a80c:	102b883a 	mov	r21,r2
   1a810:	dac00617 	ldw	r11,24(sp)
   1a814:	da000717 	ldw	r8,28(sp)
   1a818:	103b210e 	bge	r2,zero,194a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff94a0>
   1a81c:	002b883a 	mov	r21,zero
   1a820:	003b1f06 	br	194a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff94a0>
   1a824:	42000204 	addi	r8,r8,8
   1a828:	003f6f06 	br	1a5e8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa5e8>
   1a82c:	05400184 	movi	r21,6
   1a830:	003eed06 	br	1a3e8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa3e8>
   1a834:	a080004c 	andi	r2,r20,1
   1a838:	103bee26 	beq	r2,zero,197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   1a83c:	003ebe06 	br	1a338 <__alt_mem_mcu_subsystem_ram_0+0x77ffa338>
   1a840:	d8801904 	addi	r2,sp,100
   1a844:	d8800315 	stw	r2,12(sp)
   1a848:	d9400a17 	ldw	r5,40(sp)
   1a84c:	d8801604 	addi	r2,sp,88
   1a850:	d9000417 	ldw	r4,16(sp)
   1a854:	d8800215 	stw	r2,8(sp)
   1a858:	d8801504 	addi	r2,sp,84
   1a85c:	180d883a 	mov	r6,r3
   1a860:	d8800115 	stw	r2,4(sp)
   1a864:	dd800015 	stw	r22,0(sp)
   1a868:	01c000c4 	movi	r7,3
   1a86c:	da001215 	stw	r8,72(sp)
   1a870:	db401115 	stw	r13,68(sp)
   1a874:	dac00915 	stw	r11,36(sp)
   1a878:	d8c00815 	stw	r3,32(sp)
   1a87c:	001b3bc0 	call	1b3bc <_dtoa_r>
   1a880:	d8c00817 	ldw	r3,32(sp)
   1a884:	dac00917 	ldw	r11,36(sp)
   1a888:	db401117 	ldw	r13,68(sp)
   1a88c:	da001217 	ldw	r8,72(sp)
   1a890:	1027883a 	mov	r19,r2
   1a894:	b019883a 	mov	r12,r22
   1a898:	9b21883a 	add	r16,r19,r12
   1a89c:	683e7726 	beq	r13,zero,1a27c <__alt_mem_mcu_subsystem_ram_0+0x77ffa27c>
   1a8a0:	98800007 	ldb	r2,0(r19)
   1a8a4:	10800c20 	cmpeqi	r2,r2,48
   1a8a8:	1001191e 	bne	r2,zero,1ad10 <___vfprintf_internal_r+0x1df4>
   1a8ac:	db001517 	ldw	r12,84(sp)
   1a8b0:	8321883a 	add	r16,r16,r12
   1a8b4:	003e7106 	br	1a27c <__alt_mem_mcu_subsystem_ram_0+0x77ffa27c>
   1a8b8:	d9000417 	ldw	r4,16(sp)
   1a8bc:	d9801b04 	addi	r6,sp,108
   1a8c0:	b80b883a 	mov	r5,r23
   1a8c4:	00224e00 	call	224e0 <__sprint_r>
   1a8c8:	003c0306 	br	198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1a8cc:	b03e451e 	bne	r22,zero,1a1e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa1e4>
   1a8d0:	05800044 	movi	r22,1
   1a8d4:	003e4306 	br	1a1e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa1e4>
   1a8d8:	d8801904 	addi	r2,sp,100
   1a8dc:	d8800315 	stw	r2,12(sp)
   1a8e0:	d9400a17 	ldw	r5,40(sp)
   1a8e4:	d8801604 	addi	r2,sp,88
   1a8e8:	d9000417 	ldw	r4,16(sp)
   1a8ec:	b3000044 	addi	r12,r22,1
   1a8f0:	d8800215 	stw	r2,8(sp)
   1a8f4:	d8801504 	addi	r2,sp,84
   1a8f8:	db000015 	stw	r12,0(sp)
   1a8fc:	180d883a 	mov	r6,r3
   1a900:	d8800115 	stw	r2,4(sp)
   1a904:	01c00084 	movi	r7,2
   1a908:	da001315 	stw	r8,76(sp)
   1a90c:	db401215 	stw	r13,72(sp)
   1a910:	dac01115 	stw	r11,68(sp)
   1a914:	db000915 	stw	r12,36(sp)
   1a918:	d8c00815 	stw	r3,32(sp)
   1a91c:	001b3bc0 	call	1b3bc <_dtoa_r>
   1a920:	d8c00817 	ldw	r3,32(sp)
   1a924:	db000917 	ldw	r12,36(sp)
   1a928:	dac01117 	ldw	r11,68(sp)
   1a92c:	db401217 	ldw	r13,72(sp)
   1a930:	da001317 	ldw	r8,76(sp)
   1a934:	1027883a 	mov	r19,r2
   1a938:	888011d8 	cmpnei	r2,r17,71
   1a93c:	1001391e 	bne	r2,zero,1ae24 <___vfprintf_internal_r+0x1f08>
   1a940:	5880004c 	andi	r2,r11,1
   1a944:	103fd41e 	bne	r2,zero,1a898 <__alt_mem_mcu_subsystem_ram_0+0x77ffa898>
   1a948:	d8801517 	ldw	r2,84(sp)
   1a94c:	d8800815 	stw	r2,32(sp)
   1a950:	d8801917 	ldw	r2,100(sp)
   1a954:	14c5c83a 	sub	r2,r2,r19
   1a958:	d8800915 	stw	r2,36(sp)
   1a95c:	d8c00817 	ldw	r3,32(sp)
   1a960:	18bfff50 	cmplti	r2,r3,-3
   1a964:	1000011e 	bne	r2,zero,1a96c <___vfprintf_internal_r+0x1a50>
   1a968:	b0c0220e 	bge	r22,r3,1a9f4 <___vfprintf_internal_r+0x1ad8>
   1a96c:	8c7fff84 	addi	r17,r17,-2
   1a970:	d8800817 	ldw	r2,32(sp)
   1a974:	dc401745 	stb	r17,93(sp)
   1a978:	143fffc4 	addi	r16,r2,-1
   1a97c:	dc001515 	stw	r16,84(sp)
   1a980:	80010f16 	blt	r16,zero,1adc0 <___vfprintf_internal_r+0x1ea4>
   1a984:	00800ac4 	movi	r2,43
   1a988:	d8801785 	stb	r2,94(sp)
   1a98c:	80800290 	cmplti	r2,r16,10
   1a990:	1000bb26 	beq	r2,zero,1ac80 <___vfprintf_internal_r+0x1d64>
   1a994:	84000c04 	addi	r16,r16,48
   1a998:	00800c04 	movi	r2,48
   1a99c:	d88017c5 	stb	r2,95(sp)
   1a9a0:	dc001805 	stb	r16,96(sp)
   1a9a4:	d8c01844 	addi	r3,sp,97
   1a9a8:	d9000917 	ldw	r4,36(sp)
   1a9ac:	d8801744 	addi	r2,sp,93
   1a9b0:	1887c83a 	sub	r3,r3,r2
   1a9b4:	d8c01015 	stw	r3,64(sp)
   1a9b8:	20800088 	cmpgei	r2,r4,2
   1a9bc:	1921883a 	add	r16,r3,r4
   1a9c0:	1000f326 	beq	r2,zero,1ad90 <___vfprintf_internal_r+0x1e74>
   1a9c4:	d8800c17 	ldw	r2,48(sp)
   1a9c8:	80a1883a 	add	r16,r16,r2
   1a9cc:	802b883a 	mov	r21,r16
   1a9d0:	8000010e 	bge	r16,zero,1a9d8 <___vfprintf_internal_r+0x1abc>
   1a9d4:	002b883a 	mov	r21,zero
   1a9d8:	d8000815 	stw	zero,32(sp)
   1a9dc:	003e4106 	br	1a2e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2e4>
   1a9e0:	00800b44 	movi	r2,45
   1a9e4:	d8801445 	stb	r2,81(sp)
   1a9e8:	002d883a 	mov	r22,zero
   1a9ec:	00800b44 	movi	r2,45
   1a9f0:	003a5e06 	br	1936c <__alt_mem_mcu_subsystem_ram_0+0x77ff936c>
   1a9f4:	d8800817 	ldw	r2,32(sp)
   1a9f8:	d8c00917 	ldw	r3,36(sp)
   1a9fc:	10c06216 	blt	r2,r3,1ab88 <___vfprintf_internal_r+0x1c6c>
   1aa00:	5ac0004c 	andi	r11,r11,1
   1aa04:	5800d426 	beq	r11,zero,1ad58 <___vfprintf_internal_r+0x1e3c>
   1aa08:	d8800817 	ldw	r2,32(sp)
   1aa0c:	d8c00c17 	ldw	r3,48(sp)
   1aa10:	10e1883a 	add	r16,r2,r3
   1aa14:	802b883a 	mov	r21,r16
   1aa18:	80006516 	blt	r16,zero,1abb0 <___vfprintf_internal_r+0x1c94>
   1aa1c:	044019c4 	movi	r17,103
   1aa20:	003e3006 	br	1a2e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2e4>
   1aa24:	d9000417 	ldw	r4,16(sp)
   1aa28:	d9801b04 	addi	r6,sp,108
   1aa2c:	b80b883a 	mov	r5,r23
   1aa30:	00224e00 	call	224e0 <__sprint_r>
   1aa34:	103ba81e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1aa38:	d8c01d17 	ldw	r3,116(sp)
   1aa3c:	da002804 	addi	r8,sp,160
   1aa40:	003d5306 	br	19f90 <__alt_mem_mcu_subsystem_ram_0+0x77ff9f90>
   1aa44:	00800b44 	movi	r2,45
   1aa48:	d8801445 	stb	r2,81(sp)
   1aa4c:	03000b44 	movi	r12,45
   1aa50:	003c2206 	br	19adc <__alt_mem_mcu_subsystem_ram_0+0x77ff9adc>
   1aa54:	d9000417 	ldw	r4,16(sp)
   1aa58:	d9801b04 	addi	r6,sp,108
   1aa5c:	b80b883a 	mov	r5,r23
   1aa60:	00224e00 	call	224e0 <__sprint_r>
   1aa64:	103b9c1e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1aa68:	d8801517 	ldw	r2,84(sp)
   1aa6c:	d8c01d17 	ldw	r3,116(sp)
   1aa70:	da002804 	addi	r8,sp,160
   1aa74:	003eed06 	br	1a62c <__alt_mem_mcu_subsystem_ram_0+0x77ffa62c>
   1aa78:	d8801917 	ldw	r2,100(sp)
   1aa7c:	01000c04 	movi	r4,48
   1aa80:	143e092e 	bgeu	r2,r16,1a2a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2a8>
   1aa84:	10c00044 	addi	r3,r2,1
   1aa88:	d8c01915 	stw	r3,100(sp)
   1aa8c:	11000005 	stb	r4,0(r2)
   1aa90:	d8801917 	ldw	r2,100(sp)
   1aa94:	143ffb36 	bltu	r2,r16,1aa84 <__alt_mem_mcu_subsystem_ram_0+0x77ffaa84>
   1aa98:	003e0306 	br	1a2a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2a8>
   1aa9c:	10e0003c 	xorhi	r3,r2,32768
   1aaa0:	00800b44 	movi	r2,45
   1aaa4:	d8800605 	stb	r2,24(sp)
   1aaa8:	003dd306 	br	1a1f8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa1f8>
   1aaac:	d9000417 	ldw	r4,16(sp)
   1aab0:	d9801b04 	addi	r6,sp,108
   1aab4:	b80b883a 	mov	r5,r23
   1aab8:	00224e00 	call	224e0 <__sprint_r>
   1aabc:	103b861e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1aac0:	d9001517 	ldw	r4,84(sp)
   1aac4:	d8c01d17 	ldw	r3,116(sp)
   1aac8:	da002804 	addi	r8,sp,160
   1aacc:	003e1706 	br	1a32c <__alt_mem_mcu_subsystem_ram_0+0x77ffa32c>
   1aad0:	d8801904 	addi	r2,sp,100
   1aad4:	d8800315 	stw	r2,12(sp)
   1aad8:	d9400a17 	ldw	r5,40(sp)
   1aadc:	d8801604 	addi	r2,sp,88
   1aae0:	d9000417 	ldw	r4,16(sp)
   1aae4:	d8800215 	stw	r2,8(sp)
   1aae8:	d8801504 	addi	r2,sp,84
   1aaec:	180d883a 	mov	r6,r3
   1aaf0:	d8800115 	stw	r2,4(sp)
   1aaf4:	dd800015 	stw	r22,0(sp)
   1aaf8:	01c000c4 	movi	r7,3
   1aafc:	da001115 	stw	r8,68(sp)
   1ab00:	dac00915 	stw	r11,36(sp)
   1ab04:	d8c00815 	stw	r3,32(sp)
   1ab08:	001b3bc0 	call	1b3bc <_dtoa_r>
   1ab0c:	1027883a 	mov	r19,r2
   1ab10:	15a1883a 	add	r16,r2,r22
   1ab14:	b019883a 	mov	r12,r22
   1ab18:	d8c00817 	ldw	r3,32(sp)
   1ab1c:	dac00917 	ldw	r11,36(sp)
   1ab20:	da001117 	ldw	r8,68(sp)
   1ab24:	003f5e06 	br	1a8a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffa8a0>
   1ab28:	05800184 	movi	r22,6
   1ab2c:	003dad06 	br	1a1e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa1e4>
   1ab30:	d9000417 	ldw	r4,16(sp)
   1ab34:	d9801b04 	addi	r6,sp,108
   1ab38:	b80b883a 	mov	r5,r23
   1ab3c:	00224e00 	call	224e0 <__sprint_r>
   1ab40:	103b651e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1ab44:	d8801517 	ldw	r2,84(sp)
   1ab48:	d9000917 	ldw	r4,36(sp)
   1ab4c:	d8c01d17 	ldw	r3,116(sp)
   1ab50:	da002804 	addi	r8,sp,160
   1ab54:	2085c83a 	sub	r2,r4,r2
   1ab58:	003ec806 	br	1a67c <__alt_mem_mcu_subsystem_ram_0+0x77ffa67c>
   1ab5c:	b02b883a 	mov	r21,r22
   1ab60:	b021883a 	mov	r16,r22
   1ab64:	dd000715 	stw	r20,28(sp)
   1ab68:	db001443 	ldbu	r12,81(sp)
   1ab6c:	5829883a 	mov	r20,r11
   1ab70:	002d883a 	mov	r22,zero
   1ab74:	d8000815 	stw	zero,32(sp)
   1ab78:	0039f806 	br	1935c <__alt_mem_mcu_subsystem_ram_0+0x77ff935c>
   1ab7c:	00bfffc4 	movi	r2,-1
   1ab80:	d8800515 	stw	r2,20(sp)
   1ab84:	003b5706 	br	198e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff98e4>
   1ab88:	d8800917 	ldw	r2,36(sp)
   1ab8c:	d8c00c17 	ldw	r3,48(sp)
   1ab90:	10e1883a 	add	r16,r2,r3
   1ab94:	d8800817 	ldw	r2,32(sp)
   1ab98:	00800316 	blt	zero,r2,1aba8 <___vfprintf_internal_r+0x1c8c>
   1ab9c:	d8800817 	ldw	r2,32(sp)
   1aba0:	80a1c83a 	sub	r16,r16,r2
   1aba4:	84000044 	addi	r16,r16,1
   1aba8:	802b883a 	mov	r21,r16
   1abac:	803f9b0e 	bge	r16,zero,1aa1c <__alt_mem_mcu_subsystem_ram_0+0x77ffaa1c>
   1abb0:	002b883a 	mov	r21,zero
   1abb4:	003f9906 	br	1aa1c <__alt_mem_mcu_subsystem_ram_0+0x77ffaa1c>
   1abb8:	d8c01517 	ldw	r3,84(sp)
   1abbc:	a88011e0 	cmpeqi	r2,r21,71
   1abc0:	d8c00815 	stw	r3,32(sp)
   1abc4:	d8c01917 	ldw	r3,100(sp)
   1abc8:	1cc7c83a 	sub	r3,r3,r19
   1abcc:	d8c00915 	stw	r3,36(sp)
   1abd0:	103f621e 	bne	r2,zero,1a95c <__alt_mem_mcu_subsystem_ram_0+0x77ffa95c>
   1abd4:	003f6606 	br	1a970 <__alt_mem_mcu_subsystem_ram_0+0x77ffa970>
   1abd8:	02c000f4 	movhi	r11,3
   1abdc:	217ffc08 	cmpgei	r5,r4,-16
   1abe0:	5acdf5c4 	addi	r11,r11,14295
   1abe4:	0121c83a 	sub	r16,zero,r4
   1abe8:	28001b1e 	bne	r5,zero,1ac58 <___vfprintf_internal_r+0x1d3c>
   1abec:	b82d883a 	mov	r22,r23
   1abf0:	04400404 	movi	r17,16
   1abf4:	582f883a 	mov	r23,r11
   1abf8:	00000406 	br	1ac0c <___vfprintf_internal_r+0x1cf0>
   1abfc:	42000204 	addi	r8,r8,8
   1ac00:	843ffc04 	addi	r16,r16,-16
   1ac04:	81000448 	cmpgei	r4,r16,17
   1ac08:	20001126 	beq	r4,zero,1ac50 <___vfprintf_internal_r+0x1d34>
   1ac0c:	10800044 	addi	r2,r2,1
   1ac10:	18c00404 	addi	r3,r3,16
   1ac14:	45c00015 	stw	r23,0(r8)
   1ac18:	44400115 	stw	r17,4(r8)
   1ac1c:	d8c01d15 	stw	r3,116(sp)
   1ac20:	d8801c15 	stw	r2,112(sp)
   1ac24:	11000208 	cmpgei	r4,r2,8
   1ac28:	203ff426 	beq	r4,zero,1abfc <__alt_mem_mcu_subsystem_ram_0+0x77ffabfc>
   1ac2c:	d9000417 	ldw	r4,16(sp)
   1ac30:	d9801b04 	addi	r6,sp,108
   1ac34:	b00b883a 	mov	r5,r22
   1ac38:	00224e00 	call	224e0 <__sprint_r>
   1ac3c:	1000901e 	bne	r2,zero,1ae80 <___vfprintf_internal_r+0x1f64>
   1ac40:	d8c01d17 	ldw	r3,116(sp)
   1ac44:	d8801c17 	ldw	r2,112(sp)
   1ac48:	da002804 	addi	r8,sp,160
   1ac4c:	003fec06 	br	1ac00 <__alt_mem_mcu_subsystem_ram_0+0x77ffac00>
   1ac50:	b817883a 	mov	r11,r23
   1ac54:	b02f883a 	mov	r23,r22
   1ac58:	10800044 	addi	r2,r2,1
   1ac5c:	1c07883a 	add	r3,r3,r16
   1ac60:	42c00015 	stw	r11,0(r8)
   1ac64:	44000115 	stw	r16,4(r8)
   1ac68:	d8c01d15 	stw	r3,116(sp)
   1ac6c:	d8801c15 	stw	r2,112(sp)
   1ac70:	11000208 	cmpgei	r4,r2,8
   1ac74:	20006d1e 	bne	r4,zero,1ae2c <___vfprintf_internal_r+0x1f10>
   1ac78:	42000204 	addi	r8,r8,8
   1ac7c:	003c2d06 	br	19d34 <__alt_mem_mcu_subsystem_ram_0+0x77ff9d34>
   1ac80:	dd801ac4 	addi	r22,sp,107
   1ac84:	b02b883a 	mov	r21,r22
   1ac88:	dac00815 	stw	r11,32(sp)
   1ac8c:	da000d15 	stw	r8,52(sp)
   1ac90:	00000106 	br	1ac98 <___vfprintf_internal_r+0x1d7c>
   1ac94:	182b883a 	mov	r21,r3
   1ac98:	8009883a 	mov	r4,r16
   1ac9c:	01400284 	movi	r5,10
   1aca0:	00129dc0 	call	129dc <__modsi3>
   1aca4:	10800c04 	addi	r2,r2,48
   1aca8:	8009883a 	mov	r4,r16
   1acac:	a8bfffc5 	stb	r2,-1(r21)
   1acb0:	01400284 	movi	r5,10
   1acb4:	00129540 	call	12954 <__divsi3>
   1acb8:	1021883a 	mov	r16,r2
   1acbc:	10800288 	cmpgei	r2,r2,10
   1acc0:	a8ffffc4 	addi	r3,r21,-1
   1acc4:	103ff31e 	bne	r2,zero,1ac94 <__alt_mem_mcu_subsystem_ram_0+0x77ffac94>
   1acc8:	80800c04 	addi	r2,r16,48
   1accc:	ad7fff84 	addi	r21,r21,-2
   1acd0:	18bfffc5 	stb	r2,-1(r3)
   1acd4:	dac00817 	ldw	r11,32(sp)
   1acd8:	da000d17 	ldw	r8,52(sp)
   1acdc:	ad806a2e 	bgeu	r21,r22,1ae88 <___vfprintf_internal_r+0x1f6c>
   1ace0:	d90017c4 	addi	r4,sp,95
   1ace4:	00000106 	br	1acec <___vfprintf_internal_r+0x1dd0>
   1ace8:	a8800003 	ldbu	r2,0(r21)
   1acec:	21000044 	addi	r4,r4,1
   1acf0:	ad400044 	addi	r21,r21,1
   1acf4:	20bfffc5 	stb	r2,-1(r4)
   1acf8:	adbffb1e 	bne	r21,r22,1ace8 <__alt_mem_mcu_subsystem_ram_0+0x77fface8>
   1acfc:	d8801b04 	addi	r2,sp,108
   1ad00:	10c7c83a 	sub	r3,r2,r3
   1ad04:	d88017c4 	addi	r2,sp,95
   1ad08:	10c7883a 	add	r3,r2,r3
   1ad0c:	003f2606 	br	1a9a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa9a8>
   1ad10:	d9000a17 	ldw	r4,40(sp)
   1ad14:	180b883a 	mov	r5,r3
   1ad18:	000d883a 	mov	r6,zero
   1ad1c:	000f883a 	mov	r7,zero
   1ad20:	da001215 	stw	r8,72(sp)
   1ad24:	dac00915 	stw	r11,36(sp)
   1ad28:	d8c00815 	stw	r3,32(sp)
   1ad2c:	db001115 	stw	r12,68(sp)
   1ad30:	0024c980 	call	24c98 <__eqdf2>
   1ad34:	d8c00817 	ldw	r3,32(sp)
   1ad38:	dac00917 	ldw	r11,36(sp)
   1ad3c:	da001217 	ldw	r8,72(sp)
   1ad40:	103eda26 	beq	r2,zero,1a8ac <__alt_mem_mcu_subsystem_ram_0+0x77ffa8ac>
   1ad44:	db001117 	ldw	r12,68(sp)
   1ad48:	00800044 	movi	r2,1
   1ad4c:	1319c83a 	sub	r12,r2,r12
   1ad50:	db001515 	stw	r12,84(sp)
   1ad54:	003ed606 	br	1a8b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffa8b0>
   1ad58:	102b883a 	mov	r21,r2
   1ad5c:	1000010e 	bge	r2,zero,1ad64 <___vfprintf_internal_r+0x1e48>
   1ad60:	002b883a 	mov	r21,zero
   1ad64:	dc000817 	ldw	r16,32(sp)
   1ad68:	044019c4 	movi	r17,103
   1ad6c:	003d5d06 	br	1a2e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2e4>
   1ad70:	d8800b17 	ldw	r2,44(sp)
   1ad74:	10002316 	blt	r2,zero,1ae04 <___vfprintf_internal_r+0x1ee8>
   1ad78:	db001443 	ldbu	r12,81(sp)
   1ad7c:	88801208 	cmpgei	r2,r17,72
   1ad80:	10001d1e 	bne	r2,zero,1adf8 <___vfprintf_internal_r+0x1edc>
   1ad84:	04c000f4 	movhi	r19,3
   1ad88:	9ccdca04 	addi	r19,r19,14120
   1ad8c:	003b5706 	br	19aec <__alt_mem_mcu_subsystem_ram_0+0x77ff9aec>
   1ad90:	5880004c 	andi	r2,r11,1
   1ad94:	d8800815 	stw	r2,32(sp)
   1ad98:	103f0a1e 	bne	r2,zero,1a9c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa9c4>
   1ad9c:	802b883a 	mov	r21,r16
   1ada0:	803d500e 	bge	r16,zero,1a2e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2e4>
   1ada4:	002b883a 	mov	r21,zero
   1ada8:	003d4e06 	br	1a2e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2e4>
   1adac:	d8800817 	ldw	r2,32(sp)
   1adb0:	d8c00c17 	ldw	r3,48(sp)
   1adb4:	10e1883a 	add	r16,r2,r3
   1adb8:	85a1883a 	add	r16,r16,r22
   1adbc:	003ff706 	br	1ad9c <__alt_mem_mcu_subsystem_ram_0+0x77ffad9c>
   1adc0:	04000044 	movi	r16,1
   1adc4:	80a1c83a 	sub	r16,r16,r2
   1adc8:	00800b44 	movi	r2,45
   1adcc:	d8801785 	stb	r2,94(sp)
   1add0:	003eee06 	br	1a98c <__alt_mem_mcu_subsystem_ram_0+0x77ffa98c>
   1add4:	b0000f1e 	bne	r22,zero,1ae14 <___vfprintf_internal_r+0x1ef8>
   1add8:	5ac0004c 	andi	r11,r11,1
   1addc:	58000d1e 	bne	r11,zero,1ae14 <___vfprintf_internal_r+0x1ef8>
   1ade0:	05400044 	movi	r21,1
   1ade4:	04000044 	movi	r16,1
   1ade8:	003d3e06 	br	1a2e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa2e4>
   1adec:	4005883a 	mov	r2,r8
   1adf0:	5acdf5c4 	addi	r11,r11,14295
   1adf4:	003e6b06 	br	1a7a4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa7a4>
   1adf8:	04c000f4 	movhi	r19,3
   1adfc:	9ccdcb04 	addi	r19,r19,14124
   1ae00:	003b3a06 	br	19aec <__alt_mem_mcu_subsystem_ram_0+0x77ff9aec>
   1ae04:	00800b44 	movi	r2,45
   1ae08:	d8801445 	stb	r2,81(sp)
   1ae0c:	03000b44 	movi	r12,45
   1ae10:	003fda06 	br	1ad7c <__alt_mem_mcu_subsystem_ram_0+0x77ffad7c>
   1ae14:	d8800c17 	ldw	r2,48(sp)
   1ae18:	14000044 	addi	r16,r2,1
   1ae1c:	85a1883a 	add	r16,r16,r22
   1ae20:	003fde06 	br	1ad9c <__alt_mem_mcu_subsystem_ram_0+0x77ffad9c>
   1ae24:	9b21883a 	add	r16,r19,r12
   1ae28:	003d1406 	br	1a27c <__alt_mem_mcu_subsystem_ram_0+0x77ffa27c>
   1ae2c:	d9000417 	ldw	r4,16(sp)
   1ae30:	d9801b04 	addi	r6,sp,108
   1ae34:	b80b883a 	mov	r5,r23
   1ae38:	00224e00 	call	224e0 <__sprint_r>
   1ae3c:	103aa61e 	bne	r2,zero,198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1ae40:	d8c01d17 	ldw	r3,116(sp)
   1ae44:	d8801c17 	ldw	r2,112(sp)
   1ae48:	da002804 	addi	r8,sp,160
   1ae4c:	003bb906 	br	19d34 <__alt_mem_mcu_subsystem_ram_0+0x77ff9d34>
   1ae50:	d8800717 	ldw	r2,28(sp)
   1ae54:	15800017 	ldw	r22,0(r2)
   1ae58:	10800104 	addi	r2,r2,4
   1ae5c:	b000010e 	bge	r22,zero,1ae64 <___vfprintf_internal_r+0x1f48>
   1ae60:	05bfffc4 	movi	r22,-1
   1ae64:	e4400043 	ldbu	r17,1(fp)
   1ae68:	d8800715 	stw	r2,28(sp)
   1ae6c:	1839883a 	mov	fp,r3
   1ae70:	8c403fcc 	andi	r17,r17,255
   1ae74:	8c40201c 	xori	r17,r17,128
   1ae78:	8c7fe004 	addi	r17,r17,-128
   1ae7c:	00388106 	br	19084 <__alt_mem_mcu_subsystem_ram_0+0x77ff9084>
   1ae80:	b02f883a 	mov	r23,r22
   1ae84:	003a9406 	br	198d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff98d8>
   1ae88:	d8c017c4 	addi	r3,sp,95
   1ae8c:	003ec606 	br	1a9a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffa9a8>
   1ae90:	d9401445 	stb	r5,81(sp)
   1ae94:	00394506 	br	193ac <__alt_mem_mcu_subsystem_ram_0+0x77ff93ac>
   1ae98:	d9401445 	stb	r5,81(sp)
   1ae9c:	003ae806 	br	19a40 <__alt_mem_mcu_subsystem_ram_0+0x77ff9a40>
   1aea0:	d9401445 	stb	r5,81(sp)
   1aea4:	00398506 	br	194bc <__alt_mem_mcu_subsystem_ram_0+0x77ff94bc>
   1aea8:	b019883a 	mov	r12,r22
   1aeac:	003ea206 	br	1a938 <__alt_mem_mcu_subsystem_ram_0+0x77ffa938>
   1aeb0:	d9401445 	stb	r5,81(sp)
   1aeb4:	00399806 	br	19518 <__alt_mem_mcu_subsystem_ram_0+0x77ff9518>
   1aeb8:	d9401445 	stb	r5,81(sp)
   1aebc:	00394106 	br	193c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff93c4>
   1aec0:	d9401445 	stb	r5,81(sp)
   1aec4:	003a9606 	br	19920 <__alt_mem_mcu_subsystem_ram_0+0x77ff9920>
   1aec8:	d9401445 	stb	r5,81(sp)
   1aecc:	003b1006 	br	19b10 <__alt_mem_mcu_subsystem_ram_0+0x77ff9b10>

0001aed0 <__vfprintf_internal>:
   1aed0:	008000f4 	movhi	r2,3
   1aed4:	300f883a 	mov	r7,r6
   1aed8:	280d883a 	mov	r6,r5
   1aedc:	200b883a 	mov	r5,r4
   1aee0:	111e6617 	ldw	r4,31128(r2)
   1aee4:	0018f1c1 	jmpi	18f1c <___vfprintf_internal_r>

0001aee8 <__sbprintf>:
   1aee8:	2880030b 	ldhu	r2,12(r5)
   1aeec:	2b001917 	ldw	r12,100(r5)
   1aef0:	2ac0038b 	ldhu	r11,14(r5)
   1aef4:	2a800717 	ldw	r10,28(r5)
   1aef8:	2a400917 	ldw	r9,36(r5)
   1aefc:	defee204 	addi	sp,sp,-1144
   1af00:	da001a04 	addi	r8,sp,104
   1af04:	00c10004 	movi	r3,1024
   1af08:	dc011a15 	stw	r16,1128(sp)
   1af0c:	10bfff4c 	andi	r2,r2,65533
   1af10:	2821883a 	mov	r16,r5
   1af14:	d80b883a 	mov	r5,sp
   1af18:	dc811c15 	stw	r18,1136(sp)
   1af1c:	dc411b15 	stw	r17,1132(sp)
   1af20:	dfc11d15 	stw	ra,1140(sp)
   1af24:	2025883a 	mov	r18,r4
   1af28:	d880030d 	sth	r2,12(sp)
   1af2c:	db001915 	stw	r12,100(sp)
   1af30:	dac0038d 	sth	r11,14(sp)
   1af34:	da800715 	stw	r10,28(sp)
   1af38:	da400915 	stw	r9,36(sp)
   1af3c:	da000015 	stw	r8,0(sp)
   1af40:	da000415 	stw	r8,16(sp)
   1af44:	d8c00215 	stw	r3,8(sp)
   1af48:	d8c00515 	stw	r3,20(sp)
   1af4c:	d8000615 	stw	zero,24(sp)
   1af50:	0018f1c0 	call	18f1c <___vfprintf_internal_r>
   1af54:	1023883a 	mov	r17,r2
   1af58:	10000d0e 	bge	r2,zero,1af90 <__sbprintf+0xa8>
   1af5c:	d880030b 	ldhu	r2,12(sp)
   1af60:	1080100c 	andi	r2,r2,64
   1af64:	10000326 	beq	r2,zero,1af74 <__sbprintf+0x8c>
   1af68:	8080030b 	ldhu	r2,12(r16)
   1af6c:	10801014 	ori	r2,r2,64
   1af70:	8080030d 	sth	r2,12(r16)
   1af74:	8805883a 	mov	r2,r17
   1af78:	dfc11d17 	ldw	ra,1140(sp)
   1af7c:	dc811c17 	ldw	r18,1136(sp)
   1af80:	dc411b17 	ldw	r17,1132(sp)
   1af84:	dc011a17 	ldw	r16,1128(sp)
   1af88:	dec11e04 	addi	sp,sp,1144
   1af8c:	f800283a 	ret
   1af90:	d80b883a 	mov	r5,sp
   1af94:	9009883a 	mov	r4,r18
   1af98:	001cc840 	call	1cc84 <_fflush_r>
   1af9c:	103fef26 	beq	r2,zero,1af5c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf5c>
   1afa0:	047fffc4 	movi	r17,-1
   1afa4:	003fed06 	br	1af5c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf5c>

0001afa8 <_wctomb_r>:
   1afa8:	008000f4 	movhi	r2,3
   1afac:	109e6617 	ldw	r2,31128(r2)
   1afb0:	10800d17 	ldw	r2,52(r2)
   1afb4:	1000021e 	bne	r2,zero,1afc0 <_wctomb_r+0x18>
   1afb8:	008000f4 	movhi	r2,3
   1afbc:	10980104 	addi	r2,r2,24580
   1afc0:	10803817 	ldw	r2,224(r2)
   1afc4:	1000683a 	jmp	r2

0001afc8 <__ascii_wctomb>:
   1afc8:	28000526 	beq	r5,zero,1afe0 <__ascii_wctomb+0x18>
   1afcc:	30804030 	cmpltui	r2,r6,256
   1afd0:	10000526 	beq	r2,zero,1afe8 <__ascii_wctomb+0x20>
   1afd4:	29800005 	stb	r6,0(r5)
   1afd8:	00800044 	movi	r2,1
   1afdc:	f800283a 	ret
   1afe0:	0005883a 	mov	r2,zero
   1afe4:	f800283a 	ret
   1afe8:	00802284 	movi	r2,138
   1afec:	20800015 	stw	r2,0(r4)
   1aff0:	00bfffc4 	movi	r2,-1
   1aff4:	f800283a 	ret

0001aff8 <__swsetup_r>:
   1aff8:	008000f4 	movhi	r2,3
   1affc:	109e6617 	ldw	r2,31128(r2)
   1b000:	defffd04 	addi	sp,sp,-12
   1b004:	dc400115 	stw	r17,4(sp)
   1b008:	dc000015 	stw	r16,0(sp)
   1b00c:	dfc00215 	stw	ra,8(sp)
   1b010:	2023883a 	mov	r17,r4
   1b014:	2821883a 	mov	r16,r5
   1b018:	10000226 	beq	r2,zero,1b024 <__swsetup_r+0x2c>
   1b01c:	10c00e17 	ldw	r3,56(r2)
   1b020:	18003226 	beq	r3,zero,1b0ec <__swsetup_r+0xf4>
   1b024:	8080030b 	ldhu	r2,12(r16)
   1b028:	10c0020c 	andi	r3,r2,8
   1b02c:	1009883a 	mov	r4,r2
   1b030:	18000f26 	beq	r3,zero,1b070 <__swsetup_r+0x78>
   1b034:	80c00417 	ldw	r3,16(r16)
   1b038:	18001526 	beq	r3,zero,1b090 <__swsetup_r+0x98>
   1b03c:	1100004c 	andi	r4,r2,1
   1b040:	20001d1e 	bne	r4,zero,1b0b8 <__swsetup_r+0xc0>
   1b044:	1080008c 	andi	r2,r2,2
   1b048:	10002b1e 	bne	r2,zero,1b0f8 <__swsetup_r+0x100>
   1b04c:	80800517 	ldw	r2,20(r16)
   1b050:	80800215 	stw	r2,8(r16)
   1b054:	18001d26 	beq	r3,zero,1b0cc <__swsetup_r+0xd4>
   1b058:	0005883a 	mov	r2,zero
   1b05c:	dfc00217 	ldw	ra,8(sp)
   1b060:	dc400117 	ldw	r17,4(sp)
   1b064:	dc000017 	ldw	r16,0(sp)
   1b068:	dec00304 	addi	sp,sp,12
   1b06c:	f800283a 	ret
   1b070:	2080040c 	andi	r2,r4,16
   1b074:	10003026 	beq	r2,zero,1b138 <__swsetup_r+0x140>
   1b078:	2080010c 	andi	r2,r4,4
   1b07c:	1000201e 	bne	r2,zero,1b100 <__swsetup_r+0x108>
   1b080:	80c00417 	ldw	r3,16(r16)
   1b084:	20800214 	ori	r2,r4,8
   1b088:	8080030d 	sth	r2,12(r16)
   1b08c:	183feb1e 	bne	r3,zero,1b03c <__alt_mem_mcu_subsystem_ram_0+0x77ffb03c>
   1b090:	1100a00c 	andi	r4,r2,640
   1b094:	21008020 	cmpeqi	r4,r4,512
   1b098:	203fe81e 	bne	r4,zero,1b03c <__alt_mem_mcu_subsystem_ram_0+0x77ffb03c>
   1b09c:	8809883a 	mov	r4,r17
   1b0a0:	800b883a 	mov	r5,r16
   1b0a4:	001dc740 	call	1dc74 <__smakebuf_r>
   1b0a8:	8080030b 	ldhu	r2,12(r16)
   1b0ac:	80c00417 	ldw	r3,16(r16)
   1b0b0:	1100004c 	andi	r4,r2,1
   1b0b4:	203fe326 	beq	r4,zero,1b044 <__alt_mem_mcu_subsystem_ram_0+0x77ffb044>
   1b0b8:	80800517 	ldw	r2,20(r16)
   1b0bc:	80000215 	stw	zero,8(r16)
   1b0c0:	0085c83a 	sub	r2,zero,r2
   1b0c4:	80800615 	stw	r2,24(r16)
   1b0c8:	183fe31e 	bne	r3,zero,1b058 <__alt_mem_mcu_subsystem_ram_0+0x77ffb058>
   1b0cc:	80c0030b 	ldhu	r3,12(r16)
   1b0d0:	0005883a 	mov	r2,zero
   1b0d4:	1900200c 	andi	r4,r3,128
   1b0d8:	203fe026 	beq	r4,zero,1b05c <__alt_mem_mcu_subsystem_ram_0+0x77ffb05c>
   1b0dc:	18c01014 	ori	r3,r3,64
   1b0e0:	80c0030d 	sth	r3,12(r16)
   1b0e4:	00bfffc4 	movi	r2,-1
   1b0e8:	003fdc06 	br	1b05c <__alt_mem_mcu_subsystem_ram_0+0x77ffb05c>
   1b0ec:	1009883a 	mov	r4,r2
   1b0f0:	001d0240 	call	1d024 <__sinit>
   1b0f4:	003fcb06 	br	1b024 <__alt_mem_mcu_subsystem_ram_0+0x77ffb024>
   1b0f8:	0005883a 	mov	r2,zero
   1b0fc:	003fd406 	br	1b050 <__alt_mem_mcu_subsystem_ram_0+0x77ffb050>
   1b100:	81400c17 	ldw	r5,48(r16)
   1b104:	28000626 	beq	r5,zero,1b120 <__swsetup_r+0x128>
   1b108:	80801004 	addi	r2,r16,64
   1b10c:	28800326 	beq	r5,r2,1b11c <__swsetup_r+0x124>
   1b110:	8809883a 	mov	r4,r17
   1b114:	001d1880 	call	1d188 <_free_r>
   1b118:	8100030b 	ldhu	r4,12(r16)
   1b11c:	80000c15 	stw	zero,48(r16)
   1b120:	80c00417 	ldw	r3,16(r16)
   1b124:	00bff6c4 	movi	r2,-37
   1b128:	1108703a 	and	r4,r2,r4
   1b12c:	80000115 	stw	zero,4(r16)
   1b130:	80c00015 	stw	r3,0(r16)
   1b134:	003fd306 	br	1b084 <__alt_mem_mcu_subsystem_ram_0+0x77ffb084>
   1b138:	00800244 	movi	r2,9
   1b13c:	88800015 	stw	r2,0(r17)
   1b140:	20801014 	ori	r2,r4,64
   1b144:	8080030d 	sth	r2,12(r16)
   1b148:	00bfffc4 	movi	r2,-1
   1b14c:	003fc306 	br	1b05c <__alt_mem_mcu_subsystem_ram_0+0x77ffb05c>

0001b150 <div>:
   1b150:	defffc04 	addi	sp,sp,-16
   1b154:	dfc00315 	stw	ra,12(sp)
   1b158:	dc800215 	stw	r18,8(sp)
   1b15c:	dc400115 	stw	r17,4(sp)
   1b160:	dc000015 	stw	r16,0(sp)
   1b164:	2825883a 	mov	r18,r5
   1b168:	2021883a 	mov	r16,r4
   1b16c:	00129540 	call	12954 <__divsi3>
   1b170:	900b883a 	mov	r5,r18
   1b174:	8009883a 	mov	r4,r16
   1b178:	1023883a 	mov	r17,r2
   1b17c:	00129dc0 	call	129dc <__modsi3>
   1b180:	1007883a 	mov	r3,r2
   1b184:	80000b16 	blt	r16,zero,1b1b4 <div+0x64>
   1b188:	10000716 	blt	r2,zero,1b1a8 <div+0x58>
   1b18c:	8805883a 	mov	r2,r17
   1b190:	dfc00317 	ldw	ra,12(sp)
   1b194:	dc800217 	ldw	r18,8(sp)
   1b198:	dc400117 	ldw	r17,4(sp)
   1b19c:	dc000017 	ldw	r16,0(sp)
   1b1a0:	dec00404 	addi	sp,sp,16
   1b1a4:	f800283a 	ret
   1b1a8:	8c400044 	addi	r17,r17,1
   1b1ac:	1487c83a 	sub	r3,r2,r18
   1b1b0:	003ff606 	br	1b18c <__alt_mem_mcu_subsystem_ram_0+0x77ffb18c>
   1b1b4:	00bff50e 	bge	zero,r2,1b18c <__alt_mem_mcu_subsystem_ram_0+0x77ffb18c>
   1b1b8:	8c7fffc4 	addi	r17,r17,-1
   1b1bc:	1487883a 	add	r3,r2,r18
   1b1c0:	003ff206 	br	1b18c <__alt_mem_mcu_subsystem_ram_0+0x77ffb18c>

0001b1c4 <quorem>:
   1b1c4:	defff704 	addi	sp,sp,-36
   1b1c8:	dc800215 	stw	r18,8(sp)
   1b1cc:	20800417 	ldw	r2,16(r4)
   1b1d0:	2c800417 	ldw	r18,16(r5)
   1b1d4:	dfc00815 	stw	ra,32(sp)
   1b1d8:	ddc00715 	stw	r23,28(sp)
   1b1dc:	dd800615 	stw	r22,24(sp)
   1b1e0:	dd400515 	stw	r21,20(sp)
   1b1e4:	dd000415 	stw	r20,16(sp)
   1b1e8:	dcc00315 	stw	r19,12(sp)
   1b1ec:	dc400115 	stw	r17,4(sp)
   1b1f0:	dc000015 	stw	r16,0(sp)
   1b1f4:	14806f16 	blt	r2,r18,1b3b4 <quorem+0x1f0>
   1b1f8:	94bfffc4 	addi	r18,r18,-1
   1b1fc:	902e90ba 	slli	r23,r18,2
   1b200:	2c400504 	addi	r17,r5,20
   1b204:	25400504 	addi	r21,r4,20
   1b208:	8de9883a 	add	r20,r17,r23
   1b20c:	282d883a 	mov	r22,r5
   1b210:	adef883a 	add	r23,r21,r23
   1b214:	a1400017 	ldw	r5,0(r20)
   1b218:	2021883a 	mov	r16,r4
   1b21c:	b9000017 	ldw	r4,0(r23)
   1b220:	29400044 	addi	r5,r5,1
   1b224:	0012a540 	call	12a54 <__udivsi3>
   1b228:	1027883a 	mov	r19,r2
   1b22c:	10002c26 	beq	r2,zero,1b2e0 <quorem+0x11c>
   1b230:	8813883a 	mov	r9,r17
   1b234:	a811883a 	mov	r8,r21
   1b238:	0015883a 	mov	r10,zero
   1b23c:	0007883a 	mov	r3,zero
   1b240:	4a400104 	addi	r9,r9,4
   1b244:	49ffff17 	ldw	r7,-4(r9)
   1b248:	41800017 	ldw	r6,0(r8)
   1b24c:	42000104 	addi	r8,r8,4
   1b250:	397fffcc 	andi	r5,r7,65535
   1b254:	2ccb383a 	mul	r5,r5,r19
   1b258:	3808d43a 	srli	r4,r7,16
   1b25c:	32ffffcc 	andi	r11,r6,65535
   1b260:	2a8b883a 	add	r5,r5,r10
   1b264:	28bfffcc 	andi	r2,r5,65535
   1b268:	280ed43a 	srli	r7,r5,16
   1b26c:	24c9383a 	mul	r4,r4,r19
   1b270:	1887c83a 	sub	r3,r3,r2
   1b274:	1ac5883a 	add	r2,r3,r11
   1b278:	3006d43a 	srli	r3,r6,16
   1b27c:	21c9883a 	add	r4,r4,r7
   1b280:	100bd43a 	srai	r5,r2,16
   1b284:	21bfffcc 	andi	r6,r4,65535
   1b288:	1987c83a 	sub	r3,r3,r6
   1b28c:	1947883a 	add	r3,r3,r5
   1b290:	180c943a 	slli	r6,r3,16
   1b294:	10bfffcc 	andi	r2,r2,65535
   1b298:	2014d43a 	srli	r10,r4,16
   1b29c:	3084b03a 	or	r2,r6,r2
   1b2a0:	40bfff15 	stw	r2,-4(r8)
   1b2a4:	1807d43a 	srai	r3,r3,16
   1b2a8:	a27fe52e 	bgeu	r20,r9,1b240 <__alt_mem_mcu_subsystem_ram_0+0x77ffb240>
   1b2ac:	b8800017 	ldw	r2,0(r23)
   1b2b0:	10000b1e 	bne	r2,zero,1b2e0 <quorem+0x11c>
   1b2b4:	b8bfff04 	addi	r2,r23,-4
   1b2b8:	a880082e 	bgeu	r21,r2,1b2dc <quorem+0x118>
   1b2bc:	b8ffff17 	ldw	r3,-4(r23)
   1b2c0:	18000326 	beq	r3,zero,1b2d0 <quorem+0x10c>
   1b2c4:	00000506 	br	1b2dc <quorem+0x118>
   1b2c8:	10c00017 	ldw	r3,0(r2)
   1b2cc:	1800031e 	bne	r3,zero,1b2dc <quorem+0x118>
   1b2d0:	10bfff04 	addi	r2,r2,-4
   1b2d4:	94bfffc4 	addi	r18,r18,-1
   1b2d8:	a8bffb36 	bltu	r21,r2,1b2c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb2c8>
   1b2dc:	84800415 	stw	r18,16(r16)
   1b2e0:	b00b883a 	mov	r5,r22
   1b2e4:	8009883a 	mov	r4,r16
   1b2e8:	001e84c0 	call	1e84c <__mcmp>
   1b2ec:	10002516 	blt	r2,zero,1b384 <quorem+0x1c0>
   1b2f0:	9cc00044 	addi	r19,r19,1
   1b2f4:	a80d883a 	mov	r6,r21
   1b2f8:	0007883a 	mov	r3,zero
   1b2fc:	8c400104 	addi	r17,r17,4
   1b300:	88bfff17 	ldw	r2,-4(r17)
   1b304:	31400017 	ldw	r5,0(r6)
   1b308:	31800104 	addi	r6,r6,4
   1b30c:	113fffcc 	andi	r4,r2,65535
   1b310:	1907c83a 	sub	r3,r3,r4
   1b314:	293fffcc 	andi	r4,r5,65535
   1b318:	1909883a 	add	r4,r3,r4
   1b31c:	1004d43a 	srli	r2,r2,16
   1b320:	2806d43a 	srli	r3,r5,16
   1b324:	200fd43a 	srai	r7,r4,16
   1b328:	217fffcc 	andi	r5,r4,65535
   1b32c:	1887c83a 	sub	r3,r3,r2
   1b330:	19c7883a 	add	r3,r3,r7
   1b334:	1808943a 	slli	r4,r3,16
   1b338:	1807d43a 	srai	r3,r3,16
   1b33c:	2148b03a 	or	r4,r4,r5
   1b340:	313fff15 	stw	r4,-4(r6)
   1b344:	a47fed2e 	bgeu	r20,r17,1b2fc <__alt_mem_mcu_subsystem_ram_0+0x77ffb2fc>
   1b348:	900690ba 	slli	r3,r18,2
   1b34c:	a8c7883a 	add	r3,r21,r3
   1b350:	18800017 	ldw	r2,0(r3)
   1b354:	10000b1e 	bne	r2,zero,1b384 <quorem+0x1c0>
   1b358:	18bfff04 	addi	r2,r3,-4
   1b35c:	a880082e 	bgeu	r21,r2,1b380 <quorem+0x1bc>
   1b360:	18ffff17 	ldw	r3,-4(r3)
   1b364:	18000326 	beq	r3,zero,1b374 <quorem+0x1b0>
   1b368:	00000506 	br	1b380 <quorem+0x1bc>
   1b36c:	10c00017 	ldw	r3,0(r2)
   1b370:	1800031e 	bne	r3,zero,1b380 <quorem+0x1bc>
   1b374:	10bfff04 	addi	r2,r2,-4
   1b378:	94bfffc4 	addi	r18,r18,-1
   1b37c:	a8bffb36 	bltu	r21,r2,1b36c <__alt_mem_mcu_subsystem_ram_0+0x77ffb36c>
   1b380:	84800415 	stw	r18,16(r16)
   1b384:	9805883a 	mov	r2,r19
   1b388:	dfc00817 	ldw	ra,32(sp)
   1b38c:	ddc00717 	ldw	r23,28(sp)
   1b390:	dd800617 	ldw	r22,24(sp)
   1b394:	dd400517 	ldw	r21,20(sp)
   1b398:	dd000417 	ldw	r20,16(sp)
   1b39c:	dcc00317 	ldw	r19,12(sp)
   1b3a0:	dc800217 	ldw	r18,8(sp)
   1b3a4:	dc400117 	ldw	r17,4(sp)
   1b3a8:	dc000017 	ldw	r16,0(sp)
   1b3ac:	dec00904 	addi	sp,sp,36
   1b3b0:	f800283a 	ret
   1b3b4:	0005883a 	mov	r2,zero
   1b3b8:	003ff306 	br	1b388 <__alt_mem_mcu_subsystem_ram_0+0x77ffb388>

0001b3bc <_dtoa_r>:
   1b3bc:	20801017 	ldw	r2,64(r4)
   1b3c0:	deffe004 	addi	sp,sp,-128
   1b3c4:	dd001a15 	stw	r20,104(sp)
   1b3c8:	dcc01915 	stw	r19,100(sp)
   1b3cc:	dc001615 	stw	r16,88(sp)
   1b3d0:	dfc01f15 	stw	ra,124(sp)
   1b3d4:	df001e15 	stw	fp,120(sp)
   1b3d8:	ddc01d15 	stw	r23,116(sp)
   1b3dc:	dd801c15 	stw	r22,112(sp)
   1b3e0:	dd401b15 	stw	r21,108(sp)
   1b3e4:	dc801815 	stw	r18,96(sp)
   1b3e8:	dc401715 	stw	r17,92(sp)
   1b3ec:	d9400115 	stw	r5,4(sp)
   1b3f0:	d9c00215 	stw	r7,8(sp)
   1b3f4:	2021883a 	mov	r16,r4
   1b3f8:	3029883a 	mov	r20,r6
   1b3fc:	3027883a 	mov	r19,r6
   1b400:	10000826 	beq	r2,zero,1b424 <_dtoa_r+0x68>
   1b404:	21801117 	ldw	r6,68(r4)
   1b408:	00c00044 	movi	r3,1
   1b40c:	100b883a 	mov	r5,r2
   1b410:	1986983a 	sll	r3,r3,r6
   1b414:	11800115 	stw	r6,4(r2)
   1b418:	10c00215 	stw	r3,8(r2)
   1b41c:	001e0580 	call	1e058 <_Bfree>
   1b420:	80001015 	stw	zero,64(r16)
   1b424:	a000b216 	blt	r20,zero,1b6f0 <_dtoa_r+0x334>
   1b428:	d8802217 	ldw	r2,136(sp)
   1b42c:	00dffc34 	movhi	r3,32752
   1b430:	10000015 	stw	zero,0(r2)
   1b434:	a09ffc2c 	andhi	r2,r20,32752
   1b438:	10c0b726 	beq	r2,r3,1b718 <_dtoa_r+0x35c>
   1b43c:	d9000117 	ldw	r4,4(sp)
   1b440:	000d883a 	mov	r6,zero
   1b444:	000f883a 	mov	r7,zero
   1b448:	980b883a 	mov	r5,r19
   1b44c:	0024c980 	call	24c98 <__eqdf2>
   1b450:	1000181e 	bne	r2,zero,1b4b4 <_dtoa_r+0xf8>
   1b454:	d8c02117 	ldw	r3,132(sp)
   1b458:	00800044 	movi	r2,1
   1b45c:	18800015 	stw	r2,0(r3)
   1b460:	d8802317 	ldw	r2,140(sp)
   1b464:	1000d026 	beq	r2,zero,1b7a8 <_dtoa_r+0x3ec>
   1b468:	d8c02317 	ldw	r3,140(sp)
   1b46c:	008000f4 	movhi	r2,3
   1b470:	108dd844 	addi	r2,r2,14177
   1b474:	058000f4 	movhi	r22,3
   1b478:	18800015 	stw	r2,0(r3)
   1b47c:	b58dd804 	addi	r22,r22,14176
   1b480:	b005883a 	mov	r2,r22
   1b484:	dfc01f17 	ldw	ra,124(sp)
   1b488:	df001e17 	ldw	fp,120(sp)
   1b48c:	ddc01d17 	ldw	r23,116(sp)
   1b490:	dd801c17 	ldw	r22,112(sp)
   1b494:	dd401b17 	ldw	r21,108(sp)
   1b498:	dd001a17 	ldw	r20,104(sp)
   1b49c:	dcc01917 	ldw	r19,100(sp)
   1b4a0:	dc801817 	ldw	r18,96(sp)
   1b4a4:	dc401717 	ldw	r17,92(sp)
   1b4a8:	dc001617 	ldw	r16,88(sp)
   1b4ac:	dec02004 	addi	sp,sp,128
   1b4b0:	f800283a 	ret
   1b4b4:	dc800117 	ldw	r18,4(sp)
   1b4b8:	d8801404 	addi	r2,sp,80
   1b4bc:	a022d53a 	srli	r17,r20,20
   1b4c0:	d8800015 	stw	r2,0(sp)
   1b4c4:	d9c01504 	addi	r7,sp,84
   1b4c8:	900b883a 	mov	r5,r18
   1b4cc:	980d883a 	mov	r6,r19
   1b4d0:	8009883a 	mov	r4,r16
   1b4d4:	001ebcc0 	call	1ebcc <__d2b>
   1b4d8:	102f883a 	mov	r23,r2
   1b4dc:	8800a91e 	bne	r17,zero,1b784 <_dtoa_r+0x3c8>
   1b4e0:	dc801417 	ldw	r18,80(sp)
   1b4e4:	dc401517 	ldw	r17,84(sp)
   1b4e8:	9463883a 	add	r17,r18,r17
   1b4ec:	88810c84 	addi	r2,r17,1074
   1b4f0:	10c00850 	cmplti	r3,r2,33
   1b4f4:	18035d1e 	bne	r3,zero,1c26c <_dtoa_r+0xeb0>
   1b4f8:	01001004 	movi	r4,64
   1b4fc:	2085c83a 	sub	r2,r4,r2
   1b500:	a0a8983a 	sll	r20,r20,r2
   1b504:	d8800117 	ldw	r2,4(sp)
   1b508:	89010484 	addi	r4,r17,1042
   1b50c:	1108d83a 	srl	r4,r2,r4
   1b510:	a108b03a 	or	r4,r20,r4
   1b514:	0014dac0 	call	14dac <__floatunsidf>
   1b518:	1009883a 	mov	r4,r2
   1b51c:	017f8434 	movhi	r5,65040
   1b520:	00800044 	movi	r2,1
   1b524:	194b883a 	add	r5,r3,r5
   1b528:	8c7fffc4 	addi	r17,r17,-1
   1b52c:	d8800b15 	stw	r2,44(sp)
   1b530:	000d883a 	mov	r6,zero
   1b534:	01cffe34 	movhi	r7,16376
   1b538:	00144580 	call	14458 <__subdf3>
   1b53c:	0198dbf4 	movhi	r6,25455
   1b540:	01cff4f4 	movhi	r7,16339
   1b544:	3190d844 	addi	r6,r6,17249
   1b548:	39e1e9c4 	addi	r7,r7,-30809
   1b54c:	1009883a 	mov	r4,r2
   1b550:	180b883a 	mov	r5,r3
   1b554:	0013d7c0 	call	13d7c <__muldf3>
   1b558:	01a2d874 	movhi	r6,35681
   1b55c:	01cff1f4 	movhi	r7,16327
   1b560:	31b22cc4 	addi	r6,r6,-14157
   1b564:	39e28a04 	addi	r7,r7,-30168
   1b568:	180b883a 	mov	r5,r3
   1b56c:	1009883a 	mov	r4,r2
   1b570:	0012b100 	call	12b10 <__adddf3>
   1b574:	8809883a 	mov	r4,r17
   1b578:	102b883a 	mov	r21,r2
   1b57c:	1829883a 	mov	r20,r3
   1b580:	0024e4c0 	call	24e4c <__floatsidf>
   1b584:	019427f4 	movhi	r6,20639
   1b588:	01cff4f4 	movhi	r7,16339
   1b58c:	319e7ec4 	addi	r6,r6,31227
   1b590:	39d104c4 	addi	r7,r7,17427
   1b594:	1009883a 	mov	r4,r2
   1b598:	180b883a 	mov	r5,r3
   1b59c:	0013d7c0 	call	13d7c <__muldf3>
   1b5a0:	100d883a 	mov	r6,r2
   1b5a4:	180f883a 	mov	r7,r3
   1b5a8:	a809883a 	mov	r4,r21
   1b5ac:	a00b883a 	mov	r5,r20
   1b5b0:	0012b100 	call	12b10 <__adddf3>
   1b5b4:	1009883a 	mov	r4,r2
   1b5b8:	180b883a 	mov	r5,r3
   1b5bc:	102b883a 	mov	r21,r2
   1b5c0:	1829883a 	mov	r20,r3
   1b5c4:	0014d2c0 	call	14d2c <__fixdfsi>
   1b5c8:	000d883a 	mov	r6,zero
   1b5cc:	000f883a 	mov	r7,zero
   1b5d0:	a809883a 	mov	r4,r21
   1b5d4:	a00b883a 	mov	r5,r20
   1b5d8:	d8800315 	stw	r2,12(sp)
   1b5dc:	0024d180 	call	24d18 <__ledf2>
   1b5e0:	10029416 	blt	r2,zero,1c034 <_dtoa_r+0xc78>
   1b5e4:	dd000317 	ldw	r20,12(sp)
   1b5e8:	a08005e8 	cmpgeui	r2,r20,23
   1b5ec:	1002811e 	bne	r2,zero,1bff4 <_dtoa_r+0xc38>
   1b5f0:	a00690fa 	slli	r3,r20,3
   1b5f4:	008000f4 	movhi	r2,3
   1b5f8:	108ed104 	addi	r2,r2,15172
   1b5fc:	10c5883a 	add	r2,r2,r3
   1b600:	11000017 	ldw	r4,0(r2)
   1b604:	11400117 	ldw	r5,4(r2)
   1b608:	d9800117 	ldw	r6,4(sp)
   1b60c:	980f883a 	mov	r7,r19
   1b610:	0013c9c0 	call	13c9c <__gedf2>
   1b614:	0083110e 	bge	zero,r2,1c25c <_dtoa_r+0xea0>
   1b618:	a0bfffc4 	addi	r2,r20,-1
   1b61c:	d8800315 	stw	r2,12(sp)
   1b620:	d8000915 	stw	zero,36(sp)
   1b624:	9463c83a 	sub	r17,r18,r17
   1b628:	8d7fffc4 	addi	r21,r17,-1
   1b62c:	a8027c16 	blt	r21,zero,1c020 <_dtoa_r+0xc64>
   1b630:	d8000515 	stw	zero,20(sp)
   1b634:	d8800317 	ldw	r2,12(sp)
   1b638:	10027116 	blt	r2,zero,1c000 <_dtoa_r+0xc44>
   1b63c:	a8ab883a 	add	r21,r21,r2
   1b640:	d8800815 	stw	r2,32(sp)
   1b644:	d8000715 	stw	zero,28(sp)
   1b648:	d8c00217 	ldw	r3,8(sp)
   1b64c:	188002a8 	cmpgeui	r2,r3,10
   1b650:	1000581e 	bne	r2,zero,1b7b4 <_dtoa_r+0x3f8>
   1b654:	18800190 	cmplti	r2,r3,6
   1b658:	1003021e 	bne	r2,zero,1c264 <_dtoa_r+0xea8>
   1b65c:	18bfff04 	addi	r2,r3,-4
   1b660:	d8800215 	stw	r2,8(sp)
   1b664:	0023883a 	mov	r17,zero
   1b668:	d8c00217 	ldw	r3,8(sp)
   1b66c:	188000e0 	cmpeqi	r2,r3,3
   1b670:	1003e11e 	bne	r2,zero,1c5f8 <_dtoa_r+0x123c>
   1b674:	18800108 	cmpgei	r2,r3,4
   1b678:	1003a826 	beq	r2,zero,1c51c <_dtoa_r+0x1160>
   1b67c:	d8c00217 	ldw	r3,8(sp)
   1b680:	18800120 	cmpeqi	r2,r3,4
   1b684:	1003311e 	bne	r2,zero,1c34c <_dtoa_r+0xf90>
   1b688:	18800160 	cmpeqi	r2,r3,5
   1b68c:	1004b326 	beq	r2,zero,1c95c <_dtoa_r+0x15a0>
   1b690:	00800044 	movi	r2,1
   1b694:	d8800615 	stw	r2,24(sp)
   1b698:	d8800317 	ldw	r2,12(sp)
   1b69c:	d8c02017 	ldw	r3,128(sp)
   1b6a0:	10c5883a 	add	r2,r2,r3
   1b6a4:	d8800a15 	stw	r2,40(sp)
   1b6a8:	10800044 	addi	r2,r2,1
   1b6ac:	d8800415 	stw	r2,16(sp)
   1b6b0:	100d883a 	mov	r6,r2
   1b6b4:	00800116 	blt	zero,r2,1b6bc <_dtoa_r+0x300>
   1b6b8:	01800044 	movi	r6,1
   1b6bc:	80001115 	stw	zero,68(r16)
   1b6c0:	30800610 	cmplti	r2,r6,24
   1b6c4:	dc800417 	ldw	r18,16(sp)
   1b6c8:	1004da1e 	bne	r2,zero,1ca34 <_dtoa_r+0x1678>
   1b6cc:	00c00044 	movi	r3,1
   1b6d0:	00800104 	movi	r2,4
   1b6d4:	1085883a 	add	r2,r2,r2
   1b6d8:	11000504 	addi	r4,r2,20
   1b6dc:	180b883a 	mov	r5,r3
   1b6e0:	18c00044 	addi	r3,r3,1
   1b6e4:	313ffb2e 	bgeu	r6,r4,1b6d4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb6d4>
   1b6e8:	81401115 	stw	r5,68(r16)
   1b6ec:	00003d06 	br	1b7e4 <_dtoa_r+0x428>
   1b6f0:	04e00034 	movhi	r19,32768
   1b6f4:	d8c02217 	ldw	r3,136(sp)
   1b6f8:	9cffffc4 	addi	r19,r19,-1
   1b6fc:	a4e6703a 	and	r19,r20,r19
   1b700:	00800044 	movi	r2,1
   1b704:	9829883a 	mov	r20,r19
   1b708:	18800015 	stw	r2,0(r3)
   1b70c:	a09ffc2c 	andhi	r2,r20,32752
   1b710:	00dffc34 	movhi	r3,32752
   1b714:	10ff491e 	bne	r2,r3,1b43c <__alt_mem_mcu_subsystem_ram_0+0x77ffb43c>
   1b718:	d8c02117 	ldw	r3,132(sp)
   1b71c:	0089c3c4 	movi	r2,9999
   1b720:	18800015 	stw	r2,0(r3)
   1b724:	d8800117 	ldw	r2,4(sp)
   1b728:	10000d1e 	bne	r2,zero,1b760 <_dtoa_r+0x3a4>
   1b72c:	01800434 	movhi	r6,16
   1b730:	31bfffc4 	addi	r6,r6,-1
   1b734:	a18c703a 	and	r6,r20,r6
   1b738:	3000091e 	bne	r6,zero,1b760 <_dtoa_r+0x3a4>
   1b73c:	d8802317 	ldw	r2,140(sp)
   1b740:	058000f4 	movhi	r22,3
   1b744:	1004c226 	beq	r2,zero,1ca50 <_dtoa_r+0x1694>
   1b748:	008000f4 	movhi	r2,3
   1b74c:	b58e9e04 	addi	r22,r22,14968
   1b750:	108ea004 	addi	r2,r2,14976
   1b754:	d8c02317 	ldw	r3,140(sp)
   1b758:	18800015 	stw	r2,0(r3)
   1b75c:	003f4806 	br	1b480 <__alt_mem_mcu_subsystem_ram_0+0x77ffb480>
   1b760:	d8802317 	ldw	r2,140(sp)
   1b764:	058000f4 	movhi	r22,3
   1b768:	1000021e 	bne	r2,zero,1b774 <_dtoa_r+0x3b8>
   1b76c:	b58ea104 	addi	r22,r22,14980
   1b770:	003f4306 	br	1b480 <__alt_mem_mcu_subsystem_ram_0+0x77ffb480>
   1b774:	008000f4 	movhi	r2,3
   1b778:	b58ea104 	addi	r22,r22,14980
   1b77c:	108ea1c4 	addi	r2,r2,14983
   1b780:	003ff406 	br	1b754 <__alt_mem_mcu_subsystem_ram_0+0x77ffb754>
   1b784:	01400434 	movhi	r5,16
   1b788:	297fffc4 	addi	r5,r5,-1
   1b78c:	994a703a 	and	r5,r19,r5
   1b790:	9009883a 	mov	r4,r18
   1b794:	294ffc34 	orhi	r5,r5,16368
   1b798:	8c7f0044 	addi	r17,r17,-1023
   1b79c:	dc801417 	ldw	r18,80(sp)
   1b7a0:	d8000b15 	stw	zero,44(sp)
   1b7a4:	003f6206 	br	1b530 <__alt_mem_mcu_subsystem_ram_0+0x77ffb530>
   1b7a8:	058000f4 	movhi	r22,3
   1b7ac:	b58dd804 	addi	r22,r22,14176
   1b7b0:	003f3306 	br	1b480 <__alt_mem_mcu_subsystem_ram_0+0x77ffb480>
   1b7b4:	00800044 	movi	r2,1
   1b7b8:	d8800615 	stw	r2,24(sp)
   1b7bc:	00bfffc4 	movi	r2,-1
   1b7c0:	04bfffc4 	movi	r18,-1
   1b7c4:	04400044 	movi	r17,1
   1b7c8:	d8000215 	stw	zero,8(sp)
   1b7cc:	d8800415 	stw	r2,16(sp)
   1b7d0:	d8002015 	stw	zero,128(sp)
   1b7d4:	d8800417 	ldw	r2,16(sp)
   1b7d8:	80001115 	stw	zero,68(r16)
   1b7dc:	000b883a 	mov	r5,zero
   1b7e0:	d8800a15 	stw	r2,40(sp)
   1b7e4:	8009883a 	mov	r4,r16
   1b7e8:	001dfb40 	call	1dfb4 <_Balloc>
   1b7ec:	80801015 	stw	r2,64(r16)
   1b7f0:	948003e8 	cmpgeui	r18,r18,15
   1b7f4:	102d883a 	mov	r22,r2
   1b7f8:	9000d11e 	bne	r18,zero,1bb40 <_dtoa_r+0x784>
   1b7fc:	8800d026 	beq	r17,zero,1bb40 <_dtoa_r+0x784>
   1b800:	d9000317 	ldw	r4,12(sp)
   1b804:	0102f40e 	bge	zero,r4,1c3d8 <_dtoa_r+0x101c>
   1b808:	208003cc 	andi	r2,r4,15
   1b80c:	100690fa 	slli	r3,r2,3
   1b810:	2025d13a 	srai	r18,r4,4
   1b814:	008000f4 	movhi	r2,3
   1b818:	108ed104 	addi	r2,r2,15172
   1b81c:	10c5883a 	add	r2,r2,r3
   1b820:	90c0040c 	andi	r3,r18,16
   1b824:	12800017 	ldw	r10,0(r2)
   1b828:	17000117 	ldw	fp,4(r2)
   1b82c:	18038e26 	beq	r3,zero,1c668 <_dtoa_r+0x12ac>
   1b830:	008000f4 	movhi	r2,3
   1b834:	108ec704 	addi	r2,r2,15132
   1b838:	11800817 	ldw	r6,32(r2)
   1b83c:	11c00917 	ldw	r7,36(r2)
   1b840:	d9000117 	ldw	r4,4(sp)
   1b844:	980b883a 	mov	r5,r19
   1b848:	da800e15 	stw	r10,56(sp)
   1b84c:	00133d00 	call	133d0 <__divdf3>
   1b850:	da800e17 	ldw	r10,56(sp)
   1b854:	d8800c15 	stw	r2,48(sp)
   1b858:	d8c00d15 	stw	r3,52(sp)
   1b85c:	948003cc 	andi	r18,r18,15
   1b860:	044000c4 	movi	r17,3
   1b864:	90001126 	beq	r18,zero,1b8ac <_dtoa_r+0x4f0>
   1b868:	050000f4 	movhi	r20,3
   1b86c:	a50ec704 	addi	r20,r20,15132
   1b870:	5005883a 	mov	r2,r10
   1b874:	e007883a 	mov	r3,fp
   1b878:	9180004c 	andi	r6,r18,1
   1b87c:	1009883a 	mov	r4,r2
   1b880:	9025d07a 	srai	r18,r18,1
   1b884:	180b883a 	mov	r5,r3
   1b888:	30000426 	beq	r6,zero,1b89c <_dtoa_r+0x4e0>
   1b88c:	a1800017 	ldw	r6,0(r20)
   1b890:	a1c00117 	ldw	r7,4(r20)
   1b894:	8c400044 	addi	r17,r17,1
   1b898:	0013d7c0 	call	13d7c <__muldf3>
   1b89c:	a5000204 	addi	r20,r20,8
   1b8a0:	903ff51e 	bne	r18,zero,1b878 <__alt_mem_mcu_subsystem_ram_0+0x77ffb878>
   1b8a4:	1015883a 	mov	r10,r2
   1b8a8:	1839883a 	mov	fp,r3
   1b8ac:	d9000c17 	ldw	r4,48(sp)
   1b8b0:	d9400d17 	ldw	r5,52(sp)
   1b8b4:	500d883a 	mov	r6,r10
   1b8b8:	e00f883a 	mov	r7,fp
   1b8bc:	00133d00 	call	133d0 <__divdf3>
   1b8c0:	1025883a 	mov	r18,r2
   1b8c4:	1829883a 	mov	r20,r3
   1b8c8:	d8800917 	ldw	r2,36(sp)
   1b8cc:	10000626 	beq	r2,zero,1b8e8 <_dtoa_r+0x52c>
   1b8d0:	000d883a 	mov	r6,zero
   1b8d4:	01cffc34 	movhi	r7,16368
   1b8d8:	9009883a 	mov	r4,r18
   1b8dc:	a00b883a 	mov	r5,r20
   1b8e0:	0024d180 	call	24d18 <__ledf2>
   1b8e4:	1003d416 	blt	r2,zero,1c838 <_dtoa_r+0x147c>
   1b8e8:	8809883a 	mov	r4,r17
   1b8ec:	0024e4c0 	call	24e4c <__floatsidf>
   1b8f0:	900d883a 	mov	r6,r18
   1b8f4:	a00f883a 	mov	r7,r20
   1b8f8:	1009883a 	mov	r4,r2
   1b8fc:	180b883a 	mov	r5,r3
   1b900:	0013d7c0 	call	13d7c <__muldf3>
   1b904:	000d883a 	mov	r6,zero
   1b908:	01d00734 	movhi	r7,16412
   1b90c:	1009883a 	mov	r4,r2
   1b910:	180b883a 	mov	r5,r3
   1b914:	0012b100 	call	12b10 <__adddf3>
   1b918:	d8800c15 	stw	r2,48(sp)
   1b91c:	00bf3034 	movhi	r2,64704
   1b920:	1885883a 	add	r2,r3,r2
   1b924:	d8800d15 	stw	r2,52(sp)
   1b928:	d8800417 	ldw	r2,16(sp)
   1b92c:	10031526 	beq	r2,zero,1c584 <_dtoa_r+0x11c8>
   1b930:	d8800317 	ldw	r2,12(sp)
   1b934:	d8801215 	stw	r2,72(sp)
   1b938:	d8800417 	ldw	r2,16(sp)
   1b93c:	d8800e15 	stw	r2,56(sp)
   1b940:	9009883a 	mov	r4,r18
   1b944:	a00b883a 	mov	r5,r20
   1b948:	0014d2c0 	call	14d2c <__fixdfsi>
   1b94c:	d8c00e17 	ldw	r3,56(sp)
   1b950:	17000c04 	addi	fp,r2,48
   1b954:	18ffffc4 	addi	r3,r3,-1
   1b958:	180890fa 	slli	r4,r3,3
   1b95c:	00c000f4 	movhi	r3,3
   1b960:	18ced104 	addi	r3,r3,15172
   1b964:	1907883a 	add	r3,r3,r4
   1b968:	1a800017 	ldw	r10,0(r3)
   1b96c:	1a400117 	ldw	r9,4(r3)
   1b970:	1009883a 	mov	r4,r2
   1b974:	da801115 	stw	r10,68(sp)
   1b978:	da401015 	stw	r9,64(sp)
   1b97c:	0024e4c0 	call	24e4c <__floatsidf>
   1b980:	100d883a 	mov	r6,r2
   1b984:	180f883a 	mov	r7,r3
   1b988:	9009883a 	mov	r4,r18
   1b98c:	a00b883a 	mov	r5,r20
   1b990:	00144580 	call	14458 <__subdf3>
   1b994:	1025883a 	mov	r18,r2
   1b998:	da401017 	ldw	r9,64(sp)
   1b99c:	da801117 	ldw	r10,68(sp)
   1b9a0:	d8800617 	ldw	r2,24(sp)
   1b9a4:	e011883a 	mov	r8,fp
   1b9a8:	df000f15 	stw	fp,60(sp)
   1b9ac:	da001315 	stw	r8,76(sp)
   1b9b0:	1823883a 	mov	r17,r3
   1b9b4:	b7000044 	addi	fp,r22,1
   1b9b8:	500d883a 	mov	r6,r10
   1b9bc:	480f883a 	mov	r7,r9
   1b9c0:	10034126 	beq	r2,zero,1c6c8 <_dtoa_r+0x130c>
   1b9c4:	0009883a 	mov	r4,zero
   1b9c8:	014ff834 	movhi	r5,16352
   1b9cc:	00133d00 	call	133d0 <__divdf3>
   1b9d0:	d9800c17 	ldw	r6,48(sp)
   1b9d4:	d9c00d17 	ldw	r7,52(sp)
   1b9d8:	1009883a 	mov	r4,r2
   1b9dc:	180b883a 	mov	r5,r3
   1b9e0:	00144580 	call	14458 <__subdf3>
   1b9e4:	1829883a 	mov	r20,r3
   1b9e8:	d8c00f17 	ldw	r3,60(sp)
   1b9ec:	900d883a 	mov	r6,r18
   1b9f0:	880f883a 	mov	r7,r17
   1b9f4:	b0c00005 	stb	r3,0(r22)
   1b9f8:	1009883a 	mov	r4,r2
   1b9fc:	a00b883a 	mov	r5,r20
   1ba00:	d8800c15 	stw	r2,48(sp)
   1ba04:	0013c9c0 	call	13c9c <__gedf2>
   1ba08:	0083d116 	blt	zero,r2,1c950 <_dtoa_r+0x1594>
   1ba0c:	900d883a 	mov	r6,r18
   1ba10:	880f883a 	mov	r7,r17
   1ba14:	0009883a 	mov	r4,zero
   1ba18:	014ffc34 	movhi	r5,16368
   1ba1c:	00144580 	call	14458 <__subdf3>
   1ba20:	d9000c17 	ldw	r4,48(sp)
   1ba24:	100d883a 	mov	r6,r2
   1ba28:	180f883a 	mov	r7,r3
   1ba2c:	a00b883a 	mov	r5,r20
   1ba30:	0013c9c0 	call	13c9c <__gedf2>
   1ba34:	da001317 	ldw	r8,76(sp)
   1ba38:	0083d716 	blt	zero,r2,1c998 <_dtoa_r+0x15dc>
   1ba3c:	d8c00e17 	ldw	r3,56(sp)
   1ba40:	18800060 	cmpeqi	r2,r3,1
   1ba44:	10003e1e 	bne	r2,zero,1bb40 <_dtoa_r+0x784>
   1ba48:	b0c7883a 	add	r3,r22,r3
   1ba4c:	dd400e15 	stw	r21,56(sp)
   1ba50:	ddc00d15 	stw	r23,52(sp)
   1ba54:	dd400c17 	ldw	r21,48(sp)
   1ba58:	182f883a 	mov	r23,r3
   1ba5c:	dcc00c15 	stw	r19,48(sp)
   1ba60:	00000806 	br	1ba84 <_dtoa_r+0x6c8>
   1ba64:	00144580 	call	14458 <__subdf3>
   1ba68:	a80d883a 	mov	r6,r21
   1ba6c:	a00f883a 	mov	r7,r20
   1ba70:	1009883a 	mov	r4,r2
   1ba74:	180b883a 	mov	r5,r3
   1ba78:	0024d180 	call	24d18 <__ledf2>
   1ba7c:	1003c416 	blt	r2,zero,1c990 <_dtoa_r+0x15d4>
   1ba80:	e5c02c26 	beq	fp,r23,1bb34 <_dtoa_r+0x778>
   1ba84:	a809883a 	mov	r4,r21
   1ba88:	a00b883a 	mov	r5,r20
   1ba8c:	000d883a 	mov	r6,zero
   1ba90:	01d00934 	movhi	r7,16420
   1ba94:	0013d7c0 	call	13d7c <__muldf3>
   1ba98:	000d883a 	mov	r6,zero
   1ba9c:	01d00934 	movhi	r7,16420
   1baa0:	9009883a 	mov	r4,r18
   1baa4:	880b883a 	mov	r5,r17
   1baa8:	102b883a 	mov	r21,r2
   1baac:	1829883a 	mov	r20,r3
   1bab0:	0013d7c0 	call	13d7c <__muldf3>
   1bab4:	180b883a 	mov	r5,r3
   1bab8:	1009883a 	mov	r4,r2
   1babc:	1823883a 	mov	r17,r3
   1bac0:	1025883a 	mov	r18,r2
   1bac4:	0014d2c0 	call	14d2c <__fixdfsi>
   1bac8:	1009883a 	mov	r4,r2
   1bacc:	1027883a 	mov	r19,r2
   1bad0:	0024e4c0 	call	24e4c <__floatsidf>
   1bad4:	9009883a 	mov	r4,r18
   1bad8:	880b883a 	mov	r5,r17
   1badc:	100d883a 	mov	r6,r2
   1bae0:	180f883a 	mov	r7,r3
   1bae4:	00144580 	call	14458 <__subdf3>
   1bae8:	e7000044 	addi	fp,fp,1
   1baec:	9cc00c04 	addi	r19,r19,48
   1baf0:	a80d883a 	mov	r6,r21
   1baf4:	a00f883a 	mov	r7,r20
   1baf8:	1009883a 	mov	r4,r2
   1bafc:	180b883a 	mov	r5,r3
   1bb00:	e4ffffc5 	stb	r19,-1(fp)
   1bb04:	1025883a 	mov	r18,r2
   1bb08:	1823883a 	mov	r17,r3
   1bb0c:	0024d180 	call	24d18 <__ledf2>
   1bb10:	900d883a 	mov	r6,r18
   1bb14:	880f883a 	mov	r7,r17
   1bb18:	0009883a 	mov	r4,zero
   1bb1c:	014ffc34 	movhi	r5,16368
   1bb20:	103fd00e 	bge	r2,zero,1ba64 <__alt_mem_mcu_subsystem_ram_0+0x77ffba64>
   1bb24:	d8801217 	ldw	r2,72(sp)
   1bb28:	ddc00d17 	ldw	r23,52(sp)
   1bb2c:	d8800315 	stw	r2,12(sp)
   1bb30:	0001ab06 	br	1c1e0 <_dtoa_r+0xe24>
   1bb34:	dd400e17 	ldw	r21,56(sp)
   1bb38:	ddc00d17 	ldw	r23,52(sp)
   1bb3c:	dcc00c17 	ldw	r19,48(sp)
   1bb40:	d8801517 	ldw	r2,84(sp)
   1bb44:	10008f16 	blt	r2,zero,1bd84 <_dtoa_r+0x9c8>
   1bb48:	d9000317 	ldw	r4,12(sp)
   1bb4c:	20c003c8 	cmpgei	r3,r4,15
   1bb50:	18008c1e 	bne	r3,zero,1bd84 <_dtoa_r+0x9c8>
   1bb54:	200690fa 	slli	r3,r4,3
   1bb58:	008000f4 	movhi	r2,3
   1bb5c:	108ed104 	addi	r2,r2,15172
   1bb60:	10c5883a 	add	r2,r2,r3
   1bb64:	14400017 	ldw	r17,0(r2)
   1bb68:	14800117 	ldw	r18,4(r2)
   1bb6c:	d8802017 	ldw	r2,128(sp)
   1bb70:	1001fe16 	blt	r2,zero,1c36c <_dtoa_r+0xfb0>
   1bb74:	dd000117 	ldw	r20,4(sp)
   1bb78:	880d883a 	mov	r6,r17
   1bb7c:	900f883a 	mov	r7,r18
   1bb80:	a009883a 	mov	r4,r20
   1bb84:	980b883a 	mov	r5,r19
   1bb88:	00133d00 	call	133d0 <__divdf3>
   1bb8c:	180b883a 	mov	r5,r3
   1bb90:	1009883a 	mov	r4,r2
   1bb94:	0014d2c0 	call	14d2c <__fixdfsi>
   1bb98:	1009883a 	mov	r4,r2
   1bb9c:	d8800115 	stw	r2,4(sp)
   1bba0:	0024e4c0 	call	24e4c <__floatsidf>
   1bba4:	880d883a 	mov	r6,r17
   1bba8:	900f883a 	mov	r7,r18
   1bbac:	1009883a 	mov	r4,r2
   1bbb0:	180b883a 	mov	r5,r3
   1bbb4:	0013d7c0 	call	13d7c <__muldf3>
   1bbb8:	100d883a 	mov	r6,r2
   1bbbc:	a009883a 	mov	r4,r20
   1bbc0:	980b883a 	mov	r5,r19
   1bbc4:	180f883a 	mov	r7,r3
   1bbc8:	00144580 	call	14458 <__subdf3>
   1bbcc:	da000117 	ldw	r8,4(sp)
   1bbd0:	1009883a 	mov	r4,r2
   1bbd4:	180b883a 	mov	r5,r3
   1bbd8:	40800c04 	addi	r2,r8,48
   1bbdc:	b0800005 	stb	r2,0(r22)
   1bbe0:	d8800417 	ldw	r2,16(sp)
   1bbe4:	b7000044 	addi	fp,r22,1
   1bbe8:	11800060 	cmpeqi	r6,r2,1
   1bbec:	2005883a 	mov	r2,r4
   1bbf0:	30003d1e 	bne	r6,zero,1bce8 <_dtoa_r+0x92c>
   1bbf4:	01d00934 	movhi	r7,16420
   1bbf8:	0013d7c0 	call	13d7c <__muldf3>
   1bbfc:	000d883a 	mov	r6,zero
   1bc00:	000f883a 	mov	r7,zero
   1bc04:	1009883a 	mov	r4,r2
   1bc08:	180b883a 	mov	r5,r3
   1bc0c:	1029883a 	mov	r20,r2
   1bc10:	182b883a 	mov	r21,r3
   1bc14:	0024c980 	call	24c98 <__eqdf2>
   1bc18:	10017126 	beq	r2,zero,1c1e0 <_dtoa_r+0xe24>
   1bc1c:	d8800417 	ldw	r2,16(sp)
   1bc20:	dc000215 	stw	r16,8(sp)
   1bc24:	b4c00084 	addi	r19,r22,2
   1bc28:	b085883a 	add	r2,r22,r2
   1bc2c:	a821883a 	mov	r16,r21
   1bc30:	dd800115 	stw	r22,4(sp)
   1bc34:	a02b883a 	mov	r21,r20
   1bc38:	1029883a 	mov	r20,r2
   1bc3c:	00000a06 	br	1bc68 <_dtoa_r+0x8ac>
   1bc40:	0013d7c0 	call	13d7c <__muldf3>
   1bc44:	000d883a 	mov	r6,zero
   1bc48:	000f883a 	mov	r7,zero
   1bc4c:	1009883a 	mov	r4,r2
   1bc50:	180b883a 	mov	r5,r3
   1bc54:	102b883a 	mov	r21,r2
   1bc58:	1821883a 	mov	r16,r3
   1bc5c:	9cc00044 	addi	r19,r19,1
   1bc60:	0024c980 	call	24c98 <__eqdf2>
   1bc64:	10026c26 	beq	r2,zero,1c618 <_dtoa_r+0x125c>
   1bc68:	880d883a 	mov	r6,r17
   1bc6c:	900f883a 	mov	r7,r18
   1bc70:	a809883a 	mov	r4,r21
   1bc74:	800b883a 	mov	r5,r16
   1bc78:	00133d00 	call	133d0 <__divdf3>
   1bc7c:	180b883a 	mov	r5,r3
   1bc80:	1009883a 	mov	r4,r2
   1bc84:	0014d2c0 	call	14d2c <__fixdfsi>
   1bc88:	1009883a 	mov	r4,r2
   1bc8c:	102d883a 	mov	r22,r2
   1bc90:	0024e4c0 	call	24e4c <__floatsidf>
   1bc94:	880d883a 	mov	r6,r17
   1bc98:	900f883a 	mov	r7,r18
   1bc9c:	1009883a 	mov	r4,r2
   1bca0:	180b883a 	mov	r5,r3
   1bca4:	0013d7c0 	call	13d7c <__muldf3>
   1bca8:	100d883a 	mov	r6,r2
   1bcac:	180f883a 	mov	r7,r3
   1bcb0:	a809883a 	mov	r4,r21
   1bcb4:	800b883a 	mov	r5,r16
   1bcb8:	00144580 	call	14458 <__subdf3>
   1bcbc:	b2400c04 	addi	r9,r22,48
   1bcc0:	9a7fffc5 	stb	r9,-1(r19)
   1bcc4:	000d883a 	mov	r6,zero
   1bcc8:	01d00934 	movhi	r7,16420
   1bccc:	1009883a 	mov	r4,r2
   1bcd0:	180b883a 	mov	r5,r3
   1bcd4:	9839883a 	mov	fp,r19
   1bcd8:	a4ffd91e 	bne	r20,r19,1bc40 <__alt_mem_mcu_subsystem_ram_0+0x77ffbc40>
   1bcdc:	b011883a 	mov	r8,r22
   1bce0:	dc000217 	ldw	r16,8(sp)
   1bce4:	dd800117 	ldw	r22,4(sp)
   1bce8:	100d883a 	mov	r6,r2
   1bcec:	180f883a 	mov	r7,r3
   1bcf0:	1009883a 	mov	r4,r2
   1bcf4:	180b883a 	mov	r5,r3
   1bcf8:	da000115 	stw	r8,4(sp)
   1bcfc:	0012b100 	call	12b10 <__adddf3>
   1bd00:	880d883a 	mov	r6,r17
   1bd04:	900f883a 	mov	r7,r18
   1bd08:	1009883a 	mov	r4,r2
   1bd0c:	180b883a 	mov	r5,r3
   1bd10:	1029883a 	mov	r20,r2
   1bd14:	1827883a 	mov	r19,r3
   1bd18:	0013c9c0 	call	13c9c <__gedf2>
   1bd1c:	da000117 	ldw	r8,4(sp)
   1bd20:	00800a16 	blt	zero,r2,1bd4c <_dtoa_r+0x990>
   1bd24:	880d883a 	mov	r6,r17
   1bd28:	900f883a 	mov	r7,r18
   1bd2c:	a009883a 	mov	r4,r20
   1bd30:	980b883a 	mov	r5,r19
   1bd34:	da000115 	stw	r8,4(sp)
   1bd38:	0024c980 	call	24c98 <__eqdf2>
   1bd3c:	1001281e 	bne	r2,zero,1c1e0 <_dtoa_r+0xe24>
   1bd40:	da000117 	ldw	r8,4(sp)
   1bd44:	4200004c 	andi	r8,r8,1
   1bd48:	40012526 	beq	r8,zero,1c1e0 <_dtoa_r+0xe24>
   1bd4c:	e23fffc3 	ldbu	r8,-1(fp)
   1bd50:	00000306 	br	1bd60 <_dtoa_r+0x9a4>
   1bd54:	b0c29726 	beq	r22,r3,1c7b4 <_dtoa_r+0x13f8>
   1bd58:	1a3fffc3 	ldbu	r8,-1(r3)
   1bd5c:	1839883a 	mov	fp,r3
   1bd60:	40803fcc 	andi	r2,r8,255
   1bd64:	1080201c 	xori	r2,r2,128
   1bd68:	10bfe004 	addi	r2,r2,-128
   1bd6c:	10800e60 	cmpeqi	r2,r2,57
   1bd70:	e0ffffc4 	addi	r3,fp,-1
   1bd74:	103ff71e 	bne	r2,zero,1bd54 <__alt_mem_mcu_subsystem_ram_0+0x77ffbd54>
   1bd78:	42000044 	addi	r8,r8,1
   1bd7c:	1a000005 	stb	r8,0(r3)
   1bd80:	00011706 	br	1c1e0 <_dtoa_r+0xe24>
   1bd84:	d8c00617 	ldw	r3,24(sp)
   1bd88:	1800b626 	beq	r3,zero,1c064 <_dtoa_r+0xca8>
   1bd8c:	d8c00217 	ldw	r3,8(sp)
   1bd90:	18c00088 	cmpgei	r3,r3,2
   1bd94:	18016326 	beq	r3,zero,1c324 <_dtoa_r+0xf68>
   1bd98:	d8800417 	ldw	r2,16(sp)
   1bd9c:	14bfffc4 	addi	r18,r2,-1
   1bda0:	d8800717 	ldw	r2,28(sp)
   1bda4:	14821f16 	blt	r2,r18,1c624 <_dtoa_r+0x1268>
   1bda8:	14a5c83a 	sub	r18,r2,r18
   1bdac:	d8800417 	ldw	r2,16(sp)
   1bdb0:	10023b16 	blt	r2,zero,1c6a0 <_dtoa_r+0x12e4>
   1bdb4:	d8c00517 	ldw	r3,20(sp)
   1bdb8:	a8ab883a 	add	r21,r21,r2
   1bdbc:	10c5883a 	add	r2,r2,r3
   1bdc0:	1829883a 	mov	r20,r3
   1bdc4:	d8800515 	stw	r2,20(sp)
   1bdc8:	01400044 	movi	r5,1
   1bdcc:	8009883a 	mov	r4,r16
   1bdd0:	001e3b40 	call	1e3b4 <__i2b>
   1bdd4:	1023883a 	mov	r17,r2
   1bdd8:	0500080e 	bge	zero,r20,1bdfc <_dtoa_r+0xa40>
   1bddc:	0540070e 	bge	zero,r21,1bdfc <_dtoa_r+0xa40>
   1bde0:	a005883a 	mov	r2,r20
   1bde4:	ad013716 	blt	r21,r20,1c2c4 <_dtoa_r+0xf08>
   1bde8:	d8c00517 	ldw	r3,20(sp)
   1bdec:	a0a9c83a 	sub	r20,r20,r2
   1bdf0:	a8abc83a 	sub	r21,r21,r2
   1bdf4:	1887c83a 	sub	r3,r3,r2
   1bdf8:	d8c00515 	stw	r3,20(sp)
   1bdfc:	d8800717 	ldw	r2,28(sp)
   1be00:	10000926 	beq	r2,zero,1be28 <_dtoa_r+0xa6c>
   1be04:	d8c00617 	ldw	r3,24(sp)
   1be08:	1801fd26 	beq	r3,zero,1c600 <_dtoa_r+0x1244>
   1be0c:	14b9c83a 	sub	fp,r2,r18
   1be10:	90012e1e 	bne	r18,zero,1c2cc <_dtoa_r+0xf10>
   1be14:	b80b883a 	mov	r5,r23
   1be18:	e00d883a 	mov	r6,fp
   1be1c:	8009883a 	mov	r4,r16
   1be20:	001e5e40 	call	1e5e4 <__pow5mult>
   1be24:	102f883a 	mov	r23,r2
   1be28:	01400044 	movi	r5,1
   1be2c:	8009883a 	mov	r4,r16
   1be30:	001e3b40 	call	1e3b4 <__i2b>
   1be34:	d9800817 	ldw	r6,32(sp)
   1be38:	1025883a 	mov	r18,r2
   1be3c:	3000f61e 	bne	r6,zero,1c218 <_dtoa_r+0xe5c>
   1be40:	d8800217 	ldw	r2,8(sp)
   1be44:	10800090 	cmplti	r2,r2,2
   1be48:	10010d1e 	bne	r2,zero,1c280 <_dtoa_r+0xec4>
   1be4c:	00800044 	movi	r2,1
   1be50:	1545883a 	add	r2,r2,r21
   1be54:	108007cc 	andi	r2,r2,31
   1be58:	1000ed26 	beq	r2,zero,1c210 <_dtoa_r+0xe54>
   1be5c:	00c00804 	movi	r3,32
   1be60:	1887c83a 	sub	r3,r3,r2
   1be64:	19000150 	cmplti	r4,r3,5
   1be68:	2002f41e 	bne	r4,zero,1ca3c <_dtoa_r+0x1680>
   1be6c:	00c00704 	movi	r3,28
   1be70:	1885c83a 	sub	r2,r3,r2
   1be74:	d8c00517 	ldw	r3,20(sp)
   1be78:	a0a9883a 	add	r20,r20,r2
   1be7c:	a8ab883a 	add	r21,r21,r2
   1be80:	1887883a 	add	r3,r3,r2
   1be84:	d8c00515 	stw	r3,20(sp)
   1be88:	d8800517 	ldw	r2,20(sp)
   1be8c:	00807916 	blt	zero,r2,1c074 <_dtoa_r+0xcb8>
   1be90:	0540050e 	bge	zero,r21,1bea8 <_dtoa_r+0xaec>
   1be94:	900b883a 	mov	r5,r18
   1be98:	a80d883a 	mov	r6,r21
   1be9c:	8009883a 	mov	r4,r16
   1bea0:	001e7080 	call	1e708 <__lshift>
   1bea4:	1025883a 	mov	r18,r2
   1bea8:	d8800917 	ldw	r2,36(sp)
   1beac:	1000771e 	bne	r2,zero,1c08c <_dtoa_r+0xcd0>
   1beb0:	d8800417 	ldw	r2,16(sp)
   1beb4:	00818f0e 	bge	zero,r2,1c4f4 <_dtoa_r+0x1138>
   1beb8:	d8800617 	ldw	r2,24(sp)
   1bebc:	10008526 	beq	r2,zero,1c0d4 <_dtoa_r+0xd18>
   1bec0:	05011216 	blt	zero,r20,1c30c <_dtoa_r+0xf50>
   1bec4:	d8800817 	ldw	r2,32(sp)
   1bec8:	1001721e 	bne	r2,zero,1c494 <_dtoa_r+0x10d8>
   1becc:	8829883a 	mov	r20,r17
   1bed0:	d8c00417 	ldw	r3,16(sp)
   1bed4:	b0bfffc4 	addi	r2,r22,-1
   1bed8:	b027883a 	mov	r19,r22
   1bedc:	10c5883a 	add	r2,r2,r3
   1bee0:	d8800515 	stw	r2,20(sp)
   1bee4:	d8800117 	ldw	r2,4(sp)
   1bee8:	dd800715 	stw	r22,28(sp)
   1beec:	1080004c 	andi	r2,r2,1
   1bef0:	d8800615 	stw	r2,24(sp)
   1bef4:	900b883a 	mov	r5,r18
   1bef8:	b809883a 	mov	r4,r23
   1befc:	001b1c40 	call	1b1c4 <quorem>
   1bf00:	880b883a 	mov	r5,r17
   1bf04:	b809883a 	mov	r4,r23
   1bf08:	102d883a 	mov	r22,r2
   1bf0c:	001e84c0 	call	1e84c <__mcmp>
   1bf10:	900b883a 	mov	r5,r18
   1bf14:	a00d883a 	mov	r6,r20
   1bf18:	8009883a 	mov	r4,r16
   1bf1c:	102b883a 	mov	r21,r2
   1bf20:	001e8a40 	call	1e8a4 <__mdiff>
   1bf24:	1007883a 	mov	r3,r2
   1bf28:	10800317 	ldw	r2,12(r2)
   1bf2c:	b7000c04 	addi	fp,r22,48
   1bf30:	180b883a 	mov	r5,r3
   1bf34:	10016b1e 	bne	r2,zero,1c4e4 <_dtoa_r+0x1128>
   1bf38:	b809883a 	mov	r4,r23
   1bf3c:	d8c00415 	stw	r3,16(sp)
   1bf40:	001e84c0 	call	1e84c <__mcmp>
   1bf44:	d8c00417 	ldw	r3,16(sp)
   1bf48:	8009883a 	mov	r4,r16
   1bf4c:	d8800115 	stw	r2,4(sp)
   1bf50:	180b883a 	mov	r5,r3
   1bf54:	001e0580 	call	1e058 <_Bfree>
   1bf58:	d8800117 	ldw	r2,4(sp)
   1bf5c:	1000051e 	bne	r2,zero,1bf74 <_dtoa_r+0xbb8>
   1bf60:	d8c00217 	ldw	r3,8(sp)
   1bf64:	1800031e 	bne	r3,zero,1bf74 <_dtoa_r+0xbb8>
   1bf68:	d8800617 	ldw	r2,24(sp)
   1bf6c:	10028d26 	beq	r2,zero,1c9a4 <_dtoa_r+0x15e8>
   1bf70:	d8800217 	ldw	r2,8(sp)
   1bf74:	a801b316 	blt	r21,zero,1c644 <_dtoa_r+0x1288>
   1bf78:	a800041e 	bne	r21,zero,1bf8c <_dtoa_r+0xbd0>
   1bf7c:	d8c00217 	ldw	r3,8(sp)
   1bf80:	1800021e 	bne	r3,zero,1bf8c <_dtoa_r+0xbd0>
   1bf84:	d8c00617 	ldw	r3,24(sp)
   1bf88:	1801ae26 	beq	r3,zero,1c644 <_dtoa_r+0x1288>
   1bf8c:	9d400044 	addi	r21,r19,1
   1bf90:	0081bc16 	blt	zero,r2,1c684 <_dtoa_r+0x12c8>
   1bf94:	d8800517 	ldw	r2,20(sp)
   1bf98:	9f000005 	stb	fp,0(r19)
   1bf9c:	14c1c426 	beq	r2,r19,1c6b0 <_dtoa_r+0x12f4>
   1bfa0:	b80b883a 	mov	r5,r23
   1bfa4:	000f883a 	mov	r7,zero
   1bfa8:	01800284 	movi	r6,10
   1bfac:	8009883a 	mov	r4,r16
   1bfb0:	001e07c0 	call	1e07c <__multadd>
   1bfb4:	102f883a 	mov	r23,r2
   1bfb8:	000f883a 	mov	r7,zero
   1bfbc:	01800284 	movi	r6,10
   1bfc0:	880b883a 	mov	r5,r17
   1bfc4:	8009883a 	mov	r4,r16
   1bfc8:	8d014226 	beq	r17,r20,1c4d4 <_dtoa_r+0x1118>
   1bfcc:	001e07c0 	call	1e07c <__multadd>
   1bfd0:	a00b883a 	mov	r5,r20
   1bfd4:	000f883a 	mov	r7,zero
   1bfd8:	01800284 	movi	r6,10
   1bfdc:	8009883a 	mov	r4,r16
   1bfe0:	1023883a 	mov	r17,r2
   1bfe4:	001e07c0 	call	1e07c <__multadd>
   1bfe8:	1029883a 	mov	r20,r2
   1bfec:	a827883a 	mov	r19,r21
   1bff0:	003fc006 	br	1bef4 <__alt_mem_mcu_subsystem_ram_0+0x77ffbef4>
   1bff4:	00800044 	movi	r2,1
   1bff8:	d8800915 	stw	r2,36(sp)
   1bffc:	003d8906 	br	1b624 <__alt_mem_mcu_subsystem_ram_0+0x77ffb624>
   1c000:	d8c00517 	ldw	r3,20(sp)
   1c004:	d8800317 	ldw	r2,12(sp)
   1c008:	d8000815 	stw	zero,32(sp)
   1c00c:	1887c83a 	sub	r3,r3,r2
   1c010:	0085c83a 	sub	r2,zero,r2
   1c014:	d8c00515 	stw	r3,20(sp)
   1c018:	d8800715 	stw	r2,28(sp)
   1c01c:	003d8a06 	br	1b648 <__alt_mem_mcu_subsystem_ram_0+0x77ffb648>
   1c020:	04800044 	movi	r18,1
   1c024:	9445c83a 	sub	r2,r18,r17
   1c028:	d8800515 	stw	r2,20(sp)
   1c02c:	002b883a 	mov	r21,zero
   1c030:	003d8006 	br	1b634 <__alt_mem_mcu_subsystem_ram_0+0x77ffb634>
   1c034:	dd800317 	ldw	r22,12(sp)
   1c038:	b009883a 	mov	r4,r22
   1c03c:	0024e4c0 	call	24e4c <__floatsidf>
   1c040:	a80d883a 	mov	r6,r21
   1c044:	a00f883a 	mov	r7,r20
   1c048:	1009883a 	mov	r4,r2
   1c04c:	180b883a 	mov	r5,r3
   1c050:	0024c980 	call	24c98 <__eqdf2>
   1c054:	103d6326 	beq	r2,zero,1b5e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb5e4>
   1c058:	b0bfffc4 	addi	r2,r22,-1
   1c05c:	d8800315 	stw	r2,12(sp)
   1c060:	003d6006 	br	1b5e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb5e4>
   1c064:	dc800717 	ldw	r18,28(sp)
   1c068:	dd000517 	ldw	r20,20(sp)
   1c06c:	0023883a 	mov	r17,zero
   1c070:	003f5906 	br	1bdd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbdd8>
   1c074:	b80b883a 	mov	r5,r23
   1c078:	100d883a 	mov	r6,r2
   1c07c:	8009883a 	mov	r4,r16
   1c080:	001e7080 	call	1e708 <__lshift>
   1c084:	102f883a 	mov	r23,r2
   1c088:	003f8106 	br	1be90 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe90>
   1c08c:	900b883a 	mov	r5,r18
   1c090:	b809883a 	mov	r4,r23
   1c094:	001e84c0 	call	1e84c <__mcmp>
   1c098:	103f850e 	bge	r2,zero,1beb0 <__alt_mem_mcu_subsystem_ram_0+0x77ffbeb0>
   1c09c:	b80b883a 	mov	r5,r23
   1c0a0:	000f883a 	mov	r7,zero
   1c0a4:	01800284 	movi	r6,10
   1c0a8:	8009883a 	mov	r4,r16
   1c0ac:	001e07c0 	call	1e07c <__multadd>
   1c0b0:	102f883a 	mov	r23,r2
   1c0b4:	d8800317 	ldw	r2,12(sp)
   1c0b8:	10bfffc4 	addi	r2,r2,-1
   1c0bc:	d8800315 	stw	r2,12(sp)
   1c0c0:	d8800617 	ldw	r2,24(sp)
   1c0c4:	1002441e 	bne	r2,zero,1c9d8 <_dtoa_r+0x161c>
   1c0c8:	d8800a17 	ldw	r2,40(sp)
   1c0cc:	00824d0e 	bge	zero,r2,1ca04 <_dtoa_r+0x1648>
   1c0d0:	d8800415 	stw	r2,16(sp)
   1c0d4:	b039883a 	mov	fp,r22
   1c0d8:	dcc00417 	ldw	r19,16(sp)
   1c0dc:	00000206 	br	1c0e8 <_dtoa_r+0xd2c>
   1c0e0:	001e07c0 	call	1e07c <__multadd>
   1c0e4:	102f883a 	mov	r23,r2
   1c0e8:	900b883a 	mov	r5,r18
   1c0ec:	b809883a 	mov	r4,r23
   1c0f0:	001b1c40 	call	1b1c4 <quorem>
   1c0f4:	12000c04 	addi	r8,r2,48
   1c0f8:	e7000044 	addi	fp,fp,1
   1c0fc:	e23fffc5 	stb	r8,-1(fp)
   1c100:	e585c83a 	sub	r2,fp,r22
   1c104:	000f883a 	mov	r7,zero
   1c108:	01800284 	movi	r6,10
   1c10c:	b80b883a 	mov	r5,r23
   1c110:	8009883a 	mov	r4,r16
   1c114:	14fff216 	blt	r2,r19,1c0e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc0e0>
   1c118:	002b883a 	mov	r21,zero
   1c11c:	b80b883a 	mov	r5,r23
   1c120:	01800044 	movi	r6,1
   1c124:	8009883a 	mov	r4,r16
   1c128:	da000115 	stw	r8,4(sp)
   1c12c:	001e7080 	call	1e708 <__lshift>
   1c130:	900b883a 	mov	r5,r18
   1c134:	1009883a 	mov	r4,r2
   1c138:	102f883a 	mov	r23,r2
   1c13c:	001e84c0 	call	1e84c <__mcmp>
   1c140:	da000117 	ldw	r8,4(sp)
   1c144:	e0ffffc3 	ldbu	r3,-1(fp)
   1c148:	00801116 	blt	zero,r2,1c190 <_dtoa_r+0xdd4>
   1c14c:	1000021e 	bne	r2,zero,1c158 <_dtoa_r+0xd9c>
   1c150:	4200004c 	andi	r8,r8,1
   1c154:	40000e1e 	bne	r8,zero,1c190 <_dtoa_r+0xdd4>
   1c158:	1805883a 	mov	r2,r3
   1c15c:	00000206 	br	1c168 <_dtoa_r+0xdac>
   1c160:	e0bfff83 	ldbu	r2,-2(fp)
   1c164:	1839883a 	mov	fp,r3
   1c168:	10803fcc 	andi	r2,r2,255
   1c16c:	1080201c 	xori	r2,r2,128
   1c170:	10bfe004 	addi	r2,r2,-128
   1c174:	10800c18 	cmpnei	r2,r2,48
   1c178:	e0ffffc4 	addi	r3,fp,-1
   1c17c:	103ff826 	beq	r2,zero,1c160 <__alt_mem_mcu_subsystem_ram_0+0x77ffc160>
   1c180:	00000b06 	br	1c1b0 <_dtoa_r+0xdf4>
   1c184:	2580e926 	beq	r4,r22,1c52c <_dtoa_r+0x1170>
   1c188:	20ffffc3 	ldbu	r3,-1(r4)
   1c18c:	2039883a 	mov	fp,r4
   1c190:	18803fcc 	andi	r2,r3,255
   1c194:	1080201c 	xori	r2,r2,128
   1c198:	10bfe004 	addi	r2,r2,-128
   1c19c:	10800e60 	cmpeqi	r2,r2,57
   1c1a0:	e13fffc4 	addi	r4,fp,-1
   1c1a4:	103ff71e 	bne	r2,zero,1c184 <__alt_mem_mcu_subsystem_ram_0+0x77ffc184>
   1c1a8:	18c00044 	addi	r3,r3,1
   1c1ac:	20c00005 	stb	r3,0(r4)
   1c1b0:	900b883a 	mov	r5,r18
   1c1b4:	8009883a 	mov	r4,r16
   1c1b8:	001e0580 	call	1e058 <_Bfree>
   1c1bc:	88000826 	beq	r17,zero,1c1e0 <_dtoa_r+0xe24>
   1c1c0:	a8000426 	beq	r21,zero,1c1d4 <_dtoa_r+0xe18>
   1c1c4:	ac400326 	beq	r21,r17,1c1d4 <_dtoa_r+0xe18>
   1c1c8:	a80b883a 	mov	r5,r21
   1c1cc:	8009883a 	mov	r4,r16
   1c1d0:	001e0580 	call	1e058 <_Bfree>
   1c1d4:	880b883a 	mov	r5,r17
   1c1d8:	8009883a 	mov	r4,r16
   1c1dc:	001e0580 	call	1e058 <_Bfree>
   1c1e0:	b80b883a 	mov	r5,r23
   1c1e4:	8009883a 	mov	r4,r16
   1c1e8:	001e0580 	call	1e058 <_Bfree>
   1c1ec:	d8800317 	ldw	r2,12(sp)
   1c1f0:	d8c02117 	ldw	r3,132(sp)
   1c1f4:	e0000005 	stb	zero,0(fp)
   1c1f8:	10800044 	addi	r2,r2,1
   1c1fc:	18800015 	stw	r2,0(r3)
   1c200:	d8802317 	ldw	r2,140(sp)
   1c204:	103c9e26 	beq	r2,zero,1b480 <__alt_mem_mcu_subsystem_ram_0+0x77ffb480>
   1c208:	17000015 	stw	fp,0(r2)
   1c20c:	003c9c06 	br	1b480 <__alt_mem_mcu_subsystem_ram_0+0x77ffb480>
   1c210:	00800704 	movi	r2,28
   1c214:	003f1706 	br	1be74 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe74>
   1c218:	100b883a 	mov	r5,r2
   1c21c:	8009883a 	mov	r4,r16
   1c220:	001e5e40 	call	1e5e4 <__pow5mult>
   1c224:	1025883a 	mov	r18,r2
   1c228:	d8800217 	ldw	r2,8(sp)
   1c22c:	10800090 	cmplti	r2,r2,2
   1c230:	1000951e 	bne	r2,zero,1c488 <_dtoa_r+0x10cc>
   1c234:	d8000815 	stw	zero,32(sp)
   1c238:	90800417 	ldw	r2,16(r18)
   1c23c:	10800104 	addi	r2,r2,4
   1c240:	100490ba 	slli	r2,r2,2
   1c244:	9085883a 	add	r2,r18,r2
   1c248:	11000017 	ldw	r4,0(r2)
   1c24c:	001e2a00 	call	1e2a0 <__hi0bits>
   1c250:	00c00804 	movi	r3,32
   1c254:	1885c83a 	sub	r2,r3,r2
   1c258:	003efd06 	br	1be50 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe50>
   1c25c:	d8000915 	stw	zero,36(sp)
   1c260:	003cf006 	br	1b624 <__alt_mem_mcu_subsystem_ram_0+0x77ffb624>
   1c264:	04400044 	movi	r17,1
   1c268:	003cff06 	br	1b668 <__alt_mem_mcu_subsystem_ram_0+0x77ffb668>
   1c26c:	01000804 	movi	r4,32
   1c270:	2089c83a 	sub	r4,r4,r2
   1c274:	d8800117 	ldw	r2,4(sp)
   1c278:	1108983a 	sll	r4,r2,r4
   1c27c:	003ca506 	br	1b514 <__alt_mem_mcu_subsystem_ram_0+0x77ffb514>
   1c280:	d8800117 	ldw	r2,4(sp)
   1c284:	103ef11e 	bne	r2,zero,1be4c <__alt_mem_mcu_subsystem_ram_0+0x77ffbe4c>
   1c288:	00800434 	movhi	r2,16
   1c28c:	10bfffc4 	addi	r2,r2,-1
   1c290:	9884703a 	and	r2,r19,r2
   1c294:	1000f91e 	bne	r2,zero,1c67c <_dtoa_r+0x12c0>
   1c298:	9cdffc2c 	andhi	r19,r19,32752
   1c29c:	9800f726 	beq	r19,zero,1c67c <_dtoa_r+0x12c0>
   1c2a0:	d8800517 	ldw	r2,20(sp)
   1c2a4:	ad400044 	addi	r21,r21,1
   1c2a8:	10800044 	addi	r2,r2,1
   1c2ac:	d8800515 	stw	r2,20(sp)
   1c2b0:	00800044 	movi	r2,1
   1c2b4:	d8c00817 	ldw	r3,32(sp)
   1c2b8:	d8800815 	stw	r2,32(sp)
   1c2bc:	183ee326 	beq	r3,zero,1be4c <__alt_mem_mcu_subsystem_ram_0+0x77ffbe4c>
   1c2c0:	003fdd06 	br	1c238 <__alt_mem_mcu_subsystem_ram_0+0x77ffc238>
   1c2c4:	a805883a 	mov	r2,r21
   1c2c8:	003ec706 	br	1bde8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbde8>
   1c2cc:	900d883a 	mov	r6,r18
   1c2d0:	880b883a 	mov	r5,r17
   1c2d4:	8009883a 	mov	r4,r16
   1c2d8:	001e5e40 	call	1e5e4 <__pow5mult>
   1c2dc:	b80d883a 	mov	r6,r23
   1c2e0:	100b883a 	mov	r5,r2
   1c2e4:	8009883a 	mov	r4,r16
   1c2e8:	1023883a 	mov	r17,r2
   1c2ec:	001e3e80 	call	1e3e8 <__multiply>
   1c2f0:	1025883a 	mov	r18,r2
   1c2f4:	b80b883a 	mov	r5,r23
   1c2f8:	8009883a 	mov	r4,r16
   1c2fc:	001e0580 	call	1e058 <_Bfree>
   1c300:	902f883a 	mov	r23,r18
   1c304:	e03ec826 	beq	fp,zero,1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c308:	003ec206 	br	1be14 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe14>
   1c30c:	880b883a 	mov	r5,r17
   1c310:	a00d883a 	mov	r6,r20
   1c314:	8009883a 	mov	r4,r16
   1c318:	001e7080 	call	1e708 <__lshift>
   1c31c:	1023883a 	mov	r17,r2
   1c320:	003ee806 	br	1bec4 <__alt_mem_mcu_subsystem_ram_0+0x77ffbec4>
   1c324:	d8c00b17 	ldw	r3,44(sp)
   1c328:	18012a26 	beq	r3,zero,1c7d4 <_dtoa_r+0x1418>
   1c32c:	d8c00517 	ldw	r3,20(sp)
   1c330:	10810cc4 	addi	r2,r2,1075
   1c334:	a8ab883a 	add	r21,r21,r2
   1c338:	1885883a 	add	r2,r3,r2
   1c33c:	1829883a 	mov	r20,r3
   1c340:	dc800717 	ldw	r18,28(sp)
   1c344:	d8800515 	stw	r2,20(sp)
   1c348:	003e9f06 	br	1bdc8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbdc8>
   1c34c:	00800044 	movi	r2,1
   1c350:	d8800615 	stw	r2,24(sp)
   1c354:	d8802017 	ldw	r2,128(sp)
   1c358:	0080a20e 	bge	zero,r2,1c5e4 <_dtoa_r+0x1228>
   1c35c:	d8800a15 	stw	r2,40(sp)
   1c360:	d8800415 	stw	r2,16(sp)
   1c364:	100d883a 	mov	r6,r2
   1c368:	003cd406 	br	1b6bc <__alt_mem_mcu_subsystem_ram_0+0x77ffb6bc>
   1c36c:	d8800417 	ldw	r2,16(sp)
   1c370:	00be0016 	blt	zero,r2,1bb74 <__alt_mem_mcu_subsystem_ram_0+0x77ffbb74>
   1c374:	1000981e 	bne	r2,zero,1c5d8 <_dtoa_r+0x121c>
   1c378:	8809883a 	mov	r4,r17
   1c37c:	900b883a 	mov	r5,r18
   1c380:	000d883a 	mov	r6,zero
   1c384:	01d00534 	movhi	r7,16404
   1c388:	0013d7c0 	call	13d7c <__muldf3>
   1c38c:	d9800117 	ldw	r6,4(sp)
   1c390:	980f883a 	mov	r7,r19
   1c394:	1009883a 	mov	r4,r2
   1c398:	180b883a 	mov	r5,r3
   1c39c:	0013c9c0 	call	13c9c <__gedf2>
   1c3a0:	0025883a 	mov	r18,zero
   1c3a4:	0023883a 	mov	r17,zero
   1c3a8:	1000570e 	bge	r2,zero,1c508 <_dtoa_r+0x114c>
   1c3ac:	00800c44 	movi	r2,49
   1c3b0:	b0800005 	stb	r2,0(r22)
   1c3b4:	d8800317 	ldw	r2,12(sp)
   1c3b8:	b7000044 	addi	fp,r22,1
   1c3bc:	10800044 	addi	r2,r2,1
   1c3c0:	d8800315 	stw	r2,12(sp)
   1c3c4:	900b883a 	mov	r5,r18
   1c3c8:	8009883a 	mov	r4,r16
   1c3cc:	001e0580 	call	1e058 <_Bfree>
   1c3d0:	883f801e 	bne	r17,zero,1c1d4 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1d4>
   1c3d4:	003f8206 	br	1c1e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1e0>
   1c3d8:	d8800317 	ldw	r2,12(sp)
   1c3dc:	10011226 	beq	r2,zero,1c828 <_dtoa_r+0x146c>
   1c3e0:	0089c83a 	sub	r4,zero,r2
   1c3e4:	208003cc 	andi	r2,r4,15
   1c3e8:	100690fa 	slli	r3,r2,3
   1c3ec:	008000f4 	movhi	r2,3
   1c3f0:	108ed104 	addi	r2,r2,15172
   1c3f4:	10c5883a 	add	r2,r2,r3
   1c3f8:	2011d13a 	srai	r8,r4,4
   1c3fc:	11800017 	ldw	r6,0(r2)
   1c400:	11c00117 	ldw	r7,4(r2)
   1c404:	d9000117 	ldw	r4,4(sp)
   1c408:	980b883a 	mov	r5,r19
   1c40c:	da000c15 	stw	r8,48(sp)
   1c410:	0013d7c0 	call	13d7c <__muldf3>
   1c414:	da000c17 	ldw	r8,48(sp)
   1c418:	1025883a 	mov	r18,r2
   1c41c:	1829883a 	mov	r20,r3
   1c420:	40017d26 	beq	r8,zero,1ca18 <_dtoa_r+0x165c>
   1c424:	070000f4 	movhi	fp,3
   1c428:	e70ec704 	addi	fp,fp,15132
   1c42c:	dc000c15 	stw	r16,48(sp)
   1c430:	000f883a 	mov	r7,zero
   1c434:	e021883a 	mov	r16,fp
   1c438:	04400084 	movi	r17,2
   1c43c:	4039883a 	mov	fp,r8
   1c440:	e180004c 	andi	r6,fp,1
   1c444:	1009883a 	mov	r4,r2
   1c448:	e039d07a 	srai	fp,fp,1
   1c44c:	180b883a 	mov	r5,r3
   1c450:	30000526 	beq	r6,zero,1c468 <_dtoa_r+0x10ac>
   1c454:	81c00117 	ldw	r7,4(r16)
   1c458:	81800017 	ldw	r6,0(r16)
   1c45c:	8c400044 	addi	r17,r17,1
   1c460:	0013d7c0 	call	13d7c <__muldf3>
   1c464:	01c00044 	movi	r7,1
   1c468:	84000204 	addi	r16,r16,8
   1c46c:	e03ff41e 	bne	fp,zero,1c440 <__alt_mem_mcu_subsystem_ram_0+0x77ffc440>
   1c470:	39c03fcc 	andi	r7,r7,255
   1c474:	dc000c17 	ldw	r16,48(sp)
   1c478:	383d1326 	beq	r7,zero,1b8c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb8c8>
   1c47c:	1025883a 	mov	r18,r2
   1c480:	1829883a 	mov	r20,r3
   1c484:	003d1006 	br	1b8c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb8c8>
   1c488:	d8800117 	ldw	r2,4(sp)
   1c48c:	103f7e26 	beq	r2,zero,1c288 <__alt_mem_mcu_subsystem_ram_0+0x77ffc288>
   1c490:	003f6806 	br	1c234 <__alt_mem_mcu_subsystem_ram_0+0x77ffc234>
   1c494:	89400117 	ldw	r5,4(r17)
   1c498:	8009883a 	mov	r4,r16
   1c49c:	001dfb40 	call	1dfb4 <_Balloc>
   1c4a0:	89800417 	ldw	r6,16(r17)
   1c4a4:	89400304 	addi	r5,r17,12
   1c4a8:	11000304 	addi	r4,r2,12
   1c4ac:	31800084 	addi	r6,r6,2
   1c4b0:	300c90ba 	slli	r6,r6,2
   1c4b4:	1027883a 	mov	r19,r2
   1c4b8:	0015ac00 	call	15ac0 <memcpy>
   1c4bc:	01800044 	movi	r6,1
   1c4c0:	980b883a 	mov	r5,r19
   1c4c4:	8009883a 	mov	r4,r16
   1c4c8:	001e7080 	call	1e708 <__lshift>
   1c4cc:	1029883a 	mov	r20,r2
   1c4d0:	003e7f06 	br	1bed0 <__alt_mem_mcu_subsystem_ram_0+0x77ffbed0>
   1c4d4:	001e07c0 	call	1e07c <__multadd>
   1c4d8:	1023883a 	mov	r17,r2
   1c4dc:	1029883a 	mov	r20,r2
   1c4e0:	003ec206 	br	1bfec <__alt_mem_mcu_subsystem_ram_0+0x77ffbfec>
   1c4e4:	8009883a 	mov	r4,r16
   1c4e8:	001e0580 	call	1e058 <_Bfree>
   1c4ec:	00800044 	movi	r2,1
   1c4f0:	003ea006 	br	1bf74 <__alt_mem_mcu_subsystem_ram_0+0x77ffbf74>
   1c4f4:	d8800217 	ldw	r2,8(sp)
   1c4f8:	108000d0 	cmplti	r2,r2,3
   1c4fc:	103e6e1e 	bne	r2,zero,1beb8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbeb8>
   1c500:	d8800417 	ldw	r2,16(sp)
   1c504:	1000bd26 	beq	r2,zero,1c7fc <_dtoa_r+0x1440>
   1c508:	d8802017 	ldw	r2,128(sp)
   1c50c:	b039883a 	mov	fp,r22
   1c510:	0084303a 	nor	r2,zero,r2
   1c514:	d8800315 	stw	r2,12(sp)
   1c518:	003faa06 	br	1c3c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffc3c4>
   1c51c:	188000a0 	cmpeqi	r2,r3,2
   1c520:	10010e26 	beq	r2,zero,1c95c <_dtoa_r+0x15a0>
   1c524:	d8000615 	stw	zero,24(sp)
   1c528:	003f8a06 	br	1c354 <__alt_mem_mcu_subsystem_ram_0+0x77ffc354>
   1c52c:	d8800317 	ldw	r2,12(sp)
   1c530:	10800044 	addi	r2,r2,1
   1c534:	d8800315 	stw	r2,12(sp)
   1c538:	00800c44 	movi	r2,49
   1c53c:	b0800005 	stb	r2,0(r22)
   1c540:	003f1b06 	br	1c1b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1b0>
   1c544:	8809883a 	mov	r4,r17
   1c548:	0024e4c0 	call	24e4c <__floatsidf>
   1c54c:	900d883a 	mov	r6,r18
   1c550:	a00f883a 	mov	r7,r20
   1c554:	1009883a 	mov	r4,r2
   1c558:	180b883a 	mov	r5,r3
   1c55c:	0013d7c0 	call	13d7c <__muldf3>
   1c560:	000d883a 	mov	r6,zero
   1c564:	01d00734 	movhi	r7,16412
   1c568:	1009883a 	mov	r4,r2
   1c56c:	180b883a 	mov	r5,r3
   1c570:	0012b100 	call	12b10 <__adddf3>
   1c574:	d8800c15 	stw	r2,48(sp)
   1c578:	00bf3034 	movhi	r2,64704
   1c57c:	1885883a 	add	r2,r3,r2
   1c580:	d8800d15 	stw	r2,52(sp)
   1c584:	9009883a 	mov	r4,r18
   1c588:	a00b883a 	mov	r5,r20
   1c58c:	000d883a 	mov	r6,zero
   1c590:	01d00534 	movhi	r7,16404
   1c594:	00144580 	call	14458 <__subdf3>
   1c598:	df000c17 	ldw	fp,48(sp)
   1c59c:	dd000d17 	ldw	r20,52(sp)
   1c5a0:	1009883a 	mov	r4,r2
   1c5a4:	e00d883a 	mov	r6,fp
   1c5a8:	a00f883a 	mov	r7,r20
   1c5ac:	180b883a 	mov	r5,r3
   1c5b0:	1025883a 	mov	r18,r2
   1c5b4:	1823883a 	mov	r17,r3
   1c5b8:	0013c9c0 	call	13c9c <__gedf2>
   1c5bc:	00807a16 	blt	zero,r2,1c7a8 <_dtoa_r+0x13ec>
   1c5c0:	a1e0003c 	xorhi	r7,r20,32768
   1c5c4:	e00d883a 	mov	r6,fp
   1c5c8:	9009883a 	mov	r4,r18
   1c5cc:	880b883a 	mov	r5,r17
   1c5d0:	0024d180 	call	24d18 <__ledf2>
   1c5d4:	103d5a0e 	bge	r2,zero,1bb40 <__alt_mem_mcu_subsystem_ram_0+0x77ffbb40>
   1c5d8:	0025883a 	mov	r18,zero
   1c5dc:	0023883a 	mov	r17,zero
   1c5e0:	003fc906 	br	1c508 <__alt_mem_mcu_subsystem_ram_0+0x77ffc508>
   1c5e4:	00800044 	movi	r2,1
   1c5e8:	04800044 	movi	r18,1
   1c5ec:	d8800415 	stw	r2,16(sp)
   1c5f0:	d8802015 	stw	r2,128(sp)
   1c5f4:	003c7706 	br	1b7d4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb7d4>
   1c5f8:	d8000615 	stw	zero,24(sp)
   1c5fc:	003c2606 	br	1b698 <__alt_mem_mcu_subsystem_ram_0+0x77ffb698>
   1c600:	d9800717 	ldw	r6,28(sp)
   1c604:	b80b883a 	mov	r5,r23
   1c608:	8009883a 	mov	r4,r16
   1c60c:	001e5e40 	call	1e5e4 <__pow5mult>
   1c610:	102f883a 	mov	r23,r2
   1c614:	003e0406 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c618:	dd800117 	ldw	r22,4(sp)
   1c61c:	dc000217 	ldw	r16,8(sp)
   1c620:	003eef06 	br	1c1e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1e0>
   1c624:	d8800717 	ldw	r2,28(sp)
   1c628:	d8c00817 	ldw	r3,32(sp)
   1c62c:	dc800715 	stw	r18,28(sp)
   1c630:	9085c83a 	sub	r2,r18,r2
   1c634:	1885883a 	add	r2,r3,r2
   1c638:	d8800815 	stw	r2,32(sp)
   1c63c:	0025883a 	mov	r18,zero
   1c640:	003dda06 	br	1bdac <__alt_mem_mcu_subsystem_ram_0+0x77ffbdac>
   1c644:	b02b883a 	mov	r21,r22
   1c648:	e011883a 	mov	r8,fp
   1c64c:	dd800717 	ldw	r22,28(sp)
   1c650:	9f000044 	addi	fp,r19,1
   1c654:	00809816 	blt	zero,r2,1c8b8 <_dtoa_r+0x14fc>
   1c658:	882b883a 	mov	r21,r17
   1c65c:	9a000005 	stb	r8,0(r19)
   1c660:	a023883a 	mov	r17,r20
   1c664:	003ed206 	br	1c1b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1b0>
   1c668:	d8800117 	ldw	r2,4(sp)
   1c66c:	dcc00d15 	stw	r19,52(sp)
   1c670:	04400084 	movi	r17,2
   1c674:	d8800c15 	stw	r2,48(sp)
   1c678:	003c7a06 	br	1b864 <__alt_mem_mcu_subsystem_ram_0+0x77ffb864>
   1c67c:	0005883a 	mov	r2,zero
   1c680:	003f0c06 	br	1c2b4 <__alt_mem_mcu_subsystem_ram_0+0x77ffc2b4>
   1c684:	e011883a 	mov	r8,fp
   1c688:	40800e58 	cmpnei	r2,r8,57
   1c68c:	a839883a 	mov	fp,r21
   1c690:	dd800717 	ldw	r22,28(sp)
   1c694:	10009726 	beq	r2,zero,1c8f4 <_dtoa_r+0x1538>
   1c698:	42000044 	addi	r8,r8,1
   1c69c:	003fee06 	br	1c658 <__alt_mem_mcu_subsystem_ram_0+0x77ffc658>
   1c6a0:	d8800517 	ldw	r2,20(sp)
   1c6a4:	d8c00417 	ldw	r3,16(sp)
   1c6a8:	10e9c83a 	sub	r20,r2,r3
   1c6ac:	003dc606 	br	1bdc8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbdc8>
   1c6b0:	e011883a 	mov	r8,fp
   1c6b4:	dd800717 	ldw	r22,28(sp)
   1c6b8:	a839883a 	mov	fp,r21
   1c6bc:	882b883a 	mov	r21,r17
   1c6c0:	a023883a 	mov	r17,r20
   1c6c4:	003e9506 	br	1c11c <__alt_mem_mcu_subsystem_ram_0+0x77ffc11c>
   1c6c8:	d9000c17 	ldw	r4,48(sp)
   1c6cc:	d9400d17 	ldw	r5,52(sp)
   1c6d0:	0013d7c0 	call	13d7c <__muldf3>
   1c6d4:	d8800c15 	stw	r2,48(sp)
   1c6d8:	d8800f17 	ldw	r2,60(sp)
   1c6dc:	d8c00d15 	stw	r3,52(sp)
   1c6e0:	b0800005 	stb	r2,0(r22)
   1c6e4:	d8800e17 	ldw	r2,56(sp)
   1c6e8:	10800058 	cmpnei	r2,r2,1
   1c6ec:	10001f26 	beq	r2,zero,1c76c <_dtoa_r+0x13b0>
   1c6f0:	d8800e17 	ldw	r2,56(sp)
   1c6f4:	8807883a 	mov	r3,r17
   1c6f8:	dc000e15 	stw	r16,56(sp)
   1c6fc:	b089883a 	add	r4,r22,r2
   1c700:	2021883a 	mov	r16,r4
   1c704:	9005883a 	mov	r2,r18
   1c708:	000d883a 	mov	r6,zero
   1c70c:	01d00934 	movhi	r7,16420
   1c710:	1009883a 	mov	r4,r2
   1c714:	180b883a 	mov	r5,r3
   1c718:	0013d7c0 	call	13d7c <__muldf3>
   1c71c:	180b883a 	mov	r5,r3
   1c720:	1009883a 	mov	r4,r2
   1c724:	1825883a 	mov	r18,r3
   1c728:	1023883a 	mov	r17,r2
   1c72c:	0014d2c0 	call	14d2c <__fixdfsi>
   1c730:	1009883a 	mov	r4,r2
   1c734:	1029883a 	mov	r20,r2
   1c738:	0024e4c0 	call	24e4c <__floatsidf>
   1c73c:	100d883a 	mov	r6,r2
   1c740:	180f883a 	mov	r7,r3
   1c744:	8809883a 	mov	r4,r17
   1c748:	900b883a 	mov	r5,r18
   1c74c:	e7000044 	addi	fp,fp,1
   1c750:	a5000c04 	addi	r20,r20,48
   1c754:	00144580 	call	14458 <__subdf3>
   1c758:	e53fffc5 	stb	r20,-1(fp)
   1c75c:	e43fea1e 	bne	fp,r16,1c708 <__alt_mem_mcu_subsystem_ram_0+0x77ffc708>
   1c760:	dc000e17 	ldw	r16,56(sp)
   1c764:	1025883a 	mov	r18,r2
   1c768:	1823883a 	mov	r17,r3
   1c76c:	d9000c17 	ldw	r4,48(sp)
   1c770:	d9400d17 	ldw	r5,52(sp)
   1c774:	000d883a 	mov	r6,zero
   1c778:	01cff834 	movhi	r7,16352
   1c77c:	0012b100 	call	12b10 <__adddf3>
   1c780:	100d883a 	mov	r6,r2
   1c784:	180f883a 	mov	r7,r3
   1c788:	9009883a 	mov	r4,r18
   1c78c:	880b883a 	mov	r5,r17
   1c790:	0013c9c0 	call	13c9c <__gedf2>
   1c794:	00805d0e 	bge	zero,r2,1c90c <_dtoa_r+0x1550>
   1c798:	d8801217 	ldw	r2,72(sp)
   1c79c:	e23fffc3 	ldbu	r8,-1(fp)
   1c7a0:	d8800315 	stw	r2,12(sp)
   1c7a4:	003d6e06 	br	1bd60 <__alt_mem_mcu_subsystem_ram_0+0x77ffbd60>
   1c7a8:	0025883a 	mov	r18,zero
   1c7ac:	0023883a 	mov	r17,zero
   1c7b0:	003efe06 	br	1c3ac <__alt_mem_mcu_subsystem_ram_0+0x77ffc3ac>
   1c7b4:	00800c04 	movi	r2,48
   1c7b8:	b0800005 	stb	r2,0(r22)
   1c7bc:	d8800317 	ldw	r2,12(sp)
   1c7c0:	e23fffc3 	ldbu	r8,-1(fp)
   1c7c4:	b007883a 	mov	r3,r22
   1c7c8:	10800044 	addi	r2,r2,1
   1c7cc:	d8800315 	stw	r2,12(sp)
   1c7d0:	003d6906 	br	1bd78 <__alt_mem_mcu_subsystem_ram_0+0x77ffbd78>
   1c7d4:	d8c01417 	ldw	r3,80(sp)
   1c7d8:	d9000517 	ldw	r4,20(sp)
   1c7dc:	00800d84 	movi	r2,54
   1c7e0:	10c5c83a 	sub	r2,r2,r3
   1c7e4:	a8ab883a 	add	r21,r21,r2
   1c7e8:	2085883a 	add	r2,r4,r2
   1c7ec:	2029883a 	mov	r20,r4
   1c7f0:	dc800717 	ldw	r18,28(sp)
   1c7f4:	d8800515 	stw	r2,20(sp)
   1c7f8:	003d7306 	br	1bdc8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbdc8>
   1c7fc:	900b883a 	mov	r5,r18
   1c800:	8009883a 	mov	r4,r16
   1c804:	000f883a 	mov	r7,zero
   1c808:	01800144 	movi	r6,5
   1c80c:	001e07c0 	call	1e07c <__multadd>
   1c810:	100b883a 	mov	r5,r2
   1c814:	b809883a 	mov	r4,r23
   1c818:	1025883a 	mov	r18,r2
   1c81c:	001e84c0 	call	1e84c <__mcmp>
   1c820:	00bee216 	blt	zero,r2,1c3ac <__alt_mem_mcu_subsystem_ram_0+0x77ffc3ac>
   1c824:	003f3806 	br	1c508 <__alt_mem_mcu_subsystem_ram_0+0x77ffc508>
   1c828:	dc800117 	ldw	r18,4(sp)
   1c82c:	9829883a 	mov	r20,r19
   1c830:	04400084 	movi	r17,2
   1c834:	003c2406 	br	1b8c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb8c8>
   1c838:	d8800417 	ldw	r2,16(sp)
   1c83c:	103f4126 	beq	r2,zero,1c544 <__alt_mem_mcu_subsystem_ram_0+0x77ffc544>
   1c840:	df000a17 	ldw	fp,40(sp)
   1c844:	073cbe0e 	bge	zero,fp,1bb40 <__alt_mem_mcu_subsystem_ram_0+0x77ffbb40>
   1c848:	a00b883a 	mov	r5,r20
   1c84c:	000d883a 	mov	r6,zero
   1c850:	01d00934 	movhi	r7,16420
   1c854:	9009883a 	mov	r4,r18
   1c858:	0013d7c0 	call	13d7c <__muldf3>
   1c85c:	89000044 	addi	r4,r17,1
   1c860:	1025883a 	mov	r18,r2
   1c864:	1829883a 	mov	r20,r3
   1c868:	0024e4c0 	call	24e4c <__floatsidf>
   1c86c:	900d883a 	mov	r6,r18
   1c870:	a00f883a 	mov	r7,r20
   1c874:	1009883a 	mov	r4,r2
   1c878:	180b883a 	mov	r5,r3
   1c87c:	0013d7c0 	call	13d7c <__muldf3>
   1c880:	000d883a 	mov	r6,zero
   1c884:	01d00734 	movhi	r7,16412
   1c888:	1009883a 	mov	r4,r2
   1c88c:	180b883a 	mov	r5,r3
   1c890:	0012b100 	call	12b10 <__adddf3>
   1c894:	d8800c15 	stw	r2,48(sp)
   1c898:	d8800317 	ldw	r2,12(sp)
   1c89c:	df000e15 	stw	fp,56(sp)
   1c8a0:	10bfffc4 	addi	r2,r2,-1
   1c8a4:	d8801215 	stw	r2,72(sp)
   1c8a8:	00bf3034 	movhi	r2,64704
   1c8ac:	1885883a 	add	r2,r3,r2
   1c8b0:	d8800d15 	stw	r2,52(sp)
   1c8b4:	003c2206 	br	1b940 <__alt_mem_mcu_subsystem_ram_0+0x77ffb940>
   1c8b8:	b80b883a 	mov	r5,r23
   1c8bc:	01800044 	movi	r6,1
   1c8c0:	8009883a 	mov	r4,r16
   1c8c4:	da000115 	stw	r8,4(sp)
   1c8c8:	001e7080 	call	1e708 <__lshift>
   1c8cc:	900b883a 	mov	r5,r18
   1c8d0:	1009883a 	mov	r4,r2
   1c8d4:	102f883a 	mov	r23,r2
   1c8d8:	001e84c0 	call	1e84c <__mcmp>
   1c8dc:	da000117 	ldw	r8,4(sp)
   1c8e0:	0080390e 	bge	zero,r2,1c9c8 <_dtoa_r+0x160c>
   1c8e4:	42000e60 	cmpeqi	r8,r8,57
   1c8e8:	4000021e 	bne	r8,zero,1c8f4 <_dtoa_r+0x1538>
   1c8ec:	aa000c44 	addi	r8,r21,49
   1c8f0:	003f5906 	br	1c658 <__alt_mem_mcu_subsystem_ram_0+0x77ffc658>
   1c8f4:	00800e44 	movi	r2,57
   1c8f8:	882b883a 	mov	r21,r17
   1c8fc:	98800005 	stb	r2,0(r19)
   1c900:	a023883a 	mov	r17,r20
   1c904:	00c00e44 	movi	r3,57
   1c908:	003e2106 	br	1c190 <__alt_mem_mcu_subsystem_ram_0+0x77ffc190>
   1c90c:	d9800c17 	ldw	r6,48(sp)
   1c910:	d9c00d17 	ldw	r7,52(sp)
   1c914:	0009883a 	mov	r4,zero
   1c918:	014ff834 	movhi	r5,16352
   1c91c:	00144580 	call	14458 <__subdf3>
   1c920:	100d883a 	mov	r6,r2
   1c924:	180f883a 	mov	r7,r3
   1c928:	9009883a 	mov	r4,r18
   1c92c:	880b883a 	mov	r5,r17
   1c930:	0024d180 	call	24d18 <__ledf2>
   1c934:	10000216 	blt	r2,zero,1c940 <_dtoa_r+0x1584>
   1c938:	003c8106 	br	1bb40 <__alt_mem_mcu_subsystem_ram_0+0x77ffbb40>
   1c93c:	1839883a 	mov	fp,r3
   1c940:	e0bfffc7 	ldb	r2,-1(fp)
   1c944:	e0ffffc4 	addi	r3,fp,-1
   1c948:	10800c20 	cmpeqi	r2,r2,48
   1c94c:	103ffb1e 	bne	r2,zero,1c93c <__alt_mem_mcu_subsystem_ram_0+0x77ffc93c>
   1c950:	d8801217 	ldw	r2,72(sp)
   1c954:	d8800315 	stw	r2,12(sp)
   1c958:	003e2106 	br	1c1e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1e0>
   1c95c:	80001115 	stw	zero,68(r16)
   1c960:	000b883a 	mov	r5,zero
   1c964:	8009883a 	mov	r4,r16
   1c968:	001dfb40 	call	1dfb4 <_Balloc>
   1c96c:	102d883a 	mov	r22,r2
   1c970:	80801015 	stw	r2,64(r16)
   1c974:	00bfffc4 	movi	r2,-1
   1c978:	d8800415 	stw	r2,16(sp)
   1c97c:	d8800a15 	stw	r2,40(sp)
   1c980:	00800044 	movi	r2,1
   1c984:	d8002015 	stw	zero,128(sp)
   1c988:	d8800615 	stw	r2,24(sp)
   1c98c:	003c6c06 	br	1bb40 <__alt_mem_mcu_subsystem_ram_0+0x77ffbb40>
   1c990:	ddc00d17 	ldw	r23,52(sp)
   1c994:	9811883a 	mov	r8,r19
   1c998:	d8801217 	ldw	r2,72(sp)
   1c99c:	d8800315 	stw	r2,12(sp)
   1c9a0:	003cef06 	br	1bd60 <__alt_mem_mcu_subsystem_ram_0+0x77ffbd60>
   1c9a4:	e0800e60 	cmpeqi	r2,fp,57
   1c9a8:	b007883a 	mov	r3,r22
   1c9ac:	e011883a 	mov	r8,fp
   1c9b0:	dd800717 	ldw	r22,28(sp)
   1c9b4:	9f000044 	addi	fp,r19,1
   1c9b8:	103fce1e 	bne	r2,zero,1c8f4 <__alt_mem_mcu_subsystem_ram_0+0x77ffc8f4>
   1c9bc:	057f260e 	bge	zero,r21,1c658 <__alt_mem_mcu_subsystem_ram_0+0x77ffc658>
   1c9c0:	1a000c44 	addi	r8,r3,49
   1c9c4:	003f2406 	br	1c658 <__alt_mem_mcu_subsystem_ram_0+0x77ffc658>
   1c9c8:	103f231e 	bne	r2,zero,1c658 <__alt_mem_mcu_subsystem_ram_0+0x77ffc658>
   1c9cc:	4080004c 	andi	r2,r8,1
   1c9d0:	103f2126 	beq	r2,zero,1c658 <__alt_mem_mcu_subsystem_ram_0+0x77ffc658>
   1c9d4:	003fc306 	br	1c8e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffc8e4>
   1c9d8:	880b883a 	mov	r5,r17
   1c9dc:	000f883a 	mov	r7,zero
   1c9e0:	01800284 	movi	r6,10
   1c9e4:	8009883a 	mov	r4,r16
   1c9e8:	001e07c0 	call	1e07c <__multadd>
   1c9ec:	1023883a 	mov	r17,r2
   1c9f0:	d8800a17 	ldw	r2,40(sp)
   1c9f4:	00800a0e 	bge	zero,r2,1ca20 <_dtoa_r+0x1664>
   1c9f8:	d8800415 	stw	r2,16(sp)
   1c9fc:	053d310e 	bge	zero,r20,1bec4 <__alt_mem_mcu_subsystem_ram_0+0x77ffbec4>
   1ca00:	003e4206 	br	1c30c <__alt_mem_mcu_subsystem_ram_0+0x77ffc30c>
   1ca04:	d8800217 	ldw	r2,8(sp)
   1ca08:	108000c8 	cmpgei	r2,r2,3
   1ca0c:	1000121e 	bne	r2,zero,1ca58 <_dtoa_r+0x169c>
   1ca10:	d8800a17 	ldw	r2,40(sp)
   1ca14:	003dae06 	br	1c0d0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc0d0>
   1ca18:	04400084 	movi	r17,2
   1ca1c:	003baa06 	br	1b8c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb8c8>
   1ca20:	d8800217 	ldw	r2,8(sp)
   1ca24:	108000c8 	cmpgei	r2,r2,3
   1ca28:	10000b1e 	bne	r2,zero,1ca58 <_dtoa_r+0x169c>
   1ca2c:	d8800a17 	ldw	r2,40(sp)
   1ca30:	003ff106 	br	1c9f8 <__alt_mem_mcu_subsystem_ram_0+0x77ffc9f8>
   1ca34:	000b883a 	mov	r5,zero
   1ca38:	003b6a06 	br	1b7e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb7e4>
   1ca3c:	18c00120 	cmpeqi	r3,r3,4
   1ca40:	183d111e 	bne	r3,zero,1be88 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe88>
   1ca44:	00c00f04 	movi	r3,60
   1ca48:	1885c83a 	sub	r2,r3,r2
   1ca4c:	003d0906 	br	1be74 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe74>
   1ca50:	b58e9e04 	addi	r22,r22,14968
   1ca54:	003a8a06 	br	1b480 <__alt_mem_mcu_subsystem_ram_0+0x77ffb480>
   1ca58:	d8800a17 	ldw	r2,40(sp)
   1ca5c:	d8800415 	stw	r2,16(sp)
   1ca60:	003ea706 	br	1c500 <__alt_mem_mcu_subsystem_ram_0+0x77ffc500>

0001ca64 <__sflush_r>:
   1ca64:	2880030b 	ldhu	r2,12(r5)
   1ca68:	defffb04 	addi	sp,sp,-20
   1ca6c:	dcc00315 	stw	r19,12(sp)
   1ca70:	dc000015 	stw	r16,0(sp)
   1ca74:	dfc00415 	stw	ra,16(sp)
   1ca78:	dc800215 	stw	r18,8(sp)
   1ca7c:	dc400115 	stw	r17,4(sp)
   1ca80:	10c0020c 	andi	r3,r2,8
   1ca84:	2821883a 	mov	r16,r5
   1ca88:	2027883a 	mov	r19,r4
   1ca8c:	1800351e 	bne	r3,zero,1cb64 <__sflush_r+0x100>
   1ca90:	28c00117 	ldw	r3,4(r5)
   1ca94:	10820014 	ori	r2,r2,2048
   1ca98:	2880030d 	sth	r2,12(r5)
   1ca9c:	00c04b0e 	bge	zero,r3,1cbcc <__sflush_r+0x168>
   1caa0:	82000a17 	ldw	r8,40(r16)
   1caa4:	40004b26 	beq	r8,zero,1cbd4 <__sflush_r+0x170>
   1caa8:	9c400017 	ldw	r17,0(r19)
   1caac:	10c4000c 	andi	r3,r2,4096
   1cab0:	98000015 	stw	zero,0(r19)
   1cab4:	81400717 	ldw	r5,28(r16)
   1cab8:	1800701e 	bne	r3,zero,1cc7c <__sflush_r+0x218>
   1cabc:	000d883a 	mov	r6,zero
   1cac0:	01c00044 	movi	r7,1
   1cac4:	9809883a 	mov	r4,r19
   1cac8:	403ee83a 	callr	r8
   1cacc:	100d883a 	mov	r6,r2
   1cad0:	10bfffd8 	cmpnei	r2,r2,-1
   1cad4:	10004926 	beq	r2,zero,1cbfc <__sflush_r+0x198>
   1cad8:	8080030b 	ldhu	r2,12(r16)
   1cadc:	82000a17 	ldw	r8,40(r16)
   1cae0:	81400717 	ldw	r5,28(r16)
   1cae4:	10c0010c 	andi	r3,r2,4
   1cae8:	18000626 	beq	r3,zero,1cb04 <__sflush_r+0xa0>
   1caec:	80c00117 	ldw	r3,4(r16)
   1caf0:	80800c17 	ldw	r2,48(r16)
   1caf4:	30cdc83a 	sub	r6,r6,r3
   1caf8:	10000226 	beq	r2,zero,1cb04 <__sflush_r+0xa0>
   1cafc:	80800f17 	ldw	r2,60(r16)
   1cb00:	308dc83a 	sub	r6,r6,r2
   1cb04:	000f883a 	mov	r7,zero
   1cb08:	9809883a 	mov	r4,r19
   1cb0c:	403ee83a 	callr	r8
   1cb10:	10ffffd8 	cmpnei	r3,r2,-1
   1cb14:	18004226 	beq	r3,zero,1cc20 <__sflush_r+0x1bc>
   1cb18:	80c0030b 	ldhu	r3,12(r16)
   1cb1c:	81000417 	ldw	r4,16(r16)
   1cb20:	80000115 	stw	zero,4(r16)
   1cb24:	197dffcc 	andi	r5,r3,63487
   1cb28:	8140030d 	sth	r5,12(r16)
   1cb2c:	81000015 	stw	r4,0(r16)
   1cb30:	18c4000c 	andi	r3,r3,4096
   1cb34:	18000126 	beq	r3,zero,1cb3c <__sflush_r+0xd8>
   1cb38:	80801415 	stw	r2,80(r16)
   1cb3c:	81400c17 	ldw	r5,48(r16)
   1cb40:	9c400015 	stw	r17,0(r19)
   1cb44:	28002326 	beq	r5,zero,1cbd4 <__sflush_r+0x170>
   1cb48:	80801004 	addi	r2,r16,64
   1cb4c:	28800226 	beq	r5,r2,1cb58 <__sflush_r+0xf4>
   1cb50:	9809883a 	mov	r4,r19
   1cb54:	001d1880 	call	1d188 <_free_r>
   1cb58:	80000c15 	stw	zero,48(r16)
   1cb5c:	0005883a 	mov	r2,zero
   1cb60:	00001d06 	br	1cbd8 <__sflush_r+0x174>
   1cb64:	2c800417 	ldw	r18,16(r5)
   1cb68:	90001a26 	beq	r18,zero,1cbd4 <__sflush_r+0x170>
   1cb6c:	2c400017 	ldw	r17,0(r5)
   1cb70:	108000cc 	andi	r2,r2,3
   1cb74:	2c800015 	stw	r18,0(r5)
   1cb78:	8ca3c83a 	sub	r17,r17,r18
   1cb7c:	10001d26 	beq	r2,zero,1cbf4 <__sflush_r+0x190>
   1cb80:	0005883a 	mov	r2,zero
   1cb84:	80800215 	stw	r2,8(r16)
   1cb88:	04400316 	blt	zero,r17,1cb98 <__sflush_r+0x134>
   1cb8c:	00001106 	br	1cbd4 <__sflush_r+0x170>
   1cb90:	90a5883a 	add	r18,r18,r2
   1cb94:	04400f0e 	bge	zero,r17,1cbd4 <__sflush_r+0x170>
   1cb98:	80800917 	ldw	r2,36(r16)
   1cb9c:	81400717 	ldw	r5,28(r16)
   1cba0:	880f883a 	mov	r7,r17
   1cba4:	900d883a 	mov	r6,r18
   1cba8:	9809883a 	mov	r4,r19
   1cbac:	103ee83a 	callr	r2
   1cbb0:	88a3c83a 	sub	r17,r17,r2
   1cbb4:	00bff616 	blt	zero,r2,1cb90 <__alt_mem_mcu_subsystem_ram_0+0x77ffcb90>
   1cbb8:	80c0030b 	ldhu	r3,12(r16)
   1cbbc:	00bfffc4 	movi	r2,-1
   1cbc0:	18c01014 	ori	r3,r3,64
   1cbc4:	80c0030d 	sth	r3,12(r16)
   1cbc8:	00000306 	br	1cbd8 <__sflush_r+0x174>
   1cbcc:	28c00f17 	ldw	r3,60(r5)
   1cbd0:	00ffb316 	blt	zero,r3,1caa0 <__alt_mem_mcu_subsystem_ram_0+0x77ffcaa0>
   1cbd4:	0005883a 	mov	r2,zero
   1cbd8:	dfc00417 	ldw	ra,16(sp)
   1cbdc:	dcc00317 	ldw	r19,12(sp)
   1cbe0:	dc800217 	ldw	r18,8(sp)
   1cbe4:	dc400117 	ldw	r17,4(sp)
   1cbe8:	dc000017 	ldw	r16,0(sp)
   1cbec:	dec00504 	addi	sp,sp,20
   1cbf0:	f800283a 	ret
   1cbf4:	28800517 	ldw	r2,20(r5)
   1cbf8:	003fe206 	br	1cb84 <__alt_mem_mcu_subsystem_ram_0+0x77ffcb84>
   1cbfc:	98800017 	ldw	r2,0(r19)
   1cc00:	103fb526 	beq	r2,zero,1cad8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcad8>
   1cc04:	10c00760 	cmpeqi	r3,r2,29
   1cc08:	1800021e 	bne	r3,zero,1cc14 <__sflush_r+0x1b0>
   1cc0c:	10800598 	cmpnei	r2,r2,22
   1cc10:	103fe91e 	bne	r2,zero,1cbb8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbb8>
   1cc14:	9c400015 	stw	r17,0(r19)
   1cc18:	0005883a 	mov	r2,zero
   1cc1c:	003fee06 	br	1cbd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbd8>
   1cc20:	99400017 	ldw	r5,0(r19)
   1cc24:	28c007b0 	cmpltui	r3,r5,30
   1cc28:	18000f26 	beq	r3,zero,1cc68 <__sflush_r+0x204>
   1cc2c:	00c81034 	movhi	r3,8256
   1cc30:	18c00044 	addi	r3,r3,1
   1cc34:	1946d83a 	srl	r3,r3,r5
   1cc38:	8100030b 	ldhu	r4,12(r16)
   1cc3c:	18c0004c 	andi	r3,r3,1
   1cc40:	18000a26 	beq	r3,zero,1cc6c <__sflush_r+0x208>
   1cc44:	80c00417 	ldw	r3,16(r16)
   1cc48:	21bdffcc 	andi	r6,r4,63487
   1cc4c:	8180030d 	sth	r6,12(r16)
   1cc50:	80000115 	stw	zero,4(r16)
   1cc54:	80c00015 	stw	r3,0(r16)
   1cc58:	2104000c 	andi	r4,r4,4096
   1cc5c:	203fb726 	beq	r4,zero,1cb3c <__alt_mem_mcu_subsystem_ram_0+0x77ffcb3c>
   1cc60:	283fb61e 	bne	r5,zero,1cb3c <__alt_mem_mcu_subsystem_ram_0+0x77ffcb3c>
   1cc64:	003fb406 	br	1cb38 <__alt_mem_mcu_subsystem_ram_0+0x77ffcb38>
   1cc68:	8100030b 	ldhu	r4,12(r16)
   1cc6c:	21001014 	ori	r4,r4,64
   1cc70:	8100030d 	sth	r4,12(r16)
   1cc74:	00bfffc4 	movi	r2,-1
   1cc78:	003fd706 	br	1cbd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbd8>
   1cc7c:	81801417 	ldw	r6,80(r16)
   1cc80:	003f9806 	br	1cae4 <__alt_mem_mcu_subsystem_ram_0+0x77ffcae4>

0001cc84 <_fflush_r>:
   1cc84:	defffd04 	addi	sp,sp,-12
   1cc88:	dc000115 	stw	r16,4(sp)
   1cc8c:	dfc00215 	stw	ra,8(sp)
   1cc90:	2021883a 	mov	r16,r4
   1cc94:	20000226 	beq	r4,zero,1cca0 <_fflush_r+0x1c>
   1cc98:	20800e17 	ldw	r2,56(r4)
   1cc9c:	10000726 	beq	r2,zero,1ccbc <_fflush_r+0x38>
   1cca0:	2880030f 	ldh	r2,12(r5)
   1cca4:	10000a1e 	bne	r2,zero,1ccd0 <_fflush_r+0x4c>
   1cca8:	0005883a 	mov	r2,zero
   1ccac:	dfc00217 	ldw	ra,8(sp)
   1ccb0:	dc000117 	ldw	r16,4(sp)
   1ccb4:	dec00304 	addi	sp,sp,12
   1ccb8:	f800283a 	ret
   1ccbc:	d9400015 	stw	r5,0(sp)
   1ccc0:	001d0240 	call	1d024 <__sinit>
   1ccc4:	d9400017 	ldw	r5,0(sp)
   1ccc8:	2880030f 	ldh	r2,12(r5)
   1cccc:	103ff626 	beq	r2,zero,1cca8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcca8>
   1ccd0:	8009883a 	mov	r4,r16
   1ccd4:	dfc00217 	ldw	ra,8(sp)
   1ccd8:	dc000117 	ldw	r16,4(sp)
   1ccdc:	dec00304 	addi	sp,sp,12
   1cce0:	001ca641 	jmpi	1ca64 <__sflush_r>

0001cce4 <fflush>:
   1cce4:	200b883a 	mov	r5,r4
   1cce8:	20000326 	beq	r4,zero,1ccf8 <fflush+0x14>
   1ccec:	008000f4 	movhi	r2,3
   1ccf0:	111e6617 	ldw	r4,31128(r2)
   1ccf4:	001cc841 	jmpi	1cc84 <_fflush_r>
   1ccf8:	008000f4 	movhi	r2,3
   1ccfc:	111e6517 	ldw	r4,31124(r2)
   1cd00:	014000b4 	movhi	r5,2
   1cd04:	29732104 	addi	r5,r5,-13180
   1cd08:	001d9bc1 	jmpi	1d9bc <_fwalk_reent>

0001cd0c <__fp_lock>:
   1cd0c:	0005883a 	mov	r2,zero
   1cd10:	f800283a 	ret

0001cd14 <_cleanup_r>:
   1cd14:	014000b4 	movhi	r5,2
   1cd18:	294e8204 	addi	r5,r5,14856
   1cd1c:	001d9bc1 	jmpi	1d9bc <_fwalk_reent>

0001cd20 <__sinit.part.0>:
   1cd20:	defff804 	addi	sp,sp,-32
   1cd24:	008000b4 	movhi	r2,2
   1cd28:	dfc00715 	stw	ra,28(sp)
   1cd2c:	dd800615 	stw	r22,24(sp)
   1cd30:	dd400515 	stw	r21,20(sp)
   1cd34:	dd000415 	stw	r20,16(sp)
   1cd38:	dcc00315 	stw	r19,12(sp)
   1cd3c:	dc800215 	stw	r18,8(sp)
   1cd40:	dc400115 	stw	r17,4(sp)
   1cd44:	dc000015 	stw	r16,0(sp)
   1cd48:	10b34504 	addi	r2,r2,-13036
   1cd4c:	24000117 	ldw	r16,4(r4)
   1cd50:	20800f15 	stw	r2,60(r4)
   1cd54:	20c0bb04 	addi	r3,r4,748
   1cd58:	008000c4 	movi	r2,3
   1cd5c:	20c0ba15 	stw	r3,744(r4)
   1cd60:	2080b915 	stw	r2,740(r4)
   1cd64:	2000b815 	stw	zero,736(r4)
   1cd68:	00800104 	movi	r2,4
   1cd6c:	2025883a 	mov	r18,r4
   1cd70:	01800204 	movi	r6,8
   1cd74:	81001704 	addi	r4,r16,92
   1cd78:	000b883a 	mov	r5,zero
   1cd7c:	80001915 	stw	zero,100(r16)
   1cd80:	80000015 	stw	zero,0(r16)
   1cd84:	80000115 	stw	zero,4(r16)
   1cd88:	80000215 	stw	zero,8(r16)
   1cd8c:	80800315 	stw	r2,12(r16)
   1cd90:	80000415 	stw	zero,16(r16)
   1cd94:	80000515 	stw	zero,20(r16)
   1cd98:	80000615 	stw	zero,24(r16)
   1cd9c:	0015bb00 	call	15bb0 <memset>
   1cda0:	058000b4 	movhi	r22,2
   1cda4:	94400217 	ldw	r17,8(r18)
   1cda8:	054000b4 	movhi	r21,2
   1cdac:	050000b4 	movhi	r20,2
   1cdb0:	04c000b4 	movhi	r19,2
   1cdb4:	b5be4204 	addi	r22,r22,-1784
   1cdb8:	ad7e5904 	addi	r21,r21,-1692
   1cdbc:	a53e7804 	addi	r20,r20,-1568
   1cdc0:	9cfe8f04 	addi	r19,r19,-1476
   1cdc4:	00800074 	movhi	r2,1
   1cdc8:	85800815 	stw	r22,32(r16)
   1cdcc:	85400915 	stw	r21,36(r16)
   1cdd0:	85000a15 	stw	r20,40(r16)
   1cdd4:	84c00b15 	stw	r19,44(r16)
   1cdd8:	84000715 	stw	r16,28(r16)
   1cddc:	10800284 	addi	r2,r2,10
   1cde0:	89001704 	addi	r4,r17,92
   1cde4:	01800204 	movi	r6,8
   1cde8:	000b883a 	mov	r5,zero
   1cdec:	88001915 	stw	zero,100(r17)
   1cdf0:	88000015 	stw	zero,0(r17)
   1cdf4:	88000115 	stw	zero,4(r17)
   1cdf8:	88000215 	stw	zero,8(r17)
   1cdfc:	88800315 	stw	r2,12(r17)
   1ce00:	88000415 	stw	zero,16(r17)
   1ce04:	88000515 	stw	zero,20(r17)
   1ce08:	88000615 	stw	zero,24(r17)
   1ce0c:	0015bb00 	call	15bb0 <memset>
   1ce10:	94000317 	ldw	r16,12(r18)
   1ce14:	008000b4 	movhi	r2,2
   1ce18:	8c400715 	stw	r17,28(r17)
   1ce1c:	8d800815 	stw	r22,32(r17)
   1ce20:	8d400915 	stw	r21,36(r17)
   1ce24:	8d000a15 	stw	r20,40(r17)
   1ce28:	8cc00b15 	stw	r19,44(r17)
   1ce2c:	10800484 	addi	r2,r2,18
   1ce30:	80001915 	stw	zero,100(r16)
   1ce34:	80000015 	stw	zero,0(r16)
   1ce38:	80000115 	stw	zero,4(r16)
   1ce3c:	80000215 	stw	zero,8(r16)
   1ce40:	80800315 	stw	r2,12(r16)
   1ce44:	80000415 	stw	zero,16(r16)
   1ce48:	80000515 	stw	zero,20(r16)
   1ce4c:	80000615 	stw	zero,24(r16)
   1ce50:	01800204 	movi	r6,8
   1ce54:	000b883a 	mov	r5,zero
   1ce58:	81001704 	addi	r4,r16,92
   1ce5c:	0015bb00 	call	15bb0 <memset>
   1ce60:	00800044 	movi	r2,1
   1ce64:	84000715 	stw	r16,28(r16)
   1ce68:	85800815 	stw	r22,32(r16)
   1ce6c:	85400915 	stw	r21,36(r16)
   1ce70:	85000a15 	stw	r20,40(r16)
   1ce74:	84c00b15 	stw	r19,44(r16)
   1ce78:	90800e15 	stw	r2,56(r18)
   1ce7c:	dfc00717 	ldw	ra,28(sp)
   1ce80:	dd800617 	ldw	r22,24(sp)
   1ce84:	dd400517 	ldw	r21,20(sp)
   1ce88:	dd000417 	ldw	r20,16(sp)
   1ce8c:	dcc00317 	ldw	r19,12(sp)
   1ce90:	dc800217 	ldw	r18,8(sp)
   1ce94:	dc400117 	ldw	r17,4(sp)
   1ce98:	dc000017 	ldw	r16,0(sp)
   1ce9c:	dec00804 	addi	sp,sp,32
   1cea0:	f800283a 	ret

0001cea4 <__fp_unlock>:
   1cea4:	0005883a 	mov	r2,zero
   1cea8:	f800283a 	ret

0001ceac <__sfmoreglue>:
   1ceac:	defffc04 	addi	sp,sp,-16
   1ceb0:	dc400115 	stw	r17,4(sp)
   1ceb4:	2c7fffc4 	addi	r17,r5,-1
   1ceb8:	8c401a24 	muli	r17,r17,104
   1cebc:	dc800215 	stw	r18,8(sp)
   1cec0:	2825883a 	mov	r18,r5
   1cec4:	89401d04 	addi	r5,r17,116
   1cec8:	dc000015 	stw	r16,0(sp)
   1cecc:	dfc00315 	stw	ra,12(sp)
   1ced0:	001527c0 	call	1527c <_malloc_r>
   1ced4:	1021883a 	mov	r16,r2
   1ced8:	10000726 	beq	r2,zero,1cef8 <__sfmoreglue+0x4c>
   1cedc:	11000304 	addi	r4,r2,12
   1cee0:	10000015 	stw	zero,0(r2)
   1cee4:	14800115 	stw	r18,4(r2)
   1cee8:	11000215 	stw	r4,8(r2)
   1ceec:	89801a04 	addi	r6,r17,104
   1cef0:	000b883a 	mov	r5,zero
   1cef4:	0015bb00 	call	15bb0 <memset>
   1cef8:	8005883a 	mov	r2,r16
   1cefc:	dfc00317 	ldw	ra,12(sp)
   1cf00:	dc800217 	ldw	r18,8(sp)
   1cf04:	dc400117 	ldw	r17,4(sp)
   1cf08:	dc000017 	ldw	r16,0(sp)
   1cf0c:	dec00404 	addi	sp,sp,16
   1cf10:	f800283a 	ret

0001cf14 <__sfp>:
   1cf14:	defffc04 	addi	sp,sp,-16
   1cf18:	008000f4 	movhi	r2,3
   1cf1c:	dc400115 	stw	r17,4(sp)
   1cf20:	145e6517 	ldw	r17,31124(r2)
   1cf24:	dc800215 	stw	r18,8(sp)
   1cf28:	dfc00315 	stw	ra,12(sp)
   1cf2c:	88800e17 	ldw	r2,56(r17)
   1cf30:	dc000015 	stw	r16,0(sp)
   1cf34:	2025883a 	mov	r18,r4
   1cf38:	10002926 	beq	r2,zero,1cfe0 <__sfp+0xcc>
   1cf3c:	8c40b804 	addi	r17,r17,736
   1cf40:	88800117 	ldw	r2,4(r17)
   1cf44:	8c000217 	ldw	r16,8(r17)
   1cf48:	10bfffc4 	addi	r2,r2,-1
   1cf4c:	1000050e 	bge	r2,zero,1cf64 <__sfp+0x50>
   1cf50:	00001f06 	br	1cfd0 <__sfp+0xbc>
   1cf54:	10bfffc4 	addi	r2,r2,-1
   1cf58:	10ffffd8 	cmpnei	r3,r2,-1
   1cf5c:	84001a04 	addi	r16,r16,104
   1cf60:	18001b26 	beq	r3,zero,1cfd0 <__sfp+0xbc>
   1cf64:	80c0030f 	ldh	r3,12(r16)
   1cf68:	183ffa1e 	bne	r3,zero,1cf54 <__alt_mem_mcu_subsystem_ram_0+0x77ffcf54>
   1cf6c:	00bffff4 	movhi	r2,65535
   1cf70:	10800044 	addi	r2,r2,1
   1cf74:	80001915 	stw	zero,100(r16)
   1cf78:	80000015 	stw	zero,0(r16)
   1cf7c:	80000115 	stw	zero,4(r16)
   1cf80:	80000215 	stw	zero,8(r16)
   1cf84:	80800315 	stw	r2,12(r16)
   1cf88:	80000415 	stw	zero,16(r16)
   1cf8c:	80000515 	stw	zero,20(r16)
   1cf90:	80000615 	stw	zero,24(r16)
   1cf94:	01800204 	movi	r6,8
   1cf98:	000b883a 	mov	r5,zero
   1cf9c:	81001704 	addi	r4,r16,92
   1cfa0:	0015bb00 	call	15bb0 <memset>
   1cfa4:	80000c15 	stw	zero,48(r16)
   1cfa8:	80000d15 	stw	zero,52(r16)
   1cfac:	80001115 	stw	zero,68(r16)
   1cfb0:	80001215 	stw	zero,72(r16)
   1cfb4:	8005883a 	mov	r2,r16
   1cfb8:	dfc00317 	ldw	ra,12(sp)
   1cfbc:	dc800217 	ldw	r18,8(sp)
   1cfc0:	dc400117 	ldw	r17,4(sp)
   1cfc4:	dc000017 	ldw	r16,0(sp)
   1cfc8:	dec00404 	addi	sp,sp,16
   1cfcc:	f800283a 	ret
   1cfd0:	88800017 	ldw	r2,0(r17)
   1cfd4:	10000526 	beq	r2,zero,1cfec <__sfp+0xd8>
   1cfd8:	1023883a 	mov	r17,r2
   1cfdc:	003fd806 	br	1cf40 <__alt_mem_mcu_subsystem_ram_0+0x77ffcf40>
   1cfe0:	8809883a 	mov	r4,r17
   1cfe4:	001cd200 	call	1cd20 <__sinit.part.0>
   1cfe8:	003fd406 	br	1cf3c <__alt_mem_mcu_subsystem_ram_0+0x77ffcf3c>
   1cfec:	01400104 	movi	r5,4
   1cff0:	9009883a 	mov	r4,r18
   1cff4:	001ceac0 	call	1ceac <__sfmoreglue>
   1cff8:	88800015 	stw	r2,0(r17)
   1cffc:	103ff61e 	bne	r2,zero,1cfd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcfd8>
   1d000:	00800304 	movi	r2,12
   1d004:	90800015 	stw	r2,0(r18)
   1d008:	0021883a 	mov	r16,zero
   1d00c:	003fe906 	br	1cfb4 <__alt_mem_mcu_subsystem_ram_0+0x77ffcfb4>

0001d010 <_cleanup>:
   1d010:	008000f4 	movhi	r2,3
   1d014:	111e6517 	ldw	r4,31124(r2)
   1d018:	014000b4 	movhi	r5,2
   1d01c:	294e8204 	addi	r5,r5,14856
   1d020:	001d9bc1 	jmpi	1d9bc <_fwalk_reent>

0001d024 <__sinit>:
   1d024:	20800e17 	ldw	r2,56(r4)
   1d028:	10000126 	beq	r2,zero,1d030 <__sinit+0xc>
   1d02c:	f800283a 	ret
   1d030:	001cd201 	jmpi	1cd20 <__sinit.part.0>

0001d034 <__sfp_lock_acquire>:
   1d034:	f800283a 	ret

0001d038 <__sfp_lock_release>:
   1d038:	f800283a 	ret

0001d03c <__sinit_lock_acquire>:
   1d03c:	f800283a 	ret

0001d040 <__sinit_lock_release>:
   1d040:	f800283a 	ret

0001d044 <__fp_lock_all>:
   1d044:	008000f4 	movhi	r2,3
   1d048:	111e6617 	ldw	r4,31128(r2)
   1d04c:	014000b4 	movhi	r5,2
   1d050:	29734304 	addi	r5,r5,-13044
   1d054:	001d9181 	jmpi	1d918 <_fwalk>

0001d058 <__fp_unlock_all>:
   1d058:	008000f4 	movhi	r2,3
   1d05c:	111e6617 	ldw	r4,31128(r2)
   1d060:	014000b4 	movhi	r5,2
   1d064:	2973a904 	addi	r5,r5,-12636
   1d068:	001d9181 	jmpi	1d918 <_fwalk>

0001d06c <_malloc_trim_r>:
   1d06c:	defffb04 	addi	sp,sp,-20
   1d070:	dcc00315 	stw	r19,12(sp)
   1d074:	04c000f4 	movhi	r19,3
   1d078:	dc800215 	stw	r18,8(sp)
   1d07c:	dc400115 	stw	r17,4(sp)
   1d080:	dc000015 	stw	r16,0(sp)
   1d084:	dfc00415 	stw	ra,16(sp)
   1d088:	2821883a 	mov	r16,r5
   1d08c:	9cd85c04 	addi	r19,r19,24944
   1d090:	2025883a 	mov	r18,r4
   1d094:	002595c0 	call	2595c <__malloc_lock>
   1d098:	98800217 	ldw	r2,8(r19)
   1d09c:	14400117 	ldw	r17,4(r2)
   1d0a0:	00bfff04 	movi	r2,-4
   1d0a4:	88a2703a 	and	r17,r17,r2
   1d0a8:	8c21c83a 	sub	r16,r17,r16
   1d0ac:	8403fbc4 	addi	r16,r16,4079
   1d0b0:	8020d33a 	srli	r16,r16,12
   1d0b4:	843fffc4 	addi	r16,r16,-1
   1d0b8:	8020933a 	slli	r16,r16,12
   1d0bc:	80840008 	cmpgei	r2,r16,4096
   1d0c0:	10000626 	beq	r2,zero,1d0dc <_malloc_trim_r+0x70>
   1d0c4:	000b883a 	mov	r5,zero
   1d0c8:	9009883a 	mov	r4,r18
   1d0cc:	00165040 	call	16504 <_sbrk_r>
   1d0d0:	98c00217 	ldw	r3,8(r19)
   1d0d4:	1c47883a 	add	r3,r3,r17
   1d0d8:	10c00a26 	beq	r2,r3,1d104 <_malloc_trim_r+0x98>
   1d0dc:	9009883a 	mov	r4,r18
   1d0e0:	00259800 	call	25980 <__malloc_unlock>
   1d0e4:	0005883a 	mov	r2,zero
   1d0e8:	dfc00417 	ldw	ra,16(sp)
   1d0ec:	dcc00317 	ldw	r19,12(sp)
   1d0f0:	dc800217 	ldw	r18,8(sp)
   1d0f4:	dc400117 	ldw	r17,4(sp)
   1d0f8:	dc000017 	ldw	r16,0(sp)
   1d0fc:	dec00504 	addi	sp,sp,20
   1d100:	f800283a 	ret
   1d104:	040bc83a 	sub	r5,zero,r16
   1d108:	9009883a 	mov	r4,r18
   1d10c:	00165040 	call	16504 <_sbrk_r>
   1d110:	10bfffd8 	cmpnei	r2,r2,-1
   1d114:	10000d26 	beq	r2,zero,1d14c <_malloc_trim_r+0xe0>
   1d118:	008202b4 	movhi	r2,2058
   1d11c:	108af417 	ldw	r2,11216(r2)
   1d120:	98c00217 	ldw	r3,8(r19)
   1d124:	8c23c83a 	sub	r17,r17,r16
   1d128:	8c400054 	ori	r17,r17,1
   1d12c:	1421c83a 	sub	r16,r2,r16
   1d130:	1c400115 	stw	r17,4(r3)
   1d134:	008202b4 	movhi	r2,2058
   1d138:	9009883a 	mov	r4,r18
   1d13c:	140af415 	stw	r16,11216(r2)
   1d140:	00259800 	call	25980 <__malloc_unlock>
   1d144:	00800044 	movi	r2,1
   1d148:	003fe706 	br	1d0e8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd0e8>
   1d14c:	000b883a 	mov	r5,zero
   1d150:	9009883a 	mov	r4,r18
   1d154:	00165040 	call	16504 <_sbrk_r>
   1d158:	99000217 	ldw	r4,8(r19)
   1d15c:	1107c83a 	sub	r3,r2,r4
   1d160:	19400410 	cmplti	r5,r3,16
   1d164:	283fdd1e 	bne	r5,zero,1d0dc <__alt_mem_mcu_subsystem_ram_0+0x77ffd0dc>
   1d168:	014000f4 	movhi	r5,3
   1d16c:	295e6717 	ldw	r5,31132(r5)
   1d170:	18c00054 	ori	r3,r3,1
   1d174:	20c00115 	stw	r3,4(r4)
   1d178:	1145c83a 	sub	r2,r2,r5
   1d17c:	014202b4 	movhi	r5,2058
   1d180:	288af415 	stw	r2,11216(r5)
   1d184:	003fd506 	br	1d0dc <__alt_mem_mcu_subsystem_ram_0+0x77ffd0dc>

0001d188 <_free_r>:
   1d188:	28004126 	beq	r5,zero,1d290 <_free_r+0x108>
   1d18c:	defffd04 	addi	sp,sp,-12
   1d190:	dc400115 	stw	r17,4(sp)
   1d194:	dc000015 	stw	r16,0(sp)
   1d198:	2023883a 	mov	r17,r4
   1d19c:	2821883a 	mov	r16,r5
   1d1a0:	dfc00215 	stw	ra,8(sp)
   1d1a4:	002595c0 	call	2595c <__malloc_lock>
   1d1a8:	81bfff17 	ldw	r6,-4(r16)
   1d1ac:	00bfff84 	movi	r2,-2
   1d1b0:	80fffe04 	addi	r3,r16,-8
   1d1b4:	3084703a 	and	r2,r6,r2
   1d1b8:	010000f4 	movhi	r4,3
   1d1bc:	188f883a 	add	r7,r3,r2
   1d1c0:	21185c04 	addi	r4,r4,24944
   1d1c4:	39400117 	ldw	r5,4(r7)
   1d1c8:	22000217 	ldw	r8,8(r4)
   1d1cc:	027fff04 	movi	r9,-4
   1d1d0:	2a4a703a 	and	r5,r5,r9
   1d1d4:	41c03f26 	beq	r8,r7,1d2d4 <_free_r+0x14c>
   1d1d8:	39400115 	stw	r5,4(r7)
   1d1dc:	3180004c 	andi	r6,r6,1
   1d1e0:	3951883a 	add	r8,r7,r5
   1d1e4:	30002b1e 	bne	r6,zero,1d294 <_free_r+0x10c>
   1d1e8:	82bffe17 	ldw	r10,-8(r16)
   1d1ec:	41800117 	ldw	r6,4(r8)
   1d1f0:	020000f4 	movhi	r8,3
   1d1f4:	1a87c83a 	sub	r3,r3,r10
   1d1f8:	1a400217 	ldw	r9,8(r3)
   1d1fc:	42185e04 	addi	r8,r8,24952
   1d200:	1285883a 	add	r2,r2,r10
   1d204:	3180004c 	andi	r6,r6,1
   1d208:	4a005d26 	beq	r9,r8,1d380 <_free_r+0x1f8>
   1d20c:	1a000317 	ldw	r8,12(r3)
   1d210:	4a000315 	stw	r8,12(r9)
   1d214:	42400215 	stw	r9,8(r8)
   1d218:	30002126 	beq	r6,zero,1d2a0 <_free_r+0x118>
   1d21c:	11400054 	ori	r5,r2,1
   1d220:	19400115 	stw	r5,4(r3)
   1d224:	188b883a 	add	r5,r3,r2
   1d228:	28800015 	stw	r2,0(r5)
   1d22c:	11408028 	cmpgeui	r5,r2,512
   1d230:	28004226 	beq	r5,zero,1d33c <_free_r+0x1b4>
   1d234:	100ad27a 	srli	r5,r2,9
   1d238:	29800168 	cmpgeui	r6,r5,5
   1d23c:	30005b1e 	bne	r6,zero,1d3ac <_free_r+0x224>
   1d240:	100ad1ba 	srli	r5,r2,6
   1d244:	29800e44 	addi	r6,r5,57
   1d248:	300c90fa 	slli	r6,r6,3
   1d24c:	29c00e04 	addi	r7,r5,56
   1d250:	218d883a 	add	r6,r4,r6
   1d254:	31400017 	ldw	r5,0(r6)
   1d258:	31bffe04 	addi	r6,r6,-8
   1d25c:	31406226 	beq	r6,r5,1d3e8 <_free_r+0x260>
   1d260:	01ffff04 	movi	r7,-4
   1d264:	29000117 	ldw	r4,4(r5)
   1d268:	21c8703a 	and	r4,r4,r7
   1d26c:	11005c2e 	bgeu	r2,r4,1d3e0 <_free_r+0x258>
   1d270:	29400217 	ldw	r5,8(r5)
   1d274:	317ffb1e 	bne	r6,r5,1d264 <__alt_mem_mcu_subsystem_ram_0+0x77ffd264>
   1d278:	30800317 	ldw	r2,12(r6)
   1d27c:	18800315 	stw	r2,12(r3)
   1d280:	19800215 	stw	r6,8(r3)
   1d284:	10c00215 	stw	r3,8(r2)
   1d288:	30c00315 	stw	r3,12(r6)
   1d28c:	00002506 	br	1d324 <_free_r+0x19c>
   1d290:	f800283a 	ret
   1d294:	41800117 	ldw	r6,4(r8)
   1d298:	3180004c 	andi	r6,r6,1
   1d29c:	303fdf1e 	bne	r6,zero,1d21c <__alt_mem_mcu_subsystem_ram_0+0x77ffd21c>
   1d2a0:	39800217 	ldw	r6,8(r7)
   1d2a4:	020000f4 	movhi	r8,3
   1d2a8:	1145883a 	add	r2,r2,r5
   1d2ac:	42185e04 	addi	r8,r8,24952
   1d2b0:	12800054 	ori	r10,r2,1
   1d2b4:	1893883a 	add	r9,r3,r2
   1d2b8:	32005326 	beq	r6,r8,1d408 <_free_r+0x280>
   1d2bc:	39400317 	ldw	r5,12(r7)
   1d2c0:	31400315 	stw	r5,12(r6)
   1d2c4:	29800215 	stw	r6,8(r5)
   1d2c8:	1a800115 	stw	r10,4(r3)
   1d2cc:	48800015 	stw	r2,0(r9)
   1d2d0:	003fd606 	br	1d22c <__alt_mem_mcu_subsystem_ram_0+0x77ffd22c>
   1d2d4:	3180004c 	andi	r6,r6,1
   1d2d8:	1145883a 	add	r2,r2,r5
   1d2dc:	3000071e 	bne	r6,zero,1d2fc <_free_r+0x174>
   1d2e0:	81fffe17 	ldw	r7,-8(r16)
   1d2e4:	19c7c83a 	sub	r3,r3,r7
   1d2e8:	19400317 	ldw	r5,12(r3)
   1d2ec:	19800217 	ldw	r6,8(r3)
   1d2f0:	11c5883a 	add	r2,r2,r7
   1d2f4:	31400315 	stw	r5,12(r6)
   1d2f8:	29800215 	stw	r6,8(r5)
   1d2fc:	014000f4 	movhi	r5,3
   1d300:	11800054 	ori	r6,r2,1
   1d304:	295e6817 	ldw	r5,31136(r5)
   1d308:	19800115 	stw	r6,4(r3)
   1d30c:	20c00215 	stw	r3,8(r4)
   1d310:	11400436 	bltu	r2,r5,1d324 <_free_r+0x19c>
   1d314:	00800134 	movhi	r2,4
   1d318:	11660f17 	ldw	r5,-26564(r2)
   1d31c:	8809883a 	mov	r4,r17
   1d320:	001d06c0 	call	1d06c <_malloc_trim_r>
   1d324:	8809883a 	mov	r4,r17
   1d328:	dfc00217 	ldw	ra,8(sp)
   1d32c:	dc400117 	ldw	r17,4(sp)
   1d330:	dc000017 	ldw	r16,0(sp)
   1d334:	dec00304 	addi	sp,sp,12
   1d338:	00259801 	jmpi	25980 <__malloc_unlock>
   1d33c:	100ad0fa 	srli	r5,r2,3
   1d340:	21c00117 	ldw	r7,4(r4)
   1d344:	28800044 	addi	r2,r5,1
   1d348:	280dd0ba 	srai	r6,r5,2
   1d34c:	100490fa 	slli	r2,r2,3
   1d350:	01400044 	movi	r5,1
   1d354:	298a983a 	sll	r5,r5,r6
   1d358:	2085883a 	add	r2,r4,r2
   1d35c:	11800017 	ldw	r6,0(r2)
   1d360:	29cab03a 	or	r5,r5,r7
   1d364:	11fffe04 	addi	r7,r2,-8
   1d368:	19c00315 	stw	r7,12(r3)
   1d36c:	19800215 	stw	r6,8(r3)
   1d370:	21400115 	stw	r5,4(r4)
   1d374:	10c00015 	stw	r3,0(r2)
   1d378:	30c00315 	stw	r3,12(r6)
   1d37c:	003fe906 	br	1d324 <__alt_mem_mcu_subsystem_ram_0+0x77ffd324>
   1d380:	3000391e 	bne	r6,zero,1d468 <_free_r+0x2e0>
   1d384:	39800217 	ldw	r6,8(r7)
   1d388:	39000317 	ldw	r4,12(r7)
   1d38c:	2885883a 	add	r2,r5,r2
   1d390:	11400054 	ori	r5,r2,1
   1d394:	31000315 	stw	r4,12(r6)
   1d398:	21800215 	stw	r6,8(r4)
   1d39c:	19400115 	stw	r5,4(r3)
   1d3a0:	1887883a 	add	r3,r3,r2
   1d3a4:	18800015 	stw	r2,0(r3)
   1d3a8:	003fde06 	br	1d324 <__alt_mem_mcu_subsystem_ram_0+0x77ffd324>
   1d3ac:	29800568 	cmpgeui	r6,r5,21
   1d3b0:	30000726 	beq	r6,zero,1d3d0 <_free_r+0x248>
   1d3b4:	29801568 	cmpgeui	r6,r5,85
   1d3b8:	30001a1e 	bne	r6,zero,1d424 <_free_r+0x29c>
   1d3bc:	100ad33a 	srli	r5,r2,12
   1d3c0:	29801bc4 	addi	r6,r5,111
   1d3c4:	29c01b84 	addi	r7,r5,110
   1d3c8:	300c90fa 	slli	r6,r6,3
   1d3cc:	003fa006 	br	1d250 <__alt_mem_mcu_subsystem_ram_0+0x77ffd250>
   1d3d0:	29801704 	addi	r6,r5,92
   1d3d4:	29c016c4 	addi	r7,r5,91
   1d3d8:	300c90fa 	slli	r6,r6,3
   1d3dc:	003f9c06 	br	1d250 <__alt_mem_mcu_subsystem_ram_0+0x77ffd250>
   1d3e0:	280d883a 	mov	r6,r5
   1d3e4:	003fa406 	br	1d278 <__alt_mem_mcu_subsystem_ram_0+0x77ffd278>
   1d3e8:	380bd0ba 	srai	r5,r7,2
   1d3ec:	01c00044 	movi	r7,1
   1d3f0:	22000117 	ldw	r8,4(r4)
   1d3f4:	394a983a 	sll	r5,r7,r5
   1d3f8:	3005883a 	mov	r2,r6
   1d3fc:	2a0ab03a 	or	r5,r5,r8
   1d400:	21400115 	stw	r5,4(r4)
   1d404:	003f9d06 	br	1d27c <__alt_mem_mcu_subsystem_ram_0+0x77ffd27c>
   1d408:	20c00515 	stw	r3,20(r4)
   1d40c:	20c00415 	stw	r3,16(r4)
   1d410:	19800315 	stw	r6,12(r3)
   1d414:	19800215 	stw	r6,8(r3)
   1d418:	1a800115 	stw	r10,4(r3)
   1d41c:	48800015 	stw	r2,0(r9)
   1d420:	003fc006 	br	1d324 <__alt_mem_mcu_subsystem_ram_0+0x77ffd324>
   1d424:	29805568 	cmpgeui	r6,r5,341
   1d428:	3000051e 	bne	r6,zero,1d440 <_free_r+0x2b8>
   1d42c:	100ad3fa 	srli	r5,r2,15
   1d430:	29801e04 	addi	r6,r5,120
   1d434:	29c01dc4 	addi	r7,r5,119
   1d438:	300c90fa 	slli	r6,r6,3
   1d43c:	003f8406 	br	1d250 <__alt_mem_mcu_subsystem_ram_0+0x77ffd250>
   1d440:	29415568 	cmpgeui	r5,r5,1365
   1d444:	2800051e 	bne	r5,zero,1d45c <_free_r+0x2d4>
   1d448:	100ad4ba 	srli	r5,r2,18
   1d44c:	29801f44 	addi	r6,r5,125
   1d450:	29c01f04 	addi	r7,r5,124
   1d454:	300c90fa 	slli	r6,r6,3
   1d458:	003f7d06 	br	1d250 <__alt_mem_mcu_subsystem_ram_0+0x77ffd250>
   1d45c:	0180fe04 	movi	r6,1016
   1d460:	01c01f84 	movi	r7,126
   1d464:	003f7a06 	br	1d250 <__alt_mem_mcu_subsystem_ram_0+0x77ffd250>
   1d468:	11000054 	ori	r4,r2,1
   1d46c:	19000115 	stw	r4,4(r3)
   1d470:	38800015 	stw	r2,0(r7)
   1d474:	003fab06 	br	1d324 <__alt_mem_mcu_subsystem_ram_0+0x77ffd324>

0001d478 <__sfvwrite_r>:
   1d478:	30800217 	ldw	r2,8(r6)
   1d47c:	1000bb26 	beq	r2,zero,1d76c <__sfvwrite_r+0x2f4>
   1d480:	2a00030b 	ldhu	r8,12(r5)
   1d484:	defff404 	addi	sp,sp,-48
   1d488:	dd400715 	stw	r21,28(sp)
   1d48c:	dd000615 	stw	r20,24(sp)
   1d490:	dc000215 	stw	r16,8(sp)
   1d494:	dfc00b15 	stw	ra,44(sp)
   1d498:	df000a15 	stw	fp,40(sp)
   1d49c:	ddc00915 	stw	r23,36(sp)
   1d4a0:	dd800815 	stw	r22,32(sp)
   1d4a4:	dcc00515 	stw	r19,20(sp)
   1d4a8:	dc800415 	stw	r18,16(sp)
   1d4ac:	dc400315 	stw	r17,12(sp)
   1d4b0:	4080020c 	andi	r2,r8,8
   1d4b4:	2821883a 	mov	r16,r5
   1d4b8:	202b883a 	mov	r21,r4
   1d4bc:	3029883a 	mov	r20,r6
   1d4c0:	10002426 	beq	r2,zero,1d554 <__sfvwrite_r+0xdc>
   1d4c4:	28800417 	ldw	r2,16(r5)
   1d4c8:	10002226 	beq	r2,zero,1d554 <__sfvwrite_r+0xdc>
   1d4cc:	4080008c 	andi	r2,r8,2
   1d4d0:	a4400017 	ldw	r17,0(r20)
   1d4d4:	10002726 	beq	r2,zero,1d574 <__sfvwrite_r+0xfc>
   1d4d8:	80c00917 	ldw	r3,36(r16)
   1d4dc:	80800717 	ldw	r2,28(r16)
   1d4e0:	05a00034 	movhi	r22,32768
   1d4e4:	0027883a 	mov	r19,zero
   1d4e8:	0025883a 	mov	r18,zero
   1d4ec:	b5bf0004 	addi	r22,r22,-1024
   1d4f0:	980d883a 	mov	r6,r19
   1d4f4:	100b883a 	mov	r5,r2
   1d4f8:	a809883a 	mov	r4,r21
   1d4fc:	90001126 	beq	r18,zero,1d544 <__sfvwrite_r+0xcc>
   1d500:	900f883a 	mov	r7,r18
   1d504:	b480012e 	bgeu	r22,r18,1d50c <__sfvwrite_r+0x94>
   1d508:	b00f883a 	mov	r7,r22
   1d50c:	183ee83a 	callr	r3
   1d510:	00809c0e 	bge	zero,r2,1d784 <__sfvwrite_r+0x30c>
   1d514:	a0c00217 	ldw	r3,8(r20)
   1d518:	98a7883a 	add	r19,r19,r2
   1d51c:	90a5c83a 	sub	r18,r18,r2
   1d520:	1885c83a 	sub	r2,r3,r2
   1d524:	a0800215 	stw	r2,8(r20)
   1d528:	10008326 	beq	r2,zero,1d738 <__sfvwrite_r+0x2c0>
   1d52c:	80800717 	ldw	r2,28(r16)
   1d530:	80c00917 	ldw	r3,36(r16)
   1d534:	980d883a 	mov	r6,r19
   1d538:	100b883a 	mov	r5,r2
   1d53c:	a809883a 	mov	r4,r21
   1d540:	903fef1e 	bne	r18,zero,1d500 <__alt_mem_mcu_subsystem_ram_0+0x77ffd500>
   1d544:	8cc00017 	ldw	r19,0(r17)
   1d548:	8c800117 	ldw	r18,4(r17)
   1d54c:	8c400204 	addi	r17,r17,8
   1d550:	003fe706 	br	1d4f0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd4f0>
   1d554:	800b883a 	mov	r5,r16
   1d558:	a809883a 	mov	r4,r21
   1d55c:	001aff80 	call	1aff8 <__swsetup_r>
   1d560:	1000eb1e 	bne	r2,zero,1d910 <__sfvwrite_r+0x498>
   1d564:	8200030b 	ldhu	r8,12(r16)
   1d568:	a4400017 	ldw	r17,0(r20)
   1d56c:	4080008c 	andi	r2,r8,2
   1d570:	103fd91e 	bne	r2,zero,1d4d8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd4d8>
   1d574:	4080004c 	andi	r2,r8,1
   1d578:	10004e1e 	bne	r2,zero,1d6b4 <__sfvwrite_r+0x23c>
   1d57c:	00a00034 	movhi	r2,32768
   1d580:	10bfff84 	addi	r2,r2,-2
   1d584:	00e00034 	movhi	r3,32768
   1d588:	85c00217 	ldw	r23,8(r16)
   1d58c:	81000017 	ldw	r4,0(r16)
   1d590:	d8800015 	stw	r2,0(sp)
   1d594:	18bfffc4 	addi	r2,r3,-1
   1d598:	0039883a 	mov	fp,zero
   1d59c:	0025883a 	mov	r18,zero
   1d5a0:	d8800115 	stw	r2,4(sp)
   1d5a4:	90003f26 	beq	r18,zero,1d6a4 <__sfvwrite_r+0x22c>
   1d5a8:	4080800c 	andi	r2,r8,512
   1d5ac:	10009126 	beq	r2,zero,1d7f4 <__sfvwrite_r+0x37c>
   1d5b0:	b82d883a 	mov	r22,r23
   1d5b4:	95c0b436 	bltu	r18,r23,1d888 <__sfvwrite_r+0x410>
   1d5b8:	4081200c 	andi	r2,r8,1152
   1d5bc:	10002526 	beq	r2,zero,1d654 <__sfvwrite_r+0x1dc>
   1d5c0:	81800517 	ldw	r6,20(r16)
   1d5c4:	81400417 	ldw	r5,16(r16)
   1d5c8:	90800044 	addi	r2,r18,1
   1d5cc:	318000e4 	muli	r6,r6,3
   1d5d0:	216fc83a 	sub	r23,r4,r5
   1d5d4:	15c5883a 	add	r2,r2,r23
   1d5d8:	3026d7fa 	srli	r19,r6,31
   1d5dc:	99a7883a 	add	r19,r19,r6
   1d5e0:	9827d07a 	srai	r19,r19,1
   1d5e4:	980d883a 	mov	r6,r19
   1d5e8:	9880022e 	bgeu	r19,r2,1d5f4 <__sfvwrite_r+0x17c>
   1d5ec:	1027883a 	mov	r19,r2
   1d5f0:	100d883a 	mov	r6,r2
   1d5f4:	4201000c 	andi	r8,r8,1024
   1d5f8:	4000a826 	beq	r8,zero,1d89c <__sfvwrite_r+0x424>
   1d5fc:	300b883a 	mov	r5,r6
   1d600:	a809883a 	mov	r4,r21
   1d604:	001527c0 	call	1527c <_malloc_r>
   1d608:	102d883a 	mov	r22,r2
   1d60c:	1000bc26 	beq	r2,zero,1d900 <__sfvwrite_r+0x488>
   1d610:	81400417 	ldw	r5,16(r16)
   1d614:	b80d883a 	mov	r6,r23
   1d618:	1009883a 	mov	r4,r2
   1d61c:	0015ac00 	call	15ac0 <memcpy>
   1d620:	8080030b 	ldhu	r2,12(r16)
   1d624:	00fedfc4 	movi	r3,-1153
   1d628:	10c4703a 	and	r2,r2,r3
   1d62c:	10802014 	ori	r2,r2,128
   1d630:	8080030d 	sth	r2,12(r16)
   1d634:	b5c9883a 	add	r4,r22,r23
   1d638:	9dc5c83a 	sub	r2,r19,r23
   1d63c:	85800415 	stw	r22,16(r16)
   1d640:	81000015 	stw	r4,0(r16)
   1d644:	84c00515 	stw	r19,20(r16)
   1d648:	902f883a 	mov	r23,r18
   1d64c:	80800215 	stw	r2,8(r16)
   1d650:	902d883a 	mov	r22,r18
   1d654:	b00d883a 	mov	r6,r22
   1d658:	e00b883a 	mov	r5,fp
   1d65c:	001de980 	call	1de98 <memmove>
   1d660:	80800217 	ldw	r2,8(r16)
   1d664:	81800017 	ldw	r6,0(r16)
   1d668:	9027883a 	mov	r19,r18
   1d66c:	15c5c83a 	sub	r2,r2,r23
   1d670:	358d883a 	add	r6,r6,r22
   1d674:	80800215 	stw	r2,8(r16)
   1d678:	81800015 	stw	r6,0(r16)
   1d67c:	0025883a 	mov	r18,zero
   1d680:	a0800217 	ldw	r2,8(r20)
   1d684:	e4f9883a 	add	fp,fp,r19
   1d688:	14e7c83a 	sub	r19,r2,r19
   1d68c:	a4c00215 	stw	r19,8(r20)
   1d690:	98002926 	beq	r19,zero,1d738 <__sfvwrite_r+0x2c0>
   1d694:	8200030b 	ldhu	r8,12(r16)
   1d698:	85c00217 	ldw	r23,8(r16)
   1d69c:	81000017 	ldw	r4,0(r16)
   1d6a0:	903fc11e 	bne	r18,zero,1d5a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd5a8>
   1d6a4:	8f000017 	ldw	fp,0(r17)
   1d6a8:	8c800117 	ldw	r18,4(r17)
   1d6ac:	8c400204 	addi	r17,r17,8
   1d6b0:	003fbc06 	br	1d5a4 <__alt_mem_mcu_subsystem_ram_0+0x77ffd5a4>
   1d6b4:	002d883a 	mov	r22,zero
   1d6b8:	0005883a 	mov	r2,zero
   1d6bc:	0039883a 	mov	fp,zero
   1d6c0:	0027883a 	mov	r19,zero
   1d6c4:	98003426 	beq	r19,zero,1d798 <__sfvwrite_r+0x320>
   1d6c8:	10003726 	beq	r2,zero,1d7a8 <__sfvwrite_r+0x330>
   1d6cc:	b02f883a 	mov	r23,r22
   1d6d0:	9d80012e 	bgeu	r19,r22,1d6d8 <__sfvwrite_r+0x260>
   1d6d4:	982f883a 	mov	r23,r19
   1d6d8:	81000017 	ldw	r4,0(r16)
   1d6dc:	80800417 	ldw	r2,16(r16)
   1d6e0:	81c00517 	ldw	r7,20(r16)
   1d6e4:	1100032e 	bgeu	r2,r4,1d6f4 <__sfvwrite_r+0x27c>
   1d6e8:	84800217 	ldw	r18,8(r16)
   1d6ec:	3ca5883a 	add	r18,r7,r18
   1d6f0:	95c03516 	blt	r18,r23,1d7c8 <__sfvwrite_r+0x350>
   1d6f4:	b9c07716 	blt	r23,r7,1d8d4 <__sfvwrite_r+0x45c>
   1d6f8:	80800917 	ldw	r2,36(r16)
   1d6fc:	81400717 	ldw	r5,28(r16)
   1d700:	e00d883a 	mov	r6,fp
   1d704:	a809883a 	mov	r4,r21
   1d708:	103ee83a 	callr	r2
   1d70c:	1025883a 	mov	r18,r2
   1d710:	00801c0e 	bge	zero,r2,1d784 <__sfvwrite_r+0x30c>
   1d714:	b4adc83a 	sub	r22,r22,r18
   1d718:	b0001626 	beq	r22,zero,1d774 <__sfvwrite_r+0x2fc>
   1d71c:	00800044 	movi	r2,1
   1d720:	a0c00217 	ldw	r3,8(r20)
   1d724:	e4b9883a 	add	fp,fp,r18
   1d728:	9ca7c83a 	sub	r19,r19,r18
   1d72c:	1ca5c83a 	sub	r18,r3,r18
   1d730:	a4800215 	stw	r18,8(r20)
   1d734:	903fe31e 	bne	r18,zero,1d6c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffd6c4>
   1d738:	0005883a 	mov	r2,zero
   1d73c:	dfc00b17 	ldw	ra,44(sp)
   1d740:	df000a17 	ldw	fp,40(sp)
   1d744:	ddc00917 	ldw	r23,36(sp)
   1d748:	dd800817 	ldw	r22,32(sp)
   1d74c:	dd400717 	ldw	r21,28(sp)
   1d750:	dd000617 	ldw	r20,24(sp)
   1d754:	dcc00517 	ldw	r19,20(sp)
   1d758:	dc800417 	ldw	r18,16(sp)
   1d75c:	dc400317 	ldw	r17,12(sp)
   1d760:	dc000217 	ldw	r16,8(sp)
   1d764:	dec00c04 	addi	sp,sp,48
   1d768:	f800283a 	ret
   1d76c:	0005883a 	mov	r2,zero
   1d770:	f800283a 	ret
   1d774:	800b883a 	mov	r5,r16
   1d778:	a809883a 	mov	r4,r21
   1d77c:	001cc840 	call	1cc84 <_fflush_r>
   1d780:	103fe726 	beq	r2,zero,1d720 <__alt_mem_mcu_subsystem_ram_0+0x77ffd720>
   1d784:	8080030b 	ldhu	r2,12(r16)
   1d788:	10801014 	ori	r2,r2,64
   1d78c:	8080030d 	sth	r2,12(r16)
   1d790:	00bfffc4 	movi	r2,-1
   1d794:	003fe906 	br	1d73c <__alt_mem_mcu_subsystem_ram_0+0x77ffd73c>
   1d798:	8cc00117 	ldw	r19,4(r17)
   1d79c:	8f000017 	ldw	fp,0(r17)
   1d7a0:	8c400204 	addi	r17,r17,8
   1d7a4:	983ffc26 	beq	r19,zero,1d798 <__alt_mem_mcu_subsystem_ram_0+0x77ffd798>
   1d7a8:	980d883a 	mov	r6,r19
   1d7ac:	01400284 	movi	r5,10
   1d7b0:	e009883a 	mov	r4,fp
   1d7b4:	001ddb00 	call	1ddb0 <memchr>
   1d7b8:	10004426 	beq	r2,zero,1d8cc <__sfvwrite_r+0x454>
   1d7bc:	10800044 	addi	r2,r2,1
   1d7c0:	172dc83a 	sub	r22,r2,fp
   1d7c4:	003fc106 	br	1d6cc <__alt_mem_mcu_subsystem_ram_0+0x77ffd6cc>
   1d7c8:	e00b883a 	mov	r5,fp
   1d7cc:	900d883a 	mov	r6,r18
   1d7d0:	001de980 	call	1de98 <memmove>
   1d7d4:	80800017 	ldw	r2,0(r16)
   1d7d8:	800b883a 	mov	r5,r16
   1d7dc:	a809883a 	mov	r4,r21
   1d7e0:	1485883a 	add	r2,r2,r18
   1d7e4:	80800015 	stw	r2,0(r16)
   1d7e8:	001cc840 	call	1cc84 <_fflush_r>
   1d7ec:	103fc926 	beq	r2,zero,1d714 <__alt_mem_mcu_subsystem_ram_0+0x77ffd714>
   1d7f0:	003fe406 	br	1d784 <__alt_mem_mcu_subsystem_ram_0+0x77ffd784>
   1d7f4:	80800417 	ldw	r2,16(r16)
   1d7f8:	11001136 	bltu	r2,r4,1d840 <__sfvwrite_r+0x3c8>
   1d7fc:	84c00517 	ldw	r19,20(r16)
   1d800:	94c00f36 	bltu	r18,r19,1d840 <__sfvwrite_r+0x3c8>
   1d804:	d8800017 	ldw	r2,0(sp)
   1d808:	1480222e 	bgeu	r2,r18,1d894 <__sfvwrite_r+0x41c>
   1d80c:	d9000117 	ldw	r4,4(sp)
   1d810:	980b883a 	mov	r5,r19
   1d814:	00129540 	call	12954 <__divsi3>
   1d818:	14cf383a 	mul	r7,r2,r19
   1d81c:	81400717 	ldw	r5,28(r16)
   1d820:	80800917 	ldw	r2,36(r16)
   1d824:	e00d883a 	mov	r6,fp
   1d828:	a809883a 	mov	r4,r21
   1d82c:	103ee83a 	callr	r2
   1d830:	00bfd40e 	bge	zero,r2,1d784 <__alt_mem_mcu_subsystem_ram_0+0x77ffd784>
   1d834:	1027883a 	mov	r19,r2
   1d838:	94e5c83a 	sub	r18,r18,r19
   1d83c:	003f9006 	br	1d680 <__alt_mem_mcu_subsystem_ram_0+0x77ffd680>
   1d840:	b827883a 	mov	r19,r23
   1d844:	95c0012e 	bgeu	r18,r23,1d84c <__sfvwrite_r+0x3d4>
   1d848:	9027883a 	mov	r19,r18
   1d84c:	980d883a 	mov	r6,r19
   1d850:	e00b883a 	mov	r5,fp
   1d854:	001de980 	call	1de98 <memmove>
   1d858:	80800217 	ldw	r2,8(r16)
   1d85c:	81000017 	ldw	r4,0(r16)
   1d860:	14c5c83a 	sub	r2,r2,r19
   1d864:	24c9883a 	add	r4,r4,r19
   1d868:	80800215 	stw	r2,8(r16)
   1d86c:	81000015 	stw	r4,0(r16)
   1d870:	103ff11e 	bne	r2,zero,1d838 <__alt_mem_mcu_subsystem_ram_0+0x77ffd838>
   1d874:	800b883a 	mov	r5,r16
   1d878:	a809883a 	mov	r4,r21
   1d87c:	001cc840 	call	1cc84 <_fflush_r>
   1d880:	103fed26 	beq	r2,zero,1d838 <__alt_mem_mcu_subsystem_ram_0+0x77ffd838>
   1d884:	003fbf06 	br	1d784 <__alt_mem_mcu_subsystem_ram_0+0x77ffd784>
   1d888:	902f883a 	mov	r23,r18
   1d88c:	902d883a 	mov	r22,r18
   1d890:	003f7006 	br	1d654 <__alt_mem_mcu_subsystem_ram_0+0x77ffd654>
   1d894:	9009883a 	mov	r4,r18
   1d898:	003fdd06 	br	1d810 <__alt_mem_mcu_subsystem_ram_0+0x77ffd810>
   1d89c:	a809883a 	mov	r4,r21
   1d8a0:	001f0bc0 	call	1f0bc <_realloc_r>
   1d8a4:	102d883a 	mov	r22,r2
   1d8a8:	103f621e 	bne	r2,zero,1d634 <__alt_mem_mcu_subsystem_ram_0+0x77ffd634>
   1d8ac:	81400417 	ldw	r5,16(r16)
   1d8b0:	a809883a 	mov	r4,r21
   1d8b4:	001d1880 	call	1d188 <_free_r>
   1d8b8:	8080030b 	ldhu	r2,12(r16)
   1d8bc:	00c00304 	movi	r3,12
   1d8c0:	a8c00015 	stw	r3,0(r21)
   1d8c4:	10bfdfcc 	andi	r2,r2,65407
   1d8c8:	003faf06 	br	1d788 <__alt_mem_mcu_subsystem_ram_0+0x77ffd788>
   1d8cc:	9d800044 	addi	r22,r19,1
   1d8d0:	003f7e06 	br	1d6cc <__alt_mem_mcu_subsystem_ram_0+0x77ffd6cc>
   1d8d4:	b80d883a 	mov	r6,r23
   1d8d8:	e00b883a 	mov	r5,fp
   1d8dc:	001de980 	call	1de98 <memmove>
   1d8e0:	80c00217 	ldw	r3,8(r16)
   1d8e4:	80800017 	ldw	r2,0(r16)
   1d8e8:	b825883a 	mov	r18,r23
   1d8ec:	1dc7c83a 	sub	r3,r3,r23
   1d8f0:	15ef883a 	add	r23,r2,r23
   1d8f4:	80c00215 	stw	r3,8(r16)
   1d8f8:	85c00015 	stw	r23,0(r16)
   1d8fc:	003f8506 	br	1d714 <__alt_mem_mcu_subsystem_ram_0+0x77ffd714>
   1d900:	00800304 	movi	r2,12
   1d904:	a8800015 	stw	r2,0(r21)
   1d908:	8080030b 	ldhu	r2,12(r16)
   1d90c:	003f9e06 	br	1d788 <__alt_mem_mcu_subsystem_ram_0+0x77ffd788>
   1d910:	00bfffc4 	movi	r2,-1
   1d914:	003f8906 	br	1d73c <__alt_mem_mcu_subsystem_ram_0+0x77ffd73c>

0001d918 <_fwalk>:
   1d918:	defffa04 	addi	sp,sp,-24
   1d91c:	dc800215 	stw	r18,8(sp)
   1d920:	dfc00515 	stw	ra,20(sp)
   1d924:	dd000415 	stw	r20,16(sp)
   1d928:	dcc00315 	stw	r19,12(sp)
   1d92c:	dc400115 	stw	r17,4(sp)
   1d930:	dc000015 	stw	r16,0(sp)
   1d934:	2480b804 	addi	r18,r4,736
   1d938:	90001e26 	beq	r18,zero,1d9b4 <_fwalk+0x9c>
   1d93c:	2827883a 	mov	r19,r5
   1d940:	0029883a 	mov	r20,zero
   1d944:	94400117 	ldw	r17,4(r18)
   1d948:	94000217 	ldw	r16,8(r18)
   1d94c:	8c7fffc4 	addi	r17,r17,-1
   1d950:	88000d16 	blt	r17,zero,1d988 <_fwalk+0x70>
   1d954:	8080030b 	ldhu	r2,12(r16)
   1d958:	8c7fffc4 	addi	r17,r17,-1
   1d95c:	8009883a 	mov	r4,r16
   1d960:	108000b0 	cmpltui	r2,r2,2
   1d964:	1000051e 	bne	r2,zero,1d97c <_fwalk+0x64>
   1d968:	8080038f 	ldh	r2,14(r16)
   1d96c:	10bfffe0 	cmpeqi	r2,r2,-1
   1d970:	1000021e 	bne	r2,zero,1d97c <_fwalk+0x64>
   1d974:	983ee83a 	callr	r19
   1d978:	a0a8b03a 	or	r20,r20,r2
   1d97c:	88bfffd8 	cmpnei	r2,r17,-1
   1d980:	84001a04 	addi	r16,r16,104
   1d984:	103ff31e 	bne	r2,zero,1d954 <__alt_mem_mcu_subsystem_ram_0+0x77ffd954>
   1d988:	94800017 	ldw	r18,0(r18)
   1d98c:	903fed1e 	bne	r18,zero,1d944 <__alt_mem_mcu_subsystem_ram_0+0x77ffd944>
   1d990:	a005883a 	mov	r2,r20
   1d994:	dfc00517 	ldw	ra,20(sp)
   1d998:	dd000417 	ldw	r20,16(sp)
   1d99c:	dcc00317 	ldw	r19,12(sp)
   1d9a0:	dc800217 	ldw	r18,8(sp)
   1d9a4:	dc400117 	ldw	r17,4(sp)
   1d9a8:	dc000017 	ldw	r16,0(sp)
   1d9ac:	dec00604 	addi	sp,sp,24
   1d9b0:	f800283a 	ret
   1d9b4:	0029883a 	mov	r20,zero
   1d9b8:	003ff506 	br	1d990 <__alt_mem_mcu_subsystem_ram_0+0x77ffd990>

0001d9bc <_fwalk_reent>:
   1d9bc:	defff904 	addi	sp,sp,-28
   1d9c0:	dcc00315 	stw	r19,12(sp)
   1d9c4:	dfc00615 	stw	ra,24(sp)
   1d9c8:	dd400515 	stw	r21,20(sp)
   1d9cc:	dd000415 	stw	r20,16(sp)
   1d9d0:	dc800215 	stw	r18,8(sp)
   1d9d4:	dc400115 	stw	r17,4(sp)
   1d9d8:	dc000015 	stw	r16,0(sp)
   1d9dc:	24c0b804 	addi	r19,r4,736
   1d9e0:	98002126 	beq	r19,zero,1da68 <_fwalk_reent+0xac>
   1d9e4:	2829883a 	mov	r20,r5
   1d9e8:	2025883a 	mov	r18,r4
   1d9ec:	002b883a 	mov	r21,zero
   1d9f0:	9c400117 	ldw	r17,4(r19)
   1d9f4:	9c000217 	ldw	r16,8(r19)
   1d9f8:	8c7fffc4 	addi	r17,r17,-1
   1d9fc:	88000e16 	blt	r17,zero,1da38 <_fwalk_reent+0x7c>
   1da00:	8080030b 	ldhu	r2,12(r16)
   1da04:	8c7fffc4 	addi	r17,r17,-1
   1da08:	800b883a 	mov	r5,r16
   1da0c:	108000b0 	cmpltui	r2,r2,2
   1da10:	9009883a 	mov	r4,r18
   1da14:	1000051e 	bne	r2,zero,1da2c <_fwalk_reent+0x70>
   1da18:	8080038f 	ldh	r2,14(r16)
   1da1c:	10bfffe0 	cmpeqi	r2,r2,-1
   1da20:	1000021e 	bne	r2,zero,1da2c <_fwalk_reent+0x70>
   1da24:	a03ee83a 	callr	r20
   1da28:	a8aab03a 	or	r21,r21,r2
   1da2c:	88bfffd8 	cmpnei	r2,r17,-1
   1da30:	84001a04 	addi	r16,r16,104
   1da34:	103ff21e 	bne	r2,zero,1da00 <__alt_mem_mcu_subsystem_ram_0+0x77ffda00>
   1da38:	9cc00017 	ldw	r19,0(r19)
   1da3c:	983fec1e 	bne	r19,zero,1d9f0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9f0>
   1da40:	a805883a 	mov	r2,r21
   1da44:	dfc00617 	ldw	ra,24(sp)
   1da48:	dd400517 	ldw	r21,20(sp)
   1da4c:	dd000417 	ldw	r20,16(sp)
   1da50:	dcc00317 	ldw	r19,12(sp)
   1da54:	dc800217 	ldw	r18,8(sp)
   1da58:	dc400117 	ldw	r17,4(sp)
   1da5c:	dc000017 	ldw	r16,0(sp)
   1da60:	dec00704 	addi	sp,sp,28
   1da64:	f800283a 	ret
   1da68:	002b883a 	mov	r21,zero
   1da6c:	003ff406 	br	1da40 <__alt_mem_mcu_subsystem_ram_0+0x77ffda40>

0001da70 <_findenv_r>:
   1da70:	defff904 	addi	sp,sp,-28
   1da74:	dd400515 	stw	r21,20(sp)
   1da78:	dd000415 	stw	r20,16(sp)
   1da7c:	dcc00315 	stw	r19,12(sp)
   1da80:	dc000015 	stw	r16,0(sp)
   1da84:	dfc00615 	stw	ra,24(sp)
   1da88:	dc800215 	stw	r18,8(sp)
   1da8c:	dc400115 	stw	r17,4(sp)
   1da90:	202b883a 	mov	r21,r4
   1da94:	2829883a 	mov	r20,r5
   1da98:	3027883a 	mov	r19,r6
   1da9c:	00251d80 	call	251d8 <__env_lock>
   1daa0:	008000f4 	movhi	r2,3
   1daa4:	141e6b17 	ldw	r16,31148(r2)
   1daa8:	80001a26 	beq	r16,zero,1db14 <_findenv_r+0xa4>
   1daac:	a0800007 	ldb	r2,0(r20)
   1dab0:	10002d26 	beq	r2,zero,1db68 <_findenv_r+0xf8>
   1dab4:	10800f58 	cmpnei	r2,r2,61
   1dab8:	a00d883a 	mov	r6,r20
   1dabc:	1000021e 	bne	r2,zero,1dac8 <_findenv_r+0x58>
   1dac0:	00001406 	br	1db14 <_findenv_r+0xa4>
   1dac4:	18001326 	beq	r3,zero,1db14 <_findenv_r+0xa4>
   1dac8:	31800044 	addi	r6,r6,1
   1dacc:	30800007 	ldb	r2,0(r6)
   1dad0:	10c00f58 	cmpnei	r3,r2,61
   1dad4:	103ffb1e 	bne	r2,zero,1dac4 <__alt_mem_mcu_subsystem_ram_0+0x77ffdac4>
   1dad8:	3523c83a 	sub	r17,r6,r20
   1dadc:	81000017 	ldw	r4,0(r16)
   1dae0:	20000c26 	beq	r4,zero,1db14 <_findenv_r+0xa4>
   1dae4:	880d883a 	mov	r6,r17
   1dae8:	a00b883a 	mov	r5,r20
   1daec:	001fa440 	call	1fa44 <strncmp>
   1daf0:	1000051e 	bne	r2,zero,1db08 <_findenv_r+0x98>
   1daf4:	84800017 	ldw	r18,0(r16)
   1daf8:	9465883a 	add	r18,r18,r17
   1dafc:	90800007 	ldb	r2,0(r18)
   1db00:	10800f58 	cmpnei	r2,r2,61
   1db04:	10000f26 	beq	r2,zero,1db44 <_findenv_r+0xd4>
   1db08:	84000104 	addi	r16,r16,4
   1db0c:	81000017 	ldw	r4,0(r16)
   1db10:	203ff41e 	bne	r4,zero,1dae4 <__alt_mem_mcu_subsystem_ram_0+0x77ffdae4>
   1db14:	a809883a 	mov	r4,r21
   1db18:	00251fc0 	call	251fc <__env_unlock>
   1db1c:	0005883a 	mov	r2,zero
   1db20:	dfc00617 	ldw	ra,24(sp)
   1db24:	dd400517 	ldw	r21,20(sp)
   1db28:	dd000417 	ldw	r20,16(sp)
   1db2c:	dcc00317 	ldw	r19,12(sp)
   1db30:	dc800217 	ldw	r18,8(sp)
   1db34:	dc400117 	ldw	r17,4(sp)
   1db38:	dc000017 	ldw	r16,0(sp)
   1db3c:	dec00704 	addi	sp,sp,28
   1db40:	f800283a 	ret
   1db44:	008000f4 	movhi	r2,3
   1db48:	109e6b17 	ldw	r2,31148(r2)
   1db4c:	a809883a 	mov	r4,r21
   1db50:	80a1c83a 	sub	r16,r16,r2
   1db54:	8021d0ba 	srai	r16,r16,2
   1db58:	9c000015 	stw	r16,0(r19)
   1db5c:	00251fc0 	call	251fc <__env_unlock>
   1db60:	90800044 	addi	r2,r18,1
   1db64:	003fee06 	br	1db20 <__alt_mem_mcu_subsystem_ram_0+0x77ffdb20>
   1db68:	0023883a 	mov	r17,zero
   1db6c:	003fdb06 	br	1dadc <__alt_mem_mcu_subsystem_ram_0+0x77ffdadc>

0001db70 <_getenv_r>:
   1db70:	defffe04 	addi	sp,sp,-8
   1db74:	d80d883a 	mov	r6,sp
   1db78:	dfc00115 	stw	ra,4(sp)
   1db7c:	001da700 	call	1da70 <_findenv_r>
   1db80:	dfc00117 	ldw	ra,4(sp)
   1db84:	dec00204 	addi	sp,sp,8
   1db88:	f800283a 	ret

0001db8c <__gettzinfo>:
   1db8c:	008000f4 	movhi	r2,3
   1db90:	10995e04 	addi	r2,r2,25976
   1db94:	f800283a 	ret

0001db98 <__localeconv_l>:
   1db98:	20803c04 	addi	r2,r4,240
   1db9c:	f800283a 	ret

0001dba0 <_localeconv_r>:
   1dba0:	008000f4 	movhi	r2,3
   1dba4:	109e6617 	ldw	r2,31128(r2)
   1dba8:	10800d17 	ldw	r2,52(r2)
   1dbac:	1000021e 	bne	r2,zero,1dbb8 <_localeconv_r+0x18>
   1dbb0:	008000f4 	movhi	r2,3
   1dbb4:	10980104 	addi	r2,r2,24580
   1dbb8:	10803c04 	addi	r2,r2,240
   1dbbc:	f800283a 	ret

0001dbc0 <localeconv>:
   1dbc0:	008000f4 	movhi	r2,3
   1dbc4:	109e6617 	ldw	r2,31128(r2)
   1dbc8:	10800d17 	ldw	r2,52(r2)
   1dbcc:	1000021e 	bne	r2,zero,1dbd8 <localeconv+0x18>
   1dbd0:	008000f4 	movhi	r2,3
   1dbd4:	10980104 	addi	r2,r2,24580
   1dbd8:	10803c04 	addi	r2,r2,240
   1dbdc:	f800283a 	ret

0001dbe0 <__swhatbuf_r>:
   1dbe0:	deffed04 	addi	sp,sp,-76
   1dbe4:	dc001015 	stw	r16,64(sp)
   1dbe8:	2821883a 	mov	r16,r5
   1dbec:	2940038f 	ldh	r5,14(r5)
   1dbf0:	dc401115 	stw	r17,68(sp)
   1dbf4:	dfc01215 	stw	ra,72(sp)
   1dbf8:	3023883a 	mov	r17,r6
   1dbfc:	2800100e 	bge	r5,zero,1dc40 <__swhatbuf_r+0x60>
   1dc00:	8080030b 	ldhu	r2,12(r16)
   1dc04:	38000015 	stw	zero,0(r7)
   1dc08:	1080200c 	andi	r2,r2,128
   1dc0c:	1000081e 	bne	r2,zero,1dc30 <__swhatbuf_r+0x50>
   1dc10:	00810004 	movi	r2,1024
   1dc14:	88800015 	stw	r2,0(r17)
   1dc18:	0005883a 	mov	r2,zero
   1dc1c:	dfc01217 	ldw	ra,72(sp)
   1dc20:	dc401117 	ldw	r17,68(sp)
   1dc24:	dc001017 	ldw	r16,64(sp)
   1dc28:	dec01304 	addi	sp,sp,76
   1dc2c:	f800283a 	ret
   1dc30:	00801004 	movi	r2,64
   1dc34:	88800015 	stw	r2,0(r17)
   1dc38:	0005883a 	mov	r2,zero
   1dc3c:	003ff706 	br	1dc1c <__alt_mem_mcu_subsystem_ram_0+0x77ffdc1c>
   1dc40:	d9800104 	addi	r6,sp,4
   1dc44:	d9c00015 	stw	r7,0(sp)
   1dc48:	0023d0c0 	call	23d0c <_fstat_r>
   1dc4c:	d9c00017 	ldw	r7,0(sp)
   1dc50:	103feb16 	blt	r2,zero,1dc00 <__alt_mem_mcu_subsystem_ram_0+0x77ffdc00>
   1dc54:	d8c00217 	ldw	r3,8(sp)
   1dc58:	00820004 	movi	r2,2048
   1dc5c:	18fc000c 	andi	r3,r3,61440
   1dc60:	18c80020 	cmpeqi	r3,r3,8192
   1dc64:	38c00015 	stw	r3,0(r7)
   1dc68:	00c10004 	movi	r3,1024
   1dc6c:	88c00015 	stw	r3,0(r17)
   1dc70:	003fea06 	br	1dc1c <__alt_mem_mcu_subsystem_ram_0+0x77ffdc1c>

0001dc74 <__smakebuf_r>:
   1dc74:	28c0030b 	ldhu	r3,12(r5)
   1dc78:	defffa04 	addi	sp,sp,-24
   1dc7c:	dc000215 	stw	r16,8(sp)
   1dc80:	dfc00515 	stw	ra,20(sp)
   1dc84:	dc800415 	stw	r18,16(sp)
   1dc88:	dc400315 	stw	r17,12(sp)
   1dc8c:	18c0008c 	andi	r3,r3,2
   1dc90:	2821883a 	mov	r16,r5
   1dc94:	18000b26 	beq	r3,zero,1dcc4 <__smakebuf_r+0x50>
   1dc98:	28c010c4 	addi	r3,r5,67
   1dc9c:	28c00015 	stw	r3,0(r5)
   1dca0:	28c00415 	stw	r3,16(r5)
   1dca4:	00c00044 	movi	r3,1
   1dca8:	28c00515 	stw	r3,20(r5)
   1dcac:	dfc00517 	ldw	ra,20(sp)
   1dcb0:	dc800417 	ldw	r18,16(sp)
   1dcb4:	dc400317 	ldw	r17,12(sp)
   1dcb8:	dc000217 	ldw	r16,8(sp)
   1dcbc:	dec00604 	addi	sp,sp,24
   1dcc0:	f800283a 	ret
   1dcc4:	d9c00104 	addi	r7,sp,4
   1dcc8:	d80d883a 	mov	r6,sp
   1dccc:	2023883a 	mov	r17,r4
   1dcd0:	001dbe00 	call	1dbe0 <__swhatbuf_r>
   1dcd4:	1025883a 	mov	r18,r2
   1dcd8:	d8800117 	ldw	r2,4(sp)
   1dcdc:	10001b1e 	bne	r2,zero,1dd4c <__smakebuf_r+0xd8>
   1dce0:	d9400017 	ldw	r5,0(sp)
   1dce4:	8809883a 	mov	r4,r17
   1dce8:	001527c0 	call	1527c <_malloc_r>
   1dcec:	10002426 	beq	r2,zero,1dd80 <__smakebuf_r+0x10c>
   1dcf0:	010000b4 	movhi	r4,2
   1dcf4:	21334504 	addi	r4,r4,-13036
   1dcf8:	80c0030b 	ldhu	r3,12(r16)
   1dcfc:	89000f15 	stw	r4,60(r17)
   1dd00:	80800015 	stw	r2,0(r16)
   1dd04:	80800415 	stw	r2,16(r16)
   1dd08:	d8800017 	ldw	r2,0(sp)
   1dd0c:	d9400117 	ldw	r5,4(sp)
   1dd10:	18c02014 	ori	r3,r3,128
   1dd14:	80c0030d 	sth	r3,12(r16)
   1dd18:	80800515 	stw	r2,20(r16)
   1dd1c:	2800031e 	bne	r5,zero,1dd2c <__smakebuf_r+0xb8>
   1dd20:	90c6b03a 	or	r3,r18,r3
   1dd24:	80c0030d 	sth	r3,12(r16)
   1dd28:	003fe006 	br	1dcac <__alt_mem_mcu_subsystem_ram_0+0x77ffdcac>
   1dd2c:	8140038f 	ldh	r5,14(r16)
   1dd30:	8809883a 	mov	r4,r17
   1dd34:	0023d6c0 	call	23d6c <_isatty_r>
   1dd38:	80c0030b 	ldhu	r3,12(r16)
   1dd3c:	103ff826 	beq	r2,zero,1dd20 <__alt_mem_mcu_subsystem_ram_0+0x77ffdd20>
   1dd40:	18ffff0c 	andi	r3,r3,65532
   1dd44:	18c00054 	ori	r3,r3,1
   1dd48:	003ff506 	br	1dd20 <__alt_mem_mcu_subsystem_ram_0+0x77ffdd20>
   1dd4c:	8140038f 	ldh	r5,14(r16)
   1dd50:	8809883a 	mov	r4,r17
   1dd54:	0023d6c0 	call	23d6c <_isatty_r>
   1dd58:	103fe126 	beq	r2,zero,1dce0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdce0>
   1dd5c:	8080030b 	ldhu	r2,12(r16)
   1dd60:	80c010c4 	addi	r3,r16,67
   1dd64:	80c00015 	stw	r3,0(r16)
   1dd68:	10800054 	ori	r2,r2,1
   1dd6c:	8080030d 	sth	r2,12(r16)
   1dd70:	00800044 	movi	r2,1
   1dd74:	80c00415 	stw	r3,16(r16)
   1dd78:	80800515 	stw	r2,20(r16)
   1dd7c:	003fd806 	br	1dce0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdce0>
   1dd80:	8080030b 	ldhu	r2,12(r16)
   1dd84:	10c0800c 	andi	r3,r2,512
   1dd88:	183fc81e 	bne	r3,zero,1dcac <__alt_mem_mcu_subsystem_ram_0+0x77ffdcac>
   1dd8c:	10bfff0c 	andi	r2,r2,65532
   1dd90:	10800094 	ori	r2,r2,2
   1dd94:	80c010c4 	addi	r3,r16,67
   1dd98:	8080030d 	sth	r2,12(r16)
   1dd9c:	00800044 	movi	r2,1
   1dda0:	80c00015 	stw	r3,0(r16)
   1dda4:	80c00415 	stw	r3,16(r16)
   1dda8:	80800515 	stw	r2,20(r16)
   1ddac:	003fbf06 	br	1dcac <__alt_mem_mcu_subsystem_ram_0+0x77ffdcac>

0001ddb0 <memchr>:
   1ddb0:	208000cc 	andi	r2,r4,3
   1ddb4:	280f883a 	mov	r7,r5
   1ddb8:	10003526 	beq	r2,zero,1de90 <memchr+0xe0>
   1ddbc:	30bfffc4 	addi	r2,r6,-1
   1ddc0:	30001926 	beq	r6,zero,1de28 <memchr+0x78>
   1ddc4:	20c00003 	ldbu	r3,0(r4)
   1ddc8:	29803fcc 	andi	r6,r5,255
   1ddcc:	30c0061e 	bne	r6,r3,1dde8 <memchr+0x38>
   1ddd0:	00001706 	br	1de30 <memchr+0x80>
   1ddd4:	10bfffc4 	addi	r2,r2,-1
   1ddd8:	10ffffe0 	cmpeqi	r3,r2,-1
   1dddc:	1800121e 	bne	r3,zero,1de28 <memchr+0x78>
   1dde0:	20c00003 	ldbu	r3,0(r4)
   1dde4:	19801226 	beq	r3,r6,1de30 <memchr+0x80>
   1dde8:	21000044 	addi	r4,r4,1
   1ddec:	20c000cc 	andi	r3,r4,3
   1ddf0:	183ff81e 	bne	r3,zero,1ddd4 <__alt_mem_mcu_subsystem_ram_0+0x77ffddd4>
   1ddf4:	10c00130 	cmpltui	r3,r2,4
   1ddf8:	18000f26 	beq	r3,zero,1de38 <memchr+0x88>
   1ddfc:	10000a26 	beq	r2,zero,1de28 <memchr+0x78>
   1de00:	20c00003 	ldbu	r3,0(r4)
   1de04:	29403fcc 	andi	r5,r5,255
   1de08:	28c00926 	beq	r5,r3,1de30 <memchr+0x80>
   1de0c:	2085883a 	add	r2,r4,r2
   1de10:	38c03fcc 	andi	r3,r7,255
   1de14:	00000206 	br	1de20 <memchr+0x70>
   1de18:	21400003 	ldbu	r5,0(r4)
   1de1c:	28c00426 	beq	r5,r3,1de30 <memchr+0x80>
   1de20:	21000044 	addi	r4,r4,1
   1de24:	113ffc1e 	bne	r2,r4,1de18 <__alt_mem_mcu_subsystem_ram_0+0x77ffde18>
   1de28:	0005883a 	mov	r2,zero
   1de2c:	f800283a 	ret
   1de30:	2005883a 	mov	r2,r4
   1de34:	f800283a 	ret
   1de38:	280c923a 	slli	r6,r5,8
   1de3c:	2a403fcc 	andi	r9,r5,255
   1de40:	02bfbff4 	movhi	r10,65279
   1de44:	31bfffcc 	andi	r6,r6,65535
   1de48:	3246b03a 	or	r3,r6,r9
   1de4c:	1812943a 	slli	r9,r3,16
   1de50:	02202074 	movhi	r8,32897
   1de54:	52bfbfc4 	addi	r10,r10,-257
   1de58:	48d2b03a 	or	r9,r9,r3
   1de5c:	42202004 	addi	r8,r8,-32640
   1de60:	20c00017 	ldw	r3,0(r4)
   1de64:	48c6f03a 	xor	r3,r9,r3
   1de68:	1a8d883a 	add	r6,r3,r10
   1de6c:	00c6303a 	nor	r3,zero,r3
   1de70:	30c6703a 	and	r3,r6,r3
   1de74:	1a06703a 	and	r3,r3,r8
   1de78:	183fe11e 	bne	r3,zero,1de00 <__alt_mem_mcu_subsystem_ram_0+0x77ffde00>
   1de7c:	10bfff04 	addi	r2,r2,-4
   1de80:	10c00128 	cmpgeui	r3,r2,4
   1de84:	21000104 	addi	r4,r4,4
   1de88:	183ff51e 	bne	r3,zero,1de60 <__alt_mem_mcu_subsystem_ram_0+0x77ffde60>
   1de8c:	003fdb06 	br	1ddfc <__alt_mem_mcu_subsystem_ram_0+0x77ffddfc>
   1de90:	3005883a 	mov	r2,r6
   1de94:	003fd706 	br	1ddf4 <__alt_mem_mcu_subsystem_ram_0+0x77ffddf4>

0001de98 <memmove>:
   1de98:	2005883a 	mov	r2,r4
   1de9c:	29000a2e 	bgeu	r5,r4,1dec8 <memmove+0x30>
   1dea0:	2989883a 	add	r4,r5,r6
   1dea4:	1100082e 	bgeu	r2,r4,1dec8 <memmove+0x30>
   1dea8:	1187883a 	add	r3,r2,r6
   1deac:	30003926 	beq	r6,zero,1df94 <memmove+0xfc>
   1deb0:	213fffc4 	addi	r4,r4,-1
   1deb4:	21400003 	ldbu	r5,0(r4)
   1deb8:	18ffffc4 	addi	r3,r3,-1
   1debc:	19400005 	stb	r5,0(r3)
   1dec0:	10fffb1e 	bne	r2,r3,1deb0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdeb0>
   1dec4:	f800283a 	ret
   1dec8:	30c00430 	cmpltui	r3,r6,16
   1decc:	1800321e 	bne	r3,zero,1df98 <memmove+0x100>
   1ded0:	2886b03a 	or	r3,r5,r2
   1ded4:	18c000cc 	andi	r3,r3,3
   1ded8:	1800321e 	bne	r3,zero,1dfa4 <memmove+0x10c>
   1dedc:	327ffc04 	addi	r9,r6,-16
   1dee0:	4812d13a 	srli	r9,r9,4
   1dee4:	2811883a 	mov	r8,r5
   1dee8:	100f883a 	mov	r7,r2
   1deec:	4a400044 	addi	r9,r9,1
   1def0:	4812913a 	slli	r9,r9,4
   1def4:	1247883a 	add	r3,r2,r9
   1def8:	41000017 	ldw	r4,0(r8)
   1defc:	39c00404 	addi	r7,r7,16
   1df00:	42000404 	addi	r8,r8,16
   1df04:	393ffc15 	stw	r4,-16(r7)
   1df08:	413ffd17 	ldw	r4,-12(r8)
   1df0c:	393ffd15 	stw	r4,-12(r7)
   1df10:	413ffe17 	ldw	r4,-8(r8)
   1df14:	393ffe15 	stw	r4,-8(r7)
   1df18:	413fff17 	ldw	r4,-4(r8)
   1df1c:	393fff15 	stw	r4,-4(r7)
   1df20:	19fff51e 	bne	r3,r7,1def8 <__alt_mem_mcu_subsystem_ram_0+0x77ffdef8>
   1df24:	310003cc 	andi	r4,r6,15
   1df28:	21c00130 	cmpltui	r7,r4,4
   1df2c:	2a4b883a 	add	r5,r5,r9
   1df30:	38001e1e 	bne	r7,zero,1dfac <memmove+0x114>
   1df34:	213fff04 	addi	r4,r4,-4
   1df38:	200ed0ba 	srli	r7,r4,2
   1df3c:	2811883a 	mov	r8,r5
   1df40:	1809883a 	mov	r4,r3
   1df44:	381290ba 	slli	r9,r7,2
   1df48:	4a400104 	addi	r9,r9,4
   1df4c:	48d3883a 	add	r9,r9,r3
   1df50:	42000104 	addi	r8,r8,4
   1df54:	42bfff17 	ldw	r10,-4(r8)
   1df58:	21000104 	addi	r4,r4,4
   1df5c:	22bfff15 	stw	r10,-4(r4)
   1df60:	227ffb1e 	bne	r4,r9,1df50 <__alt_mem_mcu_subsystem_ram_0+0x77ffdf50>
   1df64:	39000044 	addi	r4,r7,1
   1df68:	200890ba 	slli	r4,r4,2
   1df6c:	318000cc 	andi	r6,r6,3
   1df70:	1907883a 	add	r3,r3,r4
   1df74:	290b883a 	add	r5,r5,r4
   1df78:	30000926 	beq	r6,zero,1dfa0 <memmove+0x108>
   1df7c:	298d883a 	add	r6,r5,r6
   1df80:	29400044 	addi	r5,r5,1
   1df84:	29ffffc3 	ldbu	r7,-1(r5)
   1df88:	18c00044 	addi	r3,r3,1
   1df8c:	19ffffc5 	stb	r7,-1(r3)
   1df90:	317ffb1e 	bne	r6,r5,1df80 <__alt_mem_mcu_subsystem_ram_0+0x77ffdf80>
   1df94:	f800283a 	ret
   1df98:	1007883a 	mov	r3,r2
   1df9c:	303ff71e 	bne	r6,zero,1df7c <__alt_mem_mcu_subsystem_ram_0+0x77ffdf7c>
   1dfa0:	f800283a 	ret
   1dfa4:	1007883a 	mov	r3,r2
   1dfa8:	003ff406 	br	1df7c <__alt_mem_mcu_subsystem_ram_0+0x77ffdf7c>
   1dfac:	200d883a 	mov	r6,r4
   1dfb0:	003ff106 	br	1df78 <__alt_mem_mcu_subsystem_ram_0+0x77ffdf78>

0001dfb4 <_Balloc>:
   1dfb4:	20801317 	ldw	r2,76(r4)
   1dfb8:	defffc04 	addi	sp,sp,-16
   1dfbc:	dc400115 	stw	r17,4(sp)
   1dfc0:	dc000015 	stw	r16,0(sp)
   1dfc4:	dfc00315 	stw	ra,12(sp)
   1dfc8:	dc800215 	stw	r18,8(sp)
   1dfcc:	2021883a 	mov	r16,r4
   1dfd0:	2823883a 	mov	r17,r5
   1dfd4:	10000e26 	beq	r2,zero,1e010 <_Balloc+0x5c>
   1dfd8:	880690ba 	slli	r3,r17,2
   1dfdc:	10c7883a 	add	r3,r2,r3
   1dfe0:	18800017 	ldw	r2,0(r3)
   1dfe4:	10001126 	beq	r2,zero,1e02c <_Balloc+0x78>
   1dfe8:	11000017 	ldw	r4,0(r2)
   1dfec:	19000015 	stw	r4,0(r3)
   1dff0:	10000415 	stw	zero,16(r2)
   1dff4:	10000315 	stw	zero,12(r2)
   1dff8:	dfc00317 	ldw	ra,12(sp)
   1dffc:	dc800217 	ldw	r18,8(sp)
   1e000:	dc400117 	ldw	r17,4(sp)
   1e004:	dc000017 	ldw	r16,0(sp)
   1e008:	dec00404 	addi	sp,sp,16
   1e00c:	f800283a 	ret
   1e010:	01800844 	movi	r6,33
   1e014:	01400104 	movi	r5,4
   1e018:	0014fbc0 	call	14fbc <_calloc_r>
   1e01c:	80801315 	stw	r2,76(r16)
   1e020:	103fed1e 	bne	r2,zero,1dfd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffdfd8>
   1e024:	0005883a 	mov	r2,zero
   1e028:	003ff306 	br	1dff8 <__alt_mem_mcu_subsystem_ram_0+0x77ffdff8>
   1e02c:	04800044 	movi	r18,1
   1e030:	9464983a 	sll	r18,r18,r17
   1e034:	01400044 	movi	r5,1
   1e038:	8009883a 	mov	r4,r16
   1e03c:	91800144 	addi	r6,r18,5
   1e040:	300c90ba 	slli	r6,r6,2
   1e044:	0014fbc0 	call	14fbc <_calloc_r>
   1e048:	103ff626 	beq	r2,zero,1e024 <__alt_mem_mcu_subsystem_ram_0+0x77ffe024>
   1e04c:	14400115 	stw	r17,4(r2)
   1e050:	14800215 	stw	r18,8(r2)
   1e054:	003fe606 	br	1dff0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdff0>

0001e058 <_Bfree>:
   1e058:	28000726 	beq	r5,zero,1e078 <_Bfree+0x20>
   1e05c:	28c00117 	ldw	r3,4(r5)
   1e060:	20801317 	ldw	r2,76(r4)
   1e064:	180690ba 	slli	r3,r3,2
   1e068:	10c5883a 	add	r2,r2,r3
   1e06c:	10c00017 	ldw	r3,0(r2)
   1e070:	28c00015 	stw	r3,0(r5)
   1e074:	11400015 	stw	r5,0(r2)
   1e078:	f800283a 	ret

0001e07c <__multadd>:
   1e07c:	defffa04 	addi	sp,sp,-24
   1e080:	dc800315 	stw	r18,12(sp)
   1e084:	dc400215 	stw	r17,8(sp)
   1e088:	dc000115 	stw	r16,4(sp)
   1e08c:	2823883a 	mov	r17,r5
   1e090:	2c000417 	ldw	r16,16(r5)
   1e094:	2025883a 	mov	r18,r4
   1e098:	dfc00515 	stw	ra,20(sp)
   1e09c:	29000504 	addi	r4,r5,20
   1e0a0:	dcc00415 	stw	r19,16(sp)
   1e0a4:	000b883a 	mov	r5,zero
   1e0a8:	20800017 	ldw	r2,0(r4)
   1e0ac:	21000104 	addi	r4,r4,4
   1e0b0:	29400044 	addi	r5,r5,1
   1e0b4:	10ffffcc 	andi	r3,r2,65535
   1e0b8:	1987383a 	mul	r3,r3,r6
   1e0bc:	1004d43a 	srli	r2,r2,16
   1e0c0:	19c7883a 	add	r3,r3,r7
   1e0c4:	118f383a 	mul	r7,r2,r6
   1e0c8:	1804d43a 	srli	r2,r3,16
   1e0cc:	18ffffcc 	andi	r3,r3,65535
   1e0d0:	388f883a 	add	r7,r7,r2
   1e0d4:	3804943a 	slli	r2,r7,16
   1e0d8:	380ed43a 	srli	r7,r7,16
   1e0dc:	10c7883a 	add	r3,r2,r3
   1e0e0:	20ffff15 	stw	r3,-4(r4)
   1e0e4:	2c3ff016 	blt	r5,r16,1e0a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe0a8>
   1e0e8:	38000826 	beq	r7,zero,1e10c <__multadd+0x90>
   1e0ec:	88800217 	ldw	r2,8(r17)
   1e0f0:	80800e0e 	bge	r16,r2,1e12c <__multadd+0xb0>
   1e0f4:	80800144 	addi	r2,r16,5
   1e0f8:	100490ba 	slli	r2,r2,2
   1e0fc:	84000044 	addi	r16,r16,1
   1e100:	8885883a 	add	r2,r17,r2
   1e104:	11c00015 	stw	r7,0(r2)
   1e108:	8c000415 	stw	r16,16(r17)
   1e10c:	8805883a 	mov	r2,r17
   1e110:	dfc00517 	ldw	ra,20(sp)
   1e114:	dcc00417 	ldw	r19,16(sp)
   1e118:	dc800317 	ldw	r18,12(sp)
   1e11c:	dc400217 	ldw	r17,8(sp)
   1e120:	dc000117 	ldw	r16,4(sp)
   1e124:	dec00604 	addi	sp,sp,24
   1e128:	f800283a 	ret
   1e12c:	89400117 	ldw	r5,4(r17)
   1e130:	9009883a 	mov	r4,r18
   1e134:	d9c00015 	stw	r7,0(sp)
   1e138:	29400044 	addi	r5,r5,1
   1e13c:	001dfb40 	call	1dfb4 <_Balloc>
   1e140:	89800417 	ldw	r6,16(r17)
   1e144:	89400304 	addi	r5,r17,12
   1e148:	11000304 	addi	r4,r2,12
   1e14c:	31800084 	addi	r6,r6,2
   1e150:	300c90ba 	slli	r6,r6,2
   1e154:	1027883a 	mov	r19,r2
   1e158:	0015ac00 	call	15ac0 <memcpy>
   1e15c:	d9c00017 	ldw	r7,0(sp)
   1e160:	88000926 	beq	r17,zero,1e188 <__multadd+0x10c>
   1e164:	88c00117 	ldw	r3,4(r17)
   1e168:	90801317 	ldw	r2,76(r18)
   1e16c:	180690ba 	slli	r3,r3,2
   1e170:	10c5883a 	add	r2,r2,r3
   1e174:	10c00017 	ldw	r3,0(r2)
   1e178:	88c00015 	stw	r3,0(r17)
   1e17c:	14400015 	stw	r17,0(r2)
   1e180:	9823883a 	mov	r17,r19
   1e184:	003fdb06 	br	1e0f4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe0f4>
   1e188:	9823883a 	mov	r17,r19
   1e18c:	003fd906 	br	1e0f4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe0f4>

0001e190 <__s2b>:
   1e190:	defff904 	addi	sp,sp,-28
   1e194:	dcc00315 	stw	r19,12(sp)
   1e198:	dc000015 	stw	r16,0(sp)
   1e19c:	2027883a 	mov	r19,r4
   1e1a0:	2821883a 	mov	r16,r5
   1e1a4:	39000204 	addi	r4,r7,8
   1e1a8:	01400244 	movi	r5,9
   1e1ac:	dd000415 	stw	r20,16(sp)
   1e1b0:	dc800215 	stw	r18,8(sp)
   1e1b4:	dfc00615 	stw	ra,24(sp)
   1e1b8:	dd400515 	stw	r21,20(sp)
   1e1bc:	dc400115 	stw	r17,4(sp)
   1e1c0:	3825883a 	mov	r18,r7
   1e1c4:	3029883a 	mov	r20,r6
   1e1c8:	00129540 	call	12954 <__divsi3>
   1e1cc:	10c00090 	cmplti	r3,r2,2
   1e1d0:	1800311e 	bne	r3,zero,1e298 <__s2b+0x108>
   1e1d4:	00c00044 	movi	r3,1
   1e1d8:	000b883a 	mov	r5,zero
   1e1dc:	18c7883a 	add	r3,r3,r3
   1e1e0:	29400044 	addi	r5,r5,1
   1e1e4:	18bffd16 	blt	r3,r2,1e1dc <__alt_mem_mcu_subsystem_ram_0+0x77ffe1dc>
   1e1e8:	9809883a 	mov	r4,r19
   1e1ec:	001dfb40 	call	1dfb4 <_Balloc>
   1e1f0:	d8c00717 	ldw	r3,28(sp)
   1e1f4:	10c00515 	stw	r3,20(r2)
   1e1f8:	00c00044 	movi	r3,1
   1e1fc:	10c00415 	stw	r3,16(r2)
   1e200:	a0c00290 	cmplti	r3,r20,10
   1e204:	1800211e 	bne	r3,zero,1e28c <__s2b+0xfc>
   1e208:	85400244 	addi	r21,r16,9
   1e20c:	a823883a 	mov	r17,r21
   1e210:	8521883a 	add	r16,r16,r20
   1e214:	8c400044 	addi	r17,r17,1
   1e218:	89ffffc7 	ldb	r7,-1(r17)
   1e21c:	01800284 	movi	r6,10
   1e220:	100b883a 	mov	r5,r2
   1e224:	39fff404 	addi	r7,r7,-48
   1e228:	9809883a 	mov	r4,r19
   1e22c:	001e07c0 	call	1e07c <__multadd>
   1e230:	847ff81e 	bne	r16,r17,1e214 <__alt_mem_mcu_subsystem_ram_0+0x77ffe214>
   1e234:	ad21883a 	add	r16,r21,r20
   1e238:	843ffe04 	addi	r16,r16,-8
   1e23c:	a4800a0e 	bge	r20,r18,1e268 <__s2b+0xd8>
   1e240:	9523c83a 	sub	r17,r18,r20
   1e244:	8463883a 	add	r17,r16,r17
   1e248:	84000044 	addi	r16,r16,1
   1e24c:	81ffffc7 	ldb	r7,-1(r16)
   1e250:	01800284 	movi	r6,10
   1e254:	100b883a 	mov	r5,r2
   1e258:	39fff404 	addi	r7,r7,-48
   1e25c:	9809883a 	mov	r4,r19
   1e260:	001e07c0 	call	1e07c <__multadd>
   1e264:	8c3ff81e 	bne	r17,r16,1e248 <__alt_mem_mcu_subsystem_ram_0+0x77ffe248>
   1e268:	dfc00617 	ldw	ra,24(sp)
   1e26c:	dd400517 	ldw	r21,20(sp)
   1e270:	dd000417 	ldw	r20,16(sp)
   1e274:	dcc00317 	ldw	r19,12(sp)
   1e278:	dc800217 	ldw	r18,8(sp)
   1e27c:	dc400117 	ldw	r17,4(sp)
   1e280:	dc000017 	ldw	r16,0(sp)
   1e284:	dec00704 	addi	sp,sp,28
   1e288:	f800283a 	ret
   1e28c:	84000284 	addi	r16,r16,10
   1e290:	05000244 	movi	r20,9
   1e294:	003fe906 	br	1e23c <__alt_mem_mcu_subsystem_ram_0+0x77ffe23c>
   1e298:	000b883a 	mov	r5,zero
   1e29c:	003fd206 	br	1e1e8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe1e8>

0001e2a0 <__hi0bits>:
   1e2a0:	20bfffec 	andhi	r2,r4,65535
   1e2a4:	1000151e 	bne	r2,zero,1e2fc <__hi0bits+0x5c>
   1e2a8:	2008943a 	slli	r4,r4,16
   1e2ac:	00800404 	movi	r2,16
   1e2b0:	20ffc02c 	andhi	r3,r4,65280
   1e2b4:	1800021e 	bne	r3,zero,1e2c0 <__hi0bits+0x20>
   1e2b8:	2008923a 	slli	r4,r4,8
   1e2bc:	10800204 	addi	r2,r2,8
   1e2c0:	20fc002c 	andhi	r3,r4,61440
   1e2c4:	1800021e 	bne	r3,zero,1e2d0 <__hi0bits+0x30>
   1e2c8:	2008913a 	slli	r4,r4,4
   1e2cc:	10800104 	addi	r2,r2,4
   1e2d0:	20f0002c 	andhi	r3,r4,49152
   1e2d4:	1800021e 	bne	r3,zero,1e2e0 <__hi0bits+0x40>
   1e2d8:	200890ba 	slli	r4,r4,2
   1e2dc:	10800084 	addi	r2,r2,2
   1e2e0:	20000516 	blt	r4,zero,1e2f8 <__hi0bits+0x58>
   1e2e4:	2110002c 	andhi	r4,r4,16384
   1e2e8:	20000226 	beq	r4,zero,1e2f4 <__hi0bits+0x54>
   1e2ec:	10800044 	addi	r2,r2,1
   1e2f0:	f800283a 	ret
   1e2f4:	00800804 	movi	r2,32
   1e2f8:	f800283a 	ret
   1e2fc:	0005883a 	mov	r2,zero
   1e300:	003feb06 	br	1e2b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffe2b0>

0001e304 <__lo0bits>:
   1e304:	20c00017 	ldw	r3,0(r4)
   1e308:	188001cc 	andi	r2,r3,7
   1e30c:	10000826 	beq	r2,zero,1e330 <__lo0bits+0x2c>
   1e310:	1880004c 	andi	r2,r3,1
   1e314:	10001f1e 	bne	r2,zero,1e394 <__lo0bits+0x90>
   1e318:	1880008c 	andi	r2,r3,2
   1e31c:	10001f26 	beq	r2,zero,1e39c <__lo0bits+0x98>
   1e320:	1806d07a 	srli	r3,r3,1
   1e324:	00800044 	movi	r2,1
   1e328:	20c00015 	stw	r3,0(r4)
   1e32c:	f800283a 	ret
   1e330:	18bfffcc 	andi	r2,r3,65535
   1e334:	10001426 	beq	r2,zero,1e388 <__lo0bits+0x84>
   1e338:	0005883a 	mov	r2,zero
   1e33c:	19403fcc 	andi	r5,r3,255
   1e340:	2800021e 	bne	r5,zero,1e34c <__lo0bits+0x48>
   1e344:	1806d23a 	srli	r3,r3,8
   1e348:	10800204 	addi	r2,r2,8
   1e34c:	194003cc 	andi	r5,r3,15
   1e350:	2800021e 	bne	r5,zero,1e35c <__lo0bits+0x58>
   1e354:	1806d13a 	srli	r3,r3,4
   1e358:	10800104 	addi	r2,r2,4
   1e35c:	194000cc 	andi	r5,r3,3
   1e360:	2800021e 	bne	r5,zero,1e36c <__lo0bits+0x68>
   1e364:	1806d0ba 	srli	r3,r3,2
   1e368:	10800084 	addi	r2,r2,2
   1e36c:	1940004c 	andi	r5,r3,1
   1e370:	2800031e 	bne	r5,zero,1e380 <__lo0bits+0x7c>
   1e374:	1806d07a 	srli	r3,r3,1
   1e378:	18000c26 	beq	r3,zero,1e3ac <__lo0bits+0xa8>
   1e37c:	10800044 	addi	r2,r2,1
   1e380:	20c00015 	stw	r3,0(r4)
   1e384:	f800283a 	ret
   1e388:	1806d43a 	srli	r3,r3,16
   1e38c:	00800404 	movi	r2,16
   1e390:	003fea06 	br	1e33c <__alt_mem_mcu_subsystem_ram_0+0x77ffe33c>
   1e394:	0005883a 	mov	r2,zero
   1e398:	f800283a 	ret
   1e39c:	1806d0ba 	srli	r3,r3,2
   1e3a0:	00800084 	movi	r2,2
   1e3a4:	20c00015 	stw	r3,0(r4)
   1e3a8:	f800283a 	ret
   1e3ac:	00800804 	movi	r2,32
   1e3b0:	f800283a 	ret

0001e3b4 <__i2b>:
   1e3b4:	defffe04 	addi	sp,sp,-8
   1e3b8:	dc000015 	stw	r16,0(sp)
   1e3bc:	2821883a 	mov	r16,r5
   1e3c0:	01400044 	movi	r5,1
   1e3c4:	dfc00115 	stw	ra,4(sp)
   1e3c8:	001dfb40 	call	1dfb4 <_Balloc>
   1e3cc:	01000044 	movi	r4,1
   1e3d0:	14000515 	stw	r16,20(r2)
   1e3d4:	11000415 	stw	r4,16(r2)
   1e3d8:	dfc00117 	ldw	ra,4(sp)
   1e3dc:	dc000017 	ldw	r16,0(sp)
   1e3e0:	dec00204 	addi	sp,sp,8
   1e3e4:	f800283a 	ret

0001e3e8 <__multiply>:
   1e3e8:	defffa04 	addi	sp,sp,-24
   1e3ec:	dc800215 	stw	r18,8(sp)
   1e3f0:	dc400115 	stw	r17,4(sp)
   1e3f4:	34800417 	ldw	r18,16(r6)
   1e3f8:	2c400417 	ldw	r17,16(r5)
   1e3fc:	dd000415 	stw	r20,16(sp)
   1e400:	dcc00315 	stw	r19,12(sp)
   1e404:	dfc00515 	stw	ra,20(sp)
   1e408:	dc000015 	stw	r16,0(sp)
   1e40c:	2827883a 	mov	r19,r5
   1e410:	3029883a 	mov	r20,r6
   1e414:	8c80050e 	bge	r17,r18,1e42c <__multiply+0x44>
   1e418:	8807883a 	mov	r3,r17
   1e41c:	3027883a 	mov	r19,r6
   1e420:	9023883a 	mov	r17,r18
   1e424:	2829883a 	mov	r20,r5
   1e428:	1825883a 	mov	r18,r3
   1e42c:	98800217 	ldw	r2,8(r19)
   1e430:	8ca1883a 	add	r16,r17,r18
   1e434:	99400117 	ldw	r5,4(r19)
   1e438:	1400010e 	bge	r2,r16,1e440 <__multiply+0x58>
   1e43c:	29400044 	addi	r5,r5,1
   1e440:	001dfb40 	call	1dfb4 <_Balloc>
   1e444:	801290ba 	slli	r9,r16,2
   1e448:	12800504 	addi	r10,r2,20
   1e44c:	5253883a 	add	r9,r10,r9
   1e450:	5240042e 	bgeu	r10,r9,1e464 <__multiply+0x7c>
   1e454:	5007883a 	mov	r3,r10
   1e458:	18000015 	stw	zero,0(r3)
   1e45c:	18c00104 	addi	r3,r3,4
   1e460:	1a7ffd36 	bltu	r3,r9,1e458 <__alt_mem_mcu_subsystem_ram_0+0x77ffe458>
   1e464:	901690ba 	slli	r11,r18,2
   1e468:	881090ba 	slli	r8,r17,2
   1e46c:	a1800504 	addi	r6,r20,20
   1e470:	99400504 	addi	r5,r19,20
   1e474:	32d7883a 	add	r11,r6,r11
   1e478:	2a11883a 	add	r8,r5,r8
   1e47c:	32c00636 	bltu	r6,r11,1e498 <__multiply+0xb0>
   1e480:	00004506 	br	1e598 <__multiply+0x1b0>
   1e484:	681ad43a 	srli	r13,r13,16
   1e488:	6800241e 	bne	r13,zero,1e51c <__multiply+0x134>
   1e48c:	31800104 	addi	r6,r6,4
   1e490:	52800104 	addi	r10,r10,4
   1e494:	32c0402e 	bgeu	r6,r11,1e598 <__multiply+0x1b0>
   1e498:	33400017 	ldw	r13,0(r6)
   1e49c:	6bffffcc 	andi	r15,r13,65535
   1e4a0:	783ff826 	beq	r15,zero,1e484 <__alt_mem_mcu_subsystem_ram_0+0x77ffe484>
   1e4a4:	501d883a 	mov	r14,r10
   1e4a8:	281b883a 	mov	r13,r5
   1e4ac:	0023883a 	mov	r17,zero
   1e4b0:	00000106 	br	1e4b8 <__multiply+0xd0>
   1e4b4:	f81d883a 	mov	r14,ra
   1e4b8:	69000017 	ldw	r4,0(r13)
   1e4bc:	73000017 	ldw	r12,0(r14)
   1e4c0:	77c00104 	addi	ra,r14,4
   1e4c4:	21ffffcc 	andi	r7,r4,65535
   1e4c8:	3bcf383a 	mul	r7,r7,r15
   1e4cc:	2006d43a 	srli	r3,r4,16
   1e4d0:	613fffcc 	andi	r4,r12,65535
   1e4d4:	390f883a 	add	r7,r7,r4
   1e4d8:	3c4f883a 	add	r7,r7,r17
   1e4dc:	1bc7383a 	mul	r3,r3,r15
   1e4e0:	6018d43a 	srli	r12,r12,16
   1e4e4:	3808d43a 	srli	r4,r7,16
   1e4e8:	39ffffcc 	andi	r7,r7,65535
   1e4ec:	1b07883a 	add	r3,r3,r12
   1e4f0:	1907883a 	add	r3,r3,r4
   1e4f4:	1808943a 	slli	r4,r3,16
   1e4f8:	6b400104 	addi	r13,r13,4
   1e4fc:	1822d43a 	srli	r17,r3,16
   1e500:	21ceb03a 	or	r7,r4,r7
   1e504:	f9ffff15 	stw	r7,-4(ra)
   1e508:	6a3fea36 	bltu	r13,r8,1e4b4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe4b4>
   1e50c:	74400115 	stw	r17,4(r14)
   1e510:	33400017 	ldw	r13,0(r6)
   1e514:	681ad43a 	srli	r13,r13,16
   1e518:	683fdc26 	beq	r13,zero,1e48c <__alt_mem_mcu_subsystem_ram_0+0x77ffe48c>
   1e51c:	50c00017 	ldw	r3,0(r10)
   1e520:	501d883a 	mov	r14,r10
   1e524:	2819883a 	mov	r12,r5
   1e528:	180f883a 	mov	r7,r3
   1e52c:	0023883a 	mov	r17,zero
   1e530:	00000106 	br	1e538 <__multiply+0x150>
   1e534:	781d883a 	mov	r14,r15
   1e538:	6100000b 	ldhu	r4,0(r12)
   1e53c:	380ed43a 	srli	r7,r7,16
   1e540:	18ffffcc 	andi	r3,r3,65535
   1e544:	2349383a 	mul	r4,r4,r13
   1e548:	73c00104 	addi	r15,r14,4
   1e54c:	63000104 	addi	r12,r12,4
   1e550:	21c9883a 	add	r4,r4,r7
   1e554:	2449883a 	add	r4,r4,r17
   1e558:	200e943a 	slli	r7,r4,16
   1e55c:	2008d43a 	srli	r4,r4,16
   1e560:	38c6b03a 	or	r3,r7,r3
   1e564:	78ffff15 	stw	r3,-4(r15)
   1e568:	60ffff8b 	ldhu	r3,-2(r12)
   1e56c:	71c00117 	ldw	r7,4(r14)
   1e570:	1b47383a 	mul	r3,r3,r13
   1e574:	3c7fffcc 	andi	r17,r7,65535
   1e578:	1c47883a 	add	r3,r3,r17
   1e57c:	1907883a 	add	r3,r3,r4
   1e580:	1822d43a 	srli	r17,r3,16
   1e584:	623feb36 	bltu	r12,r8,1e534 <__alt_mem_mcu_subsystem_ram_0+0x77ffe534>
   1e588:	70c00115 	stw	r3,4(r14)
   1e58c:	31800104 	addi	r6,r6,4
   1e590:	52800104 	addi	r10,r10,4
   1e594:	32ffc036 	bltu	r6,r11,1e498 <__alt_mem_mcu_subsystem_ram_0+0x77ffe498>
   1e598:	0400090e 	bge	zero,r16,1e5c0 <__multiply+0x1d8>
   1e59c:	48ffff17 	ldw	r3,-4(r9)
   1e5a0:	4a7fff04 	addi	r9,r9,-4
   1e5a4:	18000326 	beq	r3,zero,1e5b4 <__multiply+0x1cc>
   1e5a8:	00000506 	br	1e5c0 <__multiply+0x1d8>
   1e5ac:	48c00017 	ldw	r3,0(r9)
   1e5b0:	1800031e 	bne	r3,zero,1e5c0 <__multiply+0x1d8>
   1e5b4:	843fffc4 	addi	r16,r16,-1
   1e5b8:	4a7fff04 	addi	r9,r9,-4
   1e5bc:	803ffb1e 	bne	r16,zero,1e5ac <__alt_mem_mcu_subsystem_ram_0+0x77ffe5ac>
   1e5c0:	14000415 	stw	r16,16(r2)
   1e5c4:	dfc00517 	ldw	ra,20(sp)
   1e5c8:	dd000417 	ldw	r20,16(sp)
   1e5cc:	dcc00317 	ldw	r19,12(sp)
   1e5d0:	dc800217 	ldw	r18,8(sp)
   1e5d4:	dc400117 	ldw	r17,4(sp)
   1e5d8:	dc000017 	ldw	r16,0(sp)
   1e5dc:	dec00604 	addi	sp,sp,24
   1e5e0:	f800283a 	ret

0001e5e4 <__pow5mult>:
   1e5e4:	defffb04 	addi	sp,sp,-20
   1e5e8:	dcc00315 	stw	r19,12(sp)
   1e5ec:	dc000015 	stw	r16,0(sp)
   1e5f0:	dfc00415 	stw	ra,16(sp)
   1e5f4:	dc800215 	stw	r18,8(sp)
   1e5f8:	dc400115 	stw	r17,4(sp)
   1e5fc:	308000cc 	andi	r2,r6,3
   1e600:	3021883a 	mov	r16,r6
   1e604:	2027883a 	mov	r19,r4
   1e608:	1000371e 	bne	r2,zero,1e6e8 <__pow5mult+0x104>
   1e60c:	2825883a 	mov	r18,r5
   1e610:	8021d0ba 	srai	r16,r16,2
   1e614:	80002326 	beq	r16,zero,1e6a4 <__pow5mult+0xc0>
   1e618:	9c401217 	ldw	r17,72(r19)
   1e61c:	88001d1e 	bne	r17,zero,1e694 <__pow5mult+0xb0>
   1e620:	01400044 	movi	r5,1
   1e624:	9809883a 	mov	r4,r19
   1e628:	001dfb40 	call	1dfb4 <_Balloc>
   1e62c:	1023883a 	mov	r17,r2
   1e630:	00809c44 	movi	r2,625
   1e634:	88800515 	stw	r2,20(r17)
   1e638:	00800044 	movi	r2,1
   1e63c:	88800415 	stw	r2,16(r17)
   1e640:	9c401215 	stw	r17,72(r19)
   1e644:	88000015 	stw	zero,0(r17)
   1e648:	00001206 	br	1e694 <__pow5mult+0xb0>
   1e64c:	880d883a 	mov	r6,r17
   1e650:	900b883a 	mov	r5,r18
   1e654:	9809883a 	mov	r4,r19
   1e658:	001e3e80 	call	1e3e8 <__multiply>
   1e65c:	90002026 	beq	r18,zero,1e6e0 <__pow5mult+0xfc>
   1e660:	91000117 	ldw	r4,4(r18)
   1e664:	98c01317 	ldw	r3,76(r19)
   1e668:	200890ba 	slli	r4,r4,2
   1e66c:	1907883a 	add	r3,r3,r4
   1e670:	19000017 	ldw	r4,0(r3)
   1e674:	91000015 	stw	r4,0(r18)
   1e678:	1c800015 	stw	r18,0(r3)
   1e67c:	1025883a 	mov	r18,r2
   1e680:	8021d07a 	srai	r16,r16,1
   1e684:	80000726 	beq	r16,zero,1e6a4 <__pow5mult+0xc0>
   1e688:	88800017 	ldw	r2,0(r17)
   1e68c:	10000d26 	beq	r2,zero,1e6c4 <__pow5mult+0xe0>
   1e690:	1023883a 	mov	r17,r2
   1e694:	8080004c 	andi	r2,r16,1
   1e698:	103fec1e 	bne	r2,zero,1e64c <__alt_mem_mcu_subsystem_ram_0+0x77ffe64c>
   1e69c:	8021d07a 	srai	r16,r16,1
   1e6a0:	803ff91e 	bne	r16,zero,1e688 <__alt_mem_mcu_subsystem_ram_0+0x77ffe688>
   1e6a4:	9005883a 	mov	r2,r18
   1e6a8:	dfc00417 	ldw	ra,16(sp)
   1e6ac:	dcc00317 	ldw	r19,12(sp)
   1e6b0:	dc800217 	ldw	r18,8(sp)
   1e6b4:	dc400117 	ldw	r17,4(sp)
   1e6b8:	dc000017 	ldw	r16,0(sp)
   1e6bc:	dec00504 	addi	sp,sp,20
   1e6c0:	f800283a 	ret
   1e6c4:	880d883a 	mov	r6,r17
   1e6c8:	880b883a 	mov	r5,r17
   1e6cc:	9809883a 	mov	r4,r19
   1e6d0:	001e3e80 	call	1e3e8 <__multiply>
   1e6d4:	88800015 	stw	r2,0(r17)
   1e6d8:	10000015 	stw	zero,0(r2)
   1e6dc:	003fec06 	br	1e690 <__alt_mem_mcu_subsystem_ram_0+0x77ffe690>
   1e6e0:	1025883a 	mov	r18,r2
   1e6e4:	003fe606 	br	1e680 <__alt_mem_mcu_subsystem_ram_0+0x77ffe680>
   1e6e8:	100490ba 	slli	r2,r2,2
   1e6ec:	00c000f4 	movhi	r3,3
   1e6f0:	000f883a 	mov	r7,zero
   1e6f4:	10c7883a 	add	r3,r2,r3
   1e6f8:	198eb917 	ldw	r6,15076(r3)
   1e6fc:	001e07c0 	call	1e07c <__multadd>
   1e700:	1025883a 	mov	r18,r2
   1e704:	003fc206 	br	1e610 <__alt_mem_mcu_subsystem_ram_0+0x77ffe610>

0001e708 <__lshift>:
   1e708:	defff904 	addi	sp,sp,-28
   1e70c:	dd000415 	stw	r20,16(sp)
   1e710:	dc000015 	stw	r16,0(sp)
   1e714:	2d000417 	ldw	r20,16(r5)
   1e718:	3021d17a 	srai	r16,r6,5
   1e71c:	28800217 	ldw	r2,8(r5)
   1e720:	dd400515 	stw	r21,20(sp)
   1e724:	8529883a 	add	r20,r16,r20
   1e728:	dcc00315 	stw	r19,12(sp)
   1e72c:	dc800215 	stw	r18,8(sp)
   1e730:	dc400115 	stw	r17,4(sp)
   1e734:	dfc00615 	stw	ra,24(sp)
   1e738:	a4400044 	addi	r17,r20,1
   1e73c:	2825883a 	mov	r18,r5
   1e740:	302b883a 	mov	r21,r6
   1e744:	2027883a 	mov	r19,r4
   1e748:	29400117 	ldw	r5,4(r5)
   1e74c:	1440030e 	bge	r2,r17,1e75c <__lshift+0x54>
   1e750:	1085883a 	add	r2,r2,r2
   1e754:	29400044 	addi	r5,r5,1
   1e758:	147ffd16 	blt	r2,r17,1e750 <__alt_mem_mcu_subsystem_ram_0+0x77ffe750>
   1e75c:	9809883a 	mov	r4,r19
   1e760:	001dfb40 	call	1dfb4 <_Balloc>
   1e764:	10c00504 	addi	r3,r2,20
   1e768:	0400360e 	bge	zero,r16,1e844 <__lshift+0x13c>
   1e76c:	800890ba 	slli	r4,r16,2
   1e770:	1909883a 	add	r4,r3,r4
   1e774:	18c00104 	addi	r3,r3,4
   1e778:	183fff15 	stw	zero,-4(r3)
   1e77c:	193ffd1e 	bne	r3,r4,1e774 <__alt_mem_mcu_subsystem_ram_0+0x77ffe774>
   1e780:	92000417 	ldw	r8,16(r18)
   1e784:	90c00504 	addi	r3,r18,20
   1e788:	a98007cc 	andi	r6,r21,31
   1e78c:	401090ba 	slli	r8,r8,2
   1e790:	1a11883a 	add	r8,r3,r8
   1e794:	30002326 	beq	r6,zero,1e824 <__lshift+0x11c>
   1e798:	02800804 	movi	r10,32
   1e79c:	5195c83a 	sub	r10,r10,r6
   1e7a0:	000f883a 	mov	r7,zero
   1e7a4:	00000106 	br	1e7ac <__lshift+0xa4>
   1e7a8:	4809883a 	mov	r4,r9
   1e7ac:	19400017 	ldw	r5,0(r3)
   1e7b0:	22400104 	addi	r9,r4,4
   1e7b4:	18c00104 	addi	r3,r3,4
   1e7b8:	298a983a 	sll	r5,r5,r6
   1e7bc:	29cab03a 	or	r5,r5,r7
   1e7c0:	497fff15 	stw	r5,-4(r9)
   1e7c4:	197fff17 	ldw	r5,-4(r3)
   1e7c8:	2a8ed83a 	srl	r7,r5,r10
   1e7cc:	1a3ff636 	bltu	r3,r8,1e7a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe7a8>
   1e7d0:	21c00115 	stw	r7,4(r4)
   1e7d4:	3800191e 	bne	r7,zero,1e83c <__lshift+0x134>
   1e7d8:	8c7fffc4 	addi	r17,r17,-1
   1e7dc:	14400415 	stw	r17,16(r2)
   1e7e0:	90000726 	beq	r18,zero,1e800 <__lshift+0xf8>
   1e7e4:	91000117 	ldw	r4,4(r18)
   1e7e8:	98c01317 	ldw	r3,76(r19)
   1e7ec:	200890ba 	slli	r4,r4,2
   1e7f0:	1907883a 	add	r3,r3,r4
   1e7f4:	19000017 	ldw	r4,0(r3)
   1e7f8:	91000015 	stw	r4,0(r18)
   1e7fc:	1c800015 	stw	r18,0(r3)
   1e800:	dfc00617 	ldw	ra,24(sp)
   1e804:	dd400517 	ldw	r21,20(sp)
   1e808:	dd000417 	ldw	r20,16(sp)
   1e80c:	dcc00317 	ldw	r19,12(sp)
   1e810:	dc800217 	ldw	r18,8(sp)
   1e814:	dc400117 	ldw	r17,4(sp)
   1e818:	dc000017 	ldw	r16,0(sp)
   1e81c:	dec00704 	addi	sp,sp,28
   1e820:	f800283a 	ret
   1e824:	18c00104 	addi	r3,r3,4
   1e828:	197fff17 	ldw	r5,-4(r3)
   1e82c:	21000104 	addi	r4,r4,4
   1e830:	217fff15 	stw	r5,-4(r4)
   1e834:	1a3ffb36 	bltu	r3,r8,1e824 <__alt_mem_mcu_subsystem_ram_0+0x77ffe824>
   1e838:	003fe706 	br	1e7d8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe7d8>
   1e83c:	a4400084 	addi	r17,r20,2
   1e840:	003fe506 	br	1e7d8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe7d8>
   1e844:	1809883a 	mov	r4,r3
   1e848:	003fcd06 	br	1e780 <__alt_mem_mcu_subsystem_ram_0+0x77ffe780>

0001e84c <__mcmp>:
   1e84c:	20800417 	ldw	r2,16(r4)
   1e850:	28c00417 	ldw	r3,16(r5)
   1e854:	10c5c83a 	sub	r2,r2,r3
   1e858:	1000101e 	bne	r2,zero,1e89c <__mcmp+0x50>
   1e85c:	180c90ba 	slli	r6,r3,2
   1e860:	21000504 	addi	r4,r4,20
   1e864:	29400504 	addi	r5,r5,20
   1e868:	2187883a 	add	r3,r4,r6
   1e86c:	298b883a 	add	r5,r5,r6
   1e870:	00000106 	br	1e878 <__mcmp+0x2c>
   1e874:	20c00a2e 	bgeu	r4,r3,1e8a0 <__mcmp+0x54>
   1e878:	18ffff04 	addi	r3,r3,-4
   1e87c:	297fff04 	addi	r5,r5,-4
   1e880:	19c00017 	ldw	r7,0(r3)
   1e884:	29800017 	ldw	r6,0(r5)
   1e888:	39bffa26 	beq	r7,r6,1e874 <__alt_mem_mcu_subsystem_ram_0+0x77ffe874>
   1e88c:	39800236 	bltu	r7,r6,1e898 <__mcmp+0x4c>
   1e890:	00800044 	movi	r2,1
   1e894:	f800283a 	ret
   1e898:	00bfffc4 	movi	r2,-1
   1e89c:	f800283a 	ret
   1e8a0:	f800283a 	ret

0001e8a4 <__mdiff>:
   1e8a4:	defffa04 	addi	sp,sp,-24
   1e8a8:	dc800215 	stw	r18,8(sp)
   1e8ac:	30800417 	ldw	r2,16(r6)
   1e8b0:	2c800417 	ldw	r18,16(r5)
   1e8b4:	dd000415 	stw	r20,16(sp)
   1e8b8:	dcc00315 	stw	r19,12(sp)
   1e8bc:	dc400115 	stw	r17,4(sp)
   1e8c0:	dc000015 	stw	r16,0(sp)
   1e8c4:	dfc00515 	stw	ra,20(sp)
   1e8c8:	90a5c83a 	sub	r18,r18,r2
   1e8cc:	2827883a 	mov	r19,r5
   1e8d0:	3029883a 	mov	r20,r6
   1e8d4:	2c000504 	addi	r16,r5,20
   1e8d8:	34400504 	addi	r17,r6,20
   1e8dc:	9000131e 	bne	r18,zero,1e92c <__mdiff+0x88>
   1e8e0:	100490ba 	slli	r2,r2,2
   1e8e4:	8087883a 	add	r3,r16,r2
   1e8e8:	8885883a 	add	r2,r17,r2
   1e8ec:	00000106 	br	1e8f4 <__mdiff+0x50>
   1e8f0:	80c0562e 	bgeu	r16,r3,1ea4c <__mdiff+0x1a8>
   1e8f4:	18ffff04 	addi	r3,r3,-4
   1e8f8:	10bfff04 	addi	r2,r2,-4
   1e8fc:	19c00017 	ldw	r7,0(r3)
   1e900:	11400017 	ldw	r5,0(r2)
   1e904:	397ffa26 	beq	r7,r5,1e8f0 <__alt_mem_mcu_subsystem_ram_0+0x77ffe8f0>
   1e908:	39400a2e 	bgeu	r7,r5,1e934 <__mdiff+0x90>
   1e90c:	8007883a 	mov	r3,r16
   1e910:	9805883a 	mov	r2,r19
   1e914:	8821883a 	mov	r16,r17
   1e918:	a027883a 	mov	r19,r20
   1e91c:	1823883a 	mov	r17,r3
   1e920:	1029883a 	mov	r20,r2
   1e924:	04800044 	movi	r18,1
   1e928:	00000206 	br	1e934 <__mdiff+0x90>
   1e92c:	903ff716 	blt	r18,zero,1e90c <__alt_mem_mcu_subsystem_ram_0+0x77ffe90c>
   1e930:	0025883a 	mov	r18,zero
   1e934:	99400117 	ldw	r5,4(r19)
   1e938:	001dfb40 	call	1dfb4 <_Balloc>
   1e93c:	9a000417 	ldw	r8,16(r19)
   1e940:	a2800417 	ldw	r10,16(r20)
   1e944:	11800504 	addi	r6,r2,20
   1e948:	401290ba 	slli	r9,r8,2
   1e94c:	501490ba 	slli	r10,r10,2
   1e950:	14800315 	stw	r18,12(r2)
   1e954:	8253883a 	add	r9,r16,r9
   1e958:	8a95883a 	add	r10,r17,r10
   1e95c:	0007883a 	mov	r3,zero
   1e960:	00000106 	br	1e968 <__mdiff+0xc4>
   1e964:	3821883a 	mov	r16,r7
   1e968:	81000017 	ldw	r4,0(r16)
   1e96c:	89c00017 	ldw	r7,0(r17)
   1e970:	31800104 	addi	r6,r6,4
   1e974:	217fffcc 	andi	r5,r4,65535
   1e978:	28cb883a 	add	r5,r5,r3
   1e97c:	38ffffcc 	andi	r3,r7,65535
   1e980:	28cbc83a 	sub	r5,r5,r3
   1e984:	380ed43a 	srli	r7,r7,16
   1e988:	2006d43a 	srli	r3,r4,16
   1e98c:	2809d43a 	srai	r4,r5,16
   1e990:	297fffcc 	andi	r5,r5,65535
   1e994:	19c7c83a 	sub	r3,r3,r7
   1e998:	1907883a 	add	r3,r3,r4
   1e99c:	1808943a 	slli	r4,r3,16
   1e9a0:	8c400104 	addi	r17,r17,4
   1e9a4:	81c00104 	addi	r7,r16,4
   1e9a8:	214ab03a 	or	r5,r4,r5
   1e9ac:	317fff15 	stw	r5,-4(r6)
   1e9b0:	1807d43a 	srai	r3,r3,16
   1e9b4:	8abfeb36 	bltu	r17,r10,1e964 <__alt_mem_mcu_subsystem_ram_0+0x77ffe964>
   1e9b8:	3a40152e 	bgeu	r7,r9,1ea10 <__mdiff+0x16c>
   1e9bc:	3015883a 	mov	r10,r6
   1e9c0:	39000017 	ldw	r4,0(r7)
   1e9c4:	52800104 	addi	r10,r10,4
   1e9c8:	39c00104 	addi	r7,r7,4
   1e9cc:	217fffcc 	andi	r5,r4,65535
   1e9d0:	28cb883a 	add	r5,r5,r3
   1e9d4:	2817d43a 	srai	r11,r5,16
   1e9d8:	2006d43a 	srli	r3,r4,16
   1e9dc:	293fffcc 	andi	r4,r5,65535
   1e9e0:	1ac7883a 	add	r3,r3,r11
   1e9e4:	180a943a 	slli	r5,r3,16
   1e9e8:	1807d43a 	srai	r3,r3,16
   1e9ec:	290ab03a 	or	r5,r5,r4
   1e9f0:	517fff15 	stw	r5,-4(r10)
   1e9f4:	3a7ff236 	bltu	r7,r9,1e9c0 <__alt_mem_mcu_subsystem_ram_0+0x77ffe9c0>
   1e9f8:	4c07c83a 	sub	r3,r9,r16
   1e9fc:	18fffec4 	addi	r3,r3,-5
   1ea00:	1806d0ba 	srli	r3,r3,2
   1ea04:	18c00044 	addi	r3,r3,1
   1ea08:	180690ba 	slli	r3,r3,2
   1ea0c:	30cd883a 	add	r6,r6,r3
   1ea10:	31bfff04 	addi	r6,r6,-4
   1ea14:	2800041e 	bne	r5,zero,1ea28 <__mdiff+0x184>
   1ea18:	31bfff04 	addi	r6,r6,-4
   1ea1c:	30c00017 	ldw	r3,0(r6)
   1ea20:	423fffc4 	addi	r8,r8,-1
   1ea24:	183ffc26 	beq	r3,zero,1ea18 <__alt_mem_mcu_subsystem_ram_0+0x77ffea18>
   1ea28:	12000415 	stw	r8,16(r2)
   1ea2c:	dfc00517 	ldw	ra,20(sp)
   1ea30:	dd000417 	ldw	r20,16(sp)
   1ea34:	dcc00317 	ldw	r19,12(sp)
   1ea38:	dc800217 	ldw	r18,8(sp)
   1ea3c:	dc400117 	ldw	r17,4(sp)
   1ea40:	dc000017 	ldw	r16,0(sp)
   1ea44:	dec00604 	addi	sp,sp,24
   1ea48:	f800283a 	ret
   1ea4c:	000b883a 	mov	r5,zero
   1ea50:	001dfb40 	call	1dfb4 <_Balloc>
   1ea54:	00c00044 	movi	r3,1
   1ea58:	10c00415 	stw	r3,16(r2)
   1ea5c:	10000515 	stw	zero,20(r2)
   1ea60:	003ff206 	br	1ea2c <__alt_mem_mcu_subsystem_ram_0+0x77ffea2c>

0001ea64 <__ulp>:
   1ea64:	295ffc2c 	andhi	r5,r5,32752
   1ea68:	00ff3034 	movhi	r3,64704
   1ea6c:	28c7883a 	add	r3,r5,r3
   1ea70:	00c0020e 	bge	zero,r3,1ea7c <__ulp+0x18>
   1ea74:	0005883a 	mov	r2,zero
   1ea78:	f800283a 	ret
   1ea7c:	00c7c83a 	sub	r3,zero,r3
   1ea80:	1807d53a 	srai	r3,r3,20
   1ea84:	18800508 	cmpgei	r2,r3,20
   1ea88:	10000b26 	beq	r2,zero,1eab8 <__ulp+0x54>
   1ea8c:	18bffb04 	addi	r2,r3,-20
   1ea90:	110007c8 	cmpgei	r4,r2,31
   1ea94:	0007883a 	mov	r3,zero
   1ea98:	2000051e 	bne	r4,zero,1eab0 <__ulp+0x4c>
   1ea9c:	010007c4 	movi	r4,31
   1eaa0:	2089c83a 	sub	r4,r4,r2
   1eaa4:	00800044 	movi	r2,1
   1eaa8:	1104983a 	sll	r2,r2,r4
   1eaac:	f800283a 	ret
   1eab0:	00800044 	movi	r2,1
   1eab4:	f800283a 	ret
   1eab8:	01400234 	movhi	r5,8
   1eabc:	28c7d83a 	sra	r3,r5,r3
   1eac0:	0005883a 	mov	r2,zero
   1eac4:	f800283a 	ret

0001eac8 <__b2d>:
   1eac8:	defffa04 	addi	sp,sp,-24
   1eacc:	dc000015 	stw	r16,0(sp)
   1ead0:	24000417 	ldw	r16,16(r4)
   1ead4:	dc800215 	stw	r18,8(sp)
   1ead8:	24800504 	addi	r18,r4,20
   1eadc:	802090ba 	slli	r16,r16,2
   1eae0:	dc400115 	stw	r17,4(sp)
   1eae4:	dd000415 	stw	r20,16(sp)
   1eae8:	9421883a 	add	r16,r18,r16
   1eaec:	847fff17 	ldw	r17,-4(r16)
   1eaf0:	dcc00315 	stw	r19,12(sp)
   1eaf4:	2829883a 	mov	r20,r5
   1eaf8:	8809883a 	mov	r4,r17
   1eafc:	dfc00515 	stw	ra,20(sp)
   1eb00:	001e2a00 	call	1e2a0 <__hi0bits>
   1eb04:	00c00804 	movi	r3,32
   1eb08:	1889c83a 	sub	r4,r3,r2
   1eb0c:	a1000015 	stw	r4,0(r20)
   1eb10:	110002c8 	cmpgei	r4,r2,11
   1eb14:	84ffff04 	addi	r19,r16,-4
   1eb18:	2000121e 	bne	r4,zero,1eb64 <__b2d+0x9c>
   1eb1c:	014002c4 	movi	r5,11
   1eb20:	2889c83a 	sub	r4,r5,r2
   1eb24:	8906d83a 	srl	r3,r17,r4
   1eb28:	18cffc34 	orhi	r3,r3,16368
   1eb2c:	94c0212e 	bgeu	r18,r19,1ebb4 <__b2d+0xec>
   1eb30:	817ffe17 	ldw	r5,-8(r16)
   1eb34:	290ad83a 	srl	r5,r5,r4
   1eb38:	10800544 	addi	r2,r2,21
   1eb3c:	8884983a 	sll	r2,r17,r2
   1eb40:	1144b03a 	or	r2,r2,r5
   1eb44:	dfc00517 	ldw	ra,20(sp)
   1eb48:	dd000417 	ldw	r20,16(sp)
   1eb4c:	dcc00317 	ldw	r19,12(sp)
   1eb50:	dc800217 	ldw	r18,8(sp)
   1eb54:	dc400117 	ldw	r17,4(sp)
   1eb58:	dc000017 	ldw	r16,0(sp)
   1eb5c:	dec00604 	addi	sp,sp,24
   1eb60:	f800283a 	ret
   1eb64:	117ffd44 	addi	r5,r2,-11
   1eb68:	94c00e2e 	bgeu	r18,r19,1eba4 <__b2d+0xdc>
   1eb6c:	80bffe17 	ldw	r2,-8(r16)
   1eb70:	28000e26 	beq	r5,zero,1ebac <__b2d+0xe4>
   1eb74:	1949c83a 	sub	r4,r3,r5
   1eb78:	8946983a 	sll	r3,r17,r5
   1eb7c:	1122d83a 	srl	r17,r2,r4
   1eb80:	81bffe04 	addi	r6,r16,-8
   1eb84:	18cffc34 	orhi	r3,r3,16368
   1eb88:	1c46b03a 	or	r3,r3,r17
   1eb8c:	1144983a 	sll	r2,r2,r5
   1eb90:	91bfec2e 	bgeu	r18,r6,1eb44 <__alt_mem_mcu_subsystem_ram_0+0x77ffeb44>
   1eb94:	817ffd17 	ldw	r5,-12(r16)
   1eb98:	2908d83a 	srl	r4,r5,r4
   1eb9c:	1104b03a 	or	r2,r2,r4
   1eba0:	003fe806 	br	1eb44 <__alt_mem_mcu_subsystem_ram_0+0x77ffeb44>
   1eba4:	2800051e 	bne	r5,zero,1ebbc <__b2d+0xf4>
   1eba8:	0005883a 	mov	r2,zero
   1ebac:	88cffc34 	orhi	r3,r17,16368
   1ebb0:	003fe406 	br	1eb44 <__alt_mem_mcu_subsystem_ram_0+0x77ffeb44>
   1ebb4:	000b883a 	mov	r5,zero
   1ebb8:	003fdf06 	br	1eb38 <__alt_mem_mcu_subsystem_ram_0+0x77ffeb38>
   1ebbc:	8946983a 	sll	r3,r17,r5
   1ebc0:	0005883a 	mov	r2,zero
   1ebc4:	18cffc34 	orhi	r3,r3,16368
   1ebc8:	003fde06 	br	1eb44 <__alt_mem_mcu_subsystem_ram_0+0x77ffeb44>

0001ebcc <__d2b>:
   1ebcc:	defff804 	addi	sp,sp,-32
   1ebd0:	dc400315 	stw	r17,12(sp)
   1ebd4:	3023883a 	mov	r17,r6
   1ebd8:	dd000615 	stw	r20,24(sp)
   1ebdc:	dc000215 	stw	r16,8(sp)
   1ebe0:	2829883a 	mov	r20,r5
   1ebe4:	8820d53a 	srli	r16,r17,20
   1ebe8:	01400044 	movi	r5,1
   1ebec:	dcc00515 	stw	r19,20(sp)
   1ebf0:	dc800415 	stw	r18,16(sp)
   1ebf4:	dfc00715 	stw	ra,28(sp)
   1ebf8:	3825883a 	mov	r18,r7
   1ebfc:	001dfb40 	call	1dfb4 <_Balloc>
   1ec00:	01800434 	movhi	r6,16
   1ec04:	31bfffc4 	addi	r6,r6,-1
   1ec08:	8401ffcc 	andi	r16,r16,2047
   1ec0c:	1027883a 	mov	r19,r2
   1ec10:	89a2703a 	and	r17,r17,r6
   1ec14:	80000126 	beq	r16,zero,1ec1c <__d2b+0x50>
   1ec18:	8c400434 	orhi	r17,r17,16
   1ec1c:	dc400115 	stw	r17,4(sp)
   1ec20:	a0001f26 	beq	r20,zero,1eca0 <__d2b+0xd4>
   1ec24:	d809883a 	mov	r4,sp
   1ec28:	dd000015 	stw	r20,0(sp)
   1ec2c:	001e3040 	call	1e304 <__lo0bits>
   1ec30:	d8c00117 	ldw	r3,4(sp)
   1ec34:	10002b1e 	bne	r2,zero,1ece4 <__d2b+0x118>
   1ec38:	d9000017 	ldw	r4,0(sp)
   1ec3c:	98c00615 	stw	r3,24(r19)
   1ec40:	99000515 	stw	r4,20(r19)
   1ec44:	18003126 	beq	r3,zero,1ed0c <__d2b+0x140>
   1ec48:	04400084 	movi	r17,2
   1ec4c:	9c400415 	stw	r17,16(r19)
   1ec50:	80001c1e 	bne	r16,zero,1ecc4 <__d2b+0xf8>
   1ec54:	880690ba 	slli	r3,r17,2
   1ec58:	10bef384 	addi	r2,r2,-1074
   1ec5c:	90800015 	stw	r2,0(r18)
   1ec60:	98c5883a 	add	r2,r19,r3
   1ec64:	11000417 	ldw	r4,16(r2)
   1ec68:	8822917a 	slli	r17,r17,5
   1ec6c:	001e2a00 	call	1e2a0 <__hi0bits>
   1ec70:	88a3c83a 	sub	r17,r17,r2
   1ec74:	d8800817 	ldw	r2,32(sp)
   1ec78:	14400015 	stw	r17,0(r2)
   1ec7c:	9805883a 	mov	r2,r19
   1ec80:	dfc00717 	ldw	ra,28(sp)
   1ec84:	dd000617 	ldw	r20,24(sp)
   1ec88:	dcc00517 	ldw	r19,20(sp)
   1ec8c:	dc800417 	ldw	r18,16(sp)
   1ec90:	dc400317 	ldw	r17,12(sp)
   1ec94:	dc000217 	ldw	r16,8(sp)
   1ec98:	dec00804 	addi	sp,sp,32
   1ec9c:	f800283a 	ret
   1eca0:	d9000104 	addi	r4,sp,4
   1eca4:	001e3040 	call	1e304 <__lo0bits>
   1eca8:	00c00044 	movi	r3,1
   1ecac:	98c00415 	stw	r3,16(r19)
   1ecb0:	d8c00117 	ldw	r3,4(sp)
   1ecb4:	10800804 	addi	r2,r2,32
   1ecb8:	04400044 	movi	r17,1
   1ecbc:	98c00515 	stw	r3,20(r19)
   1ecc0:	803fe426 	beq	r16,zero,1ec54 <__alt_mem_mcu_subsystem_ram_0+0x77ffec54>
   1ecc4:	00c00d44 	movi	r3,53
   1ecc8:	843ef344 	addi	r16,r16,-1075
   1eccc:	80a1883a 	add	r16,r16,r2
   1ecd0:	1885c83a 	sub	r2,r3,r2
   1ecd4:	d8c00817 	ldw	r3,32(sp)
   1ecd8:	94000015 	stw	r16,0(r18)
   1ecdc:	18800015 	stw	r2,0(r3)
   1ece0:	003fe606 	br	1ec7c <__alt_mem_mcu_subsystem_ram_0+0x77ffec7c>
   1ece4:	01000804 	movi	r4,32
   1ece8:	2089c83a 	sub	r4,r4,r2
   1ecec:	1908983a 	sll	r4,r3,r4
   1ecf0:	d9400017 	ldw	r5,0(sp)
   1ecf4:	1886d83a 	srl	r3,r3,r2
   1ecf8:	2148b03a 	or	r4,r4,r5
   1ecfc:	99000515 	stw	r4,20(r19)
   1ed00:	d8c00115 	stw	r3,4(sp)
   1ed04:	98c00615 	stw	r3,24(r19)
   1ed08:	183fcf1e 	bne	r3,zero,1ec48 <__alt_mem_mcu_subsystem_ram_0+0x77ffec48>
   1ed0c:	04400044 	movi	r17,1
   1ed10:	003fce06 	br	1ec4c <__alt_mem_mcu_subsystem_ram_0+0x77ffec4c>

0001ed14 <__ratio>:
   1ed14:	defff904 	addi	sp,sp,-28
   1ed18:	dc400315 	stw	r17,12(sp)
   1ed1c:	2823883a 	mov	r17,r5
   1ed20:	d80b883a 	mov	r5,sp
   1ed24:	dfc00615 	stw	ra,24(sp)
   1ed28:	dcc00515 	stw	r19,20(sp)
   1ed2c:	dc800415 	stw	r18,16(sp)
   1ed30:	2027883a 	mov	r19,r4
   1ed34:	dc000215 	stw	r16,8(sp)
   1ed38:	001eac80 	call	1eac8 <__b2d>
   1ed3c:	d9400104 	addi	r5,sp,4
   1ed40:	8809883a 	mov	r4,r17
   1ed44:	1025883a 	mov	r18,r2
   1ed48:	1821883a 	mov	r16,r3
   1ed4c:	001eac80 	call	1eac8 <__b2d>
   1ed50:	89400417 	ldw	r5,16(r17)
   1ed54:	99000417 	ldw	r4,16(r19)
   1ed58:	d9800117 	ldw	r6,4(sp)
   1ed5c:	2149c83a 	sub	r4,r4,r5
   1ed60:	d9400017 	ldw	r5,0(sp)
   1ed64:	2008917a 	slli	r4,r4,5
   1ed68:	298bc83a 	sub	r5,r5,r6
   1ed6c:	2149883a 	add	r4,r4,r5
   1ed70:	01000e0e 	bge	zero,r4,1edac <__ratio+0x98>
   1ed74:	2008953a 	slli	r4,r4,20
   1ed78:	2421883a 	add	r16,r4,r16
   1ed7c:	100d883a 	mov	r6,r2
   1ed80:	180f883a 	mov	r7,r3
   1ed84:	9009883a 	mov	r4,r18
   1ed88:	800b883a 	mov	r5,r16
   1ed8c:	00133d00 	call	133d0 <__divdf3>
   1ed90:	dfc00617 	ldw	ra,24(sp)
   1ed94:	dcc00517 	ldw	r19,20(sp)
   1ed98:	dc800417 	ldw	r18,16(sp)
   1ed9c:	dc400317 	ldw	r17,12(sp)
   1eda0:	dc000217 	ldw	r16,8(sp)
   1eda4:	dec00704 	addi	sp,sp,28
   1eda8:	f800283a 	ret
   1edac:	017ffc34 	movhi	r5,65520
   1edb0:	2149383a 	mul	r4,r4,r5
   1edb4:	20c7883a 	add	r3,r4,r3
   1edb8:	003ff006 	br	1ed7c <__alt_mem_mcu_subsystem_ram_0+0x77ffed7c>

0001edbc <_mprec_log10>:
   1edbc:	defffe04 	addi	sp,sp,-8
   1edc0:	dc000015 	stw	r16,0(sp)
   1edc4:	dfc00115 	stw	ra,4(sp)
   1edc8:	20800608 	cmpgei	r2,r4,24
   1edcc:	2021883a 	mov	r16,r4
   1edd0:	10000d26 	beq	r2,zero,1ee08 <_mprec_log10+0x4c>
   1edd4:	0005883a 	mov	r2,zero
   1edd8:	00cffc34 	movhi	r3,16368
   1eddc:	843fffc4 	addi	r16,r16,-1
   1ede0:	000d883a 	mov	r6,zero
   1ede4:	01d00934 	movhi	r7,16420
   1ede8:	1009883a 	mov	r4,r2
   1edec:	180b883a 	mov	r5,r3
   1edf0:	0013d7c0 	call	13d7c <__muldf3>
   1edf4:	803ff91e 	bne	r16,zero,1eddc <__alt_mem_mcu_subsystem_ram_0+0x77ffeddc>
   1edf8:	dfc00117 	ldw	ra,4(sp)
   1edfc:	dc000017 	ldw	r16,0(sp)
   1ee00:	dec00204 	addi	sp,sp,8
   1ee04:	f800283a 	ret
   1ee08:	202090fa 	slli	r16,r4,3
   1ee0c:	008000f4 	movhi	r2,3
   1ee10:	108ed104 	addi	r2,r2,15172
   1ee14:	1421883a 	add	r16,r2,r16
   1ee18:	80800017 	ldw	r2,0(r16)
   1ee1c:	80c00117 	ldw	r3,4(r16)
   1ee20:	dfc00117 	ldw	ra,4(sp)
   1ee24:	dc000017 	ldw	r16,0(sp)
   1ee28:	dec00204 	addi	sp,sp,8
   1ee2c:	f800283a 	ret

0001ee30 <__copybits>:
   1ee30:	29ffffc4 	addi	r7,r5,-1
   1ee34:	380fd17a 	srai	r7,r7,5
   1ee38:	30c00417 	ldw	r3,16(r6)
   1ee3c:	30800504 	addi	r2,r6,20
   1ee40:	39c00044 	addi	r7,r7,1
   1ee44:	180690ba 	slli	r3,r3,2
   1ee48:	380e90ba 	slli	r7,r7,2
   1ee4c:	10c7883a 	add	r3,r2,r3
   1ee50:	21cf883a 	add	r7,r4,r7
   1ee54:	10c00c2e 	bgeu	r2,r3,1ee88 <__copybits+0x58>
   1ee58:	200b883a 	mov	r5,r4
   1ee5c:	10800104 	addi	r2,r2,4
   1ee60:	123fff17 	ldw	r8,-4(r2)
   1ee64:	29400104 	addi	r5,r5,4
   1ee68:	2a3fff15 	stw	r8,-4(r5)
   1ee6c:	10fffb36 	bltu	r2,r3,1ee5c <__alt_mem_mcu_subsystem_ram_0+0x77ffee5c>
   1ee70:	1985c83a 	sub	r2,r3,r6
   1ee74:	10bffac4 	addi	r2,r2,-21
   1ee78:	1004d0ba 	srli	r2,r2,2
   1ee7c:	10800044 	addi	r2,r2,1
   1ee80:	100490ba 	slli	r2,r2,2
   1ee84:	2089883a 	add	r4,r4,r2
   1ee88:	21c0032e 	bgeu	r4,r7,1ee98 <__copybits+0x68>
   1ee8c:	21000104 	addi	r4,r4,4
   1ee90:	203fff15 	stw	zero,-4(r4)
   1ee94:	21fffd36 	bltu	r4,r7,1ee8c <__alt_mem_mcu_subsystem_ram_0+0x77ffee8c>
   1ee98:	f800283a 	ret

0001ee9c <__any_on>:
   1ee9c:	20800417 	ldw	r2,16(r4)
   1eea0:	280dd17a 	srai	r6,r5,5
   1eea4:	21000504 	addi	r4,r4,20
   1eea8:	11800c0e 	bge	r2,r6,1eedc <__any_on+0x40>
   1eeac:	100690ba 	slli	r3,r2,2
   1eeb0:	20c7883a 	add	r3,r4,r3
   1eeb4:	20c0142e 	bgeu	r4,r3,1ef08 <__any_on+0x6c>
   1eeb8:	18bfff17 	ldw	r2,-4(r3)
   1eebc:	18ffff04 	addi	r3,r3,-4
   1eec0:	1000041e 	bne	r2,zero,1eed4 <__any_on+0x38>
   1eec4:	20c00f2e 	bgeu	r4,r3,1ef04 <__any_on+0x68>
   1eec8:	18ffff04 	addi	r3,r3,-4
   1eecc:	19400017 	ldw	r5,0(r3)
   1eed0:	283ffc26 	beq	r5,zero,1eec4 <__alt_mem_mcu_subsystem_ram_0+0x77ffeec4>
   1eed4:	00800044 	movi	r2,1
   1eed8:	f800283a 	ret
   1eedc:	300690ba 	slli	r3,r6,2
   1eee0:	20c7883a 	add	r3,r4,r3
   1eee4:	30bff30e 	bge	r6,r2,1eeb4 <__alt_mem_mcu_subsystem_ram_0+0x77ffeeb4>
   1eee8:	294007cc 	andi	r5,r5,31
   1eeec:	283ff126 	beq	r5,zero,1eeb4 <__alt_mem_mcu_subsystem_ram_0+0x77ffeeb4>
   1eef0:	19800017 	ldw	r6,0(r3)
   1eef4:	3144d83a 	srl	r2,r6,r5
   1eef8:	114a983a 	sll	r5,r2,r5
   1eefc:	317ff51e 	bne	r6,r5,1eed4 <__alt_mem_mcu_subsystem_ram_0+0x77ffeed4>
   1ef00:	003fec06 	br	1eeb4 <__alt_mem_mcu_subsystem_ram_0+0x77ffeeb4>
   1ef04:	f800283a 	ret
   1ef08:	0005883a 	mov	r2,zero
   1ef0c:	f800283a 	ret

0001ef10 <_putc_r>:
   1ef10:	defffc04 	addi	sp,sp,-16
   1ef14:	dc000215 	stw	r16,8(sp)
   1ef18:	dfc00315 	stw	ra,12(sp)
   1ef1c:	2021883a 	mov	r16,r4
   1ef20:	20000226 	beq	r4,zero,1ef2c <_putc_r+0x1c>
   1ef24:	20800e17 	ldw	r2,56(r4)
   1ef28:	10000e26 	beq	r2,zero,1ef64 <_putc_r+0x54>
   1ef2c:	30800217 	ldw	r2,8(r6)
   1ef30:	10bfffc4 	addi	r2,r2,-1
   1ef34:	30800215 	stw	r2,8(r6)
   1ef38:	10001316 	blt	r2,zero,1ef88 <_putc_r+0x78>
   1ef3c:	30800017 	ldw	r2,0(r6)
   1ef40:	11400005 	stb	r5,0(r2)
   1ef44:	30800017 	ldw	r2,0(r6)
   1ef48:	10c00044 	addi	r3,r2,1
   1ef4c:	30c00015 	stw	r3,0(r6)
   1ef50:	10800003 	ldbu	r2,0(r2)
   1ef54:	dfc00317 	ldw	ra,12(sp)
   1ef58:	dc000217 	ldw	r16,8(sp)
   1ef5c:	dec00404 	addi	sp,sp,16
   1ef60:	f800283a 	ret
   1ef64:	d9800115 	stw	r6,4(sp)
   1ef68:	d9400015 	stw	r5,0(sp)
   1ef6c:	001d0240 	call	1d024 <__sinit>
   1ef70:	d9800117 	ldw	r6,4(sp)
   1ef74:	d9400017 	ldw	r5,0(sp)
   1ef78:	30800217 	ldw	r2,8(r6)
   1ef7c:	10bfffc4 	addi	r2,r2,-1
   1ef80:	30800215 	stw	r2,8(r6)
   1ef84:	103fed0e 	bge	r2,zero,1ef3c <__alt_mem_mcu_subsystem_ram_0+0x77ffef3c>
   1ef88:	30c00617 	ldw	r3,24(r6)
   1ef8c:	10c00e16 	blt	r2,r3,1efc8 <_putc_r+0xb8>
   1ef90:	30800017 	ldw	r2,0(r6)
   1ef94:	11400005 	stb	r5,0(r2)
   1ef98:	30c00017 	ldw	r3,0(r6)
   1ef9c:	18800003 	ldbu	r2,0(r3)
   1efa0:	108002a0 	cmpeqi	r2,r2,10
   1efa4:	1000071e 	bne	r2,zero,1efc4 <_putc_r+0xb4>
   1efa8:	18800044 	addi	r2,r3,1
   1efac:	30800015 	stw	r2,0(r6)
   1efb0:	18800003 	ldbu	r2,0(r3)
   1efb4:	dfc00317 	ldw	ra,12(sp)
   1efb8:	dc000217 	ldw	r16,8(sp)
   1efbc:	dec00404 	addi	sp,sp,16
   1efc0:	f800283a 	ret
   1efc4:	01400284 	movi	r5,10
   1efc8:	8009883a 	mov	r4,r16
   1efcc:	dfc00317 	ldw	ra,12(sp)
   1efd0:	dc000217 	ldw	r16,8(sp)
   1efd4:	dec00404 	addi	sp,sp,16
   1efd8:	00237f01 	jmpi	237f0 <__swbuf_r>

0001efdc <putc>:
   1efdc:	defffc04 	addi	sp,sp,-16
   1efe0:	008000f4 	movhi	r2,3
   1efe4:	dc000115 	stw	r16,4(sp)
   1efe8:	141e6617 	ldw	r16,31128(r2)
   1efec:	dc400215 	stw	r17,8(sp)
   1eff0:	dfc00315 	stw	ra,12(sp)
   1eff4:	2023883a 	mov	r17,r4
   1eff8:	80000226 	beq	r16,zero,1f004 <putc+0x28>
   1effc:	80800e17 	ldw	r2,56(r16)
   1f000:	10000f26 	beq	r2,zero,1f040 <putc+0x64>
   1f004:	28800217 	ldw	r2,8(r5)
   1f008:	10bfffc4 	addi	r2,r2,-1
   1f00c:	28800215 	stw	r2,8(r5)
   1f010:	10001316 	blt	r2,zero,1f060 <putc+0x84>
   1f014:	28800017 	ldw	r2,0(r5)
   1f018:	14400005 	stb	r17,0(r2)
   1f01c:	28800017 	ldw	r2,0(r5)
   1f020:	10c00044 	addi	r3,r2,1
   1f024:	28c00015 	stw	r3,0(r5)
   1f028:	10800003 	ldbu	r2,0(r2)
   1f02c:	dfc00317 	ldw	ra,12(sp)
   1f030:	dc400217 	ldw	r17,8(sp)
   1f034:	dc000117 	ldw	r16,4(sp)
   1f038:	dec00404 	addi	sp,sp,16
   1f03c:	f800283a 	ret
   1f040:	8009883a 	mov	r4,r16
   1f044:	d9400015 	stw	r5,0(sp)
   1f048:	001d0240 	call	1d024 <__sinit>
   1f04c:	d9400017 	ldw	r5,0(sp)
   1f050:	28800217 	ldw	r2,8(r5)
   1f054:	10bfffc4 	addi	r2,r2,-1
   1f058:	28800215 	stw	r2,8(r5)
   1f05c:	103fed0e 	bge	r2,zero,1f014 <__alt_mem_mcu_subsystem_ram_0+0x77fff014>
   1f060:	28c00617 	ldw	r3,24(r5)
   1f064:	10c00a16 	blt	r2,r3,1f090 <putc+0xb4>
   1f068:	28800017 	ldw	r2,0(r5)
   1f06c:	14400005 	stb	r17,0(r2)
   1f070:	28c00017 	ldw	r3,0(r5)
   1f074:	18800003 	ldbu	r2,0(r3)
   1f078:	108002a0 	cmpeqi	r2,r2,10
   1f07c:	10000c1e 	bne	r2,zero,1f0b0 <putc+0xd4>
   1f080:	18800044 	addi	r2,r3,1
   1f084:	28800015 	stw	r2,0(r5)
   1f088:	18800003 	ldbu	r2,0(r3)
   1f08c:	003fe706 	br	1f02c <__alt_mem_mcu_subsystem_ram_0+0x77fff02c>
   1f090:	280d883a 	mov	r6,r5
   1f094:	880b883a 	mov	r5,r17
   1f098:	8009883a 	mov	r4,r16
   1f09c:	dfc00317 	ldw	ra,12(sp)
   1f0a0:	dc400217 	ldw	r17,8(sp)
   1f0a4:	dc000117 	ldw	r16,4(sp)
   1f0a8:	dec00404 	addi	sp,sp,16
   1f0ac:	00237f01 	jmpi	237f0 <__swbuf_r>
   1f0b0:	280d883a 	mov	r6,r5
   1f0b4:	01400284 	movi	r5,10
   1f0b8:	003ff706 	br	1f098 <__alt_mem_mcu_subsystem_ram_0+0x77fff098>

0001f0bc <_realloc_r>:
   1f0bc:	defff504 	addi	sp,sp,-44
   1f0c0:	dc400215 	stw	r17,8(sp)
   1f0c4:	dfc00a15 	stw	ra,40(sp)
   1f0c8:	df000915 	stw	fp,36(sp)
   1f0cc:	ddc00815 	stw	r23,32(sp)
   1f0d0:	dd800715 	stw	r22,28(sp)
   1f0d4:	dd400615 	stw	r21,24(sp)
   1f0d8:	dd000515 	stw	r20,20(sp)
   1f0dc:	dcc00415 	stw	r19,16(sp)
   1f0e0:	dc800315 	stw	r18,12(sp)
   1f0e4:	dc000115 	stw	r16,4(sp)
   1f0e8:	3023883a 	mov	r17,r6
   1f0ec:	28008b26 	beq	r5,zero,1f31c <_realloc_r+0x260>
   1f0f0:	2827883a 	mov	r19,r5
   1f0f4:	2025883a 	mov	r18,r4
   1f0f8:	002595c0 	call	2595c <__malloc_lock>
   1f0fc:	98bfff17 	ldw	r2,-4(r19)
   1f100:	894002c4 	addi	r5,r17,11
   1f104:	043fff04 	movi	r16,-4
   1f108:	28c005f0 	cmpltui	r3,r5,23
   1f10c:	9d3ffe04 	addi	r20,r19,-8
   1f110:	1420703a 	and	r16,r2,r16
   1f114:	1800321e 	bne	r3,zero,1f1e0 <_realloc_r+0x124>
   1f118:	05bffe04 	movi	r22,-8
   1f11c:	2dac703a 	and	r22,r5,r22
   1f120:	b009883a 	mov	r4,r22
   1f124:	b0009516 	blt	r22,zero,1f37c <_realloc_r+0x2c0>
   1f128:	b4409436 	bltu	r22,r17,1f37c <_realloc_r+0x2c0>
   1f12c:	a42f883a 	add	r23,r20,r16
   1f130:	8100600e 	bge	r16,r4,1f2b4 <_realloc_r+0x1f8>
   1f134:	070000f4 	movhi	fp,3
   1f138:	e7185c04 	addi	fp,fp,24944
   1f13c:	e1800217 	ldw	r6,8(fp)
   1f140:	35c02a26 	beq	r6,r23,1f1ec <_realloc_r+0x130>
   1f144:	b8c00117 	ldw	r3,4(r23)
   1f148:	017fff84 	movi	r5,-2
   1f14c:	194a703a 	and	r5,r3,r5
   1f150:	b94b883a 	add	r5,r23,r5
   1f154:	29400117 	ldw	r5,4(r5)
   1f158:	2940004c 	andi	r5,r5,1
   1f15c:	28007c26 	beq	r5,zero,1f350 <_realloc_r+0x294>
   1f160:	1080004c 	andi	r2,r2,1
   1f164:	10009526 	beq	r2,zero,1f3bc <_realloc_r+0x300>
   1f168:	880b883a 	mov	r5,r17
   1f16c:	9009883a 	mov	r4,r18
   1f170:	001527c0 	call	1527c <_malloc_r>
   1f174:	1023883a 	mov	r17,r2
   1f178:	10001626 	beq	r2,zero,1f1d4 <_realloc_r+0x118>
   1f17c:	98bfff17 	ldw	r2,-4(r19)
   1f180:	013fff84 	movi	r4,-2
   1f184:	88fffe04 	addi	r3,r17,-8
   1f188:	1104703a 	and	r2,r2,r4
   1f18c:	a085883a 	add	r2,r20,r2
   1f190:	10c0ba26 	beq	r2,r3,1f47c <_realloc_r+0x3c0>
   1f194:	81bfff04 	addi	r6,r16,-4
   1f198:	30800968 	cmpgeui	r2,r6,37
   1f19c:	1000e31e 	bne	r2,zero,1f52c <_realloc_r+0x470>
   1f1a0:	30800530 	cmpltui	r2,r6,20
   1f1a4:	99000017 	ldw	r4,0(r19)
   1f1a8:	10009e26 	beq	r2,zero,1f424 <_realloc_r+0x368>
   1f1ac:	8805883a 	mov	r2,r17
   1f1b0:	9807883a 	mov	r3,r19
   1f1b4:	11000015 	stw	r4,0(r2)
   1f1b8:	19000117 	ldw	r4,4(r3)
   1f1bc:	11000115 	stw	r4,4(r2)
   1f1c0:	18c00217 	ldw	r3,8(r3)
   1f1c4:	10c00215 	stw	r3,8(r2)
   1f1c8:	980b883a 	mov	r5,r19
   1f1cc:	9009883a 	mov	r4,r18
   1f1d0:	001d1880 	call	1d188 <_free_r>
   1f1d4:	9009883a 	mov	r4,r18
   1f1d8:	00259800 	call	25980 <__malloc_unlock>
   1f1dc:	00004206 	br	1f2e8 <_realloc_r+0x22c>
   1f1e0:	05800404 	movi	r22,16
   1f1e4:	01000404 	movi	r4,16
   1f1e8:	003fcf06 	br	1f128 <__alt_mem_mcu_subsystem_ram_0+0x77fff128>
   1f1ec:	30c00117 	ldw	r3,4(r6)
   1f1f0:	01ffff04 	movi	r7,-4
   1f1f4:	b1400404 	addi	r5,r22,16
   1f1f8:	19c6703a 	and	r3,r3,r7
   1f1fc:	80cf883a 	add	r7,r16,r3
   1f200:	3940910e 	bge	r7,r5,1f448 <_realloc_r+0x38c>
   1f204:	1080004c 	andi	r2,r2,1
   1f208:	103fd71e 	bne	r2,zero,1f168 <__alt_mem_mcu_subsystem_ram_0+0x77fff168>
   1f20c:	99fffe17 	ldw	r7,-8(r19)
   1f210:	017fff04 	movi	r5,-4
   1f214:	a1cfc83a 	sub	r7,r20,r7
   1f218:	38800117 	ldw	r2,4(r7)
   1f21c:	1144703a 	and	r2,r2,r5
   1f220:	b8006b26 	beq	r23,zero,1f3d0 <_realloc_r+0x314>
   1f224:	80ab883a 	add	r21,r16,r2
   1f228:	a8eb883a 	add	r21,r21,r3
   1f22c:	35c09926 	beq	r6,r23,1f494 <_realloc_r+0x3d8>
   1f230:	a9006716 	blt	r21,r4,1f3d0 <_realloc_r+0x314>
   1f234:	b8800317 	ldw	r2,12(r23)
   1f238:	b8c00217 	ldw	r3,8(r23)
   1f23c:	81bfff04 	addi	r6,r16,-4
   1f240:	31000968 	cmpgeui	r4,r6,37
   1f244:	18800315 	stw	r2,12(r3)
   1f248:	10c00215 	stw	r3,8(r2)
   1f24c:	38c00217 	ldw	r3,8(r7)
   1f250:	38800317 	ldw	r2,12(r7)
   1f254:	3c400204 	addi	r17,r7,8
   1f258:	3d6f883a 	add	r23,r7,r21
   1f25c:	18800315 	stw	r2,12(r3)
   1f260:	10c00215 	stw	r3,8(r2)
   1f264:	2000661e 	bne	r4,zero,1f400 <_realloc_r+0x344>
   1f268:	30800530 	cmpltui	r2,r6,20
   1f26c:	98c00017 	ldw	r3,0(r19)
   1f270:	1000b21e 	bne	r2,zero,1f53c <_realloc_r+0x480>
   1f274:	38c00215 	stw	r3,8(r7)
   1f278:	98c00117 	ldw	r3,4(r19)
   1f27c:	30800728 	cmpgeui	r2,r6,28
   1f280:	38c00315 	stw	r3,12(r7)
   1f284:	1000b91e 	bne	r2,zero,1f56c <_realloc_r+0x4b0>
   1f288:	98c00217 	ldw	r3,8(r19)
   1f28c:	38800404 	addi	r2,r7,16
   1f290:	9cc00204 	addi	r19,r19,8
   1f294:	10c00015 	stw	r3,0(r2)
   1f298:	98c00117 	ldw	r3,4(r19)
   1f29c:	a821883a 	mov	r16,r21
   1f2a0:	3829883a 	mov	r20,r7
   1f2a4:	10c00115 	stw	r3,4(r2)
   1f2a8:	98c00217 	ldw	r3,8(r19)
   1f2ac:	8827883a 	mov	r19,r17
   1f2b0:	10c00215 	stw	r3,8(r2)
   1f2b4:	a1800117 	ldw	r6,4(r20)
   1f2b8:	8585c83a 	sub	r2,r16,r22
   1f2bc:	10c00430 	cmpltui	r3,r2,16
   1f2c0:	3180004c 	andi	r6,r6,1
   1f2c4:	18003126 	beq	r3,zero,1f38c <_realloc_r+0x2d0>
   1f2c8:	818cb03a 	or	r6,r16,r6
   1f2cc:	a1800115 	stw	r6,4(r20)
   1f2d0:	b8800117 	ldw	r2,4(r23)
   1f2d4:	10800054 	ori	r2,r2,1
   1f2d8:	b8800115 	stw	r2,4(r23)
   1f2dc:	9009883a 	mov	r4,r18
   1f2e0:	00259800 	call	25980 <__malloc_unlock>
   1f2e4:	9823883a 	mov	r17,r19
   1f2e8:	8805883a 	mov	r2,r17
   1f2ec:	dfc00a17 	ldw	ra,40(sp)
   1f2f0:	df000917 	ldw	fp,36(sp)
   1f2f4:	ddc00817 	ldw	r23,32(sp)
   1f2f8:	dd800717 	ldw	r22,28(sp)
   1f2fc:	dd400617 	ldw	r21,24(sp)
   1f300:	dd000517 	ldw	r20,20(sp)
   1f304:	dcc00417 	ldw	r19,16(sp)
   1f308:	dc800317 	ldw	r18,12(sp)
   1f30c:	dc400217 	ldw	r17,8(sp)
   1f310:	dc000117 	ldw	r16,4(sp)
   1f314:	dec00b04 	addi	sp,sp,44
   1f318:	f800283a 	ret
   1f31c:	300b883a 	mov	r5,r6
   1f320:	dfc00a17 	ldw	ra,40(sp)
   1f324:	df000917 	ldw	fp,36(sp)
   1f328:	ddc00817 	ldw	r23,32(sp)
   1f32c:	dd800717 	ldw	r22,28(sp)
   1f330:	dd400617 	ldw	r21,24(sp)
   1f334:	dd000517 	ldw	r20,20(sp)
   1f338:	dcc00417 	ldw	r19,16(sp)
   1f33c:	dc800317 	ldw	r18,12(sp)
   1f340:	dc400217 	ldw	r17,8(sp)
   1f344:	dc000117 	ldw	r16,4(sp)
   1f348:	dec00b04 	addi	sp,sp,44
   1f34c:	001527c1 	jmpi	1527c <_malloc_r>
   1f350:	017fff04 	movi	r5,-4
   1f354:	1946703a 	and	r3,r3,r5
   1f358:	80cb883a 	add	r5,r16,r3
   1f35c:	293fa916 	blt	r5,r4,1f204 <__alt_mem_mcu_subsystem_ram_0+0x77fff204>
   1f360:	b8800317 	ldw	r2,12(r23)
   1f364:	b8c00217 	ldw	r3,8(r23)
   1f368:	2821883a 	mov	r16,r5
   1f36c:	a16f883a 	add	r23,r20,r5
   1f370:	18800315 	stw	r2,12(r3)
   1f374:	10c00215 	stw	r3,8(r2)
   1f378:	003fce06 	br	1f2b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff2b4>
   1f37c:	00800304 	movi	r2,12
   1f380:	90800015 	stw	r2,0(r18)
   1f384:	0023883a 	mov	r17,zero
   1f388:	003fd706 	br	1f2e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff2e8>
   1f38c:	358cb03a 	or	r6,r6,r22
   1f390:	a1800115 	stw	r6,4(r20)
   1f394:	a58b883a 	add	r5,r20,r22
   1f398:	10800054 	ori	r2,r2,1
   1f39c:	28800115 	stw	r2,4(r5)
   1f3a0:	b8800117 	ldw	r2,4(r23)
   1f3a4:	29400204 	addi	r5,r5,8
   1f3a8:	9009883a 	mov	r4,r18
   1f3ac:	10800054 	ori	r2,r2,1
   1f3b0:	b8800115 	stw	r2,4(r23)
   1f3b4:	001d1880 	call	1d188 <_free_r>
   1f3b8:	003fc806 	br	1f2dc <__alt_mem_mcu_subsystem_ram_0+0x77fff2dc>
   1f3bc:	99fffe17 	ldw	r7,-8(r19)
   1f3c0:	00ffff04 	movi	r3,-4
   1f3c4:	a1cfc83a 	sub	r7,r20,r7
   1f3c8:	38800117 	ldw	r2,4(r7)
   1f3cc:	10c4703a 	and	r2,r2,r3
   1f3d0:	383f6526 	beq	r7,zero,1f168 <__alt_mem_mcu_subsystem_ram_0+0x77fff168>
   1f3d4:	80ab883a 	add	r21,r16,r2
   1f3d8:	a93f6316 	blt	r21,r4,1f168 <__alt_mem_mcu_subsystem_ram_0+0x77fff168>
   1f3dc:	38800317 	ldw	r2,12(r7)
   1f3e0:	38c00217 	ldw	r3,8(r7)
   1f3e4:	81bfff04 	addi	r6,r16,-4
   1f3e8:	31000968 	cmpgeui	r4,r6,37
   1f3ec:	18800315 	stw	r2,12(r3)
   1f3f0:	10c00215 	stw	r3,8(r2)
   1f3f4:	3c400204 	addi	r17,r7,8
   1f3f8:	3d6f883a 	add	r23,r7,r21
   1f3fc:	203f9a26 	beq	r4,zero,1f268 <__alt_mem_mcu_subsystem_ram_0+0x77fff268>
   1f400:	980b883a 	mov	r5,r19
   1f404:	8809883a 	mov	r4,r17
   1f408:	d9c00015 	stw	r7,0(sp)
   1f40c:	001de980 	call	1de98 <memmove>
   1f410:	d9c00017 	ldw	r7,0(sp)
   1f414:	8827883a 	mov	r19,r17
   1f418:	a821883a 	mov	r16,r21
   1f41c:	3829883a 	mov	r20,r7
   1f420:	003fa406 	br	1f2b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff2b4>
   1f424:	89000015 	stw	r4,0(r17)
   1f428:	98c00117 	ldw	r3,4(r19)
   1f42c:	30800728 	cmpgeui	r2,r6,28
   1f430:	88c00115 	stw	r3,4(r17)
   1f434:	1000431e 	bne	r2,zero,1f544 <_realloc_r+0x488>
   1f438:	98c00204 	addi	r3,r19,8
   1f43c:	88800204 	addi	r2,r17,8
   1f440:	99000217 	ldw	r4,8(r19)
   1f444:	003f5b06 	br	1f1b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff1b4>
   1f448:	a5a9883a 	add	r20,r20,r22
   1f44c:	3d8fc83a 	sub	r7,r7,r22
   1f450:	e5000215 	stw	r20,8(fp)
   1f454:	39c00054 	ori	r7,r7,1
   1f458:	a1c00115 	stw	r7,4(r20)
   1f45c:	997fff17 	ldw	r5,-4(r19)
   1f460:	9009883a 	mov	r4,r18
   1f464:	9823883a 	mov	r17,r19
   1f468:	2940004c 	andi	r5,r5,1
   1f46c:	2d8ab03a 	or	r5,r5,r22
   1f470:	997fff15 	stw	r5,-4(r19)
   1f474:	00259800 	call	25980 <__malloc_unlock>
   1f478:	003f9b06 	br	1f2e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff2e8>
   1f47c:	88bfff17 	ldw	r2,-4(r17)
   1f480:	00ffff04 	movi	r3,-4
   1f484:	10c4703a 	and	r2,r2,r3
   1f488:	80a1883a 	add	r16,r16,r2
   1f48c:	a42f883a 	add	r23,r20,r16
   1f490:	003f8806 	br	1f2b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff2b4>
   1f494:	b0c00404 	addi	r3,r22,16
   1f498:	a8ffcd16 	blt	r21,r3,1f3d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff3d0>
   1f49c:	38800317 	ldw	r2,12(r7)
   1f4a0:	38c00217 	ldw	r3,8(r7)
   1f4a4:	81bfff04 	addi	r6,r16,-4
   1f4a8:	31000968 	cmpgeui	r4,r6,37
   1f4ac:	18800315 	stw	r2,12(r3)
   1f4b0:	10c00215 	stw	r3,8(r2)
   1f4b4:	3c400204 	addi	r17,r7,8
   1f4b8:	2000471e 	bne	r4,zero,1f5d8 <_realloc_r+0x51c>
   1f4bc:	30800530 	cmpltui	r2,r6,20
   1f4c0:	98c00017 	ldw	r3,0(r19)
   1f4c4:	1000421e 	bne	r2,zero,1f5d0 <_realloc_r+0x514>
   1f4c8:	38c00215 	stw	r3,8(r7)
   1f4cc:	98c00117 	ldw	r3,4(r19)
   1f4d0:	30800728 	cmpgeui	r2,r6,28
   1f4d4:	38c00315 	stw	r3,12(r7)
   1f4d8:	1000451e 	bne	r2,zero,1f5f0 <_realloc_r+0x534>
   1f4dc:	98c00217 	ldw	r3,8(r19)
   1f4e0:	38800404 	addi	r2,r7,16
   1f4e4:	9cc00204 	addi	r19,r19,8
   1f4e8:	10c00015 	stw	r3,0(r2)
   1f4ec:	98c00117 	ldw	r3,4(r19)
   1f4f0:	10c00115 	stw	r3,4(r2)
   1f4f4:	98c00217 	ldw	r3,8(r19)
   1f4f8:	10c00215 	stw	r3,8(r2)
   1f4fc:	3d87883a 	add	r3,r7,r22
   1f500:	ad85c83a 	sub	r2,r21,r22
   1f504:	e0c00215 	stw	r3,8(fp)
   1f508:	10800054 	ori	r2,r2,1
   1f50c:	18800115 	stw	r2,4(r3)
   1f510:	39400117 	ldw	r5,4(r7)
   1f514:	9009883a 	mov	r4,r18
   1f518:	2940004c 	andi	r5,r5,1
   1f51c:	2d8ab03a 	or	r5,r5,r22
   1f520:	39400115 	stw	r5,4(r7)
   1f524:	00259800 	call	25980 <__malloc_unlock>
   1f528:	003f6f06 	br	1f2e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff2e8>
   1f52c:	980b883a 	mov	r5,r19
   1f530:	8809883a 	mov	r4,r17
   1f534:	001de980 	call	1de98 <memmove>
   1f538:	003f2306 	br	1f1c8 <__alt_mem_mcu_subsystem_ram_0+0x77fff1c8>
   1f53c:	8805883a 	mov	r2,r17
   1f540:	003f5406 	br	1f294 <__alt_mem_mcu_subsystem_ram_0+0x77fff294>
   1f544:	98800217 	ldw	r2,8(r19)
   1f548:	31800920 	cmpeqi	r6,r6,36
   1f54c:	88800215 	stw	r2,8(r17)
   1f550:	98800317 	ldw	r2,12(r19)
   1f554:	88800315 	stw	r2,12(r17)
   1f558:	30000e1e 	bne	r6,zero,1f594 <_realloc_r+0x4d8>
   1f55c:	98c00404 	addi	r3,r19,16
   1f560:	88800404 	addi	r2,r17,16
   1f564:	99000417 	ldw	r4,16(r19)
   1f568:	003f1206 	br	1f1b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff1b4>
   1f56c:	98800217 	ldw	r2,8(r19)
   1f570:	31800920 	cmpeqi	r6,r6,36
   1f574:	38800415 	stw	r2,16(r7)
   1f578:	98800317 	ldw	r2,12(r19)
   1f57c:	38800515 	stw	r2,20(r7)
   1f580:	98c00417 	ldw	r3,16(r19)
   1f584:	30000b1e 	bne	r6,zero,1f5b4 <_realloc_r+0x4f8>
   1f588:	38800604 	addi	r2,r7,24
   1f58c:	9cc00404 	addi	r19,r19,16
   1f590:	003f4006 	br	1f294 <__alt_mem_mcu_subsystem_ram_0+0x77fff294>
   1f594:	99000417 	ldw	r4,16(r19)
   1f598:	98c00604 	addi	r3,r19,24
   1f59c:	88800604 	addi	r2,r17,24
   1f5a0:	89000415 	stw	r4,16(r17)
   1f5a4:	99000517 	ldw	r4,20(r19)
   1f5a8:	89000515 	stw	r4,20(r17)
   1f5ac:	99000617 	ldw	r4,24(r19)
   1f5b0:	003f0006 	br	1f1b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff1b4>
   1f5b4:	9cc00604 	addi	r19,r19,24
   1f5b8:	38c00615 	stw	r3,24(r7)
   1f5bc:	98ffff17 	ldw	r3,-4(r19)
   1f5c0:	38800804 	addi	r2,r7,32
   1f5c4:	38c00715 	stw	r3,28(r7)
   1f5c8:	98c00017 	ldw	r3,0(r19)
   1f5cc:	003f3106 	br	1f294 <__alt_mem_mcu_subsystem_ram_0+0x77fff294>
   1f5d0:	8805883a 	mov	r2,r17
   1f5d4:	003fc406 	br	1f4e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff4e8>
   1f5d8:	980b883a 	mov	r5,r19
   1f5dc:	8809883a 	mov	r4,r17
   1f5e0:	d9c00015 	stw	r7,0(sp)
   1f5e4:	001de980 	call	1de98 <memmove>
   1f5e8:	d9c00017 	ldw	r7,0(sp)
   1f5ec:	003fc306 	br	1f4fc <__alt_mem_mcu_subsystem_ram_0+0x77fff4fc>
   1f5f0:	98800217 	ldw	r2,8(r19)
   1f5f4:	31800920 	cmpeqi	r6,r6,36
   1f5f8:	38800415 	stw	r2,16(r7)
   1f5fc:	98800317 	ldw	r2,12(r19)
   1f600:	38800515 	stw	r2,20(r7)
   1f604:	98c00417 	ldw	r3,16(r19)
   1f608:	3000031e 	bne	r6,zero,1f618 <_realloc_r+0x55c>
   1f60c:	38800604 	addi	r2,r7,24
   1f610:	9cc00404 	addi	r19,r19,16
   1f614:	003fb406 	br	1f4e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff4e8>
   1f618:	9cc00604 	addi	r19,r19,24
   1f61c:	38c00615 	stw	r3,24(r7)
   1f620:	98ffff17 	ldw	r3,-4(r19)
   1f624:	38800804 	addi	r2,r7,32
   1f628:	38c00715 	stw	r3,28(r7)
   1f62c:	98c00017 	ldw	r3,0(r19)
   1f630:	003fad06 	br	1f4e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff4e8>

0001f634 <lflush>:
   1f634:	2080030b 	ldhu	r2,12(r4)
   1f638:	1080024c 	andi	r2,r2,9
   1f63c:	10800258 	cmpnei	r2,r2,9
   1f640:	10000226 	beq	r2,zero,1f64c <lflush+0x18>
   1f644:	0005883a 	mov	r2,zero
   1f648:	f800283a 	ret
   1f64c:	001cce41 	jmpi	1cce4 <fflush>

0001f650 <__srefill_r>:
   1f650:	defffc04 	addi	sp,sp,-16
   1f654:	dc400115 	stw	r17,4(sp)
   1f658:	dc000015 	stw	r16,0(sp)
   1f65c:	dfc00315 	stw	ra,12(sp)
   1f660:	dc800215 	stw	r18,8(sp)
   1f664:	2023883a 	mov	r17,r4
   1f668:	2821883a 	mov	r16,r5
   1f66c:	20000226 	beq	r4,zero,1f678 <__srefill_r+0x28>
   1f670:	20800e17 	ldw	r2,56(r4)
   1f674:	10003926 	beq	r2,zero,1f75c <__srefill_r+0x10c>
   1f678:	80c0030b 	ldhu	r3,12(r16)
   1f67c:	1908000c 	andi	r4,r3,8192
   1f680:	1805883a 	mov	r2,r3
   1f684:	2000071e 	bne	r4,zero,1f6a4 <__srefill_r+0x54>
   1f688:	81001917 	ldw	r4,100(r16)
   1f68c:	18880014 	ori	r2,r3,8192
   1f690:	00f7ffc4 	movi	r3,-8193
   1f694:	20c8703a 	and	r4,r4,r3
   1f698:	8080030d 	sth	r2,12(r16)
   1f69c:	1007883a 	mov	r3,r2
   1f6a0:	81001915 	stw	r4,100(r16)
   1f6a4:	80000115 	stw	zero,4(r16)
   1f6a8:	1100080c 	andi	r4,r2,32
   1f6ac:	2000311e 	bne	r4,zero,1f774 <__srefill_r+0x124>
   1f6b0:	1100010c 	andi	r4,r2,4
   1f6b4:	20001b1e 	bne	r4,zero,1f724 <__srefill_r+0xd4>
   1f6b8:	1100040c 	andi	r4,r2,16
   1f6bc:	20005026 	beq	r4,zero,1f800 <__srefill_r+0x1b0>
   1f6c0:	1080020c 	andi	r2,r2,8
   1f6c4:	1000411e 	bne	r2,zero,1f7cc <__srefill_r+0x17c>
   1f6c8:	18c00114 	ori	r3,r3,4
   1f6cc:	80c0030d 	sth	r3,12(r16)
   1f6d0:	80800417 	ldw	r2,16(r16)
   1f6d4:	10004626 	beq	r2,zero,1f7f0 <__srefill_r+0x1a0>
   1f6d8:	8480030b 	ldhu	r18,12(r16)
   1f6dc:	908000cc 	andi	r2,r18,3
   1f6e0:	1000261e 	bne	r2,zero,1f77c <__srefill_r+0x12c>
   1f6e4:	81800417 	ldw	r6,16(r16)
   1f6e8:	80800817 	ldw	r2,32(r16)
   1f6ec:	81c00517 	ldw	r7,20(r16)
   1f6f0:	81400717 	ldw	r5,28(r16)
   1f6f4:	81800015 	stw	r6,0(r16)
   1f6f8:	8809883a 	mov	r4,r17
   1f6fc:	103ee83a 	callr	r2
   1f700:	80800115 	stw	r2,4(r16)
   1f704:	0080170e 	bge	zero,r2,1f764 <__srefill_r+0x114>
   1f708:	0005883a 	mov	r2,zero
   1f70c:	dfc00317 	ldw	ra,12(sp)
   1f710:	dc800217 	ldw	r18,8(sp)
   1f714:	dc400117 	ldw	r17,4(sp)
   1f718:	dc000017 	ldw	r16,0(sp)
   1f71c:	dec00404 	addi	sp,sp,16
   1f720:	f800283a 	ret
   1f724:	81400c17 	ldw	r5,48(r16)
   1f728:	283fe926 	beq	r5,zero,1f6d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff6d0>
   1f72c:	80801004 	addi	r2,r16,64
   1f730:	28800226 	beq	r5,r2,1f73c <__srefill_r+0xec>
   1f734:	8809883a 	mov	r4,r17
   1f738:	001d1880 	call	1d188 <_free_r>
   1f73c:	80800f17 	ldw	r2,60(r16)
   1f740:	80000c15 	stw	zero,48(r16)
   1f744:	80800115 	stw	r2,4(r16)
   1f748:	103fe126 	beq	r2,zero,1f6d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff6d0>
   1f74c:	80c00e17 	ldw	r3,56(r16)
   1f750:	0005883a 	mov	r2,zero
   1f754:	80c00015 	stw	r3,0(r16)
   1f758:	003fec06 	br	1f70c <__alt_mem_mcu_subsystem_ram_0+0x77fff70c>
   1f75c:	001d0240 	call	1d024 <__sinit>
   1f760:	003fc506 	br	1f678 <__alt_mem_mcu_subsystem_ram_0+0x77fff678>
   1f764:	80c0030b 	ldhu	r3,12(r16)
   1f768:	1000131e 	bne	r2,zero,1f7b8 <__srefill_r+0x168>
   1f76c:	18c00814 	ori	r3,r3,32
   1f770:	80c0030d 	sth	r3,12(r16)
   1f774:	00bfffc4 	movi	r2,-1
   1f778:	003fe406 	br	1f70c <__alt_mem_mcu_subsystem_ram_0+0x77fff70c>
   1f77c:	008000f4 	movhi	r2,3
   1f780:	111e6517 	ldw	r4,31124(r2)
   1f784:	014000b4 	movhi	r5,2
   1f788:	00800044 	movi	r2,1
   1f78c:	8080030d 	sth	r2,12(r16)
   1f790:	297d8d04 	addi	r5,r5,-2508
   1f794:	001d9180 	call	1d918 <_fwalk>
   1f798:	9080024c 	andi	r2,r18,9
   1f79c:	8480030d 	sth	r18,12(r16)
   1f7a0:	10800258 	cmpnei	r2,r2,9
   1f7a4:	103fcf1e 	bne	r2,zero,1f6e4 <__alt_mem_mcu_subsystem_ram_0+0x77fff6e4>
   1f7a8:	800b883a 	mov	r5,r16
   1f7ac:	8809883a 	mov	r4,r17
   1f7b0:	001ca640 	call	1ca64 <__sflush_r>
   1f7b4:	003fcb06 	br	1f6e4 <__alt_mem_mcu_subsystem_ram_0+0x77fff6e4>
   1f7b8:	18c01014 	ori	r3,r3,64
   1f7bc:	80000115 	stw	zero,4(r16)
   1f7c0:	80c0030d 	sth	r3,12(r16)
   1f7c4:	00bfffc4 	movi	r2,-1
   1f7c8:	003fd006 	br	1f70c <__alt_mem_mcu_subsystem_ram_0+0x77fff70c>
   1f7cc:	800b883a 	mov	r5,r16
   1f7d0:	8809883a 	mov	r4,r17
   1f7d4:	001cc840 	call	1cc84 <_fflush_r>
   1f7d8:	103fe61e 	bne	r2,zero,1f774 <__alt_mem_mcu_subsystem_ram_0+0x77fff774>
   1f7dc:	80c0030b 	ldhu	r3,12(r16)
   1f7e0:	80000215 	stw	zero,8(r16)
   1f7e4:	80000615 	stw	zero,24(r16)
   1f7e8:	18fffdcc 	andi	r3,r3,65527
   1f7ec:	003fb606 	br	1f6c8 <__alt_mem_mcu_subsystem_ram_0+0x77fff6c8>
   1f7f0:	800b883a 	mov	r5,r16
   1f7f4:	8809883a 	mov	r4,r17
   1f7f8:	001dc740 	call	1dc74 <__smakebuf_r>
   1f7fc:	003fb606 	br	1f6d8 <__alt_mem_mcu_subsystem_ram_0+0x77fff6d8>
   1f800:	00800244 	movi	r2,9
   1f804:	88800015 	stw	r2,0(r17)
   1f808:	18c01014 	ori	r3,r3,64
   1f80c:	80c0030d 	sth	r3,12(r16)
   1f810:	00bfffc4 	movi	r2,-1
   1f814:	003fbd06 	br	1f70c <__alt_mem_mcu_subsystem_ram_0+0x77fff70c>

0001f818 <siscanf>:
   1f818:	deffe204 	addi	sp,sp,-120
   1f81c:	dc001a15 	stw	r16,104(sp)
   1f820:	2821883a 	mov	r16,r5
   1f824:	dfc01b15 	stw	ra,108(sp)
   1f828:	d9801c15 	stw	r6,112(sp)
   1f82c:	d9c01d15 	stw	r7,116(sp)
   1f830:	00c08104 	movi	r3,516
   1f834:	d8c0030d 	sth	r3,12(sp)
   1f838:	d9000015 	stw	r4,0(sp)
   1f83c:	d9000415 	stw	r4,16(sp)
   1f840:	001676c0 	call	1676c <strlen>
   1f844:	00c000f4 	movhi	r3,3
   1f848:	191e6617 	ldw	r4,31128(r3)
   1f84c:	00c000b4 	movhi	r3,2
   1f850:	18fe5704 	addi	r3,r3,-1700
   1f854:	d8800115 	stw	r2,4(sp)
   1f858:	d8800515 	stw	r2,20(sp)
   1f85c:	d9c01c04 	addi	r7,sp,112
   1f860:	800d883a 	mov	r6,r16
   1f864:	d80b883a 	mov	r5,sp
   1f868:	00bfffc4 	movi	r2,-1
   1f86c:	d8c00815 	stw	r3,32(sp)
   1f870:	d8000c15 	stw	zero,48(sp)
   1f874:	d8001115 	stw	zero,68(sp)
   1f878:	d880038d 	sth	r2,14(sp)
   1f87c:	00212400 	call	21240 <__ssvfiscanf_r>
   1f880:	dfc01b17 	ldw	ra,108(sp)
   1f884:	dc001a17 	ldw	r16,104(sp)
   1f888:	dec01e04 	addi	sp,sp,120
   1f88c:	f800283a 	ret

0001f890 <_siscanf_r>:
   1f890:	deffe204 	addi	sp,sp,-120
   1f894:	dc001b15 	stw	r16,108(sp)
   1f898:	2021883a 	mov	r16,r4
   1f89c:	dfc01c15 	stw	ra,112(sp)
   1f8a0:	d9800015 	stw	r6,0(sp)
   1f8a4:	d9c01d15 	stw	r7,116(sp)
   1f8a8:	00808104 	movi	r2,516
   1f8ac:	2809883a 	mov	r4,r5
   1f8b0:	d9400115 	stw	r5,4(sp)
   1f8b4:	d9400515 	stw	r5,20(sp)
   1f8b8:	d880040d 	sth	r2,16(sp)
   1f8bc:	001676c0 	call	1676c <strlen>
   1f8c0:	d9800017 	ldw	r6,0(sp)
   1f8c4:	00c000b4 	movhi	r3,2
   1f8c8:	18fe5704 	addi	r3,r3,-1700
   1f8cc:	d8800215 	stw	r2,8(sp)
   1f8d0:	d8800615 	stw	r2,24(sp)
   1f8d4:	d9c01d04 	addi	r7,sp,116
   1f8d8:	d9400104 	addi	r5,sp,4
   1f8dc:	8009883a 	mov	r4,r16
   1f8e0:	00bfffc4 	movi	r2,-1
   1f8e4:	d8c00915 	stw	r3,36(sp)
   1f8e8:	d8000d15 	stw	zero,52(sp)
   1f8ec:	d8001215 	stw	zero,72(sp)
   1f8f0:	d880048d 	sth	r2,18(sp)
   1f8f4:	00212400 	call	21240 <__ssvfiscanf_r>
   1f8f8:	dfc01c17 	ldw	ra,112(sp)
   1f8fc:	dc001b17 	ldw	r16,108(sp)
   1f900:	dec01e04 	addi	sp,sp,120
   1f904:	f800283a 	ret

0001f908 <__sread>:
   1f908:	defffe04 	addi	sp,sp,-8
   1f90c:	dc000015 	stw	r16,0(sp)
   1f910:	2821883a 	mov	r16,r5
   1f914:	2940038f 	ldh	r5,14(r5)
   1f918:	dfc00115 	stw	ra,4(sp)
   1f91c:	0023fd00 	call	23fd0 <_read_r>
   1f920:	10000716 	blt	r2,zero,1f940 <__sread+0x38>
   1f924:	80c01417 	ldw	r3,80(r16)
   1f928:	1887883a 	add	r3,r3,r2
   1f92c:	80c01415 	stw	r3,80(r16)
   1f930:	dfc00117 	ldw	ra,4(sp)
   1f934:	dc000017 	ldw	r16,0(sp)
   1f938:	dec00204 	addi	sp,sp,8
   1f93c:	f800283a 	ret
   1f940:	80c0030b 	ldhu	r3,12(r16)
   1f944:	18fbffcc 	andi	r3,r3,61439
   1f948:	80c0030d 	sth	r3,12(r16)
   1f94c:	dfc00117 	ldw	ra,4(sp)
   1f950:	dc000017 	ldw	r16,0(sp)
   1f954:	dec00204 	addi	sp,sp,8
   1f958:	f800283a 	ret

0001f95c <__seofread>:
   1f95c:	0005883a 	mov	r2,zero
   1f960:	f800283a 	ret

0001f964 <__swrite>:
   1f964:	2880030b 	ldhu	r2,12(r5)
   1f968:	defffb04 	addi	sp,sp,-20
   1f96c:	dcc00315 	stw	r19,12(sp)
   1f970:	dc800215 	stw	r18,8(sp)
   1f974:	dc400115 	stw	r17,4(sp)
   1f978:	dc000015 	stw	r16,0(sp)
   1f97c:	dfc00415 	stw	ra,16(sp)
   1f980:	10c0400c 	andi	r3,r2,256
   1f984:	2821883a 	mov	r16,r5
   1f988:	2023883a 	mov	r17,r4
   1f98c:	3025883a 	mov	r18,r6
   1f990:	3827883a 	mov	r19,r7
   1f994:	2940038f 	ldh	r5,14(r5)
   1f998:	18000526 	beq	r3,zero,1f9b0 <__swrite+0x4c>
   1f99c:	01c00084 	movi	r7,2
   1f9a0:	000d883a 	mov	r6,zero
   1f9a4:	0023e040 	call	23e04 <_lseek_r>
   1f9a8:	8080030b 	ldhu	r2,12(r16)
   1f9ac:	8140038f 	ldh	r5,14(r16)
   1f9b0:	10bbffcc 	andi	r2,r2,61439
   1f9b4:	980f883a 	mov	r7,r19
   1f9b8:	900d883a 	mov	r6,r18
   1f9bc:	8809883a 	mov	r4,r17
   1f9c0:	8080030d 	sth	r2,12(r16)
   1f9c4:	dfc00417 	ldw	ra,16(sp)
   1f9c8:	dcc00317 	ldw	r19,12(sp)
   1f9cc:	dc800217 	ldw	r18,8(sp)
   1f9d0:	dc400117 	ldw	r17,4(sp)
   1f9d4:	dc000017 	ldw	r16,0(sp)
   1f9d8:	dec00504 	addi	sp,sp,20
   1f9dc:	002394c1 	jmpi	2394c <_write_r>

0001f9e0 <__sseek>:
   1f9e0:	defffe04 	addi	sp,sp,-8
   1f9e4:	dc000015 	stw	r16,0(sp)
   1f9e8:	2821883a 	mov	r16,r5
   1f9ec:	2940038f 	ldh	r5,14(r5)
   1f9f0:	dfc00115 	stw	ra,4(sp)
   1f9f4:	0023e040 	call	23e04 <_lseek_r>
   1f9f8:	10ffffd8 	cmpnei	r3,r2,-1
   1f9fc:	18000826 	beq	r3,zero,1fa20 <__sseek+0x40>
   1fa00:	80c0030b 	ldhu	r3,12(r16)
   1fa04:	80801415 	stw	r2,80(r16)
   1fa08:	18c40014 	ori	r3,r3,4096
   1fa0c:	80c0030d 	sth	r3,12(r16)
   1fa10:	dfc00117 	ldw	ra,4(sp)
   1fa14:	dc000017 	ldw	r16,0(sp)
   1fa18:	dec00204 	addi	sp,sp,8
   1fa1c:	f800283a 	ret
   1fa20:	80c0030b 	ldhu	r3,12(r16)
   1fa24:	18fbffcc 	andi	r3,r3,61439
   1fa28:	80c0030d 	sth	r3,12(r16)
   1fa2c:	dfc00117 	ldw	ra,4(sp)
   1fa30:	dc000017 	ldw	r16,0(sp)
   1fa34:	dec00204 	addi	sp,sp,8
   1fa38:	f800283a 	ret

0001fa3c <__sclose>:
   1fa3c:	2940038f 	ldh	r5,14(r5)
   1fa40:	00239b01 	jmpi	239b0 <_close_r>

0001fa44 <strncmp>:
   1fa44:	30002226 	beq	r6,zero,1fad0 <strncmp+0x8c>
   1fa48:	2144b03a 	or	r2,r4,r5
   1fa4c:	108000cc 	andi	r2,r2,3
   1fa50:	1000251e 	bne	r2,zero,1fae8 <strncmp+0xa4>
   1fa54:	30800130 	cmpltui	r2,r6,4
   1fa58:	1000231e 	bne	r2,zero,1fae8 <strncmp+0xa4>
   1fa5c:	20800017 	ldw	r2,0(r4)
   1fa60:	28c00017 	ldw	r3,0(r5)
   1fa64:	10c0201e 	bne	r2,r3,1fae8 <strncmp+0xa4>
   1fa68:	31bfff04 	addi	r6,r6,-4
   1fa6c:	30001826 	beq	r6,zero,1fad0 <strncmp+0x8c>
   1fa70:	02bfbff4 	movhi	r10,65279
   1fa74:	52bfbfc4 	addi	r10,r10,-257
   1fa78:	1287883a 	add	r3,r2,r10
   1fa7c:	02602074 	movhi	r9,32897
   1fa80:	0084303a 	nor	r2,zero,r2
   1fa84:	1884703a 	and	r2,r3,r2
   1fa88:	4a602004 	addi	r9,r9,-32640
   1fa8c:	1244703a 	and	r2,r2,r9
   1fa90:	10000226 	beq	r2,zero,1fa9c <strncmp+0x58>
   1fa94:	00000e06 	br	1fad0 <strncmp+0x8c>
   1fa98:	10000d1e 	bne	r2,zero,1fad0 <strncmp+0x8c>
   1fa9c:	30800130 	cmpltui	r2,r6,4
   1faa0:	21000104 	addi	r4,r4,4
   1faa4:	29400104 	addi	r5,r5,4
   1faa8:	10000f1e 	bne	r2,zero,1fae8 <strncmp+0xa4>
   1faac:	20c00017 	ldw	r3,0(r4)
   1fab0:	29c00017 	ldw	r7,0(r5)
   1fab4:	1a85883a 	add	r2,r3,r10
   1fab8:	00d0303a 	nor	r8,zero,r3
   1fabc:	1204703a 	and	r2,r2,r8
   1fac0:	1244703a 	and	r2,r2,r9
   1fac4:	19c0081e 	bne	r3,r7,1fae8 <strncmp+0xa4>
   1fac8:	31bfff04 	addi	r6,r6,-4
   1facc:	303ff21e 	bne	r6,zero,1fa98 <__alt_mem_mcu_subsystem_ram_0+0x77fffa98>
   1fad0:	0005883a 	mov	r2,zero
   1fad4:	f800283a 	ret
   1fad8:	303ffd26 	beq	r6,zero,1fad0 <__alt_mem_mcu_subsystem_ram_0+0x77fffad0>
   1fadc:	103ffc26 	beq	r2,zero,1fad0 <__alt_mem_mcu_subsystem_ram_0+0x77fffad0>
   1fae0:	21000044 	addi	r4,r4,1
   1fae4:	29400044 	addi	r5,r5,1
   1fae8:	20800007 	ldb	r2,0(r4)
   1faec:	28c00007 	ldb	r3,0(r5)
   1faf0:	31bfffc4 	addi	r6,r6,-1
   1faf4:	10fff826 	beq	r2,r3,1fad8 <__alt_mem_mcu_subsystem_ram_0+0x77fffad8>
   1faf8:	20800003 	ldbu	r2,0(r4)
   1fafc:	28c00003 	ldbu	r3,0(r5)
   1fb00:	10c5c83a 	sub	r2,r2,r3
   1fb04:	f800283a 	ret

0001fb08 <_strtoul_l.isra.0>:
   1fb08:	defff704 	addi	sp,sp,-36
   1fb0c:	ddc00715 	stw	r23,28(sp)
   1fb10:	dd800615 	stw	r22,24(sp)
   1fb14:	dd400515 	stw	r21,20(sp)
   1fb18:	dd000415 	stw	r20,16(sp)
   1fb1c:	dcc00315 	stw	r19,12(sp)
   1fb20:	dc800215 	stw	r18,8(sp)
   1fb24:	dfc00815 	stw	ra,32(sp)
   1fb28:	dc400115 	stw	r17,4(sp)
   1fb2c:	dc000015 	stw	r16,0(sp)
   1fb30:	2825883a 	mov	r18,r5
   1fb34:	2029883a 	mov	r20,r4
   1fb38:	3027883a 	mov	r19,r6
   1fb3c:	382b883a 	mov	r21,r7
   1fb40:	dd800917 	ldw	r22,36(sp)
   1fb44:	282f883a 	mov	r23,r5
   1fb48:	00000106 	br	1fb50 <_strtoul_l.isra.0+0x48>
   1fb4c:	882f883a 	mov	r23,r17
   1fb50:	bc400044 	addi	r17,r23,1
   1fb54:	8c3fffc3 	ldbu	r16,-1(r17)
   1fb58:	b009883a 	mov	r4,r22
   1fb5c:	00152200 	call	15220 <__locale_ctype_ptr_l>
   1fb60:	84003fcc 	andi	r16,r16,255
   1fb64:	1405883a 	add	r2,r2,r16
   1fb68:	10800043 	ldbu	r2,1(r2)
   1fb6c:	1080020c 	andi	r2,r2,8
   1fb70:	103ff61e 	bne	r2,zero,1fb4c <__alt_mem_mcu_subsystem_ram_0+0x77fffb4c>
   1fb74:	80800b58 	cmpnei	r2,r16,45
   1fb78:	10004d26 	beq	r2,zero,1fcb0 <_strtoul_l.isra.0+0x1a8>
   1fb7c:	80800ae0 	cmpeqi	r2,r16,43
   1fb80:	1000281e 	bne	r2,zero,1fc24 <_strtoul_l.isra.0+0x11c>
   1fb84:	002f883a 	mov	r23,zero
   1fb88:	a8000c26 	beq	r21,zero,1fbbc <_strtoul_l.isra.0+0xb4>
   1fb8c:	a8800420 	cmpeqi	r2,r21,16
   1fb90:	10004b1e 	bne	r2,zero,1fcc0 <_strtoul_l.isra.0+0x1b8>
   1fb94:	013fffc4 	movi	r4,-1
   1fb98:	a80b883a 	mov	r5,r21
   1fb9c:	0012a540 	call	12a54 <__udivsi3>
   1fba0:	a80b883a 	mov	r5,r21
   1fba4:	013fffc4 	movi	r4,-1
   1fba8:	102d883a 	mov	r22,r2
   1fbac:	0012ab80 	call	12ab8 <__umodsi3>
   1fbb0:	100f883a 	mov	r7,r2
   1fbb4:	a80d883a 	mov	r6,r21
   1fbb8:	00000706 	br	1fbd8 <_strtoul_l.isra.0+0xd0>
   1fbbc:	80800c20 	cmpeqi	r2,r16,48
   1fbc0:	1000461e 	bne	r2,zero,1fcdc <_strtoul_l.isra.0+0x1d4>
   1fbc4:	058666b4 	movhi	r22,6554
   1fbc8:	01c00144 	movi	r7,5
   1fbcc:	b5a66644 	addi	r22,r22,-26215
   1fbd0:	01800284 	movi	r6,10
   1fbd4:	05400284 	movi	r21,10
   1fbd8:	0009883a 	mov	r4,zero
   1fbdc:	0005883a 	mov	r2,zero
   1fbe0:	80fff404 	addi	r3,r16,-48
   1fbe4:	194002a8 	cmpgeui	r5,r3,10
   1fbe8:	28000426 	beq	r5,zero,1fbfc <_strtoul_l.isra.0+0xf4>
   1fbec:	80ffefc4 	addi	r3,r16,-65
   1fbf0:	18c006a8 	cmpgeui	r3,r3,26
   1fbf4:	1800121e 	bne	r3,zero,1fc40 <_strtoul_l.isra.0+0x138>
   1fbf8:	80fff244 	addi	r3,r16,-55
   1fbfc:	1d40150e 	bge	r3,r21,1fc54 <_strtoul_l.isra.0+0x14c>
   1fc00:	20000d16 	blt	r4,zero,1fc38 <_strtoul_l.isra.0+0x130>
   1fc04:	b0800c36 	bltu	r22,r2,1fc38 <_strtoul_l.isra.0+0x130>
   1fc08:	15800a26 	beq	r2,r22,1fc34 <_strtoul_l.isra.0+0x12c>
   1fc0c:	1185383a 	mul	r2,r2,r6
   1fc10:	01000044 	movi	r4,1
   1fc14:	1885883a 	add	r2,r3,r2
   1fc18:	8c400044 	addi	r17,r17,1
   1fc1c:	8c3fffc3 	ldbu	r16,-1(r17)
   1fc20:	003fef06 	br	1fbe0 <__alt_mem_mcu_subsystem_ram_0+0x77fffbe0>
   1fc24:	bc000043 	ldbu	r16,1(r23)
   1fc28:	bc400084 	addi	r17,r23,2
   1fc2c:	002f883a 	mov	r23,zero
   1fc30:	003fd506 	br	1fb88 <__alt_mem_mcu_subsystem_ram_0+0x77fffb88>
   1fc34:	38fff50e 	bge	r7,r3,1fc0c <__alt_mem_mcu_subsystem_ram_0+0x77fffc0c>
   1fc38:	013fffc4 	movi	r4,-1
   1fc3c:	003ff606 	br	1fc18 <__alt_mem_mcu_subsystem_ram_0+0x77fffc18>
   1fc40:	80ffe7c4 	addi	r3,r16,-97
   1fc44:	18c006a8 	cmpgeui	r3,r3,26
   1fc48:	1800021e 	bne	r3,zero,1fc54 <_strtoul_l.isra.0+0x14c>
   1fc4c:	80ffea44 	addi	r3,r16,-87
   1fc50:	1d7feb16 	blt	r3,r21,1fc00 <__alt_mem_mcu_subsystem_ram_0+0x77fffc00>
   1fc54:	20001016 	blt	r4,zero,1fc98 <_strtoul_l.isra.0+0x190>
   1fc58:	b8000126 	beq	r23,zero,1fc60 <_strtoul_l.isra.0+0x158>
   1fc5c:	0085c83a 	sub	r2,zero,r2
   1fc60:	98000226 	beq	r19,zero,1fc6c <_strtoul_l.isra.0+0x164>
   1fc64:	2000101e 	bne	r4,zero,1fca8 <_strtoul_l.isra.0+0x1a0>
   1fc68:	9c800015 	stw	r18,0(r19)
   1fc6c:	dfc00817 	ldw	ra,32(sp)
   1fc70:	ddc00717 	ldw	r23,28(sp)
   1fc74:	dd800617 	ldw	r22,24(sp)
   1fc78:	dd400517 	ldw	r21,20(sp)
   1fc7c:	dd000417 	ldw	r20,16(sp)
   1fc80:	dcc00317 	ldw	r19,12(sp)
   1fc84:	dc800217 	ldw	r18,8(sp)
   1fc88:	dc400117 	ldw	r17,4(sp)
   1fc8c:	dc000017 	ldw	r16,0(sp)
   1fc90:	dec00904 	addi	sp,sp,36
   1fc94:	f800283a 	ret
   1fc98:	00800884 	movi	r2,34
   1fc9c:	a0800015 	stw	r2,0(r20)
   1fca0:	00bfffc4 	movi	r2,-1
   1fca4:	983ff126 	beq	r19,zero,1fc6c <__alt_mem_mcu_subsystem_ram_0+0x77fffc6c>
   1fca8:	8cbfffc4 	addi	r18,r17,-1
   1fcac:	003fee06 	br	1fc68 <__alt_mem_mcu_subsystem_ram_0+0x77fffc68>
   1fcb0:	bc400084 	addi	r17,r23,2
   1fcb4:	bc000043 	ldbu	r16,1(r23)
   1fcb8:	05c00044 	movi	r23,1
   1fcbc:	003fb206 	br	1fb88 <__alt_mem_mcu_subsystem_ram_0+0x77fffb88>
   1fcc0:	80800c18 	cmpnei	r2,r16,48
   1fcc4:	10000f26 	beq	r2,zero,1fd04 <_strtoul_l.isra.0+0x1fc>
   1fcc8:	05840034 	movhi	r22,4096
   1fccc:	01c003c4 	movi	r7,15
   1fcd0:	b5bfffc4 	addi	r22,r22,-1
   1fcd4:	01800404 	movi	r6,16
   1fcd8:	003fbf06 	br	1fbd8 <__alt_mem_mcu_subsystem_ram_0+0x77fffbd8>
   1fcdc:	88800003 	ldbu	r2,0(r17)
   1fce0:	108037cc 	andi	r2,r2,223
   1fce4:	10801618 	cmpnei	r2,r2,88
   1fce8:	10000a26 	beq	r2,zero,1fd14 <_strtoul_l.isra.0+0x20c>
   1fcec:	05880034 	movhi	r22,8192
   1fcf0:	01c001c4 	movi	r7,7
   1fcf4:	b5bfffc4 	addi	r22,r22,-1
   1fcf8:	01800204 	movi	r6,8
   1fcfc:	05400204 	movi	r21,8
   1fd00:	003fb506 	br	1fbd8 <__alt_mem_mcu_subsystem_ram_0+0x77fffbd8>
   1fd04:	88800003 	ldbu	r2,0(r17)
   1fd08:	108037cc 	andi	r2,r2,223
   1fd0c:	10801620 	cmpeqi	r2,r2,88
   1fd10:	10000826 	beq	r2,zero,1fd34 <_strtoul_l.isra.0+0x22c>
   1fd14:	05840034 	movhi	r22,4096
   1fd18:	8c000043 	ldbu	r16,1(r17)
   1fd1c:	01c003c4 	movi	r7,15
   1fd20:	8c400084 	addi	r17,r17,2
   1fd24:	b5bfffc4 	addi	r22,r22,-1
   1fd28:	01800404 	movi	r6,16
   1fd2c:	05400404 	movi	r21,16
   1fd30:	003fa906 	br	1fbd8 <__alt_mem_mcu_subsystem_ram_0+0x77fffbd8>
   1fd34:	01400404 	movi	r5,16
   1fd38:	013fffc4 	movi	r4,-1
   1fd3c:	0012a540 	call	12a54 <__udivsi3>
   1fd40:	01400404 	movi	r5,16
   1fd44:	013fffc4 	movi	r4,-1
   1fd48:	102d883a 	mov	r22,r2
   1fd4c:	0012ab80 	call	12ab8 <__umodsi3>
   1fd50:	100f883a 	mov	r7,r2
   1fd54:	01800404 	movi	r6,16
   1fd58:	003f9f06 	br	1fbd8 <__alt_mem_mcu_subsystem_ram_0+0x77fffbd8>

0001fd5c <_strtoul_r>:
   1fd5c:	008000f4 	movhi	r2,3
   1fd60:	109e6617 	ldw	r2,31128(r2)
   1fd64:	defffe04 	addi	sp,sp,-8
   1fd68:	dfc00115 	stw	ra,4(sp)
   1fd6c:	10800d17 	ldw	r2,52(r2)
   1fd70:	1000021e 	bne	r2,zero,1fd7c <_strtoul_r+0x20>
   1fd74:	008000f4 	movhi	r2,3
   1fd78:	10980104 	addi	r2,r2,24580
   1fd7c:	d8800015 	stw	r2,0(sp)
   1fd80:	001fb080 	call	1fb08 <_strtoul_l.isra.0>
   1fd84:	dfc00117 	ldw	ra,4(sp)
   1fd88:	dec00204 	addi	sp,sp,8
   1fd8c:	f800283a 	ret

0001fd90 <strtoul_l>:
   1fd90:	defffe04 	addi	sp,sp,-8
   1fd94:	008000f4 	movhi	r2,3
   1fd98:	d9c00015 	stw	r7,0(sp)
   1fd9c:	300f883a 	mov	r7,r6
   1fda0:	280d883a 	mov	r6,r5
   1fda4:	200b883a 	mov	r5,r4
   1fda8:	111e6617 	ldw	r4,31128(r2)
   1fdac:	dfc00115 	stw	ra,4(sp)
   1fdb0:	001fb080 	call	1fb08 <_strtoul_l.isra.0>
   1fdb4:	dfc00117 	ldw	ra,4(sp)
   1fdb8:	dec00204 	addi	sp,sp,8
   1fdbc:	f800283a 	ret

0001fdc0 <strtoul>:
   1fdc0:	008000f4 	movhi	r2,3
   1fdc4:	10de6617 	ldw	r3,31128(r2)
   1fdc8:	defffe04 	addi	sp,sp,-8
   1fdcc:	dfc00115 	stw	ra,4(sp)
   1fdd0:	18800d17 	ldw	r2,52(r3)
   1fdd4:	1000021e 	bne	r2,zero,1fde0 <strtoul+0x20>
   1fdd8:	008000f4 	movhi	r2,3
   1fddc:	10980104 	addi	r2,r2,24580
   1fde0:	300f883a 	mov	r7,r6
   1fde4:	d8800015 	stw	r2,0(sp)
   1fde8:	280d883a 	mov	r6,r5
   1fdec:	200b883a 	mov	r5,r4
   1fdf0:	1809883a 	mov	r4,r3
   1fdf4:	001fb080 	call	1fb08 <_strtoul_l.isra.0>
   1fdf8:	dfc00117 	ldw	ra,4(sp)
   1fdfc:	dec00204 	addi	sp,sp,8
   1fe00:	f800283a 	ret

0001fe04 <__ssprint_r>:
   1fe04:	30800217 	ldw	r2,8(r6)
   1fe08:	defff604 	addi	sp,sp,-40
   1fe0c:	dcc00315 	stw	r19,12(sp)
   1fe10:	dfc00915 	stw	ra,36(sp)
   1fe14:	df000815 	stw	fp,32(sp)
   1fe18:	ddc00715 	stw	r23,28(sp)
   1fe1c:	dd800615 	stw	r22,24(sp)
   1fe20:	dd400515 	stw	r21,20(sp)
   1fe24:	dd000415 	stw	r20,16(sp)
   1fe28:	dc800215 	stw	r18,8(sp)
   1fe2c:	dc400115 	stw	r17,4(sp)
   1fe30:	dc000015 	stw	r16,0(sp)
   1fe34:	3027883a 	mov	r19,r6
   1fe38:	10005426 	beq	r2,zero,1ff8c <__ssprint_r+0x188>
   1fe3c:	2029883a 	mov	r20,r4
   1fe40:	2821883a 	mov	r16,r5
   1fe44:	35800017 	ldw	r22,0(r6)
   1fe48:	29000017 	ldw	r4,0(r5)
   1fe4c:	2c400217 	ldw	r17,8(r5)
   1fe50:	00003506 	br	1ff28 <__ssprint_r+0x124>
   1fe54:	8080030b 	ldhu	r2,12(r16)
   1fe58:	10c1200c 	andi	r3,r2,1152
   1fe5c:	18002526 	beq	r3,zero,1fef4 <__ssprint_r+0xf0>
   1fe60:	81800517 	ldw	r6,20(r16)
   1fe64:	81400417 	ldw	r5,16(r16)
   1fe68:	90c00044 	addi	r3,r18,1
   1fe6c:	318000e4 	muli	r6,r6,3
   1fe70:	216bc83a 	sub	r21,r4,r5
   1fe74:	1d47883a 	add	r3,r3,r21
   1fe78:	3022d7fa 	srli	r17,r6,31
   1fe7c:	89a3883a 	add	r17,r17,r6
   1fe80:	8823d07a 	srai	r17,r17,1
   1fe84:	880d883a 	mov	r6,r17
   1fe88:	88c0022e 	bgeu	r17,r3,1fe94 <__ssprint_r+0x90>
   1fe8c:	1823883a 	mov	r17,r3
   1fe90:	180d883a 	mov	r6,r3
   1fe94:	1081000c 	andi	r2,r2,1024
   1fe98:	10002c26 	beq	r2,zero,1ff4c <__ssprint_r+0x148>
   1fe9c:	300b883a 	mov	r5,r6
   1fea0:	a009883a 	mov	r4,r20
   1fea4:	001527c0 	call	1527c <_malloc_r>
   1fea8:	102f883a 	mov	r23,r2
   1feac:	10002e26 	beq	r2,zero,1ff68 <__ssprint_r+0x164>
   1feb0:	81400417 	ldw	r5,16(r16)
   1feb4:	a80d883a 	mov	r6,r21
   1feb8:	1009883a 	mov	r4,r2
   1febc:	0015ac00 	call	15ac0 <memcpy>
   1fec0:	8080030b 	ldhu	r2,12(r16)
   1fec4:	00fedfc4 	movi	r3,-1153
   1fec8:	10c4703a 	and	r2,r2,r3
   1fecc:	10802014 	ori	r2,r2,128
   1fed0:	8080030d 	sth	r2,12(r16)
   1fed4:	bd49883a 	add	r4,r23,r21
   1fed8:	8d45c83a 	sub	r2,r17,r21
   1fedc:	85c00415 	stw	r23,16(r16)
   1fee0:	84400515 	stw	r17,20(r16)
   1fee4:	81000015 	stw	r4,0(r16)
   1fee8:	9023883a 	mov	r17,r18
   1feec:	80800215 	stw	r2,8(r16)
   1fef0:	902f883a 	mov	r23,r18
   1fef4:	b80d883a 	mov	r6,r23
   1fef8:	e00b883a 	mov	r5,fp
   1fefc:	001de980 	call	1de98 <memmove>
   1ff00:	80c00217 	ldw	r3,8(r16)
   1ff04:	81000017 	ldw	r4,0(r16)
   1ff08:	98800217 	ldw	r2,8(r19)
   1ff0c:	1c63c83a 	sub	r17,r3,r17
   1ff10:	25c9883a 	add	r4,r4,r23
   1ff14:	84400215 	stw	r17,8(r16)
   1ff18:	81000015 	stw	r4,0(r16)
   1ff1c:	14a5c83a 	sub	r18,r2,r18
   1ff20:	9c800215 	stw	r18,8(r19)
   1ff24:	90001926 	beq	r18,zero,1ff8c <__ssprint_r+0x188>
   1ff28:	b4800117 	ldw	r18,4(r22)
   1ff2c:	b7000017 	ldw	fp,0(r22)
   1ff30:	882f883a 	mov	r23,r17
   1ff34:	b5800204 	addi	r22,r22,8
   1ff38:	903ffb26 	beq	r18,zero,1ff28 <__alt_mem_mcu_subsystem_ram_0+0x77ffff28>
   1ff3c:	947fc52e 	bgeu	r18,r17,1fe54 <__alt_mem_mcu_subsystem_ram_0+0x77fffe54>
   1ff40:	9023883a 	mov	r17,r18
   1ff44:	902f883a 	mov	r23,r18
   1ff48:	003fea06 	br	1fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fffef4>
   1ff4c:	a009883a 	mov	r4,r20
   1ff50:	001f0bc0 	call	1f0bc <_realloc_r>
   1ff54:	102f883a 	mov	r23,r2
   1ff58:	103fde1e 	bne	r2,zero,1fed4 <__alt_mem_mcu_subsystem_ram_0+0x77fffed4>
   1ff5c:	81400417 	ldw	r5,16(r16)
   1ff60:	a009883a 	mov	r4,r20
   1ff64:	001d1880 	call	1d188 <_free_r>
   1ff68:	80c0030b 	ldhu	r3,12(r16)
   1ff6c:	00800304 	movi	r2,12
   1ff70:	a0800015 	stw	r2,0(r20)
   1ff74:	18c01014 	ori	r3,r3,64
   1ff78:	80c0030d 	sth	r3,12(r16)
   1ff7c:	00bfffc4 	movi	r2,-1
   1ff80:	98000215 	stw	zero,8(r19)
   1ff84:	98000115 	stw	zero,4(r19)
   1ff88:	00000206 	br	1ff94 <__ssprint_r+0x190>
   1ff8c:	98000115 	stw	zero,4(r19)
   1ff90:	0005883a 	mov	r2,zero
   1ff94:	dfc00917 	ldw	ra,36(sp)
   1ff98:	df000817 	ldw	fp,32(sp)
   1ff9c:	ddc00717 	ldw	r23,28(sp)
   1ffa0:	dd800617 	ldw	r22,24(sp)
   1ffa4:	dd400517 	ldw	r21,20(sp)
   1ffa8:	dd000417 	ldw	r20,16(sp)
   1ffac:	dcc00317 	ldw	r19,12(sp)
   1ffb0:	dc800217 	ldw	r18,8(sp)
   1ffb4:	dc400117 	ldw	r17,4(sp)
   1ffb8:	dc000017 	ldw	r16,0(sp)
   1ffbc:	dec00a04 	addi	sp,sp,40
   1ffc0:	f800283a 	ret

0001ffc4 <___svfiprintf_internal_r>:
   1ffc4:	2880030b 	ldhu	r2,12(r5)
   1ffc8:	deffcf04 	addi	sp,sp,-196
   1ffcc:	df002f15 	stw	fp,188(sp)
   1ffd0:	dd802d15 	stw	r22,180(sp)
   1ffd4:	dd002b15 	stw	r20,172(sp)
   1ffd8:	dfc03015 	stw	ra,192(sp)
   1ffdc:	ddc02e15 	stw	r23,184(sp)
   1ffe0:	dd402c15 	stw	r21,176(sp)
   1ffe4:	dcc02a15 	stw	r19,168(sp)
   1ffe8:	dc802915 	stw	r18,164(sp)
   1ffec:	dc402815 	stw	r17,160(sp)
   1fff0:	dc002715 	stw	r16,156(sp)
   1fff4:	1080200c 	andi	r2,r2,128
   1fff8:	d9c00415 	stw	r7,16(sp)
   1fffc:	2829883a 	mov	r20,r5
   20000:	202d883a 	mov	r22,r4
   20004:	3039883a 	mov	fp,r6
   20008:	10000226 	beq	r2,zero,20014 <___svfiprintf_internal_r+0x50>
   2000c:	28800417 	ldw	r2,16(r5)
   20010:	10037a26 	beq	r2,zero,20dfc <___svfiprintf_internal_r+0xe38>
   20014:	dc801704 	addi	r18,sp,92
   20018:	dc800a15 	stw	r18,40(sp)
   2001c:	d8000c15 	stw	zero,48(sp)
   20020:	d8000b15 	stw	zero,44(sp)
   20024:	9011883a 	mov	r8,r18
   20028:	d8000515 	stw	zero,20(sp)
   2002c:	d8000015 	stw	zero,0(sp)
   20030:	e0800007 	ldb	r2,0(fp)
   20034:	1000d126 	beq	r2,zero,2037c <___svfiprintf_internal_r+0x3b8>
   20038:	10800960 	cmpeqi	r2,r2,37
   2003c:	e023883a 	mov	r17,fp
   20040:	10000226 	beq	r2,zero,2004c <___svfiprintf_internal_r+0x88>
   20044:	00001706 	br	200a4 <___svfiprintf_internal_r+0xe0>
   20048:	18000426 	beq	r3,zero,2005c <___svfiprintf_internal_r+0x98>
   2004c:	8c400044 	addi	r17,r17,1
   20050:	88800007 	ldb	r2,0(r17)
   20054:	10c00958 	cmpnei	r3,r2,37
   20058:	103ffb1e 	bne	r2,zero,20048 <__alt_mem_mcu_subsystem_ram_0+0x78000048>
   2005c:	8f21c83a 	sub	r16,r17,fp
   20060:	80000e26 	beq	r16,zero,2009c <___svfiprintf_internal_r+0xd8>
   20064:	d8c00c17 	ldw	r3,48(sp)
   20068:	d8800b17 	ldw	r2,44(sp)
   2006c:	47000015 	stw	fp,0(r8)
   20070:	1c07883a 	add	r3,r3,r16
   20074:	10800044 	addi	r2,r2,1
   20078:	d8800b15 	stw	r2,44(sp)
   2007c:	44000115 	stw	r16,4(r8)
   20080:	d8c00c15 	stw	r3,48(sp)
   20084:	10800208 	cmpgei	r2,r2,8
   20088:	1000b51e 	bne	r2,zero,20360 <___svfiprintf_internal_r+0x39c>
   2008c:	42000204 	addi	r8,r8,8
   20090:	d8800017 	ldw	r2,0(sp)
   20094:	1405883a 	add	r2,r2,r16
   20098:	d8800015 	stw	r2,0(sp)
   2009c:	88800007 	ldb	r2,0(r17)
   200a0:	1000b626 	beq	r2,zero,2037c <___svfiprintf_internal_r+0x3b8>
   200a4:	88800047 	ldb	r2,1(r17)
   200a8:	8f000044 	addi	fp,r17,1
   200ac:	d8000945 	stb	zero,37(sp)
   200b0:	000b883a 	mov	r5,zero
   200b4:	000d883a 	mov	r6,zero
   200b8:	027fffc4 	movi	r9,-1
   200bc:	0021883a 	mov	r16,zero
   200c0:	000f883a 	mov	r7,zero
   200c4:	e7000044 	addi	fp,fp,1
   200c8:	10fff804 	addi	r3,r2,-32
   200cc:	19001668 	cmpgeui	r4,r3,89
   200d0:	2000cc1e 	bne	r4,zero,20404 <___svfiprintf_internal_r+0x440>
   200d4:	180690ba 	slli	r3,r3,2
   200d8:	010000b4 	movhi	r4,2
   200dc:	1909883a 	add	r4,r3,r4
   200e0:	20c03a17 	ldw	r3,232(r4)
   200e4:	1800683a 	jmp	r3
   200e8:	000204d4 	movui	zero,2067
   200ec:	00020404 	movi	zero,2064
   200f0:	00020404 	movi	zero,2064
   200f4:	000204c8 	cmpgei	zero,zero,2067
   200f8:	00020404 	movi	zero,2064
   200fc:	00020404 	movi	zero,2064
   20100:	00020404 	movi	zero,2064
   20104:	00020404 	movi	zero,2064
   20108:	00020404 	movi	zero,2064
   2010c:	00020404 	movi	zero,2064
   20110:	000204a0 	cmpeqi	zero,zero,2066
   20114:	00020490 	cmplti	zero,zero,2066
   20118:	00020404 	movi	zero,2064
   2011c:	00020478 	rdprs	zero,zero,2065
   20120:	00020434 	movhi	zero,2064
   20124:	00020404 	movi	zero,2064
   20128:	00020428 	cmpgeui	zero,zero,2064
   2012c:	000203d4 	movui	zero,2063
   20130:	000203d4 	movui	zero,2063
   20134:	000203d4 	movui	zero,2063
   20138:	000203d4 	movui	zero,2063
   2013c:	000203d4 	movui	zero,2063
   20140:	000203d4 	movui	zero,2063
   20144:	000203d4 	movui	zero,2063
   20148:	000203d4 	movui	zero,2063
   2014c:	000203d4 	movui	zero,2063
   20150:	00020404 	movi	zero,2064
   20154:	00020404 	movi	zero,2064
   20158:	00020404 	movi	zero,2064
   2015c:	00020404 	movi	zero,2064
   20160:	00020404 	movi	zero,2064
   20164:	00020404 	movi	zero,2064
   20168:	00020404 	movi	zero,2064
   2016c:	00020404 	movi	zero,2064
   20170:	00020404 	movi	zero,2064
   20174:	00020404 	movi	zero,2064
   20178:	00020a88 	cmpgei	zero,zero,2090
   2017c:	00020404 	movi	zero,2064
   20180:	00020404 	movi	zero,2064
   20184:	00020404 	movi	zero,2064
   20188:	00020404 	movi	zero,2064
   2018c:	00020404 	movi	zero,2064
   20190:	00020404 	movi	zero,2064
   20194:	00020404 	movi	zero,2064
   20198:	00020404 	movi	zero,2064
   2019c:	00020404 	movi	zero,2064
   201a0:	00020404 	movi	zero,2064
   201a4:	000202fc 	xorhi	zero,zero,2059
   201a8:	00020404 	movi	zero,2064
   201ac:	00020404 	movi	zero,2064
   201b0:	00020404 	movi	zero,2064
   201b4:	00020404 	movi	zero,2064
   201b8:	00020404 	movi	zero,2064
   201bc:	0002024c 	andi	zero,zero,2057
   201c0:	00020404 	movi	zero,2064
   201c4:	00020404 	movi	zero,2064
   201c8:	00020a34 	movhi	zero,2088
   201cc:	00020404 	movi	zero,2064
   201d0:	00020404 	movi	zero,2064
   201d4:	00020404 	movi	zero,2064
   201d8:	00020404 	movi	zero,2064
   201dc:	00020404 	movi	zero,2064
   201e0:	00020404 	movi	zero,2064
   201e4:	00020404 	movi	zero,2064
   201e8:	00020404 	movi	zero,2064
   201ec:	00020404 	movi	zero,2064
   201f0:	00020404 	movi	zero,2064
   201f4:	00020580 	call	2058 <ip_process_rx+0x2e8>
   201f8:	00020544 	movi	zero,2069
   201fc:	00020404 	movi	zero,2064
   20200:	00020404 	movi	zero,2064
   20204:	00020404 	movi	zero,2064
   20208:	00020a7c 	xorhi	zero,zero,2089
   2020c:	00020544 	movi	zero,2069
   20210:	00020404 	movi	zero,2064
   20214:	00020404 	movi	zero,2064
   20218:	00020530 	cmpltui	zero,zero,2068
   2021c:	00020404 	movi	zero,2064
   20220:	00020980 	call	2098 <ip_process_rx+0x328>
   20224:	00020300 	call	2030 <ip_process_rx+0x2c0>
   20228:	00020944 	movi	zero,2085
   2022c:	00020938 	rdprs	zero,zero,2084
   20230:	00020404 	movi	zero,2064
   20234:	000208d8 	cmpnei	zero,zero,2083
   20238:	00020404 	movi	zero,2064
   2023c:	00020250 	cmplti	zero,zero,2057
   20240:	00020404 	movi	zero,2064
   20244:	00020404 	movi	zero,2064
   20248:	000209bc 	xorhi	zero,zero,2086
   2024c:	39c00414 	ori	r7,r7,16
   20250:	3880080c 	andi	r2,r7,32
   20254:	1001eb26 	beq	r2,zero,20a04 <___svfiprintf_internal_r+0xa40>
   20258:	d8c00417 	ldw	r3,16(sp)
   2025c:	d8000945 	stb	zero,37(sp)
   20260:	00800044 	movi	r2,1
   20264:	1cc00017 	ldw	r19,0(r3)
   20268:	1d400117 	ldw	r21,4(r3)
   2026c:	18c00204 	addi	r3,r3,8
   20270:	d8c00415 	stw	r3,16(sp)
   20274:	48ffffe0 	cmpeqi	r3,r9,-1
   20278:	18002c26 	beq	r3,zero,2032c <___svfiprintf_internal_r+0x368>
   2027c:	3823883a 	mov	r17,r7
   20280:	0019883a 	mov	r12,zero
   20284:	10c00060 	cmpeqi	r3,r2,1
   20288:	18021b1e 	bne	r3,zero,20af8 <___svfiprintf_internal_r+0xb34>
   2028c:	108000a0 	cmpeqi	r2,r2,2
   20290:	1002211e 	bne	r2,zero,20b18 <___svfiprintf_internal_r+0xb54>
   20294:	9007883a 	mov	r3,r18
   20298:	00000106 	br	202a0 <___svfiprintf_internal_r+0x2dc>
   2029c:	b807883a 	mov	r3,r23
   202a0:	9808d0fa 	srli	r4,r19,3
   202a4:	a80a977a 	slli	r5,r21,29
   202a8:	a82ad0fa 	srli	r21,r21,3
   202ac:	9cc001cc 	andi	r19,r19,7
   202b0:	98800c04 	addi	r2,r19,48
   202b4:	2926b03a 	or	r19,r5,r4
   202b8:	18bfffc5 	stb	r2,-1(r3)
   202bc:	9d48b03a 	or	r4,r19,r21
   202c0:	1dffffc4 	addi	r23,r3,-1
   202c4:	203ff51e 	bne	r4,zero,2029c <__alt_mem_mcu_subsystem_ram_0+0x7800029c>
   202c8:	8900004c 	andi	r4,r17,1
   202cc:	20021f26 	beq	r4,zero,20b4c <___svfiprintf_internal_r+0xb88>
   202d0:	10803fcc 	andi	r2,r2,255
   202d4:	1080201c 	xori	r2,r2,128
   202d8:	10bfe004 	addi	r2,r2,-128
   202dc:	10800c18 	cmpnei	r2,r2,48
   202e0:	10021a26 	beq	r2,zero,20b4c <___svfiprintf_internal_r+0xb88>
   202e4:	18ffff84 	addi	r3,r3,-2
   202e8:	00800c04 	movi	r2,48
   202ec:	b8bfffc5 	stb	r2,-1(r23)
   202f0:	90ebc83a 	sub	r21,r18,r3
   202f4:	182f883a 	mov	r23,r3
   202f8:	00021506 	br	20b50 <___svfiprintf_internal_r+0xb8c>
   202fc:	39c00414 	ori	r7,r7,16
   20300:	3880080c 	andi	r2,r7,32
   20304:	10007e26 	beq	r2,zero,20500 <___svfiprintf_internal_r+0x53c>
   20308:	d8c00417 	ldw	r3,16(sp)
   2030c:	0005883a 	mov	r2,zero
   20310:	1cc00017 	ldw	r19,0(r3)
   20314:	1d400117 	ldw	r21,4(r3)
   20318:	18c00204 	addi	r3,r3,8
   2031c:	d8c00415 	stw	r3,16(sp)
   20320:	d8000945 	stb	zero,37(sp)
   20324:	48ffffe0 	cmpeqi	r3,r9,-1
   20328:	183fd41e 	bne	r3,zero,2027c <__alt_mem_mcu_subsystem_ram_0+0x7800027c>
   2032c:	0019883a 	mov	r12,zero
   20330:	047fdfc4 	movi	r17,-129
   20334:	9d46b03a 	or	r3,r19,r21
   20338:	3c62703a 	and	r17,r7,r17
   2033c:	183fd11e 	bne	r3,zero,20284 <__alt_mem_mcu_subsystem_ram_0+0x78000284>
   20340:	4802df1e 	bne	r9,zero,20ec0 <___svfiprintf_internal_r+0xefc>
   20344:	1002781e 	bne	r2,zero,20d28 <___svfiprintf_internal_r+0xd64>
   20348:	3d40004c 	andi	r21,r7,1
   2034c:	a8029326 	beq	r21,zero,20d9c <___svfiprintf_internal_r+0xdd8>
   20350:	00800c04 	movi	r2,48
   20354:	d88016c5 	stb	r2,91(sp)
   20358:	ddc016c4 	addi	r23,sp,91
   2035c:	0001fc06 	br	20b50 <___svfiprintf_internal_r+0xb8c>
   20360:	d9800a04 	addi	r6,sp,40
   20364:	a00b883a 	mov	r5,r20
   20368:	b009883a 	mov	r4,r22
   2036c:	001fe040 	call	1fe04 <__ssprint_r>
   20370:	1000081e 	bne	r2,zero,20394 <___svfiprintf_internal_r+0x3d0>
   20374:	9011883a 	mov	r8,r18
   20378:	003f4506 	br	20090 <__alt_mem_mcu_subsystem_ram_0+0x78000090>
   2037c:	d8800c17 	ldw	r2,48(sp)
   20380:	10000426 	beq	r2,zero,20394 <___svfiprintf_internal_r+0x3d0>
   20384:	d9800a04 	addi	r6,sp,40
   20388:	a00b883a 	mov	r5,r20
   2038c:	b009883a 	mov	r4,r22
   20390:	001fe040 	call	1fe04 <__ssprint_r>
   20394:	a080030b 	ldhu	r2,12(r20)
   20398:	1080100c 	andi	r2,r2,64
   2039c:	1002f21e 	bne	r2,zero,20f68 <___svfiprintf_internal_r+0xfa4>
   203a0:	d8800017 	ldw	r2,0(sp)
   203a4:	dfc03017 	ldw	ra,192(sp)
   203a8:	df002f17 	ldw	fp,188(sp)
   203ac:	ddc02e17 	ldw	r23,184(sp)
   203b0:	dd802d17 	ldw	r22,180(sp)
   203b4:	dd402c17 	ldw	r21,176(sp)
   203b8:	dd002b17 	ldw	r20,172(sp)
   203bc:	dcc02a17 	ldw	r19,168(sp)
   203c0:	dc802917 	ldw	r18,164(sp)
   203c4:	dc402817 	ldw	r17,160(sp)
   203c8:	dc002717 	ldw	r16,156(sp)
   203cc:	dec03104 	addi	sp,sp,196
   203d0:	f800283a 	ret
   203d4:	0021883a 	mov	r16,zero
   203d8:	10fff404 	addi	r3,r2,-48
   203dc:	e7000044 	addi	fp,fp,1
   203e0:	840002a4 	muli	r16,r16,10
   203e4:	e0bfffc7 	ldb	r2,-1(fp)
   203e8:	1c21883a 	add	r16,r3,r16
   203ec:	10fff404 	addi	r3,r2,-48
   203f0:	190002b0 	cmpltui	r4,r3,10
   203f4:	203ff91e 	bne	r4,zero,203dc <__alt_mem_mcu_subsystem_ram_0+0x780003dc>
   203f8:	10fff804 	addi	r3,r2,-32
   203fc:	19001668 	cmpgeui	r4,r3,89
   20400:	203f3426 	beq	r4,zero,200d4 <__alt_mem_mcu_subsystem_ram_0+0x780000d4>
   20404:	29403fcc 	andi	r5,r5,255
   20408:	2802f11e 	bne	r5,zero,20fd0 <___svfiprintf_internal_r+0x100c>
   2040c:	103fdb26 	beq	r2,zero,2037c <__alt_mem_mcu_subsystem_ram_0+0x7800037c>
   20410:	d8800d05 	stb	r2,52(sp)
   20414:	d8000945 	stb	zero,37(sp)
   20418:	04c00044 	movi	r19,1
   2041c:	05400044 	movi	r21,1
   20420:	ddc00d04 	addi	r23,sp,52
   20424:	00005f06 	br	205a4 <___svfiprintf_internal_r+0x5e0>
   20428:	39c02014 	ori	r7,r7,128
   2042c:	e0800007 	ldb	r2,0(fp)
   20430:	003f2406 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20434:	e0800007 	ldb	r2,0(fp)
   20438:	e1000044 	addi	r4,fp,1
   2043c:	10c00aa0 	cmpeqi	r3,r2,42
   20440:	1802cc1e 	bne	r3,zero,20f74 <___svfiprintf_internal_r+0xfb0>
   20444:	10fff404 	addi	r3,r2,-48
   20448:	1a4002b0 	cmpltui	r9,r3,10
   2044c:	4802b926 	beq	r9,zero,20f34 <___svfiprintf_internal_r+0xf70>
   20450:	0013883a 	mov	r9,zero
   20454:	21000044 	addi	r4,r4,1
   20458:	4a4002a4 	muli	r9,r9,10
   2045c:	20bfffc7 	ldb	r2,-1(r4)
   20460:	48d3883a 	add	r9,r9,r3
   20464:	10fff404 	addi	r3,r2,-48
   20468:	1a8002b0 	cmpltui	r10,r3,10
   2046c:	503ff91e 	bne	r10,zero,20454 <__alt_mem_mcu_subsystem_ram_0+0x78000454>
   20470:	2039883a 	mov	fp,r4
   20474:	003f1406 	br	200c8 <__alt_mem_mcu_subsystem_ram_0+0x780000c8>
   20478:	e0800003 	ldbu	r2,0(fp)
   2047c:	10803fcc 	andi	r2,r2,255
   20480:	1080201c 	xori	r2,r2,128
   20484:	39c00114 	ori	r7,r7,4
   20488:	10bfe004 	addi	r2,r2,-128
   2048c:	003f0d06 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20490:	01400044 	movi	r5,1
   20494:	01800ac4 	movi	r6,43
   20498:	e0800007 	ldb	r2,0(fp)
   2049c:	003f0906 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   204a0:	d8800417 	ldw	r2,16(sp)
   204a4:	14000017 	ldw	r16,0(r2)
   204a8:	15c00104 	addi	r23,r2,4
   204ac:	e0800003 	ldbu	r2,0(fp)
   204b0:	80024816 	blt	r16,zero,20dd4 <___svfiprintf_internal_r+0xe10>
   204b4:	ddc00415 	stw	r23,16(sp)
   204b8:	10803fcc 	andi	r2,r2,255
   204bc:	1080201c 	xori	r2,r2,128
   204c0:	10bfe004 	addi	r2,r2,-128
   204c4:	003eff06 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   204c8:	39c00054 	ori	r7,r7,1
   204cc:	e0800007 	ldb	r2,0(fp)
   204d0:	003efc06 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   204d4:	30c03fcc 	andi	r3,r6,255
   204d8:	18c0201c 	xori	r3,r3,128
   204dc:	18ffe004 	addi	r3,r3,-128
   204e0:	e0800003 	ldbu	r2,0(fp)
   204e4:	183ff41e 	bne	r3,zero,204b8 <__alt_mem_mcu_subsystem_ram_0+0x780004b8>
   204e8:	10803fcc 	andi	r2,r2,255
   204ec:	1080201c 	xori	r2,r2,128
   204f0:	01400044 	movi	r5,1
   204f4:	01800804 	movi	r6,32
   204f8:	10bfe004 	addi	r2,r2,-128
   204fc:	003ef106 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20500:	d8c00417 	ldw	r3,16(sp)
   20504:	3880040c 	andi	r2,r7,16
   20508:	1cc00017 	ldw	r19,0(r3)
   2050c:	18c00104 	addi	r3,r3,4
   20510:	d8c00415 	stw	r3,16(sp)
   20514:	1000031e 	bne	r2,zero,20524 <___svfiprintf_internal_r+0x560>
   20518:	3880100c 	andi	r2,r7,64
   2051c:	10000126 	beq	r2,zero,20524 <___svfiprintf_internal_r+0x560>
   20520:	9cffffcc 	andi	r19,r19,65535
   20524:	002b883a 	mov	r21,zero
   20528:	0005883a 	mov	r2,zero
   2052c:	003f7c06 	br	20320 <__alt_mem_mcu_subsystem_ram_0+0x78000320>
   20530:	e0800007 	ldb	r2,0(fp)
   20534:	10c01b18 	cmpnei	r3,r2,108
   20538:	18022926 	beq	r3,zero,20de0 <___svfiprintf_internal_r+0xe1c>
   2053c:	39c00414 	ori	r7,r7,16
   20540:	003ee006 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20544:	29403fcc 	andi	r5,r5,255
   20548:	2802981e 	bne	r5,zero,20fac <___svfiprintf_internal_r+0xfe8>
   2054c:	3880080c 	andi	r2,r7,32
   20550:	10015226 	beq	r2,zero,20a9c <___svfiprintf_internal_r+0xad8>
   20554:	d8800417 	ldw	r2,16(sp)
   20558:	14c00017 	ldw	r19,0(r2)
   2055c:	15400117 	ldw	r21,4(r2)
   20560:	10800204 	addi	r2,r2,8
   20564:	d8800415 	stw	r2,16(sp)
   20568:	a8015916 	blt	r21,zero,20ad0 <___svfiprintf_internal_r+0xb0c>
   2056c:	48bfffd8 	cmpnei	r2,r9,-1
   20570:	db000943 	ldbu	r12,37(sp)
   20574:	10015f26 	beq	r2,zero,20af4 <___svfiprintf_internal_r+0xb30>
   20578:	00800044 	movi	r2,1
   2057c:	003f6c06 	br	20330 <__alt_mem_mcu_subsystem_ram_0+0x78000330>
   20580:	d8c00417 	ldw	r3,16(sp)
   20584:	d8000945 	stb	zero,37(sp)
   20588:	04c00044 	movi	r19,1
   2058c:	18800017 	ldw	r2,0(r3)
   20590:	18c00104 	addi	r3,r3,4
   20594:	d8c00415 	stw	r3,16(sp)
   20598:	d8800d05 	stb	r2,52(sp)
   2059c:	05400044 	movi	r21,1
   205a0:	ddc00d04 	addi	r23,sp,52
   205a4:	3823883a 	mov	r17,r7
   205a8:	0013883a 	mov	r9,zero
   205ac:	8b40008c 	andi	r13,r17,2
   205b0:	68000126 	beq	r13,zero,205b8 <___svfiprintf_internal_r+0x5f4>
   205b4:	9cc00084 	addi	r19,r19,2
   205b8:	8b00210c 	andi	r12,r17,132
   205bc:	d8800c17 	ldw	r2,48(sp)
   205c0:	d9000b17 	ldw	r4,44(sp)
   205c4:	6000341e 	bne	r12,zero,20698 <___svfiprintf_internal_r+0x6d4>
   205c8:	84c7c83a 	sub	r3,r16,r19
   205cc:	00c0320e 	bge	zero,r3,20698 <___svfiprintf_internal_r+0x6d4>
   205d0:	01c000f4 	movhi	r7,3
   205d4:	19400450 	cmplti	r5,r3,17
   205d8:	39cf0704 	addi	r7,r7,15388
   205dc:	03800404 	movi	r14,16
   205e0:	28000526 	beq	r5,zero,205f8 <___svfiprintf_internal_r+0x634>
   205e4:	00002306 	br	20674 <___svfiprintf_internal_r+0x6b0>
   205e8:	18fffc04 	addi	r3,r3,-16
   205ec:	19400448 	cmpgei	r5,r3,17
   205f0:	42000204 	addi	r8,r8,8
   205f4:	28001f26 	beq	r5,zero,20674 <___svfiprintf_internal_r+0x6b0>
   205f8:	21000044 	addi	r4,r4,1
   205fc:	10800404 	addi	r2,r2,16
   20600:	41c00015 	stw	r7,0(r8)
   20604:	43800115 	stw	r14,4(r8)
   20608:	d8800c15 	stw	r2,48(sp)
   2060c:	d9000b15 	stw	r4,44(sp)
   20610:	21400208 	cmpgei	r5,r4,8
   20614:	283ff426 	beq	r5,zero,205e8 <__alt_mem_mcu_subsystem_ram_0+0x780005e8>
   20618:	d9800a04 	addi	r6,sp,40
   2061c:	a00b883a 	mov	r5,r20
   20620:	b009883a 	mov	r4,r22
   20624:	d9c00815 	stw	r7,32(sp)
   20628:	db800715 	stw	r14,28(sp)
   2062c:	d8c00615 	stw	r3,24(sp)
   20630:	da400315 	stw	r9,12(sp)
   20634:	db000215 	stw	r12,8(sp)
   20638:	db400115 	stw	r13,4(sp)
   2063c:	001fe040 	call	1fe04 <__ssprint_r>
   20640:	103f541e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20644:	d8c00617 	ldw	r3,24(sp)
   20648:	d8800c17 	ldw	r2,48(sp)
   2064c:	d9000b17 	ldw	r4,44(sp)
   20650:	18fffc04 	addi	r3,r3,-16
   20654:	19400448 	cmpgei	r5,r3,17
   20658:	9011883a 	mov	r8,r18
   2065c:	d9c00817 	ldw	r7,32(sp)
   20660:	db800717 	ldw	r14,28(sp)
   20664:	da400317 	ldw	r9,12(sp)
   20668:	db000217 	ldw	r12,8(sp)
   2066c:	db400117 	ldw	r13,4(sp)
   20670:	283fe11e 	bne	r5,zero,205f8 <__alt_mem_mcu_subsystem_ram_0+0x780005f8>
   20674:	21000044 	addi	r4,r4,1
   20678:	10c5883a 	add	r2,r2,r3
   2067c:	40c00115 	stw	r3,4(r8)
   20680:	41c00015 	stw	r7,0(r8)
   20684:	d8800c15 	stw	r2,48(sp)
   20688:	d9000b15 	stw	r4,44(sp)
   2068c:	20c00208 	cmpgei	r3,r4,8
   20690:	1801ac1e 	bne	r3,zero,20d44 <___svfiprintf_internal_r+0xd80>
   20694:	42000204 	addi	r8,r8,8
   20698:	d9800947 	ldb	r6,37(sp)
   2069c:	21400044 	addi	r5,r4,1
   206a0:	40c00204 	addi	r3,r8,8
   206a4:	30000f26 	beq	r6,zero,206e4 <___svfiprintf_internal_r+0x720>
   206a8:	d9800944 	addi	r6,sp,37
   206ac:	10800044 	addi	r2,r2,1
   206b0:	41800015 	stw	r6,0(r8)
   206b4:	01800044 	movi	r6,1
   206b8:	41800115 	stw	r6,4(r8)
   206bc:	d8800c15 	stw	r2,48(sp)
   206c0:	d9400b15 	stw	r5,44(sp)
   206c4:	29800208 	cmpgei	r6,r5,8
   206c8:	30016c1e 	bne	r6,zero,20c7c <___svfiprintf_internal_r+0xcb8>
   206cc:	21c00084 	addi	r7,r4,2
   206d0:	41800404 	addi	r6,r8,16
   206d4:	2809883a 	mov	r4,r5
   206d8:	1811883a 	mov	r8,r3
   206dc:	380b883a 	mov	r5,r7
   206e0:	3007883a 	mov	r3,r6
   206e4:	68000d26 	beq	r13,zero,2071c <___svfiprintf_internal_r+0x758>
   206e8:	d9000984 	addi	r4,sp,38
   206ec:	10800084 	addi	r2,r2,2
   206f0:	41000015 	stw	r4,0(r8)
   206f4:	01000084 	movi	r4,2
   206f8:	41000115 	stw	r4,4(r8)
   206fc:	d8800c15 	stw	r2,48(sp)
   20700:	d9400b15 	stw	r5,44(sp)
   20704:	29000208 	cmpgei	r4,r5,8
   20708:	20016d1e 	bne	r4,zero,20cc0 <___svfiprintf_internal_r+0xcfc>
   2070c:	2809883a 	mov	r4,r5
   20710:	1811883a 	mov	r8,r3
   20714:	29400044 	addi	r5,r5,1
   20718:	18c00204 	addi	r3,r3,8
   2071c:	63002018 	cmpnei	r12,r12,128
   20720:	60011426 	beq	r12,zero,20b74 <___svfiprintf_internal_r+0xbb0>
   20724:	4d53c83a 	sub	r9,r9,r21
   20728:	02402f0e 	bge	zero,r9,207e8 <___svfiprintf_internal_r+0x824>
   2072c:	49800450 	cmplti	r6,r9,17
   20730:	01c000f4 	movhi	r7,3
   20734:	3001f21e 	bne	r6,zero,20f00 <___svfiprintf_internal_r+0xf3c>
   20738:	39cf0304 	addi	r7,r7,15372
   2073c:	03000404 	movi	r12,16
   20740:	00000406 	br	20754 <___svfiprintf_internal_r+0x790>
   20744:	4a7ffc04 	addi	r9,r9,-16
   20748:	48c00448 	cmpgei	r3,r9,17
   2074c:	42000204 	addi	r8,r8,8
   20750:	18001926 	beq	r3,zero,207b8 <___svfiprintf_internal_r+0x7f4>
   20754:	21000044 	addi	r4,r4,1
   20758:	10800404 	addi	r2,r2,16
   2075c:	41c00015 	stw	r7,0(r8)
   20760:	43000115 	stw	r12,4(r8)
   20764:	d8800c15 	stw	r2,48(sp)
   20768:	d9000b15 	stw	r4,44(sp)
   2076c:	20c00208 	cmpgei	r3,r4,8
   20770:	183ff426 	beq	r3,zero,20744 <__alt_mem_mcu_subsystem_ram_0+0x78000744>
   20774:	d9800a04 	addi	r6,sp,40
   20778:	a00b883a 	mov	r5,r20
   2077c:	b009883a 	mov	r4,r22
   20780:	d9c00315 	stw	r7,12(sp)
   20784:	db000215 	stw	r12,8(sp)
   20788:	da400115 	stw	r9,4(sp)
   2078c:	001fe040 	call	1fe04 <__ssprint_r>
   20790:	103f001e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20794:	da400117 	ldw	r9,4(sp)
   20798:	d8800c17 	ldw	r2,48(sp)
   2079c:	d9000b17 	ldw	r4,44(sp)
   207a0:	4a7ffc04 	addi	r9,r9,-16
   207a4:	48c00448 	cmpgei	r3,r9,17
   207a8:	9011883a 	mov	r8,r18
   207ac:	d9c00317 	ldw	r7,12(sp)
   207b0:	db000217 	ldw	r12,8(sp)
   207b4:	183fe71e 	bne	r3,zero,20754 <__alt_mem_mcu_subsystem_ram_0+0x78000754>
   207b8:	21400044 	addi	r5,r4,1
   207bc:	41000204 	addi	r4,r8,8
   207c0:	1245883a 	add	r2,r2,r9
   207c4:	41c00015 	stw	r7,0(r8)
   207c8:	42400115 	stw	r9,4(r8)
   207cc:	d8800c15 	stw	r2,48(sp)
   207d0:	d9400b15 	stw	r5,44(sp)
   207d4:	28c00208 	cmpgei	r3,r5,8
   207d8:	1801481e 	bne	r3,zero,20cfc <___svfiprintf_internal_r+0xd38>
   207dc:	29400044 	addi	r5,r5,1
   207e0:	20c00204 	addi	r3,r4,8
   207e4:	2011883a 	mov	r8,r4
   207e8:	a885883a 	add	r2,r21,r2
   207ec:	45c00015 	stw	r23,0(r8)
   207f0:	45400115 	stw	r21,4(r8)
   207f4:	d8800c15 	stw	r2,48(sp)
   207f8:	d9400b15 	stw	r5,44(sp)
   207fc:	29000210 	cmplti	r4,r5,8
   20800:	20011026 	beq	r4,zero,20c44 <___svfiprintf_internal_r+0xc80>
   20804:	8c40010c 	andi	r17,r17,4
   20808:	88002a26 	beq	r17,zero,208b4 <___svfiprintf_internal_r+0x8f0>
   2080c:	84e3c83a 	sub	r17,r16,r19
   20810:	0440280e 	bge	zero,r17,208b4 <___svfiprintf_internal_r+0x8f0>
   20814:	01c000f4 	movhi	r7,3
   20818:	89400450 	cmplti	r5,r17,17
   2081c:	39cf0704 	addi	r7,r7,15388
   20820:	d9000b17 	ldw	r4,44(sp)
   20824:	05400404 	movi	r21,16
   20828:	28000526 	beq	r5,zero,20840 <___svfiprintf_internal_r+0x87c>
   2082c:	00001906 	br	20894 <___svfiprintf_internal_r+0x8d0>
   20830:	8c7ffc04 	addi	r17,r17,-16
   20834:	89400448 	cmpgei	r5,r17,17
   20838:	18c00204 	addi	r3,r3,8
   2083c:	28001526 	beq	r5,zero,20894 <___svfiprintf_internal_r+0x8d0>
   20840:	21000044 	addi	r4,r4,1
   20844:	10800404 	addi	r2,r2,16
   20848:	19c00015 	stw	r7,0(r3)
   2084c:	1d400115 	stw	r21,4(r3)
   20850:	d8800c15 	stw	r2,48(sp)
   20854:	d9000b15 	stw	r4,44(sp)
   20858:	21400208 	cmpgei	r5,r4,8
   2085c:	283ff426 	beq	r5,zero,20830 <__alt_mem_mcu_subsystem_ram_0+0x78000830>
   20860:	d9800a04 	addi	r6,sp,40
   20864:	a00b883a 	mov	r5,r20
   20868:	b009883a 	mov	r4,r22
   2086c:	d9c00115 	stw	r7,4(sp)
   20870:	001fe040 	call	1fe04 <__ssprint_r>
   20874:	103ec71e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20878:	8c7ffc04 	addi	r17,r17,-16
   2087c:	89400448 	cmpgei	r5,r17,17
   20880:	d8800c17 	ldw	r2,48(sp)
   20884:	d9000b17 	ldw	r4,44(sp)
   20888:	9007883a 	mov	r3,r18
   2088c:	d9c00117 	ldw	r7,4(sp)
   20890:	283feb1e 	bne	r5,zero,20840 <__alt_mem_mcu_subsystem_ram_0+0x78000840>
   20894:	21000044 	addi	r4,r4,1
   20898:	1445883a 	add	r2,r2,r17
   2089c:	d9000b15 	stw	r4,44(sp)
   208a0:	19c00015 	stw	r7,0(r3)
   208a4:	1c400115 	stw	r17,4(r3)
   208a8:	d8800c15 	stw	r2,48(sp)
   208ac:	21000210 	cmplti	r4,r4,8
   208b0:	20013326 	beq	r4,zero,20d80 <___svfiprintf_internal_r+0xdbc>
   208b4:	84c0010e 	bge	r16,r19,208bc <___svfiprintf_internal_r+0x8f8>
   208b8:	9821883a 	mov	r16,r19
   208bc:	d8c00017 	ldw	r3,0(sp)
   208c0:	1c07883a 	add	r3,r3,r16
   208c4:	d8c00015 	stw	r3,0(sp)
   208c8:	1000e61e 	bne	r2,zero,20c64 <___svfiprintf_internal_r+0xca0>
   208cc:	d8000b15 	stw	zero,44(sp)
   208d0:	9011883a 	mov	r8,r18
   208d4:	003dd606 	br	20030 <__alt_mem_mcu_subsystem_ram_0+0x78000030>
   208d8:	d8800417 	ldw	r2,16(sp)
   208dc:	d8000945 	stb	zero,37(sp)
   208e0:	15c00017 	ldw	r23,0(r2)
   208e4:	14400104 	addi	r17,r2,4
   208e8:	b8018826 	beq	r23,zero,20f0c <___svfiprintf_internal_r+0xf48>
   208ec:	48bfffe0 	cmpeqi	r2,r9,-1
   208f0:	10014a1e 	bne	r2,zero,20e1c <___svfiprintf_internal_r+0xe58>
   208f4:	480d883a 	mov	r6,r9
   208f8:	000b883a 	mov	r5,zero
   208fc:	b809883a 	mov	r4,r23
   20900:	da000315 	stw	r8,12(sp)
   20904:	d9c00215 	stw	r7,8(sp)
   20908:	da400115 	stw	r9,4(sp)
   2090c:	001ddb00 	call	1ddb0 <memchr>
   20910:	da400117 	ldw	r9,4(sp)
   20914:	d9c00217 	ldw	r7,8(sp)
   20918:	da000317 	ldw	r8,12(sp)
   2091c:	10018c26 	beq	r2,zero,20f50 <___svfiprintf_internal_r+0xf8c>
   20920:	dc400415 	stw	r17,16(sp)
   20924:	15ebc83a 	sub	r21,r2,r23
   20928:	db000943 	ldbu	r12,37(sp)
   2092c:	3823883a 	mov	r17,r7
   20930:	0013883a 	mov	r9,zero
   20934:	00008606 	br	20b50 <___svfiprintf_internal_r+0xb8c>
   20938:	39c00814 	ori	r7,r7,32
   2093c:	e0800007 	ldb	r2,0(fp)
   20940:	003de006 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20944:	d8c00417 	ldw	r3,16(sp)
   20948:	00800c04 	movi	r2,48
   2094c:	d8800985 	stb	r2,38(sp)
   20950:	00801e04 	movi	r2,120
   20954:	010000f4 	movhi	r4,3
   20958:	d88009c5 	stb	r2,39(sp)
   2095c:	18800104 	addi	r2,r3,4
   20960:	d8800415 	stw	r2,16(sp)
   20964:	208dd104 	addi	r2,r4,14148
   20968:	d8800515 	stw	r2,20(sp)
   2096c:	1cc00017 	ldw	r19,0(r3)
   20970:	002b883a 	mov	r21,zero
   20974:	39c00094 	ori	r7,r7,2
   20978:	00800084 	movi	r2,2
   2097c:	003e6806 	br	20320 <__alt_mem_mcu_subsystem_ram_0+0x78000320>
   20980:	29403fcc 	andi	r5,r5,255
   20984:	2801941e 	bne	r5,zero,20fd8 <___svfiprintf_internal_r+0x1014>
   20988:	d8c00417 	ldw	r3,16(sp)
   2098c:	3880080c 	andi	r2,r7,32
   20990:	19000104 	addi	r4,r3,4
   20994:	18c00017 	ldw	r3,0(r3)
   20998:	1001081e 	bne	r2,zero,20dbc <___svfiprintf_internal_r+0xdf8>
   2099c:	3880040c 	andi	r2,r7,16
   209a0:	1001431e 	bne	r2,zero,20eb0 <___svfiprintf_internal_r+0xeec>
   209a4:	39c0100c 	andi	r7,r7,64
   209a8:	38014126 	beq	r7,zero,20eb0 <___svfiprintf_internal_r+0xeec>
   209ac:	d8800017 	ldw	r2,0(sp)
   209b0:	d9000415 	stw	r4,16(sp)
   209b4:	1880000d 	sth	r2,0(r3)
   209b8:	003d9d06 	br	20030 <__alt_mem_mcu_subsystem_ram_0+0x78000030>
   209bc:	29403fcc 	andi	r5,r5,255
   209c0:	2801871e 	bne	r5,zero,20fe0 <___svfiprintf_internal_r+0x101c>
   209c4:	00c000f4 	movhi	r3,3
   209c8:	18cdd104 	addi	r3,r3,14148
   209cc:	d8c00515 	stw	r3,20(sp)
   209d0:	38c0080c 	andi	r3,r7,32
   209d4:	18001e26 	beq	r3,zero,20a50 <___svfiprintf_internal_r+0xa8c>
   209d8:	d8c00417 	ldw	r3,16(sp)
   209dc:	1cc00017 	ldw	r19,0(r3)
   209e0:	1d400117 	ldw	r21,4(r3)
   209e4:	18c00204 	addi	r3,r3,8
   209e8:	d8c00415 	stw	r3,16(sp)
   209ec:	38c0004c 	andi	r3,r7,1
   209f0:	18000226 	beq	r3,zero,209fc <___svfiprintf_internal_r+0xa38>
   209f4:	9d46b03a 	or	r3,r19,r21
   209f8:	1800ea1e 	bne	r3,zero,20da4 <___svfiprintf_internal_r+0xde0>
   209fc:	00800084 	movi	r2,2
   20a00:	003e4706 	br	20320 <__alt_mem_mcu_subsystem_ram_0+0x78000320>
   20a04:	d8c00417 	ldw	r3,16(sp)
   20a08:	3880040c 	andi	r2,r7,16
   20a0c:	1cc00017 	ldw	r19,0(r3)
   20a10:	18c00104 	addi	r3,r3,4
   20a14:	d8c00415 	stw	r3,16(sp)
   20a18:	1000031e 	bne	r2,zero,20a28 <___svfiprintf_internal_r+0xa64>
   20a1c:	3880100c 	andi	r2,r7,64
   20a20:	10000126 	beq	r2,zero,20a28 <___svfiprintf_internal_r+0xa64>
   20a24:	9cffffcc 	andi	r19,r19,65535
   20a28:	002b883a 	mov	r21,zero
   20a2c:	00800044 	movi	r2,1
   20a30:	003e3b06 	br	20320 <__alt_mem_mcu_subsystem_ram_0+0x78000320>
   20a34:	29403fcc 	andi	r5,r5,255
   20a38:	28015e1e 	bne	r5,zero,20fb4 <___svfiprintf_internal_r+0xff0>
   20a3c:	00c000f4 	movhi	r3,3
   20a40:	18cdcc04 	addi	r3,r3,14128
   20a44:	d8c00515 	stw	r3,20(sp)
   20a48:	38c0080c 	andi	r3,r7,32
   20a4c:	183fe21e 	bne	r3,zero,209d8 <__alt_mem_mcu_subsystem_ram_0+0x780009d8>
   20a50:	d9000417 	ldw	r4,16(sp)
   20a54:	38c0040c 	andi	r3,r7,16
   20a58:	24c00017 	ldw	r19,0(r4)
   20a5c:	21000104 	addi	r4,r4,4
   20a60:	d9000415 	stw	r4,16(sp)
   20a64:	1800b31e 	bne	r3,zero,20d34 <___svfiprintf_internal_r+0xd70>
   20a68:	38c0100c 	andi	r3,r7,64
   20a6c:	1800b126 	beq	r3,zero,20d34 <___svfiprintf_internal_r+0xd70>
   20a70:	9cffffcc 	andi	r19,r19,65535
   20a74:	002b883a 	mov	r21,zero
   20a78:	003fdc06 	br	209ec <__alt_mem_mcu_subsystem_ram_0+0x780009ec>
   20a7c:	39c01014 	ori	r7,r7,64
   20a80:	e0800007 	ldb	r2,0(fp)
   20a84:	003d8f06 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20a88:	29403fcc 	andi	r5,r5,255
   20a8c:	2801451e 	bne	r5,zero,20fa4 <___svfiprintf_internal_r+0xfe0>
   20a90:	39c00414 	ori	r7,r7,16
   20a94:	3880080c 	andi	r2,r7,32
   20a98:	103eae1e 	bne	r2,zero,20554 <__alt_mem_mcu_subsystem_ram_0+0x78000554>
   20a9c:	d8c00417 	ldw	r3,16(sp)
   20aa0:	3880040c 	andi	r2,r7,16
   20aa4:	1cc00017 	ldw	r19,0(r3)
   20aa8:	18c00104 	addi	r3,r3,4
   20aac:	d8c00415 	stw	r3,16(sp)
   20ab0:	1000a21e 	bne	r2,zero,20d3c <___svfiprintf_internal_r+0xd78>
   20ab4:	3880100c 	andi	r2,r7,64
   20ab8:	1000a026 	beq	r2,zero,20d3c <___svfiprintf_internal_r+0xd78>
   20abc:	9cffffcc 	andi	r19,r19,65535
   20ac0:	9ce0001c 	xori	r19,r19,32768
   20ac4:	9ce00004 	addi	r19,r19,-32768
   20ac8:	982bd7fa 	srai	r21,r19,31
   20acc:	a83ea70e 	bge	r21,zero,2056c <__alt_mem_mcu_subsystem_ram_0+0x7800056c>
   20ad0:	04e7c83a 	sub	r19,zero,r19
   20ad4:	9804c03a 	cmpne	r2,r19,zero
   20ad8:	056bc83a 	sub	r21,zero,r21
   20adc:	a8abc83a 	sub	r21,r21,r2
   20ae0:	00800b44 	movi	r2,45
   20ae4:	d8800945 	stb	r2,37(sp)
   20ae8:	48bfffd8 	cmpnei	r2,r9,-1
   20aec:	03000b44 	movi	r12,45
   20af0:	103ea11e 	bne	r2,zero,20578 <__alt_mem_mcu_subsystem_ram_0+0x78000578>
   20af4:	3823883a 	mov	r17,r7
   20af8:	a800d41e 	bne	r21,zero,20e4c <___svfiprintf_internal_r+0xe88>
   20afc:	988002a8 	cmpgeui	r2,r19,10
   20b00:	1000d21e 	bne	r2,zero,20e4c <___svfiprintf_internal_r+0xe88>
   20b04:	9cc00c04 	addi	r19,r19,48
   20b08:	dcc016c5 	stb	r19,91(sp)
   20b0c:	05400044 	movi	r21,1
   20b10:	ddc016c4 	addi	r23,sp,91
   20b14:	00000e06 	br	20b50 <___svfiprintf_internal_r+0xb8c>
   20b18:	902f883a 	mov	r23,r18
   20b1c:	d9000517 	ldw	r4,20(sp)
   20b20:	988003cc 	andi	r2,r19,15
   20b24:	a806973a 	slli	r3,r21,28
   20b28:	2085883a 	add	r2,r4,r2
   20b2c:	9826d13a 	srli	r19,r19,4
   20b30:	10800003 	ldbu	r2,0(r2)
   20b34:	a82ad13a 	srli	r21,r21,4
   20b38:	bdffffc4 	addi	r23,r23,-1
   20b3c:	1ce6b03a 	or	r19,r3,r19
   20b40:	b8800005 	stb	r2,0(r23)
   20b44:	9d44b03a 	or	r2,r19,r21
   20b48:	103ff41e 	bne	r2,zero,20b1c <__alt_mem_mcu_subsystem_ram_0+0x78000b1c>
   20b4c:	95ebc83a 	sub	r21,r18,r23
   20b50:	4827883a 	mov	r19,r9
   20b54:	4d40010e 	bge	r9,r21,20b5c <___svfiprintf_internal_r+0xb98>
   20b58:	a827883a 	mov	r19,r21
   20b5c:	63003fcc 	andi	r12,r12,255
   20b60:	6300201c 	xori	r12,r12,128
   20b64:	633fe004 	addi	r12,r12,-128
   20b68:	603e9026 	beq	r12,zero,205ac <__alt_mem_mcu_subsystem_ram_0+0x780005ac>
   20b6c:	9cc00044 	addi	r19,r19,1
   20b70:	003e8e06 	br	205ac <__alt_mem_mcu_subsystem_ram_0+0x780005ac>
   20b74:	84d9c83a 	sub	r12,r16,r19
   20b78:	033eea0e 	bge	zero,r12,20724 <__alt_mem_mcu_subsystem_ram_0+0x78000724>
   20b7c:	61800450 	cmplti	r6,r12,17
   20b80:	01c000f4 	movhi	r7,3
   20b84:	3000ee1e 	bne	r6,zero,20f40 <___svfiprintf_internal_r+0xf7c>
   20b88:	39cf0304 	addi	r7,r7,15372
   20b8c:	03400404 	movi	r13,16
   20b90:	00000406 	br	20ba4 <___svfiprintf_internal_r+0xbe0>
   20b94:	633ffc04 	addi	r12,r12,-16
   20b98:	60c00448 	cmpgei	r3,r12,17
   20b9c:	42000204 	addi	r8,r8,8
   20ba0:	18001b26 	beq	r3,zero,20c10 <___svfiprintf_internal_r+0xc4c>
   20ba4:	21000044 	addi	r4,r4,1
   20ba8:	10800404 	addi	r2,r2,16
   20bac:	41c00015 	stw	r7,0(r8)
   20bb0:	43400115 	stw	r13,4(r8)
   20bb4:	d8800c15 	stw	r2,48(sp)
   20bb8:	d9000b15 	stw	r4,44(sp)
   20bbc:	20c00208 	cmpgei	r3,r4,8
   20bc0:	183ff426 	beq	r3,zero,20b94 <__alt_mem_mcu_subsystem_ram_0+0x78000b94>
   20bc4:	d9800a04 	addi	r6,sp,40
   20bc8:	a00b883a 	mov	r5,r20
   20bcc:	b009883a 	mov	r4,r22
   20bd0:	d9c00615 	stw	r7,24(sp)
   20bd4:	db400315 	stw	r13,12(sp)
   20bd8:	db000215 	stw	r12,8(sp)
   20bdc:	da400115 	stw	r9,4(sp)
   20be0:	001fe040 	call	1fe04 <__ssprint_r>
   20be4:	103deb1e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20be8:	db000217 	ldw	r12,8(sp)
   20bec:	d8800c17 	ldw	r2,48(sp)
   20bf0:	d9000b17 	ldw	r4,44(sp)
   20bf4:	633ffc04 	addi	r12,r12,-16
   20bf8:	60c00448 	cmpgei	r3,r12,17
   20bfc:	9011883a 	mov	r8,r18
   20c00:	d9c00617 	ldw	r7,24(sp)
   20c04:	db400317 	ldw	r13,12(sp)
   20c08:	da400117 	ldw	r9,4(sp)
   20c0c:	183fe51e 	bne	r3,zero,20ba4 <__alt_mem_mcu_subsystem_ram_0+0x78000ba4>
   20c10:	21000044 	addi	r4,r4,1
   20c14:	41800204 	addi	r6,r8,8
   20c18:	1305883a 	add	r2,r2,r12
   20c1c:	41c00015 	stw	r7,0(r8)
   20c20:	43000115 	stw	r12,4(r8)
   20c24:	d8800c15 	stw	r2,48(sp)
   20c28:	d9000b15 	stw	r4,44(sp)
   20c2c:	20c00208 	cmpgei	r3,r4,8
   20c30:	1800a61e 	bne	r3,zero,20ecc <___svfiprintf_internal_r+0xf08>
   20c34:	21400044 	addi	r5,r4,1
   20c38:	30c00204 	addi	r3,r6,8
   20c3c:	3011883a 	mov	r8,r6
   20c40:	003eb806 	br	20724 <__alt_mem_mcu_subsystem_ram_0+0x78000724>
   20c44:	d9800a04 	addi	r6,sp,40
   20c48:	a00b883a 	mov	r5,r20
   20c4c:	b009883a 	mov	r4,r22
   20c50:	001fe040 	call	1fe04 <__ssprint_r>
   20c54:	103dcf1e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20c58:	d8800c17 	ldw	r2,48(sp)
   20c5c:	9007883a 	mov	r3,r18
   20c60:	003ee806 	br	20804 <__alt_mem_mcu_subsystem_ram_0+0x78000804>
   20c64:	d9800a04 	addi	r6,sp,40
   20c68:	a00b883a 	mov	r5,r20
   20c6c:	b009883a 	mov	r4,r22
   20c70:	001fe040 	call	1fe04 <__ssprint_r>
   20c74:	103f1526 	beq	r2,zero,208cc <__alt_mem_mcu_subsystem_ram_0+0x780008cc>
   20c78:	003dc606 	br	20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20c7c:	d9800a04 	addi	r6,sp,40
   20c80:	a00b883a 	mov	r5,r20
   20c84:	b009883a 	mov	r4,r22
   20c88:	da400315 	stw	r9,12(sp)
   20c8c:	db000215 	stw	r12,8(sp)
   20c90:	db400115 	stw	r13,4(sp)
   20c94:	001fe040 	call	1fe04 <__ssprint_r>
   20c98:	103dbe1e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20c9c:	d9000b17 	ldw	r4,44(sp)
   20ca0:	d8800c17 	ldw	r2,48(sp)
   20ca4:	d8c01904 	addi	r3,sp,100
   20ca8:	21400044 	addi	r5,r4,1
   20cac:	9011883a 	mov	r8,r18
   20cb0:	da400317 	ldw	r9,12(sp)
   20cb4:	db000217 	ldw	r12,8(sp)
   20cb8:	db400117 	ldw	r13,4(sp)
   20cbc:	003e8906 	br	206e4 <__alt_mem_mcu_subsystem_ram_0+0x780006e4>
   20cc0:	d9800a04 	addi	r6,sp,40
   20cc4:	a00b883a 	mov	r5,r20
   20cc8:	b009883a 	mov	r4,r22
   20ccc:	da400215 	stw	r9,8(sp)
   20cd0:	db000115 	stw	r12,4(sp)
   20cd4:	001fe040 	call	1fe04 <__ssprint_r>
   20cd8:	103dae1e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20cdc:	d9000b17 	ldw	r4,44(sp)
   20ce0:	d8800c17 	ldw	r2,48(sp)
   20ce4:	d8c01904 	addi	r3,sp,100
   20ce8:	21400044 	addi	r5,r4,1
   20cec:	9011883a 	mov	r8,r18
   20cf0:	da400217 	ldw	r9,8(sp)
   20cf4:	db000117 	ldw	r12,4(sp)
   20cf8:	003e8806 	br	2071c <__alt_mem_mcu_subsystem_ram_0+0x7800071c>
   20cfc:	d9800a04 	addi	r6,sp,40
   20d00:	a00b883a 	mov	r5,r20
   20d04:	b009883a 	mov	r4,r22
   20d08:	001fe040 	call	1fe04 <__ssprint_r>
   20d0c:	103da11e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20d10:	d9000b17 	ldw	r4,44(sp)
   20d14:	d8800c17 	ldw	r2,48(sp)
   20d18:	d8c01904 	addi	r3,sp,100
   20d1c:	21400044 	addi	r5,r4,1
   20d20:	9011883a 	mov	r8,r18
   20d24:	003eb006 	br	207e8 <__alt_mem_mcu_subsystem_ram_0+0x780007e8>
   20d28:	002b883a 	mov	r21,zero
   20d2c:	902f883a 	mov	r23,r18
   20d30:	003f8706 	br	20b50 <__alt_mem_mcu_subsystem_ram_0+0x78000b50>
   20d34:	002b883a 	mov	r21,zero
   20d38:	003f2c06 	br	209ec <__alt_mem_mcu_subsystem_ram_0+0x780009ec>
   20d3c:	982bd7fa 	srai	r21,r19,31
   20d40:	003e0906 	br	20568 <__alt_mem_mcu_subsystem_ram_0+0x78000568>
   20d44:	d9800a04 	addi	r6,sp,40
   20d48:	a00b883a 	mov	r5,r20
   20d4c:	b009883a 	mov	r4,r22
   20d50:	da400315 	stw	r9,12(sp)
   20d54:	db000215 	stw	r12,8(sp)
   20d58:	db400115 	stw	r13,4(sp)
   20d5c:	001fe040 	call	1fe04 <__ssprint_r>
   20d60:	103d8c1e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20d64:	d8800c17 	ldw	r2,48(sp)
   20d68:	d9000b17 	ldw	r4,44(sp)
   20d6c:	9011883a 	mov	r8,r18
   20d70:	da400317 	ldw	r9,12(sp)
   20d74:	db000217 	ldw	r12,8(sp)
   20d78:	db400117 	ldw	r13,4(sp)
   20d7c:	003e4606 	br	20698 <__alt_mem_mcu_subsystem_ram_0+0x78000698>
   20d80:	d9800a04 	addi	r6,sp,40
   20d84:	a00b883a 	mov	r5,r20
   20d88:	b009883a 	mov	r4,r22
   20d8c:	001fe040 	call	1fe04 <__ssprint_r>
   20d90:	103d801e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20d94:	d8800c17 	ldw	r2,48(sp)
   20d98:	003ec606 	br	208b4 <__alt_mem_mcu_subsystem_ram_0+0x780008b4>
   20d9c:	902f883a 	mov	r23,r18
   20da0:	003f6b06 	br	20b50 <__alt_mem_mcu_subsystem_ram_0+0x78000b50>
   20da4:	00c00c04 	movi	r3,48
   20da8:	d88009c5 	stb	r2,39(sp)
   20dac:	d8c00985 	stb	r3,38(sp)
   20db0:	39c00094 	ori	r7,r7,2
   20db4:	00800084 	movi	r2,2
   20db8:	003d5906 	br	20320 <__alt_mem_mcu_subsystem_ram_0+0x78000320>
   20dbc:	d9400017 	ldw	r5,0(sp)
   20dc0:	d9000415 	stw	r4,16(sp)
   20dc4:	2805d7fa 	srai	r2,r5,31
   20dc8:	19400015 	stw	r5,0(r3)
   20dcc:	18800115 	stw	r2,4(r3)
   20dd0:	003c9706 	br	20030 <__alt_mem_mcu_subsystem_ram_0+0x78000030>
   20dd4:	0421c83a 	sub	r16,zero,r16
   20dd8:	ddc00415 	stw	r23,16(sp)
   20ddc:	003da706 	br	2047c <__alt_mem_mcu_subsystem_ram_0+0x7800047c>
   20de0:	e0800043 	ldbu	r2,1(fp)
   20de4:	39c00814 	ori	r7,r7,32
   20de8:	e7000044 	addi	fp,fp,1
   20dec:	10803fcc 	andi	r2,r2,255
   20df0:	1080201c 	xori	r2,r2,128
   20df4:	10bfe004 	addi	r2,r2,-128
   20df8:	003cb206 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20dfc:	01401004 	movi	r5,64
   20e00:	001527c0 	call	1527c <_malloc_r>
   20e04:	a0800015 	stw	r2,0(r20)
   20e08:	a0800415 	stw	r2,16(r20)
   20e0c:	10006b26 	beq	r2,zero,20fbc <___svfiprintf_internal_r+0xff8>
   20e10:	00801004 	movi	r2,64
   20e14:	a0800515 	stw	r2,20(r20)
   20e18:	003c7e06 	br	20014 <__alt_mem_mcu_subsystem_ram_0+0x78000014>
   20e1c:	b809883a 	mov	r4,r23
   20e20:	da000215 	stw	r8,8(sp)
   20e24:	d9c00115 	stw	r7,4(sp)
   20e28:	001676c0 	call	1676c <strlen>
   20e2c:	d9c00117 	ldw	r7,4(sp)
   20e30:	dc400415 	stw	r17,16(sp)
   20e34:	102b883a 	mov	r21,r2
   20e38:	db000943 	ldbu	r12,37(sp)
   20e3c:	3823883a 	mov	r17,r7
   20e40:	0013883a 	mov	r9,zero
   20e44:	da000217 	ldw	r8,8(sp)
   20e48:	003f4106 	br	20b50 <__alt_mem_mcu_subsystem_ram_0+0x78000b50>
   20e4c:	902f883a 	mov	r23,r18
   20e50:	9809883a 	mov	r4,r19
   20e54:	a80b883a 	mov	r5,r21
   20e58:	01800284 	movi	r6,10
   20e5c:	000f883a 	mov	r7,zero
   20e60:	db000315 	stw	r12,12(sp)
   20e64:	da000215 	stw	r8,8(sp)
   20e68:	da400115 	stw	r9,4(sp)
   20e6c:	00124000 	call	12400 <__umoddi3>
   20e70:	10800c04 	addi	r2,r2,48
   20e74:	bdffffc4 	addi	r23,r23,-1
   20e78:	9809883a 	mov	r4,r19
   20e7c:	a80b883a 	mov	r5,r21
   20e80:	b8800005 	stb	r2,0(r23)
   20e84:	01800284 	movi	r6,10
   20e88:	000f883a 	mov	r7,zero
   20e8c:	0011e680 	call	11e68 <__udivdi3>
   20e90:	1027883a 	mov	r19,r2
   20e94:	10c4b03a 	or	r2,r2,r3
   20e98:	182b883a 	mov	r21,r3
   20e9c:	da400117 	ldw	r9,4(sp)
   20ea0:	da000217 	ldw	r8,8(sp)
   20ea4:	db000317 	ldw	r12,12(sp)
   20ea8:	103fe91e 	bne	r2,zero,20e50 <__alt_mem_mcu_subsystem_ram_0+0x78000e50>
   20eac:	003f2706 	br	20b4c <__alt_mem_mcu_subsystem_ram_0+0x78000b4c>
   20eb0:	d8800017 	ldw	r2,0(sp)
   20eb4:	18800015 	stw	r2,0(r3)
   20eb8:	d9000415 	stw	r4,16(sp)
   20ebc:	003c5c06 	br	20030 <__alt_mem_mcu_subsystem_ram_0+0x78000030>
   20ec0:	10c00060 	cmpeqi	r3,r2,1
   20ec4:	183cf126 	beq	r3,zero,2028c <__alt_mem_mcu_subsystem_ram_0+0x7800028c>
   20ec8:	003f0e06 	br	20b04 <__alt_mem_mcu_subsystem_ram_0+0x78000b04>
   20ecc:	d9800a04 	addi	r6,sp,40
   20ed0:	a00b883a 	mov	r5,r20
   20ed4:	b009883a 	mov	r4,r22
   20ed8:	da400115 	stw	r9,4(sp)
   20edc:	001fe040 	call	1fe04 <__ssprint_r>
   20ee0:	103d2c1e 	bne	r2,zero,20394 <__alt_mem_mcu_subsystem_ram_0+0x78000394>
   20ee4:	d9000b17 	ldw	r4,44(sp)
   20ee8:	d8800c17 	ldw	r2,48(sp)
   20eec:	d8c01904 	addi	r3,sp,100
   20ef0:	21400044 	addi	r5,r4,1
   20ef4:	9011883a 	mov	r8,r18
   20ef8:	da400117 	ldw	r9,4(sp)
   20efc:	003e0906 	br	20724 <__alt_mem_mcu_subsystem_ram_0+0x78000724>
   20f00:	1809883a 	mov	r4,r3
   20f04:	39cf0304 	addi	r7,r7,15372
   20f08:	003e2d06 	br	207c0 <__alt_mem_mcu_subsystem_ram_0+0x780007c0>
   20f0c:	488001f0 	cmpltui	r2,r9,7
   20f10:	482b883a 	mov	r21,r9
   20f14:	10000526 	beq	r2,zero,20f2c <___svfiprintf_internal_r+0xf68>
   20f18:	05c000f4 	movhi	r23,3
   20f1c:	a827883a 	mov	r19,r21
   20f20:	dc400415 	stw	r17,16(sp)
   20f24:	bdcdd604 	addi	r23,r23,14168
   20f28:	003d9e06 	br	205a4 <__alt_mem_mcu_subsystem_ram_0+0x780005a4>
   20f2c:	05400184 	movi	r21,6
   20f30:	003ff906 	br	20f18 <__alt_mem_mcu_subsystem_ram_0+0x78000f18>
   20f34:	2039883a 	mov	fp,r4
   20f38:	0013883a 	mov	r9,zero
   20f3c:	003c6206 	br	200c8 <__alt_mem_mcu_subsystem_ram_0+0x780000c8>
   20f40:	180d883a 	mov	r6,r3
   20f44:	2809883a 	mov	r4,r5
   20f48:	39cf0304 	addi	r7,r7,15372
   20f4c:	003f3206 	br	20c18 <__alt_mem_mcu_subsystem_ram_0+0x78000c18>
   20f50:	482b883a 	mov	r21,r9
   20f54:	dc400415 	stw	r17,16(sp)
   20f58:	db000943 	ldbu	r12,37(sp)
   20f5c:	3823883a 	mov	r17,r7
   20f60:	0013883a 	mov	r9,zero
   20f64:	003efa06 	br	20b50 <__alt_mem_mcu_subsystem_ram_0+0x78000b50>
   20f68:	00bfffc4 	movi	r2,-1
   20f6c:	d8800015 	stw	r2,0(sp)
   20f70:	003d0b06 	br	203a0 <__alt_mem_mcu_subsystem_ram_0+0x780003a0>
   20f74:	d8800417 	ldw	r2,16(sp)
   20f78:	12400017 	ldw	r9,0(r2)
   20f7c:	15c00104 	addi	r23,r2,4
   20f80:	4800010e 	bge	r9,zero,20f88 <___svfiprintf_internal_r+0xfc4>
   20f84:	027fffc4 	movi	r9,-1
   20f88:	e0800043 	ldbu	r2,1(fp)
   20f8c:	ddc00415 	stw	r23,16(sp)
   20f90:	2039883a 	mov	fp,r4
   20f94:	10803fcc 	andi	r2,r2,255
   20f98:	1080201c 	xori	r2,r2,128
   20f9c:	10bfe004 	addi	r2,r2,-128
   20fa0:	003c4806 	br	200c4 <__alt_mem_mcu_subsystem_ram_0+0x780000c4>
   20fa4:	d9800945 	stb	r6,37(sp)
   20fa8:	003eb906 	br	20a90 <__alt_mem_mcu_subsystem_ram_0+0x78000a90>
   20fac:	d9800945 	stb	r6,37(sp)
   20fb0:	003d6606 	br	2054c <__alt_mem_mcu_subsystem_ram_0+0x7800054c>
   20fb4:	d9800945 	stb	r6,37(sp)
   20fb8:	003ea006 	br	20a3c <__alt_mem_mcu_subsystem_ram_0+0x78000a3c>
   20fbc:	00800304 	movi	r2,12
   20fc0:	b0800015 	stw	r2,0(r22)
   20fc4:	00bfffc4 	movi	r2,-1
   20fc8:	d8800015 	stw	r2,0(sp)
   20fcc:	003cf406 	br	203a0 <__alt_mem_mcu_subsystem_ram_0+0x780003a0>
   20fd0:	d9800945 	stb	r6,37(sp)
   20fd4:	003d0d06 	br	2040c <__alt_mem_mcu_subsystem_ram_0+0x7800040c>
   20fd8:	d9800945 	stb	r6,37(sp)
   20fdc:	003e6a06 	br	20988 <__alt_mem_mcu_subsystem_ram_0+0x78000988>
   20fe0:	d9800945 	stb	r6,37(sp)
   20fe4:	003e7706 	br	209c4 <__alt_mem_mcu_subsystem_ram_0+0x780009c4>

00020fe8 <_sungetc_r>:
   20fe8:	defffc04 	addi	sp,sp,-16
   20fec:	dfc00315 	stw	ra,12(sp)
   20ff0:	dc800215 	stw	r18,8(sp)
   20ff4:	dc400115 	stw	r17,4(sp)
   20ff8:	dc000015 	stw	r16,0(sp)
   20ffc:	28bfffd8 	cmpnei	r2,r5,-1
   21000:	10001c26 	beq	r2,zero,21074 <_sungetc_r+0x8c>
   21004:	3080030b 	ldhu	r2,12(r6)
   21008:	30c00c17 	ldw	r3,48(r6)
   2100c:	2c803fcc 	andi	r18,r5,255
   21010:	10bff7cc 	andi	r2,r2,65503
   21014:	3080030d 	sth	r2,12(r6)
   21018:	30800117 	ldw	r2,4(r6)
   2101c:	18001726 	beq	r3,zero,2107c <_sungetc_r+0x94>
   21020:	30c00d17 	ldw	r3,52(r6)
   21024:	3021883a 	mov	r16,r6
   21028:	2823883a 	mov	r17,r5
   2102c:	10c00e0e 	bge	r2,r3,21068 <_sungetc_r+0x80>
   21030:	80800017 	ldw	r2,0(r16)
   21034:	10ffffc4 	addi	r3,r2,-1
   21038:	80c00015 	stw	r3,0(r16)
   2103c:	147fffc5 	stb	r17,-1(r2)
   21040:	80800117 	ldw	r2,4(r16)
   21044:	10800044 	addi	r2,r2,1
   21048:	80800115 	stw	r2,4(r16)
   2104c:	9005883a 	mov	r2,r18
   21050:	dfc00317 	ldw	ra,12(sp)
   21054:	dc800217 	ldw	r18,8(sp)
   21058:	dc400117 	ldw	r17,4(sp)
   2105c:	dc000017 	ldw	r16,0(sp)
   21060:	dec00404 	addi	sp,sp,16
   21064:	f800283a 	ret
   21068:	300b883a 	mov	r5,r6
   2106c:	00221800 	call	22180 <__submore>
   21070:	103fef26 	beq	r2,zero,21030 <__alt_mem_mcu_subsystem_ram_0+0x78001030>
   21074:	04bfffc4 	movi	r18,-1
   21078:	003ff406 	br	2104c <__alt_mem_mcu_subsystem_ram_0+0x7800104c>
   2107c:	31000417 	ldw	r4,16(r6)
   21080:	30c00017 	ldw	r3,0(r6)
   21084:	20000326 	beq	r4,zero,21094 <_sungetc_r+0xac>
   21088:	20c0022e 	bgeu	r4,r3,21094 <_sungetc_r+0xac>
   2108c:	193fffc3 	ldbu	r4,-1(r3)
   21090:	24800c26 	beq	r4,r18,210c4 <_sungetc_r+0xdc>
   21094:	30800f15 	stw	r2,60(r6)
   21098:	008000c4 	movi	r2,3
   2109c:	31c01004 	addi	r7,r6,64
   210a0:	31001084 	addi	r4,r6,66
   210a4:	30800d15 	stw	r2,52(r6)
   210a8:	00800044 	movi	r2,1
   210ac:	30c00e15 	stw	r3,56(r6)
   210b0:	31c00c15 	stw	r7,48(r6)
   210b4:	31401085 	stb	r5,66(r6)
   210b8:	31000015 	stw	r4,0(r6)
   210bc:	30800115 	stw	r2,4(r6)
   210c0:	003fe206 	br	2104c <__alt_mem_mcu_subsystem_ram_0+0x7800104c>
   210c4:	18ffffc4 	addi	r3,r3,-1
   210c8:	10800044 	addi	r2,r2,1
   210cc:	30c00015 	stw	r3,0(r6)
   210d0:	30800115 	stw	r2,4(r6)
   210d4:	003fdd06 	br	2104c <__alt_mem_mcu_subsystem_ram_0+0x7800104c>

000210d8 <__ssrefill_r>:
   210d8:	defffe04 	addi	sp,sp,-8
   210dc:	dc000015 	stw	r16,0(sp)
   210e0:	2821883a 	mov	r16,r5
   210e4:	29400c17 	ldw	r5,48(r5)
   210e8:	dfc00115 	stw	ra,4(sp)
   210ec:	28000e26 	beq	r5,zero,21128 <__ssrefill_r+0x50>
   210f0:	80801004 	addi	r2,r16,64
   210f4:	28800126 	beq	r5,r2,210fc <__ssrefill_r+0x24>
   210f8:	001d1880 	call	1d188 <_free_r>
   210fc:	80800f17 	ldw	r2,60(r16)
   21100:	80000c15 	stw	zero,48(r16)
   21104:	80800115 	stw	r2,4(r16)
   21108:	10000726 	beq	r2,zero,21128 <__ssrefill_r+0x50>
   2110c:	80c00e17 	ldw	r3,56(r16)
   21110:	0005883a 	mov	r2,zero
   21114:	80c00015 	stw	r3,0(r16)
   21118:	dfc00117 	ldw	ra,4(sp)
   2111c:	dc000017 	ldw	r16,0(sp)
   21120:	dec00204 	addi	sp,sp,8
   21124:	f800283a 	ret
   21128:	8080030b 	ldhu	r2,12(r16)
   2112c:	80c00417 	ldw	r3,16(r16)
   21130:	80000115 	stw	zero,4(r16)
   21134:	10800814 	ori	r2,r2,32
   21138:	8080030d 	sth	r2,12(r16)
   2113c:	80c00015 	stw	r3,0(r16)
   21140:	00bfffc4 	movi	r2,-1
   21144:	003ff406 	br	21118 <__alt_mem_mcu_subsystem_ram_0+0x78001118>

00021148 <_sfread_r>:
   21148:	defff704 	addi	sp,sp,-36
   2114c:	dd400515 	stw	r21,20(sp)
   21150:	39ab383a 	mul	r21,r7,r6
   21154:	dc000015 	stw	r16,0(sp)
   21158:	dfc00815 	stw	ra,32(sp)
   2115c:	ddc00715 	stw	r23,28(sp)
   21160:	dd800615 	stw	r22,24(sp)
   21164:	dd000415 	stw	r20,16(sp)
   21168:	dcc00315 	stw	r19,12(sp)
   2116c:	dc800215 	stw	r18,8(sp)
   21170:	dc400115 	stw	r17,4(sp)
   21174:	dc000917 	ldw	r16,36(sp)
   21178:	a8002026 	beq	r21,zero,211fc <_sfread_r+0xb4>
   2117c:	302f883a 	mov	r23,r6
   21180:	382d883a 	mov	r22,r7
   21184:	2029883a 	mov	r20,r4
   21188:	2827883a 	mov	r19,r5
   2118c:	a825883a 	mov	r18,r21
   21190:	00000b06 	br	211c0 <_sfread_r+0x78>
   21194:	0015ac00 	call	15ac0 <memcpy>
   21198:	80800017 	ldw	r2,0(r16)
   2119c:	80000115 	stw	zero,4(r16)
   211a0:	800b883a 	mov	r5,r16
   211a4:	1445883a 	add	r2,r2,r17
   211a8:	80800015 	stw	r2,0(r16)
   211ac:	a009883a 	mov	r4,r20
   211b0:	9c67883a 	add	r19,r19,r17
   211b4:	9465c83a 	sub	r18,r18,r17
   211b8:	00210d80 	call	210d8 <__ssrefill_r>
   211bc:	10001b1e 	bne	r2,zero,2122c <_sfread_r+0xe4>
   211c0:	84400117 	ldw	r17,4(r16)
   211c4:	80800017 	ldw	r2,0(r16)
   211c8:	9809883a 	mov	r4,r19
   211cc:	880d883a 	mov	r6,r17
   211d0:	100b883a 	mov	r5,r2
   211d4:	8cbfef36 	bltu	r17,r18,21194 <__alt_mem_mcu_subsystem_ram_0+0x78001194>
   211d8:	900d883a 	mov	r6,r18
   211dc:	0015ac00 	call	15ac0 <memcpy>
   211e0:	80c00117 	ldw	r3,4(r16)
   211e4:	80800017 	ldw	r2,0(r16)
   211e8:	b02b883a 	mov	r21,r22
   211ec:	1c87c83a 	sub	r3,r3,r18
   211f0:	14a5883a 	add	r18,r2,r18
   211f4:	80c00115 	stw	r3,4(r16)
   211f8:	84800015 	stw	r18,0(r16)
   211fc:	a805883a 	mov	r2,r21
   21200:	dfc00817 	ldw	ra,32(sp)
   21204:	ddc00717 	ldw	r23,28(sp)
   21208:	dd800617 	ldw	r22,24(sp)
   2120c:	dd400517 	ldw	r21,20(sp)
   21210:	dd000417 	ldw	r20,16(sp)
   21214:	dcc00317 	ldw	r19,12(sp)
   21218:	dc800217 	ldw	r18,8(sp)
   2121c:	dc400117 	ldw	r17,4(sp)
   21220:	dc000017 	ldw	r16,0(sp)
   21224:	dec00904 	addi	sp,sp,36
   21228:	f800283a 	ret
   2122c:	ac89c83a 	sub	r4,r21,r18
   21230:	b80b883a 	mov	r5,r23
   21234:	0012a540 	call	12a54 <__udivsi3>
   21238:	102b883a 	mov	r21,r2
   2123c:	003fef06 	br	211fc <__alt_mem_mcu_subsystem_ram_0+0x780011fc>

00021240 <__ssvfiscanf_r>:
   21240:	2880030b 	ldhu	r2,12(r5)
   21244:	deffa304 	addi	sp,sp,-372
   21248:	df005b15 	stw	fp,364(sp)
   2124c:	dd405815 	stw	r21,352(sp)
   21250:	dcc05615 	stw	r19,344(sp)
   21254:	dfc05c15 	stw	ra,368(sp)
   21258:	ddc05a15 	stw	r23,360(sp)
   2125c:	dd805915 	stw	r22,356(sp)
   21260:	dd005715 	stw	r20,348(sp)
   21264:	dc805515 	stw	r18,340(sp)
   21268:	dc405415 	stw	r17,336(sp)
   2126c:	dc005315 	stw	r16,332(sp)
   21270:	10c8000c 	andi	r3,r2,8192
   21274:	d9c00215 	stw	r7,8(sp)
   21278:	2839883a 	mov	fp,r5
   2127c:	202b883a 	mov	r21,r4
   21280:	3027883a 	mov	r19,r6
   21284:	1800061e 	bne	r3,zero,212a0 <__ssvfiscanf_r+0x60>
   21288:	28c01917 	ldw	r3,100(r5)
   2128c:	0137ffc4 	movi	r4,-8193
   21290:	10880014 	ori	r2,r2,8192
   21294:	1906703a 	and	r3,r3,r4
   21298:	2880030d 	sth	r2,12(r5)
   2129c:	28c01915 	stw	r3,100(r5)
   212a0:	002f883a 	mov	r23,zero
   212a4:	002d883a 	mov	r22,zero
   212a8:	0021883a 	mov	r16,zero
   212ac:	d8000115 	stw	zero,4(sp)
   212b0:	98800003 	ldbu	r2,0(r19)
   212b4:	9d000044 	addi	r20,r19,1
   212b8:	d8800615 	stw	r2,24(sp)
   212bc:	1000a526 	beq	r2,zero,21554 <__ssvfiscanf_r+0x314>
   212c0:	00152280 	call	15228 <__locale_ctype_ptr>
   212c4:	d8c00617 	ldw	r3,24(sp)
   212c8:	10c5883a 	add	r2,r2,r3
   212cc:	10800043 	ldbu	r2,1(r2)
   212d0:	1080020c 	andi	r2,r2,8
   212d4:	1000861e 	bne	r2,zero,214f0 <__ssvfiscanf_r+0x2b0>
   212d8:	18c00958 	cmpnei	r3,r3,37
   212dc:	1800ab1e 	bne	r3,zero,2158c <__ssvfiscanf_r+0x34c>
   212e0:	99400043 	ldbu	r5,1(r19)
   212e4:	0025883a 	mov	r18,zero
   212e8:	0023883a 	mov	r17,zero
   212ec:	280690ba 	slli	r3,r5,2
   212f0:	010000b4 	movhi	r4,2
   212f4:	28801e68 	cmpgeui	r2,r5,121
   212f8:	1909883a 	add	r4,r3,r4
   212fc:	a4c00044 	addi	r19,r20,1
   21300:	10015b1e 	bne	r2,zero,21870 <__ssvfiscanf_r+0x630>
   21304:	2084c317 	ldw	r2,4876(r4)
   21308:	1000683a 	jmp	r2
   2130c:	000215f4 	movhi	zero,2135
   21310:	00021870 	cmpltui	zero,zero,2145
   21314:	00021870 	cmpltui	zero,zero,2145
   21318:	00021870 	cmpltui	zero,zero,2145
   2131c:	00021870 	cmpltui	zero,zero,2145
   21320:	00021870 	cmpltui	zero,zero,2145
   21324:	00021870 	cmpltui	zero,zero,2145
   21328:	00021870 	cmpltui	zero,zero,2145
   2132c:	00021870 	cmpltui	zero,zero,2145
   21330:	00021870 	cmpltui	zero,zero,2145
   21334:	00021870 	cmpltui	zero,zero,2145
   21338:	00021870 	cmpltui	zero,zero,2145
   2133c:	00021870 	cmpltui	zero,zero,2145
   21340:	00021870 	cmpltui	zero,zero,2145
   21344:	00021870 	cmpltui	zero,zero,2145
   21348:	00021870 	cmpltui	zero,zero,2145
   2134c:	00021870 	cmpltui	zero,zero,2145
   21350:	00021870 	cmpltui	zero,zero,2145
   21354:	00021870 	cmpltui	zero,zero,2145
   21358:	00021870 	cmpltui	zero,zero,2145
   2135c:	00021870 	cmpltui	zero,zero,2145
   21360:	00021870 	cmpltui	zero,zero,2145
   21364:	00021870 	cmpltui	zero,zero,2145
   21368:	00021870 	cmpltui	zero,zero,2145
   2136c:	00021870 	cmpltui	zero,zero,2145
   21370:	00021870 	cmpltui	zero,zero,2145
   21374:	00021870 	cmpltui	zero,zero,2145
   21378:	00021870 	cmpltui	zero,zero,2145
   2137c:	00021870 	cmpltui	zero,zero,2145
   21380:	00021870 	cmpltui	zero,zero,2145
   21384:	00021870 	cmpltui	zero,zero,2145
   21388:	00021870 	cmpltui	zero,zero,2145
   2138c:	00021870 	cmpltui	zero,zero,2145
   21390:	00021870 	cmpltui	zero,zero,2145
   21394:	00021870 	cmpltui	zero,zero,2145
   21398:	00021870 	cmpltui	zero,zero,2145
   2139c:	00021870 	cmpltui	zero,zero,2145
   213a0:	00021588 	cmpgei	zero,zero,2134
   213a4:	00021870 	cmpltui	zero,zero,2145
   213a8:	00021870 	cmpltui	zero,zero,2145
   213ac:	00021870 	cmpltui	zero,zero,2145
   213b0:	00021870 	cmpltui	zero,zero,2145
   213b4:	0002185c 	xori	zero,zero,2145
   213b8:	00021870 	cmpltui	zero,zero,2145
   213bc:	00021870 	cmpltui	zero,zero,2145
   213c0:	00021870 	cmpltui	zero,zero,2145
   213c4:	00021870 	cmpltui	zero,zero,2145
   213c8:	00021870 	cmpltui	zero,zero,2145
   213cc:	00021840 	call	2184 <ip_process_rx+0x414>
   213d0:	00021840 	call	2184 <ip_process_rx+0x414>
   213d4:	00021840 	call	2184 <ip_process_rx+0x414>
   213d8:	00021840 	call	2184 <ip_process_rx+0x414>
   213dc:	00021840 	call	2184 <ip_process_rx+0x414>
   213e0:	00021840 	call	2184 <ip_process_rx+0x414>
   213e4:	00021840 	call	2184 <ip_process_rx+0x414>
   213e8:	00021840 	call	2184 <ip_process_rx+0x414>
   213ec:	00021840 	call	2184 <ip_process_rx+0x414>
   213f0:	00021840 	call	2184 <ip_process_rx+0x414>
   213f4:	00021870 	cmpltui	zero,zero,2145
   213f8:	00021870 	cmpltui	zero,zero,2145
   213fc:	00021870 	cmpltui	zero,zero,2145
   21400:	00021870 	cmpltui	zero,zero,2145
   21404:	00021870 	cmpltui	zero,zero,2145
   21408:	00021870 	cmpltui	zero,zero,2145
   2140c:	00021870 	cmpltui	zero,zero,2145
   21410:	00021870 	cmpltui	zero,zero,2145
   21414:	00021870 	cmpltui	zero,zero,2145
   21418:	00021870 	cmpltui	zero,zero,2145
   2141c:	00021828 	cmpgeui	zero,zero,2144
   21420:	00021870 	cmpltui	zero,zero,2145
   21424:	00021870 	cmpltui	zero,zero,2145
   21428:	00021870 	cmpltui	zero,zero,2145
   2142c:	00021870 	cmpltui	zero,zero,2145
   21430:	00021870 	cmpltui	zero,zero,2145
   21434:	00021870 	cmpltui	zero,zero,2145
   21438:	00021870 	cmpltui	zero,zero,2145
   2143c:	00021814 	movui	zero,2144
   21440:	00021870 	cmpltui	zero,zero,2145
   21444:	00021870 	cmpltui	zero,zero,2145
   21448:	000217fc 	xorhi	zero,zero,2143
   2144c:	00021870 	cmpltui	zero,zero,2145
   21450:	00021870 	cmpltui	zero,zero,2145
   21454:	00021870 	cmpltui	zero,zero,2145
   21458:	00021870 	cmpltui	zero,zero,2145
   2145c:	00021870 	cmpltui	zero,zero,2145
   21460:	00021870 	cmpltui	zero,zero,2145
   21464:	00021870 	cmpltui	zero,zero,2145
   21468:	00021870 	cmpltui	zero,zero,2145
   2146c:	000217e4 	muli	zero,zero,2143
   21470:	00021870 	cmpltui	zero,zero,2145
   21474:	00021870 	cmpltui	zero,zero,2145
   21478:	000217c8 	cmpgei	zero,zero,2143
   2147c:	00021870 	cmpltui	zero,zero,2145
   21480:	00021870 	cmpltui	zero,zero,2145
   21484:	00021870 	cmpltui	zero,zero,2145
   21488:	00021870 	cmpltui	zero,zero,2145
   2148c:	00021870 	cmpltui	zero,zero,2145
   21490:	00021870 	cmpltui	zero,zero,2145
   21494:	00021870 	cmpltui	zero,zero,2145
   21498:	00021734 	movhi	zero,2140
   2149c:	00021708 	cmpgei	zero,zero,2140
   214a0:	00021870 	cmpltui	zero,zero,2145
   214a4:	00021870 	cmpltui	zero,zero,2145
   214a8:	00021870 	cmpltui	zero,zero,2145
   214ac:	000216f4 	movhi	zero,2139
   214b0:	00021600 	call	2160 <ip_process_rx+0x3f0>
   214b4:	00021870 	cmpltui	zero,zero,2145
   214b8:	00021870 	cmpltui	zero,zero,2145
   214bc:	000217b0 	cmpltui	zero,zero,2142
   214c0:	00021870 	cmpltui	zero,zero,2145
   214c4:	00021788 	cmpgei	zero,zero,2142
   214c8:	00021774 	movhi	zero,2141
   214cc:	0002175c 	xori	zero,zero,2141
   214d0:	00021870 	cmpltui	zero,zero,2145
   214d4:	00021870 	cmpltui	zero,zero,2145
   214d8:	00021754 	movui	zero,2141
   214dc:	00021870 	cmpltui	zero,zero,2145
   214e0:	00021740 	call	2174 <ip_process_rx+0x404>
   214e4:	00021870 	cmpltui	zero,zero,2145
   214e8:	00021870 	cmpltui	zero,zero,2145
   214ec:	000217e4 	muli	zero,zero,2143
   214f0:	e0800117 	ldw	r2,4(fp)
   214f4:	00800e0e 	bge	zero,r2,21530 <__ssvfiscanf_r+0x2f0>
   214f8:	00152280 	call	15228 <__locale_ctype_ptr>
   214fc:	e0c00017 	ldw	r3,0(fp)
   21500:	19000003 	ldbu	r4,0(r3)
   21504:	18c00044 	addi	r3,r3,1
   21508:	1105883a 	add	r2,r2,r4
   2150c:	10800043 	ldbu	r2,1(r2)
   21510:	1080020c 	andi	r2,r2,8
   21514:	10000a26 	beq	r2,zero,21540 <__ssvfiscanf_r+0x300>
   21518:	e0800117 	ldw	r2,4(fp)
   2151c:	e0c00015 	stw	r3,0(fp)
   21520:	84000044 	addi	r16,r16,1
   21524:	10bfffc4 	addi	r2,r2,-1
   21528:	e0800115 	stw	r2,4(fp)
   2152c:	00bff216 	blt	zero,r2,214f8 <__alt_mem_mcu_subsystem_ram_0+0x780014f8>
   21530:	e00b883a 	mov	r5,fp
   21534:	a809883a 	mov	r4,r21
   21538:	00210d80 	call	210d8 <__ssrefill_r>
   2153c:	103fee26 	beq	r2,zero,214f8 <__alt_mem_mcu_subsystem_ram_0+0x780014f8>
   21540:	a027883a 	mov	r19,r20
   21544:	98800003 	ldbu	r2,0(r19)
   21548:	9d000044 	addi	r20,r19,1
   2154c:	d8800615 	stw	r2,24(sp)
   21550:	103f5b1e 	bne	r2,zero,212c0 <__alt_mem_mcu_subsystem_ram_0+0x780012c0>
   21554:	d8800117 	ldw	r2,4(sp)
   21558:	dfc05c17 	ldw	ra,368(sp)
   2155c:	df005b17 	ldw	fp,364(sp)
   21560:	ddc05a17 	ldw	r23,360(sp)
   21564:	dd805917 	ldw	r22,356(sp)
   21568:	dd405817 	ldw	r21,352(sp)
   2156c:	dd005717 	ldw	r20,348(sp)
   21570:	dcc05617 	ldw	r19,344(sp)
   21574:	dc805517 	ldw	r18,340(sp)
   21578:	dc405417 	ldw	r17,336(sp)
   2157c:	dc005317 	ldw	r16,332(sp)
   21580:	dec05d04 	addi	sp,sp,372
   21584:	f800283a 	ret
   21588:	9829883a 	mov	r20,r19
   2158c:	e0800117 	ldw	r2,4(fp)
   21590:	0082260e 	bge	zero,r2,21e2c <__ssvfiscanf_r+0xbec>
   21594:	e0800017 	ldw	r2,0(fp)
   21598:	a0ffffc3 	ldbu	r3,-1(r20)
   2159c:	11000003 	ldbu	r4,0(r2)
   215a0:	20ffec1e 	bne	r4,r3,21554 <__alt_mem_mcu_subsystem_ram_0+0x78001554>
   215a4:	e0c00117 	ldw	r3,4(fp)
   215a8:	10800044 	addi	r2,r2,1
   215ac:	e0800015 	stw	r2,0(fp)
   215b0:	18bfffc4 	addi	r2,r3,-1
   215b4:	e0800115 	stw	r2,4(fp)
   215b8:	84000044 	addi	r16,r16,1
   215bc:	a027883a 	mov	r19,r20
   215c0:	003f3b06 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   215c4:	e00b883a 	mov	r5,fp
   215c8:	a809883a 	mov	r4,r21
   215cc:	d8c00415 	stw	r3,16(sp)
   215d0:	00210d80 	call	210d8 <__ssrefill_r>
   215d4:	d8c00417 	ldw	r3,16(sp)
   215d8:	1002e026 	beq	r2,zero,2215c <__ssvfiscanf_r+0xf1c>
   215dc:	18026d26 	beq	r3,zero,21f94 <__ssvfiscanf_r+0xd54>
   215e0:	d8800117 	ldw	r2,4(sp)
   215e4:	10000326 	beq	r2,zero,215f4 <__ssvfiscanf_r+0x3b4>
   215e8:	e080030b 	ldhu	r2,12(fp)
   215ec:	1080100c 	andi	r2,r2,64
   215f0:	103fd826 	beq	r2,zero,21554 <__alt_mem_mcu_subsystem_ram_0+0x78001554>
   215f4:	00bfffc4 	movi	r2,-1
   215f8:	d8800115 	stw	r2,4(sp)
   215fc:	003fd506 	br	21554 <__alt_mem_mcu_subsystem_ram_0+0x78001554>
   21600:	05c000b4 	movhi	r23,2
   21604:	bdd0cd04 	addi	r23,r23,17204
   21608:	002d883a 	mov	r22,zero
   2160c:	050000c4 	movi	r20,3
   21610:	e0800117 	ldw	r2,4(fp)
   21614:	0080420e 	bge	zero,r2,21720 <__ssvfiscanf_r+0x4e0>
   21618:	9080100c 	andi	r2,r18,64
   2161c:	10002626 	beq	r2,zero,216b8 <__ssvfiscanf_r+0x478>
   21620:	a08000a0 	cmpeqi	r2,r20,2
   21624:	10017b1e 	bne	r2,zero,21c14 <__ssvfiscanf_r+0x9d4>
   21628:	a08000e0 	cmpeqi	r2,r20,3
   2162c:	1000b61e 	bne	r2,zero,21908 <__ssvfiscanf_r+0x6c8>
   21630:	a5000060 	cmpeqi	r20,r20,1
   21634:	a0009b1e 	bne	r20,zero,218a4 <__ssvfiscanf_r+0x664>
   21638:	8800011e 	bne	r17,zero,21640 <__ssvfiscanf_r+0x400>
   2163c:	04400044 	movi	r17,1
   21640:	90c0040c 	andi	r3,r18,16
   21644:	9080004c 	andi	r2,r18,1
   21648:	d8c00415 	stw	r3,16(sp)
   2164c:	10025b1e 	bne	r2,zero,21fbc <__ssvfiscanf_r+0xd7c>
   21650:	d8800417 	ldw	r2,16(sp)
   21654:	1001e626 	beq	r2,zero,21df0 <__ssvfiscanf_r+0xbb0>
   21658:	0025883a 	mov	r18,zero
   2165c:	00000606 	br	21678 <__ssvfiscanf_r+0x438>
   21660:	1887883a 	add	r3,r3,r2
   21664:	e0c00015 	stw	r3,0(fp)
   21668:	90a5883a 	add	r18,r18,r2
   2166c:	88a3c83a 	sub	r17,r17,r2
   21670:	00210d80 	call	210d8 <__ssrefill_r>
   21674:	1002941e 	bne	r2,zero,220c8 <__ssvfiscanf_r+0xe88>
   21678:	e0800117 	ldw	r2,4(fp)
   2167c:	e00b883a 	mov	r5,fp
   21680:	a809883a 	mov	r4,r21
   21684:	e0c00017 	ldw	r3,0(fp)
   21688:	147ff516 	blt	r2,r17,21660 <__alt_mem_mcu_subsystem_ram_0+0x78001660>
   2168c:	1445c83a 	sub	r2,r2,r17
   21690:	1c47883a 	add	r3,r3,r17
   21694:	9465883a 	add	r18,r18,r17
   21698:	e0800115 	stw	r2,4(fp)
   2169c:	e0c00015 	stw	r3,0(fp)
   216a0:	84a1883a 	add	r16,r16,r18
   216a4:	003f0206 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   216a8:	e00b883a 	mov	r5,fp
   216ac:	a809883a 	mov	r4,r21
   216b0:	00210d80 	call	210d8 <__ssrefill_r>
   216b4:	103fca1e 	bne	r2,zero,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   216b8:	00152280 	call	15228 <__locale_ctype_ptr>
   216bc:	e0c00017 	ldw	r3,0(fp)
   216c0:	19000003 	ldbu	r4,0(r3)
   216c4:	18c00044 	addi	r3,r3,1
   216c8:	1105883a 	add	r2,r2,r4
   216cc:	10800043 	ldbu	r2,1(r2)
   216d0:	1080020c 	andi	r2,r2,8
   216d4:	103fd226 	beq	r2,zero,21620 <__alt_mem_mcu_subsystem_ram_0+0x78001620>
   216d8:	e0800117 	ldw	r2,4(fp)
   216dc:	84000044 	addi	r16,r16,1
   216e0:	10bfffc4 	addi	r2,r2,-1
   216e4:	e0800115 	stw	r2,4(fp)
   216e8:	00bfef0e 	bge	zero,r2,216a8 <__alt_mem_mcu_subsystem_ram_0+0x780016a8>
   216ec:	e0c00015 	stw	r3,0(fp)
   216f0:	003ff106 	br	216b8 <__alt_mem_mcu_subsystem_ram_0+0x780016b8>
   216f4:	a0800043 	ldbu	r2,1(r20)
   216f8:	94800114 	ori	r18,r18,4
   216fc:	9829883a 	mov	r20,r19
   21700:	11403fcc 	andi	r5,r2,255
   21704:	003ef906 	br	212ec <__alt_mem_mcu_subsystem_ram_0+0x780012ec>
   21708:	e0800117 	ldw	r2,4(fp)
   2170c:	05c000b4 	movhi	r23,2
   21710:	bdd0cd04 	addi	r23,r23,17204
   21714:	05800284 	movi	r22,10
   21718:	050000c4 	movi	r20,3
   2171c:	00bfbe16 	blt	zero,r2,21618 <__alt_mem_mcu_subsystem_ram_0+0x78001618>
   21720:	e00b883a 	mov	r5,fp
   21724:	a809883a 	mov	r4,r21
   21728:	00210d80 	call	210d8 <__ssrefill_r>
   2172c:	103fba26 	beq	r2,zero,21618 <__alt_mem_mcu_subsystem_ram_0+0x78001618>
   21730:	003fab06 	br	215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21734:	94801014 	ori	r18,r18,64
   21738:	0029883a 	mov	r20,zero
   2173c:	003fb406 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   21740:	05c000b4 	movhi	r23,2
   21744:	bdff5704 	addi	r23,r23,-676
   21748:	05800284 	movi	r22,10
   2174c:	050000c4 	movi	r20,3
   21750:	003faf06 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   21754:	05000084 	movi	r20,2
   21758:	003fad06 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   2175c:	05c000b4 	movhi	r23,2
   21760:	94808814 	ori	r18,r18,544
   21764:	bdff5704 	addi	r23,r23,-676
   21768:	05800404 	movi	r22,16
   2176c:	050000c4 	movi	r20,3
   21770:	003fa706 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   21774:	05c000b4 	movhi	r23,2
   21778:	bdff5704 	addi	r23,r23,-676
   2177c:	05800204 	movi	r22,8
   21780:	050000c4 	movi	r20,3
   21784:	003fa206 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   21788:	9080040c 	andi	r2,r18,16
   2178c:	103ec81e 	bne	r2,zero,212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21790:	d8c00217 	ldw	r3,8(sp)
   21794:	9080010c 	andi	r2,r18,4
   21798:	19000104 	addi	r4,r3,4
   2179c:	18c00017 	ldw	r3,0(r3)
   217a0:	10025c26 	beq	r2,zero,22114 <__ssvfiscanf_r+0xed4>
   217a4:	1c00000d 	sth	r16,0(r3)
   217a8:	d9000215 	stw	r4,8(sp)
   217ac:	003ec006 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   217b0:	a1400043 	ldbu	r5,1(r20)
   217b4:	28801b18 	cmpnei	r2,r5,108
   217b8:	10025126 	beq	r2,zero,22100 <__ssvfiscanf_r+0xec0>
   217bc:	94800054 	ori	r18,r18,1
   217c0:	9829883a 	mov	r20,r19
   217c4:	003ec906 	br	212ec <__alt_mem_mcu_subsystem_ram_0+0x780012ec>
   217c8:	980b883a 	mov	r5,r19
   217cc:	d9001304 	addi	r4,sp,76
   217d0:	00240340 	call	24034 <__sccl>
   217d4:	1027883a 	mov	r19,r2
   217d8:	94801014 	ori	r18,r18,64
   217dc:	05000044 	movi	r20,1
   217e0:	003f8b06 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   217e4:	05c000b4 	movhi	r23,2
   217e8:	94808014 	ori	r18,r18,512
   217ec:	bdff5704 	addi	r23,r23,-676
   217f0:	05800404 	movi	r22,16
   217f4:	050000c4 	movi	r20,3
   217f8:	003f8506 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   217fc:	05c000b4 	movhi	r23,2
   21800:	94800054 	ori	r18,r18,1
   21804:	bdff5704 	addi	r23,r23,-676
   21808:	05800204 	movi	r22,8
   2180c:	050000c4 	movi	r20,3
   21810:	003f7f06 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   21814:	a0800043 	ldbu	r2,1(r20)
   21818:	94800094 	ori	r18,r18,2
   2181c:	9829883a 	mov	r20,r19
   21820:	11403fcc 	andi	r5,r2,255
   21824:	003eb106 	br	212ec <__alt_mem_mcu_subsystem_ram_0+0x780012ec>
   21828:	05c000b4 	movhi	r23,2
   2182c:	94800054 	ori	r18,r18,1
   21830:	bdd0cd04 	addi	r23,r23,17204
   21834:	05800284 	movi	r22,10
   21838:	050000c4 	movi	r20,3
   2183c:	003f7406 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   21840:	8c4002a4 	muli	r17,r17,10
   21844:	a0800043 	ldbu	r2,1(r20)
   21848:	9829883a 	mov	r20,r19
   2184c:	8963883a 	add	r17,r17,r5
   21850:	8c7ff404 	addi	r17,r17,-48
   21854:	11403fcc 	andi	r5,r2,255
   21858:	003ea406 	br	212ec <__alt_mem_mcu_subsystem_ram_0+0x780012ec>
   2185c:	a0800043 	ldbu	r2,1(r20)
   21860:	94800414 	ori	r18,r18,16
   21864:	9829883a 	mov	r20,r19
   21868:	11403fcc 	andi	r5,r2,255
   2186c:	003e9f06 	br	212ec <__alt_mem_mcu_subsystem_ram_0+0x780012ec>
   21870:	d9400315 	stw	r5,12(sp)
   21874:	00152280 	call	15228 <__locale_ctype_ptr>
   21878:	d9400317 	ldw	r5,12(sp)
   2187c:	05c000b4 	movhi	r23,2
   21880:	1145883a 	add	r2,r2,r5
   21884:	10800043 	ldbu	r2,1(r2)
   21888:	108000cc 	andi	r2,r2,3
   2188c:	10800058 	cmpnei	r2,r2,1
   21890:	10021626 	beq	r2,zero,220ec <__ssvfiscanf_r+0xeac>
   21894:	bdd0cd04 	addi	r23,r23,17204
   21898:	05800284 	movi	r22,10
   2189c:	050000c4 	movi	r20,3
   218a0:	003f5b06 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   218a4:	8800011e 	bne	r17,zero,218ac <__ssvfiscanf_r+0x66c>
   218a8:	047fffc4 	movi	r17,-1
   218ac:	9480040c 	andi	r18,r18,16
   218b0:	e0800017 	ldw	r2,0(fp)
   218b4:	90011626 	beq	r18,zero,21d10 <__ssvfiscanf_r+0xad0>
   218b8:	0025883a 	mov	r18,zero
   218bc:	10c00003 	ldbu	r3,0(r2)
   218c0:	d9005304 	addi	r4,sp,332
   218c4:	10800044 	addi	r2,r2,1
   218c8:	20c7883a 	add	r3,r4,r3
   218cc:	18ffc007 	ldb	r3,-256(r3)
   218d0:	1801b726 	beq	r3,zero,21fb0 <__ssvfiscanf_r+0xd70>
   218d4:	e0c00117 	ldw	r3,4(fp)
   218d8:	e0800015 	stw	r2,0(fp)
   218dc:	94800044 	addi	r18,r18,1
   218e0:	18ffffc4 	addi	r3,r3,-1
   218e4:	e0c00115 	stw	r3,4(fp)
   218e8:	8cbf6d26 	beq	r17,r18,216a0 <__alt_mem_mcu_subsystem_ram_0+0x780016a0>
   218ec:	00fff316 	blt	zero,r3,218bc <__alt_mem_mcu_subsystem_ram_0+0x780018bc>
   218f0:	e00b883a 	mov	r5,fp
   218f4:	a809883a 	mov	r4,r21
   218f8:	00210d80 	call	210d8 <__ssrefill_r>
   218fc:	103f681e 	bne	r2,zero,216a0 <__alt_mem_mcu_subsystem_ram_0+0x780016a0>
   21900:	e0800017 	ldw	r2,0(fp)
   21904:	003fed06 	br	218bc <__alt_mem_mcu_subsystem_ram_0+0x780018bc>
   21908:	88bfffc4 	addi	r2,r17,-1
   2190c:	108009f0 	cmpltui	r2,r2,39
   21910:	1000fd1e 	bne	r2,zero,21d08 <__ssvfiscanf_r+0xac8>
   21914:	88bff644 	addi	r2,r17,-39
   21918:	d8800415 	stw	r2,16(sp)
   2191c:	044009c4 	movi	r17,39
   21920:	95036014 	ori	r20,r18,3456
   21924:	d8000315 	stw	zero,12(sp)
   21928:	dc800904 	addi	r18,sp,36
   2192c:	e0c00017 	ldw	r3,0(fp)
   21930:	19400003 	ldbu	r5,0(r3)
   21934:	28bff544 	addi	r2,r5,-43
   21938:	10803fcc 	andi	r2,r2,255
   2193c:	110013a8 	cmpgeui	r4,r2,78
   21940:	2000641e 	bne	r4,zero,21ad4 <__ssvfiscanf_r+0x894>
   21944:	100490ba 	slli	r2,r2,2
   21948:	010000b4 	movhi	r4,2
   2194c:	1109883a 	add	r4,r2,r4
   21950:	20865617 	ldw	r2,6488(r4)
   21954:	1000683a 	jmp	r2
   21958:	00021c00 	call	21c0 <udp_checksum+0x18>
   2195c:	00021ad4 	movui	zero,2155
   21960:	00021c00 	call	21c0 <udp_checksum+0x18>
   21964:	00021ad4 	movui	zero,2155
   21968:	00021ad4 	movui	zero,2155
   2196c:	00021b98 	cmpnei	zero,zero,2158
   21970:	00021b7c 	xorhi	zero,zero,2157
   21974:	00021b7c 	xorhi	zero,zero,2157
   21978:	00021b7c 	xorhi	zero,zero,2157
   2197c:	00021b7c 	xorhi	zero,zero,2157
   21980:	00021b7c 	xorhi	zero,zero,2157
   21984:	00021b7c 	xorhi	zero,zero,2157
   21988:	00021b7c 	xorhi	zero,zero,2157
   2198c:	00021b60 	cmpeqi	zero,zero,2157
   21990:	00021b60 	cmpeqi	zero,zero,2157
   21994:	00021ad4 	movui	zero,2155
   21998:	00021ad4 	movui	zero,2155
   2199c:	00021ad4 	movui	zero,2155
   219a0:	00021ad4 	movui	zero,2155
   219a4:	00021ad4 	movui	zero,2155
   219a8:	00021ad4 	movui	zero,2155
   219ac:	00021ad4 	movui	zero,2155
   219b0:	00021b4c 	andi	zero,zero,2157
   219b4:	00021b4c 	andi	zero,zero,2157
   219b8:	00021b4c 	andi	zero,zero,2157
   219bc:	00021b4c 	andi	zero,zero,2157
   219c0:	00021b4c 	andi	zero,zero,2157
   219c4:	00021b4c 	andi	zero,zero,2157
   219c8:	00021ad4 	movui	zero,2155
   219cc:	00021ad4 	movui	zero,2155
   219d0:	00021ad4 	movui	zero,2155
   219d4:	00021ad4 	movui	zero,2155
   219d8:	00021ad4 	movui	zero,2155
   219dc:	00021ad4 	movui	zero,2155
   219e0:	00021ad4 	movui	zero,2155
   219e4:	00021ad4 	movui	zero,2155
   219e8:	00021ad4 	movui	zero,2155
   219ec:	00021ad4 	movui	zero,2155
   219f0:	00021ad4 	movui	zero,2155
   219f4:	00021ad4 	movui	zero,2155
   219f8:	00021ad4 	movui	zero,2155
   219fc:	00021ad4 	movui	zero,2155
   21a00:	00021ad4 	movui	zero,2155
   21a04:	00021ad4 	movui	zero,2155
   21a08:	00021ad4 	movui	zero,2155
   21a0c:	00021a90 	cmplti	zero,zero,2154
   21a10:	00021ad4 	movui	zero,2155
   21a14:	00021ad4 	movui	zero,2155
   21a18:	00021ad4 	movui	zero,2155
   21a1c:	00021ad4 	movui	zero,2155
   21a20:	00021ad4 	movui	zero,2155
   21a24:	00021ad4 	movui	zero,2155
   21a28:	00021ad4 	movui	zero,2155
   21a2c:	00021ad4 	movui	zero,2155
   21a30:	00021b4c 	andi	zero,zero,2157
   21a34:	00021b4c 	andi	zero,zero,2157
   21a38:	00021b4c 	andi	zero,zero,2157
   21a3c:	00021b4c 	andi	zero,zero,2157
   21a40:	00021b4c 	andi	zero,zero,2157
   21a44:	00021b4c 	andi	zero,zero,2157
   21a48:	00021ad4 	movui	zero,2155
   21a4c:	00021ad4 	movui	zero,2155
   21a50:	00021ad4 	movui	zero,2155
   21a54:	00021ad4 	movui	zero,2155
   21a58:	00021ad4 	movui	zero,2155
   21a5c:	00021ad4 	movui	zero,2155
   21a60:	00021ad4 	movui	zero,2155
   21a64:	00021ad4 	movui	zero,2155
   21a68:	00021ad4 	movui	zero,2155
   21a6c:	00021ad4 	movui	zero,2155
   21a70:	00021ad4 	movui	zero,2155
   21a74:	00021ad4 	movui	zero,2155
   21a78:	00021ad4 	movui	zero,2155
   21a7c:	00021ad4 	movui	zero,2155
   21a80:	00021ad4 	movui	zero,2155
   21a84:	00021ad4 	movui	zero,2155
   21a88:	00021ad4 	movui	zero,2155
   21a8c:	00021a90 	cmplti	zero,zero,2154
   21a90:	a081800c 	andi	r2,r20,1536
   21a94:	10808018 	cmpnei	r2,r2,512
   21a98:	10000e1e 	bne	r2,zero,21ad4 <__ssvfiscanf_r+0x894>
   21a9c:	00bf7fc4 	movi	r2,-513
   21aa0:	a094703a 	and	r10,r20,r2
   21aa4:	55014014 	ori	r20,r10,1280
   21aa8:	05800404 	movi	r22,16
   21aac:	e0800117 	ldw	r2,4(fp)
   21ab0:	91400005 	stb	r5,0(r18)
   21ab4:	94800044 	addi	r18,r18,1
   21ab8:	10bfffc4 	addi	r2,r2,-1
   21abc:	e0800115 	stw	r2,4(fp)
   21ac0:	00804a0e 	bge	zero,r2,21bec <__ssvfiscanf_r+0x9ac>
   21ac4:	18c00044 	addi	r3,r3,1
   21ac8:	e0c00015 	stw	r3,0(fp)
   21acc:	8c7fffc4 	addi	r17,r17,-1
   21ad0:	883f961e 	bne	r17,zero,2192c <__alt_mem_mcu_subsystem_ram_0+0x7800192c>
   21ad4:	a080400c 	andi	r2,r20,256
   21ad8:	10000426 	beq	r2,zero,21aec <__ssvfiscanf_r+0x8ac>
   21adc:	d8800904 	addi	r2,sp,36
   21ae0:	14817c36 	bltu	r2,r18,220d4 <__ssvfiscanf_r+0xe94>
   21ae4:	d8800904 	addi	r2,sp,36
   21ae8:	90be9a26 	beq	r18,r2,21554 <__alt_mem_mcu_subsystem_ram_0+0x78001554>
   21aec:	a080040c 	andi	r2,r20,16
   21af0:	1000101e 	bne	r2,zero,21b34 <__ssvfiscanf_r+0x8f4>
   21af4:	a809883a 	mov	r4,r21
   21af8:	b00f883a 	mov	r7,r22
   21afc:	000d883a 	mov	r6,zero
   21b00:	d9400904 	addi	r5,sp,36
   21b04:	90000005 	stb	zero,0(r18)
   21b08:	b83ee83a 	callr	r23
   21b0c:	d9000217 	ldw	r4,8(sp)
   21b10:	a0c0080c 	andi	r3,r20,32
   21b14:	24400104 	addi	r17,r4,4
   21b18:	1800a226 	beq	r3,zero,21da4 <__ssvfiscanf_r+0xb64>
   21b1c:	20c00017 	ldw	r3,0(r4)
   21b20:	18800015 	stw	r2,0(r3)
   21b24:	d8800117 	ldw	r2,4(sp)
   21b28:	dc400215 	stw	r17,8(sp)
   21b2c:	10800044 	addi	r2,r2,1
   21b30:	d8800115 	stw	r2,4(sp)
   21b34:	d8800904 	addi	r2,sp,36
   21b38:	9093c83a 	sub	r9,r18,r2
   21b3c:	d8800317 	ldw	r2,12(sp)
   21b40:	48a9883a 	add	r20,r9,r2
   21b44:	8521883a 	add	r16,r16,r20
   21b48:	003dd906 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21b4c:	b08002d0 	cmplti	r2,r22,11
   21b50:	103fe01e 	bne	r2,zero,21ad4 <__alt_mem_mcu_subsystem_ram_0+0x78001ad4>
   21b54:	00bd1fc4 	movi	r2,-2945
   21b58:	a0a8703a 	and	r20,r20,r2
   21b5c:	003fd306 	br	21aac <__alt_mem_mcu_subsystem_ram_0+0x78001aac>
   21b60:	b5ad883a 	add	r22,r22,r22
   21b64:	008000f4 	movhi	r2,3
   21b68:	b085883a 	add	r2,r22,r2
   21b6c:	158f0b0f 	ldh	r22,15404(r2)
   21b70:	b0800250 	cmplti	r2,r22,9
   21b74:	103ff726 	beq	r2,zero,21b54 <__alt_mem_mcu_subsystem_ram_0+0x78001b54>
   21b78:	003fd606 	br	21ad4 <__alt_mem_mcu_subsystem_ram_0+0x78001ad4>
   21b7c:	b5ad883a 	add	r22,r22,r22
   21b80:	008000f4 	movhi	r2,3
   21b84:	b085883a 	add	r2,r22,r2
   21b88:	158f0b0f 	ldh	r22,15404(r2)
   21b8c:	00bd1fc4 	movi	r2,-2945
   21b90:	a0a8703a 	and	r20,r20,r2
   21b94:	003fc506 	br	21aac <__alt_mem_mcu_subsystem_ram_0+0x78001aac>
   21b98:	a082000c 	andi	r2,r20,2048
   21b9c:	103fc326 	beq	r2,zero,21aac <__alt_mem_mcu_subsystem_ram_0+0x78001aac>
   21ba0:	b000021e 	bne	r22,zero,21bac <__ssvfiscanf_r+0x96c>
   21ba4:	a5008014 	ori	r20,r20,512
   21ba8:	05800204 	movi	r22,8
   21bac:	a081000c 	andi	r2,r20,1024
   21bb0:	1000e11e 	bne	r2,zero,21f38 <__ssvfiscanf_r+0xcf8>
   21bb4:	00bf1fc4 	movi	r2,-897
   21bb8:	a0a8703a 	and	r20,r20,r2
   21bbc:	d8800417 	ldw	r2,16(sp)
   21bc0:	10000326 	beq	r2,zero,21bd0 <__ssvfiscanf_r+0x990>
   21bc4:	10bfffc4 	addi	r2,r2,-1
   21bc8:	d8800415 	stw	r2,16(sp)
   21bcc:	8c400044 	addi	r17,r17,1
   21bd0:	d8800317 	ldw	r2,12(sp)
   21bd4:	10800044 	addi	r2,r2,1
   21bd8:	d8800315 	stw	r2,12(sp)
   21bdc:	e0800117 	ldw	r2,4(fp)
   21be0:	10bfffc4 	addi	r2,r2,-1
   21be4:	e0800115 	stw	r2,4(fp)
   21be8:	00bfb616 	blt	zero,r2,21ac4 <__alt_mem_mcu_subsystem_ram_0+0x78001ac4>
   21bec:	e00b883a 	mov	r5,fp
   21bf0:	a809883a 	mov	r4,r21
   21bf4:	00210d80 	call	210d8 <__ssrefill_r>
   21bf8:	103fb426 	beq	r2,zero,21acc <__alt_mem_mcu_subsystem_ram_0+0x78001acc>
   21bfc:	003fb506 	br	21ad4 <__alt_mem_mcu_subsystem_ram_0+0x78001ad4>
   21c00:	a080200c 	andi	r2,r20,128
   21c04:	103fb326 	beq	r2,zero,21ad4 <__alt_mem_mcu_subsystem_ram_0+0x78001ad4>
   21c08:	00bfdfc4 	movi	r2,-129
   21c0c:	a0a8703a 	and	r20,r20,r2
   21c10:	003fa606 	br	21aac <__alt_mem_mcu_subsystem_ram_0+0x78001aac>
   21c14:	8800011e 	bne	r17,zero,21c1c <__ssvfiscanf_r+0x9dc>
   21c18:	047fffc4 	movi	r17,-1
   21c1c:	9500004c 	andi	r20,r18,1
   21c20:	9480040c 	andi	r18,r18,16
   21c24:	a000861e 	bne	r20,zero,21e40 <__ssvfiscanf_r+0xc00>
   21c28:	9000271e 	bne	r18,zero,21cc8 <__ssvfiscanf_r+0xa88>
   21c2c:	d8800217 	ldw	r2,8(sp)
   21c30:	14800017 	ldw	r18,0(r2)
   21c34:	10800104 	addi	r2,r2,4
   21c38:	d8800215 	stw	r2,8(sp)
   21c3c:	9029883a 	mov	r20,r18
   21c40:	00152280 	call	15228 <__locale_ctype_ptr>
   21c44:	e1000017 	ldw	r4,0(fp)
   21c48:	8c7fffc4 	addi	r17,r17,-1
   21c4c:	20c00003 	ldbu	r3,0(r4)
   21c50:	21400044 	addi	r5,r4,1
   21c54:	10c5883a 	add	r2,r2,r3
   21c58:	10800043 	ldbu	r2,1(r2)
   21c5c:	1080020c 	andi	r2,r2,8
   21c60:	10000e1e 	bne	r2,zero,21c9c <__ssvfiscanf_r+0xa5c>
   21c64:	e0800117 	ldw	r2,4(fp)
   21c68:	e1400015 	stw	r5,0(fp)
   21c6c:	a5000044 	addi	r20,r20,1
   21c70:	10bfffc4 	addi	r2,r2,-1
   21c74:	e0800115 	stw	r2,4(fp)
   21c78:	20800003 	ldbu	r2,0(r4)
   21c7c:	a0bfffc5 	stb	r2,-1(r20)
   21c80:	88000626 	beq	r17,zero,21c9c <__ssvfiscanf_r+0xa5c>
   21c84:	e0800117 	ldw	r2,4(fp)
   21c88:	00bfed16 	blt	zero,r2,21c40 <__alt_mem_mcu_subsystem_ram_0+0x78001c40>
   21c8c:	e00b883a 	mov	r5,fp
   21c90:	a809883a 	mov	r4,r21
   21c94:	00210d80 	call	210d8 <__ssrefill_r>
   21c98:	103fe926 	beq	r2,zero,21c40 <__alt_mem_mcu_subsystem_ram_0+0x78001c40>
   21c9c:	d8800117 	ldw	r2,4(sp)
   21ca0:	a4a5c83a 	sub	r18,r20,r18
   21ca4:	a0000005 	stb	zero,0(r20)
   21ca8:	10800044 	addi	r2,r2,1
   21cac:	84a1883a 	add	r16,r16,r18
   21cb0:	d8800115 	stw	r2,4(sp)
   21cb4:	003d7e06 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21cb8:	e00b883a 	mov	r5,fp
   21cbc:	a809883a 	mov	r4,r21
   21cc0:	00210d80 	call	210d8 <__ssrefill_r>
   21cc4:	103f9f1e 	bne	r2,zero,21b44 <__alt_mem_mcu_subsystem_ram_0+0x78001b44>
   21cc8:	00152280 	call	15228 <__locale_ctype_ptr>
   21ccc:	e0c00017 	ldw	r3,0(fp)
   21cd0:	19000003 	ldbu	r4,0(r3)
   21cd4:	18c00044 	addi	r3,r3,1
   21cd8:	1105883a 	add	r2,r2,r4
   21cdc:	10800043 	ldbu	r2,1(r2)
   21ce0:	1080020c 	andi	r2,r2,8
   21ce4:	103f971e 	bne	r2,zero,21b44 <__alt_mem_mcu_subsystem_ram_0+0x78001b44>
   21ce8:	e0800117 	ldw	r2,4(fp)
   21cec:	e0c00015 	stw	r3,0(fp)
   21cf0:	a5000044 	addi	r20,r20,1
   21cf4:	10bfffc4 	addi	r2,r2,-1
   21cf8:	e0800115 	stw	r2,4(fp)
   21cfc:	8d3f9126 	beq	r17,r20,21b44 <__alt_mem_mcu_subsystem_ram_0+0x78001b44>
   21d00:	00bff116 	blt	zero,r2,21cc8 <__alt_mem_mcu_subsystem_ram_0+0x78001cc8>
   21d04:	003fec06 	br	21cb8 <__alt_mem_mcu_subsystem_ram_0+0x78001cb8>
   21d08:	d8000415 	stw	zero,16(sp)
   21d0c:	003f0406 	br	21920 <__alt_mem_mcu_subsystem_ram_0+0x78001920>
   21d10:	d8c00217 	ldw	r3,8(sp)
   21d14:	1c800017 	ldw	r18,0(r3)
   21d18:	18c00104 	addi	r3,r3,4
   21d1c:	d8c00215 	stw	r3,8(sp)
   21d20:	9029883a 	mov	r20,r18
   21d24:	00000106 	br	21d2c <__ssvfiscanf_r+0xaec>
   21d28:	e0800017 	ldw	r2,0(fp)
   21d2c:	10c00003 	ldbu	r3,0(r2)
   21d30:	d9405304 	addi	r5,sp,332
   21d34:	11000044 	addi	r4,r2,1
   21d38:	28c7883a 	add	r3,r5,r3
   21d3c:	18ffc007 	ldb	r3,-256(r3)
   21d40:	8c7fffc4 	addi	r17,r17,-1
   21d44:	18000f26 	beq	r3,zero,21d84 <__ssvfiscanf_r+0xb44>
   21d48:	e0c00117 	ldw	r3,4(fp)
   21d4c:	e1000015 	stw	r4,0(fp)
   21d50:	a5000044 	addi	r20,r20,1
   21d54:	18ffffc4 	addi	r3,r3,-1
   21d58:	e0c00115 	stw	r3,4(fp)
   21d5c:	10800003 	ldbu	r2,0(r2)
   21d60:	a0bfffc5 	stb	r2,-1(r20)
   21d64:	88000726 	beq	r17,zero,21d84 <__ssvfiscanf_r+0xb44>
   21d68:	e0800117 	ldw	r2,4(fp)
   21d6c:	00bfee16 	blt	zero,r2,21d28 <__alt_mem_mcu_subsystem_ram_0+0x78001d28>
   21d70:	e00b883a 	mov	r5,fp
   21d74:	a809883a 	mov	r4,r21
   21d78:	00210d80 	call	210d8 <__ssrefill_r>
   21d7c:	103fea26 	beq	r2,zero,21d28 <__alt_mem_mcu_subsystem_ram_0+0x78001d28>
   21d80:	953e1726 	beq	r18,r20,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21d84:	a4a5c83a 	sub	r18,r20,r18
   21d88:	903df226 	beq	r18,zero,21554 <__alt_mem_mcu_subsystem_ram_0+0x78001554>
   21d8c:	d8800117 	ldw	r2,4(sp)
   21d90:	a0000005 	stb	zero,0(r20)
   21d94:	84a1883a 	add	r16,r16,r18
   21d98:	10800044 	addi	r2,r2,1
   21d9c:	d8800115 	stw	r2,4(sp)
   21da0:	003d4306 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21da4:	a0c0010c 	andi	r3,r20,4
   21da8:	18005f1e 	bne	r3,zero,21f28 <__ssvfiscanf_r+0xce8>
   21dac:	a0c0004c 	andi	r3,r20,1
   21db0:	18006a1e 	bne	r3,zero,21f5c <__ssvfiscanf_r+0xd1c>
   21db4:	a280008c 	andi	r10,r20,2
   21db8:	50006826 	beq	r10,zero,21f5c <__ssvfiscanf_r+0xd1c>
   21dbc:	008000b4 	movhi	r2,2
   21dc0:	10bf5704 	addi	r2,r2,-676
   21dc4:	b00f883a 	mov	r7,r22
   21dc8:	000d883a 	mov	r6,zero
   21dcc:	d9400904 	addi	r5,sp,36
   21dd0:	a809883a 	mov	r4,r21
   21dd4:	b880e526 	beq	r23,r2,2216c <__ssvfiscanf_r+0xf2c>
   21dd8:	00246d00 	call	246d0 <_strtoll_r>
   21ddc:	d9000217 	ldw	r4,8(sp)
   21de0:	21000017 	ldw	r4,0(r4)
   21de4:	20800015 	stw	r2,0(r4)
   21de8:	20c00115 	stw	r3,4(r4)
   21dec:	003f4d06 	br	21b24 <__alt_mem_mcu_subsystem_ram_0+0x78001b24>
   21df0:	dc800217 	ldw	r18,8(sp)
   21df4:	df000015 	stw	fp,0(sp)
   21df8:	880f883a 	mov	r7,r17
   21dfc:	91400017 	ldw	r5,0(r18)
   21e00:	01800044 	movi	r6,1
   21e04:	a809883a 	mov	r4,r21
   21e08:	00211480 	call	21148 <_sfread_r>
   21e0c:	90c00104 	addi	r3,r18,4
   21e10:	103df326 	beq	r2,zero,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21e14:	80a1883a 	add	r16,r16,r2
   21e18:	d8800117 	ldw	r2,4(sp)
   21e1c:	d8c00215 	stw	r3,8(sp)
   21e20:	10800044 	addi	r2,r2,1
   21e24:	d8800115 	stw	r2,4(sp)
   21e28:	003d2106 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21e2c:	e00b883a 	mov	r5,fp
   21e30:	a809883a 	mov	r4,r21
   21e34:	00210d80 	call	210d8 <__ssrefill_r>
   21e38:	103dd626 	beq	r2,zero,21594 <__alt_mem_mcu_subsystem_ram_0+0x78001594>
   21e3c:	003de806 	br	215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21e40:	d8800704 	addi	r2,sp,28
   21e44:	01800204 	movi	r6,8
   21e48:	000b883a 	mov	r5,zero
   21e4c:	1009883a 	mov	r4,r2
   21e50:	d8800515 	stw	r2,20(sp)
   21e54:	0015bb00 	call	15bb0 <memset>
   21e58:	90003a26 	beq	r18,zero,21f44 <__ssvfiscanf_r+0xd04>
   21e5c:	d8800604 	addi	r2,sp,24
   21e60:	d8800315 	stw	r2,12(sp)
   21e64:	0029883a 	mov	r20,zero
   21e68:	00152280 	call	15228 <__locale_ctype_ptr>
   21e6c:	e0c00017 	ldw	r3,0(fp)
   21e70:	18c00003 	ldbu	r3,0(r3)
   21e74:	10c5883a 	add	r2,r2,r3
   21e78:	10800043 	ldbu	r2,1(r2)
   21e7c:	1080020c 	andi	r2,r2,8
   21e80:	1000441e 	bne	r2,zero,21f94 <__ssvfiscanf_r+0xd54>
   21e84:	88004326 	beq	r17,zero,21f94 <__ssvfiscanf_r+0xd54>
   21e88:	00152000 	call	15200 <__locale_mb_cur_max>
   21e8c:	153dd426 	beq	r2,r20,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21e90:	e0800017 	ldw	r2,0(fp)
   21e94:	e1000117 	ldw	r4,4(fp)
   21e98:	d9405304 	addi	r5,sp,332
   21e9c:	12400003 	ldbu	r9,0(r2)
   21ea0:	10800044 	addi	r2,r2,1
   21ea4:	e0800015 	stw	r2,0(fp)
   21ea8:	d8800517 	ldw	r2,20(sp)
   21eac:	213fffc4 	addi	r4,r4,-1
   21eb0:	a0c00044 	addi	r3,r20,1
   21eb4:	e1000115 	stw	r4,4(fp)
   21eb8:	2d29883a 	add	r20,r5,r20
   21ebc:	d9400317 	ldw	r5,12(sp)
   21ec0:	d8800015 	stw	r2,0(sp)
   21ec4:	a809883a 	mov	r4,r21
   21ec8:	180f883a 	mov	r7,r3
   21ecc:	d9800904 	addi	r6,sp,36
   21ed0:	a27fb605 	stb	r9,-296(r20)
   21ed4:	d8c00415 	stw	r3,16(sp)
   21ed8:	0023e680 	call	23e68 <_mbrtowc_r>
   21edc:	113fffe0 	cmpeqi	r4,r2,-1
   21ee0:	203dbf1e 	bne	r4,zero,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21ee4:	d8c00417 	ldw	r3,16(sp)
   21ee8:	1000981e 	bne	r2,zero,2214c <__ssvfiscanf_r+0xf0c>
   21eec:	d8800317 	ldw	r2,12(sp)
   21ef0:	0009883a 	mov	r4,zero
   21ef4:	10000015 	stw	zero,0(r2)
   21ef8:	d8c00415 	stw	r3,16(sp)
   21efc:	0023dc40 	call	23dc4 <iswspace>
   21f00:	d8c00417 	ldw	r3,16(sp)
   21f04:	1000191e 	bne	r2,zero,21f6c <__ssvfiscanf_r+0xd2c>
   21f08:	80e1883a 	add	r16,r16,r3
   21f0c:	8c7fffc4 	addi	r17,r17,-1
   21f10:	9000941e 	bne	r18,zero,22164 <__ssvfiscanf_r+0xf24>
   21f14:	d8800317 	ldw	r2,12(sp)
   21f18:	0007883a 	mov	r3,zero
   21f1c:	10800104 	addi	r2,r2,4
   21f20:	d8800315 	stw	r2,12(sp)
   21f24:	00008b06 	br	22154 <__ssvfiscanf_r+0xf14>
   21f28:	d8c00217 	ldw	r3,8(sp)
   21f2c:	18c00017 	ldw	r3,0(r3)
   21f30:	1880000d 	sth	r2,0(r3)
   21f34:	003efb06 	br	21b24 <__alt_mem_mcu_subsystem_ram_0+0x78001b24>
   21f38:	00be9fc4 	movi	r2,-1409
   21f3c:	a0a8703a 	and	r20,r20,r2
   21f40:	003eda06 	br	21aac <__alt_mem_mcu_subsystem_ram_0+0x78001aac>
   21f44:	d8800217 	ldw	r2,8(sp)
   21f48:	10c00017 	ldw	r3,0(r2)
   21f4c:	10800104 	addi	r2,r2,4
   21f50:	d8800215 	stw	r2,8(sp)
   21f54:	d8c00315 	stw	r3,12(sp)
   21f58:	003fc206 	br	21e64 <__alt_mem_mcu_subsystem_ram_0+0x78001e64>
   21f5c:	d8c00217 	ldw	r3,8(sp)
   21f60:	18c00017 	ldw	r3,0(r3)
   21f64:	18800015 	stw	r2,0(r3)
   21f68:	003eee06 	br	21b24 <__alt_mem_mcu_subsystem_ram_0+0x78001b24>
   21f6c:	18000926 	beq	r3,zero,21f94 <__ssvfiscanf_r+0xd54>
   21f70:	d8800904 	addi	r2,sp,36
   21f74:	10e3883a 	add	r17,r2,r3
   21f78:	897fffc3 	ldbu	r5,-1(r17)
   21f7c:	e00d883a 	mov	r6,fp
   21f80:	a809883a 	mov	r4,r21
   21f84:	0020fe80 	call	20fe8 <_sungetc_r>
   21f88:	8c7fffc4 	addi	r17,r17,-1
   21f8c:	d8800904 	addi	r2,sp,36
   21f90:	147ff91e 	bne	r2,r17,21f78 <__alt_mem_mcu_subsystem_ram_0+0x78001f78>
   21f94:	903cc61e 	bne	r18,zero,212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21f98:	d8800317 	ldw	r2,12(sp)
   21f9c:	10000015 	stw	zero,0(r2)
   21fa0:	d8800117 	ldw	r2,4(sp)
   21fa4:	10800044 	addi	r2,r2,1
   21fa8:	d8800115 	stw	r2,4(sp)
   21fac:	003cc006 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21fb0:	903d6826 	beq	r18,zero,21554 <__alt_mem_mcu_subsystem_ram_0+0x78001554>
   21fb4:	84a1883a 	add	r16,r16,r18
   21fb8:	003cbd06 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   21fbc:	d8800704 	addi	r2,sp,28
   21fc0:	01800204 	movi	r6,8
   21fc4:	000b883a 	mov	r5,zero
   21fc8:	1009883a 	mov	r4,r2
   21fcc:	d8800515 	stw	r2,20(sp)
   21fd0:	0015bb00 	call	15bb0 <memset>
   21fd4:	d8800417 	ldw	r2,16(sp)
   21fd8:	10005a1e 	bne	r2,zero,22144 <__ssvfiscanf_r+0xf04>
   21fdc:	d8800217 	ldw	r2,8(sp)
   21fe0:	14800017 	ldw	r18,0(r2)
   21fe4:	10800104 	addi	r2,r2,4
   21fe8:	d8800215 	stw	r2,8(sp)
   21fec:	0029883a 	mov	r20,zero
   21ff0:	00152000 	call	15200 <__locale_mb_cur_max>
   21ff4:	153d7a26 	beq	r2,r20,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   21ff8:	e0800017 	ldw	r2,0(fp)
   21ffc:	e1000117 	ldw	r4,4(fp)
   22000:	d8c05304 	addi	r3,sp,332
   22004:	12800003 	ldbu	r10,0(r2)
   22008:	10800044 	addi	r2,r2,1
   2200c:	e0800015 	stw	r2,0(fp)
   22010:	d8800517 	ldw	r2,20(sp)
   22014:	213fffc4 	addi	r4,r4,-1
   22018:	e1000115 	stw	r4,4(fp)
   2201c:	a2400044 	addi	r9,r20,1
   22020:	1d07883a 	add	r3,r3,r20
   22024:	d8800015 	stw	r2,0(sp)
   22028:	1abfb605 	stb	r10,-296(r3)
   2202c:	480f883a 	mov	r7,r9
   22030:	d9800904 	addi	r6,sp,36
   22034:	900b883a 	mov	r5,r18
   22038:	a809883a 	mov	r4,r21
   2203c:	da400315 	stw	r9,12(sp)
   22040:	0023e680 	call	23e68 <_mbrtowc_r>
   22044:	10ffffe0 	cmpeqi	r3,r2,-1
   22048:	183d651e 	bne	r3,zero,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   2204c:	da400317 	ldw	r9,12(sp)
   22050:	1000131e 	bne	r2,zero,220a0 <__ssvfiscanf_r+0xe60>
   22054:	d8800417 	ldw	r2,16(sp)
   22058:	8261883a 	add	r16,r16,r9
   2205c:	8c7fffc4 	addi	r17,r17,-1
   22060:	1000171e 	bne	r2,zero,220c0 <__ssvfiscanf_r+0xe80>
   22064:	90000015 	stw	zero,0(r18)
   22068:	94800104 	addi	r18,r18,4
   2206c:	0029883a 	mov	r20,zero
   22070:	e0800117 	ldw	r2,4(fp)
   22074:	0080040e 	bge	zero,r2,22088 <__ssvfiscanf_r+0xe48>
   22078:	883fdd1e 	bne	r17,zero,21ff0 <__alt_mem_mcu_subsystem_ram_0+0x78001ff0>
   2207c:	d8800417 	ldw	r2,16(sp)
   22080:	103c8b1e 	bne	r2,zero,212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   22084:	003fc606 	br	21fa0 <__alt_mem_mcu_subsystem_ram_0+0x78001fa0>
   22088:	e00b883a 	mov	r5,fp
   2208c:	a809883a 	mov	r4,r21
   22090:	00210d80 	call	210d8 <__ssrefill_r>
   22094:	103ff826 	beq	r2,zero,22078 <__alt_mem_mcu_subsystem_ram_0+0x78002078>
   22098:	a03ff826 	beq	r20,zero,2207c <__alt_mem_mcu_subsystem_ram_0+0x7800207c>
   2209c:	003d5006 	br	215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   220a0:	10bfffa0 	cmpeqi	r2,r2,-2
   220a4:	10000226 	beq	r2,zero,220b0 <__ssvfiscanf_r+0xe70>
   220a8:	4829883a 	mov	r20,r9
   220ac:	003ff006 	br	22070 <__alt_mem_mcu_subsystem_ram_0+0x78002070>
   220b0:	d8800417 	ldw	r2,16(sp)
   220b4:	8261883a 	add	r16,r16,r9
   220b8:	8c7fffc4 	addi	r17,r17,-1
   220bc:	103fea26 	beq	r2,zero,22068 <__alt_mem_mcu_subsystem_ram_0+0x78002068>
   220c0:	0029883a 	mov	r20,zero
   220c4:	003fea06 	br	22070 <__alt_mem_mcu_subsystem_ram_0+0x78002070>
   220c8:	903d4526 	beq	r18,zero,215e0 <__alt_mem_mcu_subsystem_ram_0+0x780015e0>
   220cc:	84a1883a 	add	r16,r16,r18
   220d0:	003c7706 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   220d4:	917fffc7 	ldb	r5,-1(r18)
   220d8:	e00d883a 	mov	r6,fp
   220dc:	a809883a 	mov	r4,r21
   220e0:	94bfffc4 	addi	r18,r18,-1
   220e4:	0020fe80 	call	20fe8 <_sungetc_r>
   220e8:	003e7e06 	br	21ae4 <__alt_mem_mcu_subsystem_ram_0+0x78001ae4>
   220ec:	94800054 	ori	r18,r18,1
   220f0:	bdd0cd04 	addi	r23,r23,17204
   220f4:	05800284 	movi	r22,10
   220f8:	050000c4 	movi	r20,3
   220fc:	003d4406 	br	21610 <__alt_mem_mcu_subsystem_ram_0+0x78001610>
   22100:	a0800083 	ldbu	r2,2(r20)
   22104:	94800094 	ori	r18,r18,2
   22108:	a5000084 	addi	r20,r20,2
   2210c:	11403fcc 	andi	r5,r2,255
   22110:	003c7606 	br	212ec <__alt_mem_mcu_subsystem_ram_0+0x780012ec>
   22114:	9080004c 	andi	r2,r18,1
   22118:	1000071e 	bne	r2,zero,22138 <__ssvfiscanf_r+0xef8>
   2211c:	9480008c 	andi	r18,r18,2
   22120:	90000526 	beq	r18,zero,22138 <__ssvfiscanf_r+0xef8>
   22124:	8005d7fa 	srai	r2,r16,31
   22128:	1c000015 	stw	r16,0(r3)
   2212c:	d9000215 	stw	r4,8(sp)
   22130:	18800115 	stw	r2,4(r3)
   22134:	003c5e06 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   22138:	1c000015 	stw	r16,0(r3)
   2213c:	d9000215 	stw	r4,8(sp)
   22140:	003c5b06 	br	212b0 <__alt_mem_mcu_subsystem_ram_0+0x780012b0>
   22144:	0025883a 	mov	r18,zero
   22148:	003fa806 	br	21fec <__alt_mem_mcu_subsystem_ram_0+0x78001fec>
   2214c:	10bfffa0 	cmpeqi	r2,r2,-2
   22150:	10000826 	beq	r2,zero,22174 <__ssvfiscanf_r+0xf34>
   22154:	e0800117 	ldw	r2,4(fp)
   22158:	00bd1a0e 	bge	zero,r2,215c4 <__alt_mem_mcu_subsystem_ram_0+0x780015c4>
   2215c:	1829883a 	mov	r20,r3
   22160:	003f4106 	br	21e68 <__alt_mem_mcu_subsystem_ram_0+0x78001e68>
   22164:	0007883a 	mov	r3,zero
   22168:	003ffa06 	br	22154 <__alt_mem_mcu_subsystem_ram_0+0x78002154>
   2216c:	0024a9c0 	call	24a9c <_strtoull_r>
   22170:	003f1a06 	br	21ddc <__alt_mem_mcu_subsystem_ram_0+0x78001ddc>
   22174:	d8800317 	ldw	r2,12(sp)
   22178:	11000017 	ldw	r4,0(r2)
   2217c:	003f5e06 	br	21ef8 <__alt_mem_mcu_subsystem_ram_0+0x78001ef8>

00022180 <__submore>:
   22180:	defffa04 	addi	sp,sp,-24
   22184:	dc000015 	stw	r16,0(sp)
   22188:	2821883a 	mov	r16,r5
   2218c:	29400c17 	ldw	r5,48(r5)
   22190:	dfc00515 	stw	ra,20(sp)
   22194:	dd000415 	stw	r20,16(sp)
   22198:	dcc00315 	stw	r19,12(sp)
   2219c:	dc800215 	stw	r18,8(sp)
   221a0:	dc400115 	stw	r17,4(sp)
   221a4:	80801004 	addi	r2,r16,64
   221a8:	28801726 	beq	r5,r2,22208 <__submore+0x88>
   221ac:	84400d17 	ldw	r17,52(r16)
   221b0:	8c67883a 	add	r19,r17,r17
   221b4:	980d883a 	mov	r6,r19
   221b8:	001f0bc0 	call	1f0bc <_realloc_r>
   221bc:	1025883a 	mov	r18,r2
   221c0:	10002226 	beq	r2,zero,2224c <__submore+0xcc>
   221c4:	1469883a 	add	r20,r2,r17
   221c8:	880d883a 	mov	r6,r17
   221cc:	100b883a 	mov	r5,r2
   221d0:	a009883a 	mov	r4,r20
   221d4:	0015ac00 	call	15ac0 <memcpy>
   221d8:	0005883a 	mov	r2,zero
   221dc:	85000015 	stw	r20,0(r16)
   221e0:	84800c15 	stw	r18,48(r16)
   221e4:	84c00d15 	stw	r19,52(r16)
   221e8:	dfc00517 	ldw	ra,20(sp)
   221ec:	dd000417 	ldw	r20,16(sp)
   221f0:	dcc00317 	ldw	r19,12(sp)
   221f4:	dc800217 	ldw	r18,8(sp)
   221f8:	dc400117 	ldw	r17,4(sp)
   221fc:	dc000017 	ldw	r16,0(sp)
   22200:	dec00604 	addi	sp,sp,24
   22204:	f800283a 	ret
   22208:	01410004 	movi	r5,1024
   2220c:	001527c0 	call	1527c <_malloc_r>
   22210:	1007883a 	mov	r3,r2
   22214:	10000d26 	beq	r2,zero,2224c <__submore+0xcc>
   22218:	80801083 	ldbu	r2,66(r16)
   2221c:	01010004 	movi	r4,1024
   22220:	81000d15 	stw	r4,52(r16)
   22224:	80c00c15 	stw	r3,48(r16)
   22228:	1880ffc5 	stb	r2,1023(r3)
   2222c:	81401043 	ldbu	r5,65(r16)
   22230:	1900ff44 	addi	r4,r3,1021
   22234:	0005883a 	mov	r2,zero
   22238:	1940ff85 	stb	r5,1022(r3)
   2223c:	81401003 	ldbu	r5,64(r16)
   22240:	1940ff45 	stb	r5,1021(r3)
   22244:	81000015 	stw	r4,0(r16)
   22248:	003fe706 	br	221e8 <__alt_mem_mcu_subsystem_ram_0+0x780021e8>
   2224c:	00bfffc4 	movi	r2,-1
   22250:	003fe506 	br	221e8 <__alt_mem_mcu_subsystem_ram_0+0x780021e8>

00022254 <_ungetc_r>:
   22254:	defffb04 	addi	sp,sp,-20
   22258:	dfc00415 	stw	ra,16(sp)
   2225c:	dcc00315 	stw	r19,12(sp)
   22260:	dc800215 	stw	r18,8(sp)
   22264:	dc400115 	stw	r17,4(sp)
   22268:	dc000015 	stw	r16,0(sp)
   2226c:	28bfffd8 	cmpnei	r2,r5,-1
   22270:	10003226 	beq	r2,zero,2233c <_ungetc_r+0xe8>
   22274:	2025883a 	mov	r18,r4
   22278:	3021883a 	mov	r16,r6
   2227c:	2823883a 	mov	r17,r5
   22280:	20000226 	beq	r4,zero,2228c <_ungetc_r+0x38>
   22284:	20800e17 	ldw	r2,56(r4)
   22288:	10002e26 	beq	r2,zero,22344 <_ungetc_r+0xf0>
   2228c:	80c0030b 	ldhu	r3,12(r16)
   22290:	1888000c 	andi	r2,r3,8192
   22294:	1000051e 	bne	r2,zero,222ac <_ungetc_r+0x58>
   22298:	80801917 	ldw	r2,100(r16)
   2229c:	0137ffc4 	movi	r4,-8193
   222a0:	18c80014 	ori	r3,r3,8192
   222a4:	1104703a 	and	r2,r2,r4
   222a8:	80801915 	stw	r2,100(r16)
   222ac:	00bff7c4 	movi	r2,-33
   222b0:	1884703a 	and	r2,r3,r2
   222b4:	8080030d 	sth	r2,12(r16)
   222b8:	1980010c 	andi	r6,r3,4
   222bc:	3000061e 	bne	r6,zero,222d8 <_ungetc_r+0x84>
   222c0:	1900040c 	andi	r4,r3,16
   222c4:	20001d26 	beq	r4,zero,2233c <_ungetc_r+0xe8>
   222c8:	18c0020c 	andi	r3,r3,8
   222cc:	1800341e 	bne	r3,zero,223a0 <_ungetc_r+0x14c>
   222d0:	10800114 	ori	r2,r2,4
   222d4:	8080030d 	sth	r2,12(r16)
   222d8:	80c00c17 	ldw	r3,48(r16)
   222dc:	8cc03fcc 	andi	r19,r17,255
   222e0:	80800117 	ldw	r2,4(r16)
   222e4:	18001c26 	beq	r3,zero,22358 <_ungetc_r+0x104>
   222e8:	80c00d17 	ldw	r3,52(r16)
   222ec:	10c00f0e 	bge	r2,r3,2232c <_ungetc_r+0xd8>
   222f0:	80800017 	ldw	r2,0(r16)
   222f4:	10ffffc4 	addi	r3,r2,-1
   222f8:	80c00015 	stw	r3,0(r16)
   222fc:	147fffc5 	stb	r17,-1(r2)
   22300:	80800117 	ldw	r2,4(r16)
   22304:	10800044 	addi	r2,r2,1
   22308:	80800115 	stw	r2,4(r16)
   2230c:	9805883a 	mov	r2,r19
   22310:	dfc00417 	ldw	ra,16(sp)
   22314:	dcc00317 	ldw	r19,12(sp)
   22318:	dc800217 	ldw	r18,8(sp)
   2231c:	dc400117 	ldw	r17,4(sp)
   22320:	dc000017 	ldw	r16,0(sp)
   22324:	dec00504 	addi	sp,sp,20
   22328:	f800283a 	ret
   2232c:	800b883a 	mov	r5,r16
   22330:	9009883a 	mov	r4,r18
   22334:	00221800 	call	22180 <__submore>
   22338:	103fed26 	beq	r2,zero,222f0 <__alt_mem_mcu_subsystem_ram_0+0x780022f0>
   2233c:	04ffffc4 	movi	r19,-1
   22340:	003ff206 	br	2230c <__alt_mem_mcu_subsystem_ram_0+0x7800230c>
   22344:	001d0240 	call	1d024 <__sinit>
   22348:	80c0030b 	ldhu	r3,12(r16)
   2234c:	1888000c 	andi	r2,r3,8192
   22350:	103fd61e 	bne	r2,zero,222ac <__alt_mem_mcu_subsystem_ram_0+0x780022ac>
   22354:	003fd006 	br	22298 <__alt_mem_mcu_subsystem_ram_0+0x78002298>
   22358:	81000417 	ldw	r4,16(r16)
   2235c:	80c00017 	ldw	r3,0(r16)
   22360:	20000326 	beq	r4,zero,22370 <_ungetc_r+0x11c>
   22364:	20c0022e 	bgeu	r4,r3,22370 <_ungetc_r+0x11c>
   22368:	193fffc3 	ldbu	r4,-1(r3)
   2236c:	24c01526 	beq	r4,r19,223c4 <_ungetc_r+0x170>
   22370:	80800f15 	stw	r2,60(r16)
   22374:	008000c4 	movi	r2,3
   22378:	81401004 	addi	r5,r16,64
   2237c:	81001084 	addi	r4,r16,66
   22380:	80800d15 	stw	r2,52(r16)
   22384:	00800044 	movi	r2,1
   22388:	80c00e15 	stw	r3,56(r16)
   2238c:	81400c15 	stw	r5,48(r16)
   22390:	84401085 	stb	r17,66(r16)
   22394:	81000015 	stw	r4,0(r16)
   22398:	80800115 	stw	r2,4(r16)
   2239c:	003fdb06 	br	2230c <__alt_mem_mcu_subsystem_ram_0+0x7800230c>
   223a0:	800b883a 	mov	r5,r16
   223a4:	9009883a 	mov	r4,r18
   223a8:	001cc840 	call	1cc84 <_fflush_r>
   223ac:	103fe31e 	bne	r2,zero,2233c <__alt_mem_mcu_subsystem_ram_0+0x7800233c>
   223b0:	8080030b 	ldhu	r2,12(r16)
   223b4:	80000215 	stw	zero,8(r16)
   223b8:	80000615 	stw	zero,24(r16)
   223bc:	10bffdcc 	andi	r2,r2,65527
   223c0:	003fc306 	br	222d0 <__alt_mem_mcu_subsystem_ram_0+0x780022d0>
   223c4:	18ffffc4 	addi	r3,r3,-1
   223c8:	10800044 	addi	r2,r2,1
   223cc:	80c00015 	stw	r3,0(r16)
   223d0:	80800115 	stw	r2,4(r16)
   223d4:	003fcd06 	br	2230c <__alt_mem_mcu_subsystem_ram_0+0x7800230c>

000223d8 <ungetc>:
   223d8:	008000f4 	movhi	r2,3
   223dc:	280d883a 	mov	r6,r5
   223e0:	200b883a 	mov	r5,r4
   223e4:	111e6617 	ldw	r4,31128(r2)
   223e8:	00222541 	jmpi	22254 <_ungetc_r>

000223ec <__sprint_r.part.0>:
   223ec:	28801917 	ldw	r2,100(r5)
   223f0:	defff604 	addi	sp,sp,-40
   223f4:	dd000415 	stw	r20,16(sp)
   223f8:	dfc00915 	stw	ra,36(sp)
   223fc:	df000815 	stw	fp,32(sp)
   22400:	ddc00715 	stw	r23,28(sp)
   22404:	dd800615 	stw	r22,24(sp)
   22408:	dd400515 	stw	r21,20(sp)
   2240c:	dcc00315 	stw	r19,12(sp)
   22410:	dc800215 	stw	r18,8(sp)
   22414:	dc400115 	stw	r17,4(sp)
   22418:	dc000015 	stw	r16,0(sp)
   2241c:	1088000c 	andi	r2,r2,8192
   22420:	3029883a 	mov	r20,r6
   22424:	10002c26 	beq	r2,zero,224d8 <__sprint_r.part.0+0xec>
   22428:	30800217 	ldw	r2,8(r6)
   2242c:	2823883a 	mov	r17,r5
   22430:	2027883a 	mov	r19,r4
   22434:	35400017 	ldw	r21,0(r6)
   22438:	05ffff04 	movi	r23,-4
   2243c:	10002426 	beq	r2,zero,224d0 <__sprint_r.part.0+0xe4>
   22440:	ad800117 	ldw	r22,4(r21)
   22444:	ac000017 	ldw	r16,0(r21)
   22448:	b024d0ba 	srli	r18,r22,2
   2244c:	90001b26 	beq	r18,zero,224bc <__sprint_r.part.0+0xd0>
   22450:	0039883a 	mov	fp,zero
   22454:	00000206 	br	22460 <__sprint_r.part.0+0x74>
   22458:	84000104 	addi	r16,r16,4
   2245c:	97001626 	beq	r18,fp,224b8 <__sprint_r.part.0+0xcc>
   22460:	81400017 	ldw	r5,0(r16)
   22464:	880d883a 	mov	r6,r17
   22468:	9809883a 	mov	r4,r19
   2246c:	0023c6c0 	call	23c6c <_fputwc_r>
   22470:	10bfffe0 	cmpeqi	r2,r2,-1
   22474:	e7000044 	addi	fp,fp,1
   22478:	103ff726 	beq	r2,zero,22458 <__alt_mem_mcu_subsystem_ram_0+0x78002458>
   2247c:	00bfffc4 	movi	r2,-1
   22480:	a0000215 	stw	zero,8(r20)
   22484:	a0000115 	stw	zero,4(r20)
   22488:	dfc00917 	ldw	ra,36(sp)
   2248c:	df000817 	ldw	fp,32(sp)
   22490:	ddc00717 	ldw	r23,28(sp)
   22494:	dd800617 	ldw	r22,24(sp)
   22498:	dd400517 	ldw	r21,20(sp)
   2249c:	dd000417 	ldw	r20,16(sp)
   224a0:	dcc00317 	ldw	r19,12(sp)
   224a4:	dc800217 	ldw	r18,8(sp)
   224a8:	dc400117 	ldw	r17,4(sp)
   224ac:	dc000017 	ldw	r16,0(sp)
   224b0:	dec00a04 	addi	sp,sp,40
   224b4:	f800283a 	ret
   224b8:	a0800217 	ldw	r2,8(r20)
   224bc:	b5ec703a 	and	r22,r22,r23
   224c0:	1585c83a 	sub	r2,r2,r22
   224c4:	a0800215 	stw	r2,8(r20)
   224c8:	ad400204 	addi	r21,r21,8
   224cc:	103fdc1e 	bne	r2,zero,22440 <__alt_mem_mcu_subsystem_ram_0+0x78002440>
   224d0:	0005883a 	mov	r2,zero
   224d4:	003fea06 	br	22480 <__alt_mem_mcu_subsystem_ram_0+0x78002480>
   224d8:	001d4780 	call	1d478 <__sfvwrite_r>
   224dc:	003fe806 	br	22480 <__alt_mem_mcu_subsystem_ram_0+0x78002480>

000224e0 <__sprint_r>:
   224e0:	30c00217 	ldw	r3,8(r6)
   224e4:	18000126 	beq	r3,zero,224ec <__sprint_r+0xc>
   224e8:	00223ec1 	jmpi	223ec <__sprint_r.part.0>
   224ec:	30000115 	stw	zero,4(r6)
   224f0:	0005883a 	mov	r2,zero
   224f4:	f800283a 	ret

000224f8 <___vfiprintf_internal_r>:
   224f8:	deffce04 	addi	sp,sp,-200
   224fc:	ddc02f15 	stw	r23,188(sp)
   22500:	dd002c15 	stw	r20,176(sp)
   22504:	dfc03115 	stw	ra,196(sp)
   22508:	df003015 	stw	fp,192(sp)
   2250c:	dd802e15 	stw	r22,184(sp)
   22510:	dd402d15 	stw	r21,180(sp)
   22514:	dcc02b15 	stw	r19,172(sp)
   22518:	dc802a15 	stw	r18,168(sp)
   2251c:	dc402915 	stw	r17,164(sp)
   22520:	dc002815 	stw	r16,160(sp)
   22524:	d9000115 	stw	r4,4(sp)
   22528:	d9c00215 	stw	r7,8(sp)
   2252c:	2829883a 	mov	r20,r5
   22530:	302f883a 	mov	r23,r6
   22534:	20000226 	beq	r4,zero,22540 <___vfiprintf_internal_r+0x48>
   22538:	20800e17 	ldw	r2,56(r4)
   2253c:	1002bf26 	beq	r2,zero,2303c <___vfiprintf_internal_r+0xb44>
   22540:	a080030b 	ldhu	r2,12(r20)
   22544:	10c8000c 	andi	r3,r2,8192
   22548:	1800061e 	bne	r3,zero,22564 <___vfiprintf_internal_r+0x6c>
   2254c:	a0c01917 	ldw	r3,100(r20)
   22550:	0137ffc4 	movi	r4,-8193
   22554:	10880014 	ori	r2,r2,8192
   22558:	1906703a 	and	r3,r3,r4
   2255c:	a080030d 	sth	r2,12(r20)
   22560:	a0c01915 	stw	r3,100(r20)
   22564:	10c0020c 	andi	r3,r2,8
   22568:	18018826 	beq	r3,zero,22b8c <___vfiprintf_internal_r+0x694>
   2256c:	a0c00417 	ldw	r3,16(r20)
   22570:	18018626 	beq	r3,zero,22b8c <___vfiprintf_internal_r+0x694>
   22574:	1080068c 	andi	r2,r2,26
   22578:	10800298 	cmpnei	r2,r2,10
   2257c:	10018b26 	beq	r2,zero,22bac <___vfiprintf_internal_r+0x6b4>
   22580:	df001804 	addi	fp,sp,96
   22584:	df000b15 	stw	fp,44(sp)
   22588:	d8000d15 	stw	zero,52(sp)
   2258c:	d8000c15 	stw	zero,48(sp)
   22590:	e021883a 	mov	r16,fp
   22594:	d8000615 	stw	zero,24(sp)
   22598:	d8000015 	stw	zero,0(sp)
   2259c:	b8800007 	ldb	r2,0(r23)
   225a0:	10021f26 	beq	r2,zero,22e20 <___vfiprintf_internal_r+0x928>
   225a4:	10800960 	cmpeqi	r2,r2,37
   225a8:	b827883a 	mov	r19,r23
   225ac:	10000226 	beq	r2,zero,225b8 <___vfiprintf_internal_r+0xc0>
   225b0:	00001706 	br	22610 <___vfiprintf_internal_r+0x118>
   225b4:	18000426 	beq	r3,zero,225c8 <___vfiprintf_internal_r+0xd0>
   225b8:	9cc00044 	addi	r19,r19,1
   225bc:	98800007 	ldb	r2,0(r19)
   225c0:	10c00958 	cmpnei	r3,r2,37
   225c4:	103ffb1e 	bne	r2,zero,225b4 <__alt_mem_mcu_subsystem_ram_0+0x780025b4>
   225c8:	9de3c83a 	sub	r17,r19,r23
   225cc:	88000e26 	beq	r17,zero,22608 <___vfiprintf_internal_r+0x110>
   225d0:	d8c00d17 	ldw	r3,52(sp)
   225d4:	d8800c17 	ldw	r2,48(sp)
   225d8:	85c00015 	stw	r23,0(r16)
   225dc:	88c7883a 	add	r3,r17,r3
   225e0:	10800044 	addi	r2,r2,1
   225e4:	d8800c15 	stw	r2,48(sp)
   225e8:	84400115 	stw	r17,4(r16)
   225ec:	d8c00d15 	stw	r3,52(sp)
   225f0:	10800208 	cmpgei	r2,r2,8
   225f4:	1001761e 	bne	r2,zero,22bd0 <___vfiprintf_internal_r+0x6d8>
   225f8:	84000204 	addi	r16,r16,8
   225fc:	d8800017 	ldw	r2,0(sp)
   22600:	1445883a 	add	r2,r2,r17
   22604:	d8800015 	stw	r2,0(sp)
   22608:	98800007 	ldb	r2,0(r19)
   2260c:	10020426 	beq	r2,zero,22e20 <___vfiprintf_internal_r+0x928>
   22610:	98800047 	ldb	r2,1(r19)
   22614:	9dc00044 	addi	r23,r19,1
   22618:	d8000a45 	stb	zero,41(sp)
   2261c:	000d883a 	mov	r6,zero
   22620:	000f883a 	mov	r7,zero
   22624:	047fffc4 	movi	r17,-1
   22628:	0025883a 	mov	r18,zero
   2262c:	0007883a 	mov	r3,zero
   22630:	bdc00044 	addi	r23,r23,1
   22634:	113ff804 	addi	r4,r2,-32
   22638:	21401668 	cmpgeui	r5,r4,89
   2263c:	2801741e 	bne	r5,zero,22c10 <___vfiprintf_internal_r+0x718>
   22640:	200890ba 	slli	r4,r4,2
   22644:	014000b4 	movhi	r5,2
   22648:	214b883a 	add	r5,r4,r5
   2264c:	29099517 	ldw	r4,9812(r5)
   22650:	2000683a 	jmp	r4
   22654:	00022ce0 	cmpeqi	zero,zero,2227
   22658:	00022c10 	cmplti	zero,zero,2224
   2265c:	00022c10 	cmplti	zero,zero,2224
   22660:	00022cd4 	movui	zero,2227
   22664:	00022c10 	cmplti	zero,zero,2224
   22668:	00022c10 	cmplti	zero,zero,2224
   2266c:	00022c10 	cmplti	zero,zero,2224
   22670:	00022c10 	cmplti	zero,zero,2224
   22674:	00022c10 	cmplti	zero,zero,2224
   22678:	00022c10 	cmplti	zero,zero,2224
   2267c:	00022cac 	andhi	zero,zero,2226
   22680:	00022c9c 	xori	zero,zero,2226
   22684:	00022c10 	cmplti	zero,zero,2224
   22688:	00022c84 	movi	zero,2226
   2268c:	00022c40 	call	22c4 <udp_checksum+0x11c>
   22690:	00022c10 	cmplti	zero,zero,2224
   22694:	00022c34 	movhi	zero,2224
   22698:	00022be0 	cmpeqi	zero,zero,2223
   2269c:	00022be0 	cmpeqi	zero,zero,2223
   226a0:	00022be0 	cmpeqi	zero,zero,2223
   226a4:	00022be0 	cmpeqi	zero,zero,2223
   226a8:	00022be0 	cmpeqi	zero,zero,2223
   226ac:	00022be0 	cmpeqi	zero,zero,2223
   226b0:	00022be0 	cmpeqi	zero,zero,2223
   226b4:	00022be0 	cmpeqi	zero,zero,2223
   226b8:	00022be0 	cmpeqi	zero,zero,2223
   226bc:	00022c10 	cmplti	zero,zero,2224
   226c0:	00022c10 	cmplti	zero,zero,2224
   226c4:	00022c10 	cmplti	zero,zero,2224
   226c8:	00022c10 	cmplti	zero,zero,2224
   226cc:	00022c10 	cmplti	zero,zero,2224
   226d0:	00022c10 	cmplti	zero,zero,2224
   226d4:	00022c10 	cmplti	zero,zero,2224
   226d8:	00022c10 	cmplti	zero,zero,2224
   226dc:	00022c10 	cmplti	zero,zero,2224
   226e0:	00022c10 	cmplti	zero,zero,2224
   226e4:	00022f9c 	xori	zero,zero,2238
   226e8:	00022c10 	cmplti	zero,zero,2224
   226ec:	00022c10 	cmplti	zero,zero,2224
   226f0:	00022c10 	cmplti	zero,zero,2224
   226f4:	00022c10 	cmplti	zero,zero,2224
   226f8:	00022c10 	cmplti	zero,zero,2224
   226fc:	00022c10 	cmplti	zero,zero,2224
   22700:	00022c10 	cmplti	zero,zero,2224
   22704:	00022c10 	cmplti	zero,zero,2224
   22708:	00022c10 	cmplti	zero,zero,2224
   2270c:	00022c10 	cmplti	zero,zero,2224
   22710:	0002287c 	xorhi	zero,zero,2209
   22714:	00022c10 	cmplti	zero,zero,2224
   22718:	00022c10 	cmplti	zero,zero,2224
   2271c:	00022c10 	cmplti	zero,zero,2224
   22720:	00022c10 	cmplti	zero,zero,2224
   22724:	00022c10 	cmplti	zero,zero,2224
   22728:	000227b8 	rdprs	zero,zero,2206
   2272c:	00022c10 	cmplti	zero,zero,2224
   22730:	00022c10 	cmplti	zero,zero,2224
   22734:	00022e84 	movi	zero,2234
   22738:	00022c10 	cmplti	zero,zero,2224
   2273c:	00022c10 	cmplti	zero,zero,2224
   22740:	00022c10 	cmplti	zero,zero,2224
   22744:	00022c10 	cmplti	zero,zero,2224
   22748:	00022c10 	cmplti	zero,zero,2224
   2274c:	00022c10 	cmplti	zero,zero,2224
   22750:	00022c10 	cmplti	zero,zero,2224
   22754:	00022c10 	cmplti	zero,zero,2224
   22758:	00022c10 	cmplti	zero,zero,2224
   2275c:	00022c10 	cmplti	zero,zero,2224
   22760:	00022f6c 	andhi	zero,zero,2237
   22764:	00022f30 	cmpltui	zero,zero,2236
   22768:	00022c10 	cmplti	zero,zero,2224
   2276c:	00022c10 	cmplti	zero,zero,2224
   22770:	00022c10 	cmplti	zero,zero,2224
   22774:	00023030 	cmpltui	zero,zero,2240
   22778:	00022f30 	cmpltui	zero,zero,2236
   2277c:	00022c10 	cmplti	zero,zero,2224
   22780:	00022c10 	cmplti	zero,zero,2224
   22784:	00022d3c 	xorhi	zero,zero,2228
   22788:	00022c10 	cmplti	zero,zero,2224
   2278c:	00022de8 	cmpgeui	zero,zero,2231
   22790:	00022880 	call	2288 <udp_checksum+0xe0>
   22794:	00022dac 	andhi	zero,zero,2230
   22798:	00022da0 	cmpeqi	zero,zero,2230
   2279c:	00022c10 	cmplti	zero,zero,2224
   227a0:	00022d50 	cmplti	zero,zero,2229
   227a4:	00022c10 	cmplti	zero,zero,2224
   227a8:	000227bc 	xorhi	zero,zero,2206
   227ac:	00022c10 	cmplti	zero,zero,2224
   227b0:	00022c10 	cmplti	zero,zero,2224
   227b4:	00022edc 	xori	zero,zero,2235
   227b8:	18c00414 	ori	r3,r3,16
   227bc:	1880080c 	andi	r2,r3,32
   227c0:	1001a91e 	bne	r2,zero,22e68 <___vfiprintf_internal_r+0x970>
   227c4:	d9000217 	ldw	r4,8(sp)
   227c8:	1880040c 	andi	r2,r3,16
   227cc:	22c00017 	ldw	r11,0(r4)
   227d0:	21000104 	addi	r4,r4,4
   227d4:	d9000215 	stw	r4,8(sp)
   227d8:	10021e1e 	bne	r2,zero,23054 <___vfiprintf_internal_r+0xb5c>
   227dc:	1880100c 	andi	r2,r3,64
   227e0:	10021c26 	beq	r2,zero,23054 <___vfiprintf_internal_r+0xb5c>
   227e4:	d8000a45 	stb	zero,41(sp)
   227e8:	893fffe0 	cmpeqi	r4,r17,-1
   227ec:	5d7fffcc 	andi	r21,r11,65535
   227f0:	001b883a 	mov	r13,zero
   227f4:	00800044 	movi	r2,1
   227f8:	20002c26 	beq	r4,zero,228ac <___vfiprintf_internal_r+0x3b4>
   227fc:	1827883a 	mov	r19,r3
   22800:	0019883a 	mov	r12,zero
   22804:	10c00060 	cmpeqi	r3,r2,1
   22808:	1802011e 	bne	r3,zero,23010 <___vfiprintf_internal_r+0xb18>
   2280c:	108000a0 	cmpeqi	r2,r2,2
   22810:	1002aa1e 	bne	r2,zero,232bc <___vfiprintf_internal_r+0xdc4>
   22814:	e007883a 	mov	r3,fp
   22818:	00000106 	br	22820 <___vfiprintf_internal_r+0x328>
   2281c:	b007883a 	mov	r3,r22
   22820:	680a977a 	slli	r5,r13,29
   22824:	a808d0fa 	srli	r4,r21,3
   22828:	681ad0fa 	srli	r13,r13,3
   2282c:	aac001cc 	andi	r11,r21,7
   22830:	58800c04 	addi	r2,r11,48
   22834:	292ab03a 	or	r21,r5,r4
   22838:	18bfffc5 	stb	r2,-1(r3)
   2283c:	ab48b03a 	or	r4,r21,r13
   22840:	1dbfffc4 	addi	r22,r3,-1
   22844:	203ff51e 	bne	r4,zero,2281c <__alt_mem_mcu_subsystem_ram_0+0x7800281c>
   22848:	9900004c 	andi	r4,r19,1
   2284c:	2002a826 	beq	r4,zero,232f0 <___vfiprintf_internal_r+0xdf8>
   22850:	10803fcc 	andi	r2,r2,255
   22854:	1080201c 	xori	r2,r2,128
   22858:	10bfe004 	addi	r2,r2,-128
   2285c:	10800c18 	cmpnei	r2,r2,48
   22860:	1002a326 	beq	r2,zero,232f0 <___vfiprintf_internal_r+0xdf8>
   22864:	18ffff84 	addi	r3,r3,-2
   22868:	00800c04 	movi	r2,48
   2286c:	b0bfffc5 	stb	r2,-1(r22)
   22870:	e0dbc83a 	sub	r13,fp,r3
   22874:	182d883a 	mov	r22,r3
   22878:	00001806 	br	228dc <___vfiprintf_internal_r+0x3e4>
   2287c:	18c00414 	ori	r3,r3,16
   22880:	1880080c 	andi	r2,r3,32
   22884:	10012126 	beq	r2,zero,22d0c <___vfiprintf_internal_r+0x814>
   22888:	d9000217 	ldw	r4,8(sp)
   2288c:	0005883a 	mov	r2,zero
   22890:	25400017 	ldw	r21,0(r4)
   22894:	23400117 	ldw	r13,4(r4)
   22898:	21000204 	addi	r4,r4,8
   2289c:	d9000215 	stw	r4,8(sp)
   228a0:	d8000a45 	stb	zero,41(sp)
   228a4:	893fffe0 	cmpeqi	r4,r17,-1
   228a8:	203fd41e 	bne	r4,zero,227fc <__alt_mem_mcu_subsystem_ram_0+0x780027fc>
   228ac:	0019883a 	mov	r12,zero
   228b0:	04ffdfc4 	movi	r19,-129
   228b4:	ab48b03a 	or	r4,r21,r13
   228b8:	1ce6703a 	and	r19,r3,r19
   228bc:	203fd11e 	bne	r4,zero,22804 <__alt_mem_mcu_subsystem_ram_0+0x78002804>
   228c0:	88030b1e 	bne	r17,zero,234f0 <___vfiprintf_internal_r+0xff8>
   228c4:	1002d81e 	bne	r2,zero,23428 <___vfiprintf_internal_r+0xf30>
   228c8:	1b40004c 	andi	r13,r3,1
   228cc:	68030b26 	beq	r13,zero,234fc <___vfiprintf_internal_r+0x1004>
   228d0:	00800c04 	movi	r2,48
   228d4:	d88017c5 	stb	r2,95(sp)
   228d8:	dd8017c4 	addi	r22,sp,95
   228dc:	882b883a 	mov	r21,r17
   228e0:	8b40010e 	bge	r17,r13,228e8 <___vfiprintf_internal_r+0x3f0>
   228e4:	682b883a 	mov	r21,r13
   228e8:	63003fcc 	andi	r12,r12,255
   228ec:	6300201c 	xori	r12,r12,128
   228f0:	633fe004 	addi	r12,r12,-128
   228f4:	60000126 	beq	r12,zero,228fc <___vfiprintf_internal_r+0x404>
   228f8:	ad400044 	addi	r21,r21,1
   228fc:	9b80008c 	andi	r14,r19,2
   22900:	70000126 	beq	r14,zero,22908 <___vfiprintf_internal_r+0x410>
   22904:	ad400084 	addi	r21,r21,2
   22908:	d9000c17 	ldw	r4,48(sp)
   2290c:	9b00210c 	andi	r12,r19,132
   22910:	d8800d17 	ldw	r2,52(sp)
   22914:	21800044 	addi	r6,r4,1
   22918:	300b883a 	mov	r5,r6
   2291c:	6000271e 	bne	r12,zero,229bc <___vfiprintf_internal_r+0x4c4>
   22920:	9547c83a 	sub	r3,r18,r21
   22924:	00c0250e 	bge	zero,r3,229bc <___vfiprintf_internal_r+0x4c4>
   22928:	19400450 	cmplti	r5,r3,17
   2292c:	01c000f4 	movhi	r7,3
   22930:	2803481e 	bne	r5,zero,23654 <___vfiprintf_internal_r+0x115c>
   22934:	39cf1784 	addi	r7,r7,15454
   22938:	03c00404 	movi	r15,16
   2293c:	00000706 	br	2295c <___vfiprintf_internal_r+0x464>
   22940:	27c00084 	addi	ra,r4,2
   22944:	84000204 	addi	r16,r16,8
   22948:	3009883a 	mov	r4,r6
   2294c:	18fffc04 	addi	r3,r3,-16
   22950:	19400448 	cmpgei	r5,r3,17
   22954:	28000f26 	beq	r5,zero,22994 <___vfiprintf_internal_r+0x49c>
   22958:	21800044 	addi	r6,r4,1
   2295c:	10800404 	addi	r2,r2,16
   22960:	81c00015 	stw	r7,0(r16)
   22964:	83c00115 	stw	r15,4(r16)
   22968:	d8800d15 	stw	r2,52(sp)
   2296c:	d9800c15 	stw	r6,48(sp)
   22970:	31400208 	cmpgei	r5,r6,8
   22974:	283ff226 	beq	r5,zero,22940 <__alt_mem_mcu_subsystem_ram_0+0x78002940>
   22978:	10022e1e 	bne	r2,zero,23234 <___vfiprintf_internal_r+0xd3c>
   2297c:	18fffc04 	addi	r3,r3,-16
   22980:	19400448 	cmpgei	r5,r3,17
   22984:	0009883a 	mov	r4,zero
   22988:	07c00044 	movi	ra,1
   2298c:	e021883a 	mov	r16,fp
   22990:	283ff11e 	bne	r5,zero,22958 <__alt_mem_mcu_subsystem_ram_0+0x78002958>
   22994:	10c5883a 	add	r2,r2,r3
   22998:	80c00115 	stw	r3,4(r16)
   2299c:	81c00015 	stw	r7,0(r16)
   229a0:	d8800d15 	stw	r2,52(sp)
   229a4:	dfc00c15 	stw	ra,48(sp)
   229a8:	f8c00208 	cmpgei	r3,ra,8
   229ac:	1802641e 	bne	r3,zero,23340 <___vfiprintf_internal_r+0xe48>
   229b0:	84000204 	addi	r16,r16,8
   229b4:	f9400044 	addi	r5,ra,1
   229b8:	f809883a 	mov	r4,ra
   229bc:	d8c00a47 	ldb	r3,41(sp)
   229c0:	81800204 	addi	r6,r16,8
   229c4:	1801c726 	beq	r3,zero,230e4 <___vfiprintf_internal_r+0xbec>
   229c8:	d8c00a44 	addi	r3,sp,41
   229cc:	10800044 	addi	r2,r2,1
   229d0:	80c00015 	stw	r3,0(r16)
   229d4:	00c00044 	movi	r3,1
   229d8:	80c00115 	stw	r3,4(r16)
   229dc:	d8800d15 	stw	r2,52(sp)
   229e0:	d9400c15 	stw	r5,48(sp)
   229e4:	28c00208 	cmpgei	r3,r5,8
   229e8:	18025e26 	beq	r3,zero,23364 <___vfiprintf_internal_r+0xe6c>
   229ec:	1001ad1e 	bne	r2,zero,230a4 <___vfiprintf_internal_r+0xbac>
   229f0:	7002611e 	bne	r14,zero,23378 <___vfiprintf_internal_r+0xe80>
   229f4:	0009883a 	mov	r4,zero
   229f8:	d9801a04 	addi	r6,sp,104
   229fc:	01400044 	movi	r5,1
   22a00:	e021883a 	mov	r16,fp
   22a04:	63002018 	cmpnei	r12,r12,128
   22a08:	6001c726 	beq	r12,zero,23128 <___vfiprintf_internal_r+0xc30>
   22a0c:	8b63c83a 	sub	r17,r17,r13
   22a10:	0440260e 	bge	zero,r17,22aac <___vfiprintf_internal_r+0x5b4>
   22a14:	88c00450 	cmplti	r3,r17,17
   22a18:	01c000f4 	movhi	r7,3
   22a1c:	1802e71e 	bne	r3,zero,235bc <___vfiprintf_internal_r+0x10c4>
   22a20:	39cf1384 	addi	r7,r7,15438
   22a24:	03000404 	movi	r12,16
   22a28:	00000606 	br	22a44 <___vfiprintf_internal_r+0x54c>
   22a2c:	21400084 	addi	r5,r4,2
   22a30:	84000204 	addi	r16,r16,8
   22a34:	1809883a 	mov	r4,r3
   22a38:	8c7ffc04 	addi	r17,r17,-16
   22a3c:	88c00448 	cmpgei	r3,r17,17
   22a40:	18000f26 	beq	r3,zero,22a80 <___vfiprintf_internal_r+0x588>
   22a44:	20c00044 	addi	r3,r4,1
   22a48:	10800404 	addi	r2,r2,16
   22a4c:	81c00015 	stw	r7,0(r16)
   22a50:	83000115 	stw	r12,4(r16)
   22a54:	d8800d15 	stw	r2,52(sp)
   22a58:	d8c00c15 	stw	r3,48(sp)
   22a5c:	19400208 	cmpgei	r5,r3,8
   22a60:	283ff226 	beq	r5,zero,22a2c <__alt_mem_mcu_subsystem_ram_0+0x78002a2c>
   22a64:	10017f1e 	bne	r2,zero,23064 <___vfiprintf_internal_r+0xb6c>
   22a68:	8c7ffc04 	addi	r17,r17,-16
   22a6c:	88c00448 	cmpgei	r3,r17,17
   22a70:	01400044 	movi	r5,1
   22a74:	0009883a 	mov	r4,zero
   22a78:	e021883a 	mov	r16,fp
   22a7c:	183ff11e 	bne	r3,zero,22a44 <__alt_mem_mcu_subsystem_ram_0+0x78002a44>
   22a80:	81000204 	addi	r4,r16,8
   22a84:	1445883a 	add	r2,r2,r17
   22a88:	81c00015 	stw	r7,0(r16)
   22a8c:	84400115 	stw	r17,4(r16)
   22a90:	d8800d15 	stw	r2,52(sp)
   22a94:	d9400c15 	stw	r5,48(sp)
   22a98:	28c00208 	cmpgei	r3,r5,8
   22a9c:	1802411e 	bne	r3,zero,233a4 <___vfiprintf_internal_r+0xeac>
   22aa0:	29400044 	addi	r5,r5,1
   22aa4:	21800204 	addi	r6,r4,8
   22aa8:	2021883a 	mov	r16,r4
   22aac:	6885883a 	add	r2,r13,r2
   22ab0:	d9400c15 	stw	r5,48(sp)
   22ab4:	85800015 	stw	r22,0(r16)
   22ab8:	83400115 	stw	r13,4(r16)
   22abc:	d8800d15 	stw	r2,52(sp)
   22ac0:	29400210 	cmplti	r5,r5,8
   22ac4:	2801c91e 	bne	r5,zero,231ec <___vfiprintf_internal_r+0xcf4>
   22ac8:	1001c11e 	bne	r2,zero,231d0 <___vfiprintf_internal_r+0xcd8>
   22acc:	d8000c15 	stw	zero,48(sp)
   22ad0:	9cc0010c 	andi	r19,r19,4
   22ad4:	98002726 	beq	r19,zero,22b74 <___vfiprintf_internal_r+0x67c>
   22ad8:	9561c83a 	sub	r16,r18,r21
   22adc:	0400250e 	bge	zero,r16,22b74 <___vfiprintf_internal_r+0x67c>
   22ae0:	e00d883a 	mov	r6,fp
   22ae4:	80c00450 	cmplti	r3,r16,17
   22ae8:	01c000f4 	movhi	r7,3
   22aec:	d9000c17 	ldw	r4,48(sp)
   22af0:	1802db1e 	bne	r3,zero,23660 <___vfiprintf_internal_r+0x1168>
   22af4:	39cf1784 	addi	r7,r7,15454
   22af8:	04400404 	movi	r17,16
   22afc:	00000606 	br	22b18 <___vfiprintf_internal_r+0x620>
   22b00:	21400084 	addi	r5,r4,2
   22b04:	31800204 	addi	r6,r6,8
   22b08:	1809883a 	mov	r4,r3
   22b0c:	843ffc04 	addi	r16,r16,-16
   22b10:	80c00448 	cmpgei	r3,r16,17
   22b14:	18000f26 	beq	r3,zero,22b54 <___vfiprintf_internal_r+0x65c>
   22b18:	20c00044 	addi	r3,r4,1
   22b1c:	10800404 	addi	r2,r2,16
   22b20:	31c00015 	stw	r7,0(r6)
   22b24:	34400115 	stw	r17,4(r6)
   22b28:	d8800d15 	stw	r2,52(sp)
   22b2c:	d8c00c15 	stw	r3,48(sp)
   22b30:	19400208 	cmpgei	r5,r3,8
   22b34:	283ff226 	beq	r5,zero,22b00 <__alt_mem_mcu_subsystem_ram_0+0x78002b00>
   22b38:	1001d41e 	bne	r2,zero,2328c <___vfiprintf_internal_r+0xd94>
   22b3c:	843ffc04 	addi	r16,r16,-16
   22b40:	80c00448 	cmpgei	r3,r16,17
   22b44:	01400044 	movi	r5,1
   22b48:	0009883a 	mov	r4,zero
   22b4c:	e00d883a 	mov	r6,fp
   22b50:	183ff11e 	bne	r3,zero,22b18 <__alt_mem_mcu_subsystem_ram_0+0x78002b18>
   22b54:	1405883a 	add	r2,r2,r16
   22b58:	d9400c15 	stw	r5,48(sp)
   22b5c:	31c00015 	stw	r7,0(r6)
   22b60:	34000115 	stw	r16,4(r6)
   22b64:	d8800d15 	stw	r2,52(sp)
   22b68:	29400210 	cmplti	r5,r5,8
   22b6c:	2801a31e 	bne	r5,zero,231fc <___vfiprintf_internal_r+0xd04>
   22b70:	10026a1e 	bne	r2,zero,2351c <___vfiprintf_internal_r+0x1024>
   22b74:	9540010e 	bge	r18,r21,22b7c <___vfiprintf_internal_r+0x684>
   22b78:	a825883a 	mov	r18,r21
   22b7c:	d8800017 	ldw	r2,0(sp)
   22b80:	1485883a 	add	r2,r2,r18
   22b84:	d8800015 	stw	r2,0(sp)
   22b88:	0001a706 	br	23228 <___vfiprintf_internal_r+0xd30>
   22b8c:	d9000117 	ldw	r4,4(sp)
   22b90:	a00b883a 	mov	r5,r20
   22b94:	001aff80 	call	1aff8 <__swsetup_r>
   22b98:	1002c41e 	bne	r2,zero,236ac <___vfiprintf_internal_r+0x11b4>
   22b9c:	a080030b 	ldhu	r2,12(r20)
   22ba0:	1080068c 	andi	r2,r2,26
   22ba4:	10800298 	cmpnei	r2,r2,10
   22ba8:	103e751e 	bne	r2,zero,22580 <__alt_mem_mcu_subsystem_ram_0+0x78002580>
   22bac:	a080038f 	ldh	r2,14(r20)
   22bb0:	103e7316 	blt	r2,zero,22580 <__alt_mem_mcu_subsystem_ram_0+0x78002580>
   22bb4:	d9c00217 	ldw	r7,8(sp)
   22bb8:	d9000117 	ldw	r4,4(sp)
   22bbc:	b80d883a 	mov	r6,r23
   22bc0:	a00b883a 	mov	r5,r20
   22bc4:	00237300 	call	23730 <__sbprintf>
   22bc8:	d8800015 	stw	r2,0(sp)
   22bcc:	00009906 	br	22e34 <___vfiprintf_internal_r+0x93c>
   22bd0:	1802181e 	bne	r3,zero,23434 <___vfiprintf_internal_r+0xf3c>
   22bd4:	d8000c15 	stw	zero,48(sp)
   22bd8:	e021883a 	mov	r16,fp
   22bdc:	003e8706 	br	225fc <__alt_mem_mcu_subsystem_ram_0+0x780025fc>
   22be0:	0025883a 	mov	r18,zero
   22be4:	113ff404 	addi	r4,r2,-48
   22be8:	bdc00044 	addi	r23,r23,1
   22bec:	948002a4 	muli	r18,r18,10
   22bf0:	b8bfffc7 	ldb	r2,-1(r23)
   22bf4:	24a5883a 	add	r18,r4,r18
   22bf8:	113ff404 	addi	r4,r2,-48
   22bfc:	214002b0 	cmpltui	r5,r4,10
   22c00:	283ff91e 	bne	r5,zero,22be8 <__alt_mem_mcu_subsystem_ram_0+0x78002be8>
   22c04:	113ff804 	addi	r4,r2,-32
   22c08:	21401668 	cmpgeui	r5,r4,89
   22c0c:	283e8c26 	beq	r5,zero,22640 <__alt_mem_mcu_subsystem_ram_0+0x78002640>
   22c10:	31803fcc 	andi	r6,r6,255
   22c14:	3002be1e 	bne	r6,zero,23710 <___vfiprintf_internal_r+0x1218>
   22c18:	10008126 	beq	r2,zero,22e20 <___vfiprintf_internal_r+0x928>
   22c1c:	d8800e05 	stb	r2,56(sp)
   22c20:	d8000a45 	stb	zero,41(sp)
   22c24:	05400044 	movi	r21,1
   22c28:	03400044 	movi	r13,1
   22c2c:	dd800e04 	addi	r22,sp,56
   22c30:	0000d706 	br	22f90 <___vfiprintf_internal_r+0xa98>
   22c34:	18c02014 	ori	r3,r3,128
   22c38:	b8800007 	ldb	r2,0(r23)
   22c3c:	003e7c06 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22c40:	b8800007 	ldb	r2,0(r23)
   22c44:	b9400044 	addi	r5,r23,1
   22c48:	11000aa0 	cmpeqi	r4,r2,42
   22c4c:	20029a1e 	bne	r4,zero,236b8 <___vfiprintf_internal_r+0x11c0>
   22c50:	113ff404 	addi	r4,r2,-48
   22c54:	220002b0 	cmpltui	r8,r4,10
   22c58:	282f883a 	mov	r23,r5
   22c5c:	0023883a 	mov	r17,zero
   22c60:	403e7426 	beq	r8,zero,22634 <__alt_mem_mcu_subsystem_ram_0+0x78002634>
   22c64:	bdc00044 	addi	r23,r23,1
   22c68:	8c4002a4 	muli	r17,r17,10
   22c6c:	b8bfffc7 	ldb	r2,-1(r23)
   22c70:	8923883a 	add	r17,r17,r4
   22c74:	113ff404 	addi	r4,r2,-48
   22c78:	214002b0 	cmpltui	r5,r4,10
   22c7c:	283ff91e 	bne	r5,zero,22c64 <__alt_mem_mcu_subsystem_ram_0+0x78002c64>
   22c80:	003e6c06 	br	22634 <__alt_mem_mcu_subsystem_ram_0+0x78002634>
   22c84:	b8800003 	ldbu	r2,0(r23)
   22c88:	10803fcc 	andi	r2,r2,255
   22c8c:	1080201c 	xori	r2,r2,128
   22c90:	18c00114 	ori	r3,r3,4
   22c94:	10bfe004 	addi	r2,r2,-128
   22c98:	003e6506 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22c9c:	01800044 	movi	r6,1
   22ca0:	01c00ac4 	movi	r7,43
   22ca4:	b8800007 	ldb	r2,0(r23)
   22ca8:	003e6106 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22cac:	d8800217 	ldw	r2,8(sp)
   22cb0:	14800017 	ldw	r18,0(r2)
   22cb4:	15400104 	addi	r21,r2,4
   22cb8:	b8800003 	ldbu	r2,0(r23)
   22cbc:	90024516 	blt	r18,zero,235d4 <___vfiprintf_internal_r+0x10dc>
   22cc0:	dd400215 	stw	r21,8(sp)
   22cc4:	10803fcc 	andi	r2,r2,255
   22cc8:	1080201c 	xori	r2,r2,128
   22ccc:	10bfe004 	addi	r2,r2,-128
   22cd0:	003e5706 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22cd4:	18c00054 	ori	r3,r3,1
   22cd8:	b8800007 	ldb	r2,0(r23)
   22cdc:	003e5406 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22ce0:	39003fcc 	andi	r4,r7,255
   22ce4:	2100201c 	xori	r4,r4,128
   22ce8:	213fe004 	addi	r4,r4,-128
   22cec:	b8800003 	ldbu	r2,0(r23)
   22cf0:	203ff41e 	bne	r4,zero,22cc4 <__alt_mem_mcu_subsystem_ram_0+0x78002cc4>
   22cf4:	10803fcc 	andi	r2,r2,255
   22cf8:	1080201c 	xori	r2,r2,128
   22cfc:	01800044 	movi	r6,1
   22d00:	01c00804 	movi	r7,32
   22d04:	10bfe004 	addi	r2,r2,-128
   22d08:	003e4906 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22d0c:	d9000217 	ldw	r4,8(sp)
   22d10:	1880040c 	andi	r2,r3,16
   22d14:	22c00017 	ldw	r11,0(r4)
   22d18:	21000104 	addi	r4,r4,4
   22d1c:	d9000215 	stw	r4,8(sp)
   22d20:	1000c81e 	bne	r2,zero,23044 <___vfiprintf_internal_r+0xb4c>
   22d24:	1880100c 	andi	r2,r3,64
   22d28:	1000c626 	beq	r2,zero,23044 <___vfiprintf_internal_r+0xb4c>
   22d2c:	5d7fffcc 	andi	r21,r11,65535
   22d30:	001b883a 	mov	r13,zero
   22d34:	0005883a 	mov	r2,zero
   22d38:	003ed906 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   22d3c:	b8800007 	ldb	r2,0(r23)
   22d40:	11001b18 	cmpnei	r4,r2,108
   22d44:	20022626 	beq	r4,zero,235e0 <___vfiprintf_internal_r+0x10e8>
   22d48:	18c00414 	ori	r3,r3,16
   22d4c:	003e3806 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22d50:	d8800217 	ldw	r2,8(sp)
   22d54:	d8000a45 	stb	zero,41(sp)
   22d58:	15800017 	ldw	r22,0(r2)
   22d5c:	14c00104 	addi	r19,r2,4
   22d60:	b0022626 	beq	r22,zero,235fc <___vfiprintf_internal_r+0x1104>
   22d64:	88bfffe0 	cmpeqi	r2,r17,-1
   22d68:	1001f31e 	bne	r2,zero,23538 <___vfiprintf_internal_r+0x1040>
   22d6c:	880d883a 	mov	r6,r17
   22d70:	000b883a 	mov	r5,zero
   22d74:	b009883a 	mov	r4,r22
   22d78:	d8c00215 	stw	r3,8(sp)
   22d7c:	001ddb00 	call	1ddb0 <memchr>
   22d80:	d8c00217 	ldw	r3,8(sp)
   22d84:	10023926 	beq	r2,zero,2366c <___vfiprintf_internal_r+0x1174>
   22d88:	dcc00215 	stw	r19,8(sp)
   22d8c:	159bc83a 	sub	r13,r2,r22
   22d90:	db000a43 	ldbu	r12,41(sp)
   22d94:	1827883a 	mov	r19,r3
   22d98:	0023883a 	mov	r17,zero
   22d9c:	003ecf06 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   22da0:	18c00814 	ori	r3,r3,32
   22da4:	b8800007 	ldb	r2,0(r23)
   22da8:	003e2106 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   22dac:	d9000217 	ldw	r4,8(sp)
   22db0:	00800c04 	movi	r2,48
   22db4:	d8800a85 	stb	r2,42(sp)
   22db8:	00801e04 	movi	r2,120
   22dbc:	014000f4 	movhi	r5,3
   22dc0:	d8800ac5 	stb	r2,43(sp)
   22dc4:	20800104 	addi	r2,r4,4
   22dc8:	d8800215 	stw	r2,8(sp)
   22dcc:	288dd104 	addi	r2,r5,14148
   22dd0:	d8800615 	stw	r2,24(sp)
   22dd4:	25400017 	ldw	r21,0(r4)
   22dd8:	001b883a 	mov	r13,zero
   22ddc:	18c00094 	ori	r3,r3,2
   22de0:	00800084 	movi	r2,2
   22de4:	003eae06 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   22de8:	31803fcc 	andi	r6,r6,255
   22dec:	30023e1e 	bne	r6,zero,236e8 <___vfiprintf_internal_r+0x11f0>
   22df0:	d9400217 	ldw	r5,8(sp)
   22df4:	1880080c 	andi	r2,r3,32
   22df8:	29000017 	ldw	r4,0(r5)
   22dfc:	29400104 	addi	r5,r5,4
   22e00:	d9400215 	stw	r5,8(sp)
   22e04:	1001d626 	beq	r2,zero,23560 <___vfiprintf_internal_r+0x1068>
   22e08:	d8c00017 	ldw	r3,0(sp)
   22e0c:	1805d7fa 	srai	r2,r3,31
   22e10:	20c00015 	stw	r3,0(r4)
   22e14:	20800115 	stw	r2,4(r4)
   22e18:	b8800007 	ldb	r2,0(r23)
   22e1c:	103de11e 	bne	r2,zero,225a4 <__alt_mem_mcu_subsystem_ram_0+0x780025a4>
   22e20:	d8800d17 	ldw	r2,52(sp)
   22e24:	10021c1e 	bne	r2,zero,23698 <___vfiprintf_internal_r+0x11a0>
   22e28:	a080030b 	ldhu	r2,12(r20)
   22e2c:	1080100c 	andi	r2,r2,64
   22e30:	10021e1e 	bne	r2,zero,236ac <___vfiprintf_internal_r+0x11b4>
   22e34:	d8800017 	ldw	r2,0(sp)
   22e38:	dfc03117 	ldw	ra,196(sp)
   22e3c:	df003017 	ldw	fp,192(sp)
   22e40:	ddc02f17 	ldw	r23,188(sp)
   22e44:	dd802e17 	ldw	r22,184(sp)
   22e48:	dd402d17 	ldw	r21,180(sp)
   22e4c:	dd002c17 	ldw	r20,176(sp)
   22e50:	dcc02b17 	ldw	r19,172(sp)
   22e54:	dc802a17 	ldw	r18,168(sp)
   22e58:	dc402917 	ldw	r17,164(sp)
   22e5c:	dc002817 	ldw	r16,160(sp)
   22e60:	dec03204 	addi	sp,sp,200
   22e64:	f800283a 	ret
   22e68:	d9000217 	ldw	r4,8(sp)
   22e6c:	00800044 	movi	r2,1
   22e70:	25400017 	ldw	r21,0(r4)
   22e74:	23400117 	ldw	r13,4(r4)
   22e78:	21000204 	addi	r4,r4,8
   22e7c:	d9000215 	stw	r4,8(sp)
   22e80:	003e8706 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   22e84:	31803fcc 	andi	r6,r6,255
   22e88:	3002191e 	bne	r6,zero,236f0 <___vfiprintf_internal_r+0x11f8>
   22e8c:	010000f4 	movhi	r4,3
   22e90:	210dcc04 	addi	r4,r4,14128
   22e94:	d9000615 	stw	r4,24(sp)
   22e98:	1900080c 	andi	r4,r3,32
   22e9c:	20001626 	beq	r4,zero,22ef8 <___vfiprintf_internal_r+0xa00>
   22ea0:	d9000217 	ldw	r4,8(sp)
   22ea4:	25400017 	ldw	r21,0(r4)
   22ea8:	23400117 	ldw	r13,4(r4)
   22eac:	21000204 	addi	r4,r4,8
   22eb0:	d9000215 	stw	r4,8(sp)
   22eb4:	1900004c 	andi	r4,r3,1
   22eb8:	20001b26 	beq	r4,zero,22f28 <___vfiprintf_internal_r+0xa30>
   22ebc:	ab48b03a 	or	r4,r21,r13
   22ec0:	20001926 	beq	r4,zero,22f28 <___vfiprintf_internal_r+0xa30>
   22ec4:	01000c04 	movi	r4,48
   22ec8:	d8800ac5 	stb	r2,43(sp)
   22ecc:	d9000a85 	stb	r4,42(sp)
   22ed0:	18c00094 	ori	r3,r3,2
   22ed4:	00800084 	movi	r2,2
   22ed8:	003e7106 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   22edc:	31803fcc 	andi	r6,r6,255
   22ee0:	3002051e 	bne	r6,zero,236f8 <___vfiprintf_internal_r+0x1200>
   22ee4:	010000f4 	movhi	r4,3
   22ee8:	210dd104 	addi	r4,r4,14148
   22eec:	d9000615 	stw	r4,24(sp)
   22ef0:	1900080c 	andi	r4,r3,32
   22ef4:	203fea1e 	bne	r4,zero,22ea0 <__alt_mem_mcu_subsystem_ram_0+0x78002ea0>
   22ef8:	d9400217 	ldw	r5,8(sp)
   22efc:	1900040c 	andi	r4,r3,16
   22f00:	2ac00017 	ldw	r11,0(r5)
   22f04:	29400104 	addi	r5,r5,4
   22f08:	d9400215 	stw	r5,8(sp)
   22f0c:	2001531e 	bne	r4,zero,2345c <___vfiprintf_internal_r+0xf64>
   22f10:	1900100c 	andi	r4,r3,64
   22f14:	20015126 	beq	r4,zero,2345c <___vfiprintf_internal_r+0xf64>
   22f18:	1900004c 	andi	r4,r3,1
   22f1c:	5d7fffcc 	andi	r21,r11,65535
   22f20:	001b883a 	mov	r13,zero
   22f24:	203fe51e 	bne	r4,zero,22ebc <__alt_mem_mcu_subsystem_ram_0+0x78002ebc>
   22f28:	00800084 	movi	r2,2
   22f2c:	003e5c06 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   22f30:	31803fcc 	andi	r6,r6,255
   22f34:	3001f21e 	bne	r6,zero,23700 <___vfiprintf_internal_r+0x1208>
   22f38:	1880080c 	andi	r2,r3,32
   22f3c:	10001c26 	beq	r2,zero,22fb0 <___vfiprintf_internal_r+0xab8>
   22f40:	d8800217 	ldw	r2,8(sp)
   22f44:	15400017 	ldw	r21,0(r2)
   22f48:	13400117 	ldw	r13,4(r2)
   22f4c:	10800204 	addi	r2,r2,8
   22f50:	d8800215 	stw	r2,8(sp)
   22f54:	68002316 	blt	r13,zero,22fe4 <___vfiprintf_internal_r+0xaec>
   22f58:	88bfffd8 	cmpnei	r2,r17,-1
   22f5c:	db000a43 	ldbu	r12,41(sp)
   22f60:	10002a26 	beq	r2,zero,2300c <___vfiprintf_internal_r+0xb14>
   22f64:	00800044 	movi	r2,1
   22f68:	003e5106 	br	228b0 <__alt_mem_mcu_subsystem_ram_0+0x780028b0>
   22f6c:	d9000217 	ldw	r4,8(sp)
   22f70:	d8000a45 	stb	zero,41(sp)
   22f74:	05400044 	movi	r21,1
   22f78:	20800017 	ldw	r2,0(r4)
   22f7c:	21000104 	addi	r4,r4,4
   22f80:	d9000215 	stw	r4,8(sp)
   22f84:	d8800e05 	stb	r2,56(sp)
   22f88:	03400044 	movi	r13,1
   22f8c:	dd800e04 	addi	r22,sp,56
   22f90:	1827883a 	mov	r19,r3
   22f94:	0023883a 	mov	r17,zero
   22f98:	003e5806 	br	228fc <__alt_mem_mcu_subsystem_ram_0+0x780028fc>
   22f9c:	31803fcc 	andi	r6,r6,255
   22fa0:	3001d91e 	bne	r6,zero,23708 <___vfiprintf_internal_r+0x1210>
   22fa4:	18c00414 	ori	r3,r3,16
   22fa8:	1880080c 	andi	r2,r3,32
   22fac:	103fe41e 	bne	r2,zero,22f40 <__alt_mem_mcu_subsystem_ram_0+0x78002f40>
   22fb0:	d9000217 	ldw	r4,8(sp)
   22fb4:	1880040c 	andi	r2,r3,16
   22fb8:	22c00017 	ldw	r11,0(r4)
   22fbc:	21000104 	addi	r4,r4,4
   22fc0:	d9000215 	stw	r4,8(sp)
   22fc4:	1001221e 	bne	r2,zero,23450 <___vfiprintf_internal_r+0xf58>
   22fc8:	1880100c 	andi	r2,r3,64
   22fcc:	10012026 	beq	r2,zero,23450 <___vfiprintf_internal_r+0xf58>
   22fd0:	5d7fffcc 	andi	r21,r11,65535
   22fd4:	ad60001c 	xori	r21,r21,32768
   22fd8:	ad600004 	addi	r21,r21,-32768
   22fdc:	a81bd7fa 	srai	r13,r21,31
   22fe0:	683fdd0e 	bge	r13,zero,22f58 <__alt_mem_mcu_subsystem_ram_0+0x78002f58>
   22fe4:	0557c83a 	sub	r11,zero,r21
   22fe8:	5804c03a 	cmpne	r2,r11,zero
   22fec:	035bc83a 	sub	r13,zero,r13
   22ff0:	689bc83a 	sub	r13,r13,r2
   22ff4:	00800b44 	movi	r2,45
   22ff8:	d8800a45 	stb	r2,41(sp)
   22ffc:	88bfffd8 	cmpnei	r2,r17,-1
   23000:	582b883a 	mov	r21,r11
   23004:	03000b44 	movi	r12,45
   23008:	103fd61e 	bne	r2,zero,22f64 <__alt_mem_mcu_subsystem_ram_0+0x78002f64>
   2300c:	1827883a 	mov	r19,r3
   23010:	6800ed1e 	bne	r13,zero,233c8 <___vfiprintf_internal_r+0xed0>
   23014:	a88002a8 	cmpgeui	r2,r21,10
   23018:	1000eb1e 	bne	r2,zero,233c8 <___vfiprintf_internal_r+0xed0>
   2301c:	aac00c04 	addi	r11,r21,48
   23020:	dac017c5 	stb	r11,95(sp)
   23024:	03400044 	movi	r13,1
   23028:	dd8017c4 	addi	r22,sp,95
   2302c:	003e2b06 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   23030:	18c01014 	ori	r3,r3,64
   23034:	b8800007 	ldb	r2,0(r23)
   23038:	003d7d06 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   2303c:	001d0240 	call	1d024 <__sinit>
   23040:	003d3f06 	br	22540 <__alt_mem_mcu_subsystem_ram_0+0x78002540>
   23044:	582b883a 	mov	r21,r11
   23048:	001b883a 	mov	r13,zero
   2304c:	0005883a 	mov	r2,zero
   23050:	003e1306 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   23054:	582b883a 	mov	r21,r11
   23058:	001b883a 	mov	r13,zero
   2305c:	00800044 	movi	r2,1
   23060:	003e0f06 	br	228a0 <__alt_mem_mcu_subsystem_ram_0+0x780028a0>
   23064:	d9000117 	ldw	r4,4(sp)
   23068:	d9800b04 	addi	r6,sp,44
   2306c:	a00b883a 	mov	r5,r20
   23070:	d9c00515 	stw	r7,20(sp)
   23074:	db000415 	stw	r12,16(sp)
   23078:	db400315 	stw	r13,12(sp)
   2307c:	00223ec0 	call	223ec <__sprint_r.part.0>
   23080:	103f691e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23084:	d9000c17 	ldw	r4,48(sp)
   23088:	d8800d17 	ldw	r2,52(sp)
   2308c:	e021883a 	mov	r16,fp
   23090:	21400044 	addi	r5,r4,1
   23094:	d9c00517 	ldw	r7,20(sp)
   23098:	db000417 	ldw	r12,16(sp)
   2309c:	db400317 	ldw	r13,12(sp)
   230a0:	003e6506 	br	22a38 <__alt_mem_mcu_subsystem_ram_0+0x78002a38>
   230a4:	d9000117 	ldw	r4,4(sp)
   230a8:	d9800b04 	addi	r6,sp,44
   230ac:	a00b883a 	mov	r5,r20
   230b0:	db400515 	stw	r13,20(sp)
   230b4:	db000415 	stw	r12,16(sp)
   230b8:	db800315 	stw	r14,12(sp)
   230bc:	00223ec0 	call	223ec <__sprint_r.part.0>
   230c0:	103f591e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   230c4:	d9000c17 	ldw	r4,48(sp)
   230c8:	d8800d17 	ldw	r2,52(sp)
   230cc:	db400517 	ldw	r13,20(sp)
   230d0:	db000417 	ldw	r12,16(sp)
   230d4:	db800317 	ldw	r14,12(sp)
   230d8:	d9801a04 	addi	r6,sp,104
   230dc:	21400044 	addi	r5,r4,1
   230e0:	e021883a 	mov	r16,fp
   230e4:	703e4726 	beq	r14,zero,22a04 <__alt_mem_mcu_subsystem_ram_0+0x78002a04>
   230e8:	d8c00a84 	addi	r3,sp,42
   230ec:	10800084 	addi	r2,r2,2
   230f0:	80c00015 	stw	r3,0(r16)
   230f4:	00c00084 	movi	r3,2
   230f8:	80c00115 	stw	r3,4(r16)
   230fc:	d8800d15 	stw	r2,52(sp)
   23100:	d9400c15 	stw	r5,48(sp)
   23104:	28c00208 	cmpgei	r3,r5,8
   23108:	1800a126 	beq	r3,zero,23390 <___vfiprintf_internal_r+0xe98>
   2310c:	1000d61e 	bne	r2,zero,23468 <___vfiprintf_internal_r+0xf70>
   23110:	63002018 	cmpnei	r12,r12,128
   23114:	d9801a04 	addi	r6,sp,104
   23118:	01400044 	movi	r5,1
   2311c:	0009883a 	mov	r4,zero
   23120:	e021883a 	mov	r16,fp
   23124:	603e391e 	bne	r12,zero,22a0c <__alt_mem_mcu_subsystem_ram_0+0x78002a0c>
   23128:	9547c83a 	sub	r3,r18,r21
   2312c:	00fe370e 	bge	zero,r3,22a0c <__alt_mem_mcu_subsystem_ram_0+0x78002a0c>
   23130:	19c00450 	cmplti	r7,r3,17
   23134:	3801531e 	bne	r7,zero,23684 <___vfiprintf_internal_r+0x118c>
   23138:	01c000f4 	movhi	r7,3
   2313c:	39cf1384 	addi	r7,r7,15438
   23140:	03000404 	movi	r12,16
   23144:	00000606 	br	23160 <___vfiprintf_internal_r+0xc68>
   23148:	23800084 	addi	r14,r4,2
   2314c:	84000204 	addi	r16,r16,8
   23150:	2809883a 	mov	r4,r5
   23154:	18fffc04 	addi	r3,r3,-16
   23158:	19400448 	cmpgei	r5,r3,17
   2315c:	28000f26 	beq	r5,zero,2319c <___vfiprintf_internal_r+0xca4>
   23160:	21400044 	addi	r5,r4,1
   23164:	10800404 	addi	r2,r2,16
   23168:	81c00015 	stw	r7,0(r16)
   2316c:	83000115 	stw	r12,4(r16)
   23170:	d8800d15 	stw	r2,52(sp)
   23174:	d9400c15 	stw	r5,48(sp)
   23178:	29800208 	cmpgei	r6,r5,8
   2317c:	303ff226 	beq	r6,zero,23148 <__alt_mem_mcu_subsystem_ram_0+0x78003148>
   23180:	10005d1e 	bne	r2,zero,232f8 <___vfiprintf_internal_r+0xe00>
   23184:	18fffc04 	addi	r3,r3,-16
   23188:	19400448 	cmpgei	r5,r3,17
   2318c:	03800044 	movi	r14,1
   23190:	0009883a 	mov	r4,zero
   23194:	e021883a 	mov	r16,fp
   23198:	283ff11e 	bne	r5,zero,23160 <__alt_mem_mcu_subsystem_ram_0+0x78003160>
   2319c:	83000204 	addi	r12,r16,8
   231a0:	10c5883a 	add	r2,r2,r3
   231a4:	80c00115 	stw	r3,4(r16)
   231a8:	81c00015 	stw	r7,0(r16)
   231ac:	d8800d15 	stw	r2,52(sp)
   231b0:	db800c15 	stw	r14,48(sp)
   231b4:	70c00208 	cmpgei	r3,r14,8
   231b8:	1800ba1e 	bne	r3,zero,234a4 <___vfiprintf_internal_r+0xfac>
   231bc:	71400044 	addi	r5,r14,1
   231c0:	61800204 	addi	r6,r12,8
   231c4:	7009883a 	mov	r4,r14
   231c8:	6021883a 	mov	r16,r12
   231cc:	003e0f06 	br	22a0c <__alt_mem_mcu_subsystem_ram_0+0x78002a0c>
   231d0:	d9000117 	ldw	r4,4(sp)
   231d4:	d9800b04 	addi	r6,sp,44
   231d8:	a00b883a 	mov	r5,r20
   231dc:	00223ec0 	call	223ec <__sprint_r.part.0>
   231e0:	103f111e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   231e4:	d8800d17 	ldw	r2,52(sp)
   231e8:	e00d883a 	mov	r6,fp
   231ec:	9cc0010c 	andi	r19,r19,4
   231f0:	98000226 	beq	r19,zero,231fc <___vfiprintf_internal_r+0xd04>
   231f4:	9561c83a 	sub	r16,r18,r21
   231f8:	043e3a16 	blt	zero,r16,22ae4 <__alt_mem_mcu_subsystem_ram_0+0x78002ae4>
   231fc:	9540010e 	bge	r18,r21,23204 <___vfiprintf_internal_r+0xd0c>
   23200:	a825883a 	mov	r18,r21
   23204:	d8c00017 	ldw	r3,0(sp)
   23208:	1c87883a 	add	r3,r3,r18
   2320c:	d8c00015 	stw	r3,0(sp)
   23210:	10000526 	beq	r2,zero,23228 <___vfiprintf_internal_r+0xd30>
   23214:	d9000117 	ldw	r4,4(sp)
   23218:	d9800b04 	addi	r6,sp,44
   2321c:	a00b883a 	mov	r5,r20
   23220:	00223ec0 	call	223ec <__sprint_r.part.0>
   23224:	103f001e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23228:	d8000c15 	stw	zero,48(sp)
   2322c:	e021883a 	mov	r16,fp
   23230:	003cda06 	br	2259c <__alt_mem_mcu_subsystem_ram_0+0x7800259c>
   23234:	d9000117 	ldw	r4,4(sp)
   23238:	d9800b04 	addi	r6,sp,44
   2323c:	a00b883a 	mov	r5,r20
   23240:	d9c00915 	stw	r7,36(sp)
   23244:	dbc00815 	stw	r15,32(sp)
   23248:	d8c00715 	stw	r3,28(sp)
   2324c:	db400515 	stw	r13,20(sp)
   23250:	db000415 	stw	r12,16(sp)
   23254:	db800315 	stw	r14,12(sp)
   23258:	00223ec0 	call	223ec <__sprint_r.part.0>
   2325c:	103ef21e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23260:	d9000c17 	ldw	r4,48(sp)
   23264:	d8800d17 	ldw	r2,52(sp)
   23268:	e021883a 	mov	r16,fp
   2326c:	27c00044 	addi	ra,r4,1
   23270:	d9c00917 	ldw	r7,36(sp)
   23274:	dbc00817 	ldw	r15,32(sp)
   23278:	d8c00717 	ldw	r3,28(sp)
   2327c:	db400517 	ldw	r13,20(sp)
   23280:	db000417 	ldw	r12,16(sp)
   23284:	db800317 	ldw	r14,12(sp)
   23288:	003db006 	br	2294c <__alt_mem_mcu_subsystem_ram_0+0x7800294c>
   2328c:	d9000117 	ldw	r4,4(sp)
   23290:	d9800b04 	addi	r6,sp,44
   23294:	a00b883a 	mov	r5,r20
   23298:	d9c00315 	stw	r7,12(sp)
   2329c:	00223ec0 	call	223ec <__sprint_r.part.0>
   232a0:	103ee11e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   232a4:	d9000c17 	ldw	r4,48(sp)
   232a8:	d8800d17 	ldw	r2,52(sp)
   232ac:	e00d883a 	mov	r6,fp
   232b0:	21400044 	addi	r5,r4,1
   232b4:	d9c00317 	ldw	r7,12(sp)
   232b8:	003e1406 	br	22b0c <__alt_mem_mcu_subsystem_ram_0+0x78002b0c>
   232bc:	e02d883a 	mov	r22,fp
   232c0:	d9000617 	ldw	r4,24(sp)
   232c4:	a88003cc 	andi	r2,r21,15
   232c8:	6806973a 	slli	r3,r13,28
   232cc:	2085883a 	add	r2,r4,r2
   232d0:	a816d13a 	srli	r11,r21,4
   232d4:	10800003 	ldbu	r2,0(r2)
   232d8:	681ad13a 	srli	r13,r13,4
   232dc:	b5bfffc4 	addi	r22,r22,-1
   232e0:	1aeab03a 	or	r21,r3,r11
   232e4:	b0800005 	stb	r2,0(r22)
   232e8:	ab44b03a 	or	r2,r21,r13
   232ec:	103ff41e 	bne	r2,zero,232c0 <__alt_mem_mcu_subsystem_ram_0+0x780032c0>
   232f0:	e59bc83a 	sub	r13,fp,r22
   232f4:	003d7906 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   232f8:	d9000117 	ldw	r4,4(sp)
   232fc:	d9800b04 	addi	r6,sp,44
   23300:	a00b883a 	mov	r5,r20
   23304:	d9c00715 	stw	r7,28(sp)
   23308:	db000515 	stw	r12,20(sp)
   2330c:	d8c00415 	stw	r3,16(sp)
   23310:	db400315 	stw	r13,12(sp)
   23314:	00223ec0 	call	223ec <__sprint_r.part.0>
   23318:	103ec31e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   2331c:	d9000c17 	ldw	r4,48(sp)
   23320:	d8800d17 	ldw	r2,52(sp)
   23324:	e021883a 	mov	r16,fp
   23328:	23800044 	addi	r14,r4,1
   2332c:	d9c00717 	ldw	r7,28(sp)
   23330:	db000517 	ldw	r12,20(sp)
   23334:	d8c00417 	ldw	r3,16(sp)
   23338:	db400317 	ldw	r13,12(sp)
   2333c:	003f8506 	br	23154 <__alt_mem_mcu_subsystem_ram_0+0x78003154>
   23340:	10008e1e 	bne	r2,zero,2357c <___vfiprintf_internal_r+0x1084>
   23344:	d8c00a47 	ldb	r3,41(sp)
   23348:	18006e26 	beq	r3,zero,23504 <___vfiprintf_internal_r+0x100c>
   2334c:	d8800a44 	addi	r2,sp,41
   23350:	d8801815 	stw	r2,96(sp)
   23354:	00800044 	movi	r2,1
   23358:	d8801915 	stw	r2,100(sp)
   2335c:	d9801a04 	addi	r6,sp,104
   23360:	01400044 	movi	r5,1
   23364:	2809883a 	mov	r4,r5
   23368:	3021883a 	mov	r16,r6
   2336c:	29400044 	addi	r5,r5,1
   23370:	31800204 	addi	r6,r6,8
   23374:	003f5b06 	br	230e4 <__alt_mem_mcu_subsystem_ram_0+0x780030e4>
   23378:	d8800a84 	addi	r2,sp,42
   2337c:	d8801815 	stw	r2,96(sp)
   23380:	00800084 	movi	r2,2
   23384:	d8801915 	stw	r2,100(sp)
   23388:	d9801a04 	addi	r6,sp,104
   2338c:	01400044 	movi	r5,1
   23390:	2809883a 	mov	r4,r5
   23394:	3021883a 	mov	r16,r6
   23398:	29400044 	addi	r5,r5,1
   2339c:	31800204 	addi	r6,r6,8
   233a0:	003d9806 	br	22a04 <__alt_mem_mcu_subsystem_ram_0+0x78002a04>
   233a4:	1000451e 	bne	r2,zero,234bc <___vfiprintf_internal_r+0xfc4>
   233a8:	00c00044 	movi	r3,1
   233ac:	6805883a 	mov	r2,r13
   233b0:	dd801815 	stw	r22,96(sp)
   233b4:	db401915 	stw	r13,100(sp)
   233b8:	db400d15 	stw	r13,52(sp)
   233bc:	d8c00c15 	stw	r3,48(sp)
   233c0:	d9801a04 	addi	r6,sp,104
   233c4:	003f8906 	br	231ec <__alt_mem_mcu_subsystem_ram_0+0x780031ec>
   233c8:	e02d883a 	mov	r22,fp
   233cc:	a809883a 	mov	r4,r21
   233d0:	680b883a 	mov	r5,r13
   233d4:	01800284 	movi	r6,10
   233d8:	000f883a 	mov	r7,zero
   233dc:	db000415 	stw	r12,16(sp)
   233e0:	db400315 	stw	r13,12(sp)
   233e4:	00124000 	call	12400 <__umoddi3>
   233e8:	db400317 	ldw	r13,12(sp)
   233ec:	10800c04 	addi	r2,r2,48
   233f0:	b5bfffc4 	addi	r22,r22,-1
   233f4:	a809883a 	mov	r4,r21
   233f8:	680b883a 	mov	r5,r13
   233fc:	b0800005 	stb	r2,0(r22)
   23400:	01800284 	movi	r6,10
   23404:	000f883a 	mov	r7,zero
   23408:	0011e680 	call	11e68 <__udivdi3>
   2340c:	102b883a 	mov	r21,r2
   23410:	10c4b03a 	or	r2,r2,r3
   23414:	181b883a 	mov	r13,r3
   23418:	db000417 	ldw	r12,16(sp)
   2341c:	103feb1e 	bne	r2,zero,233cc <__alt_mem_mcu_subsystem_ram_0+0x780033cc>
   23420:	e59bc83a 	sub	r13,fp,r22
   23424:	003d2d06 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   23428:	001b883a 	mov	r13,zero
   2342c:	e02d883a 	mov	r22,fp
   23430:	003d2a06 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   23434:	d9000117 	ldw	r4,4(sp)
   23438:	d9800b04 	addi	r6,sp,44
   2343c:	a00b883a 	mov	r5,r20
   23440:	00223ec0 	call	223ec <__sprint_r.part.0>
   23444:	103e781e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23448:	e021883a 	mov	r16,fp
   2344c:	003c6b06 	br	225fc <__alt_mem_mcu_subsystem_ram_0+0x780025fc>
   23450:	582b883a 	mov	r21,r11
   23454:	581bd7fa 	srai	r13,r11,31
   23458:	003ebe06 	br	22f54 <__alt_mem_mcu_subsystem_ram_0+0x78002f54>
   2345c:	582b883a 	mov	r21,r11
   23460:	001b883a 	mov	r13,zero
   23464:	003e9306 	br	22eb4 <__alt_mem_mcu_subsystem_ram_0+0x78002eb4>
   23468:	d9000117 	ldw	r4,4(sp)
   2346c:	d9800b04 	addi	r6,sp,44
   23470:	a00b883a 	mov	r5,r20
   23474:	db400415 	stw	r13,16(sp)
   23478:	db000315 	stw	r12,12(sp)
   2347c:	00223ec0 	call	223ec <__sprint_r.part.0>
   23480:	103e691e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23484:	d9000c17 	ldw	r4,48(sp)
   23488:	d8800d17 	ldw	r2,52(sp)
   2348c:	d9801a04 	addi	r6,sp,104
   23490:	21400044 	addi	r5,r4,1
   23494:	e021883a 	mov	r16,fp
   23498:	db400417 	ldw	r13,16(sp)
   2349c:	db000317 	ldw	r12,12(sp)
   234a0:	003d5806 	br	22a04 <__alt_mem_mcu_subsystem_ram_0+0x78002a04>
   234a4:	10005e1e 	bne	r2,zero,23620 <___vfiprintf_internal_r+0x1128>
   234a8:	d9801a04 	addi	r6,sp,104
   234ac:	01400044 	movi	r5,1
   234b0:	0009883a 	mov	r4,zero
   234b4:	e021883a 	mov	r16,fp
   234b8:	003d5406 	br	22a0c <__alt_mem_mcu_subsystem_ram_0+0x78002a0c>
   234bc:	d9000117 	ldw	r4,4(sp)
   234c0:	d9800b04 	addi	r6,sp,44
   234c4:	a00b883a 	mov	r5,r20
   234c8:	db400315 	stw	r13,12(sp)
   234cc:	00223ec0 	call	223ec <__sprint_r.part.0>
   234d0:	103e551e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   234d4:	d9400c17 	ldw	r5,48(sp)
   234d8:	d8800d17 	ldw	r2,52(sp)
   234dc:	d9801a04 	addi	r6,sp,104
   234e0:	29400044 	addi	r5,r5,1
   234e4:	e021883a 	mov	r16,fp
   234e8:	db400317 	ldw	r13,12(sp)
   234ec:	003d6f06 	br	22aac <__alt_mem_mcu_subsystem_ram_0+0x78002aac>
   234f0:	10c00060 	cmpeqi	r3,r2,1
   234f4:	183cc526 	beq	r3,zero,2280c <__alt_mem_mcu_subsystem_ram_0+0x7800280c>
   234f8:	003ec806 	br	2301c <__alt_mem_mcu_subsystem_ram_0+0x7800301c>
   234fc:	e02d883a 	mov	r22,fp
   23500:	003cf606 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   23504:	703f9c1e 	bne	r14,zero,23378 <__alt_mem_mcu_subsystem_ram_0+0x78003378>
   23508:	0009883a 	mov	r4,zero
   2350c:	d9801a04 	addi	r6,sp,104
   23510:	01400044 	movi	r5,1
   23514:	e021883a 	mov	r16,fp
   23518:	003d3c06 	br	22a0c <__alt_mem_mcu_subsystem_ram_0+0x78002a0c>
   2351c:	d9000117 	ldw	r4,4(sp)
   23520:	d9800b04 	addi	r6,sp,44
   23524:	a00b883a 	mov	r5,r20
   23528:	00223ec0 	call	223ec <__sprint_r.part.0>
   2352c:	103e3e1e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23530:	d8800d17 	ldw	r2,52(sp)
   23534:	003f3106 	br	231fc <__alt_mem_mcu_subsystem_ram_0+0x780031fc>
   23538:	b009883a 	mov	r4,r22
   2353c:	d8c00315 	stw	r3,12(sp)
   23540:	001676c0 	call	1676c <strlen>
   23544:	d8c00317 	ldw	r3,12(sp)
   23548:	dcc00215 	stw	r19,8(sp)
   2354c:	101b883a 	mov	r13,r2
   23550:	db000a43 	ldbu	r12,41(sp)
   23554:	1827883a 	mov	r19,r3
   23558:	0023883a 	mov	r17,zero
   2355c:	003cdf06 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   23560:	1880040c 	andi	r2,r3,16
   23564:	1000181e 	bne	r2,zero,235c8 <___vfiprintf_internal_r+0x10d0>
   23568:	18c0100c 	andi	r3,r3,64
   2356c:	18001626 	beq	r3,zero,235c8 <___vfiprintf_internal_r+0x10d0>
   23570:	d8800017 	ldw	r2,0(sp)
   23574:	2080000d 	sth	r2,0(r4)
   23578:	003c0806 	br	2259c <__alt_mem_mcu_subsystem_ram_0+0x7800259c>
   2357c:	d9000117 	ldw	r4,4(sp)
   23580:	d9800b04 	addi	r6,sp,44
   23584:	a00b883a 	mov	r5,r20
   23588:	db400515 	stw	r13,20(sp)
   2358c:	db000415 	stw	r12,16(sp)
   23590:	db800315 	stw	r14,12(sp)
   23594:	00223ec0 	call	223ec <__sprint_r.part.0>
   23598:	103e231e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   2359c:	d9000c17 	ldw	r4,48(sp)
   235a0:	d8800d17 	ldw	r2,52(sp)
   235a4:	e021883a 	mov	r16,fp
   235a8:	21400044 	addi	r5,r4,1
   235ac:	db400517 	ldw	r13,20(sp)
   235b0:	db000417 	ldw	r12,16(sp)
   235b4:	db800317 	ldw	r14,12(sp)
   235b8:	003d0006 	br	229bc <__alt_mem_mcu_subsystem_ram_0+0x780029bc>
   235bc:	3009883a 	mov	r4,r6
   235c0:	39cf1384 	addi	r7,r7,15438
   235c4:	003d2f06 	br	22a84 <__alt_mem_mcu_subsystem_ram_0+0x78002a84>
   235c8:	d8800017 	ldw	r2,0(sp)
   235cc:	20800015 	stw	r2,0(r4)
   235d0:	003bf206 	br	2259c <__alt_mem_mcu_subsystem_ram_0+0x7800259c>
   235d4:	04a5c83a 	sub	r18,zero,r18
   235d8:	dd400215 	stw	r21,8(sp)
   235dc:	003daa06 	br	22c88 <__alt_mem_mcu_subsystem_ram_0+0x78002c88>
   235e0:	b8800043 	ldbu	r2,1(r23)
   235e4:	18c00814 	ori	r3,r3,32
   235e8:	bdc00044 	addi	r23,r23,1
   235ec:	10803fcc 	andi	r2,r2,255
   235f0:	1080201c 	xori	r2,r2,128
   235f4:	10bfe004 	addi	r2,r2,-128
   235f8:	003c0d06 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   235fc:	888001f0 	cmpltui	r2,r17,7
   23600:	881b883a 	mov	r13,r17
   23604:	1000011e 	bne	r2,zero,2360c <___vfiprintf_internal_r+0x1114>
   23608:	03400184 	movi	r13,6
   2360c:	058000f4 	movhi	r22,3
   23610:	682b883a 	mov	r21,r13
   23614:	dcc00215 	stw	r19,8(sp)
   23618:	b58dd604 	addi	r22,r22,14168
   2361c:	003e5c06 	br	22f90 <__alt_mem_mcu_subsystem_ram_0+0x78002f90>
   23620:	d9000117 	ldw	r4,4(sp)
   23624:	d9800b04 	addi	r6,sp,44
   23628:	a00b883a 	mov	r5,r20
   2362c:	db400315 	stw	r13,12(sp)
   23630:	00223ec0 	call	223ec <__sprint_r.part.0>
   23634:	103dfc1e 	bne	r2,zero,22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   23638:	d9000c17 	ldw	r4,48(sp)
   2363c:	d8800d17 	ldw	r2,52(sp)
   23640:	d9801a04 	addi	r6,sp,104
   23644:	21400044 	addi	r5,r4,1
   23648:	e021883a 	mov	r16,fp
   2364c:	db400317 	ldw	r13,12(sp)
   23650:	003cee06 	br	22a0c <__alt_mem_mcu_subsystem_ram_0+0x78002a0c>
   23654:	303f883a 	mov	ra,r6
   23658:	39cf1784 	addi	r7,r7,15454
   2365c:	003ccd06 	br	22994 <__alt_mem_mcu_subsystem_ram_0+0x78002994>
   23660:	21400044 	addi	r5,r4,1
   23664:	39cf1784 	addi	r7,r7,15454
   23668:	003d3a06 	br	22b54 <__alt_mem_mcu_subsystem_ram_0+0x78002b54>
   2366c:	881b883a 	mov	r13,r17
   23670:	dcc00215 	stw	r19,8(sp)
   23674:	db000a43 	ldbu	r12,41(sp)
   23678:	1827883a 	mov	r19,r3
   2367c:	0023883a 	mov	r17,zero
   23680:	003c9606 	br	228dc <__alt_mem_mcu_subsystem_ram_0+0x780028dc>
   23684:	01c000f4 	movhi	r7,3
   23688:	3019883a 	mov	r12,r6
   2368c:	281d883a 	mov	r14,r5
   23690:	39cf1384 	addi	r7,r7,15438
   23694:	003ec206 	br	231a0 <__alt_mem_mcu_subsystem_ram_0+0x780031a0>
   23698:	d9000117 	ldw	r4,4(sp)
   2369c:	d9800b04 	addi	r6,sp,44
   236a0:	a00b883a 	mov	r5,r20
   236a4:	00223ec0 	call	223ec <__sprint_r.part.0>
   236a8:	003ddf06 	br	22e28 <__alt_mem_mcu_subsystem_ram_0+0x78002e28>
   236ac:	00bfffc4 	movi	r2,-1
   236b0:	d8800015 	stw	r2,0(sp)
   236b4:	003ddf06 	br	22e34 <__alt_mem_mcu_subsystem_ram_0+0x78002e34>
   236b8:	d8800217 	ldw	r2,8(sp)
   236bc:	14400017 	ldw	r17,0(r2)
   236c0:	15400104 	addi	r21,r2,4
   236c4:	8800010e 	bge	r17,zero,236cc <___vfiprintf_internal_r+0x11d4>
   236c8:	047fffc4 	movi	r17,-1
   236cc:	b8800043 	ldbu	r2,1(r23)
   236d0:	dd400215 	stw	r21,8(sp)
   236d4:	282f883a 	mov	r23,r5
   236d8:	10803fcc 	andi	r2,r2,255
   236dc:	1080201c 	xori	r2,r2,128
   236e0:	10bfe004 	addi	r2,r2,-128
   236e4:	003bd206 	br	22630 <__alt_mem_mcu_subsystem_ram_0+0x78002630>
   236e8:	d9c00a45 	stb	r7,41(sp)
   236ec:	003dc006 	br	22df0 <__alt_mem_mcu_subsystem_ram_0+0x78002df0>
   236f0:	d9c00a45 	stb	r7,41(sp)
   236f4:	003de506 	br	22e8c <__alt_mem_mcu_subsystem_ram_0+0x78002e8c>
   236f8:	d9c00a45 	stb	r7,41(sp)
   236fc:	003df906 	br	22ee4 <__alt_mem_mcu_subsystem_ram_0+0x78002ee4>
   23700:	d9c00a45 	stb	r7,41(sp)
   23704:	003e0c06 	br	22f38 <__alt_mem_mcu_subsystem_ram_0+0x78002f38>
   23708:	d9c00a45 	stb	r7,41(sp)
   2370c:	003e2506 	br	22fa4 <__alt_mem_mcu_subsystem_ram_0+0x78002fa4>
   23710:	d9c00a45 	stb	r7,41(sp)
   23714:	003d4006 	br	22c18 <__alt_mem_mcu_subsystem_ram_0+0x78002c18>

00023718 <__vfiprintf_internal>:
   23718:	008000f4 	movhi	r2,3
   2371c:	300f883a 	mov	r7,r6
   23720:	280d883a 	mov	r6,r5
   23724:	200b883a 	mov	r5,r4
   23728:	111e6617 	ldw	r4,31128(r2)
   2372c:	00224f81 	jmpi	224f8 <___vfiprintf_internal_r>

00023730 <__sbprintf>:
   23730:	2880030b 	ldhu	r2,12(r5)
   23734:	2b001917 	ldw	r12,100(r5)
   23738:	2ac0038b 	ldhu	r11,14(r5)
   2373c:	2a800717 	ldw	r10,28(r5)
   23740:	2a400917 	ldw	r9,36(r5)
   23744:	defee204 	addi	sp,sp,-1144
   23748:	da001a04 	addi	r8,sp,104
   2374c:	00c10004 	movi	r3,1024
   23750:	dc011a15 	stw	r16,1128(sp)
   23754:	10bfff4c 	andi	r2,r2,65533
   23758:	2821883a 	mov	r16,r5
   2375c:	d80b883a 	mov	r5,sp
   23760:	dc811c15 	stw	r18,1136(sp)
   23764:	dc411b15 	stw	r17,1132(sp)
   23768:	dfc11d15 	stw	ra,1140(sp)
   2376c:	2025883a 	mov	r18,r4
   23770:	d880030d 	sth	r2,12(sp)
   23774:	db001915 	stw	r12,100(sp)
   23778:	dac0038d 	sth	r11,14(sp)
   2377c:	da800715 	stw	r10,28(sp)
   23780:	da400915 	stw	r9,36(sp)
   23784:	da000015 	stw	r8,0(sp)
   23788:	da000415 	stw	r8,16(sp)
   2378c:	d8c00215 	stw	r3,8(sp)
   23790:	d8c00515 	stw	r3,20(sp)
   23794:	d8000615 	stw	zero,24(sp)
   23798:	00224f80 	call	224f8 <___vfiprintf_internal_r>
   2379c:	1023883a 	mov	r17,r2
   237a0:	10000d0e 	bge	r2,zero,237d8 <__sbprintf+0xa8>
   237a4:	d880030b 	ldhu	r2,12(sp)
   237a8:	1080100c 	andi	r2,r2,64
   237ac:	10000326 	beq	r2,zero,237bc <__sbprintf+0x8c>
   237b0:	8080030b 	ldhu	r2,12(r16)
   237b4:	10801014 	ori	r2,r2,64
   237b8:	8080030d 	sth	r2,12(r16)
   237bc:	8805883a 	mov	r2,r17
   237c0:	dfc11d17 	ldw	ra,1140(sp)
   237c4:	dc811c17 	ldw	r18,1136(sp)
   237c8:	dc411b17 	ldw	r17,1132(sp)
   237cc:	dc011a17 	ldw	r16,1128(sp)
   237d0:	dec11e04 	addi	sp,sp,1144
   237d4:	f800283a 	ret
   237d8:	d80b883a 	mov	r5,sp
   237dc:	9009883a 	mov	r4,r18
   237e0:	001cc840 	call	1cc84 <_fflush_r>
   237e4:	103fef26 	beq	r2,zero,237a4 <__alt_mem_mcu_subsystem_ram_0+0x780037a4>
   237e8:	047fffc4 	movi	r17,-1
   237ec:	003fed06 	br	237a4 <__alt_mem_mcu_subsystem_ram_0+0x780037a4>

000237f0 <__swbuf_r>:
   237f0:	defffb04 	addi	sp,sp,-20
   237f4:	dc800215 	stw	r18,8(sp)
   237f8:	dc400115 	stw	r17,4(sp)
   237fc:	dc000015 	stw	r16,0(sp)
   23800:	dfc00415 	stw	ra,16(sp)
   23804:	dcc00315 	stw	r19,12(sp)
   23808:	2023883a 	mov	r17,r4
   2380c:	2825883a 	mov	r18,r5
   23810:	3021883a 	mov	r16,r6
   23814:	20000226 	beq	r4,zero,23820 <__swbuf_r+0x30>
   23818:	20800e17 	ldw	r2,56(r4)
   2381c:	10003e26 	beq	r2,zero,23918 <__swbuf_r+0x128>
   23820:	80800617 	ldw	r2,24(r16)
   23824:	80c0030b 	ldhu	r3,12(r16)
   23828:	80800215 	stw	r2,8(r16)
   2382c:	1880020c 	andi	r2,r3,8
   23830:	10001f26 	beq	r2,zero,238b0 <__swbuf_r+0xc0>
   23834:	80800417 	ldw	r2,16(r16)
   23838:	10001d26 	beq	r2,zero,238b0 <__swbuf_r+0xc0>
   2383c:	1908000c 	andi	r4,r3,8192
   23840:	94c03fcc 	andi	r19,r18,255
   23844:	20002326 	beq	r4,zero,238d4 <__swbuf_r+0xe4>
   23848:	80c00017 	ldw	r3,0(r16)
   2384c:	81000517 	ldw	r4,20(r16)
   23850:	1885c83a 	sub	r2,r3,r2
   23854:	1100290e 	bge	r2,r4,238fc <__swbuf_r+0x10c>
   23858:	10800044 	addi	r2,r2,1
   2385c:	81000217 	ldw	r4,8(r16)
   23860:	19400044 	addi	r5,r3,1
   23864:	81400015 	stw	r5,0(r16)
   23868:	213fffc4 	addi	r4,r4,-1
   2386c:	81000215 	stw	r4,8(r16)
   23870:	1c800005 	stb	r18,0(r3)
   23874:	80c00517 	ldw	r3,20(r16)
   23878:	18802926 	beq	r3,r2,23920 <__swbuf_r+0x130>
   2387c:	8080030b 	ldhu	r2,12(r16)
   23880:	1080004c 	andi	r2,r2,1
   23884:	10000226 	beq	r2,zero,23890 <__swbuf_r+0xa0>
   23888:	98800298 	cmpnei	r2,r19,10
   2388c:	10002426 	beq	r2,zero,23920 <__swbuf_r+0x130>
   23890:	9805883a 	mov	r2,r19
   23894:	dfc00417 	ldw	ra,16(sp)
   23898:	dcc00317 	ldw	r19,12(sp)
   2389c:	dc800217 	ldw	r18,8(sp)
   238a0:	dc400117 	ldw	r17,4(sp)
   238a4:	dc000017 	ldw	r16,0(sp)
   238a8:	dec00504 	addi	sp,sp,20
   238ac:	f800283a 	ret
   238b0:	800b883a 	mov	r5,r16
   238b4:	8809883a 	mov	r4,r17
   238b8:	001aff80 	call	1aff8 <__swsetup_r>
   238bc:	10001c1e 	bne	r2,zero,23930 <__swbuf_r+0x140>
   238c0:	80c0030b 	ldhu	r3,12(r16)
   238c4:	80800417 	ldw	r2,16(r16)
   238c8:	94c03fcc 	andi	r19,r18,255
   238cc:	1908000c 	andi	r4,r3,8192
   238d0:	203fdd1e 	bne	r4,zero,23848 <__alt_mem_mcu_subsystem_ram_0+0x78003848>
   238d4:	81001917 	ldw	r4,100(r16)
   238d8:	18c80014 	ori	r3,r3,8192
   238dc:	0177ffc4 	movi	r5,-8193
   238e0:	2148703a 	and	r4,r4,r5
   238e4:	80c0030d 	sth	r3,12(r16)
   238e8:	80c00017 	ldw	r3,0(r16)
   238ec:	81001915 	stw	r4,100(r16)
   238f0:	81000517 	ldw	r4,20(r16)
   238f4:	1885c83a 	sub	r2,r3,r2
   238f8:	113fd716 	blt	r2,r4,23858 <__alt_mem_mcu_subsystem_ram_0+0x78003858>
   238fc:	800b883a 	mov	r5,r16
   23900:	8809883a 	mov	r4,r17
   23904:	001cc840 	call	1cc84 <_fflush_r>
   23908:	1000091e 	bne	r2,zero,23930 <__swbuf_r+0x140>
   2390c:	80c00017 	ldw	r3,0(r16)
   23910:	00800044 	movi	r2,1
   23914:	003fd106 	br	2385c <__alt_mem_mcu_subsystem_ram_0+0x7800385c>
   23918:	001d0240 	call	1d024 <__sinit>
   2391c:	003fc006 	br	23820 <__alt_mem_mcu_subsystem_ram_0+0x78003820>
   23920:	800b883a 	mov	r5,r16
   23924:	8809883a 	mov	r4,r17
   23928:	001cc840 	call	1cc84 <_fflush_r>
   2392c:	103fd826 	beq	r2,zero,23890 <__alt_mem_mcu_subsystem_ram_0+0x78003890>
   23930:	04ffffc4 	movi	r19,-1
   23934:	003fd606 	br	23890 <__alt_mem_mcu_subsystem_ram_0+0x78003890>

00023938 <__swbuf>:
   23938:	008000f4 	movhi	r2,3
   2393c:	280d883a 	mov	r6,r5
   23940:	200b883a 	mov	r5,r4
   23944:	111e6617 	ldw	r4,31128(r2)
   23948:	00237f01 	jmpi	237f0 <__swbuf_r>

0002394c <_write_r>:
   2394c:	defffe04 	addi	sp,sp,-8
   23950:	2805883a 	mov	r2,r5
   23954:	dc000015 	stw	r16,0(sp)
   23958:	300b883a 	mov	r5,r6
   2395c:	2021883a 	mov	r16,r4
   23960:	380d883a 	mov	r6,r7
   23964:	1009883a 	mov	r4,r2
   23968:	00800134 	movhi	r2,4
   2396c:	dfc00115 	stw	ra,4(sp)
   23970:	10261315 	stw	zero,-26548(r2)
   23974:	0025eac0 	call	25eac <write>
   23978:	10ffffd8 	cmpnei	r3,r2,-1
   2397c:	18000426 	beq	r3,zero,23990 <_write_r+0x44>
   23980:	dfc00117 	ldw	ra,4(sp)
   23984:	dc000017 	ldw	r16,0(sp)
   23988:	dec00204 	addi	sp,sp,8
   2398c:	f800283a 	ret
   23990:	00c00134 	movhi	r3,4
   23994:	18e61317 	ldw	r3,-26548(r3)
   23998:	183ff926 	beq	r3,zero,23980 <__alt_mem_mcu_subsystem_ram_0+0x78003980>
   2399c:	80c00015 	stw	r3,0(r16)
   239a0:	dfc00117 	ldw	ra,4(sp)
   239a4:	dc000017 	ldw	r16,0(sp)
   239a8:	dec00204 	addi	sp,sp,8
   239ac:	f800283a 	ret

000239b0 <_close_r>:
   239b0:	defffe04 	addi	sp,sp,-8
   239b4:	dc000015 	stw	r16,0(sp)
   239b8:	00800134 	movhi	r2,4
   239bc:	2021883a 	mov	r16,r4
   239c0:	2809883a 	mov	r4,r5
   239c4:	dfc00115 	stw	ra,4(sp)
   239c8:	10261315 	stw	zero,-26548(r2)
   239cc:	0024f500 	call	24f50 <close>
   239d0:	10ffffd8 	cmpnei	r3,r2,-1
   239d4:	18000426 	beq	r3,zero,239e8 <_close_r+0x38>
   239d8:	dfc00117 	ldw	ra,4(sp)
   239dc:	dc000017 	ldw	r16,0(sp)
   239e0:	dec00204 	addi	sp,sp,8
   239e4:	f800283a 	ret
   239e8:	00c00134 	movhi	r3,4
   239ec:	18e61317 	ldw	r3,-26548(r3)
   239f0:	183ff926 	beq	r3,zero,239d8 <__alt_mem_mcu_subsystem_ram_0+0x780039d8>
   239f4:	80c00015 	stw	r3,0(r16)
   239f8:	dfc00117 	ldw	ra,4(sp)
   239fc:	dc000017 	ldw	r16,0(sp)
   23a00:	dec00204 	addi	sp,sp,8
   23a04:	f800283a 	ret

00023a08 <_fclose_r>:
   23a08:	defffc04 	addi	sp,sp,-16
   23a0c:	dfc00315 	stw	ra,12(sp)
   23a10:	dc800215 	stw	r18,8(sp)
   23a14:	dc400115 	stw	r17,4(sp)
   23a18:	dc000015 	stw	r16,0(sp)
   23a1c:	28000726 	beq	r5,zero,23a3c <_fclose_r+0x34>
   23a20:	2023883a 	mov	r17,r4
   23a24:	2821883a 	mov	r16,r5
   23a28:	20000226 	beq	r4,zero,23a34 <_fclose_r+0x2c>
   23a2c:	20800e17 	ldw	r2,56(r4)
   23a30:	10002726 	beq	r2,zero,23ad0 <_fclose_r+0xc8>
   23a34:	8080030f 	ldh	r2,12(r16)
   23a38:	1000081e 	bne	r2,zero,23a5c <_fclose_r+0x54>
   23a3c:	0025883a 	mov	r18,zero
   23a40:	9005883a 	mov	r2,r18
   23a44:	dfc00317 	ldw	ra,12(sp)
   23a48:	dc800217 	ldw	r18,8(sp)
   23a4c:	dc400117 	ldw	r17,4(sp)
   23a50:	dc000017 	ldw	r16,0(sp)
   23a54:	dec00404 	addi	sp,sp,16
   23a58:	f800283a 	ret
   23a5c:	800b883a 	mov	r5,r16
   23a60:	8809883a 	mov	r4,r17
   23a64:	001ca640 	call	1ca64 <__sflush_r>
   23a68:	1025883a 	mov	r18,r2
   23a6c:	80800b17 	ldw	r2,44(r16)
   23a70:	10000426 	beq	r2,zero,23a84 <_fclose_r+0x7c>
   23a74:	81400717 	ldw	r5,28(r16)
   23a78:	8809883a 	mov	r4,r17
   23a7c:	103ee83a 	callr	r2
   23a80:	10001716 	blt	r2,zero,23ae0 <_fclose_r+0xd8>
   23a84:	8080030b 	ldhu	r2,12(r16)
   23a88:	1080200c 	andi	r2,r2,128
   23a8c:	1000161e 	bne	r2,zero,23ae8 <_fclose_r+0xe0>
   23a90:	81400c17 	ldw	r5,48(r16)
   23a94:	28000526 	beq	r5,zero,23aac <_fclose_r+0xa4>
   23a98:	80801004 	addi	r2,r16,64
   23a9c:	28800226 	beq	r5,r2,23aa8 <_fclose_r+0xa0>
   23aa0:	8809883a 	mov	r4,r17
   23aa4:	001d1880 	call	1d188 <_free_r>
   23aa8:	80000c15 	stw	zero,48(r16)
   23aac:	81401117 	ldw	r5,68(r16)
   23ab0:	28000326 	beq	r5,zero,23ac0 <_fclose_r+0xb8>
   23ab4:	8809883a 	mov	r4,r17
   23ab8:	001d1880 	call	1d188 <_free_r>
   23abc:	80001115 	stw	zero,68(r16)
   23ac0:	001d0340 	call	1d034 <__sfp_lock_acquire>
   23ac4:	8000030d 	sth	zero,12(r16)
   23ac8:	001d0380 	call	1d038 <__sfp_lock_release>
   23acc:	003fdc06 	br	23a40 <__alt_mem_mcu_subsystem_ram_0+0x78003a40>
   23ad0:	001d0240 	call	1d024 <__sinit>
   23ad4:	8080030f 	ldh	r2,12(r16)
   23ad8:	103fd826 	beq	r2,zero,23a3c <__alt_mem_mcu_subsystem_ram_0+0x78003a3c>
   23adc:	003fdf06 	br	23a5c <__alt_mem_mcu_subsystem_ram_0+0x78003a5c>
   23ae0:	04bfffc4 	movi	r18,-1
   23ae4:	003fe706 	br	23a84 <__alt_mem_mcu_subsystem_ram_0+0x78003a84>
   23ae8:	81400417 	ldw	r5,16(r16)
   23aec:	8809883a 	mov	r4,r17
   23af0:	001d1880 	call	1d188 <_free_r>
   23af4:	003fe606 	br	23a90 <__alt_mem_mcu_subsystem_ram_0+0x78003a90>

00023af8 <fclose>:
   23af8:	008000f4 	movhi	r2,3
   23afc:	200b883a 	mov	r5,r4
   23b00:	111e6617 	ldw	r4,31128(r2)
   23b04:	0023a081 	jmpi	23a08 <_fclose_r>

00023b08 <__fputwc>:
   23b08:	defff904 	addi	sp,sp,-28
   23b0c:	dcc00415 	stw	r19,16(sp)
   23b10:	dc800315 	stw	r18,12(sp)
   23b14:	dc000115 	stw	r16,4(sp)
   23b18:	dfc00615 	stw	ra,24(sp)
   23b1c:	dd000515 	stw	r20,20(sp)
   23b20:	dc400215 	stw	r17,8(sp)
   23b24:	2027883a 	mov	r19,r4
   23b28:	2825883a 	mov	r18,r5
   23b2c:	3021883a 	mov	r16,r6
   23b30:	00152000 	call	15200 <__locale_mb_cur_max>
   23b34:	10800058 	cmpnei	r2,r2,1
   23b38:	1000071e 	bne	r2,zero,23b58 <__fputwc+0x50>
   23b3c:	90bfffc4 	addi	r2,r18,-1
   23b40:	10803fe8 	cmpgeui	r2,r2,255
   23b44:	1000041e 	bne	r2,zero,23b58 <__fputwc+0x50>
   23b48:	900b883a 	mov	r5,r18
   23b4c:	dc8000c5 	stb	r18,3(sp)
   23b50:	05000044 	movi	r20,1
   23b54:	00000a06 	br	23b80 <__fputwc+0x78>
   23b58:	81c01704 	addi	r7,r16,92
   23b5c:	900d883a 	mov	r6,r18
   23b60:	d94000c4 	addi	r5,sp,3
   23b64:	9809883a 	mov	r4,r19
   23b68:	0024b440 	call	24b44 <_wcrtomb_r>
   23b6c:	1029883a 	mov	r20,r2
   23b70:	10bfffd8 	cmpnei	r2,r2,-1
   23b74:	10003826 	beq	r2,zero,23c58 <__fputwc+0x150>
   23b78:	a0001f26 	beq	r20,zero,23bf8 <__fputwc+0xf0>
   23b7c:	d94000c3 	ldbu	r5,3(sp)
   23b80:	0023883a 	mov	r17,zero
   23b84:	00000a06 	br	23bb0 <__fputwc+0xa8>
   23b88:	80800017 	ldw	r2,0(r16)
   23b8c:	11400005 	stb	r5,0(r2)
   23b90:	80c00017 	ldw	r3,0(r16)
   23b94:	18c00044 	addi	r3,r3,1
   23b98:	80c00015 	stw	r3,0(r16)
   23b9c:	8c400044 	addi	r17,r17,1
   23ba0:	d88000c4 	addi	r2,sp,3
   23ba4:	1445883a 	add	r2,r2,r17
   23ba8:	8d00132e 	bgeu	r17,r20,23bf8 <__fputwc+0xf0>
   23bac:	11400003 	ldbu	r5,0(r2)
   23bb0:	80c00217 	ldw	r3,8(r16)
   23bb4:	18ffffc4 	addi	r3,r3,-1
   23bb8:	80c00215 	stw	r3,8(r16)
   23bbc:	183ff20e 	bge	r3,zero,23b88 <__alt_mem_mcu_subsystem_ram_0+0x78003b88>
   23bc0:	80800617 	ldw	r2,24(r16)
   23bc4:	18801516 	blt	r3,r2,23c1c <__fputwc+0x114>
   23bc8:	80800017 	ldw	r2,0(r16)
   23bcc:	11400005 	stb	r5,0(r2)
   23bd0:	80800017 	ldw	r2,0(r16)
   23bd4:	10c00003 	ldbu	r3,0(r2)
   23bd8:	10800044 	addi	r2,r2,1
   23bdc:	18c002a0 	cmpeqi	r3,r3,10
   23be0:	1800171e 	bne	r3,zero,23c40 <__fputwc+0x138>
   23be4:	80800015 	stw	r2,0(r16)
   23be8:	8c400044 	addi	r17,r17,1
   23bec:	d88000c4 	addi	r2,sp,3
   23bf0:	1445883a 	add	r2,r2,r17
   23bf4:	8d3fed36 	bltu	r17,r20,23bac <__alt_mem_mcu_subsystem_ram_0+0x78003bac>
   23bf8:	9005883a 	mov	r2,r18
   23bfc:	dfc00617 	ldw	ra,24(sp)
   23c00:	dd000517 	ldw	r20,20(sp)
   23c04:	dcc00417 	ldw	r19,16(sp)
   23c08:	dc800317 	ldw	r18,12(sp)
   23c0c:	dc400217 	ldw	r17,8(sp)
   23c10:	dc000117 	ldw	r16,4(sp)
   23c14:	dec00704 	addi	sp,sp,28
   23c18:	f800283a 	ret
   23c1c:	29403fcc 	andi	r5,r5,255
   23c20:	800d883a 	mov	r6,r16
   23c24:	9809883a 	mov	r4,r19
   23c28:	00237f00 	call	237f0 <__swbuf_r>
   23c2c:	10bfffe0 	cmpeqi	r2,r2,-1
   23c30:	10803fcc 	andi	r2,r2,255
   23c34:	103fd926 	beq	r2,zero,23b9c <__alt_mem_mcu_subsystem_ram_0+0x78003b9c>
   23c38:	00bfffc4 	movi	r2,-1
   23c3c:	003fef06 	br	23bfc <__alt_mem_mcu_subsystem_ram_0+0x78003bfc>
   23c40:	800d883a 	mov	r6,r16
   23c44:	01400284 	movi	r5,10
   23c48:	9809883a 	mov	r4,r19
   23c4c:	00237f00 	call	237f0 <__swbuf_r>
   23c50:	10bfffe0 	cmpeqi	r2,r2,-1
   23c54:	003ff606 	br	23c30 <__alt_mem_mcu_subsystem_ram_0+0x78003c30>
   23c58:	80c0030b 	ldhu	r3,12(r16)
   23c5c:	00bfffc4 	movi	r2,-1
   23c60:	18c01014 	ori	r3,r3,64
   23c64:	80c0030d 	sth	r3,12(r16)
   23c68:	003fe406 	br	23bfc <__alt_mem_mcu_subsystem_ram_0+0x78003bfc>

00023c6c <_fputwc_r>:
   23c6c:	3080030b 	ldhu	r2,12(r6)
   23c70:	10c8000c 	andi	r3,r2,8192
   23c74:	1800051e 	bne	r3,zero,23c8c <_fputwc_r+0x20>
   23c78:	30c01917 	ldw	r3,100(r6)
   23c7c:	10880014 	ori	r2,r2,8192
   23c80:	3080030d 	sth	r2,12(r6)
   23c84:	18880014 	ori	r2,r3,8192
   23c88:	30801915 	stw	r2,100(r6)
   23c8c:	0023b081 	jmpi	23b08 <__fputwc>

00023c90 <fputwc>:
   23c90:	defffc04 	addi	sp,sp,-16
   23c94:	008000f4 	movhi	r2,3
   23c98:	dc000115 	stw	r16,4(sp)
   23c9c:	141e6617 	ldw	r16,31128(r2)
   23ca0:	dc400215 	stw	r17,8(sp)
   23ca4:	dfc00315 	stw	ra,12(sp)
   23ca8:	2023883a 	mov	r17,r4
   23cac:	80000226 	beq	r16,zero,23cb8 <fputwc+0x28>
   23cb0:	80800e17 	ldw	r2,56(r16)
   23cb4:	10001026 	beq	r2,zero,23cf8 <fputwc+0x68>
   23cb8:	2880030b 	ldhu	r2,12(r5)
   23cbc:	10c8000c 	andi	r3,r2,8192
   23cc0:	1800051e 	bne	r3,zero,23cd8 <fputwc+0x48>
   23cc4:	28c01917 	ldw	r3,100(r5)
   23cc8:	10880014 	ori	r2,r2,8192
   23ccc:	2880030d 	sth	r2,12(r5)
   23cd0:	18880014 	ori	r2,r3,8192
   23cd4:	28801915 	stw	r2,100(r5)
   23cd8:	280d883a 	mov	r6,r5
   23cdc:	8009883a 	mov	r4,r16
   23ce0:	880b883a 	mov	r5,r17
   23ce4:	dfc00317 	ldw	ra,12(sp)
   23ce8:	dc400217 	ldw	r17,8(sp)
   23cec:	dc000117 	ldw	r16,4(sp)
   23cf0:	dec00404 	addi	sp,sp,16
   23cf4:	0023b081 	jmpi	23b08 <__fputwc>
   23cf8:	8009883a 	mov	r4,r16
   23cfc:	d9400015 	stw	r5,0(sp)
   23d00:	001d0240 	call	1d024 <__sinit>
   23d04:	d9400017 	ldw	r5,0(sp)
   23d08:	003feb06 	br	23cb8 <__alt_mem_mcu_subsystem_ram_0+0x78003cb8>

00023d0c <_fstat_r>:
   23d0c:	defffe04 	addi	sp,sp,-8
   23d10:	2805883a 	mov	r2,r5
   23d14:	dc000015 	stw	r16,0(sp)
   23d18:	300b883a 	mov	r5,r6
   23d1c:	2021883a 	mov	r16,r4
   23d20:	1009883a 	mov	r4,r2
   23d24:	00800134 	movhi	r2,4
   23d28:	dfc00115 	stw	ra,4(sp)
   23d2c:	10261315 	stw	zero,-26548(r2)
   23d30:	002525c0 	call	2525c <fstat>
   23d34:	10ffffd8 	cmpnei	r3,r2,-1
   23d38:	18000426 	beq	r3,zero,23d4c <_fstat_r+0x40>
   23d3c:	dfc00117 	ldw	ra,4(sp)
   23d40:	dc000017 	ldw	r16,0(sp)
   23d44:	dec00204 	addi	sp,sp,8
   23d48:	f800283a 	ret
   23d4c:	00c00134 	movhi	r3,4
   23d50:	18e61317 	ldw	r3,-26548(r3)
   23d54:	183ff926 	beq	r3,zero,23d3c <__alt_mem_mcu_subsystem_ram_0+0x78003d3c>
   23d58:	80c00015 	stw	r3,0(r16)
   23d5c:	dfc00117 	ldw	ra,4(sp)
   23d60:	dc000017 	ldw	r16,0(sp)
   23d64:	dec00204 	addi	sp,sp,8
   23d68:	f800283a 	ret

00023d6c <_isatty_r>:
   23d6c:	defffe04 	addi	sp,sp,-8
   23d70:	dc000015 	stw	r16,0(sp)
   23d74:	00800134 	movhi	r2,4
   23d78:	2021883a 	mov	r16,r4
   23d7c:	2809883a 	mov	r4,r5
   23d80:	dfc00115 	stw	ra,4(sp)
   23d84:	10261315 	stw	zero,-26548(r2)
   23d88:	002563c0 	call	2563c <isatty>
   23d8c:	10ffffd8 	cmpnei	r3,r2,-1
   23d90:	18000426 	beq	r3,zero,23da4 <_isatty_r+0x38>
   23d94:	dfc00117 	ldw	ra,4(sp)
   23d98:	dc000017 	ldw	r16,0(sp)
   23d9c:	dec00204 	addi	sp,sp,8
   23da0:	f800283a 	ret
   23da4:	00c00134 	movhi	r3,4
   23da8:	18e61317 	ldw	r3,-26548(r3)
   23dac:	183ff926 	beq	r3,zero,23d94 <__alt_mem_mcu_subsystem_ram_0+0x78003d94>
   23db0:	80c00015 	stw	r3,0(r16)
   23db4:	dfc00117 	ldw	ra,4(sp)
   23db8:	dc000017 	ldw	r16,0(sp)
   23dbc:	dec00204 	addi	sp,sp,8
   23dc0:	f800283a 	ret

00023dc4 <iswspace>:
   23dc4:	20804028 	cmpgeui	r2,r4,256
   23dc8:	10000226 	beq	r2,zero,23dd4 <iswspace+0x10>
   23dcc:	0005883a 	mov	r2,zero
   23dd0:	f800283a 	ret
   23dd4:	defffe04 	addi	sp,sp,-8
   23dd8:	dc000015 	stw	r16,0(sp)
   23ddc:	dfc00115 	stw	ra,4(sp)
   23de0:	2021883a 	mov	r16,r4
   23de4:	00152280 	call	15228 <__locale_ctype_ptr>
   23de8:	1405883a 	add	r2,r2,r16
   23dec:	10800043 	ldbu	r2,1(r2)
   23df0:	1080020c 	andi	r2,r2,8
   23df4:	dfc00117 	ldw	ra,4(sp)
   23df8:	dc000017 	ldw	r16,0(sp)
   23dfc:	dec00204 	addi	sp,sp,8
   23e00:	f800283a 	ret

00023e04 <_lseek_r>:
   23e04:	defffe04 	addi	sp,sp,-8
   23e08:	2805883a 	mov	r2,r5
   23e0c:	dc000015 	stw	r16,0(sp)
   23e10:	300b883a 	mov	r5,r6
   23e14:	2021883a 	mov	r16,r4
   23e18:	380d883a 	mov	r6,r7
   23e1c:	1009883a 	mov	r4,r2
   23e20:	00800134 	movhi	r2,4
   23e24:	dfc00115 	stw	ra,4(sp)
   23e28:	10261315 	stw	zero,-26548(r2)
   23e2c:	002580c0 	call	2580c <lseek>
   23e30:	10ffffd8 	cmpnei	r3,r2,-1
   23e34:	18000426 	beq	r3,zero,23e48 <_lseek_r+0x44>
   23e38:	dfc00117 	ldw	ra,4(sp)
   23e3c:	dc000017 	ldw	r16,0(sp)
   23e40:	dec00204 	addi	sp,sp,8
   23e44:	f800283a 	ret
   23e48:	00c00134 	movhi	r3,4
   23e4c:	18e61317 	ldw	r3,-26548(r3)
   23e50:	183ff926 	beq	r3,zero,23e38 <__alt_mem_mcu_subsystem_ram_0+0x78003e38>
   23e54:	80c00015 	stw	r3,0(r16)
   23e58:	dfc00117 	ldw	ra,4(sp)
   23e5c:	dc000017 	ldw	r16,0(sp)
   23e60:	dec00204 	addi	sp,sp,8
   23e64:	f800283a 	ret

00023e68 <_mbrtowc_r>:
   23e68:	008000f4 	movhi	r2,3
   23e6c:	109e6617 	ldw	r2,31128(r2)
   23e70:	defffc04 	addi	sp,sp,-16
   23e74:	dc400215 	stw	r17,8(sp)
   23e78:	dc000115 	stw	r16,4(sp)
   23e7c:	dfc00315 	stw	ra,12(sp)
   23e80:	2021883a 	mov	r16,r4
   23e84:	dc400417 	ldw	r17,16(sp)
   23e88:	10800d17 	ldw	r2,52(r2)
   23e8c:	30000f26 	beq	r6,zero,23ecc <_mbrtowc_r+0x64>
   23e90:	10000b26 	beq	r2,zero,23ec0 <_mbrtowc_r+0x58>
   23e94:	dc400015 	stw	r17,0(sp)
   23e98:	10803917 	ldw	r2,228(r2)
   23e9c:	8009883a 	mov	r4,r16
   23ea0:	103ee83a 	callr	r2
   23ea4:	10ffffd8 	cmpnei	r3,r2,-1
   23ea8:	18001326 	beq	r3,zero,23ef8 <_mbrtowc_r+0x90>
   23eac:	dfc00317 	ldw	ra,12(sp)
   23eb0:	dc400217 	ldw	r17,8(sp)
   23eb4:	dc000117 	ldw	r16,4(sp)
   23eb8:	dec00404 	addi	sp,sp,16
   23ebc:	f800283a 	ret
   23ec0:	008000f4 	movhi	r2,3
   23ec4:	10980104 	addi	r2,r2,24580
   23ec8:	003ff206 	br	23e94 <__alt_mem_mcu_subsystem_ram_0+0x78003e94>
   23ecc:	10000f26 	beq	r2,zero,23f0c <_mbrtowc_r+0xa4>
   23ed0:	dc400015 	stw	r17,0(sp)
   23ed4:	10803917 	ldw	r2,228(r2)
   23ed8:	018000f4 	movhi	r6,3
   23edc:	01c00044 	movi	r7,1
   23ee0:	318dd004 	addi	r6,r6,14144
   23ee4:	000b883a 	mov	r5,zero
   23ee8:	8009883a 	mov	r4,r16
   23eec:	103ee83a 	callr	r2
   23ef0:	10ffffd8 	cmpnei	r3,r2,-1
   23ef4:	183fed1e 	bne	r3,zero,23eac <__alt_mem_mcu_subsystem_ram_0+0x78003eac>
   23ef8:	00802284 	movi	r2,138
   23efc:	88000015 	stw	zero,0(r17)
   23f00:	80800015 	stw	r2,0(r16)
   23f04:	00bfffc4 	movi	r2,-1
   23f08:	003fe806 	br	23eac <__alt_mem_mcu_subsystem_ram_0+0x78003eac>
   23f0c:	008000f4 	movhi	r2,3
   23f10:	10980104 	addi	r2,r2,24580
   23f14:	003fee06 	br	23ed0 <__alt_mem_mcu_subsystem_ram_0+0x78003ed0>

00023f18 <mbrtowc>:
   23f18:	defffc04 	addi	sp,sp,-16
   23f1c:	008000f4 	movhi	r2,3
   23f20:	dc000115 	stw	r16,4(sp)
   23f24:	141e6617 	ldw	r16,31128(r2)
   23f28:	dc400215 	stw	r17,8(sp)
   23f2c:	dfc00315 	stw	ra,12(sp)
   23f30:	3823883a 	mov	r17,r7
   23f34:	80800d17 	ldw	r2,52(r16)
   23f38:	28001226 	beq	r5,zero,23f84 <mbrtowc+0x6c>
   23f3c:	10000e26 	beq	r2,zero,23f78 <mbrtowc+0x60>
   23f40:	dc400015 	stw	r17,0(sp)
   23f44:	10803917 	ldw	r2,228(r2)
   23f48:	300f883a 	mov	r7,r6
   23f4c:	280d883a 	mov	r6,r5
   23f50:	200b883a 	mov	r5,r4
   23f54:	8009883a 	mov	r4,r16
   23f58:	103ee83a 	callr	r2
   23f5c:	10ffffd8 	cmpnei	r3,r2,-1
   23f60:	18001326 	beq	r3,zero,23fb0 <mbrtowc+0x98>
   23f64:	dfc00317 	ldw	ra,12(sp)
   23f68:	dc400217 	ldw	r17,8(sp)
   23f6c:	dc000117 	ldw	r16,4(sp)
   23f70:	dec00404 	addi	sp,sp,16
   23f74:	f800283a 	ret
   23f78:	008000f4 	movhi	r2,3
   23f7c:	10980104 	addi	r2,r2,24580
   23f80:	003fef06 	br	23f40 <__alt_mem_mcu_subsystem_ram_0+0x78003f40>
   23f84:	10000f26 	beq	r2,zero,23fc4 <mbrtowc+0xac>
   23f88:	dc400015 	stw	r17,0(sp)
   23f8c:	10803917 	ldw	r2,228(r2)
   23f90:	018000f4 	movhi	r6,3
   23f94:	01c00044 	movi	r7,1
   23f98:	318dd004 	addi	r6,r6,14144
   23f9c:	000b883a 	mov	r5,zero
   23fa0:	8009883a 	mov	r4,r16
   23fa4:	103ee83a 	callr	r2
   23fa8:	10ffffd8 	cmpnei	r3,r2,-1
   23fac:	183fed1e 	bne	r3,zero,23f64 <__alt_mem_mcu_subsystem_ram_0+0x78003f64>
   23fb0:	00802284 	movi	r2,138
   23fb4:	80800015 	stw	r2,0(r16)
   23fb8:	88000015 	stw	zero,0(r17)
   23fbc:	00bfffc4 	movi	r2,-1
   23fc0:	003fe806 	br	23f64 <__alt_mem_mcu_subsystem_ram_0+0x78003f64>
   23fc4:	008000f4 	movhi	r2,3
   23fc8:	10980104 	addi	r2,r2,24580
   23fcc:	003fee06 	br	23f88 <__alt_mem_mcu_subsystem_ram_0+0x78003f88>

00023fd0 <_read_r>:
   23fd0:	defffe04 	addi	sp,sp,-8
   23fd4:	2805883a 	mov	r2,r5
   23fd8:	dc000015 	stw	r16,0(sp)
   23fdc:	300b883a 	mov	r5,r6
   23fe0:	2021883a 	mov	r16,r4
   23fe4:	380d883a 	mov	r6,r7
   23fe8:	1009883a 	mov	r4,r2
   23fec:	00800134 	movhi	r2,4
   23ff0:	dfc00115 	stw	ra,4(sp)
   23ff4:	10261315 	stw	zero,-26548(r2)
   23ff8:	0025c3c0 	call	25c3c <read>
   23ffc:	10ffffd8 	cmpnei	r3,r2,-1
   24000:	18000426 	beq	r3,zero,24014 <_read_r+0x44>
   24004:	dfc00117 	ldw	ra,4(sp)
   24008:	dc000017 	ldw	r16,0(sp)
   2400c:	dec00204 	addi	sp,sp,8
   24010:	f800283a 	ret
   24014:	00c00134 	movhi	r3,4
   24018:	18e61317 	ldw	r3,-26548(r3)
   2401c:	183ff926 	beq	r3,zero,24004 <__alt_mem_mcu_subsystem_ram_0+0x78004004>
   24020:	80c00015 	stw	r3,0(r16)
   24024:	dfc00117 	ldw	ra,4(sp)
   24028:	dc000017 	ldw	r16,0(sp)
   2402c:	dec00204 	addi	sp,sp,8
   24030:	f800283a 	ret

00024034 <__sccl>:
   24034:	29c00003 	ldbu	r7,0(r5)
   24038:	388017a0 	cmpeqi	r2,r7,94
   2403c:	1000191e 	bne	r2,zero,240a4 <__sccl+0x70>
   24040:	28800044 	addi	r2,r5,1
   24044:	000d883a 	mov	r6,zero
   24048:	0011883a 	mov	r8,zero
   2404c:	2007883a 	mov	r3,r4
   24050:	21404004 	addi	r5,r4,256
   24054:	19800005 	stb	r6,0(r3)
   24058:	18c00044 	addi	r3,r3,1
   2405c:	197ffd1e 	bne	r3,r5,24054 <__alt_mem_mcu_subsystem_ram_0+0x78004054>
   24060:	38000e26 	beq	r7,zero,2409c <__sccl+0x68>
   24064:	01800044 	movi	r6,1
   24068:	320dc83a 	sub	r6,r6,r8
   2406c:	21c7883a 	add	r3,r4,r7
   24070:	19800005 	stb	r6,0(r3)
   24074:	10c00003 	ldbu	r3,0(r2)
   24078:	12400044 	addi	r9,r2,1
   2407c:	19400b60 	cmpeqi	r5,r3,45
   24080:	28000f1e 	bne	r5,zero,240c0 <__sccl+0x8c>
   24084:	19401760 	cmpeqi	r5,r3,93
   24088:	28000b1e 	bne	r5,zero,240b8 <__sccl+0x84>
   2408c:	18001a26 	beq	r3,zero,240f8 <__sccl+0xc4>
   24090:	180f883a 	mov	r7,r3
   24094:	4805883a 	mov	r2,r9
   24098:	003ff406 	br	2406c <__alt_mem_mcu_subsystem_ram_0+0x7800406c>
   2409c:	10bfffc4 	addi	r2,r2,-1
   240a0:	f800283a 	ret
   240a4:	29c00043 	ldbu	r7,1(r5)
   240a8:	28800084 	addi	r2,r5,2
   240ac:	01800044 	movi	r6,1
   240b0:	02000044 	movi	r8,1
   240b4:	003fe506 	br	2404c <__alt_mem_mcu_subsystem_ram_0+0x7800404c>
   240b8:	4805883a 	mov	r2,r9
   240bc:	f800283a 	ret
   240c0:	12000043 	ldbu	r8,1(r2)
   240c4:	40c01760 	cmpeqi	r3,r8,93
   240c8:	18000c1e 	bne	r3,zero,240fc <__sccl+0xc8>
   240cc:	41c00b16 	blt	r8,r7,240fc <__sccl+0xc8>
   240d0:	38c00044 	addi	r3,r7,1
   240d4:	10800084 	addi	r2,r2,2
   240d8:	20cb883a 	add	r5,r4,r3
   240dc:	00000106 	br	240e4 <__sccl+0xb0>
   240e0:	18c00044 	addi	r3,r3,1
   240e4:	29800005 	stb	r6,0(r5)
   240e8:	180f883a 	mov	r7,r3
   240ec:	29400044 	addi	r5,r5,1
   240f0:	1a3ffb16 	blt	r3,r8,240e0 <__alt_mem_mcu_subsystem_ram_0+0x780040e0>
   240f4:	003fdf06 	br	24074 <__alt_mem_mcu_subsystem_ram_0+0x78004074>
   240f8:	f800283a 	ret
   240fc:	01c00b44 	movi	r7,45
   24100:	003fe406 	br	24094 <__alt_mem_mcu_subsystem_ram_0+0x78004094>

00024104 <_strtol_l.isra.0>:
   24104:	defff504 	addi	sp,sp,-44
   24108:	ddc00815 	stw	r23,32(sp)
   2410c:	dd800715 	stw	r22,28(sp)
   24110:	dcc00415 	stw	r19,16(sp)
   24114:	dc800315 	stw	r18,12(sp)
   24118:	dc400215 	stw	r17,8(sp)
   2411c:	dfc00a15 	stw	ra,40(sp)
   24120:	df000915 	stw	fp,36(sp)
   24124:	dd400615 	stw	r21,24(sp)
   24128:	dd000515 	stw	r20,20(sp)
   2412c:	dc000115 	stw	r16,4(sp)
   24130:	2825883a 	mov	r18,r5
   24134:	d9000015 	stw	r4,0(sp)
   24138:	3027883a 	mov	r19,r6
   2413c:	3823883a 	mov	r17,r7
   24140:	dd800b17 	ldw	r22,44(sp)
   24144:	282f883a 	mov	r23,r5
   24148:	00000106 	br	24150 <_strtol_l.isra.0+0x4c>
   2414c:	a82f883a 	mov	r23,r21
   24150:	bd400044 	addi	r21,r23,1
   24154:	ac3fffc3 	ldbu	r16,-1(r21)
   24158:	b009883a 	mov	r4,r22
   2415c:	00152200 	call	15220 <__locale_ctype_ptr_l>
   24160:	84003fcc 	andi	r16,r16,255
   24164:	1405883a 	add	r2,r2,r16
   24168:	10800043 	ldbu	r2,1(r2)
   2416c:	1080020c 	andi	r2,r2,8
   24170:	103ff61e 	bne	r2,zero,2414c <__alt_mem_mcu_subsystem_ram_0+0x7800414c>
   24174:	80800b58 	cmpnei	r2,r16,45
   24178:	10005126 	beq	r2,zero,242c0 <_strtol_l.isra.0+0x1bc>
   2417c:	80800ae0 	cmpeqi	r2,r16,43
   24180:	1000291e 	bne	r2,zero,24228 <_strtol_l.isra.0+0x124>
   24184:	0039883a 	mov	fp,zero
   24188:	88000426 	beq	r17,zero,2419c <_strtol_l.isra.0+0x98>
   2418c:	88800420 	cmpeqi	r2,r17,16
   24190:	10004f1e 	bne	r2,zero,242d0 <_strtol_l.isra.0+0x1cc>
   24194:	882d883a 	mov	r22,r17
   24198:	00000406 	br	241ac <_strtol_l.isra.0+0xa8>
   2419c:	80800c20 	cmpeqi	r2,r16,48
   241a0:	10004f1e 	bne	r2,zero,242e0 <_strtol_l.isra.0+0x1dc>
   241a4:	05800284 	movi	r22,10
   241a8:	04400284 	movi	r17,10
   241ac:	05e00034 	movhi	r23,32768
   241b0:	e000011e 	bne	fp,zero,241b8 <_strtol_l.isra.0+0xb4>
   241b4:	bdffffc4 	addi	r23,r23,-1
   241b8:	b00b883a 	mov	r5,r22
   241bc:	b809883a 	mov	r4,r23
   241c0:	0012ab80 	call	12ab8 <__umodsi3>
   241c4:	b00b883a 	mov	r5,r22
   241c8:	b809883a 	mov	r4,r23
   241cc:	1029883a 	mov	r20,r2
   241d0:	0012a540 	call	12a54 <__udivsi3>
   241d4:	100f883a 	mov	r7,r2
   241d8:	000b883a 	mov	r5,zero
   241dc:	0005883a 	mov	r2,zero
   241e0:	80fff404 	addi	r3,r16,-48
   241e4:	190002a8 	cmpgeui	r4,r3,10
   241e8:	20000426 	beq	r4,zero,241fc <_strtol_l.isra.0+0xf8>
   241ec:	80ffefc4 	addi	r3,r16,-65
   241f0:	18c006a8 	cmpgeui	r3,r3,26
   241f4:	1800131e 	bne	r3,zero,24244 <_strtol_l.isra.0+0x140>
   241f8:	80fff244 	addi	r3,r16,-55
   241fc:	1c40160e 	bge	r3,r17,24258 <_strtol_l.isra.0+0x154>
   24200:	293fffe0 	cmpeqi	r4,r5,-1
   24204:	2000051e 	bne	r4,zero,2421c <_strtol_l.isra.0+0x118>
   24208:	38800c36 	bltu	r7,r2,2423c <_strtol_l.isra.0+0x138>
   2420c:	38800a26 	beq	r7,r2,24238 <_strtol_l.isra.0+0x134>
   24210:	1589383a 	mul	r4,r2,r22
   24214:	01400044 	movi	r5,1
   24218:	1905883a 	add	r2,r3,r4
   2421c:	ad400044 	addi	r21,r21,1
   24220:	ac3fffc3 	ldbu	r16,-1(r21)
   24224:	003fee06 	br	241e0 <__alt_mem_mcu_subsystem_ram_0+0x780041e0>
   24228:	bc000043 	ldbu	r16,1(r23)
   2422c:	bd400084 	addi	r21,r23,2
   24230:	0039883a 	mov	fp,zero
   24234:	003fd406 	br	24188 <__alt_mem_mcu_subsystem_ram_0+0x78004188>
   24238:	a0fff50e 	bge	r20,r3,24210 <__alt_mem_mcu_subsystem_ram_0+0x78004210>
   2423c:	017fffc4 	movi	r5,-1
   24240:	003ff606 	br	2421c <__alt_mem_mcu_subsystem_ram_0+0x7800421c>
   24244:	80ffe7c4 	addi	r3,r16,-97
   24248:	18c006a8 	cmpgeui	r3,r3,26
   2424c:	1800021e 	bne	r3,zero,24258 <_strtol_l.isra.0+0x154>
   24250:	80ffea44 	addi	r3,r16,-87
   24254:	1c7fea16 	blt	r3,r17,24200 <__alt_mem_mcu_subsystem_ram_0+0x78004200>
   24258:	28ffffd8 	cmpnei	r3,r5,-1
   2425c:	18001126 	beq	r3,zero,242a4 <_strtol_l.isra.0+0x1a0>
   24260:	e0000126 	beq	fp,zero,24268 <_strtol_l.isra.0+0x164>
   24264:	0085c83a 	sub	r2,zero,r2
   24268:	98000226 	beq	r19,zero,24274 <_strtol_l.isra.0+0x170>
   2426c:	2800251e 	bne	r5,zero,24304 <_strtol_l.isra.0+0x200>
   24270:	9c800015 	stw	r18,0(r19)
   24274:	dfc00a17 	ldw	ra,40(sp)
   24278:	df000917 	ldw	fp,36(sp)
   2427c:	ddc00817 	ldw	r23,32(sp)
   24280:	dd800717 	ldw	r22,28(sp)
   24284:	dd400617 	ldw	r21,24(sp)
   24288:	dd000517 	ldw	r20,20(sp)
   2428c:	dcc00417 	ldw	r19,16(sp)
   24290:	dc800317 	ldw	r18,12(sp)
   24294:	dc400217 	ldw	r17,8(sp)
   24298:	dc000117 	ldw	r16,4(sp)
   2429c:	dec00b04 	addi	sp,sp,44
   242a0:	f800283a 	ret
   242a4:	d8c00017 	ldw	r3,0(sp)
   242a8:	00800884 	movi	r2,34
   242ac:	18800015 	stw	r2,0(r3)
   242b0:	98001626 	beq	r19,zero,2430c <_strtol_l.isra.0+0x208>
   242b4:	acbfffc4 	addi	r18,r21,-1
   242b8:	b805883a 	mov	r2,r23
   242bc:	003fec06 	br	24270 <__alt_mem_mcu_subsystem_ram_0+0x78004270>
   242c0:	bd400084 	addi	r21,r23,2
   242c4:	bc000043 	ldbu	r16,1(r23)
   242c8:	07000044 	movi	fp,1
   242cc:	003fae06 	br	24188 <__alt_mem_mcu_subsystem_ram_0+0x78004188>
   242d0:	80800c18 	cmpnei	r2,r16,48
   242d4:	10000f26 	beq	r2,zero,24314 <_strtol_l.isra.0+0x210>
   242d8:	05800404 	movi	r22,16
   242dc:	003fb306 	br	241ac <__alt_mem_mcu_subsystem_ram_0+0x780041ac>
   242e0:	a8800003 	ldbu	r2,0(r21)
   242e4:	108037cc 	andi	r2,r2,223
   242e8:	10801620 	cmpeqi	r2,r2,88
   242ec:	10000e26 	beq	r2,zero,24328 <_strtol_l.isra.0+0x224>
   242f0:	ac000043 	ldbu	r16,1(r21)
   242f4:	05800404 	movi	r22,16
   242f8:	ad400084 	addi	r21,r21,2
   242fc:	04400404 	movi	r17,16
   24300:	003faa06 	br	241ac <__alt_mem_mcu_subsystem_ram_0+0x780041ac>
   24304:	102f883a 	mov	r23,r2
   24308:	003fea06 	br	242b4 <__alt_mem_mcu_subsystem_ram_0+0x780042b4>
   2430c:	b805883a 	mov	r2,r23
   24310:	003fd806 	br	24274 <__alt_mem_mcu_subsystem_ram_0+0x78004274>
   24314:	a8800003 	ldbu	r2,0(r21)
   24318:	108037cc 	andi	r2,r2,223
   2431c:	10801620 	cmpeqi	r2,r2,88
   24320:	103fed26 	beq	r2,zero,242d8 <__alt_mem_mcu_subsystem_ram_0+0x780042d8>
   24324:	003ff206 	br	242f0 <__alt_mem_mcu_subsystem_ram_0+0x780042f0>
   24328:	05800204 	movi	r22,8
   2432c:	04400204 	movi	r17,8
   24330:	003f9e06 	br	241ac <__alt_mem_mcu_subsystem_ram_0+0x780041ac>

00024334 <_strtol_r>:
   24334:	008000f4 	movhi	r2,3
   24338:	109e6617 	ldw	r2,31128(r2)
   2433c:	defffe04 	addi	sp,sp,-8
   24340:	dfc00115 	stw	ra,4(sp)
   24344:	10800d17 	ldw	r2,52(r2)
   24348:	1000021e 	bne	r2,zero,24354 <_strtol_r+0x20>
   2434c:	008000f4 	movhi	r2,3
   24350:	10980104 	addi	r2,r2,24580
   24354:	d8800015 	stw	r2,0(sp)
   24358:	00241040 	call	24104 <_strtol_l.isra.0>
   2435c:	dfc00117 	ldw	ra,4(sp)
   24360:	dec00204 	addi	sp,sp,8
   24364:	f800283a 	ret

00024368 <strtol_l>:
   24368:	defffe04 	addi	sp,sp,-8
   2436c:	008000f4 	movhi	r2,3
   24370:	d9c00015 	stw	r7,0(sp)
   24374:	300f883a 	mov	r7,r6
   24378:	280d883a 	mov	r6,r5
   2437c:	200b883a 	mov	r5,r4
   24380:	111e6617 	ldw	r4,31128(r2)
   24384:	dfc00115 	stw	ra,4(sp)
   24388:	00241040 	call	24104 <_strtol_l.isra.0>
   2438c:	dfc00117 	ldw	ra,4(sp)
   24390:	dec00204 	addi	sp,sp,8
   24394:	f800283a 	ret

00024398 <strtol>:
   24398:	008000f4 	movhi	r2,3
   2439c:	10de6617 	ldw	r3,31128(r2)
   243a0:	defffe04 	addi	sp,sp,-8
   243a4:	dfc00115 	stw	ra,4(sp)
   243a8:	18800d17 	ldw	r2,52(r3)
   243ac:	1000021e 	bne	r2,zero,243b8 <strtol+0x20>
   243b0:	008000f4 	movhi	r2,3
   243b4:	10980104 	addi	r2,r2,24580
   243b8:	300f883a 	mov	r7,r6
   243bc:	d8800015 	stw	r2,0(sp)
   243c0:	280d883a 	mov	r6,r5
   243c4:	200b883a 	mov	r5,r4
   243c8:	1809883a 	mov	r4,r3
   243cc:	00241040 	call	24104 <_strtol_l.isra.0>
   243d0:	dfc00117 	ldw	ra,4(sp)
   243d4:	dec00204 	addi	sp,sp,8
   243d8:	f800283a 	ret

000243dc <_strtoll_l.isra.0>:
   243dc:	defff004 	addi	sp,sp,-64
   243e0:	dcc00915 	stw	r19,36(sp)
   243e4:	dc800815 	stw	r18,32(sp)
   243e8:	dc000615 	stw	r16,24(sp)
   243ec:	dfc00f15 	stw	ra,60(sp)
   243f0:	df000e15 	stw	fp,56(sp)
   243f4:	ddc00d15 	stw	r23,52(sp)
   243f8:	dd800c15 	stw	r22,48(sp)
   243fc:	dd400b15 	stw	r21,44(sp)
   24400:	dd000a15 	stw	r20,40(sp)
   24404:	dc400715 	stw	r17,28(sp)
   24408:	d9400215 	stw	r5,8(sp)
   2440c:	d9000515 	stw	r4,20(sp)
   24410:	d9800015 	stw	r6,0(sp)
   24414:	3821883a 	mov	r16,r7
   24418:	dc801017 	ldw	r18,64(sp)
   2441c:	2827883a 	mov	r19,r5
   24420:	00000106 	br	24428 <_strtoll_l.isra.0+0x4c>
   24424:	e027883a 	mov	r19,fp
   24428:	9f000044 	addi	fp,r19,1
   2442c:	e47fffc3 	ldbu	r17,-1(fp)
   24430:	9009883a 	mov	r4,r18
   24434:	00152200 	call	15220 <__locale_ctype_ptr_l>
   24438:	8a003fcc 	andi	r8,r17,255
   2443c:	1205883a 	add	r2,r2,r8
   24440:	10800043 	ldbu	r2,1(r2)
   24444:	1080020c 	andi	r2,r2,8
   24448:	103ff61e 	bne	r2,zero,24424 <__alt_mem_mcu_subsystem_ram_0+0x78004424>
   2444c:	40800b58 	cmpnei	r2,r8,45
   24450:	10007c26 	beq	r2,zero,24644 <_strtoll_l.isra.0+0x268>
   24454:	40800ae0 	cmpeqi	r2,r8,43
   24458:	1000631e 	bne	r2,zero,245e8 <_strtoll_l.isra.0+0x20c>
   2445c:	d8000115 	stw	zero,4(sp)
   24460:	80000a26 	beq	r16,zero,2448c <_strtoll_l.isra.0+0xb0>
   24464:	80800420 	cmpeqi	r2,r16,16
   24468:	10007b1e 	bne	r2,zero,24658 <_strtoll_l.isra.0+0x27c>
   2446c:	d8800117 	ldw	r2,4(sp)
   24470:	8025883a 	mov	r18,r16
   24474:	8023d7fa 	srai	r17,r16,31
   24478:	10000b1e 	bne	r2,zero,244a8 <_strtoll_l.isra.0+0xcc>
   2447c:	04e00034 	movhi	r19,32768
   24480:	053fffc4 	movi	r20,-1
   24484:	9cffffc4 	addi	r19,r19,-1
   24488:	00000906 	br	244b0 <_strtoll_l.isra.0+0xd4>
   2448c:	40800c20 	cmpeqi	r2,r8,48
   24490:	1000761e 	bne	r2,zero,2466c <_strtoll_l.isra.0+0x290>
   24494:	04800284 	movi	r18,10
   24498:	0023883a 	mov	r17,zero
   2449c:	04000284 	movi	r16,10
   244a0:	d8800117 	ldw	r2,4(sp)
   244a4:	103ff526 	beq	r2,zero,2447c <__alt_mem_mcu_subsystem_ram_0+0x7800447c>
   244a8:	0029883a 	mov	r20,zero
   244ac:	04e00034 	movhi	r19,32768
   244b0:	900d883a 	mov	r6,r18
   244b4:	880f883a 	mov	r7,r17
   244b8:	a009883a 	mov	r4,r20
   244bc:	980b883a 	mov	r5,r19
   244c0:	da000415 	stw	r8,16(sp)
   244c4:	00124000 	call	12400 <__umoddi3>
   244c8:	900d883a 	mov	r6,r18
   244cc:	880f883a 	mov	r7,r17
   244d0:	a009883a 	mov	r4,r20
   244d4:	980b883a 	mov	r5,r19
   244d8:	d8800315 	stw	r2,12(sp)
   244dc:	0011e680 	call	11e68 <__udivdi3>
   244e0:	da000417 	ldw	r8,16(sp)
   244e4:	102d883a 	mov	r22,r2
   244e8:	182f883a 	mov	r23,r3
   244ec:	41bff404 	addi	r6,r8,-48
   244f0:	308002a8 	cmpgeui	r2,r6,10
   244f4:	000f883a 	mov	r7,zero
   244f8:	0009883a 	mov	r4,zero
   244fc:	000b883a 	mov	r5,zero
   24500:	10000d1e 	bne	r2,zero,24538 <_strtoll_l.isra.0+0x15c>
   24504:	302b883a 	mov	r21,r6
   24508:	ac00100e 	bge	r21,r16,2454c <_strtoll_l.isra.0+0x170>
   2450c:	38bfffe0 	cmpeqi	r2,r7,-1
   24510:	1000041e 	bne	r2,zero,24524 <_strtoll_l.isra.0+0x148>
   24514:	b9400236 	bltu	r23,r5,24520 <_strtoll_l.isra.0+0x144>
   24518:	2dc0281e 	bne	r5,r23,245bc <_strtoll_l.isra.0+0x1e0>
   2451c:	b100272e 	bgeu	r22,r4,245bc <_strtoll_l.isra.0+0x1e0>
   24520:	01ffffc4 	movi	r7,-1
   24524:	e7000044 	addi	fp,fp,1
   24528:	e23fffc3 	ldbu	r8,-1(fp)
   2452c:	41bff404 	addi	r6,r8,-48
   24530:	308002a8 	cmpgeui	r2,r6,10
   24534:	103ff326 	beq	r2,zero,24504 <__alt_mem_mcu_subsystem_ram_0+0x78004504>
   24538:	40bfefc4 	addi	r2,r8,-65
   2453c:	108006a8 	cmpgeui	r2,r2,26
   24540:	10002d1e 	bne	r2,zero,245f8 <_strtoll_l.isra.0+0x21c>
   24544:	457ff244 	addi	r21,r8,-55
   24548:	ac3ff016 	blt	r21,r16,2450c <__alt_mem_mcu_subsystem_ram_0+0x7800450c>
   2454c:	38bfffd8 	cmpnei	r2,r7,-1
   24550:	10003226 	beq	r2,zero,2461c <_strtoll_l.isra.0+0x240>
   24554:	d8800117 	ldw	r2,4(sp)
   24558:	10000426 	beq	r2,zero,2456c <_strtoll_l.isra.0+0x190>
   2455c:	0109c83a 	sub	r4,zero,r4
   24560:	2004c03a 	cmpne	r2,r4,zero
   24564:	0151c83a 	sub	r8,zero,r5
   24568:	408bc83a 	sub	r5,r8,r2
   2456c:	d8800017 	ldw	r2,0(sp)
   24570:	10000426 	beq	r2,zero,24584 <_strtoll_l.isra.0+0x1a8>
   24574:	3800471e 	bne	r7,zero,24694 <_strtoll_l.isra.0+0x2b8>
   24578:	d8800017 	ldw	r2,0(sp)
   2457c:	d8c00217 	ldw	r3,8(sp)
   24580:	10c00015 	stw	r3,0(r2)
   24584:	2005883a 	mov	r2,r4
   24588:	2807883a 	mov	r3,r5
   2458c:	dfc00f17 	ldw	ra,60(sp)
   24590:	df000e17 	ldw	fp,56(sp)
   24594:	ddc00d17 	ldw	r23,52(sp)
   24598:	dd800c17 	ldw	r22,48(sp)
   2459c:	dd400b17 	ldw	r21,44(sp)
   245a0:	dd000a17 	ldw	r20,40(sp)
   245a4:	dcc00917 	ldw	r19,36(sp)
   245a8:	dc800817 	ldw	r18,32(sp)
   245ac:	dc400717 	ldw	r17,28(sp)
   245b0:	dc000617 	ldw	r16,24(sp)
   245b4:	dec01004 	addi	sp,sp,64
   245b8:	f800283a 	ret
   245bc:	b1001326 	beq	r22,r4,2460c <_strtoll_l.isra.0+0x230>
   245c0:	880f883a 	mov	r7,r17
   245c4:	900d883a 	mov	r6,r18
   245c8:	0011cdc0 	call	11cdc <__muldi3>
   245cc:	a80bd7fa 	srai	r5,r21,31
   245d0:	a889883a 	add	r4,r21,r2
   245d4:	2551803a 	cmpltu	r8,r4,r21
   245d8:	28cb883a 	add	r5,r5,r3
   245dc:	414b883a 	add	r5,r8,r5
   245e0:	01c00044 	movi	r7,1
   245e4:	003fcf06 	br	24524 <__alt_mem_mcu_subsystem_ram_0+0x78004524>
   245e8:	9a000043 	ldbu	r8,1(r19)
   245ec:	9f000084 	addi	fp,r19,2
   245f0:	d8000115 	stw	zero,4(sp)
   245f4:	003f9a06 	br	24460 <__alt_mem_mcu_subsystem_ram_0+0x78004460>
   245f8:	40bfe7c4 	addi	r2,r8,-97
   245fc:	108006a8 	cmpgeui	r2,r2,26
   24600:	103fd21e 	bne	r2,zero,2454c <__alt_mem_mcu_subsystem_ram_0+0x7800454c>
   24604:	457fea44 	addi	r21,r8,-87
   24608:	003fbf06 	br	24508 <__alt_mem_mcu_subsystem_ram_0+0x78004508>
   2460c:	b97fec1e 	bne	r23,r5,245c0 <__alt_mem_mcu_subsystem_ram_0+0x780045c0>
   24610:	d8800317 	ldw	r2,12(sp)
   24614:	157fc216 	blt	r2,r21,24520 <__alt_mem_mcu_subsystem_ram_0+0x78004520>
   24618:	003fe906 	br	245c0 <__alt_mem_mcu_subsystem_ram_0+0x780045c0>
   2461c:	d8c00517 	ldw	r3,20(sp)
   24620:	00800884 	movi	r2,34
   24624:	18800015 	stw	r2,0(r3)
   24628:	d8800017 	ldw	r2,0(sp)
   2462c:	10001c26 	beq	r2,zero,246a0 <_strtoll_l.isra.0+0x2c4>
   24630:	e0bfffc4 	addi	r2,fp,-1
   24634:	d8800215 	stw	r2,8(sp)
   24638:	a009883a 	mov	r4,r20
   2463c:	980b883a 	mov	r5,r19
   24640:	003fcd06 	br	24578 <__alt_mem_mcu_subsystem_ram_0+0x78004578>
   24644:	00800044 	movi	r2,1
   24648:	9f000084 	addi	fp,r19,2
   2464c:	9a000043 	ldbu	r8,1(r19)
   24650:	d8800115 	stw	r2,4(sp)
   24654:	003f8206 	br	24460 <__alt_mem_mcu_subsystem_ram_0+0x78004460>
   24658:	40800c18 	cmpnei	r2,r8,48
   2465c:	10001326 	beq	r2,zero,246ac <_strtoll_l.isra.0+0x2d0>
   24660:	04800404 	movi	r18,16
   24664:	0023883a 	mov	r17,zero
   24668:	003f8d06 	br	244a0 <__alt_mem_mcu_subsystem_ram_0+0x780044a0>
   2466c:	e0800003 	ldbu	r2,0(fp)
   24670:	108037cc 	andi	r2,r2,223
   24674:	10801620 	cmpeqi	r2,r2,88
   24678:	10001126 	beq	r2,zero,246c0 <_strtoll_l.isra.0+0x2e4>
   2467c:	e2000043 	ldbu	r8,1(fp)
   24680:	04800404 	movi	r18,16
   24684:	e7000084 	addi	fp,fp,2
   24688:	0023883a 	mov	r17,zero
   2468c:	04000404 	movi	r16,16
   24690:	003f8306 	br	244a0 <__alt_mem_mcu_subsystem_ram_0+0x780044a0>
   24694:	2029883a 	mov	r20,r4
   24698:	2827883a 	mov	r19,r5
   2469c:	003fe406 	br	24630 <__alt_mem_mcu_subsystem_ram_0+0x78004630>
   246a0:	a009883a 	mov	r4,r20
   246a4:	980b883a 	mov	r5,r19
   246a8:	003fb606 	br	24584 <__alt_mem_mcu_subsystem_ram_0+0x78004584>
   246ac:	e0800003 	ldbu	r2,0(fp)
   246b0:	108037cc 	andi	r2,r2,223
   246b4:	10801620 	cmpeqi	r2,r2,88
   246b8:	103fe926 	beq	r2,zero,24660 <__alt_mem_mcu_subsystem_ram_0+0x78004660>
   246bc:	003fef06 	br	2467c <__alt_mem_mcu_subsystem_ram_0+0x7800467c>
   246c0:	04800204 	movi	r18,8
   246c4:	0023883a 	mov	r17,zero
   246c8:	04000204 	movi	r16,8
   246cc:	003f7406 	br	244a0 <__alt_mem_mcu_subsystem_ram_0+0x780044a0>

000246d0 <_strtoll_r>:
   246d0:	008000f4 	movhi	r2,3
   246d4:	109e6617 	ldw	r2,31128(r2)
   246d8:	defffe04 	addi	sp,sp,-8
   246dc:	dfc00115 	stw	ra,4(sp)
   246e0:	10800d17 	ldw	r2,52(r2)
   246e4:	1000021e 	bne	r2,zero,246f0 <_strtoll_r+0x20>
   246e8:	008000f4 	movhi	r2,3
   246ec:	10980104 	addi	r2,r2,24580
   246f0:	d8800015 	stw	r2,0(sp)
   246f4:	00243dc0 	call	243dc <_strtoll_l.isra.0>
   246f8:	dfc00117 	ldw	ra,4(sp)
   246fc:	dec00204 	addi	sp,sp,8
   24700:	f800283a 	ret

00024704 <strtoll_l>:
   24704:	defffe04 	addi	sp,sp,-8
   24708:	008000f4 	movhi	r2,3
   2470c:	d9c00015 	stw	r7,0(sp)
   24710:	300f883a 	mov	r7,r6
   24714:	280d883a 	mov	r6,r5
   24718:	200b883a 	mov	r5,r4
   2471c:	111e6617 	ldw	r4,31128(r2)
   24720:	dfc00115 	stw	ra,4(sp)
   24724:	00243dc0 	call	243dc <_strtoll_l.isra.0>
   24728:	dfc00117 	ldw	ra,4(sp)
   2472c:	dec00204 	addi	sp,sp,8
   24730:	f800283a 	ret

00024734 <strtoll>:
   24734:	008000f4 	movhi	r2,3
   24738:	10de6617 	ldw	r3,31128(r2)
   2473c:	defffe04 	addi	sp,sp,-8
   24740:	dfc00115 	stw	ra,4(sp)
   24744:	18800d17 	ldw	r2,52(r3)
   24748:	1000021e 	bne	r2,zero,24754 <strtoll+0x20>
   2474c:	008000f4 	movhi	r2,3
   24750:	10980104 	addi	r2,r2,24580
   24754:	300f883a 	mov	r7,r6
   24758:	d8800015 	stw	r2,0(sp)
   2475c:	280d883a 	mov	r6,r5
   24760:	200b883a 	mov	r5,r4
   24764:	1809883a 	mov	r4,r3
   24768:	00243dc0 	call	243dc <_strtoll_l.isra.0>
   2476c:	dfc00117 	ldw	ra,4(sp)
   24770:	dec00204 	addi	sp,sp,8
   24774:	f800283a 	ret

00024778 <_strtoull_l.isra.0>:
   24778:	defff304 	addi	sp,sp,-52
   2477c:	dd400815 	stw	r21,32(sp)
   24780:	dd000715 	stw	r20,28(sp)
   24784:	dcc00615 	stw	r19,24(sp)
   24788:	dc800515 	stw	r18,20(sp)
   2478c:	dc400415 	stw	r17,16(sp)
   24790:	dfc00c15 	stw	ra,48(sp)
   24794:	df000b15 	stw	fp,44(sp)
   24798:	ddc00a15 	stw	r23,40(sp)
   2479c:	dd800915 	stw	r22,36(sp)
   247a0:	dc000315 	stw	r16,12(sp)
   247a4:	2829883a 	mov	r20,r5
   247a8:	d9000215 	stw	r4,8(sp)
   247ac:	302b883a 	mov	r21,r6
   247b0:	3823883a 	mov	r17,r7
   247b4:	dc800d17 	ldw	r18,52(sp)
   247b8:	2827883a 	mov	r19,r5
   247bc:	00000106 	br	247c4 <_strtoull_l.isra.0+0x4c>
   247c0:	e027883a 	mov	r19,fp
   247c4:	9f000044 	addi	fp,r19,1
   247c8:	e43fffc3 	ldbu	r16,-1(fp)
   247cc:	9009883a 	mov	r4,r18
   247d0:	00152200 	call	15220 <__locale_ctype_ptr_l>
   247d4:	84003fcc 	andi	r16,r16,255
   247d8:	1405883a 	add	r2,r2,r16
   247dc:	10800043 	ldbu	r2,1(r2)
   247e0:	1080020c 	andi	r2,r2,8
   247e4:	103ff61e 	bne	r2,zero,247c0 <__alt_mem_mcu_subsystem_ram_0+0x780047c0>
   247e8:	80800b58 	cmpnei	r2,r16,45
   247ec:	10007026 	beq	r2,zero,249b0 <_strtoull_l.isra.0+0x238>
   247f0:	80800ae0 	cmpeqi	r2,r16,43
   247f4:	1000591e 	bne	r2,zero,2495c <_strtoull_l.isra.0+0x1e4>
   247f8:	d8000115 	stw	zero,4(sp)
   247fc:	88001226 	beq	r17,zero,24848 <_strtoull_l.isra.0+0xd0>
   24800:	88800420 	cmpeqi	r2,r17,16
   24804:	10006f1e 	bne	r2,zero,249c4 <_strtoull_l.isra.0+0x24c>
   24808:	8825d7fa 	srai	r18,r17,31
   2480c:	013fffc4 	movi	r4,-1
   24810:	017fffc4 	movi	r5,-1
   24814:	880d883a 	mov	r6,r17
   24818:	900f883a 	mov	r7,r18
   2481c:	0011e680 	call	11e68 <__udivdi3>
   24820:	880d883a 	mov	r6,r17
   24824:	900f883a 	mov	r7,r18
   24828:	013fffc4 	movi	r4,-1
   2482c:	017fffc4 	movi	r5,-1
   24830:	102d883a 	mov	r22,r2
   24834:	182f883a 	mov	r23,r3
   24838:	00124000 	call	12400 <__umoddi3>
   2483c:	d8800015 	stw	r2,0(sp)
   24840:	8827883a 	mov	r19,r17
   24844:	00000b06 	br	24874 <_strtoull_l.isra.0+0xfc>
   24848:	80800c20 	cmpeqi	r2,r16,48
   2484c:	1000671e 	bne	r2,zero,249ec <_strtoull_l.isra.0+0x274>
   24850:	05a666b4 	movhi	r22,39322
   24854:	05c666b4 	movhi	r23,6554
   24858:	00800144 	movi	r2,5
   2485c:	d8800015 	stw	r2,0(sp)
   24860:	b5a66644 	addi	r22,r22,-26215
   24864:	bde66644 	addi	r23,r23,-26215
   24868:	04c00284 	movi	r19,10
   2486c:	0025883a 	mov	r18,zero
   24870:	04400284 	movi	r17,10
   24874:	81bff404 	addi	r6,r16,-48
   24878:	308002a8 	cmpgeui	r2,r6,10
   2487c:	000f883a 	mov	r7,zero
   24880:	0009883a 	mov	r4,zero
   24884:	000b883a 	mov	r5,zero
   24888:	10000c1e 	bne	r2,zero,248bc <_strtoull_l.isra.0+0x144>
   2488c:	3021883a 	mov	r16,r6
   24890:	84400f0e 	bge	r16,r17,248d0 <_strtoull_l.isra.0+0x158>
   24894:	38000316 	blt	r7,zero,248a4 <_strtoull_l.isra.0+0x12c>
   24898:	b9400236 	bltu	r23,r5,248a4 <_strtoull_l.isra.0+0x12c>
   2489c:	2dc0241e 	bne	r5,r23,24930 <_strtoull_l.isra.0+0x1b8>
   248a0:	b100232e 	bgeu	r22,r4,24930 <_strtoull_l.isra.0+0x1b8>
   248a4:	01ffffc4 	movi	r7,-1
   248a8:	e7000044 	addi	fp,fp,1
   248ac:	e43fffc3 	ldbu	r16,-1(fp)
   248b0:	81bff404 	addi	r6,r16,-48
   248b4:	308002a8 	cmpgeui	r2,r6,10
   248b8:	103ff426 	beq	r2,zero,2488c <__alt_mem_mcu_subsystem_ram_0+0x7800488c>
   248bc:	80bfefc4 	addi	r2,r16,-65
   248c0:	108006a8 	cmpgeui	r2,r2,26
   248c4:	1000291e 	bne	r2,zero,2496c <_strtoull_l.isra.0+0x1f4>
   248c8:	843ff244 	addi	r16,r16,-55
   248cc:	847ff116 	blt	r16,r17,24894 <__alt_mem_mcu_subsystem_ram_0+0x78004894>
   248d0:	38002f16 	blt	r7,zero,24990 <_strtoull_l.isra.0+0x218>
   248d4:	d8800117 	ldw	r2,4(sp)
   248d8:	10000426 	beq	r2,zero,248ec <_strtoull_l.isra.0+0x174>
   248dc:	0109c83a 	sub	r4,zero,r4
   248e0:	2004c03a 	cmpne	r2,r4,zero
   248e4:	0161c83a 	sub	r16,zero,r5
   248e8:	808bc83a 	sub	r5,r16,r2
   248ec:	a8000226 	beq	r21,zero,248f8 <_strtoull_l.isra.0+0x180>
   248f0:	38002d1e 	bne	r7,zero,249a8 <_strtoull_l.isra.0+0x230>
   248f4:	ad000015 	stw	r20,0(r21)
   248f8:	2005883a 	mov	r2,r4
   248fc:	2807883a 	mov	r3,r5
   24900:	dfc00c17 	ldw	ra,48(sp)
   24904:	df000b17 	ldw	fp,44(sp)
   24908:	ddc00a17 	ldw	r23,40(sp)
   2490c:	dd800917 	ldw	r22,36(sp)
   24910:	dd400817 	ldw	r21,32(sp)
   24914:	dd000717 	ldw	r20,28(sp)
   24918:	dcc00617 	ldw	r19,24(sp)
   2491c:	dc800517 	ldw	r18,20(sp)
   24920:	dc400417 	ldw	r17,16(sp)
   24924:	dc000317 	ldw	r16,12(sp)
   24928:	dec00d04 	addi	sp,sp,52
   2492c:	f800283a 	ret
   24930:	25801326 	beq	r4,r22,24980 <_strtoull_l.isra.0+0x208>
   24934:	900f883a 	mov	r7,r18
   24938:	980d883a 	mov	r6,r19
   2493c:	0011cdc0 	call	11cdc <__muldi3>
   24940:	800bd7fa 	srai	r5,r16,31
   24944:	8089883a 	add	r4,r16,r2
   24948:	2421803a 	cmpltu	r16,r4,r16
   2494c:	28cb883a 	add	r5,r5,r3
   24950:	814b883a 	add	r5,r16,r5
   24954:	01c00044 	movi	r7,1
   24958:	003fd306 	br	248a8 <__alt_mem_mcu_subsystem_ram_0+0x780048a8>
   2495c:	9c000043 	ldbu	r16,1(r19)
   24960:	9f000084 	addi	fp,r19,2
   24964:	d8000115 	stw	zero,4(sp)
   24968:	003fa406 	br	247fc <__alt_mem_mcu_subsystem_ram_0+0x780047fc>
   2496c:	80bfe7c4 	addi	r2,r16,-97
   24970:	108006a8 	cmpgeui	r2,r2,26
   24974:	103fd61e 	bne	r2,zero,248d0 <__alt_mem_mcu_subsystem_ram_0+0x780048d0>
   24978:	843fea44 	addi	r16,r16,-87
   2497c:	003fc406 	br	24890 <__alt_mem_mcu_subsystem_ram_0+0x78004890>
   24980:	2dffec1e 	bne	r5,r23,24934 <__alt_mem_mcu_subsystem_ram_0+0x78004934>
   24984:	d8800017 	ldw	r2,0(sp)
   24988:	143fc616 	blt	r2,r16,248a4 <__alt_mem_mcu_subsystem_ram_0+0x780048a4>
   2498c:	003fe906 	br	24934 <__alt_mem_mcu_subsystem_ram_0+0x78004934>
   24990:	d8c00217 	ldw	r3,8(sp)
   24994:	00800884 	movi	r2,34
   24998:	013fffc4 	movi	r4,-1
   2499c:	18800015 	stw	r2,0(r3)
   249a0:	017fffc4 	movi	r5,-1
   249a4:	a83fd426 	beq	r21,zero,248f8 <__alt_mem_mcu_subsystem_ram_0+0x780048f8>
   249a8:	e53fffc4 	addi	r20,fp,-1
   249ac:	003fd106 	br	248f4 <__alt_mem_mcu_subsystem_ram_0+0x780048f4>
   249b0:	00800044 	movi	r2,1
   249b4:	9f000084 	addi	fp,r19,2
   249b8:	9c000043 	ldbu	r16,1(r19)
   249bc:	d8800115 	stw	r2,4(sp)
   249c0:	003f8e06 	br	247fc <__alt_mem_mcu_subsystem_ram_0+0x780047fc>
   249c4:	80800c18 	cmpnei	r2,r16,48
   249c8:	10001526 	beq	r2,zero,24a20 <_strtoull_l.isra.0+0x2a8>
   249cc:	05c40034 	movhi	r23,4096
   249d0:	008003c4 	movi	r2,15
   249d4:	d8800015 	stw	r2,0(sp)
   249d8:	05bfffc4 	movi	r22,-1
   249dc:	bdffffc4 	addi	r23,r23,-1
   249e0:	04c00404 	movi	r19,16
   249e4:	0025883a 	mov	r18,zero
   249e8:	003fa206 	br	24874 <__alt_mem_mcu_subsystem_ram_0+0x78004874>
   249ec:	e0800003 	ldbu	r2,0(fp)
   249f0:	108037cc 	andi	r2,r2,223
   249f4:	10801618 	cmpnei	r2,r2,88
   249f8:	10000d26 	beq	r2,zero,24a30 <_strtoull_l.isra.0+0x2b8>
   249fc:	05c80034 	movhi	r23,8192
   24a00:	008001c4 	movi	r2,7
   24a04:	d8800015 	stw	r2,0(sp)
   24a08:	05bfffc4 	movi	r22,-1
   24a0c:	bdffffc4 	addi	r23,r23,-1
   24a10:	04c00204 	movi	r19,8
   24a14:	0025883a 	mov	r18,zero
   24a18:	04400204 	movi	r17,8
   24a1c:	003f9506 	br	24874 <__alt_mem_mcu_subsystem_ram_0+0x78004874>
   24a20:	e0800003 	ldbu	r2,0(fp)
   24a24:	108037cc 	andi	r2,r2,223
   24a28:	10801620 	cmpeqi	r2,r2,88
   24a2c:	10000b26 	beq	r2,zero,24a5c <_strtoull_l.isra.0+0x2e4>
   24a30:	05c40034 	movhi	r23,4096
   24a34:	008003c4 	movi	r2,15
   24a38:	e4000043 	ldbu	r16,1(fp)
   24a3c:	d8800015 	stw	r2,0(sp)
   24a40:	e7000084 	addi	fp,fp,2
   24a44:	05bfffc4 	movi	r22,-1
   24a48:	bdffffc4 	addi	r23,r23,-1
   24a4c:	04c00404 	movi	r19,16
   24a50:	0025883a 	mov	r18,zero
   24a54:	04400404 	movi	r17,16
   24a58:	003f8606 	br	24874 <__alt_mem_mcu_subsystem_ram_0+0x78004874>
   24a5c:	01800404 	movi	r6,16
   24a60:	000f883a 	mov	r7,zero
   24a64:	013fffc4 	movi	r4,-1
   24a68:	017fffc4 	movi	r5,-1
   24a6c:	0011e680 	call	11e68 <__udivdi3>
   24a70:	01800404 	movi	r6,16
   24a74:	000f883a 	mov	r7,zero
   24a78:	013fffc4 	movi	r4,-1
   24a7c:	017fffc4 	movi	r5,-1
   24a80:	102d883a 	mov	r22,r2
   24a84:	182f883a 	mov	r23,r3
   24a88:	00124000 	call	12400 <__umoddi3>
   24a8c:	d8800015 	stw	r2,0(sp)
   24a90:	04c00404 	movi	r19,16
   24a94:	0025883a 	mov	r18,zero
   24a98:	003f7606 	br	24874 <__alt_mem_mcu_subsystem_ram_0+0x78004874>

00024a9c <_strtoull_r>:
   24a9c:	008000f4 	movhi	r2,3
   24aa0:	109e6617 	ldw	r2,31128(r2)
   24aa4:	defffe04 	addi	sp,sp,-8
   24aa8:	dfc00115 	stw	ra,4(sp)
   24aac:	10800d17 	ldw	r2,52(r2)
   24ab0:	1000021e 	bne	r2,zero,24abc <_strtoull_r+0x20>
   24ab4:	008000f4 	movhi	r2,3
   24ab8:	10980104 	addi	r2,r2,24580
   24abc:	d8800015 	stw	r2,0(sp)
   24ac0:	00247780 	call	24778 <_strtoull_l.isra.0>
   24ac4:	dfc00117 	ldw	ra,4(sp)
   24ac8:	dec00204 	addi	sp,sp,8
   24acc:	f800283a 	ret

00024ad0 <strtoull_l>:
   24ad0:	defffe04 	addi	sp,sp,-8
   24ad4:	008000f4 	movhi	r2,3
   24ad8:	d9c00015 	stw	r7,0(sp)
   24adc:	300f883a 	mov	r7,r6
   24ae0:	280d883a 	mov	r6,r5
   24ae4:	200b883a 	mov	r5,r4
   24ae8:	111e6617 	ldw	r4,31128(r2)
   24aec:	dfc00115 	stw	ra,4(sp)
   24af0:	00247780 	call	24778 <_strtoull_l.isra.0>
   24af4:	dfc00117 	ldw	ra,4(sp)
   24af8:	dec00204 	addi	sp,sp,8
   24afc:	f800283a 	ret

00024b00 <strtoull>:
   24b00:	008000f4 	movhi	r2,3
   24b04:	10de6617 	ldw	r3,31128(r2)
   24b08:	defffe04 	addi	sp,sp,-8
   24b0c:	dfc00115 	stw	ra,4(sp)
   24b10:	18800d17 	ldw	r2,52(r3)
   24b14:	1000021e 	bne	r2,zero,24b20 <strtoull+0x20>
   24b18:	008000f4 	movhi	r2,3
   24b1c:	10980104 	addi	r2,r2,24580
   24b20:	300f883a 	mov	r7,r6
   24b24:	d8800015 	stw	r2,0(sp)
   24b28:	280d883a 	mov	r6,r5
   24b2c:	200b883a 	mov	r5,r4
   24b30:	1809883a 	mov	r4,r3
   24b34:	00247780 	call	24778 <_strtoull_l.isra.0>
   24b38:	dfc00117 	ldw	ra,4(sp)
   24b3c:	dec00204 	addi	sp,sp,8
   24b40:	f800283a 	ret

00024b44 <_wcrtomb_r>:
   24b44:	008000f4 	movhi	r2,3
   24b48:	109e6617 	ldw	r2,31128(r2)
   24b4c:	defffa04 	addi	sp,sp,-24
   24b50:	dc400415 	stw	r17,16(sp)
   24b54:	dc000315 	stw	r16,12(sp)
   24b58:	dfc00515 	stw	ra,20(sp)
   24b5c:	2021883a 	mov	r16,r4
   24b60:	3823883a 	mov	r17,r7
   24b64:	10800d17 	ldw	r2,52(r2)
   24b68:	28000f26 	beq	r5,zero,24ba8 <_wcrtomb_r+0x64>
   24b6c:	10000b26 	beq	r2,zero,24b9c <_wcrtomb_r+0x58>
   24b70:	10803817 	ldw	r2,224(r2)
   24b74:	880f883a 	mov	r7,r17
   24b78:	8009883a 	mov	r4,r16
   24b7c:	103ee83a 	callr	r2
   24b80:	10ffffd8 	cmpnei	r3,r2,-1
   24b84:	18001126 	beq	r3,zero,24bcc <_wcrtomb_r+0x88>
   24b88:	dfc00517 	ldw	ra,20(sp)
   24b8c:	dc400417 	ldw	r17,16(sp)
   24b90:	dc000317 	ldw	r16,12(sp)
   24b94:	dec00604 	addi	sp,sp,24
   24b98:	f800283a 	ret
   24b9c:	008000f4 	movhi	r2,3
   24ba0:	10980104 	addi	r2,r2,24580
   24ba4:	003ff206 	br	24b70 <__alt_mem_mcu_subsystem_ram_0+0x78004b70>
   24ba8:	10000d26 	beq	r2,zero,24be0 <_wcrtomb_r+0x9c>
   24bac:	10803817 	ldw	r2,224(r2)
   24bb0:	880f883a 	mov	r7,r17
   24bb4:	000d883a 	mov	r6,zero
   24bb8:	d9400084 	addi	r5,sp,2
   24bbc:	8009883a 	mov	r4,r16
   24bc0:	103ee83a 	callr	r2
   24bc4:	10ffffd8 	cmpnei	r3,r2,-1
   24bc8:	183fef1e 	bne	r3,zero,24b88 <__alt_mem_mcu_subsystem_ram_0+0x78004b88>
   24bcc:	00802284 	movi	r2,138
   24bd0:	88000015 	stw	zero,0(r17)
   24bd4:	80800015 	stw	r2,0(r16)
   24bd8:	00bfffc4 	movi	r2,-1
   24bdc:	003fea06 	br	24b88 <__alt_mem_mcu_subsystem_ram_0+0x78004b88>
   24be0:	008000f4 	movhi	r2,3
   24be4:	10980104 	addi	r2,r2,24580
   24be8:	003ff006 	br	24bac <__alt_mem_mcu_subsystem_ram_0+0x78004bac>

00024bec <wcrtomb>:
   24bec:	defffa04 	addi	sp,sp,-24
   24bf0:	008000f4 	movhi	r2,3
   24bf4:	dc000315 	stw	r16,12(sp)
   24bf8:	141e6617 	ldw	r16,31128(r2)
   24bfc:	dc400415 	stw	r17,16(sp)
   24c00:	dfc00515 	stw	ra,20(sp)
   24c04:	3023883a 	mov	r17,r6
   24c08:	80800d17 	ldw	r2,52(r16)
   24c0c:	20001126 	beq	r4,zero,24c54 <wcrtomb+0x68>
   24c10:	10000d26 	beq	r2,zero,24c48 <wcrtomb+0x5c>
   24c14:	10803817 	ldw	r2,224(r2)
   24c18:	280d883a 	mov	r6,r5
   24c1c:	880f883a 	mov	r7,r17
   24c20:	200b883a 	mov	r5,r4
   24c24:	8009883a 	mov	r4,r16
   24c28:	103ee83a 	callr	r2
   24c2c:	10ffffd8 	cmpnei	r3,r2,-1
   24c30:	18001126 	beq	r3,zero,24c78 <wcrtomb+0x8c>
   24c34:	dfc00517 	ldw	ra,20(sp)
   24c38:	dc400417 	ldw	r17,16(sp)
   24c3c:	dc000317 	ldw	r16,12(sp)
   24c40:	dec00604 	addi	sp,sp,24
   24c44:	f800283a 	ret
   24c48:	008000f4 	movhi	r2,3
   24c4c:	10980104 	addi	r2,r2,24580
   24c50:	003ff006 	br	24c14 <__alt_mem_mcu_subsystem_ram_0+0x78004c14>
   24c54:	10000d26 	beq	r2,zero,24c8c <wcrtomb+0xa0>
   24c58:	10803817 	ldw	r2,224(r2)
   24c5c:	880f883a 	mov	r7,r17
   24c60:	000d883a 	mov	r6,zero
   24c64:	d9400084 	addi	r5,sp,2
   24c68:	8009883a 	mov	r4,r16
   24c6c:	103ee83a 	callr	r2
   24c70:	10ffffd8 	cmpnei	r3,r2,-1
   24c74:	183fef1e 	bne	r3,zero,24c34 <__alt_mem_mcu_subsystem_ram_0+0x78004c34>
   24c78:	00802284 	movi	r2,138
   24c7c:	80800015 	stw	r2,0(r16)
   24c80:	88000015 	stw	zero,0(r17)
   24c84:	00bfffc4 	movi	r2,-1
   24c88:	003fea06 	br	24c34 <__alt_mem_mcu_subsystem_ram_0+0x78004c34>
   24c8c:	008000f4 	movhi	r2,3
   24c90:	10980104 	addi	r2,r2,24580
   24c94:	003ff006 	br	24c58 <__alt_mem_mcu_subsystem_ram_0+0x78004c58>

00024c98 <__eqdf2>:
   24c98:	2810d53a 	srli	r8,r5,20
   24c9c:	3806d53a 	srli	r3,r7,20
   24ca0:	00800434 	movhi	r2,16
   24ca4:	4201ffcc 	andi	r8,r8,2047
   24ca8:	10bfffc4 	addi	r2,r2,-1
   24cac:	4281ffd8 	cmpnei	r10,r8,2047
   24cb0:	2892703a 	and	r9,r5,r2
   24cb4:	18c1ffcc 	andi	r3,r3,2047
   24cb8:	3884703a 	and	r2,r7,r2
   24cbc:	280ad7fa 	srli	r5,r5,31
   24cc0:	380ed7fa 	srli	r7,r7,31
   24cc4:	50000626 	beq	r10,zero,24ce0 <__eqdf2+0x48>
   24cc8:	1a81ffe0 	cmpeqi	r10,r3,2047
   24ccc:	5000021e 	bne	r10,zero,24cd8 <__eqdf2+0x40>
   24cd0:	40c0011e 	bne	r8,r3,24cd8 <__eqdf2+0x40>
   24cd4:	48800826 	beq	r9,r2,24cf8 <__eqdf2+0x60>
   24cd8:	00800044 	movi	r2,1
   24cdc:	f800283a 	ret
   24ce0:	4914b03a 	or	r10,r9,r4
   24ce4:	503ffc1e 	bne	r10,zero,24cd8 <__alt_mem_mcu_subsystem_ram_0+0x78004cd8>
   24ce8:	18c1ffd8 	cmpnei	r3,r3,2047
   24cec:	183ffa1e 	bne	r3,zero,24cd8 <__alt_mem_mcu_subsystem_ram_0+0x78004cd8>
   24cf0:	1184b03a 	or	r2,r2,r6
   24cf4:	103ff81e 	bne	r2,zero,24cd8 <__alt_mem_mcu_subsystem_ram_0+0x78004cd8>
   24cf8:	21bff71e 	bne	r4,r6,24cd8 <__alt_mem_mcu_subsystem_ram_0+0x78004cd8>
   24cfc:	29c00426 	beq	r5,r7,24d10 <__eqdf2+0x78>
   24d00:	403ff51e 	bne	r8,zero,24cd8 <__alt_mem_mcu_subsystem_ram_0+0x78004cd8>
   24d04:	4904b03a 	or	r2,r9,r4
   24d08:	1004c03a 	cmpne	r2,r2,zero
   24d0c:	f800283a 	ret
   24d10:	0005883a 	mov	r2,zero
   24d14:	f800283a 	ret

00024d18 <__ledf2>:
   24d18:	2810d53a 	srli	r8,r5,20
   24d1c:	3806d53a 	srli	r3,r7,20
   24d20:	00800434 	movhi	r2,16
   24d24:	4201ffcc 	andi	r8,r8,2047
   24d28:	10bfffc4 	addi	r2,r2,-1
   24d2c:	4241ffd8 	cmpnei	r9,r8,2047
   24d30:	2894703a 	and	r10,r5,r2
   24d34:	18c1ffcc 	andi	r3,r3,2047
   24d38:	3884703a 	and	r2,r7,r2
   24d3c:	280ad7fa 	srli	r5,r5,31
   24d40:	380ed7fa 	srli	r7,r7,31
   24d44:	48000e26 	beq	r9,zero,24d80 <__ledf2+0x68>
   24d48:	1a41ffd8 	cmpnei	r9,r3,2047
   24d4c:	48000826 	beq	r9,zero,24d70 <__ledf2+0x58>
   24d50:	40000f1e 	bne	r8,zero,24d90 <__ledf2+0x78>
   24d54:	5112b03a 	or	r9,r10,r4
   24d58:	1800131e 	bne	r3,zero,24da8 <__ledf2+0x90>
   24d5c:	1196b03a 	or	r11,r2,r6
   24d60:	5800111e 	bne	r11,zero,24da8 <__ledf2+0x90>
   24d64:	48000d1e 	bne	r9,zero,24d9c <__ledf2+0x84>
   24d68:	0005883a 	mov	r2,zero
   24d6c:	f800283a 	ret
   24d70:	1192b03a 	or	r9,r2,r6
   24d74:	483ff626 	beq	r9,zero,24d50 <__alt_mem_mcu_subsystem_ram_0+0x78004d50>
   24d78:	00800084 	movi	r2,2
   24d7c:	f800283a 	ret
   24d80:	5112b03a 	or	r9,r10,r4
   24d84:	483ffc1e 	bne	r9,zero,24d78 <__alt_mem_mcu_subsystem_ram_0+0x78004d78>
   24d88:	1a41ffd8 	cmpnei	r9,r3,2047
   24d8c:	48001226 	beq	r9,zero,24dd8 <__ledf2+0xc0>
   24d90:	1800131e 	bne	r3,zero,24de0 <__ledf2+0xc8>
   24d94:	1192b03a 	or	r9,r2,r6
   24d98:	4800111e 	bne	r9,zero,24de0 <__ledf2+0xc8>
   24d9c:	00800044 	movi	r2,1
   24da0:	2800081e 	bne	r5,zero,24dc4 <__ledf2+0xac>
   24da4:	f800283a 	ret
   24da8:	48000826 	beq	r9,zero,24dcc <__ledf2+0xb4>
   24dac:	29fffb1e 	bne	r5,r7,24d9c <__alt_mem_mcu_subsystem_ram_0+0x78004d9c>
   24db0:	40c00316 	blt	r8,r3,24dc0 <__ledf2+0xa8>
   24db4:	12bff936 	bltu	r2,r10,24d9c <__alt_mem_mcu_subsystem_ram_0+0x78004d9c>
   24db8:	50800c26 	beq	r10,r2,24dec <__ledf2+0xd4>
   24dbc:	50bfea2e 	bgeu	r10,r2,24d68 <__alt_mem_mcu_subsystem_ram_0+0x78004d68>
   24dc0:	2800031e 	bne	r5,zero,24dd0 <__ledf2+0xb8>
   24dc4:	00bfffc4 	movi	r2,-1
   24dc8:	f800283a 	ret
   24dcc:	383ffd26 	beq	r7,zero,24dc4 <__alt_mem_mcu_subsystem_ram_0+0x78004dc4>
   24dd0:	00800044 	movi	r2,1
   24dd4:	f800283a 	ret
   24dd8:	1192b03a 	or	r9,r2,r6
   24ddc:	483fe61e 	bne	r9,zero,24d78 <__alt_mem_mcu_subsystem_ram_0+0x78004d78>
   24de0:	29ffee1e 	bne	r5,r7,24d9c <__alt_mem_mcu_subsystem_ram_0+0x78004d9c>
   24de4:	1a3fed16 	blt	r3,r8,24d9c <__alt_mem_mcu_subsystem_ram_0+0x78004d9c>
   24de8:	003ff106 	br	24db0 <__alt_mem_mcu_subsystem_ram_0+0x78004db0>
   24dec:	313feb36 	bltu	r6,r4,24d9c <__alt_mem_mcu_subsystem_ram_0+0x78004d9c>
   24df0:	21bff336 	bltu	r4,r6,24dc0 <__alt_mem_mcu_subsystem_ram_0+0x78004dc0>
   24df4:	003fdc06 	br	24d68 <__alt_mem_mcu_subsystem_ram_0+0x78004d68>

00024df8 <__unorddf2>:
   24df8:	2806d53a 	srli	r3,r5,20
   24dfc:	3810d53a 	srli	r8,r7,20
   24e00:	00800434 	movhi	r2,16
   24e04:	18c1ffcc 	andi	r3,r3,2047
   24e08:	10bfffc4 	addi	r2,r2,-1
   24e0c:	18c1ffd8 	cmpnei	r3,r3,2047
   24e10:	288a703a 	and	r5,r5,r2
   24e14:	388e703a 	and	r7,r7,r2
   24e18:	4201ffcc 	andi	r8,r8,2047
   24e1c:	18000426 	beq	r3,zero,24e30 <__unorddf2+0x38>
   24e20:	4201ffd8 	cmpnei	r8,r8,2047
   24e24:	40000626 	beq	r8,zero,24e40 <__unorddf2+0x48>
   24e28:	0005883a 	mov	r2,zero
   24e2c:	f800283a 	ret
   24e30:	214ab03a 	or	r5,r4,r5
   24e34:	283ffa26 	beq	r5,zero,24e20 <__alt_mem_mcu_subsystem_ram_0+0x78004e20>
   24e38:	00800044 	movi	r2,1
   24e3c:	f800283a 	ret
   24e40:	398eb03a 	or	r7,r7,r6
   24e44:	3804c03a 	cmpne	r2,r7,zero
   24e48:	f800283a 	ret

00024e4c <__floatsidf>:
   24e4c:	defffd04 	addi	sp,sp,-12
   24e50:	dfc00215 	stw	ra,8(sp)
   24e54:	dc400115 	stw	r17,4(sp)
   24e58:	dc000015 	stw	r16,0(sp)
   24e5c:	20002626 	beq	r4,zero,24ef8 <__floatsidf+0xac>
   24e60:	2021883a 	mov	r16,r4
   24e64:	2022d7fa 	srli	r17,r4,31
   24e68:	20002816 	blt	r4,zero,24f0c <__floatsidf+0xc0>
   24e6c:	8009883a 	mov	r4,r16
   24e70:	0014f540 	call	14f54 <__clzsi2>
   24e74:	01010784 	movi	r4,1054
   24e78:	2089c83a 	sub	r4,r4,r2
   24e7c:	10c002c8 	cmpgei	r3,r2,11
   24e80:	2101ffcc 	andi	r4,r4,2047
   24e84:	18001326 	beq	r3,zero,24ed4 <__floatsidf+0x88>
   24e88:	10bffd44 	addi	r2,r2,-11
   24e8c:	808a983a 	sll	r5,r16,r2
   24e90:	00800434 	movhi	r2,16
   24e94:	10bfffc4 	addi	r2,r2,-1
   24e98:	288a703a 	and	r5,r5,r2
   24e9c:	0005883a 	mov	r2,zero
   24ea0:	2008953a 	slli	r4,r4,20
   24ea4:	8c403fcc 	andi	r17,r17,255
   24ea8:	01800434 	movhi	r6,16
   24eac:	31bfffc4 	addi	r6,r6,-1
   24eb0:	880697fa 	slli	r3,r17,31
   24eb4:	298a703a 	and	r5,r5,r6
   24eb8:	290ab03a 	or	r5,r5,r4
   24ebc:	28c6b03a 	or	r3,r5,r3
   24ec0:	dfc00217 	ldw	ra,8(sp)
   24ec4:	dc400117 	ldw	r17,4(sp)
   24ec8:	dc000017 	ldw	r16,0(sp)
   24ecc:	dec00304 	addi	sp,sp,12
   24ed0:	f800283a 	ret
   24ed4:	018002c4 	movi	r6,11
   24ed8:	308dc83a 	sub	r6,r6,r2
   24edc:	818ad83a 	srl	r5,r16,r6
   24ee0:	00c00434 	movhi	r3,16
   24ee4:	10800544 	addi	r2,r2,21
   24ee8:	18ffffc4 	addi	r3,r3,-1
   24eec:	8084983a 	sll	r2,r16,r2
   24ef0:	28ca703a 	and	r5,r5,r3
   24ef4:	003fea06 	br	24ea0 <__alt_mem_mcu_subsystem_ram_0+0x78004ea0>
   24ef8:	0023883a 	mov	r17,zero
   24efc:	0009883a 	mov	r4,zero
   24f00:	000b883a 	mov	r5,zero
   24f04:	0005883a 	mov	r2,zero
   24f08:	003fe506 	br	24ea0 <__alt_mem_mcu_subsystem_ram_0+0x78004ea0>
   24f0c:	0121c83a 	sub	r16,zero,r4
   24f10:	003fd606 	br	24e6c <__alt_mem_mcu_subsystem_ram_0+0x78004e6c>

00024f14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24f14:	defffe04 	addi	sp,sp,-8
   24f18:	dfc00115 	stw	ra,4(sp)
   24f1c:	df000015 	stw	fp,0(sp)
   24f20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24f24:	d0a00c17 	ldw	r2,-32720(gp)
   24f28:	10000326 	beq	r2,zero,24f38 <alt_get_errno+0x24>
   24f2c:	d0a00c17 	ldw	r2,-32720(gp)
   24f30:	103ee83a 	callr	r2
   24f34:	00000106 	br	24f3c <alt_get_errno+0x28>
   24f38:	d0a7ae04 	addi	r2,gp,-24904
}
   24f3c:	e037883a 	mov	sp,fp
   24f40:	dfc00117 	ldw	ra,4(sp)
   24f44:	df000017 	ldw	fp,0(sp)
   24f48:	dec00204 	addi	sp,sp,8
   24f4c:	f800283a 	ret

00024f50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   24f50:	defffb04 	addi	sp,sp,-20
   24f54:	dfc00415 	stw	ra,16(sp)
   24f58:	df000315 	stw	fp,12(sp)
   24f5c:	df000304 	addi	fp,sp,12
   24f60:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   24f64:	e0bffd17 	ldw	r2,-12(fp)
   24f68:	10000616 	blt	r2,zero,24f84 <close+0x34>
   24f6c:	e0bffd17 	ldw	r2,-12(fp)
   24f70:	10c00324 	muli	r3,r2,12
   24f74:	008000f4 	movhi	r2,3
   24f78:	10997804 	addi	r2,r2,26080
   24f7c:	1885883a 	add	r2,r3,r2
   24f80:	00000106 	br	24f88 <close+0x38>
   24f84:	0005883a 	mov	r2,zero
   24f88:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   24f8c:	e0bfff17 	ldw	r2,-4(fp)
   24f90:	10001926 	beq	r2,zero,24ff8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24f94:	e0bfff17 	ldw	r2,-4(fp)
   24f98:	10800017 	ldw	r2,0(r2)
   24f9c:	10800417 	ldw	r2,16(r2)
   24fa0:	10000626 	beq	r2,zero,24fbc <close+0x6c>
   24fa4:	e0bfff17 	ldw	r2,-4(fp)
   24fa8:	10800017 	ldw	r2,0(r2)
   24fac:	10800417 	ldw	r2,16(r2)
   24fb0:	e13fff17 	ldw	r4,-4(fp)
   24fb4:	103ee83a 	callr	r2
   24fb8:	00000106 	br	24fc0 <close+0x70>
   24fbc:	0005883a 	mov	r2,zero
   24fc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24fc4:	e13ffd17 	ldw	r4,-12(fp)
   24fc8:	0025d380 	call	25d38 <alt_release_fd>
    if (rval < 0)
   24fcc:	e0bffe17 	ldw	r2,-8(fp)
   24fd0:	1000070e 	bge	r2,zero,24ff0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   24fd4:	0024f140 	call	24f14 <alt_get_errno>
   24fd8:	1007883a 	mov	r3,r2
   24fdc:	e0bffe17 	ldw	r2,-8(fp)
   24fe0:	0085c83a 	sub	r2,zero,r2
   24fe4:	18800015 	stw	r2,0(r3)
      return -1;
   24fe8:	00bfffc4 	movi	r2,-1
   24fec:	00000706 	br	2500c <close+0xbc>
    }
    return 0;
   24ff0:	0005883a 	mov	r2,zero
   24ff4:	00000506 	br	2500c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24ff8:	0024f140 	call	24f14 <alt_get_errno>
   24ffc:	1007883a 	mov	r3,r2
   25000:	00801444 	movi	r2,81
   25004:	18800015 	stw	r2,0(r3)
    return -1;
   25008:	00bfffc4 	movi	r2,-1
  }
}
   2500c:	e037883a 	mov	sp,fp
   25010:	dfc00117 	ldw	ra,4(sp)
   25014:	df000017 	ldw	fp,0(sp)
   25018:	dec00204 	addi	sp,sp,8
   2501c:	f800283a 	ret

00025020 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   25020:	defffb04 	addi	sp,sp,-20
   25024:	df000415 	stw	fp,16(sp)
   25028:	df000404 	addi	fp,sp,16
   2502c:	e13ffd15 	stw	r4,-12(fp)
   25030:	e17ffc15 	stw	r5,-16(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   25034:	e0fffd17 	ldw	r3,-12(fp)
   25038:	e0bffc17 	ldw	r2,-16(fp)
   2503c:	1885883a 	add	r2,r3,r2
   25040:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   25044:	e0bffd17 	ldw	r2,-12(fp)
   25048:	e0bfff15 	stw	r2,-4(fp)
   2504c:	00000506 	br	25064 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   25050:	e0bfff17 	ldw	r2,-4(fp)
   25054:	1000001b 	flushda	0(r2)
  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   25058:	e0bfff17 	ldw	r2,-4(fp)
   2505c:	10800804 	addi	r2,r2,32
   25060:	e0bfff15 	stw	r2,-4(fp)
   25064:	e0ffff17 	ldw	r3,-4(fp)
   25068:	e0bffe17 	ldw	r2,-8(fp)
   2506c:	18bff836 	bltu	r3,r2,25050 <__alt_mem_mcu_subsystem_ram_0+0x78005050>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   25070:	e0bffd17 	ldw	r2,-12(fp)
   25074:	108007cc 	andi	r2,r2,31
   25078:	10000226 	beq	r2,zero,25084 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   2507c:	e0bfff17 	ldw	r2,-4(fp)
   25080:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25084:	0001883a 	nop
   25088:	e037883a 	mov	sp,fp
   2508c:	df000017 	ldw	fp,0(sp)
   25090:	dec00104 	addi	sp,sp,4
   25094:	f800283a 	ret

00025098 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   25098:	defffc04 	addi	sp,sp,-16
   2509c:	df000315 	stw	fp,12(sp)
   250a0:	df000304 	addi	fp,sp,12
   250a4:	e13fff15 	stw	r4,-4(fp)
   250a8:	e17ffe15 	stw	r5,-8(fp)
   250ac:	e1bffd15 	stw	r6,-12(fp)
  return len;
   250b0:	e0bffd17 	ldw	r2,-12(fp)
}
   250b4:	e037883a 	mov	sp,fp
   250b8:	df000017 	ldw	fp,0(sp)
   250bc:	dec00104 	addi	sp,sp,4
   250c0:	f800283a 	ret

000250c4 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
   250c4:	defffd04 	addi	sp,sp,-12
   250c8:	dfc00215 	stw	ra,8(sp)
   250cc:	df000115 	stw	fp,4(sp)
   250d0:	df000104 	addi	fp,sp,4
   250d4:	e13fff15 	stw	r4,-4(fp)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   250d8:	d1600904 	addi	r5,gp,-32732
   250dc:	e13fff17 	ldw	r4,-4(fp)
   250e0:	00251340 	call	25134 <alt_dev_llist_insert>
}
   250e4:	e037883a 	mov	sp,fp
   250e8:	dfc00117 	ldw	ra,4(sp)
   250ec:	df000017 	ldw	fp,0(sp)
   250f0:	dec00204 	addi	sp,sp,8
   250f4:	f800283a 	ret

000250f8 <alt_get_errno>:
{
   250f8:	defffe04 	addi	sp,sp,-8
   250fc:	dfc00115 	stw	ra,4(sp)
   25100:	df000015 	stw	fp,0(sp)
   25104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25108:	d0a00c17 	ldw	r2,-32720(gp)
   2510c:	10000326 	beq	r2,zero,2511c <alt_get_errno+0x24>
   25110:	d0a00c17 	ldw	r2,-32720(gp)
   25114:	103ee83a 	callr	r2
   25118:	00000106 	br	25120 <alt_get_errno+0x28>
   2511c:	d0a7ae04 	addi	r2,gp,-24904
}
   25120:	e037883a 	mov	sp,fp
   25124:	dfc00117 	ldw	ra,4(sp)
   25128:	df000017 	ldw	fp,0(sp)
   2512c:	dec00204 	addi	sp,sp,8
   25130:	f800283a 	ret

00025134 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25134:	defffa04 	addi	sp,sp,-24
   25138:	dfc00515 	stw	ra,20(sp)
   2513c:	df000415 	stw	fp,16(sp)
   25140:	df000404 	addi	fp,sp,16
   25144:	e13ffd15 	stw	r4,-12(fp)
   25148:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2514c:	e0bffd17 	ldw	r2,-12(fp)
   25150:	10000326 	beq	r2,zero,25160 <alt_dev_llist_insert+0x2c>
   25154:	e0bffd17 	ldw	r2,-12(fp)
   25158:	10800217 	ldw	r2,8(r2)
   2515c:	1000061e 	bne	r2,zero,25178 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25160:	00250f80 	call	250f8 <alt_get_errno>
   25164:	1007883a 	mov	r3,r2
   25168:	00800584 	movi	r2,22
   2516c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25170:	00bffa84 	movi	r2,-22
   25174:	00001306 	br	251c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25178:	e0bffd17 	ldw	r2,-12(fp)
   2517c:	e0fffc17 	ldw	r3,-16(fp)
   25180:	e0ffff15 	stw	r3,-4(fp)
   25184:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25188:	e0bffe17 	ldw	r2,-8(fp)
   2518c:	e0ffff17 	ldw	r3,-4(fp)
   25190:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25194:	e0bfff17 	ldw	r2,-4(fp)
   25198:	10c00017 	ldw	r3,0(r2)
   2519c:	e0bffe17 	ldw	r2,-8(fp)
   251a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   251a4:	e0bfff17 	ldw	r2,-4(fp)
   251a8:	10800017 	ldw	r2,0(r2)
   251ac:	e0fffe17 	ldw	r3,-8(fp)
   251b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   251b4:	e0bfff17 	ldw	r2,-4(fp)
   251b8:	e0fffe17 	ldw	r3,-8(fp)
   251bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   251c0:	0005883a 	mov	r2,zero
}
   251c4:	e037883a 	mov	sp,fp
   251c8:	dfc00117 	ldw	ra,4(sp)
   251cc:	df000017 	ldw	fp,0(sp)
   251d0:	dec00204 	addi	sp,sp,8
   251d4:	f800283a 	ret

000251d8 <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
   251d8:	defffe04 	addi	sp,sp,-8
   251dc:	df000115 	stw	fp,4(sp)
   251e0:	df000104 	addi	fp,sp,4
   251e4:	e13fff15 	stw	r4,-4(fp)
}
   251e8:	0001883a 	nop
   251ec:	e037883a 	mov	sp,fp
   251f0:	df000017 	ldw	fp,0(sp)
   251f4:	dec00104 	addi	sp,sp,4
   251f8:	f800283a 	ret

000251fc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   251fc:	defffe04 	addi	sp,sp,-8
   25200:	df000115 	stw	fp,4(sp)
   25204:	df000104 	addi	fp,sp,4
   25208:	e13fff15 	stw	r4,-4(fp)
}
   2520c:	0001883a 	nop
   25210:	e037883a 	mov	sp,fp
   25214:	df000017 	ldw	fp,0(sp)
   25218:	dec00104 	addi	sp,sp,4
   2521c:	f800283a 	ret

00025220 <alt_get_errno>:
{
   25220:	defffe04 	addi	sp,sp,-8
   25224:	dfc00115 	stw	ra,4(sp)
   25228:	df000015 	stw	fp,0(sp)
   2522c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25230:	d0a00c17 	ldw	r2,-32720(gp)
   25234:	10000326 	beq	r2,zero,25244 <alt_get_errno+0x24>
   25238:	d0a00c17 	ldw	r2,-32720(gp)
   2523c:	103ee83a 	callr	r2
   25240:	00000106 	br	25248 <alt_get_errno+0x28>
   25244:	d0a7ae04 	addi	r2,gp,-24904
}
   25248:	e037883a 	mov	sp,fp
   2524c:	dfc00117 	ldw	ra,4(sp)
   25250:	df000017 	ldw	fp,0(sp)
   25254:	dec00204 	addi	sp,sp,8
   25258:	f800283a 	ret

0002525c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2525c:	defffb04 	addi	sp,sp,-20
   25260:	dfc00415 	stw	ra,16(sp)
   25264:	df000315 	stw	fp,12(sp)
   25268:	df000304 	addi	fp,sp,12
   2526c:	e13ffe15 	stw	r4,-8(fp)
   25270:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25274:	e0bffe17 	ldw	r2,-8(fp)
   25278:	10000616 	blt	r2,zero,25294 <fstat+0x38>
   2527c:	e0bffe17 	ldw	r2,-8(fp)
   25280:	10c00324 	muli	r3,r2,12
   25284:	008000f4 	movhi	r2,3
   25288:	10997804 	addi	r2,r2,26080
   2528c:	1885883a 	add	r2,r3,r2
   25290:	00000106 	br	25298 <fstat+0x3c>
   25294:	0005883a 	mov	r2,zero
   25298:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   2529c:	e0bfff17 	ldw	r2,-4(fp)
   252a0:	10001026 	beq	r2,zero,252e4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   252a4:	e0bfff17 	ldw	r2,-4(fp)
   252a8:	10800017 	ldw	r2,0(r2)
   252ac:	10800817 	ldw	r2,32(r2)
   252b0:	10000726 	beq	r2,zero,252d0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   252b4:	e0bfff17 	ldw	r2,-4(fp)
   252b8:	10800017 	ldw	r2,0(r2)
   252bc:	10800817 	ldw	r2,32(r2)
   252c0:	e17ffd17 	ldw	r5,-12(fp)
   252c4:	e13fff17 	ldw	r4,-4(fp)
   252c8:	103ee83a 	callr	r2
   252cc:	00000a06 	br	252f8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   252d0:	e0bffd17 	ldw	r2,-12(fp)
   252d4:	00c80004 	movi	r3,8192
   252d8:	10c00115 	stw	r3,4(r2)
      return 0;
   252dc:	0005883a 	mov	r2,zero
   252e0:	00000506 	br	252f8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   252e4:	00252200 	call	25220 <alt_get_errno>
   252e8:	1007883a 	mov	r3,r2
   252ec:	00801444 	movi	r2,81
   252f0:	18800015 	stw	r2,0(r3)
    return -1;
   252f4:	00bfffc4 	movi	r2,-1
  }
}
   252f8:	e037883a 	mov	sp,fp
   252fc:	dfc00117 	ldw	ra,4(sp)
   25300:	df000017 	ldw	fp,0(sp)
   25304:	dec00204 	addi	sp,sp,8
   25308:	f800283a 	ret

0002530c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2530c:	defffe04 	addi	sp,sp,-8
   25310:	dfc00115 	stw	ra,4(sp)
   25314:	df000015 	stw	fp,0(sp)
   25318:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2531c:	01440004 	movi	r5,4096
   25320:	0009883a 	mov	r4,zero
   25324:	0030aec0 	call	30aec <alt_icache_flush>
#endif
}
   25328:	0001883a 	nop
   2532c:	e037883a 	mov	sp,fp
   25330:	dfc00117 	ldw	ra,4(sp)
   25334:	df000017 	ldw	fp,0(sp)
   25338:	dec00204 	addi	sp,sp,8
   2533c:	f800283a 	ret

00025340 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25340:	defff904 	addi	sp,sp,-28
   25344:	dfc00615 	stw	ra,24(sp)
   25348:	df000515 	stw	fp,20(sp)
   2534c:	df000504 	addi	fp,sp,20
   25350:	e13fff15 	stw	r4,-4(fp)
   25354:	e17ffe15 	stw	r5,-8(fp)
   25358:	e1bffd15 	stw	r6,-12(fp)
   2535c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   25360:	e0800217 	ldw	r2,8(fp)
   25364:	d8800015 	stw	r2,0(sp)
   25368:	e1fffc17 	ldw	r7,-16(fp)
   2536c:	e1bffd17 	ldw	r6,-12(fp)
   25370:	e17ffe17 	ldw	r5,-8(fp)
   25374:	e13fff17 	ldw	r4,-4(fp)
   25378:	00254f00 	call	254f0 <alt_iic_isr_register>
}  
   2537c:	e037883a 	mov	sp,fp
   25380:	dfc00117 	ldw	ra,4(sp)
   25384:	df000017 	ldw	fp,0(sp)
   25388:	dec00204 	addi	sp,sp,8
   2538c:	f800283a 	ret

00025390 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   25390:	defff904 	addi	sp,sp,-28
   25394:	df000615 	stw	fp,24(sp)
   25398:	df000604 	addi	fp,sp,24
   2539c:	e13ffb15 	stw	r4,-20(fp)
   253a0:	e17ffa15 	stw	r5,-24(fp)
   253a4:	e0bffa17 	ldw	r2,-24(fp)
   253a8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   253ac:	0005303a 	rdctl	r2,status
   253b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   253b4:	e0fffe17 	ldw	r3,-8(fp)
   253b8:	00bfff84 	movi	r2,-2
   253bc:	1884703a 	and	r2,r3,r2
   253c0:	1001703a 	wrctl	status,r2
  return context;
   253c4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   253c8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   253cc:	00c00044 	movi	r3,1
   253d0:	e0bfff17 	ldw	r2,-4(fp)
   253d4:	1884983a 	sll	r2,r3,r2
   253d8:	1007883a 	mov	r3,r2
   253dc:	d0a7b017 	ldw	r2,-24896(gp)
   253e0:	1884b03a 	or	r2,r3,r2
   253e4:	d0a7b015 	stw	r2,-24896(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   253e8:	d0a7b017 	ldw	r2,-24896(gp)
   253ec:	100170fa 	wrctl	ienable,r2
   253f0:	e0bffd17 	ldw	r2,-12(fp)
   253f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   253f8:	e0bffc17 	ldw	r2,-16(fp)
   253fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25400:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   25404:	0001883a 	nop
}
   25408:	e037883a 	mov	sp,fp
   2540c:	df000017 	ldw	fp,0(sp)
   25410:	dec00104 	addi	sp,sp,4
   25414:	f800283a 	ret

00025418 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   25418:	defff904 	addi	sp,sp,-28
   2541c:	df000615 	stw	fp,24(sp)
   25420:	df000604 	addi	fp,sp,24
   25424:	e13ffb15 	stw	r4,-20(fp)
   25428:	e17ffa15 	stw	r5,-24(fp)
   2542c:	e0bffa17 	ldw	r2,-24(fp)
   25430:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   25434:	0005303a 	rdctl	r2,status
   25438:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2543c:	e0fffe17 	ldw	r3,-8(fp)
   25440:	00bfff84 	movi	r2,-2
   25444:	1884703a 	and	r2,r3,r2
   25448:	1001703a 	wrctl	status,r2
  return context;
   2544c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   25450:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   25454:	00c00044 	movi	r3,1
   25458:	e0bfff17 	ldw	r2,-4(fp)
   2545c:	1884983a 	sll	r2,r3,r2
   25460:	0084303a 	nor	r2,zero,r2
   25464:	1007883a 	mov	r3,r2
   25468:	d0a7b017 	ldw	r2,-24896(gp)
   2546c:	1884703a 	and	r2,r3,r2
   25470:	d0a7b015 	stw	r2,-24896(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25474:	d0a7b017 	ldw	r2,-24896(gp)
   25478:	100170fa 	wrctl	ienable,r2
   2547c:	e0bffd17 	ldw	r2,-12(fp)
   25480:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   25484:	e0bffc17 	ldw	r2,-16(fp)
   25488:	1001703a 	wrctl	status,r2
  return 0;
   2548c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   25490:	0001883a 	nop
}
   25494:	e037883a 	mov	sp,fp
   25498:	df000017 	ldw	fp,0(sp)
   2549c:	dec00104 	addi	sp,sp,4
   254a0:	f800283a 	ret

000254a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   254a4:	defffc04 	addi	sp,sp,-16
   254a8:	df000315 	stw	fp,12(sp)
   254ac:	df000304 	addi	fp,sp,12
   254b0:	e13ffe15 	stw	r4,-8(fp)
   254b4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   254b8:	000530fa 	rdctl	r2,ienable
   254bc:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   254c0:	00c00044 	movi	r3,1
   254c4:	e0bffd17 	ldw	r2,-12(fp)
   254c8:	1884983a 	sll	r2,r3,r2
   254cc:	1007883a 	mov	r3,r2
   254d0:	e0bfff17 	ldw	r2,-4(fp)
   254d4:	1884703a 	and	r2,r3,r2
   254d8:	1004c03a 	cmpne	r2,r2,zero
   254dc:	10803fcc 	andi	r2,r2,255
}
   254e0:	e037883a 	mov	sp,fp
   254e4:	df000017 	ldw	fp,0(sp)
   254e8:	dec00104 	addi	sp,sp,4
   254ec:	f800283a 	ret

000254f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   254f0:	defff504 	addi	sp,sp,-44
   254f4:	dfc00a15 	stw	ra,40(sp)
   254f8:	df000915 	stw	fp,36(sp)
   254fc:	df000904 	addi	fp,sp,36
   25500:	e13ffa15 	stw	r4,-24(fp)
   25504:	e17ff915 	stw	r5,-28(fp)
   25508:	e1bff815 	stw	r6,-32(fp)
   2550c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   25510:	00bffa84 	movi	r2,-22
   25514:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   25518:	e0bff917 	ldw	r2,-28(fp)
   2551c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25520:	e0bffe17 	ldw	r2,-8(fp)
   25524:	10800808 	cmpgei	r2,r2,32
   25528:	1000241e 	bne	r2,zero,255bc <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
   2552c:	0005303a 	rdctl	r2,status
   25530:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25534:	e0fffc17 	ldw	r3,-16(fp)
   25538:	00bfff84 	movi	r2,-2
   2553c:	1884703a 	and	r2,r3,r2
   25540:	1001703a 	wrctl	status,r2
  return context;
   25544:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   25548:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   2554c:	e0bffe17 	ldw	r2,-8(fp)
   25550:	100890fa 	slli	r4,r2,3
   25554:	e0fff817 	ldw	r3,-32(fp)
   25558:	008202b4 	movhi	r2,2058
   2555c:	2085883a 	add	r2,r4,r2
   25560:	10cd2c15 	stw	r3,13488(r2)
    alt_irq[id].context = isr_context;
   25564:	e0bffe17 	ldw	r2,-8(fp)
   25568:	100890fa 	slli	r4,r2,3
   2556c:	e0fff717 	ldw	r3,-36(fp)
   25570:	008202b4 	movhi	r2,2058
   25574:	2085883a 	add	r2,r4,r2
   25578:	10cd2d15 	stw	r3,13492(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2557c:	e0bff817 	ldw	r2,-32(fp)
   25580:	10000526 	beq	r2,zero,25598 <alt_iic_isr_register+0xa8>
   25584:	e0bffe17 	ldw	r2,-8(fp)
   25588:	100b883a 	mov	r5,r2
   2558c:	e13ffa17 	ldw	r4,-24(fp)
   25590:	00253900 	call	25390 <alt_ic_irq_enable>
   25594:	00000406 	br	255a8 <alt_iic_isr_register+0xb8>
   25598:	e0bffe17 	ldw	r2,-8(fp)
   2559c:	100b883a 	mov	r5,r2
   255a0:	e13ffa17 	ldw	r4,-24(fp)
   255a4:	00254180 	call	25418 <alt_ic_irq_disable>
   255a8:	e0bfff15 	stw	r2,-4(fp)
   255ac:	e0bffd17 	ldw	r2,-12(fp)
   255b0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   255b4:	e0bffb17 	ldw	r2,-20(fp)
   255b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   255bc:	e0bfff17 	ldw	r2,-4(fp)
}
   255c0:	e037883a 	mov	sp,fp
   255c4:	dfc00117 	ldw	ra,4(sp)
   255c8:	df000017 	ldw	fp,0(sp)
   255cc:	dec00204 	addi	sp,sp,8
   255d0:	f800283a 	ret

000255d4 <alt_instruction_exception_register>:
void alt_instruction_exception_register (
  alt_exception_result (*exception_handler)(
    alt_exception_cause cause,
    alt_u32 exception_pc,
    alt_u32 bad_addr) )
{
   255d4:	defffe04 	addi	sp,sp,-8
   255d8:	df000115 	stw	fp,4(sp)
   255dc:	df000104 	addi	fp,sp,4
   255e0:	e13fff15 	stw	r4,-4(fp)
  alt_instruction_exception_handler = exception_handler;
   255e4:	e0bfff17 	ldw	r2,-4(fp)
   255e8:	d0a7b715 	stw	r2,-24868(gp)
}
   255ec:	0001883a 	nop
   255f0:	e037883a 	mov	sp,fp
   255f4:	df000017 	ldw	fp,0(sp)
   255f8:	dec00104 	addi	sp,sp,4
   255fc:	f800283a 	ret

00025600 <alt_get_errno>:
{
   25600:	defffe04 	addi	sp,sp,-8
   25604:	dfc00115 	stw	ra,4(sp)
   25608:	df000015 	stw	fp,0(sp)
   2560c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25610:	d0a00c17 	ldw	r2,-32720(gp)
   25614:	10000326 	beq	r2,zero,25624 <alt_get_errno+0x24>
   25618:	d0a00c17 	ldw	r2,-32720(gp)
   2561c:	103ee83a 	callr	r2
   25620:	00000106 	br	25628 <alt_get_errno+0x28>
   25624:	d0a7ae04 	addi	r2,gp,-24904
}
   25628:	e037883a 	mov	sp,fp
   2562c:	dfc00117 	ldw	ra,4(sp)
   25630:	df000017 	ldw	fp,0(sp)
   25634:	dec00204 	addi	sp,sp,8
   25638:	f800283a 	ret

0002563c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2563c:	deffed04 	addi	sp,sp,-76
   25640:	dfc01215 	stw	ra,72(sp)
   25644:	df001115 	stw	fp,68(sp)
   25648:	df001104 	addi	fp,sp,68
   2564c:	e13fef15 	stw	r4,-68(fp)
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
   25650:	e03ff115 	stw	zero,-60(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25654:	e0bfef17 	ldw	r2,-68(fp)
   25658:	10000616 	blt	r2,zero,25674 <isatty+0x38>
   2565c:	e0bfef17 	ldw	r2,-68(fp)
   25660:	10c00324 	muli	r3,r2,12
   25664:	008000f4 	movhi	r2,3
   25668:	10997804 	addi	r2,r2,26080
   2566c:	1885883a 	add	r2,r3,r2
   25670:	00000106 	br	25678 <isatty+0x3c>
   25674:	0005883a 	mov	r2,zero
   25678:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   2567c:	e0bfff17 	ldw	r2,-4(fp)
   25680:	10000e26 	beq	r2,zero,256bc <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   25684:	e0bfff17 	ldw	r2,-4(fp)
   25688:	10800017 	ldw	r2,0(r2)
   2568c:	10800817 	ldw	r2,32(r2)
   25690:	1000021e 	bne	r2,zero,2569c <isatty+0x60>
    {
      return 1;
   25694:	00800044 	movi	r2,1
   25698:	00000d06 	br	256d0 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2569c:	e0bff004 	addi	r2,fp,-64
   256a0:	100b883a 	mov	r5,r2
   256a4:	e13fef17 	ldw	r4,-68(fp)
   256a8:	002525c0 	call	2525c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   256ac:	e0bff117 	ldw	r2,-60(fp)
   256b0:	10880020 	cmpeqi	r2,r2,8192
   256b4:	10803fcc 	andi	r2,r2,255
   256b8:	00000506 	br	256d0 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   256bc:	00256000 	call	25600 <alt_get_errno>
   256c0:	1007883a 	mov	r3,r2
   256c4:	00801444 	movi	r2,81
   256c8:	18800015 	stw	r2,0(r3)
    return 0;
   256cc:	0005883a 	mov	r2,zero
  }
}
   256d0:	e037883a 	mov	sp,fp
   256d4:	dfc00117 	ldw	ra,4(sp)
   256d8:	df000017 	ldw	fp,0(sp)
   256dc:	dec00204 	addi	sp,sp,8
   256e0:	f800283a 	ret

000256e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   256e4:	defffc04 	addi	sp,sp,-16
   256e8:	df000315 	stw	fp,12(sp)
   256ec:	df000304 	addi	fp,sp,12
   256f0:	e13fff15 	stw	r4,-4(fp)
   256f4:	e17ffe15 	stw	r5,-8(fp)
   256f8:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   256fc:	e0fffe17 	ldw	r3,-8(fp)
   25700:	e0bfff17 	ldw	r2,-4(fp)
   25704:	18800c26 	beq	r3,r2,25738 <alt_load_section+0x54>
  {
    while( to != end )
   25708:	00000806 	br	2572c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2570c:	e0ffff17 	ldw	r3,-4(fp)
   25710:	18800104 	addi	r2,r3,4
   25714:	e0bfff15 	stw	r2,-4(fp)
   25718:	e0bffe17 	ldw	r2,-8(fp)
   2571c:	11000104 	addi	r4,r2,4
   25720:	e13ffe15 	stw	r4,-8(fp)
   25724:	18c00017 	ldw	r3,0(r3)
   25728:	10c00015 	stw	r3,0(r2)
    while( to != end )
   2572c:	e0fffe17 	ldw	r3,-8(fp)
   25730:	e0bffd17 	ldw	r2,-12(fp)
   25734:	18bff51e 	bne	r3,r2,2570c <__alt_mem_mcu_subsystem_ram_0+0x7800570c>
    }
  }
}
   25738:	0001883a 	nop
   2573c:	e037883a 	mov	sp,fp
   25740:	df000017 	ldw	fp,0(sp)
   25744:	dec00104 	addi	sp,sp,4
   25748:	f800283a 	ret

0002574c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2574c:	defffe04 	addi	sp,sp,-8
   25750:	dfc00115 	stw	ra,4(sp)
   25754:	df000015 	stw	fp,0(sp)
   25758:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2575c:	018000f4 	movhi	r6,3
   25760:	319e7c04 	addi	r6,r6,31216
   25764:	014000f4 	movhi	r5,3
   25768:	2956ec04 	addi	r5,r5,23472
   2576c:	010000f4 	movhi	r4,3
   25770:	211e7c04 	addi	r4,r4,31216
   25774:	00256e40 	call	256e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   25778:	01800034 	movhi	r6,0
   2577c:	31809104 	addi	r6,r6,580
   25780:	01400034 	movhi	r5,0
   25784:	29400804 	addi	r5,r5,32
   25788:	01000034 	movhi	r4,0
   2578c:	21000804 	addi	r4,r4,32
   25790:	00256e40 	call	256e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   25794:	018000f4 	movhi	r6,3
   25798:	3196ec04 	addi	r6,r6,23472
   2579c:	014000f4 	movhi	r5,3
   257a0:	2945a304 	addi	r5,r5,5772
   257a4:	010000f4 	movhi	r4,3
   257a8:	2105a304 	addi	r4,r4,5772
   257ac:	00256e40 	call	256e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   257b0:	00307940 	call	30794 <alt_dcache_flush_all>
  alt_icache_flush_all();
   257b4:	002530c0 	call	2530c <alt_icache_flush_all>
}
   257b8:	0001883a 	nop
   257bc:	e037883a 	mov	sp,fp
   257c0:	dfc00117 	ldw	ra,4(sp)
   257c4:	df000017 	ldw	fp,0(sp)
   257c8:	dec00204 	addi	sp,sp,8
   257cc:	f800283a 	ret

000257d0 <alt_get_errno>:
{
   257d0:	defffe04 	addi	sp,sp,-8
   257d4:	dfc00115 	stw	ra,4(sp)
   257d8:	df000015 	stw	fp,0(sp)
   257dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   257e0:	d0a00c17 	ldw	r2,-32720(gp)
   257e4:	10000326 	beq	r2,zero,257f4 <alt_get_errno+0x24>
   257e8:	d0a00c17 	ldw	r2,-32720(gp)
   257ec:	103ee83a 	callr	r2
   257f0:	00000106 	br	257f8 <alt_get_errno+0x28>
   257f4:	d0a7ae04 	addi	r2,gp,-24904
}
   257f8:	e037883a 	mov	sp,fp
   257fc:	dfc00117 	ldw	ra,4(sp)
   25800:	df000017 	ldw	fp,0(sp)
   25804:	dec00204 	addi	sp,sp,8
   25808:	f800283a 	ret

0002580c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2580c:	defff904 	addi	sp,sp,-28
   25810:	dfc00615 	stw	ra,24(sp)
   25814:	df000515 	stw	fp,20(sp)
   25818:	df000504 	addi	fp,sp,20
   2581c:	e13ffd15 	stw	r4,-12(fp)
   25820:	e17ffc15 	stw	r5,-16(fp)
   25824:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   25828:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2582c:	e0bffd17 	ldw	r2,-12(fp)
   25830:	10000616 	blt	r2,zero,2584c <lseek+0x40>
   25834:	e0bffd17 	ldw	r2,-12(fp)
   25838:	10c00324 	muli	r3,r2,12
   2583c:	008000f4 	movhi	r2,3
   25840:	10997804 	addi	r2,r2,26080
   25844:	1885883a 	add	r2,r3,r2
   25848:	00000106 	br	25850 <lseek+0x44>
   2584c:	0005883a 	mov	r2,zero
   25850:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   25854:	e0bffe17 	ldw	r2,-8(fp)
   25858:	10001026 	beq	r2,zero,2589c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2585c:	e0bffe17 	ldw	r2,-8(fp)
   25860:	10800017 	ldw	r2,0(r2)
   25864:	10800717 	ldw	r2,28(r2)
   25868:	10000926 	beq	r2,zero,25890 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2586c:	e0bffe17 	ldw	r2,-8(fp)
   25870:	10800017 	ldw	r2,0(r2)
   25874:	10800717 	ldw	r2,28(r2)
   25878:	e1bffb17 	ldw	r6,-20(fp)
   2587c:	e17ffc17 	ldw	r5,-16(fp)
   25880:	e13ffe17 	ldw	r4,-8(fp)
   25884:	103ee83a 	callr	r2
   25888:	e0bfff15 	stw	r2,-4(fp)
   2588c:	00000506 	br	258a4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   25890:	00bfde84 	movi	r2,-134
   25894:	e0bfff15 	stw	r2,-4(fp)
   25898:	00000206 	br	258a4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2589c:	00bfebc4 	movi	r2,-81
   258a0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   258a4:	e0bfff17 	ldw	r2,-4(fp)
   258a8:	1000070e 	bge	r2,zero,258c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   258ac:	00257d00 	call	257d0 <alt_get_errno>
   258b0:	1007883a 	mov	r3,r2
   258b4:	e0bfff17 	ldw	r2,-4(fp)
   258b8:	0085c83a 	sub	r2,zero,r2
   258bc:	18800015 	stw	r2,0(r3)
    rc = -1;
   258c0:	00bfffc4 	movi	r2,-1
   258c4:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   258c8:	e0bfff17 	ldw	r2,-4(fp)
}
   258cc:	e037883a 	mov	sp,fp
   258d0:	dfc00117 	ldw	ra,4(sp)
   258d4:	df000017 	ldw	fp,0(sp)
   258d8:	dec00204 	addi	sp,sp,8
   258dc:	f800283a 	ret

000258e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   258e0:	defffd04 	addi	sp,sp,-12
   258e4:	dfc00215 	stw	ra,8(sp)
   258e8:	df000115 	stw	fp,4(sp)
   258ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   258f0:	0009883a 	mov	r4,zero
   258f4:	0025fa40 	call	25fa4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   258f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   258fc:	0025fdc0 	call	25fdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   25900:	018000f4 	movhi	r6,3
   25904:	318f1f04 	addi	r6,r6,15484
   25908:	014000f4 	movhi	r5,3
   2590c:	294f1f04 	addi	r5,r5,15484
   25910:	010000f4 	movhi	r4,3
   25914:	210f1f04 	addi	r4,r4,15484
   25918:	0030cc40 	call	30cc4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2591c:	00307dc0 	call	307dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   25920:	010000f4 	movhi	r4,3
   25924:	21020f04 	addi	r4,r4,2108
   25928:	00313980 	call	31398 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2592c:	d0a7b117 	ldw	r2,-24892(gp)
   25930:	d0e7b217 	ldw	r3,-24888(gp)
   25934:	d127b317 	ldw	r4,-24884(gp)
   25938:	200d883a 	mov	r6,r4
   2593c:	180b883a 	mov	r5,r3
   25940:	1009883a 	mov	r4,r2
   25944:	0011b840 	call	11b84 <main>
   25948:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2594c:	01000044 	movi	r4,1
   25950:	0024f500 	call	24f50 <close>
  exit (result);
   25954:	e13fff17 	ldw	r4,-4(fp)
   25958:	00313ac0 	call	313ac <exit>

0002595c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2595c:	defffe04 	addi	sp,sp,-8
   25960:	df000115 	stw	fp,4(sp)
   25964:	df000104 	addi	fp,sp,4
   25968:	e13fff15 	stw	r4,-4(fp)
}
   2596c:	0001883a 	nop
   25970:	e037883a 	mov	sp,fp
   25974:	df000017 	ldw	fp,0(sp)
   25978:	dec00104 	addi	sp,sp,4
   2597c:	f800283a 	ret

00025980 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   25980:	defffe04 	addi	sp,sp,-8
   25984:	df000115 	stw	fp,4(sp)
   25988:	df000104 	addi	fp,sp,4
   2598c:	e13fff15 	stw	r4,-4(fp)
}
   25990:	0001883a 	nop
   25994:	e037883a 	mov	sp,fp
   25998:	df000017 	ldw	fp,0(sp)
   2599c:	dec00104 	addi	sp,sp,4
   259a0:	f800283a 	ret

000259a4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   259a4:	defff204 	addi	sp,sp,-56
   259a8:	dfc00a15 	stw	ra,40(sp)
   259ac:	df000915 	stw	fp,36(sp)
   259b0:	df000904 	addi	fp,sp,36
   259b4:	e13ff715 	stw	r4,-36(fp)
   259b8:	e1400215 	stw	r5,8(fp)
   259bc:	e1800315 	stw	r6,12(fp)
   259c0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   259c4:	e0800204 	addi	r2,fp,8
   259c8:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   259cc:	e0bff717 	ldw	r2,-36(fp)
   259d0:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   259d4:	00006f06 	br	25b94 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   259d8:	e0bffec7 	ldb	r2,-5(fp)
   259dc:	10800960 	cmpeqi	r2,r2,37
   259e0:	1000041e 	bne	r2,zero,259f4 <alt_printf+0x50>
        {
            alt_putchar(c);
   259e4:	e0bffec7 	ldb	r2,-5(fp)
   259e8:	1009883a 	mov	r4,r2
   259ec:	0025bd00 	call	25bd0 <alt_putchar>
   259f0:	00006806 	br	25b94 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   259f4:	e0bfff17 	ldw	r2,-4(fp)
   259f8:	10c00044 	addi	r3,r2,1
   259fc:	e0ffff15 	stw	r3,-4(fp)
   25a00:	10800003 	ldbu	r2,0(r2)
   25a04:	e0bffec5 	stb	r2,-5(fp)
   25a08:	e0bffec7 	ldb	r2,-5(fp)
   25a0c:	10006926 	beq	r2,zero,25bb4 <alt_printf+0x210>
            {
                if (c == '%')
   25a10:	e0bffec7 	ldb	r2,-5(fp)
   25a14:	10800958 	cmpnei	r2,r2,37
   25a18:	1000041e 	bne	r2,zero,25a2c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   25a1c:	e0bffec7 	ldb	r2,-5(fp)
   25a20:	1009883a 	mov	r4,r2
   25a24:	0025bd00 	call	25bd0 <alt_putchar>
   25a28:	00005a06 	br	25b94 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   25a2c:	e0bffec7 	ldb	r2,-5(fp)
   25a30:	108018d8 	cmpnei	r2,r2,99
   25a34:	1000081e 	bne	r2,zero,25a58 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   25a38:	e0bff817 	ldw	r2,-32(fp)
   25a3c:	10c00104 	addi	r3,r2,4
   25a40:	e0fff815 	stw	r3,-32(fp)
   25a44:	10800017 	ldw	r2,0(r2)
   25a48:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   25a4c:	e13ff917 	ldw	r4,-28(fp)
   25a50:	0025bd00 	call	25bd0 <alt_putchar>
   25a54:	00004f06 	br	25b94 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   25a58:	e0bffec7 	ldb	r2,-5(fp)
   25a5c:	10801e18 	cmpnei	r2,r2,120
   25a60:	1000341e 	bne	r2,zero,25b34 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   25a64:	e0bff817 	ldw	r2,-32(fp)
   25a68:	10c00104 	addi	r3,r2,4
   25a6c:	e0fff815 	stw	r3,-32(fp)
   25a70:	10800017 	ldw	r2,0(r2)
   25a74:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   25a78:	e0bffb17 	ldw	r2,-20(fp)
   25a7c:	1000031e 	bne	r2,zero,25a8c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   25a80:	01000c04 	movi	r4,48
   25a84:	0025bd00 	call	25bd0 <alt_putchar>
                        continue;
   25a88:	00004206 	br	25b94 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   25a8c:	00800704 	movi	r2,28
   25a90:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   25a94:	00000306 	br	25aa4 <alt_printf+0x100>
                        digit_shift -= 4;
   25a98:	e0bffd17 	ldw	r2,-12(fp)
   25a9c:	10bfff04 	addi	r2,r2,-4
   25aa0:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   25aa4:	00c003c4 	movi	r3,15
   25aa8:	e0bffd17 	ldw	r2,-12(fp)
   25aac:	1884983a 	sll	r2,r3,r2
   25ab0:	1007883a 	mov	r3,r2
   25ab4:	e0bffb17 	ldw	r2,-20(fp)
   25ab8:	1884703a 	and	r2,r3,r2
   25abc:	103ff626 	beq	r2,zero,25a98 <__alt_mem_mcu_subsystem_ram_0+0x78005a98>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   25ac0:	00001906 	br	25b28 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   25ac4:	00c003c4 	movi	r3,15
   25ac8:	e0bffd17 	ldw	r2,-12(fp)
   25acc:	1884983a 	sll	r2,r3,r2
   25ad0:	1007883a 	mov	r3,r2
   25ad4:	e0bffb17 	ldw	r2,-20(fp)
   25ad8:	1886703a 	and	r3,r3,r2
   25adc:	e0bffd17 	ldw	r2,-12(fp)
   25ae0:	1884d83a 	srl	r2,r3,r2
   25ae4:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   25ae8:	e0bffa17 	ldw	r2,-24(fp)
   25aec:	108002a8 	cmpgeui	r2,r2,10
   25af0:	1000041e 	bne	r2,zero,25b04 <alt_printf+0x160>
                            c = '0' + digit;
   25af4:	e0bffa17 	ldw	r2,-24(fp)
   25af8:	10800c04 	addi	r2,r2,48
   25afc:	e0bffec5 	stb	r2,-5(fp)
   25b00:	00000306 	br	25b10 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   25b04:	e0bffa17 	ldw	r2,-24(fp)
   25b08:	108015c4 	addi	r2,r2,87
   25b0c:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   25b10:	e0bffec7 	ldb	r2,-5(fp)
   25b14:	1009883a 	mov	r4,r2
   25b18:	0025bd00 	call	25bd0 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   25b1c:	e0bffd17 	ldw	r2,-12(fp)
   25b20:	10bfff04 	addi	r2,r2,-4
   25b24:	e0bffd15 	stw	r2,-12(fp)
   25b28:	e0bffd17 	ldw	r2,-12(fp)
   25b2c:	103fe50e 	bge	r2,zero,25ac4 <__alt_mem_mcu_subsystem_ram_0+0x78005ac4>
   25b30:	00001806 	br	25b94 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   25b34:	e0bffec7 	ldb	r2,-5(fp)
   25b38:	10801cd8 	cmpnei	r2,r2,115
   25b3c:	1000151e 	bne	r2,zero,25b94 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   25b40:	e0bff817 	ldw	r2,-32(fp)
   25b44:	10c00104 	addi	r3,r2,4
   25b48:	e0fff815 	stw	r3,-32(fp)
   25b4c:	10800017 	ldw	r2,0(r2)
   25b50:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   25b54:	00000906 	br	25b7c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   25b58:	e0bffc17 	ldw	r2,-16(fp)
   25b5c:	10c00044 	addi	r3,r2,1
   25b60:	e0fffc15 	stw	r3,-16(fp)
   25b64:	10800003 	ldbu	r2,0(r2)
   25b68:	10803fcc 	andi	r2,r2,255
   25b6c:	1080201c 	xori	r2,r2,128
   25b70:	10bfe004 	addi	r2,r2,-128
   25b74:	1009883a 	mov	r4,r2
   25b78:	0025bd00 	call	25bd0 <alt_putchar>
                    while(*s)
   25b7c:	e0bffc17 	ldw	r2,-16(fp)
   25b80:	10800003 	ldbu	r2,0(r2)
   25b84:	10803fcc 	andi	r2,r2,255
   25b88:	1080201c 	xori	r2,r2,128
   25b8c:	10bfe004 	addi	r2,r2,-128
   25b90:	103ff11e 	bne	r2,zero,25b58 <__alt_mem_mcu_subsystem_ram_0+0x78005b58>
    while ((c = *w++) != 0)
   25b94:	e0bfff17 	ldw	r2,-4(fp)
   25b98:	10c00044 	addi	r3,r2,1
   25b9c:	e0ffff15 	stw	r3,-4(fp)
   25ba0:	10800003 	ldbu	r2,0(r2)
   25ba4:	e0bffec5 	stb	r2,-5(fp)
   25ba8:	e0bffec7 	ldb	r2,-5(fp)
   25bac:	103f8a1e 	bne	r2,zero,259d8 <__alt_mem_mcu_subsystem_ram_0+0x780059d8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   25bb0:	00000106 	br	25bb8 <alt_printf+0x214>
                break;
   25bb4:	0001883a 	nop
}
   25bb8:	0001883a 	nop
   25bbc:	e037883a 	mov	sp,fp
   25bc0:	dfc00117 	ldw	ra,4(sp)
   25bc4:	df000017 	ldw	fp,0(sp)
   25bc8:	dec00504 	addi	sp,sp,20
   25bcc:	f800283a 	ret

00025bd0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   25bd0:	defffd04 	addi	sp,sp,-12
   25bd4:	dfc00215 	stw	ra,8(sp)
   25bd8:	df000115 	stw	fp,4(sp)
   25bdc:	df000104 	addi	fp,sp,4
   25be0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   25be4:	e13fff17 	ldw	r4,-4(fp)
   25be8:	001638c0 	call	1638c <putchar>
#endif
#endif
}
   25bec:	e037883a 	mov	sp,fp
   25bf0:	dfc00117 	ldw	ra,4(sp)
   25bf4:	df000017 	ldw	fp,0(sp)
   25bf8:	dec00204 	addi	sp,sp,8
   25bfc:	f800283a 	ret

00025c00 <alt_get_errno>:
{
   25c00:	defffe04 	addi	sp,sp,-8
   25c04:	dfc00115 	stw	ra,4(sp)
   25c08:	df000015 	stw	fp,0(sp)
   25c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c10:	d0a00c17 	ldw	r2,-32720(gp)
   25c14:	10000326 	beq	r2,zero,25c24 <alt_get_errno+0x24>
   25c18:	d0a00c17 	ldw	r2,-32720(gp)
   25c1c:	103ee83a 	callr	r2
   25c20:	00000106 	br	25c28 <alt_get_errno+0x28>
   25c24:	d0a7ae04 	addi	r2,gp,-24904
}
   25c28:	e037883a 	mov	sp,fp
   25c2c:	dfc00117 	ldw	ra,4(sp)
   25c30:	df000017 	ldw	fp,0(sp)
   25c34:	dec00204 	addi	sp,sp,8
   25c38:	f800283a 	ret

00025c3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   25c3c:	defff904 	addi	sp,sp,-28
   25c40:	dfc00615 	stw	ra,24(sp)
   25c44:	df000515 	stw	fp,20(sp)
   25c48:	df000504 	addi	fp,sp,20
   25c4c:	e13ffd15 	stw	r4,-12(fp)
   25c50:	e17ffc15 	stw	r5,-16(fp)
   25c54:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25c58:	e0bffd17 	ldw	r2,-12(fp)
   25c5c:	10000616 	blt	r2,zero,25c78 <read+0x3c>
   25c60:	e0bffd17 	ldw	r2,-12(fp)
   25c64:	10c00324 	muli	r3,r2,12
   25c68:	008000f4 	movhi	r2,3
   25c6c:	10997804 	addi	r2,r2,26080
   25c70:	1885883a 	add	r2,r3,r2
   25c74:	00000106 	br	25c7c <read+0x40>
   25c78:	0005883a 	mov	r2,zero
   25c7c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   25c80:	e0bfff17 	ldw	r2,-4(fp)
   25c84:	10002226 	beq	r2,zero,25d10 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   25c88:	e0bfff17 	ldw	r2,-4(fp)
   25c8c:	10800217 	ldw	r2,8(r2)
   25c90:	108000cc 	andi	r2,r2,3
   25c94:	10800060 	cmpeqi	r2,r2,1
   25c98:	1000181e 	bne	r2,zero,25cfc <read+0xc0>
        (fd->dev->read))
   25c9c:	e0bfff17 	ldw	r2,-4(fp)
   25ca0:	10800017 	ldw	r2,0(r2)
   25ca4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   25ca8:	10001426 	beq	r2,zero,25cfc <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   25cac:	e0bfff17 	ldw	r2,-4(fp)
   25cb0:	10800017 	ldw	r2,0(r2)
   25cb4:	10800517 	ldw	r2,20(r2)
   25cb8:	e0fffb17 	ldw	r3,-20(fp)
   25cbc:	180d883a 	mov	r6,r3
   25cc0:	e17ffc17 	ldw	r5,-16(fp)
   25cc4:	e13fff17 	ldw	r4,-4(fp)
   25cc8:	103ee83a 	callr	r2
   25ccc:	e0bffe15 	stw	r2,-8(fp)
   25cd0:	e0bffe17 	ldw	r2,-8(fp)
   25cd4:	1000070e 	bge	r2,zero,25cf4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   25cd8:	0025c000 	call	25c00 <alt_get_errno>
   25cdc:	1007883a 	mov	r3,r2
   25ce0:	e0bffe17 	ldw	r2,-8(fp)
   25ce4:	0085c83a 	sub	r2,zero,r2
   25ce8:	18800015 	stw	r2,0(r3)
          return -1;
   25cec:	00bfffc4 	movi	r2,-1
   25cf0:	00000c06 	br	25d24 <read+0xe8>
        }
        return rval;
   25cf4:	e0bffe17 	ldw	r2,-8(fp)
   25cf8:	00000a06 	br	25d24 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   25cfc:	0025c000 	call	25c00 <alt_get_errno>
   25d00:	1007883a 	mov	r3,r2
   25d04:	00800344 	movi	r2,13
   25d08:	18800015 	stw	r2,0(r3)
   25d0c:	00000406 	br	25d20 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   25d10:	0025c000 	call	25c00 <alt_get_errno>
   25d14:	1007883a 	mov	r3,r2
   25d18:	00801444 	movi	r2,81
   25d1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   25d20:	00bfffc4 	movi	r2,-1
}
   25d24:	e037883a 	mov	sp,fp
   25d28:	dfc00117 	ldw	ra,4(sp)
   25d2c:	df000017 	ldw	fp,0(sp)
   25d30:	dec00204 	addi	sp,sp,8
   25d34:	f800283a 	ret

00025d38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   25d38:	defffe04 	addi	sp,sp,-8
   25d3c:	df000115 	stw	fp,4(sp)
   25d40:	df000104 	addi	fp,sp,4
   25d44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   25d48:	e0bfff17 	ldw	r2,-4(fp)
   25d4c:	108000d0 	cmplti	r2,r2,3
   25d50:	10000a1e 	bne	r2,zero,25d7c <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   25d54:	e0bfff17 	ldw	r2,-4(fp)
   25d58:	10c00324 	muli	r3,r2,12
   25d5c:	008000f4 	movhi	r2,3
   25d60:	1885883a 	add	r2,r3,r2
   25d64:	10197a15 	stw	zero,26088(r2)
    alt_fd_list[fd].dev      = 0;
   25d68:	e0bfff17 	ldw	r2,-4(fp)
   25d6c:	10c00324 	muli	r3,r2,12
   25d70:	008000f4 	movhi	r2,3
   25d74:	1885883a 	add	r2,r3,r2
   25d78:	10197815 	stw	zero,26080(r2)
  }
}
   25d7c:	0001883a 	nop
   25d80:	e037883a 	mov	sp,fp
   25d84:	df000017 	ldw	fp,0(sp)
   25d88:	dec00104 	addi	sp,sp,4
   25d8c:	f800283a 	ret

00025d90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   25d90:	defff904 	addi	sp,sp,-28
   25d94:	df000615 	stw	fp,24(sp)
   25d98:	df000604 	addi	fp,sp,24
   25d9c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   25da0:	0005303a 	rdctl	r2,status
   25da4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25da8:	e0fffd17 	ldw	r3,-12(fp)
   25dac:	00bfff84 	movi	r2,-2
   25db0:	1884703a 	and	r2,r3,r2
   25db4:	1001703a 	wrctl	status,r2
  return context;
   25db8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   25dbc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   25dc0:	d0a00d17 	ldw	r2,-32716(gp)
   25dc4:	10c000c4 	addi	r3,r2,3
   25dc8:	00bfff04 	movi	r2,-4
   25dcc:	1884703a 	and	r2,r3,r2
   25dd0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   25dd4:	d0e00d17 	ldw	r3,-32716(gp)
   25dd8:	e0bffa17 	ldw	r2,-24(fp)
   25ddc:	1887883a 	add	r3,r3,r2
   25de0:	009fffb4 	movhi	r2,32766
   25de4:	10800004 	addi	r2,r2,0
   25de8:	10c0062e 	bgeu	r2,r3,25e04 <sbrk+0x74>
   25dec:	e0bfff17 	ldw	r2,-4(fp)
   25df0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   25df4:	e0bffc17 	ldw	r2,-16(fp)
   25df8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   25dfc:	00bfffc4 	movi	r2,-1
   25e00:	00000b06 	br	25e30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   25e04:	d0a00d17 	ldw	r2,-32716(gp)
   25e08:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   25e0c:	d0e00d17 	ldw	r3,-32716(gp)
   25e10:	e0bffa17 	ldw	r2,-24(fp)
   25e14:	1885883a 	add	r2,r3,r2
   25e18:	d0a00d15 	stw	r2,-32716(gp)
   25e1c:	e0bfff17 	ldw	r2,-4(fp)
   25e20:	e0bffb15 	stw	r2,-20(fp)
   25e24:	e0bffb17 	ldw	r2,-20(fp)
   25e28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   25e2c:	e0bffe17 	ldw	r2,-8(fp)
} 
   25e30:	e037883a 	mov	sp,fp
   25e34:	df000017 	ldw	fp,0(sp)
   25e38:	dec00104 	addi	sp,sp,4
   25e3c:	f800283a 	ret

00025e40 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   25e40:	defffd04 	addi	sp,sp,-12
   25e44:	dfc00215 	stw	ra,8(sp)
   25e48:	df000115 	stw	fp,4(sp)
   25e4c:	df000104 	addi	fp,sp,4
   25e50:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   25e54:	e13fff17 	ldw	r4,-4(fp)
   25e58:	003063c0 	call	3063c <alt_busy_sleep>
}
   25e5c:	e037883a 	mov	sp,fp
   25e60:	dfc00117 	ldw	ra,4(sp)
   25e64:	df000017 	ldw	fp,0(sp)
   25e68:	dec00204 	addi	sp,sp,8
   25e6c:	f800283a 	ret

00025e70 <alt_get_errno>:
{
   25e70:	defffe04 	addi	sp,sp,-8
   25e74:	dfc00115 	stw	ra,4(sp)
   25e78:	df000015 	stw	fp,0(sp)
   25e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25e80:	d0a00c17 	ldw	r2,-32720(gp)
   25e84:	10000326 	beq	r2,zero,25e94 <alt_get_errno+0x24>
   25e88:	d0a00c17 	ldw	r2,-32720(gp)
   25e8c:	103ee83a 	callr	r2
   25e90:	00000106 	br	25e98 <alt_get_errno+0x28>
   25e94:	d0a7ae04 	addi	r2,gp,-24904
}
   25e98:	e037883a 	mov	sp,fp
   25e9c:	dfc00117 	ldw	ra,4(sp)
   25ea0:	df000017 	ldw	fp,0(sp)
   25ea4:	dec00204 	addi	sp,sp,8
   25ea8:	f800283a 	ret

00025eac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   25eac:	defff904 	addi	sp,sp,-28
   25eb0:	dfc00615 	stw	ra,24(sp)
   25eb4:	df000515 	stw	fp,20(sp)
   25eb8:	df000504 	addi	fp,sp,20
   25ebc:	e13ffd15 	stw	r4,-12(fp)
   25ec0:	e17ffc15 	stw	r5,-16(fp)
   25ec4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25ec8:	e0bffd17 	ldw	r2,-12(fp)
   25ecc:	10000616 	blt	r2,zero,25ee8 <write+0x3c>
   25ed0:	e0bffd17 	ldw	r2,-12(fp)
   25ed4:	10c00324 	muli	r3,r2,12
   25ed8:	008000f4 	movhi	r2,3
   25edc:	10997804 	addi	r2,r2,26080
   25ee0:	1885883a 	add	r2,r3,r2
   25ee4:	00000106 	br	25eec <write+0x40>
   25ee8:	0005883a 	mov	r2,zero
   25eec:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   25ef0:	e0bfff17 	ldw	r2,-4(fp)
   25ef4:	10002126 	beq	r2,zero,25f7c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   25ef8:	e0bfff17 	ldw	r2,-4(fp)
   25efc:	10800217 	ldw	r2,8(r2)
   25f00:	108000cc 	andi	r2,r2,3
   25f04:	10001826 	beq	r2,zero,25f68 <write+0xbc>
   25f08:	e0bfff17 	ldw	r2,-4(fp)
   25f0c:	10800017 	ldw	r2,0(r2)
   25f10:	10800617 	ldw	r2,24(r2)
   25f14:	10001426 	beq	r2,zero,25f68 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   25f18:	e0bfff17 	ldw	r2,-4(fp)
   25f1c:	10800017 	ldw	r2,0(r2)
   25f20:	10800617 	ldw	r2,24(r2)
   25f24:	e0fffb17 	ldw	r3,-20(fp)
   25f28:	180d883a 	mov	r6,r3
   25f2c:	e17ffc17 	ldw	r5,-16(fp)
   25f30:	e13fff17 	ldw	r4,-4(fp)
   25f34:	103ee83a 	callr	r2
   25f38:	e0bffe15 	stw	r2,-8(fp)
   25f3c:	e0bffe17 	ldw	r2,-8(fp)
   25f40:	1000070e 	bge	r2,zero,25f60 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   25f44:	0025e700 	call	25e70 <alt_get_errno>
   25f48:	1007883a 	mov	r3,r2
   25f4c:	e0bffe17 	ldw	r2,-8(fp)
   25f50:	0085c83a 	sub	r2,zero,r2
   25f54:	18800015 	stw	r2,0(r3)
        return -1;
   25f58:	00bfffc4 	movi	r2,-1
   25f5c:	00000c06 	br	25f90 <write+0xe4>
      }
      return rval;
   25f60:	e0bffe17 	ldw	r2,-8(fp)
   25f64:	00000a06 	br	25f90 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   25f68:	0025e700 	call	25e70 <alt_get_errno>
   25f6c:	1007883a 	mov	r3,r2
   25f70:	00800344 	movi	r2,13
   25f74:	18800015 	stw	r2,0(r3)
   25f78:	00000406 	br	25f8c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   25f7c:	0025e700 	call	25e70 <alt_get_errno>
   25f80:	1007883a 	mov	r3,r2
   25f84:	00801444 	movi	r2,81
   25f88:	18800015 	stw	r2,0(r3)
  }
  return -1;
   25f8c:	00bfffc4 	movi	r2,-1
}
   25f90:	e037883a 	mov	sp,fp
   25f94:	dfc00117 	ldw	ra,4(sp)
   25f98:	df000017 	ldw	fp,0(sp)
   25f9c:	dec00204 	addi	sp,sp,8
   25fa0:	f800283a 	ret

00025fa4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   25fa4:	defffd04 	addi	sp,sp,-12
   25fa8:	dfc00215 	stw	ra,8(sp)
   25fac:	df000115 	stw	fp,4(sp)
   25fb0:	df000104 	addi	fp,sp,4
   25fb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MCU_SUBSYSTEM_CPU_0, mcu_subsystem_cpu_0);
   25fb8:	00311500 	call	31150 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   25fbc:	00800044 	movi	r2,1
   25fc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   25fc4:	0001883a 	nop
   25fc8:	e037883a 	mov	sp,fp
   25fcc:	dfc00117 	ldw	ra,4(sp)
   25fd0:	df000017 	ldw	fp,0(sp)
   25fd4:	dec00204 	addi	sp,sp,8
   25fd8:	f800283a 	ret

00025fdc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   25fdc:	defffe04 	addi	sp,sp,-8
   25fe0:	dfc00115 	stw	ra,4(sp)
   25fe4:	df000015 	stw	fp,0(sp)
   25fe8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   25fec:	01c0fa04 	movi	r7,1000
   25ff0:	01800084 	movi	r6,2
   25ff4:	000b883a 	mov	r5,zero
   25ff8:	01220234 	movhi	r4,34824
   25ffc:	21260004 	addi	r4,r4,-26624
   26000:	00287b80 	call	287b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   26004:	00a20234 	movhi	r2,34824
   26008:	10a61004 	addi	r2,r2,-26560
   2600c:	d0a7b415 	stw	r2,-24880(gp)
   26010:	0081dcf4 	movhi	r2,1907
   26014:	10965004 	addi	r2,r2,22848
   26018:	d0a7b515 	stw	r2,-24876(gp)
    ALTERA_AVALON_I2C_INIT ( I2C, i2c);
   2601c:	010000f4 	movhi	r4,3
   26020:	2119d804 	addi	r4,r4,26464
   26024:	002630c0 	call	2630c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   26028:	01800044 	movi	r6,1
   2602c:	000b883a 	mov	r5,zero
   26030:	010000f4 	movhi	r4,3
   26034:	2119f004 	addi	r4,r4,26560
   26038:	0027e300 	call	27e30 <altera_avalon_jtag_uart_init>
   2603c:	010000f4 	movhi	r4,3
   26040:	2119e604 	addi	r4,r4,26520
   26044:	00250c40 	call	250c4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   26048:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( ETHERNET_MAC, ethernet_mac);
   2604c:	0001883a 	nop
    ALTERA_GENERIC_QUAD_SPI_CONTROLLER2_INIT ( QSPI_CONTROLLER2_0, qspi_controller2_0);
   26050:	010000f4 	movhi	r4,3
   26054:	211dfe04 	addi	r4,r4,30712
   26058:	002e1b80 	call	2e1b8 <altera_qspi_controller2_init>
    ALTERA_MSGDMA_INIT ( ETHERNET_DMA_RX, ethernet_dma_rx);
   2605c:	008000f4 	movhi	r2,3
   26060:	10de5417 	ldw	r3,31056(r2)
   26064:	008000f4 	movhi	r2,3
   26068:	109e5517 	ldw	r2,31060(r2)
   2606c:	100d883a 	mov	r6,r2
   26070:	180b883a 	mov	r5,r3
   26074:	010000f4 	movhi	r4,3
   26078:	211e4d04 	addi	r4,r4,31028
   2607c:	00302380 	call	30238 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( ETHERNET_DMA_TX, ethernet_dma_tx);
   26080:	008000f4 	movhi	r2,3
   26084:	10de3c17 	ldw	r3,30960(r2)
   26088:	008000f4 	movhi	r2,3
   2608c:	109e3d17 	ldw	r2,30964(r2)
   26090:	100d883a 	mov	r6,r2
   26094:	180b883a 	mov	r5,r3
   26098:	010000f4 	movhi	r4,3
   2609c:	211e3504 	addi	r4,r4,30932
   260a0:	00302380 	call	30238 <alt_msgdma_init>
}
   260a4:	0001883a 	nop
   260a8:	e037883a 	mov	sp,fp
   260ac:	dfc00117 	ldw	ra,4(sp)
   260b0:	df000017 	ldw	fp,0(sp)
   260b4:	dec00204 	addi	sp,sp,8
   260b8:	f800283a 	ret

000260bc <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   260bc:	defff904 	addi	sp,sp,-28
   260c0:	dfc00615 	stw	ra,24(sp)
   260c4:	df000515 	stw	fp,20(sp)
   260c8:	df000504 	addi	fp,sp,20
   260cc:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
   260d0:	008000b4 	movhi	r2,2
   260d4:	10a1a804 	addi	r2,r2,-31072
   260d8:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   260dc:	e0bffb17 	ldw	r2,-20(fp)
   260e0:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   260e4:	e0bffe17 	ldw	r2,-8(fp)
   260e8:	10800717 	ldw	r2,28(r2)
   260ec:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   260f0:	e0bffd17 	ldw	r2,-12(fp)
   260f4:	10800217 	ldw	r2,8(r2)
   260f8:	10800098 	cmpnei	r2,r2,2
   260fc:	1000251e 	bne	r2,zero,26194 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   26100:	e0bffd17 	ldw	r2,-12(fp)
   26104:	10c00017 	ldw	r3,0(r2)
   26108:	e0bffd17 	ldw	r2,-12(fp)
   2610c:	10800117 	ldw	r2,4(r2)
   26110:	e13ffc04 	addi	r4,fp,-16
   26114:	200f883a 	mov	r7,r4
   26118:	100d883a 	mov	r6,r2
   2611c:	180b883a 	mov	r5,r3
   26120:	e13ffe17 	ldw	r4,-8(fp)
   26124:	002686c0 	call	2686c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   26128:	e0bffd17 	ldw	r2,-12(fp)
   2612c:	10c00117 	ldw	r3,4(r2)
   26130:	e0bffc17 	ldw	r2,-16(fp)
   26134:	1887c83a 	sub	r3,r3,r2
   26138:	e0bffd17 	ldw	r2,-12(fp)
   2613c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   26140:	e0bffd17 	ldw	r2,-12(fp)
   26144:	10c00017 	ldw	r3,0(r2)
   26148:	e0bffc17 	ldw	r2,-16(fp)
   2614c:	1887883a 	add	r3,r3,r2
   26150:	e0bffd17 	ldw	r2,-12(fp)
   26154:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   26158:	e0bffd17 	ldw	r2,-12(fp)
   2615c:	10800117 	ldw	r2,4(r2)
   26160:	10000c26 	beq	r2,zero,26194 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   26164:	01400704 	movi	r5,28
   26168:	e13ffe17 	ldw	r4,-8(fp)
   2616c:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   26170:	01400084 	movi	r5,2
   26174:	e13ffe17 	ldw	r4,-8(fp)
   26178:	0027ac00 	call	27ac0 <alt_avalon_i2c_int_enable>
   2617c:	00000e06 	br	261b8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   26180:	e0bfff17 	ldw	r2,-4(fp)
   26184:	10bfffc4 	addi	r2,r2,-1
   26188:	e0bfff15 	stw	r2,-4(fp)
   2618c:	e0bfff17 	ldw	r2,-4(fp)
   26190:	10000426 	beq	r2,zero,261a4 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   26194:	e13ffe17 	ldw	r4,-8(fp)
   26198:	00268280 	call	26828 <alt_avalon_i2c_is_busy>
   2619c:	103ff81e 	bne	r2,zero,26180 <__alt_mem_mcu_subsystem_ram_0+0x78006180>
   261a0:	00000106 	br	261a8 <optional_irq_callback+0xec>
      {
         break;
   261a4:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   261a8:	e13ffe17 	ldw	r4,-8(fp)
   261ac:	00264d00 	call	264d0 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   261b0:	e0bffd17 	ldw	r2,-12(fp)
   261b4:	10000215 	stw	zero,8(r2)
}
   261b8:	e037883a 	mov	sp,fp
   261bc:	dfc00117 	ldw	ra,4(sp)
   261c0:	df000017 	ldw	fp,0(sp)
   261c4:	dec00204 	addi	sp,sp,8
   261c8:	f800283a 	ret

000261cc <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   261cc:	defffc04 	addi	sp,sp,-16
   261d0:	dfc00315 	stw	ra,12(sp)
   261d4:	df000215 	stw	fp,8(sp)
   261d8:	df000204 	addi	fp,sp,8
   261dc:	e13fff15 	stw	r4,-4(fp)
   261e0:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
   261e4:	e0bffe17 	ldw	r2,-8(fp)
   261e8:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   261ec:	e1fffe17 	ldw	r7,-8(fp)
   261f0:	000d883a 	mov	r6,zero
   261f4:	014000b4 	movhi	r5,2
   261f8:	29582f04 	addi	r5,r5,24764
   261fc:	e13fff17 	ldw	r4,-4(fp)
   26200:	00262b80 	call	262b8 <alt_avalon_i2c_register_callback>
}
   26204:	0001883a 	nop
   26208:	e037883a 	mov	sp,fp
   2620c:	dfc00117 	ldw	ra,4(sp)
   26210:	df000017 	ldw	fp,0(sp)
   26214:	dec00204 	addi	sp,sp,8
   26218:	f800283a 	ret

0002621c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   2621c:	defff904 	addi	sp,sp,-28
   26220:	dfc00615 	stw	ra,24(sp)
   26224:	df000515 	stw	fp,20(sp)
   26228:	df000504 	addi	fp,sp,20
   2622c:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   26230:	e0bffb17 	ldw	r2,-20(fp)
   26234:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   26238:	014007c4 	movi	r5,31
   2623c:	e13fff17 	ldw	r4,-4(fp)
   26240:	0027a540 	call	27a54 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   26244:	01400704 	movi	r5,28
   26248:	e13fff17 	ldw	r4,-4(fp)
   2624c:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   26250:	e0bfff17 	ldw	r2,-4(fp)
   26254:	10800617 	ldw	r2,24(r2)
   26258:	10001126 	beq	r2,zero,262a0 <alt_avalon_i2c_irq+0x84>
  NIOS2_READ_STATUS (context);
   2625c:	0005303a 	rdctl	r2,status
   26260:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26264:	e0fffc17 	ldw	r3,-16(fp)
   26268:	00bfff84 	movi	r2,-2
   2626c:	1884703a 	and	r2,r3,r2
   26270:	1001703a 	wrctl	status,r2
  return context;
   26274:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
   26278:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
   2627c:	e0bfff17 	ldw	r2,-4(fp)
   26280:	10800617 	ldw	r2,24(r2)
   26284:	e13fff17 	ldw	r4,-4(fp)
   26288:	103ee83a 	callr	r2
   2628c:	e0bffe17 	ldw	r2,-8(fp)
   26290:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   26294:	e0bffd17 	ldw	r2,-12(fp)
   26298:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   2629c:	0001883a 	nop
   262a0:	0001883a 	nop
}
   262a4:	e037883a 	mov	sp,fp
   262a8:	dfc00117 	ldw	ra,4(sp)
   262ac:	df000017 	ldw	fp,0(sp)
   262b0:	dec00204 	addi	sp,sp,8
   262b4:	f800283a 	ret

000262b8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   262b8:	defffb04 	addi	sp,sp,-20
   262bc:	df000415 	stw	fp,16(sp)
   262c0:	df000404 	addi	fp,sp,16
   262c4:	e13fff15 	stw	r4,-4(fp)
   262c8:	e17ffe15 	stw	r5,-8(fp)
   262cc:	e1bffd15 	stw	r6,-12(fp)
   262d0:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
   262d4:	e0bfff17 	ldw	r2,-4(fp)
   262d8:	e0fffe17 	ldw	r3,-8(fp)
   262dc:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   262e0:	e0bfff17 	ldw	r2,-4(fp)
   262e4:	e0fffc17 	ldw	r3,-16(fp)
   262e8:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   262ec:	e0bfff17 	ldw	r2,-4(fp)
   262f0:	e0fffd17 	ldw	r3,-12(fp)
   262f4:	10c00815 	stw	r3,32(r2)

    return ;
   262f8:	0001883a 	nop
}
   262fc:	e037883a 	mov	sp,fp
   26300:	df000017 	ldw	fp,0(sp)
   26304:	dec00104 	addi	sp,sp,4
   26308:	f800283a 	ret

0002630c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   2630c:	defff704 	addi	sp,sp,-36
   26310:	dfc00815 	stw	ra,32(sp)
   26314:	df000715 	stw	fp,28(sp)
   26318:	df000704 	addi	fp,sp,28
   2631c:	e13ffa15 	stw	r4,-24(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   26320:	e13ffa17 	ldw	r4,-24(fp)
   26324:	00264d00 	call	264d0 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   26328:	014007c4 	movi	r5,31
   2632c:	e13ffa17 	ldw	r4,-24(fp)
   26330:	0027a540 	call	27a54 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   26334:	01400704 	movi	r5,28
   26338:	e13ffa17 	ldw	r4,-24(fp)
   2633c:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   26340:	014000c4 	movi	r5,3
   26344:	e13ffa17 	ldw	r4,-24(fp)
   26348:	0027c680 	call	27c68 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   2634c:	014000c4 	movi	r5,3
   26350:	e13ffa17 	ldw	r4,-24(fp)
   26354:	0027bb80 	call	27bb8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   26358:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   2635c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   26360:	e0bffb04 	addi	r2,fp,-20
   26364:	018000b4 	movhi	r6,2
   26368:	31a1a804 	addi	r6,r6,-31072
   2636c:	100b883a 	mov	r5,r2
   26370:	e13ffa17 	ldw	r4,-24(fp)
   26374:	002672c0 	call	2672c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   26378:	e0bffb04 	addi	r2,fp,-20
   2637c:	100b883a 	mov	r5,r2
   26380:	e13ffa17 	ldw	r4,-24(fp)
   26384:	00265cc0 	call	265cc <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   26388:	d1600e04 	addi	r5,gp,-32712
   2638c:	e13ffa17 	ldw	r4,-24(fp)
   26390:	00251340 	call	25134 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   26394:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   26398:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
   2639c:	e0bfff17 	ldw	r2,-4(fp)
   263a0:	10000c1e 	bne	r2,zero,263d4 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   263a4:	e0bffa17 	ldw	r2,-24(fp)
   263a8:	10c00417 	ldw	r3,16(r2)
   263ac:	e0bffa17 	ldw	r2,-24(fp)
   263b0:	10800517 	ldw	r2,20(r2)
   263b4:	d8000015 	stw	zero,0(sp)
   263b8:	e1fffa17 	ldw	r7,-24(fp)
   263bc:	018000b4 	movhi	r6,2
   263c0:	31988704 	addi	r6,r6,25116
   263c4:	100b883a 	mov	r5,r2
   263c8:	1809883a 	mov	r4,r3
   263cc:	00253400 	call	25340 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   263d0:	00000406 	br	263e4 <alt_avalon_i2c_init+0xd8>
        alt_printf("failed to create semaphores\n");
   263d4:	010000f4 	movhi	r4,3
   263d8:	210f4704 	addi	r4,r4,15644
   263dc:	00259a40 	call	259a4 <alt_printf>
    return;
   263e0:	0001883a 	nop

}
   263e4:	e037883a 	mov	sp,fp
   263e8:	dfc00117 	ldw	ra,4(sp)
   263ec:	df000017 	ldw	fp,0(sp)
   263f0:	dec00204 	addi	sp,sp,8
   263f4:	f800283a 	ret

000263f8 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   263f8:	defffc04 	addi	sp,sp,-16
   263fc:	dfc00315 	stw	ra,12(sp)
   26400:	df000215 	stw	fp,8(sp)
   26404:	df000204 	addi	fp,sp,8
   26408:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   2640c:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   26410:	d1600e04 	addi	r5,gp,-32712
   26414:	e13ffe17 	ldw	r4,-8(fp)
   26418:	003089c0 	call	3089c <alt_find_dev>
   2641c:	e0bfff15 	stw	r2,-4(fp)

    return dev;
   26420:	e0bfff17 	ldw	r2,-4(fp)
}
   26424:	e037883a 	mov	sp,fp
   26428:	dfc00117 	ldw	ra,4(sp)
   2642c:	df000017 	ldw	fp,0(sp)
   26430:	dec00204 	addi	sp,sp,8
   26434:	f800283a 	ret

00026438 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   26438:	defffc04 	addi	sp,sp,-16
   2643c:	df000315 	stw	fp,12(sp)
   26440:	df000304 	addi	fp,sp,12
   26444:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   26448:	e0bffd17 	ldw	r2,-12(fp)
   2644c:	10800717 	ldw	r2,28(r2)
   26450:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   26454:	e0bffd17 	ldw	r2,-12(fp)
   26458:	10800317 	ldw	r2,12(r2)
   2645c:	10800204 	addi	r2,r2,8
   26460:	10800037 	ldwio	r2,0(r2)
   26464:	1080004c 	andi	r2,r2,1
   26468:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   2646c:	e0bffe17 	ldw	r2,-8(fp)
   26470:	10000226 	beq	r2,zero,2647c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   26474:	00bffe44 	movi	r2,-7
   26478:	00001106 	br	264c0 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   2647c:	e0bffd17 	ldw	r2,-12(fp)
   26480:	10c00617 	ldw	r3,24(r2)
   26484:	008000b4 	movhi	r2,2
   26488:	10982f04 	addi	r2,r2,24764
   2648c:	1880021e 	bne	r3,r2,26498 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   26490:	e0bfff17 	ldw	r2,-4(fp)
   26494:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   26498:	e0bffd17 	ldw	r2,-12(fp)
   2649c:	10800317 	ldw	r2,12(r2)
   264a0:	10800204 	addi	r2,r2,8
   264a4:	e0fffd17 	ldw	r3,-12(fp)
   264a8:	18c00317 	ldw	r3,12(r3)
   264ac:	18c00204 	addi	r3,r3,8
   264b0:	18c00037 	ldwio	r3,0(r3)
   264b4:	18c00054 	ori	r3,r3,1
   264b8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   264bc:	0005883a 	mov	r2,zero
}
   264c0:	e037883a 	mov	sp,fp
   264c4:	df000017 	ldw	fp,0(sp)
   264c8:	dec00104 	addi	sp,sp,4
   264cc:	f800283a 	ret

000264d0 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   264d0:	defffe04 	addi	sp,sp,-8
   264d4:	df000115 	stw	fp,4(sp)
   264d8:	df000104 	addi	fp,sp,4
   264dc:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   264e0:	e0bfff17 	ldw	r2,-4(fp)
   264e4:	10800317 	ldw	r2,12(r2)
   264e8:	10800204 	addi	r2,r2,8
   264ec:	e0ffff17 	ldw	r3,-4(fp)
   264f0:	18c00317 	ldw	r3,12(r3)
   264f4:	18c00204 	addi	r3,r3,8
   264f8:	19000037 	ldwio	r4,0(r3)
   264fc:	00ffff84 	movi	r3,-2
   26500:	20c6703a 	and	r3,r4,r3
   26504:	10c00035 	stwio	r3,0(r2)

}
   26508:	0001883a 	nop
   2650c:	e037883a 	mov	sp,fp
   26510:	df000017 	ldw	fp,0(sp)
   26514:	dec00104 	addi	sp,sp,4
   26518:	f800283a 	ret

0002651c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2651c:	defffd04 	addi	sp,sp,-12
   26520:	df000215 	stw	fp,8(sp)
   26524:	df000204 	addi	fp,sp,8
   26528:	e13fff15 	stw	r4,-4(fp)
   2652c:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   26530:	e0bfff17 	ldw	r2,-4(fp)
   26534:	10c00d17 	ldw	r3,52(r2)
   26538:	e0bffe17 	ldw	r2,-8(fp)
   2653c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   26540:	e0bfff17 	ldw	r2,-4(fp)
   26544:	10800317 	ldw	r2,12(r2)
   26548:	10800204 	addi	r2,r2,8
   2654c:	10800037 	ldwio	r2,0(r2)
   26550:	1005d07a 	srai	r2,r2,1
   26554:	1080004c 	andi	r2,r2,1
   26558:	1007883a 	mov	r3,r2
   2655c:	e0bffe17 	ldw	r2,-8(fp)
   26560:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   26564:	e0bfff17 	ldw	r2,-4(fp)
   26568:	10800317 	ldw	r2,12(r2)
   2656c:	10800904 	addi	r2,r2,36
   26570:	10800037 	ldwio	r2,0(r2)
   26574:	1007883a 	mov	r3,r2
   26578:	e0bffe17 	ldw	r2,-8(fp)
   2657c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   26580:	e0bfff17 	ldw	r2,-4(fp)
   26584:	10800317 	ldw	r2,12(r2)
   26588:	10800804 	addi	r2,r2,32
   2658c:	10800037 	ldwio	r2,0(r2)
   26590:	1007883a 	mov	r3,r2
   26594:	e0bffe17 	ldw	r2,-8(fp)
   26598:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   2659c:	e0bfff17 	ldw	r2,-4(fp)
   265a0:	10800317 	ldw	r2,12(r2)
   265a4:	10800a04 	addi	r2,r2,40
   265a8:	10800037 	ldwio	r2,0(r2)
   265ac:	1007883a 	mov	r3,r2
   265b0:	e0bffe17 	ldw	r2,-8(fp)
   265b4:	10c0030d 	sth	r3,12(r2)
}
   265b8:	0001883a 	nop
   265bc:	e037883a 	mov	sp,fp
   265c0:	df000017 	ldw	fp,0(sp)
   265c4:	dec00104 	addi	sp,sp,4
   265c8:	f800283a 	ret

000265cc <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   265cc:	defffd04 	addi	sp,sp,-12
   265d0:	df000215 	stw	fp,8(sp)
   265d4:	df000204 	addi	fp,sp,8
   265d8:	e13fff15 	stw	r4,-4(fp)
   265dc:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   265e0:	e0bffe17 	ldw	r2,-8(fp)
   265e4:	10c00017 	ldw	r3,0(r2)
   265e8:	e0bfff17 	ldw	r2,-4(fp)
   265ec:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   265f0:	e0bfff17 	ldw	r2,-4(fp)
   265f4:	10800317 	ldw	r2,12(r2)
   265f8:	10c00204 	addi	r3,r2,8
   265fc:	e0bfff17 	ldw	r2,-4(fp)
   26600:	10800317 	ldw	r2,12(r2)
   26604:	10800204 	addi	r2,r2,8
   26608:	10800037 	ldwio	r2,0(r2)
   2660c:	1009883a 	mov	r4,r2
   26610:	00bfff44 	movi	r2,-3
   26614:	2088703a 	and	r4,r4,r2
   26618:	e0bffe17 	ldw	r2,-8(fp)
   2661c:	10800117 	ldw	r2,4(r2)
   26620:	1085883a 	add	r2,r2,r2
   26624:	1080008c 	andi	r2,r2,2
   26628:	2084b03a 	or	r2,r4,r2
   2662c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   26630:	e0bfff17 	ldw	r2,-4(fp)
   26634:	10800317 	ldw	r2,12(r2)
   26638:	10800904 	addi	r2,r2,36
   2663c:	e0fffe17 	ldw	r3,-8(fp)
   26640:	18c0020b 	ldhu	r3,8(r3)
   26644:	18ffffcc 	andi	r3,r3,65535
   26648:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2664c:	e0bfff17 	ldw	r2,-4(fp)
   26650:	10800317 	ldw	r2,12(r2)
   26654:	10800804 	addi	r2,r2,32
   26658:	e0fffe17 	ldw	r3,-8(fp)
   2665c:	18c0028b 	ldhu	r3,10(r3)
   26660:	18ffffcc 	andi	r3,r3,65535
   26664:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   26668:	e0bfff17 	ldw	r2,-4(fp)
   2666c:	10800317 	ldw	r2,12(r2)
   26670:	10800a04 	addi	r2,r2,40
   26674:	e0fffe17 	ldw	r3,-8(fp)
   26678:	18c0030b 	ldhu	r3,12(r3)
   2667c:	18ffffcc 	andi	r3,r3,65535
   26680:	10c00035 	stwio	r3,0(r2)
}
   26684:	0001883a 	nop
   26688:	e037883a 	mov	sp,fp
   2668c:	df000017 	ldw	fp,0(sp)
   26690:	dec00104 	addi	sp,sp,4
   26694:	f800283a 	ret

00026698 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   26698:	defffb04 	addi	sp,sp,-20
   2669c:	dfc00415 	stw	ra,16(sp)
   266a0:	df000315 	stw	fp,12(sp)
   266a4:	df000304 	addi	fp,sp,12
   266a8:	e13fff15 	stw	r4,-4(fp)
   266ac:	e17ffe15 	stw	r5,-8(fp)
   266b0:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   266b4:	e0bffe17 	ldw	r2,-8(fp)
   266b8:	1080028b 	ldhu	r2,10(r2)
   266bc:	10bfffcc 	andi	r2,r2,65535
   266c0:	10000426 	beq	r2,zero,266d4 <alt_avalon_i2c_master_config_speed_get+0x3c>
   266c4:	e0bffe17 	ldw	r2,-8(fp)
   266c8:	1080020b 	ldhu	r2,8(r2)
   266cc:	10bfffcc 	andi	r2,r2,65535
   266d0:	1000021e 	bne	r2,zero,266dc <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   266d4:	00bfff44 	movi	r2,-3
   266d8:	00000f06 	br	26718 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   266dc:	e0bfff17 	ldw	r2,-4(fp)
   266e0:	11000c17 	ldw	r4,48(r2)
   266e4:	e0bffe17 	ldw	r2,-8(fp)
   266e8:	1080028b 	ldhu	r2,10(r2)
   266ec:	10ffffcc 	andi	r3,r2,65535
   266f0:	e0bffe17 	ldw	r2,-8(fp)
   266f4:	1080020b 	ldhu	r2,8(r2)
   266f8:	10bfffcc 	andi	r2,r2,65535
   266fc:	1885883a 	add	r2,r3,r2
   26700:	100b883a 	mov	r5,r2
   26704:	0012a540 	call	12a54 <__udivsi3>
   26708:	1007883a 	mov	r3,r2
   2670c:	e0bffd17 	ldw	r2,-12(fp)
   26710:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   26714:	0005883a 	mov	r2,zero
}
   26718:	e037883a 	mov	sp,fp
   2671c:	dfc00117 	ldw	ra,4(sp)
   26720:	df000017 	ldw	fp,0(sp)
   26724:	dec00204 	addi	sp,sp,8
   26728:	f800283a 	ret

0002672c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2672c:	defff904 	addi	sp,sp,-28
   26730:	dfc00615 	stw	ra,24(sp)
   26734:	df000515 	stw	fp,20(sp)
   26738:	df000504 	addi	fp,sp,20
   2673c:	e13ffd15 	stw	r4,-12(fp)
   26740:	e17ffc15 	stw	r5,-16(fp)
   26744:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   26748:	e0fffb17 	ldw	r3,-20(fp)
   2674c:	008001b4 	movhi	r2,6
   26750:	1086a004 	addi	r2,r2,6784
   26754:	10c00436 	bltu	r2,r3,26768 <alt_avalon_i2c_master_config_speed_set+0x3c>
   26758:	e0bffb17 	ldw	r2,-20(fp)
   2675c:	10000226 	beq	r2,zero,26768 <alt_avalon_i2c_master_config_speed_set+0x3c>
   26760:	e0bffb17 	ldw	r2,-20(fp)
   26764:	1000021e 	bne	r2,zero,26770 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   26768:	00bfff04 	movi	r2,-4
   2676c:	00002906 	br	26814 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   26770:	e0bffd17 	ldw	r2,-12(fp)
   26774:	10c00c17 	ldw	r3,48(r2)
   26778:	e0bffb17 	ldw	r2,-20(fp)
   2677c:	1085883a 	add	r2,r2,r2
   26780:	100b883a 	mov	r5,r2
   26784:	1809883a 	mov	r4,r3
   26788:	0012a540 	call	12a54 <__udivsi3>
   2678c:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   26790:	e0bfff17 	ldw	r2,-4(fp)
   26794:	10800f04 	addi	r2,r2,60
   26798:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2679c:	e0bfff17 	ldw	r2,-4(fp)
   267a0:	10bff104 	addi	r2,r2,-60
   267a4:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   267a8:	e0fffb17 	ldw	r3,-20(fp)
   267ac:	008000b4 	movhi	r2,2
   267b0:	10a1a804 	addi	r2,r2,-31072
   267b4:	10c0042e 	bgeu	r2,r3,267c8 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   267b8:	e0bffc17 	ldw	r2,-16(fp)
   267bc:	00c00044 	movi	r3,1
   267c0:	10c00115 	stw	r3,4(r2)
   267c4:	00000206 	br	267d0 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   267c8:	e0bffc17 	ldw	r2,-16(fp)
   267cc:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   267d0:	e0bfff17 	ldw	r2,-4(fp)
   267d4:	1007883a 	mov	r3,r2
   267d8:	e0bffc17 	ldw	r2,-16(fp)
   267dc:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   267e0:	e0bffe17 	ldw	r2,-8(fp)
   267e4:	1007883a 	mov	r3,r2
   267e8:	e0bffc17 	ldw	r2,-16(fp)
   267ec:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   267f0:	e0bfff17 	ldw	r2,-4(fp)
   267f4:	1007883a 	mov	r3,r2
   267f8:	e0bfff17 	ldw	r2,-4(fp)
   267fc:	1004d07a 	srli	r2,r2,1
   26800:	1885c83a 	sub	r2,r3,r2
   26804:	1007883a 	mov	r3,r2
   26808:	e0bffc17 	ldw	r2,-16(fp)
   2680c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   26810:	0005883a 	mov	r2,zero

}
   26814:	e037883a 	mov	sp,fp
   26818:	dfc00117 	ldw	ra,4(sp)
   2681c:	df000017 	ldw	fp,0(sp)
   26820:	dec00204 	addi	sp,sp,8
   26824:	f800283a 	ret

00026828 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   26828:	defffe04 	addi	sp,sp,-8
   2682c:	df000115 	stw	fp,4(sp)
   26830:	df000104 	addi	fp,sp,4
   26834:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   26838:	e0bfff17 	ldw	r2,-4(fp)
   2683c:	10800317 	ldw	r2,12(r2)
   26840:	10800504 	addi	r2,r2,20
   26844:	10800037 	ldwio	r2,0(r2)
   26848:	1080004c 	andi	r2,r2,1
   2684c:	10000226 	beq	r2,zero,26858 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   26850:	00800044 	movi	r2,1
   26854:	00000106 	br	2685c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   26858:	0005883a 	mov	r2,zero
}
   2685c:	e037883a 	mov	sp,fp
   26860:	df000017 	ldw	fp,0(sp)
   26864:	dec00104 	addi	sp,sp,4
   26868:	f800283a 	ret

0002686c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   2686c:	defffb04 	addi	sp,sp,-20
   26870:	df000415 	stw	fp,16(sp)
   26874:	df000404 	addi	fp,sp,16
   26878:	e13fff15 	stw	r4,-4(fp)
   2687c:	e17ffe15 	stw	r5,-8(fp)
   26880:	e1bffd15 	stw	r6,-12(fp)
   26884:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
   26888:	e0bffc17 	ldw	r2,-16(fp)
   2688c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   26890:	00001506 	br	268e8 <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   26894:	e0bfff17 	ldw	r2,-4(fp)
   26898:	10800317 	ldw	r2,12(r2)
   2689c:	10800104 	addi	r2,r2,4
   268a0:	11000037 	ldwio	r4,0(r2)
   268a4:	e0bffc17 	ldw	r2,-16(fp)
   268a8:	10800017 	ldw	r2,0(r2)
   268ac:	e0fffe17 	ldw	r3,-8(fp)
   268b0:	1885883a 	add	r2,r3,r2
   268b4:	2007883a 	mov	r3,r4
   268b8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   268bc:	e0bffc17 	ldw	r2,-16(fp)
   268c0:	10800017 	ldw	r2,0(r2)
   268c4:	10c00044 	addi	r3,r2,1
   268c8:	e0bffc17 	ldw	r2,-16(fp)
   268cc:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   268d0:	e0bffc17 	ldw	r2,-16(fp)
   268d4:	10800017 	ldw	r2,0(r2)
   268d8:	e0fffd17 	ldw	r3,-12(fp)
   268dc:	1880021e 	bne	r3,r2,268e8 <alt_avalon_i2c_rx_read_available+0x7c>
   268e0:	e0bffd17 	ldw	r2,-12(fp)
   268e4:	1000061e 	bne	r2,zero,26900 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   268e8:	e0bfff17 	ldw	r2,-4(fp)
   268ec:	10800317 	ldw	r2,12(r2)
   268f0:	10800704 	addi	r2,r2,28
   268f4:	10800037 	ldwio	r2,0(r2)
   268f8:	103fe61e 	bne	r2,zero,26894 <__alt_mem_mcu_subsystem_ram_0+0x78006894>
    }
}
   268fc:	00000106 	br	26904 <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   26900:	0001883a 	nop
}
   26904:	0001883a 	nop
   26908:	e037883a 	mov	sp,fp
   2690c:	df000017 	ldw	fp,0(sp)
   26910:	dec00104 	addi	sp,sp,4
   26914:	f800283a 	ret

00026918 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   26918:	defffa04 	addi	sp,sp,-24
   2691c:	dfc00515 	stw	ra,20(sp)
   26920:	df000415 	stw	fp,16(sp)
   26924:	df000404 	addi	fp,sp,16
   26928:	e13ffd15 	stw	r4,-12(fp)
   2692c:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   26930:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
   26934:	008000b4 	movhi	r2,2
   26938:	10a1a804 	addi	r2,r2,-31072
   2693c:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   26940:	00000d06 	br	26978 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   26944:	e0bffe17 	ldw	r2,-8(fp)
   26948:	108002a8 	cmpgeui	r2,r2,10
   2694c:	1000021e 	bne	r2,zero,26958 <alt_avalon_i2c_rx_read+0x40>
   26950:	0109c404 	movi	r4,10000
   26954:	003063c0 	call	3063c <alt_busy_sleep>
      if (--timeout == 0)
   26958:	e0bffe17 	ldw	r2,-8(fp)
   2695c:	10bfffc4 	addi	r2,r2,-1
   26960:	e0bffe15 	stw	r2,-8(fp)
   26964:	e0bffe17 	ldw	r2,-8(fp)
   26968:	1000031e 	bne	r2,zero,26978 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   2696c:	00bfff84 	movi	r2,-2
   26970:	e0bfff15 	stw	r2,-4(fp)
        break;
   26974:	00000506 	br	2698c <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   26978:	e0bffd17 	ldw	r2,-12(fp)
   2697c:	10800317 	ldw	r2,12(r2)
   26980:	10800704 	addi	r2,r2,28
   26984:	10800037 	ldwio	r2,0(r2)
   26988:	103fee26 	beq	r2,zero,26944 <__alt_mem_mcu_subsystem_ram_0+0x78006944>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2698c:	e0bffd17 	ldw	r2,-12(fp)
   26990:	10800317 	ldw	r2,12(r2)
   26994:	10800104 	addi	r2,r2,4
   26998:	10800037 	ldwio	r2,0(r2)
   2699c:	1007883a 	mov	r3,r2
   269a0:	e0bffc17 	ldw	r2,-16(fp)
   269a4:	10c00005 	stb	r3,0(r2)
        
    return status;
   269a8:	e0bfff17 	ldw	r2,-4(fp)
}
   269ac:	e037883a 	mov	sp,fp
   269b0:	dfc00117 	ldw	ra,4(sp)
   269b4:	df000017 	ldw	fp,0(sp)
   269b8:	dec00204 	addi	sp,sp,8
   269bc:	f800283a 	ret

000269c0 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   269c0:	defff804 	addi	sp,sp,-32
   269c4:	dfc00715 	stw	ra,28(sp)
   269c8:	df000615 	stw	fp,24(sp)
   269cc:	df000604 	addi	fp,sp,24
   269d0:	e13ffd15 	stw	r4,-12(fp)
   269d4:	2805883a 	mov	r2,r5
   269d8:	3009883a 	mov	r4,r6
   269dc:	3807883a 	mov	r3,r7
   269e0:	e0bffc05 	stb	r2,-16(fp)
   269e4:	2005883a 	mov	r2,r4
   269e8:	e0bffb05 	stb	r2,-20(fp)
   269ec:	1805883a 	mov	r2,r3
   269f0:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
   269f4:	0089c404 	movi	r2,10000
   269f8:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   269fc:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   26a00:	00000c06 	br	26a34 <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   26a04:	e0bfff17 	ldw	r2,-4(fp)
   26a08:	108002a8 	cmpgeui	r2,r2,10
   26a0c:	1000021e 	bne	r2,zero,26a18 <alt_avalon_i2c_cmd_write+0x58>
   26a10:	0109c404 	movi	r4,10000
   26a14:	003063c0 	call	3063c <alt_busy_sleep>
      if (--timeout == 0)
   26a18:	e0bfff17 	ldw	r2,-4(fp)
   26a1c:	10bfffc4 	addi	r2,r2,-1
   26a20:	e0bfff15 	stw	r2,-4(fp)
   26a24:	e0bfff17 	ldw	r2,-4(fp)
   26a28:	1000021e 	bne	r2,zero,26a34 <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   26a2c:	00bfff84 	movi	r2,-2
   26a30:	00001906 	br	26a98 <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   26a34:	e0bffd17 	ldw	r2,-12(fp)
   26a38:	10800317 	ldw	r2,12(r2)
   26a3c:	10800404 	addi	r2,r2,16
   26a40:	10800037 	ldwio	r2,0(r2)
   26a44:	1080004c 	andi	r2,r2,1
   26a48:	103fee26 	beq	r2,zero,26a04 <__alt_mem_mcu_subsystem_ram_0+0x78006a04>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   26a4c:	e0bffd17 	ldw	r2,-12(fp)
   26a50:	10800317 	ldw	r2,12(r2)
   26a54:	e13ffc03 	ldbu	r4,-16(fp)
   26a58:	e0fffb03 	ldbu	r3,-20(fp)
   26a5c:	1806927a 	slli	r3,r3,9
   26a60:	20c8b03a 	or	r4,r4,r3
   26a64:	e0fffa03 	ldbu	r3,-24(fp)
   26a68:	1806923a 	slli	r3,r3,8
   26a6c:	20c6b03a 	or	r3,r4,r3
   26a70:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   26a74:	e0bffe04 	addi	r2,fp,-8
   26a78:	100b883a 	mov	r5,r2
   26a7c:	e13ffd17 	ldw	r4,-12(fp)
   26a80:	0026c080 	call	26c08 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   26a84:	e0bffe04 	addi	r2,fp,-8
   26a88:	100b883a 	mov	r5,r2
   26a8c:	e13ffd17 	ldw	r4,-12(fp)
   26a90:	0026c540 	call	26c54 <alt_avalon_i2c_check_arblost>
    
    return status;
   26a94:	e0bffe17 	ldw	r2,-8(fp)
}
   26a98:	e037883a 	mov	sp,fp
   26a9c:	dfc00117 	ldw	ra,4(sp)
   26aa0:	df000017 	ldw	fp,0(sp)
   26aa4:	dec00204 	addi	sp,sp,8
   26aa8:	f800283a 	ret

00026aac <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   26aac:	defffa04 	addi	sp,sp,-24
   26ab0:	dfc00515 	stw	ra,20(sp)
   26ab4:	df000415 	stw	fp,16(sp)
   26ab8:	df000404 	addi	fp,sp,16
   26abc:	e13ffe15 	stw	r4,-8(fp)
   26ac0:	e17ffd15 	stw	r5,-12(fp)
   26ac4:	3005883a 	mov	r2,r6
   26ac8:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   26acc:	e0bffe17 	ldw	r2,-8(fp)
   26ad0:	10800d17 	ldw	r2,52(r2)
   26ad4:	10800058 	cmpnei	r2,r2,1
   26ad8:	10001c1e 	bne	r2,zero,26b4c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   26adc:	e0bffe17 	ldw	r2,-8(fp)
   26ae0:	10800917 	ldw	r2,36(r2)
   26ae4:	1004d1fa 	srli	r2,r2,7
   26ae8:	1080038c 	andi	r2,r2,14
   26aec:	1007883a 	mov	r3,r2
   26af0:	e0bffd17 	ldw	r2,-12(fp)
   26af4:	1884b03a 	or	r2,r3,r2
   26af8:	1007883a 	mov	r3,r2
   26afc:	00bffc04 	movi	r2,-16
   26b00:	1884b03a 	or	r2,r3,r2
   26b04:	10803fcc 	andi	r2,r2,255
   26b08:	e0fffc03 	ldbu	r3,-16(fp)
   26b0c:	000f883a 	mov	r7,zero
   26b10:	180d883a 	mov	r6,r3
   26b14:	100b883a 	mov	r5,r2
   26b18:	e13ffe17 	ldw	r4,-8(fp)
   26b1c:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   26b20:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   26b24:	e0bffe17 	ldw	r2,-8(fp)
   26b28:	10800917 	ldw	r2,36(r2)
   26b2c:	10803fcc 	andi	r2,r2,255
   26b30:	000f883a 	mov	r7,zero
   26b34:	000d883a 	mov	r6,zero
   26b38:	100b883a 	mov	r5,r2
   26b3c:	e13ffe17 	ldw	r4,-8(fp)
   26b40:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   26b44:	e0bfff15 	stw	r2,-4(fp)
   26b48:	00000e06 	br	26b84 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   26b4c:	e0bffe17 	ldw	r2,-8(fp)
   26b50:	10800917 	ldw	r2,36(r2)
   26b54:	1085883a 	add	r2,r2,r2
   26b58:	1007883a 	mov	r3,r2
   26b5c:	e0bffd17 	ldw	r2,-12(fp)
   26b60:	1884b03a 	or	r2,r3,r2
   26b64:	10803fcc 	andi	r2,r2,255
   26b68:	e0fffc03 	ldbu	r3,-16(fp)
   26b6c:	000f883a 	mov	r7,zero
   26b70:	180d883a 	mov	r6,r3
   26b74:	100b883a 	mov	r5,r2
   26b78:	e13ffe17 	ldw	r4,-8(fp)
   26b7c:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   26b80:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
   26b84:	e0bfff17 	ldw	r2,-4(fp)
}
   26b88:	e037883a 	mov	sp,fp
   26b8c:	dfc00117 	ldw	ra,4(sp)
   26b90:	df000017 	ldw	fp,0(sp)
   26b94:	dec00204 	addi	sp,sp,8
   26b98:	f800283a 	ret

00026b9c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   26b9c:	defffd04 	addi	sp,sp,-12
   26ba0:	df000215 	stw	fp,8(sp)
   26ba4:	df000204 	addi	fp,sp,8
   26ba8:	e13fff15 	stw	r4,-4(fp)
   26bac:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
   26bb0:	e0bfff17 	ldw	r2,-4(fp)
   26bb4:	10c00917 	ldw	r3,36(r2)
   26bb8:	e0bffe17 	ldw	r2,-8(fp)
   26bbc:	10c00015 	stw	r3,0(r2)
}
   26bc0:	0001883a 	nop
   26bc4:	e037883a 	mov	sp,fp
   26bc8:	df000017 	ldw	fp,0(sp)
   26bcc:	dec00104 	addi	sp,sp,4
   26bd0:	f800283a 	ret

00026bd4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   26bd4:	defffd04 	addi	sp,sp,-12
   26bd8:	df000215 	stw	fp,8(sp)
   26bdc:	df000204 	addi	fp,sp,8
   26be0:	e13fff15 	stw	r4,-4(fp)
   26be4:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
   26be8:	e0bfff17 	ldw	r2,-4(fp)
   26bec:	e0fffe17 	ldw	r3,-8(fp)
   26bf0:	10c00915 	stw	r3,36(r2)
}
   26bf4:	0001883a 	nop
   26bf8:	e037883a 	mov	sp,fp
   26bfc:	df000017 	ldw	fp,0(sp)
   26c00:	dec00104 	addi	sp,sp,4
   26c04:	f800283a 	ret

00026c08 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   26c08:	defffd04 	addi	sp,sp,-12
   26c0c:	df000215 	stw	fp,8(sp)
   26c10:	df000204 	addi	fp,sp,8
   26c14:	e13fff15 	stw	r4,-4(fp)
   26c18:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   26c1c:	e0bfff17 	ldw	r2,-4(fp)
   26c20:	10800317 	ldw	r2,12(r2)
   26c24:	10800404 	addi	r2,r2,16
   26c28:	10800037 	ldwio	r2,0(r2)
   26c2c:	1080010c 	andi	r2,r2,4
   26c30:	10000326 	beq	r2,zero,26c40 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   26c34:	e0bffe17 	ldw	r2,-8(fp)
   26c38:	00fffec4 	movi	r3,-5
   26c3c:	10c00015 	stw	r3,0(r2)
    }
}
   26c40:	0001883a 	nop
   26c44:	e037883a 	mov	sp,fp
   26c48:	df000017 	ldw	fp,0(sp)
   26c4c:	dec00104 	addi	sp,sp,4
   26c50:	f800283a 	ret

00026c54 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   26c54:	defffd04 	addi	sp,sp,-12
   26c58:	df000215 	stw	fp,8(sp)
   26c5c:	df000204 	addi	fp,sp,8
   26c60:	e13fff15 	stw	r4,-4(fp)
   26c64:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   26c68:	e0bfff17 	ldw	r2,-4(fp)
   26c6c:	10800317 	ldw	r2,12(r2)
   26c70:	10800404 	addi	r2,r2,16
   26c74:	10800037 	ldwio	r2,0(r2)
   26c78:	1080020c 	andi	r2,r2,8
   26c7c:	10000326 	beq	r2,zero,26c8c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   26c80:	e0bffe17 	ldw	r2,-8(fp)
   26c84:	00fffe84 	movi	r3,-6
   26c88:	10c00015 	stw	r3,0(r2)
    }
}
   26c8c:	0001883a 	nop
   26c90:	e037883a 	mov	sp,fp
   26c94:	df000017 	ldw	fp,0(sp)
   26c98:	dec00104 	addi	sp,sp,4
   26c9c:	f800283a 	ret

00026ca0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   26ca0:	defff804 	addi	sp,sp,-32
   26ca4:	dfc00715 	stw	ra,28(sp)
   26ca8:	df000615 	stw	fp,24(sp)
   26cac:	df000604 	addi	fp,sp,24
   26cb0:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   26cb4:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   26cb8:	e0bffa17 	ldw	r2,-24(fp)
   26cbc:	10800717 	ldw	r2,28(r2)
   26cc0:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   26cc4:	e0bffe17 	ldw	r2,-8(fp)
   26cc8:	10800117 	ldw	r2,4(r2)
   26ccc:	10800044 	addi	r2,r2,1
   26cd0:	1089c424 	muli	r2,r2,10000
   26cd4:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   26cd8:	e0bffc04 	addi	r2,fp,-16
   26cdc:	100b883a 	mov	r5,r2
   26ce0:	e13ffa17 	ldw	r4,-24(fp)
   26ce4:	0027b280 	call	27b28 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   26ce8:	e0bffc17 	ldw	r2,-16(fp)
   26cec:	100b883a 	mov	r5,r2
   26cf0:	e13ffa17 	ldw	r4,-24(fp)
   26cf4:	0027a540 	call	27a54 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   26cf8:	e0bffd04 	addi	r2,fp,-12
   26cfc:	100b883a 	mov	r5,r2
   26d00:	e13ffa17 	ldw	r4,-24(fp)
   26d04:	0026c080 	call	26c08 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   26d08:	e0bffd17 	ldw	r2,-12(fp)
   26d0c:	10002226 	beq	r2,zero,26d98 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   26d10:	e0bffe17 	ldw	r2,-8(fp)
   26d14:	10800217 	ldw	r2,8(r2)
   26d18:	10001d26 	beq	r2,zero,26d90 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   26d1c:	00000d06 	br	26d54 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   26d20:	e0bfff17 	ldw	r2,-4(fp)
   26d24:	108002a8 	cmpgeui	r2,r2,10
   26d28:	1000021e 	bne	r2,zero,26d34 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   26d2c:	0109c404 	movi	r4,10000
   26d30:	003063c0 	call	3063c <alt_busy_sleep>
              if (--timeout == 0)
   26d34:	e0bfff17 	ldw	r2,-4(fp)
   26d38:	10bfffc4 	addi	r2,r2,-1
   26d3c:	e0bfff15 	stw	r2,-4(fp)
   26d40:	e0bfff17 	ldw	r2,-4(fp)
   26d44:	1000031e 	bne	r2,zero,26d54 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   26d48:	00bfff84 	movi	r2,-2
   26d4c:	e0bffd15 	stw	r2,-12(fp)
                 break;
   26d50:	00000306 	br	26d60 <alt_avalon_i2c_interrupt_transaction_status+0xc0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   26d54:	e13ffa17 	ldw	r4,-24(fp)
   26d58:	00268280 	call	26828 <alt_avalon_i2c_is_busy>
   26d5c:	103ff01e 	bne	r2,zero,26d20 <__alt_mem_mcu_subsystem_ram_0+0x78006d20>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   26d60:	e0bffe17 	ldw	r2,-8(fp)
   26d64:	10800017 	ldw	r2,0(r2)
   26d68:	e0fffb04 	addi	r3,fp,-20
   26d6c:	180f883a 	mov	r7,r3
   26d70:	000d883a 	mov	r6,zero
   26d74:	100b883a 	mov	r5,r2
   26d78:	e13ffa17 	ldw	r4,-24(fp)
   26d7c:	002686c0 	call	2686c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   26d80:	e13ffa17 	ldw	r4,-24(fp)
   26d84:	00264d00 	call	264d0 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   26d88:	e0bffe17 	ldw	r2,-8(fp)
   26d8c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   26d90:	e0bffd17 	ldw	r2,-12(fp)
   26d94:	00000a06 	br	26dc0 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   26d98:	e0bffe17 	ldw	r2,-8(fp)
   26d9c:	10800217 	ldw	r2,8(r2)
   26da0:	10000626 	beq	r2,zero,26dbc <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   26da4:	e0bffc17 	ldw	r2,-16(fp)
   26da8:	100b883a 	mov	r5,r2
   26dac:	e13ffa17 	ldw	r4,-24(fp)
   26db0:	0027ac00 	call	27ac0 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   26db4:	00bffe44 	movi	r2,-7
   26db8:	00000106 	br	26dc0 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   26dbc:	0005883a 	mov	r2,zero
}
   26dc0:	e037883a 	mov	sp,fp
   26dc4:	dfc00117 	ldw	ra,4(sp)
   26dc8:	df000017 	ldw	fp,0(sp)
   26dcc:	dec00204 	addi	sp,sp,8
   26dd0:	f800283a 	ret

00026dd4 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   26dd4:	defff704 	addi	sp,sp,-36
   26dd8:	dfc00815 	stw	ra,32(sp)
   26ddc:	df000715 	stw	fp,28(sp)
   26de0:	df000704 	addi	fp,sp,28
   26de4:	e13ffd15 	stw	r4,-12(fp)
   26de8:	e17ffc15 	stw	r5,-16(fp)
   26dec:	e1bffb15 	stw	r6,-20(fp)
   26df0:	3805883a 	mov	r2,r7
   26df4:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   26df8:	0089c404 	movi	r2,10000
   26dfc:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
   26e00:	00002206 	br	26e8c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   26e04:	e0bffe17 	ldw	r2,-8(fp)
   26e08:	108002a8 	cmpgeui	r2,r2,10
   26e0c:	1000021e 	bne	r2,zero,26e18 <alt_avalon_i2c_master_tx+0x44>
   26e10:	0109c404 	movi	r4,10000
   26e14:	003063c0 	call	3063c <alt_busy_sleep>
      if (use_interrupts)
   26e18:	e0bffa03 	ldbu	r2,-24(fp)
   26e1c:	10000926 	beq	r2,zero,26e44 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   26e20:	00800044 	movi	r2,1
   26e24:	d8800015 	stw	r2,0(sp)
   26e28:	000f883a 	mov	r7,zero
   26e2c:	e1bffb17 	ldw	r6,-20(fp)
   26e30:	e17ffc17 	ldw	r5,-16(fp)
   26e34:	e13ffd17 	ldw	r4,-12(fp)
   26e38:	002737c0 	call	2737c <alt_avalon_i2c_master_transmit_using_interrupts>
   26e3c:	e0bfff15 	stw	r2,-4(fp)
   26e40:	00000806 	br	26e64 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   26e44:	00800044 	movi	r2,1
   26e48:	d8800015 	stw	r2,0(sp)
   26e4c:	000f883a 	mov	r7,zero
   26e50:	e1bffb17 	ldw	r6,-20(fp)
   26e54:	e17ffc17 	ldw	r5,-16(fp)
   26e58:	e13ffd17 	ldw	r4,-12(fp)
   26e5c:	00271c00 	call	271c0 <alt_avalon_i2c_master_transmit>
   26e60:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   26e64:	e0bfff17 	ldw	r2,-4(fp)
   26e68:	10bffea0 	cmpeqi	r2,r2,-6
   26e6c:	1000061e 	bne	r2,zero,26e88 <alt_avalon_i2c_master_tx+0xb4>
   26e70:	e0bfff17 	ldw	r2,-4(fp)
   26e74:	10bffee0 	cmpeqi	r2,r2,-5
   26e78:	1000031e 	bne	r2,zero,26e88 <alt_avalon_i2c_master_tx+0xb4>
   26e7c:	e0bfff17 	ldw	r2,-4(fp)
   26e80:	10bffe58 	cmpnei	r2,r2,-7
   26e84:	1000061e 	bne	r2,zero,26ea0 <alt_avalon_i2c_master_tx+0xcc>
   26e88:	0001883a 	nop
    while (retry--)
   26e8c:	e0bffe17 	ldw	r2,-8(fp)
   26e90:	10ffffc4 	addi	r3,r2,-1
   26e94:	e0fffe15 	stw	r3,-8(fp)
   26e98:	103fda1e 	bne	r2,zero,26e04 <__alt_mem_mcu_subsystem_ram_0+0x78006e04>
   26e9c:	00000106 	br	26ea4 <alt_avalon_i2c_master_tx+0xd0>
      break;
   26ea0:	0001883a 	nop
    }

    return status;
   26ea4:	e0bfff17 	ldw	r2,-4(fp)
}        
   26ea8:	e037883a 	mov	sp,fp
   26eac:	dfc00117 	ldw	ra,4(sp)
   26eb0:	df000017 	ldw	fp,0(sp)
   26eb4:	dec00204 	addi	sp,sp,8
   26eb8:	f800283a 	ret

00026ebc <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   26ebc:	defff704 	addi	sp,sp,-36
   26ec0:	dfc00815 	stw	ra,32(sp)
   26ec4:	df000715 	stw	fp,28(sp)
   26ec8:	df000704 	addi	fp,sp,28
   26ecc:	e13ffd15 	stw	r4,-12(fp)
   26ed0:	e17ffc15 	stw	r5,-16(fp)
   26ed4:	e1bffb15 	stw	r6,-20(fp)
   26ed8:	3805883a 	mov	r2,r7
   26edc:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   26ee0:	0089c404 	movi	r2,10000
   26ee4:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
   26ee8:	e0bffa03 	ldbu	r2,-24(fp)
   26eec:	10003426 	beq	r2,zero,26fc0 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   26ef0:	00001706 	br	26f50 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   26ef4:	e0bffe17 	ldw	r2,-8(fp)
   26ef8:	108002a8 	cmpgeui	r2,r2,10
   26efc:	1000021e 	bne	r2,zero,26f08 <alt_avalon_i2c_master_rx+0x4c>
   26f00:	0109c404 	movi	r4,10000
   26f04:	003063c0 	call	3063c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   26f08:	00800044 	movi	r2,1
   26f0c:	d8800015 	stw	r2,0(sp)
   26f10:	000f883a 	mov	r7,zero
   26f14:	e1bffb17 	ldw	r6,-20(fp)
   26f18:	e17ffc17 	ldw	r5,-16(fp)
   26f1c:	e13ffd17 	ldw	r4,-12(fp)
   26f20:	00277900 	call	27790 <alt_avalon_i2c_master_receive_using_interrupts>
   26f24:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   26f28:	e0bfff17 	ldw	r2,-4(fp)
   26f2c:	10bffea0 	cmpeqi	r2,r2,-6
   26f30:	1000061e 	bne	r2,zero,26f4c <alt_avalon_i2c_master_rx+0x90>
   26f34:	e0bfff17 	ldw	r2,-4(fp)
   26f38:	10bffee0 	cmpeqi	r2,r2,-5
   26f3c:	1000031e 	bne	r2,zero,26f4c <alt_avalon_i2c_master_rx+0x90>
   26f40:	e0bfff17 	ldw	r2,-4(fp)
   26f44:	10bffe58 	cmpnei	r2,r2,-7
   26f48:	1000221e 	bne	r2,zero,26fd4 <alt_avalon_i2c_master_rx+0x118>
   26f4c:	0001883a 	nop
      while (retry--) 
   26f50:	e0bffe17 	ldw	r2,-8(fp)
   26f54:	10ffffc4 	addi	r3,r2,-1
   26f58:	e0fffe15 	stw	r3,-8(fp)
   26f5c:	103fe51e 	bne	r2,zero,26ef4 <__alt_mem_mcu_subsystem_ram_0+0x78006ef4>
   26f60:	00001f06 	br	26fe0 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   26f64:	e0bffe17 	ldw	r2,-8(fp)
   26f68:	108002a8 	cmpgeui	r2,r2,10
   26f6c:	1000021e 	bne	r2,zero,26f78 <alt_avalon_i2c_master_rx+0xbc>
   26f70:	0109c404 	movi	r4,10000
   26f74:	003063c0 	call	3063c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   26f78:	00800044 	movi	r2,1
   26f7c:	d8800015 	stw	r2,0(sp)
   26f80:	000f883a 	mov	r7,zero
   26f84:	e1bffb17 	ldw	r6,-20(fp)
   26f88:	e17ffc17 	ldw	r5,-16(fp)
   26f8c:	e13ffd17 	ldw	r4,-12(fp)
   26f90:	00275840 	call	27584 <alt_avalon_i2c_master_receive>
   26f94:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   26f98:	e0bfff17 	ldw	r2,-4(fp)
   26f9c:	10bffea0 	cmpeqi	r2,r2,-6
   26fa0:	1000061e 	bne	r2,zero,26fbc <alt_avalon_i2c_master_rx+0x100>
   26fa4:	e0bfff17 	ldw	r2,-4(fp)
   26fa8:	10bffee0 	cmpeqi	r2,r2,-5
   26fac:	1000031e 	bne	r2,zero,26fbc <alt_avalon_i2c_master_rx+0x100>
   26fb0:	e0bfff17 	ldw	r2,-4(fp)
   26fb4:	10bffe58 	cmpnei	r2,r2,-7
   26fb8:	1000081e 	bne	r2,zero,26fdc <alt_avalon_i2c_master_rx+0x120>
   26fbc:	0001883a 	nop
      while (retry--) 
   26fc0:	e0bffe17 	ldw	r2,-8(fp)
   26fc4:	10ffffc4 	addi	r3,r2,-1
   26fc8:	e0fffe15 	stw	r3,-8(fp)
   26fcc:	103fe51e 	bne	r2,zero,26f64 <__alt_mem_mcu_subsystem_ram_0+0x78006f64>
   26fd0:	00000306 	br	26fe0 <alt_avalon_i2c_master_rx+0x124>
        break;
   26fd4:	0001883a 	nop
   26fd8:	00000106 	br	26fe0 <alt_avalon_i2c_master_rx+0x124>
        break;
   26fdc:	0001883a 	nop
      }
    }
    
    return status;
   26fe0:	e0bfff17 	ldw	r2,-4(fp)
}        
   26fe4:	e037883a 	mov	sp,fp
   26fe8:	dfc00117 	ldw	ra,4(sp)
   26fec:	df000017 	ldw	fp,0(sp)
   26ff0:	dec00204 	addi	sp,sp,8
   26ff4:	f800283a 	ret

00026ff8 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   26ff8:	defff604 	addi	sp,sp,-40
   26ffc:	dfc00915 	stw	ra,36(sp)
   27000:	df000815 	stw	fp,32(sp)
   27004:	df000804 	addi	fp,sp,32
   27008:	e13ffd15 	stw	r4,-12(fp)
   2700c:	e17ffc15 	stw	r5,-16(fp)
   27010:	e1bffb15 	stw	r6,-20(fp)
   27014:	e1fffa15 	stw	r7,-24(fp)
   27018:	e0800317 	ldw	r2,12(fp)
   2701c:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   27020:	0089c404 	movi	r2,10000
   27024:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
   27028:	e0bff903 	ldbu	r2,-28(fp)
   2702c:	10005626 	beq	r2,zero,27188 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   27030:	00002806 	br	270d4 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   27034:	e0bffe17 	ldw	r2,-8(fp)
   27038:	108002a8 	cmpgeui	r2,r2,10
   2703c:	1000021e 	bne	r2,zero,27048 <alt_avalon_i2c_master_tx_rx+0x50>
   27040:	0109c404 	movi	r4,10000
   27044:	003063c0 	call	3063c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   27048:	d8000015 	stw	zero,0(sp)
   2704c:	000f883a 	mov	r7,zero
   27050:	e1bffb17 	ldw	r6,-20(fp)
   27054:	e17ffc17 	ldw	r5,-16(fp)
   27058:	e13ffd17 	ldw	r4,-12(fp)
   2705c:	002737c0 	call	2737c <alt_avalon_i2c_master_transmit_using_interrupts>
   27060:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27064:	e0bfff17 	ldw	r2,-4(fp)
   27068:	10bffea0 	cmpeqi	r2,r2,-6
   2706c:	1000191e 	bne	r2,zero,270d4 <alt_avalon_i2c_master_tx_rx+0xdc>
   27070:	e0bfff17 	ldw	r2,-4(fp)
   27074:	10bffee0 	cmpeqi	r2,r2,-5
   27078:	1000161e 	bne	r2,zero,270d4 <alt_avalon_i2c_master_tx_rx+0xdc>
   2707c:	e0bfff17 	ldw	r2,-4(fp)
   27080:	10bffe58 	cmpnei	r2,r2,-7
   27084:	1000011e 	bne	r2,zero,2708c <alt_avalon_i2c_master_tx_rx+0x94>
   27088:	00001206 	br	270d4 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2708c:	00800044 	movi	r2,1
   27090:	d8800015 	stw	r2,0(sp)
   27094:	01c00044 	movi	r7,1
   27098:	e1800217 	ldw	r6,8(fp)
   2709c:	e17ffa17 	ldw	r5,-24(fp)
   270a0:	e13ffd17 	ldw	r4,-12(fp)
   270a4:	00277900 	call	27790 <alt_avalon_i2c_master_receive_using_interrupts>
   270a8:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   270ac:	e0bfff17 	ldw	r2,-4(fp)
   270b0:	10bffea0 	cmpeqi	r2,r2,-6
   270b4:	1000061e 	bne	r2,zero,270d0 <alt_avalon_i2c_master_tx_rx+0xd8>
   270b8:	e0bfff17 	ldw	r2,-4(fp)
   270bc:	10bffee0 	cmpeqi	r2,r2,-5
   270c0:	1000031e 	bne	r2,zero,270d0 <alt_avalon_i2c_master_tx_rx+0xd8>
   270c4:	e0bfff17 	ldw	r2,-4(fp)
   270c8:	10bffe58 	cmpnei	r2,r2,-7
   270cc:	1000331e 	bne	r2,zero,2719c <alt_avalon_i2c_master_tx_rx+0x1a4>
   270d0:	0001883a 	nop
      while (retry--) 
   270d4:	e0bffe17 	ldw	r2,-8(fp)
   270d8:	10ffffc4 	addi	r3,r2,-1
   270dc:	e0fffe15 	stw	r3,-8(fp)
   270e0:	103fd41e 	bne	r2,zero,27034 <__alt_mem_mcu_subsystem_ram_0+0x78007034>
   270e4:	00003006 	br	271a8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   270e8:	e0bffe17 	ldw	r2,-8(fp)
   270ec:	108002a8 	cmpgeui	r2,r2,10
   270f0:	1000021e 	bne	r2,zero,270fc <alt_avalon_i2c_master_tx_rx+0x104>
   270f4:	0109c404 	movi	r4,10000
   270f8:	003063c0 	call	3063c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   270fc:	d8000015 	stw	zero,0(sp)
   27100:	000f883a 	mov	r7,zero
   27104:	e1bffb17 	ldw	r6,-20(fp)
   27108:	e17ffc17 	ldw	r5,-16(fp)
   2710c:	e13ffd17 	ldw	r4,-12(fp)
   27110:	00271c00 	call	271c0 <alt_avalon_i2c_master_transmit>
   27114:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27118:	e0bfff17 	ldw	r2,-4(fp)
   2711c:	10bffea0 	cmpeqi	r2,r2,-6
   27120:	1000191e 	bne	r2,zero,27188 <alt_avalon_i2c_master_tx_rx+0x190>
   27124:	e0bfff17 	ldw	r2,-4(fp)
   27128:	10bffee0 	cmpeqi	r2,r2,-5
   2712c:	1000161e 	bne	r2,zero,27188 <alt_avalon_i2c_master_tx_rx+0x190>
   27130:	e0bfff17 	ldw	r2,-4(fp)
   27134:	10bffe58 	cmpnei	r2,r2,-7
   27138:	1000011e 	bne	r2,zero,27140 <alt_avalon_i2c_master_tx_rx+0x148>
   2713c:	00001206 	br	27188 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   27140:	00800044 	movi	r2,1
   27144:	d8800015 	stw	r2,0(sp)
   27148:	01c00044 	movi	r7,1
   2714c:	e1800217 	ldw	r6,8(fp)
   27150:	e17ffa17 	ldw	r5,-24(fp)
   27154:	e13ffd17 	ldw	r4,-12(fp)
   27158:	00275840 	call	27584 <alt_avalon_i2c_master_receive>
   2715c:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   27160:	e0bfff17 	ldw	r2,-4(fp)
   27164:	10bffea0 	cmpeqi	r2,r2,-6
   27168:	1000061e 	bne	r2,zero,27184 <alt_avalon_i2c_master_tx_rx+0x18c>
   2716c:	e0bfff17 	ldw	r2,-4(fp)
   27170:	10bffee0 	cmpeqi	r2,r2,-5
   27174:	1000031e 	bne	r2,zero,27184 <alt_avalon_i2c_master_tx_rx+0x18c>
   27178:	e0bfff17 	ldw	r2,-4(fp)
   2717c:	10bffe58 	cmpnei	r2,r2,-7
   27180:	1000081e 	bne	r2,zero,271a4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   27184:	0001883a 	nop
      while (retry--) 
   27188:	e0bffe17 	ldw	r2,-8(fp)
   2718c:	10ffffc4 	addi	r3,r2,-1
   27190:	e0fffe15 	stw	r3,-8(fp)
   27194:	103fd41e 	bne	r2,zero,270e8 <__alt_mem_mcu_subsystem_ram_0+0x780070e8>
   27198:	00000306 	br	271a8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
   2719c:	0001883a 	nop
   271a0:	00000106 	br	271a8 <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
   271a4:	0001883a 	nop
      }
    }
    
    return status;
   271a8:	e0bfff17 	ldw	r2,-4(fp)
}                                       
   271ac:	e037883a 	mov	sp,fp
   271b0:	dfc00117 	ldw	ra,4(sp)
   271b4:	df000017 	ldw	fp,0(sp)
   271b8:	dec00204 	addi	sp,sp,8
   271bc:	f800283a 	ret

000271c0 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   271c0:	defff704 	addi	sp,sp,-36
   271c4:	dfc00815 	stw	ra,32(sp)
   271c8:	df000715 	stw	fp,28(sp)
   271cc:	df000704 	addi	fp,sp,28
   271d0:	e13ffd15 	stw	r4,-12(fp)
   271d4:	e17ffc15 	stw	r5,-16(fp)
   271d8:	e1bffb15 	stw	r6,-20(fp)
   271dc:	3807883a 	mov	r3,r7
   271e0:	e0800217 	ldw	r2,8(fp)
   271e4:	e0fffa05 	stb	r3,-24(fp)
   271e8:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   271ec:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
   271f0:	e0bffb17 	ldw	r2,-20(fp)
   271f4:	1089c424 	muli	r2,r2,10000
   271f8:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
   271fc:	e0bffb17 	ldw	r2,-20(fp)
   27200:	1000021e 	bne	r2,zero,2720c <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   27204:	0005883a 	mov	r2,zero
   27208:	00005706 	br	27368 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2720c:	e0bffa03 	ldbu	r2,-24(fp)
   27210:	10000a1e 	bne	r2,zero,2723c <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   27214:	e13ffd17 	ldw	r4,-12(fp)
   27218:	00264380 	call	26438 <alt_avalon_i2c_enable>
   2721c:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   27220:	e0bffe17 	ldw	r2,-8(fp)
   27224:	10000226 	beq	r2,zero,27230 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   27228:	e0bffe17 	ldw	r2,-8(fp)
   2722c:	00004e06 	br	27368 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   27230:	01400704 	movi	r5,28
   27234:	e13ffd17 	ldw	r4,-12(fp)
   27238:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2723c:	e0bffa03 	ldbu	r2,-24(fp)
   27240:	100d883a 	mov	r6,r2
   27244:	000b883a 	mov	r5,zero
   27248:	e13ffd17 	ldw	r4,-12(fp)
   2724c:	0026aac0 	call	26aac <alt_avalon_i2c_send_address>
   27250:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   27254:	e0bffe17 	ldw	r2,-8(fp)
   27258:	1000271e 	bne	r2,zero,272f8 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2725c:	00000f06 	br	2729c <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   27260:	e0bffc17 	ldw	r2,-16(fp)
   27264:	10800003 	ldbu	r2,0(r2)
   27268:	10803fcc 	andi	r2,r2,255
   2726c:	000f883a 	mov	r7,zero
   27270:	000d883a 	mov	r6,zero
   27274:	100b883a 	mov	r5,r2
   27278:	e13ffd17 	ldw	r4,-12(fp)
   2727c:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   27280:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
   27284:	e0bffc17 	ldw	r2,-16(fp)
   27288:	10800044 	addi	r2,r2,1
   2728c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   27290:	e0bffb17 	ldw	r2,-20(fp)
   27294:	10bfffc4 	addi	r2,r2,-1
   27298:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2729c:	e0bffb17 	ldw	r2,-20(fp)
   272a0:	108000b0 	cmpltui	r2,r2,2
   272a4:	1000021e 	bne	r2,zero,272b0 <alt_avalon_i2c_master_transmit+0xf0>
   272a8:	e0bffe17 	ldw	r2,-8(fp)
   272ac:	103fec26 	beq	r2,zero,27260 <__alt_mem_mcu_subsystem_ram_0+0x78007260>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   272b0:	e0bffe17 	ldw	r2,-8(fp)
   272b4:	1000101e 	bne	r2,zero,272f8 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   272b8:	e0bffc17 	ldw	r2,-16(fp)
   272bc:	10800003 	ldbu	r2,0(r2)
   272c0:	10803fcc 	andi	r2,r2,255
   272c4:	e0fff903 	ldbu	r3,-28(fp)
   272c8:	180f883a 	mov	r7,r3
   272cc:	000d883a 	mov	r6,zero
   272d0:	100b883a 	mov	r5,r2
   272d4:	e13ffd17 	ldw	r4,-12(fp)
   272d8:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   272dc:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
   272e0:	e0bffc17 	ldw	r2,-16(fp)
   272e4:	10800044 	addi	r2,r2,1
   272e8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   272ec:	e0bffb17 	ldw	r2,-20(fp)
   272f0:	10bfffc4 	addi	r2,r2,-1
   272f4:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   272f8:	e0bff903 	ldbu	r2,-28(fp)
   272fc:	1000101e 	bne	r2,zero,27340 <alt_avalon_i2c_master_transmit+0x180>
   27300:	e0bffe17 	ldw	r2,-8(fp)
   27304:	10001726 	beq	r2,zero,27364 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   27308:	00000d06 	br	27340 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2730c:	e0bfff17 	ldw	r2,-4(fp)
   27310:	108002a8 	cmpgeui	r2,r2,10
   27314:	1000021e 	bne	r2,zero,27320 <alt_avalon_i2c_master_transmit+0x160>
   27318:	0109c404 	movi	r4,10000
   2731c:	003063c0 	call	3063c <alt_busy_sleep>
            if (--timeout == 0)
   27320:	e0bfff17 	ldw	r2,-4(fp)
   27324:	10bfffc4 	addi	r2,r2,-1
   27328:	e0bfff15 	stw	r2,-4(fp)
   2732c:	e0bfff17 	ldw	r2,-4(fp)
   27330:	1000031e 	bne	r2,zero,27340 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   27334:	00bfff84 	movi	r2,-2
   27338:	e0bffe15 	stw	r2,-8(fp)
               break;
   2733c:	00000306 	br	2734c <alt_avalon_i2c_master_transmit+0x18c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   27340:	e13ffd17 	ldw	r4,-12(fp)
   27344:	00268280 	call	26828 <alt_avalon_i2c_is_busy>
   27348:	103ff01e 	bne	r2,zero,2730c <__alt_mem_mcu_subsystem_ram_0+0x7800730c>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   2734c:	e0bffe04 	addi	r2,fp,-8
   27350:	100b883a 	mov	r5,r2
   27354:	e13ffd17 	ldw	r4,-12(fp)
   27358:	0026c080 	call	26c08 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2735c:	e13ffd17 	ldw	r4,-12(fp)
   27360:	00264d00 	call	264d0 <alt_avalon_i2c_disable>
    }


    return status;
   27364:	e0bffe17 	ldw	r2,-8(fp)
}
   27368:	e037883a 	mov	sp,fp
   2736c:	dfc00117 	ldw	ra,4(sp)
   27370:	df000017 	ldw	fp,0(sp)
   27374:	dec00204 	addi	sp,sp,8
   27378:	f800283a 	ret

0002737c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2737c:	defff604 	addi	sp,sp,-40
   27380:	dfc00915 	stw	ra,36(sp)
   27384:	df000815 	stw	fp,32(sp)
   27388:	df000804 	addi	fp,sp,32
   2738c:	e13ffc15 	stw	r4,-16(fp)
   27390:	e17ffb15 	stw	r5,-20(fp)
   27394:	e1bffa15 	stw	r6,-24(fp)
   27398:	3807883a 	mov	r3,r7
   2739c:	e0800217 	ldw	r2,8(fp)
   273a0:	e0fff905 	stb	r3,-28(fp)
   273a4:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   273a8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
   273ac:	e0bffa17 	ldw	r2,-24(fp)
   273b0:	1089c424 	muli	r2,r2,10000
   273b4:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   273b8:	e0bffc17 	ldw	r2,-16(fp)
   273bc:	10800717 	ldw	r2,28(r2)
   273c0:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
   273c4:	e0bffa17 	ldw	r2,-24(fp)
   273c8:	1000021e 	bne	r2,zero,273d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   273cc:	0005883a 	mov	r2,zero
   273d0:	00006706 	br	27570 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   273d4:	e0bffc17 	ldw	r2,-16(fp)
   273d8:	10c00617 	ldw	r3,24(r2)
   273dc:	008000b4 	movhi	r2,2
   273e0:	10982f04 	addi	r2,r2,24764
   273e4:	18800226 	beq	r3,r2,273f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   273e8:	00bfff44 	movi	r2,-3
   273ec:	00006006 	br	27570 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   273f0:	e0bff903 	ldbu	r2,-28(fp)
   273f4:	10000a1e 	bne	r2,zero,27420 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   273f8:	e13ffc17 	ldw	r4,-16(fp)
   273fc:	00264380 	call	26438 <alt_avalon_i2c_enable>
   27400:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   27404:	e0bfff17 	ldw	r2,-4(fp)
   27408:	10000226 	beq	r2,zero,27414 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   2740c:	e0bfff17 	ldw	r2,-4(fp)
   27410:	00005706 	br	27570 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   27414:	01400704 	movi	r5,28
   27418:	e13ffc17 	ldw	r4,-16(fp)
   2741c:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   27420:	e0bff903 	ldbu	r2,-28(fp)
   27424:	100d883a 	mov	r6,r2
   27428:	000b883a 	mov	r5,zero
   2742c:	e13ffc17 	ldw	r4,-16(fp)
   27430:	0026aac0 	call	26aac <alt_avalon_i2c_send_address>
   27434:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   27438:	e0bfff17 	ldw	r2,-4(fp)
   2743c:	1000271e 	bne	r2,zero,274dc <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   27440:	00000f06 	br	27480 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   27444:	e0bffb17 	ldw	r2,-20(fp)
   27448:	10800003 	ldbu	r2,0(r2)
   2744c:	10803fcc 	andi	r2,r2,255
   27450:	000f883a 	mov	r7,zero
   27454:	000d883a 	mov	r6,zero
   27458:	100b883a 	mov	r5,r2
   2745c:	e13ffc17 	ldw	r4,-16(fp)
   27460:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   27464:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
   27468:	e0bffb17 	ldw	r2,-20(fp)
   2746c:	10800044 	addi	r2,r2,1
   27470:	e0bffb15 	stw	r2,-20(fp)
            --size;
   27474:	e0bffa17 	ldw	r2,-24(fp)
   27478:	10bfffc4 	addi	r2,r2,-1
   2747c:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   27480:	e0bffa17 	ldw	r2,-24(fp)
   27484:	108000b0 	cmpltui	r2,r2,2
   27488:	1000021e 	bne	r2,zero,27494 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   2748c:	e0bfff17 	ldw	r2,-4(fp)
   27490:	103fec26 	beq	r2,zero,27444 <__alt_mem_mcu_subsystem_ram_0+0x78007444>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   27494:	e0bfff17 	ldw	r2,-4(fp)
   27498:	1000101e 	bne	r2,zero,274dc <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2749c:	e0bffb17 	ldw	r2,-20(fp)
   274a0:	10800003 	ldbu	r2,0(r2)
   274a4:	10803fcc 	andi	r2,r2,255
   274a8:	e0fff803 	ldbu	r3,-32(fp)
   274ac:	180f883a 	mov	r7,r3
   274b0:	000d883a 	mov	r6,zero
   274b4:	100b883a 	mov	r5,r2
   274b8:	e13ffc17 	ldw	r4,-16(fp)
   274bc:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   274c0:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
   274c4:	e0bffb17 	ldw	r2,-20(fp)
   274c8:	10800044 	addi	r2,r2,1
   274cc:	e0bffb15 	stw	r2,-20(fp)
            --size;
   274d0:	e0bffa17 	ldw	r2,-24(fp)
   274d4:	10bfffc4 	addi	r2,r2,-1
   274d8:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   274dc:	e0bfff17 	ldw	r2,-4(fp)
   274e0:	10001426 	beq	r2,zero,27534 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   274e4:	00000d06 	br	2751c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   274e8:	e0bffe17 	ldw	r2,-8(fp)
   274ec:	108002a8 	cmpgeui	r2,r2,10
   274f0:	1000021e 	bne	r2,zero,274fc <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   274f4:	0109c404 	movi	r4,10000
   274f8:	003063c0 	call	3063c <alt_busy_sleep>
            if (--timeout == 0)
   274fc:	e0bffe17 	ldw	r2,-8(fp)
   27500:	10bfffc4 	addi	r2,r2,-1
   27504:	e0bffe15 	stw	r2,-8(fp)
   27508:	e0bffe17 	ldw	r2,-8(fp)
   2750c:	1000031e 	bne	r2,zero,2751c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   27510:	00bfff84 	movi	r2,-2
   27514:	e0bfff15 	stw	r2,-4(fp)
               break;
   27518:	00000306 	br	27528 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2751c:	e13ffc17 	ldw	r4,-16(fp)
   27520:	00268280 	call	26828 <alt_avalon_i2c_is_busy>
   27524:	103ff01e 	bne	r2,zero,274e8 <__alt_mem_mcu_subsystem_ram_0+0x780074e8>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   27528:	e13ffc17 	ldw	r4,-16(fp)
   2752c:	00264d00 	call	264d0 <alt_avalon_i2c_disable>
   27530:	00000e06 	br	2756c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   27534:	e0bff803 	ldbu	r2,-32(fp)
   27538:	10000c26 	beq	r2,zero,2756c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2753c:	01400704 	movi	r5,28
   27540:	e13ffc17 	ldw	r4,-16(fp)
   27544:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   27548:	000b883a 	mov	r5,zero
   2754c:	e13ffc17 	ldw	r4,-16(fp)
   27550:	0027c680 	call	27c68 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   27554:	e0bffd17 	ldw	r2,-12(fp)
   27558:	00c00044 	movi	r3,1
   2755c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   27560:	01400044 	movi	r5,1
   27564:	e13ffc17 	ldw	r4,-16(fp)
   27568:	0027ac00 	call	27ac0 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   2756c:	e0bfff17 	ldw	r2,-4(fp)
}
   27570:	e037883a 	mov	sp,fp
   27574:	dfc00117 	ldw	ra,4(sp)
   27578:	df000017 	ldw	fp,0(sp)
   2757c:	dec00204 	addi	sp,sp,8
   27580:	f800283a 	ret

00027584 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   27584:	defff404 	addi	sp,sp,-48
   27588:	dfc00b15 	stw	ra,44(sp)
   2758c:	df000a15 	stw	fp,40(sp)
   27590:	df000a04 	addi	fp,sp,40
   27594:	e13ffa15 	stw	r4,-24(fp)
   27598:	e17ff915 	stw	r5,-28(fp)
   2759c:	e1bff815 	stw	r6,-32(fp)
   275a0:	3807883a 	mov	r3,r7
   275a4:	e0800217 	ldw	r2,8(fp)
   275a8:	e0fff705 	stb	r3,-36(fp)
   275ac:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   275b0:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   275b4:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
   275b8:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   275bc:	e0bff817 	ldw	r2,-32(fp)
   275c0:	1000021e 	bne	r2,zero,275cc <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   275c4:	0005883a 	mov	r2,zero
   275c8:	00006c06 	br	2777c <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   275cc:	e0bff703 	ldbu	r2,-36(fp)
   275d0:	10000a1e 	bne	r2,zero,275fc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   275d4:	e13ffa17 	ldw	r4,-24(fp)
   275d8:	00264380 	call	26438 <alt_avalon_i2c_enable>
   275dc:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   275e0:	e0bffc17 	ldw	r2,-16(fp)
   275e4:	10000226 	beq	r2,zero,275f0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   275e8:	e0bffc17 	ldw	r2,-16(fp)
   275ec:	00006306 	br	2777c <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   275f0:	01400704 	movi	r5,28
   275f4:	e13ffa17 	ldw	r4,-24(fp)
   275f8:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   275fc:	e0bff703 	ldbu	r2,-36(fp)
   27600:	100d883a 	mov	r6,r2
   27604:	01400044 	movi	r5,1
   27608:	e13ffa17 	ldw	r4,-24(fp)
   2760c:	0026aac0 	call	26aac <alt_avalon_i2c_send_address>
   27610:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   27614:	e0bffc17 	ldw	r2,-16(fp)
   27618:	1000341e 	bne	r2,zero,276ec <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2761c:	00001906 	br	27684 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   27620:	000f883a 	mov	r7,zero
   27624:	000d883a 	mov	r6,zero
   27628:	000b883a 	mov	r5,zero
   2762c:	e13ffa17 	ldw	r4,-24(fp)
   27630:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   27634:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
   27638:	e0bffd17 	ldw	r2,-12(fp)
   2763c:	10800044 	addi	r2,r2,1
   27640:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   27644:	e0bffc17 	ldw	r2,-16(fp)
   27648:	10000e1e 	bne	r2,zero,27684 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2764c:	e0bffb04 	addi	r2,fp,-20
   27650:	100f883a 	mov	r7,r2
   27654:	000d883a 	mov	r6,zero
   27658:	e17ff917 	ldw	r5,-28(fp)
   2765c:	e13ffa17 	ldw	r4,-24(fp)
   27660:	002686c0 	call	2686c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   27664:	e0bffb17 	ldw	r2,-20(fp)
   27668:	e0fff917 	ldw	r3,-28(fp)
   2766c:	1885883a 	add	r2,r3,r2
   27670:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
   27674:	e0bffb17 	ldw	r2,-20(fp)
   27678:	e0fffe17 	ldw	r3,-8(fp)
   2767c:	1885883a 	add	r2,r3,r2
   27680:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   27684:	e0bff817 	ldw	r2,-32(fp)
   27688:	10bfffc4 	addi	r2,r2,-1
   2768c:	e0fffd17 	ldw	r3,-12(fp)
   27690:	1880022e 	bgeu	r3,r2,2769c <alt_avalon_i2c_master_receive+0x118>
   27694:	e0bffc17 	ldw	r2,-16(fp)
   27698:	103fe126 	beq	r2,zero,27620 <__alt_mem_mcu_subsystem_ram_0+0x78007620>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2769c:	e0bffc17 	ldw	r2,-16(fp)
   276a0:	1000121e 	bne	r2,zero,276ec <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   276a4:	e0bff603 	ldbu	r2,-40(fp)
   276a8:	100f883a 	mov	r7,r2
   276ac:	000d883a 	mov	r6,zero
   276b0:	000b883a 	mov	r5,zero
   276b4:	e13ffa17 	ldw	r4,-24(fp)
   276b8:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   276bc:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   276c0:	00000a06 	br	276ec <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   276c4:	e17ff917 	ldw	r5,-28(fp)
   276c8:	e13ffa17 	ldw	r4,-24(fp)
   276cc:	00269180 	call	26918 <alt_avalon_i2c_rx_read>
   276d0:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
   276d4:	e0bff917 	ldw	r2,-28(fp)
   276d8:	10800044 	addi	r2,r2,1
   276dc:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
   276e0:	e0bffe17 	ldw	r2,-8(fp)
   276e4:	10800044 	addi	r2,r2,1
   276e8:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   276ec:	e0fffe17 	ldw	r3,-8(fp)
   276f0:	e0bff817 	ldw	r2,-32(fp)
   276f4:	1880022e 	bgeu	r3,r2,27700 <alt_avalon_i2c_master_receive+0x17c>
   276f8:	e0bffc17 	ldw	r2,-16(fp)
   276fc:	103ff126 	beq	r2,zero,276c4 <__alt_mem_mcu_subsystem_ram_0+0x780076c4>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   27700:	e0bff603 	ldbu	r2,-40(fp)
   27704:	1000021e 	bne	r2,zero,27710 <alt_avalon_i2c_master_receive+0x18c>
   27708:	e0bffc17 	ldw	r2,-16(fp)
   2770c:	10001a26 	beq	r2,zero,27778 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   27710:	e0bff817 	ldw	r2,-32(fp)
   27714:	1089c424 	muli	r2,r2,10000
   27718:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2771c:	00000d06 	br	27754 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   27720:	e0bfff17 	ldw	r2,-4(fp)
   27724:	108002a8 	cmpgeui	r2,r2,10
   27728:	1000021e 	bne	r2,zero,27734 <alt_avalon_i2c_master_receive+0x1b0>
   2772c:	0109c404 	movi	r4,10000
   27730:	003063c0 	call	3063c <alt_busy_sleep>
            if (--timeout == 0)
   27734:	e0bfff17 	ldw	r2,-4(fp)
   27738:	10bfffc4 	addi	r2,r2,-1
   2773c:	e0bfff15 	stw	r2,-4(fp)
   27740:	e0bfff17 	ldw	r2,-4(fp)
   27744:	1000031e 	bne	r2,zero,27754 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   27748:	00bfff84 	movi	r2,-2
   2774c:	e0bffc15 	stw	r2,-16(fp)
               break;
   27750:	00000306 	br	27760 <alt_avalon_i2c_master_receive+0x1dc>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   27754:	e13ffa17 	ldw	r4,-24(fp)
   27758:	00268280 	call	26828 <alt_avalon_i2c_is_busy>
   2775c:	103ff01e 	bne	r2,zero,27720 <__alt_mem_mcu_subsystem_ram_0+0x78007720>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   27760:	e0bffc04 	addi	r2,fp,-16
   27764:	100b883a 	mov	r5,r2
   27768:	e13ffa17 	ldw	r4,-24(fp)
   2776c:	0026c080 	call	26c08 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   27770:	e13ffa17 	ldw	r4,-24(fp)
   27774:	00264d00 	call	264d0 <alt_avalon_i2c_disable>
    }

    return status;
   27778:	e0bffc17 	ldw	r2,-16(fp)
}
   2777c:	e037883a 	mov	sp,fp
   27780:	dfc00117 	ldw	ra,4(sp)
   27784:	df000017 	ldw	fp,0(sp)
   27788:	dec00204 	addi	sp,sp,8
   2778c:	f800283a 	ret

00027790 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   27790:	defff504 	addi	sp,sp,-44
   27794:	dfc00a15 	stw	ra,40(sp)
   27798:	df000915 	stw	fp,36(sp)
   2779c:	df000904 	addi	fp,sp,36
   277a0:	e13ffb15 	stw	r4,-20(fp)
   277a4:	e17ffa15 	stw	r5,-24(fp)
   277a8:	e1bff915 	stw	r6,-28(fp)
   277ac:	3807883a 	mov	r3,r7
   277b0:	e0800217 	ldw	r2,8(fp)
   277b4:	e0fff805 	stb	r3,-32(fp)
   277b8:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   277bc:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   277c0:	e0bffb17 	ldw	r2,-20(fp)
   277c4:	10800717 	ldw	r2,28(r2)
   277c8:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   277cc:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
   277d0:	e0bff917 	ldw	r2,-28(fp)
   277d4:	1000021e 	bne	r2,zero,277e0 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   277d8:	0005883a 	mov	r2,zero
   277dc:	00006206 	br	27968 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   277e0:	e0bffb17 	ldw	r2,-20(fp)
   277e4:	10c00617 	ldw	r3,24(r2)
   277e8:	008000b4 	movhi	r2,2
   277ec:	10982f04 	addi	r2,r2,24764
   277f0:	18800226 	beq	r3,r2,277fc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   277f4:	00bfff44 	movi	r2,-3
   277f8:	00005b06 	br	27968 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   277fc:	e0bff803 	ldbu	r2,-32(fp)
   27800:	10000a1e 	bne	r2,zero,2782c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   27804:	e13ffb17 	ldw	r4,-20(fp)
   27808:	00264380 	call	26438 <alt_avalon_i2c_enable>
   2780c:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   27810:	e0bfff17 	ldw	r2,-4(fp)
   27814:	10000226 	beq	r2,zero,27820 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   27818:	e0bfff17 	ldw	r2,-4(fp)
   2781c:	00005206 	br	27968 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   27820:	01400704 	movi	r5,28
   27824:	e13ffb17 	ldw	r4,-20(fp)
   27828:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2782c:	e0bff803 	ldbu	r2,-32(fp)
   27830:	100d883a 	mov	r6,r2
   27834:	01400044 	movi	r5,1
   27838:	e13ffb17 	ldw	r4,-20(fp)
   2783c:	0026aac0 	call	26aac <alt_avalon_i2c_send_address>
   27840:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   27844:	e0bfff17 	ldw	r2,-4(fp)
   27848:	1000191e 	bne	r2,zero,278b0 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2784c:	00000906 	br	27874 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   27850:	000f883a 	mov	r7,zero
   27854:	000d883a 	mov	r6,zero
   27858:	000b883a 	mov	r5,zero
   2785c:	e13ffb17 	ldw	r4,-20(fp)
   27860:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   27864:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
   27868:	e0bffd17 	ldw	r2,-12(fp)
   2786c:	10800044 	addi	r2,r2,1
   27870:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   27874:	e0bff917 	ldw	r2,-28(fp)
   27878:	10bfffc4 	addi	r2,r2,-1
   2787c:	e0fffd17 	ldw	r3,-12(fp)
   27880:	1880022e 	bgeu	r3,r2,2788c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   27884:	e0bfff17 	ldw	r2,-4(fp)
   27888:	103ff126 	beq	r2,zero,27850 <__alt_mem_mcu_subsystem_ram_0+0x78007850>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2788c:	e0bfff17 	ldw	r2,-4(fp)
   27890:	1000071e 	bne	r2,zero,278b0 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   27894:	e0bff703 	ldbu	r2,-36(fp)
   27898:	100f883a 	mov	r7,r2
   2789c:	000d883a 	mov	r6,zero
   278a0:	000b883a 	mov	r5,zero
   278a4:	e13ffb17 	ldw	r4,-20(fp)
   278a8:	00269c00 	call	269c0 <alt_avalon_i2c_cmd_write>
   278ac:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   278b0:	e0bfff17 	ldw	r2,-4(fp)
   278b4:	10001726 	beq	r2,zero,27914 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   278b8:	e0bff917 	ldw	r2,-28(fp)
   278bc:	1089c424 	muli	r2,r2,10000
   278c0:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   278c4:	00000d06 	br	278fc <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   278c8:	e0bffe17 	ldw	r2,-8(fp)
   278cc:	108002a8 	cmpgeui	r2,r2,10
   278d0:	1000021e 	bne	r2,zero,278dc <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   278d4:	0109c404 	movi	r4,10000
   278d8:	003063c0 	call	3063c <alt_busy_sleep>
            if (--timeout == 0)
   278dc:	e0bffe17 	ldw	r2,-8(fp)
   278e0:	10bfffc4 	addi	r2,r2,-1
   278e4:	e0bffe15 	stw	r2,-8(fp)
   278e8:	e0bffe17 	ldw	r2,-8(fp)
   278ec:	1000031e 	bne	r2,zero,278fc <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   278f0:	00bfff84 	movi	r2,-2
   278f4:	e0bfff15 	stw	r2,-4(fp)
               break;
   278f8:	00000306 	br	27908 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   278fc:	e13ffb17 	ldw	r4,-20(fp)
   27900:	00268280 	call	26828 <alt_avalon_i2c_is_busy>
   27904:	103ff01e 	bne	r2,zero,278c8 <__alt_mem_mcu_subsystem_ram_0+0x780078c8>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   27908:	e13ffb17 	ldw	r4,-20(fp)
   2790c:	00264d00 	call	264d0 <alt_avalon_i2c_disable>
   27910:	00001406 	br	27964 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   27914:	e0bff703 	ldbu	r2,-36(fp)
   27918:	10001226 	beq	r2,zero,27964 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2791c:	01400704 	movi	r5,28
   27920:	e13ffb17 	ldw	r4,-20(fp)
   27924:	0027a180 	call	27a18 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   27928:	000b883a 	mov	r5,zero
   2792c:	e13ffb17 	ldw	r4,-20(fp)
   27930:	0027bb80 	call	27bb8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   27934:	e0bffc17 	ldw	r2,-16(fp)
   27938:	00c00084 	movi	r3,2
   2793c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   27940:	e0bffc17 	ldw	r2,-16(fp)
   27944:	e0fffa17 	ldw	r3,-24(fp)
   27948:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   2794c:	e0bffc17 	ldw	r2,-16(fp)
   27950:	e0fff917 	ldw	r3,-28(fp)
   27954:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   27958:	01400084 	movi	r5,2
   2795c:	e13ffb17 	ldw	r4,-20(fp)
   27960:	0027ac00 	call	27ac0 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   27964:	e0bfff17 	ldw	r2,-4(fp)
}
   27968:	e037883a 	mov	sp,fp
   2796c:	dfc00117 	ldw	ra,4(sp)
   27970:	df000017 	ldw	fp,0(sp)
   27974:	dec00204 	addi	sp,sp,8
   27978:	f800283a 	ret

0002797c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   2797c:	defffd04 	addi	sp,sp,-12
   27980:	df000215 	stw	fp,8(sp)
   27984:	df000204 	addi	fp,sp,8
   27988:	e13fff15 	stw	r4,-4(fp)
   2798c:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   27990:	e0bfff17 	ldw	r2,-4(fp)
   27994:	10800317 	ldw	r2,12(r2)
   27998:	10800404 	addi	r2,r2,16
   2799c:	10c00037 	ldwio	r3,0(r2)
   279a0:	e0bfff17 	ldw	r2,-4(fp)
   279a4:	10800317 	ldw	r2,12(r2)
   279a8:	10800304 	addi	r2,r2,12
   279ac:	10800037 	ldwio	r2,0(r2)
   279b0:	1884703a 	and	r2,r3,r2
   279b4:	1007883a 	mov	r3,r2
   279b8:	e0bffe17 	ldw	r2,-8(fp)
   279bc:	10c00015 	stw	r3,0(r2)
}
   279c0:	0001883a 	nop
   279c4:	e037883a 	mov	sp,fp
   279c8:	df000017 	ldw	fp,0(sp)
   279cc:	dec00104 	addi	sp,sp,4
   279d0:	f800283a 	ret

000279d4 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   279d4:	defffd04 	addi	sp,sp,-12
   279d8:	df000215 	stw	fp,8(sp)
   279dc:	df000204 	addi	fp,sp,8
   279e0:	e13fff15 	stw	r4,-4(fp)
   279e4:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   279e8:	e0bfff17 	ldw	r2,-4(fp)
   279ec:	10800317 	ldw	r2,12(r2)
   279f0:	10800404 	addi	r2,r2,16
   279f4:	10800037 	ldwio	r2,0(r2)
   279f8:	1007883a 	mov	r3,r2
   279fc:	e0bffe17 	ldw	r2,-8(fp)
   27a00:	10c00015 	stw	r3,0(r2)
}
   27a04:	0001883a 	nop
   27a08:	e037883a 	mov	sp,fp
   27a0c:	df000017 	ldw	fp,0(sp)
   27a10:	dec00104 	addi	sp,sp,4
   27a14:	f800283a 	ret

00027a18 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   27a18:	defffd04 	addi	sp,sp,-12
   27a1c:	df000215 	stw	fp,8(sp)
   27a20:	df000204 	addi	fp,sp,8
   27a24:	e13fff15 	stw	r4,-4(fp)
   27a28:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   27a2c:	e0bfff17 	ldw	r2,-4(fp)
   27a30:	10800317 	ldw	r2,12(r2)
   27a34:	10800404 	addi	r2,r2,16
   27a38:	e0fffe17 	ldw	r3,-8(fp)
   27a3c:	10c00035 	stwio	r3,0(r2)
}
   27a40:	0001883a 	nop
   27a44:	e037883a 	mov	sp,fp
   27a48:	df000017 	ldw	fp,0(sp)
   27a4c:	dec00104 	addi	sp,sp,4
   27a50:	f800283a 	ret

00027a54 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   27a54:	defffb04 	addi	sp,sp,-20
   27a58:	dfc00415 	stw	ra,16(sp)
   27a5c:	df000315 	stw	fp,12(sp)
   27a60:	df000304 	addi	fp,sp,12
   27a64:	e13ffe15 	stw	r4,-8(fp)
   27a68:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   27a6c:	e0bfff04 	addi	r2,fp,-4
   27a70:	100b883a 	mov	r5,r2
   27a74:	e13ffe17 	ldw	r4,-8(fp)
   27a78:	0027b280 	call	27b28 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   27a7c:	e0bffd17 	ldw	r2,-12(fp)
   27a80:	0086303a 	nor	r3,zero,r2
   27a84:	e0bfff17 	ldw	r2,-4(fp)
   27a88:	1884703a 	and	r2,r3,r2
   27a8c:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   27a90:	e0bffe17 	ldw	r2,-8(fp)
   27a94:	10800317 	ldw	r2,12(r2)
   27a98:	10800304 	addi	r2,r2,12
   27a9c:	e0ffff17 	ldw	r3,-4(fp)
   27aa0:	18c007cc 	andi	r3,r3,31
   27aa4:	10c00035 	stwio	r3,0(r2)
}
   27aa8:	0001883a 	nop
   27aac:	e037883a 	mov	sp,fp
   27ab0:	dfc00117 	ldw	ra,4(sp)
   27ab4:	df000017 	ldw	fp,0(sp)
   27ab8:	dec00204 	addi	sp,sp,8
   27abc:	f800283a 	ret

00027ac0 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   27ac0:	defffb04 	addi	sp,sp,-20
   27ac4:	dfc00415 	stw	ra,16(sp)
   27ac8:	df000315 	stw	fp,12(sp)
   27acc:	df000304 	addi	fp,sp,12
   27ad0:	e13ffe15 	stw	r4,-8(fp)
   27ad4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   27ad8:	e0bfff04 	addi	r2,fp,-4
   27adc:	100b883a 	mov	r5,r2
   27ae0:	e13ffe17 	ldw	r4,-8(fp)
   27ae4:	0027b280 	call	27b28 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   27ae8:	e0ffff17 	ldw	r3,-4(fp)
   27aec:	e0bffd17 	ldw	r2,-12(fp)
   27af0:	1884b03a 	or	r2,r3,r2
   27af4:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   27af8:	e0bffe17 	ldw	r2,-8(fp)
   27afc:	10800317 	ldw	r2,12(r2)
   27b00:	10800304 	addi	r2,r2,12
   27b04:	e0ffff17 	ldw	r3,-4(fp)
   27b08:	18c007cc 	andi	r3,r3,31
   27b0c:	10c00035 	stwio	r3,0(r2)
}
   27b10:	0001883a 	nop
   27b14:	e037883a 	mov	sp,fp
   27b18:	dfc00117 	ldw	ra,4(sp)
   27b1c:	df000017 	ldw	fp,0(sp)
   27b20:	dec00204 	addi	sp,sp,8
   27b24:	f800283a 	ret

00027b28 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   27b28:	defffd04 	addi	sp,sp,-12
   27b2c:	df000215 	stw	fp,8(sp)
   27b30:	df000204 	addi	fp,sp,8
   27b34:	e13fff15 	stw	r4,-4(fp)
   27b38:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   27b3c:	e0bfff17 	ldw	r2,-4(fp)
   27b40:	10800317 	ldw	r2,12(r2)
   27b44:	10800304 	addi	r2,r2,12
   27b48:	10800037 	ldwio	r2,0(r2)
   27b4c:	10c007cc 	andi	r3,r2,31
   27b50:	e0bffe17 	ldw	r2,-8(fp)
   27b54:	10c00015 	stw	r3,0(r2)
}
   27b58:	0001883a 	nop
   27b5c:	e037883a 	mov	sp,fp
   27b60:	df000017 	ldw	fp,0(sp)
   27b64:	dec00104 	addi	sp,sp,4
   27b68:	f800283a 	ret

00027b6c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   27b6c:	defffd04 	addi	sp,sp,-12
   27b70:	df000215 	stw	fp,8(sp)
   27b74:	df000204 	addi	fp,sp,8
   27b78:	e13fff15 	stw	r4,-4(fp)
   27b7c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   27b80:	e0bfff17 	ldw	r2,-4(fp)
   27b84:	10800317 	ldw	r2,12(r2)
   27b88:	10800204 	addi	r2,r2,8
   27b8c:	10800037 	ldwio	r2,0(r2)
   27b90:	1005d13a 	srai	r2,r2,4
   27b94:	108000cc 	andi	r2,r2,3
   27b98:	1007883a 	mov	r3,r2
   27b9c:	e0bffe17 	ldw	r2,-8(fp)
   27ba0:	10c00015 	stw	r3,0(r2)
}
   27ba4:	0001883a 	nop
   27ba8:	e037883a 	mov	sp,fp
   27bac:	df000017 	ldw	fp,0(sp)
   27bb0:	dec00104 	addi	sp,sp,4
   27bb4:	f800283a 	ret

00027bb8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   27bb8:	defffd04 	addi	sp,sp,-12
   27bbc:	df000215 	stw	fp,8(sp)
   27bc0:	df000204 	addi	fp,sp,8
   27bc4:	e13fff15 	stw	r4,-4(fp)
   27bc8:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   27bcc:	e0bfff17 	ldw	r2,-4(fp)
   27bd0:	10800317 	ldw	r2,12(r2)
   27bd4:	10800204 	addi	r2,r2,8
   27bd8:	e0ffff17 	ldw	r3,-4(fp)
   27bdc:	18c00317 	ldw	r3,12(r3)
   27be0:	18c00204 	addi	r3,r3,8
   27be4:	18c00037 	ldwio	r3,0(r3)
   27be8:	1809883a 	mov	r4,r3
   27bec:	00fff3c4 	movi	r3,-49
   27bf0:	20c8703a 	and	r4,r4,r3
   27bf4:	e0fffe17 	ldw	r3,-8(fp)
   27bf8:	1806913a 	slli	r3,r3,4
   27bfc:	18c00c0c 	andi	r3,r3,48
   27c00:	20c6b03a 	or	r3,r4,r3
   27c04:	10c00035 	stwio	r3,0(r2)
}
   27c08:	0001883a 	nop
   27c0c:	e037883a 	mov	sp,fp
   27c10:	df000017 	ldw	fp,0(sp)
   27c14:	dec00104 	addi	sp,sp,4
   27c18:	f800283a 	ret

00027c1c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   27c1c:	defffd04 	addi	sp,sp,-12
   27c20:	df000215 	stw	fp,8(sp)
   27c24:	df000204 	addi	fp,sp,8
   27c28:	e13fff15 	stw	r4,-4(fp)
   27c2c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   27c30:	e0bfff17 	ldw	r2,-4(fp)
   27c34:	10800317 	ldw	r2,12(r2)
   27c38:	10800204 	addi	r2,r2,8
   27c3c:	10800037 	ldwio	r2,0(r2)
   27c40:	1005d0ba 	srai	r2,r2,2
   27c44:	108000cc 	andi	r2,r2,3
   27c48:	1007883a 	mov	r3,r2
   27c4c:	e0bffe17 	ldw	r2,-8(fp)
   27c50:	10c00015 	stw	r3,0(r2)
}
   27c54:	0001883a 	nop
   27c58:	e037883a 	mov	sp,fp
   27c5c:	df000017 	ldw	fp,0(sp)
   27c60:	dec00104 	addi	sp,sp,4
   27c64:	f800283a 	ret

00027c68 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   27c68:	defffd04 	addi	sp,sp,-12
   27c6c:	df000215 	stw	fp,8(sp)
   27c70:	df000204 	addi	fp,sp,8
   27c74:	e13fff15 	stw	r4,-4(fp)
   27c78:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   27c7c:	e0bfff17 	ldw	r2,-4(fp)
   27c80:	10800317 	ldw	r2,12(r2)
   27c84:	10800204 	addi	r2,r2,8
   27c88:	e0ffff17 	ldw	r3,-4(fp)
   27c8c:	18c00317 	ldw	r3,12(r3)
   27c90:	18c00204 	addi	r3,r3,8
   27c94:	18c00037 	ldwio	r3,0(r3)
   27c98:	1809883a 	mov	r4,r3
   27c9c:	00fffcc4 	movi	r3,-13
   27ca0:	20c8703a 	and	r4,r4,r3
   27ca4:	e0fffe17 	ldw	r3,-8(fp)
   27ca8:	180690ba 	slli	r3,r3,2
   27cac:	18c0030c 	andi	r3,r3,12
   27cb0:	20c6b03a 	or	r3,r4,r3
   27cb4:	10c00035 	stwio	r3,0(r2)
}
   27cb8:	0001883a 	nop
   27cbc:	e037883a 	mov	sp,fp
   27cc0:	df000017 	ldw	fp,0(sp)
   27cc4:	dec00104 	addi	sp,sp,4
   27cc8:	f800283a 	ret

00027ccc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   27ccc:	defffa04 	addi	sp,sp,-24
   27cd0:	dfc00515 	stw	ra,20(sp)
   27cd4:	df000415 	stw	fp,16(sp)
   27cd8:	df000404 	addi	fp,sp,16
   27cdc:	e13ffe15 	stw	r4,-8(fp)
   27ce0:	e17ffd15 	stw	r5,-12(fp)
   27ce4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   27ce8:	e0bffe17 	ldw	r2,-8(fp)
   27cec:	10800017 	ldw	r2,0(r2)
   27cf0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   27cf4:	e0bfff17 	ldw	r2,-4(fp)
   27cf8:	10c00a04 	addi	r3,r2,40
   27cfc:	e0bffe17 	ldw	r2,-8(fp)
   27d00:	10800217 	ldw	r2,8(r2)
   27d04:	100f883a 	mov	r7,r2
   27d08:	e1bffc17 	ldw	r6,-16(fp)
   27d0c:	e17ffd17 	ldw	r5,-12(fp)
   27d10:	1809883a 	mov	r4,r3
   27d14:	00283000 	call	28300 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   27d18:	e037883a 	mov	sp,fp
   27d1c:	dfc00117 	ldw	ra,4(sp)
   27d20:	df000017 	ldw	fp,0(sp)
   27d24:	dec00204 	addi	sp,sp,8
   27d28:	f800283a 	ret

00027d2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   27d2c:	defffa04 	addi	sp,sp,-24
   27d30:	dfc00515 	stw	ra,20(sp)
   27d34:	df000415 	stw	fp,16(sp)
   27d38:	df000404 	addi	fp,sp,16
   27d3c:	e13ffe15 	stw	r4,-8(fp)
   27d40:	e17ffd15 	stw	r5,-12(fp)
   27d44:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   27d48:	e0bffe17 	ldw	r2,-8(fp)
   27d4c:	10800017 	ldw	r2,0(r2)
   27d50:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   27d54:	e0bfff17 	ldw	r2,-4(fp)
   27d58:	10c00a04 	addi	r3,r2,40
   27d5c:	e0bffe17 	ldw	r2,-8(fp)
   27d60:	10800217 	ldw	r2,8(r2)
   27d64:	100f883a 	mov	r7,r2
   27d68:	e1bffc17 	ldw	r6,-16(fp)
   27d6c:	e17ffd17 	ldw	r5,-12(fp)
   27d70:	1809883a 	mov	r4,r3
   27d74:	002851c0 	call	2851c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   27d78:	e037883a 	mov	sp,fp
   27d7c:	dfc00117 	ldw	ra,4(sp)
   27d80:	df000017 	ldw	fp,0(sp)
   27d84:	dec00204 	addi	sp,sp,8
   27d88:	f800283a 	ret

00027d8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   27d8c:	defffc04 	addi	sp,sp,-16
   27d90:	dfc00315 	stw	ra,12(sp)
   27d94:	df000215 	stw	fp,8(sp)
   27d98:	df000204 	addi	fp,sp,8
   27d9c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   27da0:	e0bffe17 	ldw	r2,-8(fp)
   27da4:	10800017 	ldw	r2,0(r2)
   27da8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   27dac:	e0bfff17 	ldw	r2,-4(fp)
   27db0:	10c00a04 	addi	r3,r2,40
   27db4:	e0bffe17 	ldw	r2,-8(fp)
   27db8:	10800217 	ldw	r2,8(r2)
   27dbc:	100b883a 	mov	r5,r2
   27dc0:	1809883a 	mov	r4,r3
   27dc4:	00281a80 	call	281a8 <altera_avalon_jtag_uart_close>
}
   27dc8:	e037883a 	mov	sp,fp
   27dcc:	dfc00117 	ldw	ra,4(sp)
   27dd0:	df000017 	ldw	fp,0(sp)
   27dd4:	dec00204 	addi	sp,sp,8
   27dd8:	f800283a 	ret

00027ddc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   27ddc:	defffa04 	addi	sp,sp,-24
   27de0:	dfc00515 	stw	ra,20(sp)
   27de4:	df000415 	stw	fp,16(sp)
   27de8:	df000404 	addi	fp,sp,16
   27dec:	e13ffe15 	stw	r4,-8(fp)
   27df0:	e17ffd15 	stw	r5,-12(fp)
   27df4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   27df8:	e0bffe17 	ldw	r2,-8(fp)
   27dfc:	10800017 	ldw	r2,0(r2)
   27e00:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   27e04:	e0bfff17 	ldw	r2,-4(fp)
   27e08:	10800a04 	addi	r2,r2,40
   27e0c:	e1bffc17 	ldw	r6,-16(fp)
   27e10:	e17ffd17 	ldw	r5,-12(fp)
   27e14:	1009883a 	mov	r4,r2
   27e18:	00282100 	call	28210 <altera_avalon_jtag_uart_ioctl>
}
   27e1c:	e037883a 	mov	sp,fp
   27e20:	dfc00117 	ldw	ra,4(sp)
   27e24:	df000017 	ldw	fp,0(sp)
   27e28:	dec00204 	addi	sp,sp,8
   27e2c:	f800283a 	ret

00027e30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   27e30:	defffa04 	addi	sp,sp,-24
   27e34:	dfc00515 	stw	ra,20(sp)
   27e38:	df000415 	stw	fp,16(sp)
   27e3c:	df000404 	addi	fp,sp,16
   27e40:	e13fff15 	stw	r4,-4(fp)
   27e44:	e17ffe15 	stw	r5,-8(fp)
   27e48:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   27e4c:	e0bfff17 	ldw	r2,-4(fp)
   27e50:	00c00044 	movi	r3,1
   27e54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   27e58:	e0bfff17 	ldw	r2,-4(fp)
   27e5c:	10800017 	ldw	r2,0(r2)
   27e60:	10800104 	addi	r2,r2,4
   27e64:	1007883a 	mov	r3,r2
   27e68:	e0bfff17 	ldw	r2,-4(fp)
   27e6c:	10800817 	ldw	r2,32(r2)
   27e70:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   27e74:	e0bffe17 	ldw	r2,-8(fp)
   27e78:	e0fffd17 	ldw	r3,-12(fp)
   27e7c:	d8000015 	stw	zero,0(sp)
   27e80:	e1ffff17 	ldw	r7,-4(fp)
   27e84:	018000b4 	movhi	r6,2
   27e88:	319fbc04 	addi	r6,r6,32496
   27e8c:	180b883a 	mov	r5,r3
   27e90:	1009883a 	mov	r4,r2
   27e94:	00253400 	call	25340 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   27e98:	e0bfff17 	ldw	r2,-4(fp)
   27e9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   27ea0:	e0bfff17 	ldw	r2,-4(fp)
   27ea4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   27ea8:	d0e7b817 	ldw	r3,-24864(gp)
   27eac:	e1ffff17 	ldw	r7,-4(fp)
   27eb0:	018000f4 	movhi	r6,3
   27eb4:	31a04004 	addi	r6,r6,-32512
   27eb8:	180b883a 	mov	r5,r3
   27ebc:	1009883a 	mov	r4,r2
   27ec0:	00304e40 	call	304e4 <alt_alarm_start>
   27ec4:	1000040e 	bge	r2,zero,27ed8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   27ec8:	e0ffff17 	ldw	r3,-4(fp)
   27ecc:	00a00034 	movhi	r2,32768
   27ed0:	10bfffc4 	addi	r2,r2,-1
   27ed4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   27ed8:	0001883a 	nop
   27edc:	e037883a 	mov	sp,fp
   27ee0:	dfc00117 	ldw	ra,4(sp)
   27ee4:	df000017 	ldw	fp,0(sp)
   27ee8:	dec00204 	addi	sp,sp,8
   27eec:	f800283a 	ret

00027ef0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   27ef0:	defff704 	addi	sp,sp,-36
   27ef4:	df000815 	stw	fp,32(sp)
   27ef8:	df000804 	addi	fp,sp,32
   27efc:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   27f00:	e0bff817 	ldw	r2,-32(fp)
   27f04:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   27f08:	e0bffc17 	ldw	r2,-16(fp)
   27f0c:	10800017 	ldw	r2,0(r2)
   27f10:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   27f14:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   27f18:	e0bffb17 	ldw	r2,-20(fp)
   27f1c:	10800104 	addi	r2,r2,4
   27f20:	10800037 	ldwio	r2,0(r2)
   27f24:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   27f28:	e0bffa17 	ldw	r2,-24(fp)
   27f2c:	1080c00c 	andi	r2,r2,768
   27f30:	10006d26 	beq	r2,zero,280e8 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   27f34:	e0bffa17 	ldw	r2,-24(fp)
   27f38:	1080400c 	andi	r2,r2,256
   27f3c:	10003426 	beq	r2,zero,28010 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   27f40:	00800074 	movhi	r2,1
   27f44:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   27f48:	e0bffc17 	ldw	r2,-16(fp)
   27f4c:	10800a17 	ldw	r2,40(r2)
   27f50:	10800044 	addi	r2,r2,1
   27f54:	1081ffcc 	andi	r2,r2,2047
   27f58:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   27f5c:	e0bffc17 	ldw	r2,-16(fp)
   27f60:	10800b17 	ldw	r2,44(r2)
   27f64:	e0fff917 	ldw	r3,-28(fp)
   27f68:	18801426 	beq	r3,r2,27fbc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   27f6c:	e0bffb17 	ldw	r2,-20(fp)
   27f70:	10800037 	ldwio	r2,0(r2)
   27f74:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   27f78:	e0bffe17 	ldw	r2,-8(fp)
   27f7c:	10a0000c 	andi	r2,r2,32768
   27f80:	10001026 	beq	r2,zero,27fc4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   27f84:	e0bffc17 	ldw	r2,-16(fp)
   27f88:	10800a17 	ldw	r2,40(r2)
   27f8c:	e0fffe17 	ldw	r3,-8(fp)
   27f90:	1809883a 	mov	r4,r3
   27f94:	e0fffc17 	ldw	r3,-16(fp)
   27f98:	1885883a 	add	r2,r3,r2
   27f9c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   27fa0:	e0bffc17 	ldw	r2,-16(fp)
   27fa4:	10800a17 	ldw	r2,40(r2)
   27fa8:	10800044 	addi	r2,r2,1
   27fac:	10c1ffcc 	andi	r3,r2,2047
   27fb0:	e0bffc17 	ldw	r2,-16(fp)
   27fb4:	10c00a15 	stw	r3,40(r2)
      {
   27fb8:	003fe306 	br	27f48 <__alt_mem_mcu_subsystem_ram_0+0x78007f48>
          break;
   27fbc:	0001883a 	nop
   27fc0:	00000106 	br	27fc8 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   27fc4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   27fc8:	e0bffe17 	ldw	r2,-8(fp)
   27fcc:	10bfffec 	andhi	r2,r2,65535
   27fd0:	10000f26 	beq	r2,zero,28010 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   27fd4:	e0bffc17 	ldw	r2,-16(fp)
   27fd8:	10c00817 	ldw	r3,32(r2)
   27fdc:	00bfff84 	movi	r2,-2
   27fe0:	1886703a 	and	r3,r3,r2
   27fe4:	e0bffc17 	ldw	r2,-16(fp)
   27fe8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   27fec:	e0bffb17 	ldw	r2,-20(fp)
   27ff0:	10800104 	addi	r2,r2,4
   27ff4:	1007883a 	mov	r3,r2
   27ff8:	e0bffc17 	ldw	r2,-16(fp)
   27ffc:	10800817 	ldw	r2,32(r2)
   28000:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   28004:	e0bffb17 	ldw	r2,-20(fp)
   28008:	10800104 	addi	r2,r2,4
   2800c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   28010:	e0bffa17 	ldw	r2,-24(fp)
   28014:	1080800c 	andi	r2,r2,512
   28018:	103fbf26 	beq	r2,zero,27f18 <__alt_mem_mcu_subsystem_ram_0+0x78007f18>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2801c:	e0bffa17 	ldw	r2,-24(fp)
   28020:	1004d43a 	srli	r2,r2,16
   28024:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   28028:	00001506 	br	28080 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2802c:	e0bffb17 	ldw	r2,-20(fp)
   28030:	e0fffc17 	ldw	r3,-16(fp)
   28034:	18c00d17 	ldw	r3,52(r3)
   28038:	e13ffc17 	ldw	r4,-16(fp)
   2803c:	20c7883a 	add	r3,r4,r3
   28040:	18c20e03 	ldbu	r3,2104(r3)
   28044:	18c03fcc 	andi	r3,r3,255
   28048:	18c0201c 	xori	r3,r3,128
   2804c:	18ffe004 	addi	r3,r3,-128
   28050:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   28054:	e0bffc17 	ldw	r2,-16(fp)
   28058:	10800d17 	ldw	r2,52(r2)
   2805c:	10800044 	addi	r2,r2,1
   28060:	10c1ffcc 	andi	r3,r2,2047
   28064:	e0bffc17 	ldw	r2,-16(fp)
   28068:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   2806c:	00800044 	movi	r2,1
   28070:	e0bfff15 	stw	r2,-4(fp)

        space--;
   28074:	e0bffd17 	ldw	r2,-12(fp)
   28078:	10bfffc4 	addi	r2,r2,-1
   2807c:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   28080:	e0bffd17 	ldw	r2,-12(fp)
   28084:	10000526 	beq	r2,zero,2809c <altera_avalon_jtag_uart_irq+0x1ac>
   28088:	e0bffc17 	ldw	r2,-16(fp)
   2808c:	10c00d17 	ldw	r3,52(r2)
   28090:	e0bffc17 	ldw	r2,-16(fp)
   28094:	10800c17 	ldw	r2,48(r2)
   28098:	18bfe41e 	bne	r3,r2,2802c <__alt_mem_mcu_subsystem_ram_0+0x7800802c>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
      }

      if (space > 0)
   2809c:	e0bffd17 	ldw	r2,-12(fp)
   280a0:	103f9d26 	beq	r2,zero,27f18 <__alt_mem_mcu_subsystem_ram_0+0x78007f18>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   280a4:	e0bffc17 	ldw	r2,-16(fp)
   280a8:	10c00817 	ldw	r3,32(r2)
   280ac:	00bfff44 	movi	r2,-3
   280b0:	1886703a 	and	r3,r3,r2
   280b4:	e0bffc17 	ldw	r2,-16(fp)
   280b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   280bc:	e0bffc17 	ldw	r2,-16(fp)
   280c0:	10800017 	ldw	r2,0(r2)
   280c4:	10800104 	addi	r2,r2,4
   280c8:	1007883a 	mov	r3,r2
   280cc:	e0bffc17 	ldw	r2,-16(fp)
   280d0:	10800817 	ldw	r2,32(r2)
   280d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   280d8:	e0bffb17 	ldw	r2,-20(fp)
   280dc:	10800104 	addi	r2,r2,4
   280e0:	10800037 	ldwio	r2,0(r2)
  {
   280e4:	003f8c06 	br	27f18 <__alt_mem_mcu_subsystem_ram_0+0x78007f18>
      break;
   280e8:	0001883a 	nop
      }
    }
  }
}
   280ec:	0001883a 	nop
   280f0:	e037883a 	mov	sp,fp
   280f4:	df000017 	ldw	fp,0(sp)
   280f8:	dec00104 	addi	sp,sp,4
   280fc:	f800283a 	ret

00028100 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   28100:	defffc04 	addi	sp,sp,-16
   28104:	df000315 	stw	fp,12(sp)
   28108:	df000304 	addi	fp,sp,12
   2810c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   28110:	e0bffd17 	ldw	r2,-12(fp)
   28114:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   28118:	e0bfff17 	ldw	r2,-4(fp)
   2811c:	10800017 	ldw	r2,0(r2)
   28120:	10800104 	addi	r2,r2,4
   28124:	10800037 	ldwio	r2,0(r2)
   28128:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2812c:	e0bffe17 	ldw	r2,-8(fp)
   28130:	1081000c 	andi	r2,r2,1024
   28134:	10000b26 	beq	r2,zero,28164 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   28138:	e0bfff17 	ldw	r2,-4(fp)
   2813c:	10800017 	ldw	r2,0(r2)
   28140:	10800104 	addi	r2,r2,4
   28144:	1007883a 	mov	r3,r2
   28148:	e0bfff17 	ldw	r2,-4(fp)
   2814c:	10800817 	ldw	r2,32(r2)
   28150:	10810014 	ori	r2,r2,1024
   28154:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   28158:	e0bfff17 	ldw	r2,-4(fp)
   2815c:	10000915 	stw	zero,36(r2)
   28160:	00000c06 	br	28194 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   28164:	e0bfff17 	ldw	r2,-4(fp)
   28168:	10c00917 	ldw	r3,36(r2)
   2816c:	00a00034 	movhi	r2,32768
   28170:	10bfff04 	addi	r2,r2,-4
   28174:	10c00736 	bltu	r2,r3,28194 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   28178:	e0bfff17 	ldw	r2,-4(fp)
   2817c:	10800917 	ldw	r2,36(r2)
   28180:	10c00044 	addi	r3,r2,1
   28184:	e0bfff17 	ldw	r2,-4(fp)
   28188:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   2818c:	e0bfff17 	ldw	r2,-4(fp)
   28190:	10800917 	ldw	r2,36(r2)
   28194:	d0a7b817 	ldw	r2,-24864(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   28198:	e037883a 	mov	sp,fp
   2819c:	df000017 	ldw	fp,0(sp)
   281a0:	dec00104 	addi	sp,sp,4
   281a4:	f800283a 	ret

000281a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   281a8:	defffd04 	addi	sp,sp,-12
   281ac:	df000215 	stw	fp,8(sp)
   281b0:	df000204 	addi	fp,sp,8
   281b4:	e13fff15 	stw	r4,-4(fp)
   281b8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   281bc:	00000506 	br	281d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   281c0:	e0bffe17 	ldw	r2,-8(fp)
   281c4:	1090000c 	andi	r2,r2,16384
   281c8:	10000226 	beq	r2,zero,281d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   281cc:	00bffd44 	movi	r2,-11
   281d0:	00000b06 	br	28200 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   281d4:	e0bfff17 	ldw	r2,-4(fp)
   281d8:	10c00d17 	ldw	r3,52(r2)
   281dc:	e0bfff17 	ldw	r2,-4(fp)
   281e0:	10800c17 	ldw	r2,48(r2)
   281e4:	18800526 	beq	r3,r2,281fc <altera_avalon_jtag_uart_close+0x54>
   281e8:	e0bfff17 	ldw	r2,-4(fp)
   281ec:	10c00917 	ldw	r3,36(r2)
   281f0:	e0bfff17 	ldw	r2,-4(fp)
   281f4:	10800117 	ldw	r2,4(r2)
   281f8:	18bff136 	bltu	r3,r2,281c0 <__alt_mem_mcu_subsystem_ram_0+0x780081c0>
    }
  }

  return 0;
   281fc:	0005883a 	mov	r2,zero
}
   28200:	e037883a 	mov	sp,fp
   28204:	df000017 	ldw	fp,0(sp)
   28208:	dec00104 	addi	sp,sp,4
   2820c:	f800283a 	ret

00028210 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   28210:	defffa04 	addi	sp,sp,-24
   28214:	df000515 	stw	fp,20(sp)
   28218:	df000504 	addi	fp,sp,20
   2821c:	e13ffd15 	stw	r4,-12(fp)
   28220:	e17ffc15 	stw	r5,-16(fp)
   28224:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   28228:	00bff9c4 	movi	r2,-25
   2822c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   28230:	e0bffc17 	ldw	r2,-16(fp)
   28234:	10da8060 	cmpeqi	r3,r2,27137
   28238:	1800031e 	bne	r3,zero,28248 <altera_avalon_jtag_uart_ioctl+0x38>
   2823c:	109a80a0 	cmpeqi	r2,r2,27138
   28240:	1000181e 	bne	r2,zero,282a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   28244:	00002906 	br	282ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
   28248:	e0bffd17 	ldw	r2,-12(fp)
   2824c:	10c00117 	ldw	r3,4(r2)
   28250:	00a00034 	movhi	r2,32768
   28254:	10bfffc4 	addi	r2,r2,-1
   28258:	18802126 	beq	r3,r2,282e0 <altera_avalon_jtag_uart_ioctl+0xd0>
      int timeout = *((int *)arg);
   2825c:	e0bffb17 	ldw	r2,-20(fp)
   28260:	10800017 	ldw	r2,0(r2)
   28264:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   28268:	e0bffe17 	ldw	r2,-8(fp)
   2826c:	10800090 	cmplti	r2,r2,2
   28270:	1000061e 	bne	r2,zero,2828c <altera_avalon_jtag_uart_ioctl+0x7c>
   28274:	e0fffe17 	ldw	r3,-8(fp)
   28278:	00a00034 	movhi	r2,32768
   2827c:	10bfffc4 	addi	r2,r2,-1
   28280:	18800226 	beq	r3,r2,2828c <altera_avalon_jtag_uart_ioctl+0x7c>
   28284:	e0bffe17 	ldw	r2,-8(fp)
   28288:	00000206 	br	28294 <altera_avalon_jtag_uart_ioctl+0x84>
   2828c:	00a00034 	movhi	r2,32768
   28290:	10bfff84 	addi	r2,r2,-2
   28294:	e0fffd17 	ldw	r3,-12(fp)
   28298:	18800115 	stw	r2,4(r3)
      rc = 0;
   2829c:	e03fff15 	stw	zero,-4(fp)
    break;
   282a0:	00000f06 	br	282e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    if (sp->timeout != INT_MAX)
   282a4:	e0bffd17 	ldw	r2,-12(fp)
   282a8:	10c00117 	ldw	r3,4(r2)
   282ac:	00a00034 	movhi	r2,32768
   282b0:	10bfffc4 	addi	r2,r2,-1
   282b4:	18800c26 	beq	r3,r2,282e8 <altera_avalon_jtag_uart_ioctl+0xd8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   282b8:	e0bffd17 	ldw	r2,-12(fp)
   282bc:	10c00917 	ldw	r3,36(r2)
   282c0:	e0bffd17 	ldw	r2,-12(fp)
   282c4:	10800117 	ldw	r2,4(r2)
   282c8:	1885803a 	cmpltu	r2,r3,r2
   282cc:	10c03fcc 	andi	r3,r2,255
   282d0:	e0bffb17 	ldw	r2,-20(fp)
   282d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   282d8:	e03fff15 	stw	zero,-4(fp)
    break;
   282dc:	00000206 	br	282e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    break;
   282e0:	0001883a 	nop
   282e4:	00000106 	br	282ec <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   282e8:	0001883a 	nop
  }

  return rc;
   282ec:	e0bfff17 	ldw	r2,-4(fp)
}
   282f0:	e037883a 	mov	sp,fp
   282f4:	df000017 	ldw	fp,0(sp)
   282f8:	dec00104 	addi	sp,sp,4
   282fc:	f800283a 	ret

00028300 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   28300:	defff304 	addi	sp,sp,-52
   28304:	dfc00c15 	stw	ra,48(sp)
   28308:	df000b15 	stw	fp,44(sp)
   2830c:	df000b04 	addi	fp,sp,44
   28310:	e13ff815 	stw	r4,-32(fp)
   28314:	e17ff715 	stw	r5,-36(fp)
   28318:	e1bff615 	stw	r6,-40(fp)
   2831c:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   28320:	e0bff717 	ldw	r2,-36(fp)
   28324:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   28328:	00004706 	br	28448 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2832c:	e0bff817 	ldw	r2,-32(fp)
   28330:	10800a17 	ldw	r2,40(r2)
   28334:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   28338:	e0bff817 	ldw	r2,-32(fp)
   2833c:	10800b17 	ldw	r2,44(r2)
   28340:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   28344:	e0fffd17 	ldw	r3,-12(fp)
   28348:	e0bffc17 	ldw	r2,-16(fp)
   2834c:	18800536 	bltu	r3,r2,28364 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   28350:	e0fffd17 	ldw	r3,-12(fp)
   28354:	e0bffc17 	ldw	r2,-16(fp)
   28358:	1885c83a 	sub	r2,r3,r2
   2835c:	e0bffe15 	stw	r2,-8(fp)
   28360:	00000406 	br	28374 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   28364:	00c20004 	movi	r3,2048
   28368:	e0bffc17 	ldw	r2,-16(fp)
   2836c:	1885c83a 	sub	r2,r3,r2
   28370:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   28374:	e0bffe17 	ldw	r2,-8(fp)
   28378:	10001e26 	beq	r2,zero,283f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2837c:	e0fff617 	ldw	r3,-40(fp)
   28380:	e0bffe17 	ldw	r2,-8(fp)
   28384:	1880022e 	bgeu	r3,r2,28390 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   28388:	e0bff617 	ldw	r2,-40(fp)
   2838c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   28390:	e0bff817 	ldw	r2,-32(fp)
   28394:	10c00e04 	addi	r3,r2,56
   28398:	e0bffc17 	ldw	r2,-16(fp)
   2839c:	1885883a 	add	r2,r3,r2
   283a0:	e1bffe17 	ldw	r6,-8(fp)
   283a4:	100b883a 	mov	r5,r2
   283a8:	e13fff17 	ldw	r4,-4(fp)
   283ac:	0015ac00 	call	15ac0 <memcpy>
      ptr   += n;
   283b0:	e0ffff17 	ldw	r3,-4(fp)
   283b4:	e0bffe17 	ldw	r2,-8(fp)
   283b8:	1885883a 	add	r2,r3,r2
   283bc:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   283c0:	e0fff617 	ldw	r3,-40(fp)
   283c4:	e0bffe17 	ldw	r2,-8(fp)
   283c8:	1885c83a 	sub	r2,r3,r2
   283cc:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   283d0:	e0fffc17 	ldw	r3,-16(fp)
   283d4:	e0bffe17 	ldw	r2,-8(fp)
   283d8:	1885883a 	add	r2,r3,r2
   283dc:	10c1ffcc 	andi	r3,r2,2047
   283e0:	e0bff817 	ldw	r2,-32(fp)
   283e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   283e8:	e0bff617 	ldw	r2,-40(fp)
   283ec:	00bfcf16 	blt	zero,r2,2832c <__alt_mem_mcu_subsystem_ram_0+0x7800832c>
   283f0:	00000106 	br	283f8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   283f4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   283f8:	e0ffff17 	ldw	r3,-4(fp)
   283fc:	e0bff717 	ldw	r2,-36(fp)
   28400:	1880141e 	bne	r3,r2,28454 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   28404:	e0bff517 	ldw	r2,-44(fp)
   28408:	1090000c 	andi	r2,r2,16384
   2840c:	1000131e 	bne	r2,zero,2845c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   28410:	0001883a 	nop
   28414:	e0bff817 	ldw	r2,-32(fp)
   28418:	10800a17 	ldw	r2,40(r2)
   2841c:	e0fffd17 	ldw	r3,-12(fp)
   28420:	1880051e 	bne	r3,r2,28438 <altera_avalon_jtag_uart_read+0x138>
   28424:	e0bff817 	ldw	r2,-32(fp)
   28428:	10c00917 	ldw	r3,36(r2)
   2842c:	e0bff817 	ldw	r2,-32(fp)
   28430:	10800117 	ldw	r2,4(r2)
   28434:	18bff736 	bltu	r3,r2,28414 <__alt_mem_mcu_subsystem_ram_0+0x78008414>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   28438:	e0bff817 	ldw	r2,-32(fp)
   2843c:	10800a17 	ldw	r2,40(r2)
   28440:	e0fffd17 	ldw	r3,-12(fp)
   28444:	18800726 	beq	r3,r2,28464 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   28448:	e0bff617 	ldw	r2,-40(fp)
   2844c:	00bfb716 	blt	zero,r2,2832c <__alt_mem_mcu_subsystem_ram_0+0x7800832c>
   28450:	00000506 	br	28468 <altera_avalon_jtag_uart_read+0x168>
      break;
   28454:	0001883a 	nop
   28458:	00000306 	br	28468 <altera_avalon_jtag_uart_read+0x168>
      break;
   2845c:	0001883a 	nop
   28460:	00000106 	br	28468 <altera_avalon_jtag_uart_read+0x168>
      break;
   28464:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   28468:	e0ffff17 	ldw	r3,-4(fp)
   2846c:	e0bff717 	ldw	r2,-36(fp)
   28470:	18801826 	beq	r3,r2,284d4 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
   28474:	0005303a 	rdctl	r2,status
   28478:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2847c:	e0fff917 	ldw	r3,-28(fp)
   28480:	00bfff84 	movi	r2,-2
   28484:	1884703a 	and	r2,r3,r2
   28488:	1001703a 	wrctl	status,r2
  return context;
   2848c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   28490:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   28494:	e0bff817 	ldw	r2,-32(fp)
   28498:	10800817 	ldw	r2,32(r2)
   2849c:	10c00054 	ori	r3,r2,1
   284a0:	e0bff817 	ldw	r2,-32(fp)
   284a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   284a8:	e0bff817 	ldw	r2,-32(fp)
   284ac:	10800017 	ldw	r2,0(r2)
   284b0:	10800104 	addi	r2,r2,4
   284b4:	1007883a 	mov	r3,r2
   284b8:	e0bff817 	ldw	r2,-32(fp)
   284bc:	10800817 	ldw	r2,32(r2)
   284c0:	18800035 	stwio	r2,0(r3)
   284c4:	e0bffb17 	ldw	r2,-20(fp)
   284c8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   284cc:	e0bffa17 	ldw	r2,-24(fp)
   284d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   284d4:	e0ffff17 	ldw	r3,-4(fp)
   284d8:	e0bff717 	ldw	r2,-36(fp)
   284dc:	18800426 	beq	r3,r2,284f0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   284e0:	e0ffff17 	ldw	r3,-4(fp)
   284e4:	e0bff717 	ldw	r2,-36(fp)
   284e8:	1885c83a 	sub	r2,r3,r2
   284ec:	00000606 	br	28508 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   284f0:	e0bff517 	ldw	r2,-44(fp)
   284f4:	1090000c 	andi	r2,r2,16384
   284f8:	10000226 	beq	r2,zero,28504 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   284fc:	00bffd44 	movi	r2,-11
   28500:	00000106 	br	28508 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   28504:	00bffec4 	movi	r2,-5
}
   28508:	e037883a 	mov	sp,fp
   2850c:	dfc00117 	ldw	ra,4(sp)
   28510:	df000017 	ldw	fp,0(sp)
   28514:	dec00204 	addi	sp,sp,8
   28518:	f800283a 	ret

0002851c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2851c:	defff304 	addi	sp,sp,-52
   28520:	dfc00c15 	stw	ra,48(sp)
   28524:	df000b15 	stw	fp,44(sp)
   28528:	df000b04 	addi	fp,sp,44
   2852c:	e13ff815 	stw	r4,-32(fp)
   28530:	e17ff715 	stw	r5,-36(fp)
   28534:	e1bff615 	stw	r6,-40(fp)
   28538:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2853c:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   28540:	e0bff717 	ldw	r2,-36(fp)
   28544:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   28548:	00003706 	br	28628 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2854c:	e0bff817 	ldw	r2,-32(fp)
   28550:	10800c17 	ldw	r2,48(r2)
   28554:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   28558:	e0bff817 	ldw	r2,-32(fp)
   2855c:	10800d17 	ldw	r2,52(r2)
   28560:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   28564:	e0fffc17 	ldw	r3,-16(fp)
   28568:	e0bfff17 	ldw	r2,-4(fp)
   2856c:	1880062e 	bgeu	r3,r2,28588 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   28570:	e0ffff17 	ldw	r3,-4(fp)
   28574:	e0bffc17 	ldw	r2,-16(fp)
   28578:	1885c83a 	sub	r2,r3,r2
   2857c:	10bfffc4 	addi	r2,r2,-1
   28580:	e0bffe15 	stw	r2,-8(fp)
   28584:	00000b06 	br	285b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   28588:	e0bfff17 	ldw	r2,-4(fp)
   2858c:	10000526 	beq	r2,zero,285a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   28590:	00c20004 	movi	r3,2048
   28594:	e0bffc17 	ldw	r2,-16(fp)
   28598:	1885c83a 	sub	r2,r3,r2
   2859c:	e0bffe15 	stw	r2,-8(fp)
   285a0:	00000406 	br	285b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   285a4:	00c1ffc4 	movi	r3,2047
   285a8:	e0bffc17 	ldw	r2,-16(fp)
   285ac:	1885c83a 	sub	r2,r3,r2
   285b0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   285b4:	e0bffe17 	ldw	r2,-8(fp)
   285b8:	10001e26 	beq	r2,zero,28634 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   285bc:	e0fff617 	ldw	r3,-40(fp)
   285c0:	e0bffe17 	ldw	r2,-8(fp)
   285c4:	1880022e 	bgeu	r3,r2,285d0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   285c8:	e0bff617 	ldw	r2,-40(fp)
   285cc:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   285d0:	e0bff817 	ldw	r2,-32(fp)
   285d4:	10c20e04 	addi	r3,r2,2104
   285d8:	e0bffc17 	ldw	r2,-16(fp)
   285dc:	1885883a 	add	r2,r3,r2
   285e0:	e1bffe17 	ldw	r6,-8(fp)
   285e4:	e17ff717 	ldw	r5,-36(fp)
   285e8:	1009883a 	mov	r4,r2
   285ec:	0015ac00 	call	15ac0 <memcpy>
      ptr   += n;
   285f0:	e0fff717 	ldw	r3,-36(fp)
   285f4:	e0bffe17 	ldw	r2,-8(fp)
   285f8:	1885883a 	add	r2,r3,r2
   285fc:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   28600:	e0fff617 	ldw	r3,-40(fp)
   28604:	e0bffe17 	ldw	r2,-8(fp)
   28608:	1885c83a 	sub	r2,r3,r2
   2860c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   28610:	e0fffc17 	ldw	r3,-16(fp)
   28614:	e0bffe17 	ldw	r2,-8(fp)
   28618:	1885883a 	add	r2,r3,r2
   2861c:	10c1ffcc 	andi	r3,r2,2047
   28620:	e0bff817 	ldw	r2,-32(fp)
   28624:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   28628:	e0bff617 	ldw	r2,-40(fp)
   2862c:	00bfc716 	blt	zero,r2,2854c <__alt_mem_mcu_subsystem_ram_0+0x7800854c>
   28630:	00000106 	br	28638 <altera_avalon_jtag_uart_write+0x11c>
        break;
   28634:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   28638:	0005303a 	rdctl	r2,status
   2863c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28640:	e0fff917 	ldw	r3,-28(fp)
   28644:	00bfff84 	movi	r2,-2
   28648:	1884703a 	and	r2,r3,r2
   2864c:	1001703a 	wrctl	status,r2
  return context;
   28650:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   28654:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   28658:	e0bff817 	ldw	r2,-32(fp)
   2865c:	10800817 	ldw	r2,32(r2)
   28660:	10c00094 	ori	r3,r2,2
   28664:	e0bff817 	ldw	r2,-32(fp)
   28668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2866c:	e0bff817 	ldw	r2,-32(fp)
   28670:	10800017 	ldw	r2,0(r2)
   28674:	10800104 	addi	r2,r2,4
   28678:	1007883a 	mov	r3,r2
   2867c:	e0bff817 	ldw	r2,-32(fp)
   28680:	10800817 	ldw	r2,32(r2)
   28684:	18800035 	stwio	r2,0(r3)
   28688:	e0bffb17 	ldw	r2,-20(fp)
   2868c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   28690:	e0bffa17 	ldw	r2,-24(fp)
   28694:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   28698:	e0bff617 	ldw	r2,-40(fp)
   2869c:	0080100e 	bge	zero,r2,286e0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   286a0:	e0bff517 	ldw	r2,-44(fp)
   286a4:	1090000c 	andi	r2,r2,16384
   286a8:	1000101e 	bne	r2,zero,286ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   286ac:	0001883a 	nop
   286b0:	e0bff817 	ldw	r2,-32(fp)
   286b4:	10800d17 	ldw	r2,52(r2)
   286b8:	e0ffff17 	ldw	r3,-4(fp)
   286bc:	1880051e 	bne	r3,r2,286d4 <altera_avalon_jtag_uart_write+0x1b8>
   286c0:	e0bff817 	ldw	r2,-32(fp)
   286c4:	10c00917 	ldw	r3,36(r2)
   286c8:	e0bff817 	ldw	r2,-32(fp)
   286cc:	10800117 	ldw	r2,4(r2)
   286d0:	18bff736 	bltu	r3,r2,286b0 <__alt_mem_mcu_subsystem_ram_0+0x780086b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   286d4:	e0bff817 	ldw	r2,-32(fp)
   286d8:	10800917 	ldw	r2,36(r2)
   286dc:	1000051e 	bne	r2,zero,286f4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   286e0:	e0bff617 	ldw	r2,-40(fp)
   286e4:	00bfd016 	blt	zero,r2,28628 <__alt_mem_mcu_subsystem_ram_0+0x78008628>
   286e8:	00000306 	br	286f8 <altera_avalon_jtag_uart_write+0x1dc>
        break;
   286ec:	0001883a 	nop
   286f0:	00000106 	br	286f8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
   286f4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   286f8:	e0fff717 	ldw	r3,-36(fp)
   286fc:	e0bffd17 	ldw	r2,-12(fp)
   28700:	18800426 	beq	r3,r2,28714 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   28704:	e0fff717 	ldw	r3,-36(fp)
   28708:	e0bffd17 	ldw	r2,-12(fp)
   2870c:	1885c83a 	sub	r2,r3,r2
   28710:	00000606 	br	2872c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   28714:	e0bff517 	ldw	r2,-44(fp)
   28718:	1090000c 	andi	r2,r2,16384
   2871c:	10000226 	beq	r2,zero,28728 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   28720:	00bffd44 	movi	r2,-11
   28724:	00000106 	br	2872c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   28728:	00bffec4 	movi	r2,-5
}
   2872c:	e037883a 	mov	sp,fp
   28730:	dfc00117 	ldw	ra,4(sp)
   28734:	df000017 	ldw	fp,0(sp)
   28738:	dec00204 	addi	sp,sp,8
   2873c:	f800283a 	ret

00028740 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   28740:	defffa04 	addi	sp,sp,-24
   28744:	dfc00515 	stw	ra,20(sp)
   28748:	df000415 	stw	fp,16(sp)
   2874c:	df000404 	addi	fp,sp,16
   28750:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   28754:	0007883a 	mov	r3,zero
   28758:	e0bffc17 	ldw	r2,-16(fp)
   2875c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   28760:	e0bffc17 	ldw	r2,-16(fp)
   28764:	10800104 	addi	r2,r2,4
   28768:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   2876c:	0005303a 	rdctl	r2,status
   28770:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28774:	e0fffd17 	ldw	r3,-12(fp)
   28778:	00bfff84 	movi	r2,-2
   2877c:	1884703a 	and	r2,r3,r2
   28780:	1001703a 	wrctl	status,r2
  return context;
   28784:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   28788:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   2878c:	00310240 	call	31024 <alt_tick>
   28790:	e0bfff17 	ldw	r2,-4(fp)
   28794:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   28798:	e0bffe17 	ldw	r2,-8(fp)
   2879c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   287a0:	0001883a 	nop
   287a4:	e037883a 	mov	sp,fp
   287a8:	dfc00117 	ldw	ra,4(sp)
   287ac:	df000017 	ldw	fp,0(sp)
   287b0:	dec00204 	addi	sp,sp,8
   287b4:	f800283a 	ret

000287b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   287b8:	defff804 	addi	sp,sp,-32
   287bc:	dfc00715 	stw	ra,28(sp)
   287c0:	df000615 	stw	fp,24(sp)
   287c4:	df000604 	addi	fp,sp,24
   287c8:	e13ffe15 	stw	r4,-8(fp)
   287cc:	e17ffd15 	stw	r5,-12(fp)
   287d0:	e1bffc15 	stw	r6,-16(fp)
   287d4:	e1fffb15 	stw	r7,-20(fp)
   287d8:	e0bffb17 	ldw	r2,-20(fp)
   287dc:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   287e0:	d0a7b817 	ldw	r2,-24864(gp)
   287e4:	1000021e 	bne	r2,zero,287f0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   287e8:	e0bfff17 	ldw	r2,-4(fp)
   287ec:	d0a7b815 	stw	r2,-24864(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   287f0:	e0bffe17 	ldw	r2,-8(fp)
   287f4:	10800104 	addi	r2,r2,4
   287f8:	00c001c4 	movi	r3,7
   287fc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   28800:	d8000015 	stw	zero,0(sp)
   28804:	e1fffe17 	ldw	r7,-8(fp)
   28808:	018000f4 	movhi	r6,3
   2880c:	31a1d004 	addi	r6,r6,-30912
   28810:	e17ffc17 	ldw	r5,-16(fp)
   28814:	e13ffd17 	ldw	r4,-12(fp)
   28818:	00253400 	call	25340 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2881c:	0001883a 	nop
   28820:	e037883a 	mov	sp,fp
   28824:	dfc00117 	ldw	ra,4(sp)
   28828:	df000017 	ldw	fp,0(sp)
   2882c:	dec00204 	addi	sp,sp,8
   28830:	f800283a 	ret

00028834 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   28834:	defffe04 	addi	sp,sp,-8
   28838:	df000115 	stw	fp,4(sp)
   2883c:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   28840:	d0a7b417 	ldw	r2,-24880(gp)
   28844:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   28848:	d0a7b517 	ldw	r2,-24876(gp)
   2884c:	1000021e 	bne	r2,zero,28858 <alt_timestamp_start+0x24>
  {
    return -1;
   28850:	00bfffc4 	movi	r2,-1
   28854:	00001906 	br	288bc <alt_timestamp_start+0x88>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   28858:	e0bfff17 	ldw	r2,-4(fp)
   2885c:	10800104 	addi	r2,r2,4
   28860:	00c00204 	movi	r3,8
   28864:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
   28868:	e0bfff17 	ldw	r2,-4(fp)
   2886c:	10800204 	addi	r2,r2,8
   28870:	00ffffd4 	movui	r3,65535
   28874:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
   28878:	e0bfff17 	ldw	r2,-4(fp)
   2887c:	10800304 	addi	r2,r2,12
   28880:	00ffffd4 	movui	r3,65535
   28884:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
   28888:	e0bfff17 	ldw	r2,-4(fp)
   2888c:	10800404 	addi	r2,r2,16
   28890:	00ffffd4 	movui	r3,65535
   28894:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
   28898:	e0bfff17 	ldw	r2,-4(fp)
   2889c:	10800504 	addi	r2,r2,20
   288a0:	00ffffd4 	movui	r3,65535
   288a4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
   288a8:	e0bfff17 	ldw	r2,-4(fp)
   288ac:	10800104 	addi	r2,r2,4
   288b0:	00c00104 	movi	r3,4
   288b4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
   288b8:	0005883a 	mov	r2,zero
}
   288bc:	e037883a 	mov	sp,fp
   288c0:	df000017 	ldw	fp,0(sp)
   288c4:	dec00104 	addi	sp,sp,4
   288c8:	f800283a 	ret

000288cc <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   288cc:	deffeb04 	addi	sp,sp,-84
   288d0:	dfc01415 	stw	ra,80(sp)
   288d4:	df001315 	stw	fp,76(sp)
   288d8:	ddc01215 	stw	r23,72(sp)
   288dc:	dd801115 	stw	r22,68(sp)
   288e0:	dd401015 	stw	r21,64(sp)
   288e4:	dd000f15 	stw	r20,60(sp)
   288e8:	dcc00e15 	stw	r19,56(sp)
   288ec:	dc800d15 	stw	r18,52(sp)
   288f0:	dc400c15 	stw	r17,48(sp)
   288f4:	dc000b15 	stw	r16,44(sp)
   288f8:	df001304 	addi	fp,sp,76

  void* base = altera_avalon_timer_ts_base;
   288fc:	d7e7b417 	ldw	ra,-24880(gp)
   28900:	e7fff715 	stw	ra,-36(fp)

  if (!altera_avalon_timer_ts_freq)
   28904:	d7e7b517 	ldw	ra,-24876(gp)
   28908:	f800031e 	bne	ra,zero,28918 <alt_timestamp+0x4c>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
   2890c:	013fffc4 	movi	r4,-1
   28910:	017fffc4 	movi	r5,-1
   28914:	00004706 	br	28a34 <alt_timestamp+0x168>
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
   28918:	e7fff717 	ldw	ra,-36(fp)
   2891c:	ffc00604 	addi	ra,ra,24
   28920:	000d883a 	mov	r6,zero
   28924:	f9800035 	stwio	r6,0(ra)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
   28928:	e7fff717 	ldw	ra,-36(fp)
   2892c:	ffc00604 	addi	ra,ra,24
   28930:	ffc00037 	ldwio	ra,0(ra)
   28934:	f82d883a 	mov	r22,ra
   28938:	f83fd7fa 	srai	ra,ra,31
   2893c:	f82f883a 	mov	r23,ra
   28940:	b7ffffcc 	andi	ra,r22,65535
   28944:	e7fff515 	stw	ra,-44(fp)
   28948:	b82c703a 	and	r22,r23,zero
   2894c:	e5bff615 	stw	r22,-40(fp)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
   28950:	e5bff717 	ldw	r22,-36(fp)
   28954:	b5800704 	addi	r22,r22,28
   28958:	b5800037 	ldwio	r22,0(r22)
   2895c:	b029883a 	mov	r20,r22
   28960:	b02dd7fa 	srai	r22,r22,31
   28964:	b02b883a 	mov	r21,r22
   28968:	a5bfffcc 	andi	r22,r20,65535
   2896c:	e5bff315 	stw	r22,-52(fp)
   28970:	a828703a 	and	r20,r21,zero
   28974:	e53ff415 	stw	r20,-48(fp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
   28978:	e53ff717 	ldw	r20,-36(fp)
   2897c:	a5000804 	addi	r20,r20,32
   28980:	a5000037 	ldwio	r20,0(r20)
   28984:	a025883a 	mov	r18,r20
   28988:	a029d7fa 	srai	r20,r20,31
   2898c:	a027883a 	mov	r19,r20
   28990:	953fffcc 	andi	r20,r18,65535
   28994:	e53ff115 	stw	r20,-60(fp)
   28998:	9824703a 	and	r18,r19,zero
   2899c:	e4bff215 	stw	r18,-56(fp)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
   289a0:	e4bff717 	ldw	r18,-36(fp)
   289a4:	94800904 	addi	r18,r18,36
   289a8:	94800037 	ldwio	r18,0(r18)
   289ac:	9021883a 	mov	r16,r18
   289b0:	9025d7fa 	srai	r18,r18,31
   289b4:	9023883a 	mov	r17,r18
   289b8:	84bfffcc 	andi	r18,r16,65535
   289bc:	e4bfef15 	stw	r18,-68(fp)
   289c0:	8820703a 	and	r16,r17,zero
   289c4:	e43ff015 	stw	r16,-64(fp)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
   289c8:	e43fef17 	ldw	r16,-68(fp)
   289cc:	801e943a 	slli	r15,r16,16
   289d0:	001d883a 	mov	r14,zero
   289d4:	e43ff117 	ldw	r16,-60(fp)
   289d8:	801a983a 	sll	r13,r16,zero
   289dc:	0019883a 	mov	r12,zero
   289e0:	7314b03a 	or	r10,r14,r12
   289e4:	7b56b03a 	or	r11,r15,r13
   289e8:	e33ff317 	ldw	r12,-52(fp)
   289ec:	6018d43a 	srli	r12,r12,16
   289f0:	e37ff417 	ldw	r13,-48(fp)
   289f4:	6806943a 	slli	r3,r13,16
   289f8:	60c6b03a 	or	r3,r12,r3
   289fc:	e33ff317 	ldw	r12,-52(fp)
   28a00:	6004943a 	slli	r2,r12,16
   28a04:	5090b03a 	or	r8,r10,r2
   28a08:	58d2b03a 	or	r9,r11,r3
   28a0c:	e0bff517 	ldw	r2,-44(fp)
   28a10:	1204b03a 	or	r2,r2,r8
   28a14:	e0bfed15 	stw	r2,-76(fp)
   28a18:	e0bff617 	ldw	r2,-40(fp)
   28a1c:	1244b03a 	or	r2,r2,r9
   28a20:	e0bfee15 	stw	r2,-72(fp)
   28a24:	e0bfed17 	ldw	r2,-76(fp)
   28a28:	0088303a 	nor	r4,zero,r2
   28a2c:	e0bfee17 	ldw	r2,-72(fp)
   28a30:	008a303a 	nor	r5,zero,r2
   28a34:	200d883a 	mov	r6,r4
   28a38:	280f883a 	mov	r7,r5
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
   28a3c:	3005883a 	mov	r2,r6
   28a40:	3807883a 	mov	r3,r7
   28a44:	e6fff804 	addi	sp,fp,-32
   28a48:	dfc00917 	ldw	ra,36(sp)
   28a4c:	df000817 	ldw	fp,32(sp)
   28a50:	ddc00717 	ldw	r23,28(sp)
   28a54:	dd800617 	ldw	r22,24(sp)
   28a58:	dd400517 	ldw	r21,20(sp)
   28a5c:	dd000417 	ldw	r20,16(sp)
   28a60:	dcc00317 	ldw	r19,12(sp)
   28a64:	dc800217 	ldw	r18,8(sp)
   28a68:	dc400117 	ldw	r17,4(sp)
   28a6c:	dc000017 	ldw	r16,0(sp)
   28a70:	dec00a04 	addi	sp,sp,40
   28a74:	f800283a 	ret

00028a78 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   28a78:	deffff04 	addi	sp,sp,-4
   28a7c:	df000015 	stw	fp,0(sp)
   28a80:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   28a84:	d0a7b517 	ldw	r2,-24876(gp)
}
   28a88:	e037883a 	mov	sp,fp
   28a8c:	df000017 	ldw	fp,0(sp)
   28a90:	dec00104 	addi	sp,sp,4
   28a94:	f800283a 	ret

00028a98 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
   28a98:	defffb04 	addi	sp,sp,-20
   28a9c:	df000115 	stw	fp,4(sp)
   28aa0:	df000104 	addi	fp,sp,4
   28aa4:	e13fff15 	stw	r4,-4(fp)
   28aa8:	e1400115 	stw	r5,4(fp)
   28aac:	e1800215 	stw	r6,8(fp)
   28ab0:	e1c00315 	stw	r7,12(fp)
   28ab4:	0001883a 	nop
   28ab8:	e037883a 	mov	sp,fp
   28abc:	df000017 	ldw	fp,0(sp)
   28ac0:	dec00404 	addi	sp,sp,16
   28ac4:	f800283a 	ret

00028ac8 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_msgdma,
                                        alt_32 rx_msgdma,
                                        alt_32 cfgflags) {
   28ac8:	defffb04 	addi	sp,sp,-20
   28acc:	df000415 	stw	fp,16(sp)
   28ad0:	df000404 	addi	fp,sp,16
   28ad4:	e13fff15 	stw	r4,-4(fp)
   28ad8:	e17ffe15 	stw	r5,-8(fp)
   28adc:	e1bffd15 	stw	r6,-12(fp)
   28ae0:	e1fffc15 	stw	r7,-16(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
   28ae4:	e0fffe17 	ldw	r3,-8(fp)
   28ae8:	e0bfff17 	ldw	r2,-4(fp)
   28aec:	10c00015 	stw	r3,0(r2)
        mi->tx_msgdma = (alt_msgdma_dev *)tx_msgdma;
   28af0:	e0fffd17 	ldw	r3,-12(fp)
   28af4:	e0bfff17 	ldw	r2,-4(fp)
   28af8:	10c00115 	stw	r3,4(r2)
        mi->rx_msgdma = (alt_msgdma_dev *)rx_msgdma;
   28afc:	e0fffc17 	ldw	r3,-16(fp)
   28b00:	e0bfff17 	ldw	r2,-4(fp)
   28b04:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
   28b08:	e0c00117 	ldw	r3,4(fp)
   28b0c:	e0bfff17 	ldw	r2,-4(fp)
   28b10:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
   28b14:	0005883a 	mov	r2,zero
}
   28b18:	e037883a 	mov	sp,fp
   28b1c:	df000017 	ldw	fp,0(sp)
   28b20:	dec00104 	addi	sp,sp,4
   28b24:	f800283a 	ret

00028b28 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit MSGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_msgdma_standard_descriptor *txDesc)   
{ 
   28b28:	defffa04 	addi	sp,sp,-24
   28b2c:	dfc00515 	stw	ra,20(sp)
   28b30:	df000415 	stw	fp,16(sp)
   28b34:	df000404 	addi	fp,sp,16
   28b38:	e13ffd15 	stw	r4,-12(fp)
   28b3c:	e17ffc15 	stw	r5,-16(fp)

  alt_32 timeout;
  alt_u8 result = 0;
   28b40:	e03ffec5 	stb	zero,-5(fp)
  
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
   28b44:	e03fff15 	stw	zero,-4(fp)
  while ( (IORD_ALTERA_MSGDMA_CSR_STATUS(mi->tx_msgdma->csr_base) & 
   28b48:	00000b06 	br	28b78 <tse_mac_sTxWrite+0x50>
           ALTERA_MSGDMA_CSR_BUSY_MASK) ) {
           if(timeout++ == ALTERA_TSE_MSGDMA_BUSY_TIME_OUT_CNT) {
   28b4c:	e0ffff17 	ldw	r3,-4(fp)
   28b50:	18800044 	addi	r2,r3,1
   28b54:	e0bfff15 	stw	r2,-4(fp)
   28b58:	008003f4 	movhi	r2,15
   28b5c:	10909004 	addi	r2,r2,16960
   28b60:	1880051e 	bne	r3,r2,28b78 <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX MSGDMA Timeout\n");
   28b64:	010000f4 	movhi	r4,3
   28b68:	210f4f04 	addi	r4,r4,15676
   28b6c:	0028a980 	call	28a98 <no_printf>
            return ENP_RESOURCE;  // avoid being stuck here
   28b70:	00bffa84 	movi	r2,-22
   28b74:	00001906 	br	28bdc <tse_mac_sTxWrite+0xb4>
  while ( (IORD_ALTERA_MSGDMA_CSR_STATUS(mi->tx_msgdma->csr_base) & 
   28b78:	e0bffd17 	ldw	r2,-12(fp)
   28b7c:	10800117 	ldw	r2,4(r2)
   28b80:	10800317 	ldw	r2,12(r2)
   28b84:	10800037 	ldwio	r2,0(r2)
   28b88:	1080004c 	andi	r2,r2,1
   28b8c:	103fef1e 	bne	r2,zero,28b4c <__alt_mem_mcu_subsystem_ram_0+0x78008b4c>
           }
  }
  
  // Start MSGDMA (blocking call)
  alt_dcache_flush(txDesc,sizeof(alt_msgdma_standard_descriptor));
   28b90:	01400404 	movi	r5,16
   28b94:	e13ffc17 	ldw	r4,-16(fp)
   28b98:	00250200 	call	25020 <alt_dcache_flush>
  result = alt_msgdma_standard_descriptor_sync_transfer(
   28b9c:	e0bffd17 	ldw	r2,-12(fp)
   28ba0:	10800117 	ldw	r2,4(r2)
   28ba4:	e17ffc17 	ldw	r5,-16(fp)
   28ba8:	1009883a 	mov	r4,r2
   28bac:	003046c0 	call	3046c <alt_msgdma_standard_descriptor_sync_transfer>
   28bb0:	e0bffec5 	stb	r2,-5(fp)
                mi->tx_msgdma, 
                txDesc);
  
  if (result != 0) {
   28bb4:	e0bffec3 	ldbu	r2,-5(fp)
   28bb8:	10000726 	beq	r2,zero,28bd8 <tse_mac_sTxWrite+0xb0>
    tse_dprintf(4, "WARNING :alt_msgdma_standard_descriptor_sync_transfer Error code 0x%x\n",result);
   28bbc:	e0bffec3 	ldbu	r2,-5(fp)
   28bc0:	100b883a 	mov	r5,r2
   28bc4:	010000f4 	movhi	r4,3
   28bc8:	210f5704 	addi	r4,r4,15708
   28bcc:	0028a980 	call	28a98 <no_printf>
    return -1;
   28bd0:	00bfffc4 	movi	r2,-1
   28bd4:	00000106 	br	28bdc <tse_mac_sTxWrite+0xb4>
  }

  return 0;
   28bd8:	0005883a 	mov	r2,zero
}
   28bdc:	e037883a 	mov	sp,fp
   28be0:	dfc00117 	ldw	ra,4(sp)
   28be4:	df000017 	ldw	fp,0(sp)
   28be8:	dec00204 	addi	sp,sp,8
   28bec:	f800283a 	ret

00028bf0 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_msgdma_prefetcher_standard_descriptor *rxDesc)  
{
   28bf0:	defff904 	addi	sp,sp,-28
   28bf4:	dfc00615 	stw	ra,24(sp)
   28bf8:	df000515 	stw	fp,20(sp)
   28bfc:	df000504 	addi	fp,sp,20
   28c00:	e13ffe15 	stw	r4,-8(fp)
   28c04:	e17ffd15 	stw	r5,-12(fp)
  alt_u8 result;
           
  result = alt_msgdma_start_prefetcher_with_std_desc_list(
   28c08:	e0bffe17 	ldw	r2,-8(fp)
   28c0c:	10c00217 	ldw	r3,8(r2)
   28c10:	00800044 	movi	r2,1
   28c14:	d8800115 	stw	r2,4(sp)
   28c18:	00800044 	movi	r2,1
   28c1c:	d8800015 	stw	r2,0(sp)
   28c20:	000f883a 	mov	r7,zero
   28c24:	000d883a 	mov	r6,zero
   28c28:	e17ffd17 	ldw	r5,-12(fp)
   28c2c:	1809883a 	mov	r4,r3
   28c30:	00300800 	call	30080 <alt_msgdma_start_prefetcher_with_std_desc_list>
   28c34:	e0bfffc5 	stb	r2,-1(fp)
                mi->rx_msgdma, 
                rxDesc,0,0,1,1);
  
  if (result != 0) { return -1; }
   28c38:	e0bfffc3 	ldbu	r2,-1(fp)
   28c3c:	10000226 	beq	r2,zero,28c48 <tse_mac_aRxRead+0x58>
   28c40:	00bfffc4 	movi	r2,-1
   28c44:	00000106 	br	28c4c <tse_mac_aRxRead+0x5c>
 
  return SUCCESS;
   28c48:	0005883a 	mov	r2,zero
}
   28c4c:	e037883a 	mov	sp,fp
   28c50:	dfc00117 	ldw	ra,4(sp)
   28c54:	df000017 	ldw	fp,0(sp)
   28c58:	dec00204 	addi	sp,sp,8
   28c5c:	f800283a 	ret

00028c60 <tse_mac_aTxWrite>:
  *
  */
alt_32 tse_mac_aTxWrite( 
  tse_mac_trans_info *mi,       
  alt_msgdma_prefetcher_standard_descriptor *txDesc)  
{
   28c60:	defff904 	addi	sp,sp,-28
   28c64:	dfc00615 	stw	ra,24(sp)
   28c68:	df000515 	stw	fp,20(sp)
   28c6c:	df000504 	addi	fp,sp,20
   28c70:	e13ffe15 	stw	r4,-8(fp)
   28c74:	e17ffd15 	stw	r5,-12(fp)
  alt_u8 result;
  
  result = alt_msgdma_start_prefetcher_with_std_desc_list(
   28c78:	e0bffe17 	ldw	r2,-8(fp)
   28c7c:	10c00117 	ldw	r3,4(r2)
   28c80:	00800044 	movi	r2,1
   28c84:	d8800115 	stw	r2,4(sp)
   28c88:	00800044 	movi	r2,1
   28c8c:	d8800015 	stw	r2,0(sp)
   28c90:	000f883a 	mov	r7,zero
   28c94:	000d883a 	mov	r6,zero
   28c98:	e17ffd17 	ldw	r5,-12(fp)
   28c9c:	1809883a 	mov	r4,r3
   28ca0:	00300800 	call	30080 <alt_msgdma_start_prefetcher_with_std_desc_list>
   28ca4:	e0bfffc5 	stb	r2,-1(fp)
                mi->tx_msgdma, 
                txDesc,0,0,1,1);

  if (result != 0) { return -1; }
   28ca8:	e0bfffc3 	ldbu	r2,-1(fp)
   28cac:	10000226 	beq	r2,zero,28cb8 <tse_mac_aTxWrite+0x58>
   28cb0:	00bfffc4 	movi	r2,-1
   28cb4:	00000106 	br	28cbc <tse_mac_aTxWrite+0x5c>
 
  return SUCCESS;
   28cb8:	0005883a 	mov	r2,zero
}
   28cbc:	e037883a 	mov	sp,fp
   28cc0:	dfc00117 	ldw	ra,4(sp)
   28cc4:	df000017 	ldw	fp,0(sp)
   28cc8:	dec00204 	addi	sp,sp,8
   28ccc:	f800283a 	ret

00028cd0 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
   28cd0:	defffc04 	addi	sp,sp,-16
   28cd4:	df000315 	stw	fp,12(sp)
   28cd8:	df000304 	addi	fp,sp,12
   28cdc:	e13ffd15 	stw	r4,-12(fp)
    alt_32 timeout;
    alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   28ce0:	e0bffd17 	ldw	r2,-12(fp)
   28ce4:	10800204 	addi	r2,r2,8
   28ce8:	10800037 	ldwio	r2,0(r2)
   28cec:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
   28cf0:	e0bffd17 	ldw	r2,-12(fp)
   28cf4:	10800204 	addi	r2,r2,8
   28cf8:	00c80204 	movi	r3,8200
   28cfc:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
   28d00:	e03fff15 	stw	zero,-4(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
   28d04:	00000306 	br	28d14 <tse_mac_SwReset+0x44>
   28d08:	e0bfff17 	ldw	r2,-4(fp)
   28d0c:	10800044 	addi	r2,r2,1
   28d10:	e0bfff15 	stw	r2,-4(fp)
   28d14:	e0bffd17 	ldw	r2,-12(fp)
   28d18:	10800204 	addi	r2,r2,8
   28d1c:	10800037 	ldwio	r2,0(r2)
   28d20:	1088000c 	andi	r2,r2,8192
   28d24:	10000326 	beq	r2,zero,28d34 <tse_mac_SwReset+0x64>
   28d28:	e0bfff17 	ldw	r2,-4(fp)
   28d2c:	1089c410 	cmplti	r2,r2,10000
   28d30:	103ff51e 	bne	r2,zero,28d08 <__alt_mem_mcu_subsystem_ram_0+0x78008d08>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
   28d34:	e0bffd17 	ldw	r2,-12(fp)
   28d38:	10800204 	addi	r2,r2,8
   28d3c:	e0fffe17 	ldw	r3,-8(fp)
   28d40:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
   28d44:	0005883a 	mov	r2,zero
}
   28d48:	e037883a 	mov	sp,fp
   28d4c:	df000017 	ldw	fp,0(sp)
   28d50:	dec00104 	addi	sp,sp,4
   28d54:	f800283a 	ret

00028d58 <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
   28d58:	defffd04 	addi	sp,sp,-12
   28d5c:	df000215 	stw	fp,8(sp)
   28d60:	df000204 	addi	fp,sp,8
   28d64:	e13ffe15 	stw	r4,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   28d68:	e0bffe17 	ldw	r2,-8(fp)
   28d6c:	10800204 	addi	r2,r2,8
   28d70:	10800037 	ldwio	r2,0(r2)
   28d74:	e0bfff15 	stw	r2,-4(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
   28d78:	e0ffff17 	ldw	r3,-4(fp)
   28d7c:	00bffdc4 	movi	r2,-9
   28d80:	1884703a 	and	r2,r3,r2
   28d84:	e0bfff15 	stw	r2,-4(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
   28d88:	e0bffe17 	ldw	r2,-8(fp)
   28d8c:	10800204 	addi	r2,r2,8
   28d90:	e0ffff17 	ldw	r3,-4(fp)
   28d94:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   28d98:	0005883a 	mov	r2,zero
}
   28d9c:	e037883a 	mov	sp,fp
   28da0:	df000017 	ldw	fp,0(sp)
   28da4:	dec00104 	addi	sp,sp,4
   28da8:	f800283a 	ret

00028dac <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
   28dac:	defffd04 	addi	sp,sp,-12
   28db0:	df000215 	stw	fp,8(sp)
   28db4:	df000204 	addi	fp,sp,8
   28db8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   28dbc:	e0bffe17 	ldw	r2,-8(fp)
   28dc0:	10800204 	addi	r2,r2,8
   28dc4:	10800037 	ldwio	r2,0(r2)
   28dc8:	e0bfff15 	stw	r2,-4(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   28dcc:	e0bfff17 	ldw	r2,-4(fp)
   28dd0:	10800214 	ori	r2,r2,8
   28dd4:	e0bfff15 	stw	r2,-4(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
   28dd8:	e0bffe17 	ldw	r2,-8(fp)
   28ddc:	10800204 	addi	r2,r2,8
   28de0:	e0ffff17 	ldw	r3,-4(fp)
   28de4:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   28de8:	0005883a 	mov	r2,zero
}
   28dec:	e037883a 	mov	sp,fp
   28df0:	df000017 	ldw	fp,0(sp)
   28df4:	dec00104 	addi	sp,sp,4
   28df8:	f800283a 	ret

00028dfc <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
   28dfc:	defffb04 	addi	sp,sp,-20
   28e00:	dfc00415 	stw	ra,16(sp)
   28e04:	df000315 	stw	fp,12(sp)
   28e08:	dc000215 	stw	r16,8(sp)
   28e0c:	df000304 	addi	fp,sp,12
   28e10:	e13ffd15 	stw	r4,-12(fp)
    alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
   28e14:	e03ffe15 	stw	zero,-8(fp)
   28e18:	00002506 	br	28eb0 <alt_tse_phy_add_profile+0xb4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
   28e1c:	e0bffe17 	ldw	r2,-8(fp)
   28e20:	100690ba 	slli	r3,r2,2
   28e24:	008202b4 	movhi	r2,2058
   28e28:	1885883a 	add	r2,r3,r2
   28e2c:	108d7417 	ldw	r2,13776(r2)
   28e30:	10c01417 	ldw	r3,80(r2)
   28e34:	e0bffd17 	ldw	r2,-12(fp)
   28e38:	10801417 	ldw	r2,80(r2)
   28e3c:	1880191e 	bne	r3,r2,28ea4 <alt_tse_phy_add_profile+0xa8>
   28e40:	e0bffe17 	ldw	r2,-8(fp)
   28e44:	100690ba 	slli	r3,r2,2
   28e48:	008202b4 	movhi	r2,2058
   28e4c:	1885883a 	add	r2,r3,r2
   28e50:	108d7417 	ldw	r2,13776(r2)
   28e54:	10c01503 	ldbu	r3,84(r2)
   28e58:	e0bffd17 	ldw	r2,-12(fp)
   28e5c:	10801503 	ldbu	r2,84(r2)
   28e60:	18c03fcc 	andi	r3,r3,255
   28e64:	10803fcc 	andi	r2,r2,255
   28e68:	18800e1e 	bne	r3,r2,28ea4 <alt_tse_phy_add_profile+0xa8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
   28e6c:	e0bffd17 	ldw	r2,-12(fp)
   28e70:	10801417 	ldw	r2,80(r2)
   28e74:	1007883a 	mov	r3,r2
   28e78:	e0bffd17 	ldw	r2,-12(fp)
   28e7c:	10801503 	ldbu	r2,84(r2)
   28e80:	10803fcc 	andi	r2,r2,255
   28e84:	100d883a 	mov	r6,r2
   28e88:	180b883a 	mov	r5,r3
   28e8c:	010000f4 	movhi	r4,3
   28e90:	210f6904 	addi	r4,r4,15780
   28e94:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
   28e98:	010000f4 	movhi	r4,3
   28e9c:	210f7d04 	addi	r4,r4,15860
   28ea0:	0028a980 	call	28a98 <no_printf>
    for(i = 0; i < phy_profile_count; i++)
   28ea4:	e0bffe17 	ldw	r2,-8(fp)
   28ea8:	10800044 	addi	r2,r2,1
   28eac:	e0bffe15 	stw	r2,-8(fp)
   28eb0:	d0a7b603 	ldbu	r2,-24872(gp)
   28eb4:	10803fcc 	andi	r2,r2,255
   28eb8:	e0fffe17 	ldw	r3,-8(fp)
   28ebc:	18bfd716 	blt	r3,r2,28e1c <__alt_mem_mcu_subsystem_ram_0+0x78008e1c>
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
   28ec0:	d0a7b603 	ldbu	r2,-24872(gp)
   28ec4:	14003fcc 	andi	r16,r2,255
   28ec8:	01001904 	movi	r4,100
   28ecc:	001525c0 	call	1525c <malloc>
   28ed0:	1009883a 	mov	r4,r2
   28ed4:	800690ba 	slli	r3,r16,2
   28ed8:	008202b4 	movhi	r2,2058
   28edc:	1885883a 	add	r2,r3,r2
   28ee0:	110d7415 	stw	r4,13776(r2)
    if(!pphy_profiles[phy_profile_count]) {
   28ee4:	d0a7b603 	ldbu	r2,-24872(gp)
   28ee8:	10803fcc 	andi	r2,r2,255
   28eec:	100690ba 	slli	r3,r2,2
   28ef0:	008202b4 	movhi	r2,2058
   28ef4:	1885883a 	add	r2,r3,r2
   28ef8:	108d7417 	ldw	r2,13776(r2)
   28efc:	1000081e 	bne	r2,zero,28f20 <alt_tse_phy_add_profile+0x124>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
   28f00:	d0a7b603 	ldbu	r2,-24872(gp)
   28f04:	10803fcc 	andi	r2,r2,255
   28f08:	100b883a 	mov	r5,r2
   28f0c:	010000f4 	movhi	r4,3
   28f10:	210f9504 	addi	r4,r4,15956
   28f14:	0028a980 	call	28a98 <no_printf>
        return ALTERA_TSE_MALLOC_FAILED;
   28f18:	00bfffc4 	movi	r2,-1
   28f1c:	00001e06 	br	28f98 <alt_tse_phy_add_profile+0x19c>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
   28f20:	d0a7b603 	ldbu	r2,-24872(gp)
   28f24:	10803fcc 	andi	r2,r2,255
   28f28:	100690ba 	slli	r3,r2,2
   28f2c:	008202b4 	movhi	r2,2058
   28f30:	1885883a 	add	r2,r3,r2
   28f34:	10cd7417 	ldw	r3,13776(r2)
   28f38:	e0bffd17 	ldw	r2,-12(fp)
   28f3c:	1009883a 	mov	r4,r2
   28f40:	00801904 	movi	r2,100
   28f44:	100d883a 	mov	r6,r2
   28f48:	200b883a 	mov	r5,r4
   28f4c:	1809883a 	mov	r4,r3
   28f50:	0015ac00 	call	15ac0 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
   28f54:	d0a7b603 	ldbu	r2,-24872(gp)
   28f58:	10803fcc 	andi	r2,r2,255
   28f5c:	100690ba 	slli	r3,r2,2
   28f60:	008202b4 	movhi	r2,2058
   28f64:	1885883a 	add	r2,r3,r2
   28f68:	108d7417 	ldw	r2,13776(r2)
   28f6c:	1007883a 	mov	r3,r2
   28f70:	e0bffd17 	ldw	r2,-12(fp)
   28f74:	100b883a 	mov	r5,r2
   28f78:	1809883a 	mov	r4,r3
   28f7c:	00166e00 	call	166e0 <strcpy>
    
    phy_profile_count++;
   28f80:	d0a7b603 	ldbu	r2,-24872(gp)
   28f84:	10800044 	addi	r2,r2,1
   28f88:	d0a7b605 	stb	r2,-24872(gp)
    
    return phy_profile_count - 1;
   28f8c:	d0a7b603 	ldbu	r2,-24872(gp)
   28f90:	10803fcc 	andi	r2,r2,255
   28f94:	10bfffc4 	addi	r2,r2,-1
}
   28f98:	e6ffff04 	addi	sp,fp,-4
   28f9c:	dfc00217 	ldw	ra,8(sp)
   28fa0:	df000117 	ldw	fp,4(sp)
   28fa4:	dc000017 	ldw	r16,0(sp)
   28fa8:	dec00304 	addi	sp,sp,12
   28fac:	f800283a 	ret

00028fb0 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
    alt_tse_system_mac                    *psys_mac,
    alt_tse_system_msgdma                *psys_msgdma,
    alt_tse_system_desc_mem                *psys_mem,
    alt_tse_system_shared_fifo            *psys_shared_fifo,
    alt_tse_system_phy                     *psys_phy ) {
   28fb0:	defff204 	addi	sp,sp,-56
   28fb4:	dfc00d15 	stw	ra,52(sp)
   28fb8:	df000c15 	stw	fp,48(sp)
   28fbc:	dc000b15 	stw	r16,44(sp)
   28fc0:	df000c04 	addi	fp,sp,48
   28fc4:	e13ff715 	stw	r4,-36(fp)
   28fc8:	e17ff615 	stw	r5,-40(fp)
   28fcc:	e1bff515 	stw	r6,-44(fp)
   28fd0:	e1fff415 	stw	r7,-48(fp)

    int i;
    int loop_end;
    
    alt_tse_system_mac                    *pmac    = psys_mac;
   28fd4:	e0bff717 	ldw	r2,-36(fp)
   28fd8:	e0bff815 	stw	r2,-32(fp)
    alt_tse_system_msgdma                *pmsgdma    = psys_msgdma;
   28fdc:	e0bff617 	ldw	r2,-40(fp)
   28fe0:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_system_desc_mem                *pmem    = psys_mem;
   28fe4:	e0bff517 	ldw	r2,-44(fp)
   28fe8:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_system_shared_fifo            *pfifo    = psys_shared_fifo;
   28fec:	e0bff417 	ldw	r2,-48(fp)
   28ff0:	e0bffa15 	stw	r2,-24(fp)
    alt_tse_system_phy                     *pphy    = psys_phy;
   28ff4:	e0800217 	ldw	r2,8(fp)
   28ff8:	e0bff915 	stw	r2,-28(fp)
    
    static alt_8 tse_system_count = 0;
    
    /* Determine number of loop */
    /* Run at least one for non-multi-channel MAC */
    if(pmac->tse_num_of_channel == 0) {
   28ffc:	e0bff817 	ldw	r2,-32(fp)
   29000:	10800303 	ldbu	r2,12(r2)
   29004:	10803fcc 	andi	r2,r2,255
   29008:	1000031e 	bne	r2,zero,29018 <alt_tse_system_add_sys+0x68>
        loop_end = 1;
   2900c:	00800044 	movi	r2,1
   29010:	e0bffd15 	stw	r2,-12(fp)
   29014:	00000e06 	br	29050 <alt_tse_system_add_sys+0xa0>
    }
    else if(pmac->tse_num_of_channel > 0) {
   29018:	e0bff817 	ldw	r2,-32(fp)
   2901c:	10800303 	ldbu	r2,12(r2)
   29020:	10803fcc 	andi	r2,r2,255
   29024:	10000526 	beq	r2,zero,2903c <alt_tse_system_add_sys+0x8c>
        loop_end = pmac->tse_num_of_channel; 
   29028:	e0bff817 	ldw	r2,-32(fp)
   2902c:	10800303 	ldbu	r2,12(r2)
   29030:	10803fcc 	andi	r2,r2,255
   29034:	e0bffd15 	stw	r2,-12(fp)
   29038:	00000506 	br	29050 <alt_tse_system_add_sys+0xa0>
    }
    else {
        tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
   2903c:	010000f4 	movhi	r4,3
   29040:	210fa404 	addi	r4,r4,16016
   29044:	0028a980 	call	28a98 <no_printf>
        return ALTERA_TSE_SYSTEM_DEF_ERROR;
   29048:	00bfffc4 	movi	r2,-1
   2904c:	00020506 	br	29864 <alt_tse_system_add_sys+0x8b4>
    }

    for(i = 0; i < loop_end; i++) {
   29050:	e03ffe15 	stw	zero,-8(fp)
   29054:	0001ff06 	br	29854 <alt_tse_system_add_sys+0x8a4>
        
        /* Make sure the boundary of array is not exceeded */
        if(tse_system_count >= MAXNETS) {
   29058:	d0a7b683 	ldbu	r2,-24870(gp)
   2905c:	10803fcc 	andi	r2,r2,255
   29060:	1080201c 	xori	r2,r2,128
   29064:	10bfe004 	addi	r2,r2,-128
   29068:	10800210 	cmplti	r2,r2,8
   2906c:	10000e1e 	bne	r2,zero,290a8 <alt_tse_system_add_sys+0xf8>
            tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
   29070:	010000f4 	movhi	r4,3
   29074:	210fb004 	addi	r4,r4,16064
   29078:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
   2907c:	d0a7b683 	ldbu	r2,-24870(gp)
   29080:	10803fcc 	andi	r2,r2,255
   29084:	1080201c 	xori	r2,r2,128
   29088:	10bfe004 	addi	r2,r2,-128
   2908c:	100d883a 	mov	r6,r2
   29090:	01400204 	movi	r5,8
   29094:	010000f4 	movhi	r4,3
   29098:	210fc004 	addi	r4,r4,16128
   2909c:	0028a980 	call	28a98 <no_printf>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
   290a0:	00bfffc4 	movi	r2,-1
   290a4:	0001ef06 	br	29864 <alt_tse_system_add_sys+0x8b4>
        }

        /* Add MAC info to alt_tse_system_info structure */
        if(pmac == 0) {
   290a8:	e0bff817 	ldw	r2,-32(fp)
   290ac:	1000081e 	bne	r2,zero,290d0 <alt_tse_system_add_sys+0x120>
            tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
   290b0:	010000f4 	movhi	r4,3
   290b4:	210fcf04 	addi	r4,r4,16188
   290b8:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
   290bc:	010000f4 	movhi	r4,3
   290c0:	210fd904 	addi	r4,r4,16228
   290c4:	0028a980 	call	28a98 <no_printf>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
   290c8:	00bfffc4 	movi	r2,-1
   290cc:	0001e506 	br	29864 <alt_tse_system_add_sys+0x8b4>
        }        
        
        tse_mac_device[tse_system_count].tse_mac_base                     = pmac->tse_mac_base + (i * 0x400);
   290d0:	e0bff817 	ldw	r2,-32(fp)
   290d4:	10c00017 	ldw	r3,0(r2)
   290d8:	e0bffe17 	ldw	r2,-8(fp)
   290dc:	100492ba 	slli	r2,r2,10
   290e0:	1009883a 	mov	r4,r2
   290e4:	d0a7b683 	ldbu	r2,-24870(gp)
   290e8:	10803fcc 	andi	r2,r2,255
   290ec:	1080201c 	xori	r2,r2,128
   290f0:	10bfe004 	addi	r2,r2,-128
   290f4:	1907883a 	add	r3,r3,r4
   290f8:	11001324 	muli	r4,r2,76
   290fc:	008202b4 	movhi	r2,2058
   29100:	2085883a 	add	r2,r4,r2
   29104:	10cb0415 	stw	r3,11280(r2)
        tse_mac_device[tse_system_count].tse_tx_depth                     = pmac->tse_tx_depth;
   29108:	e0bff817 	ldw	r2,-32(fp)
   2910c:	10c0010b 	ldhu	r3,4(r2)
   29110:	d0a7b683 	ldbu	r2,-24870(gp)
   29114:	10803fcc 	andi	r2,r2,255
   29118:	1080201c 	xori	r2,r2,128
   2911c:	10bfe004 	addi	r2,r2,-128
   29120:	18ffffcc 	andi	r3,r3,65535
   29124:	11001324 	muli	r4,r2,76
   29128:	008202b4 	movhi	r2,2058
   2912c:	2085883a 	add	r2,r4,r2
   29130:	10cb0515 	stw	r3,11284(r2)
        tse_mac_device[tse_system_count].tse_rx_depth                     = pmac->tse_rx_depth;
   29134:	e0bff817 	ldw	r2,-32(fp)
   29138:	10c0018b 	ldhu	r3,6(r2)
   2913c:	d0a7b683 	ldbu	r2,-24870(gp)
   29140:	10803fcc 	andi	r2,r2,255
   29144:	1080201c 	xori	r2,r2,128
   29148:	10bfe004 	addi	r2,r2,-128
   2914c:	18ffffcc 	andi	r3,r3,65535
   29150:	11001324 	muli	r4,r2,76
   29154:	008202b4 	movhi	r2,2058
   29158:	2085883a 	add	r2,r4,r2
   2915c:	10cb0615 	stw	r3,11288(r2)
        tse_mac_device[tse_system_count].tse_use_mdio                     = pmac->tse_use_mdio;
   29160:	d0a7b683 	ldbu	r2,-24870(gp)
   29164:	10803fcc 	andi	r2,r2,255
   29168:	1080201c 	xori	r2,r2,128
   2916c:	10bfe004 	addi	r2,r2,-128
   29170:	e0fff817 	ldw	r3,-32(fp)
   29174:	18c00203 	ldbu	r3,8(r3)
   29178:	11001324 	muli	r4,r2,76
   2917c:	008202b4 	movhi	r2,2058
   29180:	2085883a 	add	r2,r4,r2
   29184:	10cb0705 	stb	r3,11292(r2)
        tse_mac_device[tse_system_count].tse_en_maclite                 = pmac->tse_en_maclite;
   29188:	d0a7b683 	ldbu	r2,-24870(gp)
   2918c:	10803fcc 	andi	r2,r2,255
   29190:	1080201c 	xori	r2,r2,128
   29194:	10bfe004 	addi	r2,r2,-128
   29198:	e0fff817 	ldw	r3,-32(fp)
   2919c:	18c00243 	ldbu	r3,9(r3)
   291a0:	11001324 	muli	r4,r2,76
   291a4:	008202b4 	movhi	r2,2058
   291a8:	2085883a 	add	r2,r4,r2
   291ac:	10cb0745 	stb	r3,11293(r2)
        tse_mac_device[tse_system_count].tse_maclite_gige                 = pmac->tse_maclite_gige;
   291b0:	d0a7b683 	ldbu	r2,-24870(gp)
   291b4:	10803fcc 	andi	r2,r2,255
   291b8:	1080201c 	xori	r2,r2,128
   291bc:	10bfe004 	addi	r2,r2,-128
   291c0:	e0fff817 	ldw	r3,-32(fp)
   291c4:	18c00283 	ldbu	r3,10(r3)
   291c8:	11001324 	muli	r4,r2,76
   291cc:	008202b4 	movhi	r2,2058
   291d0:	2085883a 	add	r2,r4,r2
   291d4:	10cb0785 	stb	r3,11294(r2)
        tse_mac_device[tse_system_count].tse_multichannel_mac             = pmac->tse_multichannel_mac;
   291d8:	d0a7b683 	ldbu	r2,-24870(gp)
   291dc:	10803fcc 	andi	r2,r2,255
   291e0:	1080201c 	xori	r2,r2,128
   291e4:	10bfe004 	addi	r2,r2,-128
   291e8:	e0fff817 	ldw	r3,-32(fp)
   291ec:	18c002c3 	ldbu	r3,11(r3)
   291f0:	11001324 	muli	r4,r2,76
   291f4:	008202b4 	movhi	r2,2058
   291f8:	2085883a 	add	r2,r4,r2
   291fc:	10cb07c5 	stb	r3,11295(r2)
        tse_mac_device[tse_system_count].tse_num_of_channel             = pmac->tse_num_of_channel;
   29200:	d0a7b683 	ldbu	r2,-24870(gp)
   29204:	10803fcc 	andi	r2,r2,255
   29208:	1080201c 	xori	r2,r2,128
   2920c:	10bfe004 	addi	r2,r2,-128
   29210:	e0fff817 	ldw	r3,-32(fp)
   29214:	18c00303 	ldbu	r3,12(r3)
   29218:	11001324 	muli	r4,r2,76
   2921c:	008202b4 	movhi	r2,2058
   29220:	2085883a 	add	r2,r4,r2
   29224:	10cb0805 	stb	r3,11296(r2)
        tse_mac_device[tse_system_count].tse_mdio_shared                 = pmac->tse_mdio_shared;
   29228:	d0a7b683 	ldbu	r2,-24870(gp)
   2922c:	10803fcc 	andi	r2,r2,255
   29230:	1080201c 	xori	r2,r2,128
   29234:	10bfe004 	addi	r2,r2,-128
   29238:	e0fff817 	ldw	r3,-32(fp)
   2923c:	18c00343 	ldbu	r3,13(r3)
   29240:	11001324 	muli	r4,r2,76
   29244:	008202b4 	movhi	r2,2058
   29248:	2085883a 	add	r2,r4,r2
   2924c:	10cb0845 	stb	r3,11297(r2)
        tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared    = pmac->tse_number_of_mac_mdio_shared;
   29250:	d0a7b683 	ldbu	r2,-24870(gp)
   29254:	10803fcc 	andi	r2,r2,255
   29258:	1080201c 	xori	r2,r2,128
   2925c:	10bfe004 	addi	r2,r2,-128
   29260:	e0fff817 	ldw	r3,-32(fp)
   29264:	18c00383 	ldbu	r3,14(r3)
   29268:	11001324 	muli	r4,r2,76
   2926c:	008202b4 	movhi	r2,2058
   29270:	2085883a 	add	r2,r4,r2
   29274:	10cb0885 	stb	r3,11298(r2)
        tse_mac_device[tse_system_count].tse_pcs_ena                     = pmac->tse_pcs_ena;
   29278:	d0a7b683 	ldbu	r2,-24870(gp)
   2927c:	10803fcc 	andi	r2,r2,255
   29280:	1080201c 	xori	r2,r2,128
   29284:	10bfe004 	addi	r2,r2,-128
   29288:	e0fff817 	ldw	r3,-32(fp)
   2928c:	18c003c3 	ldbu	r3,15(r3)
   29290:	11001324 	muli	r4,r2,76
   29294:	008202b4 	movhi	r2,2058
   29298:	2085883a 	add	r2,r4,r2
   2929c:	10cb08c5 	stb	r3,11299(r2)
        tse_mac_device[tse_system_count].tse_pcs_sgmii                     = pmac->tse_pcs_sgmii;
   292a0:	d0a7b683 	ldbu	r2,-24870(gp)
   292a4:	10803fcc 	andi	r2,r2,255
   292a8:	1080201c 	xori	r2,r2,128
   292ac:	10bfe004 	addi	r2,r2,-128
   292b0:	e0fff817 	ldw	r3,-32(fp)
   292b4:	18c00403 	ldbu	r3,16(r3)
   292b8:	11001324 	muli	r4,r2,76
   292bc:	008202b4 	movhi	r2,2058
   292c0:	2085883a 	add	r2,r4,r2
   292c4:	10cb0905 	stb	r3,11300(r2)
        
        /* Add MSGDMA info to alt_tse_system_info structure */
        if(pmsgdma == 0) {
   292c8:	e0bffc17 	ldw	r2,-16(fp)
   292cc:	10000d1e 	bne	r2,zero,29304 <alt_tse_system_add_sys+0x354>
            tse_dprintf(2, "ERROR   : MSGDMA system structure == NULL\n");
   292d0:	010000f4 	movhi	r4,3
   292d4:	210feb04 	addi	r4,r4,16300
   292d8:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
   292dc:	d0a7b683 	ldbu	r2,-24870(gp)
   292e0:	10803fcc 	andi	r2,r2,255
   292e4:	1080201c 	xori	r2,r2,128
   292e8:	10bfe004 	addi	r2,r2,-128
   292ec:	100b883a 	mov	r5,r2
   292f0:	010000f4 	movhi	r4,3
   292f4:	210ff604 	addi	r4,r4,16344
   292f8:	0028a980 	call	28a98 <no_printf>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
   292fc:	00bfffc4 	movi	r2,-1
   29300:	00015806 	br	29864 <alt_tse_system_add_sys+0x8b4>
        }
        
        tse_mac_device[tse_system_count].tse_msgdma_tx = (char *) malloc(strlen(pmsgdma->tse_msgdma_tx) + 1);
   29304:	e0bffc17 	ldw	r2,-16(fp)
   29308:	10800017 	ldw	r2,0(r2)
   2930c:	1009883a 	mov	r4,r2
   29310:	001676c0 	call	1676c <strlen>
   29314:	10800044 	addi	r2,r2,1
   29318:	d0e7b683 	ldbu	r3,-24870(gp)
   2931c:	1c003fcc 	andi	r16,r3,255
   29320:	8400201c 	xori	r16,r16,128
   29324:	843fe004 	addi	r16,r16,-128
   29328:	1009883a 	mov	r4,r2
   2932c:	001525c0 	call	1525c <malloc>
   29330:	1009883a 	mov	r4,r2
   29334:	80c01324 	muli	r3,r16,76
   29338:	008202b4 	movhi	r2,2058
   2933c:	1885883a 	add	r2,r3,r2
   29340:	110b0a15 	stw	r4,11304(r2)
        if(!tse_mac_device[tse_system_count].tse_msgdma_tx) {
   29344:	d0a7b683 	ldbu	r2,-24870(gp)
   29348:	10803fcc 	andi	r2,r2,255
   2934c:	1080201c 	xori	r2,r2,128
   29350:	10bfe004 	addi	r2,r2,-128
   29354:	10c01324 	muli	r3,r2,76
   29358:	008202b4 	movhi	r2,2058
   2935c:	1885883a 	add	r2,r3,r2
   29360:	108b0a17 	ldw	r2,11304(r2)
   29364:	10000a1e 	bne	r2,zero,29390 <alt_tse_system_add_sys+0x3e0>
            tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_msgdma_tx\n", tse_system_count);
   29368:	d0a7b683 	ldbu	r2,-24870(gp)
   2936c:	10803fcc 	andi	r2,r2,255
   29370:	1080201c 	xori	r2,r2,128
   29374:	10bfe004 	addi	r2,r2,-128
   29378:	100b883a 	mov	r5,r2
   2937c:	010000f4 	movhi	r4,3
   29380:	21100e04 	addi	r4,r4,16440
   29384:	0028a980 	call	28a98 <no_printf>
            return ALTERA_TSE_MALLOC_FAILED;
   29388:	00bfffc4 	movi	r2,-1
   2938c:	00013506 	br	29864 <alt_tse_system_add_sys+0x8b4>
        }   
        strcpy(tse_mac_device[tse_system_count].tse_msgdma_tx, pmsgdma->tse_msgdma_tx);
   29390:	d0a7b683 	ldbu	r2,-24870(gp)
   29394:	10803fcc 	andi	r2,r2,255
   29398:	1080201c 	xori	r2,r2,128
   2939c:	10bfe004 	addi	r2,r2,-128
   293a0:	10c01324 	muli	r3,r2,76
   293a4:	008202b4 	movhi	r2,2058
   293a8:	1885883a 	add	r2,r3,r2
   293ac:	10cb0a17 	ldw	r3,11304(r2)
   293b0:	e0bffc17 	ldw	r2,-16(fp)
   293b4:	10800017 	ldw	r2,0(r2)
   293b8:	100b883a 	mov	r5,r2
   293bc:	1809883a 	mov	r4,r3
   293c0:	00166e00 	call	166e0 <strcpy>
        
        tse_mac_device[tse_system_count].tse_msgdma_rx = (char *) malloc(strlen(pmsgdma->tse_msgdma_rx) + 1);
   293c4:	e0bffc17 	ldw	r2,-16(fp)
   293c8:	10800117 	ldw	r2,4(r2)
   293cc:	1009883a 	mov	r4,r2
   293d0:	001676c0 	call	1676c <strlen>
   293d4:	10800044 	addi	r2,r2,1
   293d8:	d0e7b683 	ldbu	r3,-24870(gp)
   293dc:	1c003fcc 	andi	r16,r3,255
   293e0:	8400201c 	xori	r16,r16,128
   293e4:	843fe004 	addi	r16,r16,-128
   293e8:	1009883a 	mov	r4,r2
   293ec:	001525c0 	call	1525c <malloc>
   293f0:	1009883a 	mov	r4,r2
   293f4:	80c01324 	muli	r3,r16,76
   293f8:	008202b4 	movhi	r2,2058
   293fc:	1885883a 	add	r2,r3,r2
   29400:	110b0b15 	stw	r4,11308(r2)
        if(!tse_mac_device[tse_system_count].tse_msgdma_rx) {
   29404:	d0a7b683 	ldbu	r2,-24870(gp)
   29408:	10803fcc 	andi	r2,r2,255
   2940c:	1080201c 	xori	r2,r2,128
   29410:	10bfe004 	addi	r2,r2,-128
   29414:	10c01324 	muli	r3,r2,76
   29418:	008202b4 	movhi	r2,2058
   2941c:	1885883a 	add	r2,r3,r2
   29420:	108b0b17 	ldw	r2,11308(r2)
   29424:	10000a1e 	bne	r2,zero,29450 <alt_tse_system_add_sys+0x4a0>
            tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_msgdma_rx\n", tse_system_count);
   29428:	d0a7b683 	ldbu	r2,-24870(gp)
   2942c:	10803fcc 	andi	r2,r2,255
   29430:	1080201c 	xori	r2,r2,128
   29434:	10bfe004 	addi	r2,r2,-128
   29438:	100b883a 	mov	r5,r2
   2943c:	010000f4 	movhi	r4,3
   29440:	21102104 	addi	r4,r4,16516
   29444:	0028a980 	call	28a98 <no_printf>
            return ALTERA_TSE_MALLOC_FAILED;
   29448:	00bfffc4 	movi	r2,-1
   2944c:	00010506 	br	29864 <alt_tse_system_add_sys+0x8b4>
        }
        strcpy(tse_mac_device[tse_system_count].tse_msgdma_rx, pmsgdma->tse_msgdma_rx);
   29450:	d0a7b683 	ldbu	r2,-24870(gp)
   29454:	10803fcc 	andi	r2,r2,255
   29458:	1080201c 	xori	r2,r2,128
   2945c:	10bfe004 	addi	r2,r2,-128
   29460:	10c01324 	muli	r3,r2,76
   29464:	008202b4 	movhi	r2,2058
   29468:	1885883a 	add	r2,r3,r2
   2946c:	10cb0b17 	ldw	r3,11308(r2)
   29470:	e0bffc17 	ldw	r2,-16(fp)
   29474:	10800117 	ldw	r2,4(r2)
   29478:	100b883a 	mov	r5,r2
   2947c:	1809883a 	mov	r4,r3
   29480:	00166e00 	call	166e0 <strcpy>
        
        tse_mac_device[tse_system_count].tse_msgdma_rx_irq = pmsgdma->tse_msgdma_rx_irq;
   29484:	d0a7b683 	ldbu	r2,-24870(gp)
   29488:	10803fcc 	andi	r2,r2,255
   2948c:	1080201c 	xori	r2,r2,128
   29490:	10bfe004 	addi	r2,r2,-128
   29494:	e0fffc17 	ldw	r3,-16(fp)
   29498:	18c0020b 	ldhu	r3,8(r3)
   2949c:	11001324 	muli	r4,r2,76
   294a0:	008202b4 	movhi	r2,2058
   294a4:	2085883a 	add	r2,r4,r2
   294a8:	10cb0c0d 	sth	r3,11312(r2)
        
        /* Add descriptor memory info to alt_tse_system_info structure */
        if(pmem == 0) {
   294ac:	e0bffb17 	ldw	r2,-20(fp)
   294b0:	1000111e 	bne	r2,zero,294f8 <alt_tse_system_add_sys+0x548>
            tse_mac_device[tse_system_count].ext_desc_mem    = TSE_INT_DESC_MEM;
   294b4:	d0a7b683 	ldbu	r2,-24870(gp)
   294b8:	10803fcc 	andi	r2,r2,255
   294bc:	1080201c 	xori	r2,r2,128
   294c0:	10bfe004 	addi	r2,r2,-128
   294c4:	10c01324 	muli	r3,r2,76
   294c8:	008202b4 	movhi	r2,2058
   294cc:	1885883a 	add	r2,r3,r2
   294d0:	100b0c85 	stb	zero,11314(r2)
            tse_mac_device[tse_system_count].desc_mem_base    = TSE_INT_DESC_MEM;
   294d4:	d0a7b683 	ldbu	r2,-24870(gp)
   294d8:	10803fcc 	andi	r2,r2,255
   294dc:	1080201c 	xori	r2,r2,128
   294e0:	10bfe004 	addi	r2,r2,-128
   294e4:	10c01324 	muli	r3,r2,76
   294e8:	008202b4 	movhi	r2,2058
   294ec:	1885883a 	add	r2,r3,r2
   294f0:	100b0d15 	stw	zero,11316(r2)
   294f4:	00001406 	br	29548 <alt_tse_system_add_sys+0x598>
        }
        else {
            tse_mac_device[tse_system_count].ext_desc_mem    = pmem->ext_desc_mem;
   294f8:	d0a7b683 	ldbu	r2,-24870(gp)
   294fc:	10803fcc 	andi	r2,r2,255
   29500:	1080201c 	xori	r2,r2,128
   29504:	10bfe004 	addi	r2,r2,-128
   29508:	e0fffb17 	ldw	r3,-20(fp)
   2950c:	18c00003 	ldbu	r3,0(r3)
   29510:	11001324 	muli	r4,r2,76
   29514:	008202b4 	movhi	r2,2058
   29518:	2085883a 	add	r2,r4,r2
   2951c:	10cb0c85 	stb	r3,11314(r2)
            tse_mac_device[tse_system_count].desc_mem_base    = pmem->desc_mem_base;
   29520:	d0a7b683 	ldbu	r2,-24870(gp)
   29524:	10803fcc 	andi	r2,r2,255
   29528:	1080201c 	xori	r2,r2,128
   2952c:	10bfe004 	addi	r2,r2,-128
   29530:	e0fffb17 	ldw	r3,-20(fp)
   29534:	18c00117 	ldw	r3,4(r3)
   29538:	11001324 	muli	r4,r2,76
   2953c:	008202b4 	movhi	r2,2058
   29540:	2085883a 	add	r2,r4,r2
   29544:	10cb0d15 	stw	r3,11316(r2)
        }
        
        /* Add shared fifo info to alt_tse_system_info structure */
        if(pfifo == 0) {
   29548:	e0bffa17 	ldw	r2,-24(fp)
   2954c:	1000391e 	bne	r2,zero,29634 <alt_tse_system_add_sys+0x684>
            tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
   29550:	d0a7b683 	ldbu	r2,-24870(gp)
   29554:	10803fcc 	andi	r2,r2,255
   29558:	1080201c 	xori	r2,r2,128
   2955c:	10bfe004 	addi	r2,r2,-128
   29560:	10c01324 	muli	r3,r2,76
   29564:	008202b4 	movhi	r2,2058
   29568:	1885883a 	add	r2,r3,r2
   2956c:	100b0e05 	stb	zero,11320(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base    = TSE_NO_SHARED_FIFO;
   29570:	d0a7b683 	ldbu	r2,-24870(gp)
   29574:	10803fcc 	andi	r2,r2,255
   29578:	1080201c 	xori	r2,r2,128
   2957c:	10bfe004 	addi	r2,r2,-128
   29580:	10c01324 	muli	r3,r2,76
   29584:	008202b4 	movhi	r2,2058
   29588:	1885883a 	add	r2,r3,r2
   2958c:	100b0f15 	stw	zero,11324(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base    = TSE_NO_SHARED_FIFO;
   29590:	d0a7b683 	ldbu	r2,-24870(gp)
   29594:	10803fcc 	andi	r2,r2,255
   29598:	1080201c 	xori	r2,r2,128
   2959c:	10bfe004 	addi	r2,r2,-128
   295a0:	10c01324 	muli	r3,r2,76
   295a4:	008202b4 	movhi	r2,2058
   295a8:	1885883a 	add	r2,r3,r2
   295ac:	100b1015 	stw	zero,11328(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
   295b0:	d0a7b683 	ldbu	r2,-24870(gp)
   295b4:	10803fcc 	andi	r2,r2,255
   295b8:	1080201c 	xori	r2,r2,128
   295bc:	10bfe004 	addi	r2,r2,-128
   295c0:	10c01324 	muli	r3,r2,76
   295c4:	008202b4 	movhi	r2,2058
   295c8:	1885883a 	add	r2,r3,r2
   295cc:	100b1115 	stw	zero,11332(r2)
            
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base    = TSE_NO_SHARED_FIFO;
   295d0:	d0a7b683 	ldbu	r2,-24870(gp)
   295d4:	10803fcc 	andi	r2,r2,255
   295d8:	1080201c 	xori	r2,r2,128
   295dc:	10bfe004 	addi	r2,r2,-128
   295e0:	10c01324 	muli	r3,r2,76
   295e4:	008202b4 	movhi	r2,2058
   295e8:	1885883a 	add	r2,r3,r2
   295ec:	100b1215 	stw	zero,11336(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base    = TSE_NO_SHARED_FIFO;
   295f0:	d0a7b683 	ldbu	r2,-24870(gp)
   295f4:	10803fcc 	andi	r2,r2,255
   295f8:	1080201c 	xori	r2,r2,128
   295fc:	10bfe004 	addi	r2,r2,-128
   29600:	10c01324 	muli	r3,r2,76
   29604:	008202b4 	movhi	r2,2058
   29608:	1885883a 	add	r2,r3,r2
   2960c:	100b1315 	stw	zero,11340(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
   29610:	d0a7b683 	ldbu	r2,-24870(gp)
   29614:	10803fcc 	andi	r2,r2,255
   29618:	1080201c 	xori	r2,r2,128
   2961c:	10bfe004 	addi	r2,r2,-128
   29620:	10c01324 	muli	r3,r2,76
   29624:	008202b4 	movhi	r2,2058
   29628:	1885883a 	add	r2,r3,r2
   2962c:	100b1415 	stw	zero,11344(r2)
   29630:	00004606 	br	2974c <alt_tse_system_add_sys+0x79c>
        }
        else {
            tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
   29634:	d0a7b683 	ldbu	r2,-24870(gp)
   29638:	10803fcc 	andi	r2,r2,255
   2963c:	1080201c 	xori	r2,r2,128
   29640:	10bfe004 	addi	r2,r2,-128
   29644:	e0fffa17 	ldw	r3,-24(fp)
   29648:	18c00003 	ldbu	r3,0(r3)
   2964c:	11001324 	muli	r4,r2,76
   29650:	008202b4 	movhi	r2,2058
   29654:	2085883a 	add	r2,r4,r2
   29658:	10cb0e05 	stb	r3,11320(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base    = pfifo->tse_shared_fifo_tx_ctrl_base;
   2965c:	d0a7b683 	ldbu	r2,-24870(gp)
   29660:	10803fcc 	andi	r2,r2,255
   29664:	1080201c 	xori	r2,r2,128
   29668:	10bfe004 	addi	r2,r2,-128
   2966c:	e0fffa17 	ldw	r3,-24(fp)
   29670:	18c00117 	ldw	r3,4(r3)
   29674:	11001324 	muli	r4,r2,76
   29678:	008202b4 	movhi	r2,2058
   2967c:	2085883a 	add	r2,r4,r2
   29680:	10cb0f15 	stw	r3,11324(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base    = pfifo->tse_shared_fifo_tx_stat_base;
   29684:	d0a7b683 	ldbu	r2,-24870(gp)
   29688:	10803fcc 	andi	r2,r2,255
   2968c:	1080201c 	xori	r2,r2,128
   29690:	10bfe004 	addi	r2,r2,-128
   29694:	e0fffa17 	ldw	r3,-24(fp)
   29698:	18c00217 	ldw	r3,8(r3)
   2969c:	11001324 	muli	r4,r2,76
   296a0:	008202b4 	movhi	r2,2058
   296a4:	2085883a 	add	r2,r4,r2
   296a8:	10cb1015 	stw	r3,11328(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
   296ac:	d0a7b683 	ldbu	r2,-24870(gp)
   296b0:	10803fcc 	andi	r2,r2,255
   296b4:	1080201c 	xori	r2,r2,128
   296b8:	10bfe004 	addi	r2,r2,-128
   296bc:	e0fffa17 	ldw	r3,-24(fp)
   296c0:	18c00317 	ldw	r3,12(r3)
   296c4:	11001324 	muli	r4,r2,76
   296c8:	008202b4 	movhi	r2,2058
   296cc:	2085883a 	add	r2,r4,r2
   296d0:	10cb1115 	stw	r3,11332(r2)
            
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base    = pfifo->tse_shared_fifo_rx_ctrl_base;
   296d4:	d0a7b683 	ldbu	r2,-24870(gp)
   296d8:	10803fcc 	andi	r2,r2,255
   296dc:	1080201c 	xori	r2,r2,128
   296e0:	10bfe004 	addi	r2,r2,-128
   296e4:	e0fffa17 	ldw	r3,-24(fp)
   296e8:	18c00417 	ldw	r3,16(r3)
   296ec:	11001324 	muli	r4,r2,76
   296f0:	008202b4 	movhi	r2,2058
   296f4:	2085883a 	add	r2,r4,r2
   296f8:	10cb1215 	stw	r3,11336(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base    = pfifo->tse_shared_fifo_rx_stat_base;
   296fc:	d0a7b683 	ldbu	r2,-24870(gp)
   29700:	10803fcc 	andi	r2,r2,255
   29704:	1080201c 	xori	r2,r2,128
   29708:	10bfe004 	addi	r2,r2,-128
   2970c:	e0fffa17 	ldw	r3,-24(fp)
   29710:	18c00517 	ldw	r3,20(r3)
   29714:	11001324 	muli	r4,r2,76
   29718:	008202b4 	movhi	r2,2058
   2971c:	2085883a 	add	r2,r4,r2
   29720:	10cb1315 	stw	r3,11340(r2)
            tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
   29724:	d0a7b683 	ldbu	r2,-24870(gp)
   29728:	10803fcc 	andi	r2,r2,255
   2972c:	1080201c 	xori	r2,r2,128
   29730:	10bfe004 	addi	r2,r2,-128
   29734:	e0fffa17 	ldw	r3,-24(fp)
   29738:	18c00617 	ldw	r3,24(r3)
   2973c:	11001324 	muli	r4,r2,76
   29740:	008202b4 	movhi	r2,2058
   29744:	2085883a 	add	r2,r4,r2
   29748:	10cb1415 	stw	r3,11344(r2)
        }
        
        /* Add PHY info to alt_tse_system_info structure */
        if(pphy == 0) {
   2974c:	e0bff917 	ldw	r2,-28(fp)
   29750:	1000121e 	bne	r2,zero,2979c <alt_tse_system_add_sys+0x7ec>
            tse_mac_device[tse_system_count].tse_phy_mdio_address    = TSE_PHY_AUTO_ADDRESS;
   29754:	d0a7b683 	ldbu	r2,-24870(gp)
   29758:	10803fcc 	andi	r2,r2,255
   2975c:	1080201c 	xori	r2,r2,128
   29760:	10bfe004 	addi	r2,r2,-128
   29764:	11001324 	muli	r4,r2,76
   29768:	00ffffc4 	movi	r3,-1
   2976c:	008202b4 	movhi	r2,2058
   29770:	2085883a 	add	r2,r4,r2
   29774:	10cb1515 	stw	r3,11348(r2)
            tse_mac_device[tse_system_count].tse_phy_cfg             = 0;
   29778:	d0a7b683 	ldbu	r2,-24870(gp)
   2977c:	10803fcc 	andi	r2,r2,255
   29780:	1080201c 	xori	r2,r2,128
   29784:	10bfe004 	addi	r2,r2,-128
   29788:	10c01324 	muli	r3,r2,76
   2978c:	008202b4 	movhi	r2,2058
   29790:	1885883a 	add	r2,r3,r2
   29794:	100b1615 	stw	zero,11352(r2)
   29798:	00001406 	br	297ec <alt_tse_system_add_sys+0x83c>
        }
        else {
            tse_mac_device[tse_system_count].tse_phy_mdio_address    = pphy->tse_phy_mdio_address;
   2979c:	d0a7b683 	ldbu	r2,-24870(gp)
   297a0:	10803fcc 	andi	r2,r2,255
   297a4:	1080201c 	xori	r2,r2,128
   297a8:	10bfe004 	addi	r2,r2,-128
   297ac:	e0fff917 	ldw	r3,-28(fp)
   297b0:	18c00017 	ldw	r3,0(r3)
   297b4:	11001324 	muli	r4,r2,76
   297b8:	008202b4 	movhi	r2,2058
   297bc:	2085883a 	add	r2,r4,r2
   297c0:	10cb1515 	stw	r3,11348(r2)
            tse_mac_device[tse_system_count].tse_phy_cfg             = pphy->tse_phy_cfg;
   297c4:	d0a7b683 	ldbu	r2,-24870(gp)
   297c8:	10803fcc 	andi	r2,r2,255
   297cc:	1080201c 	xori	r2,r2,128
   297d0:	10bfe004 	addi	r2,r2,-128
   297d4:	e0fff917 	ldw	r3,-28(fp)
   297d8:	18c00117 	ldw	r3,4(r3)
   297dc:	11001324 	muli	r4,r2,76
   297e0:	008202b4 	movhi	r2,2058
   297e4:	2085883a 	add	r2,r4,r2
   297e8:	10cb1615 	stw	r3,11352(r2)
        }
        
        /* Point to next structure */
        pmsgdma++;
   297ec:	e0bffc17 	ldw	r2,-16(fp)
   297f0:	10800304 	addi	r2,r2,12
   297f4:	e0bffc15 	stw	r2,-16(fp)
        if(pmem) pmem++;
   297f8:	e0bffb17 	ldw	r2,-20(fp)
   297fc:	10000326 	beq	r2,zero,2980c <alt_tse_system_add_sys+0x85c>
   29800:	e0bffb17 	ldw	r2,-20(fp)
   29804:	10800204 	addi	r2,r2,8
   29808:	e0bffb15 	stw	r2,-20(fp)
        if(pfifo) pfifo++;
   2980c:	e0bffa17 	ldw	r2,-24(fp)
   29810:	10000326 	beq	r2,zero,29820 <alt_tse_system_add_sys+0x870>
   29814:	e0bffa17 	ldw	r2,-24(fp)
   29818:	10800704 	addi	r2,r2,28
   2981c:	e0bffa15 	stw	r2,-24(fp)
        if(pphy) pphy++;
   29820:	e0bff917 	ldw	r2,-28(fp)
   29824:	10000326 	beq	r2,zero,29834 <alt_tse_system_add_sys+0x884>
   29828:	e0bff917 	ldw	r2,-28(fp)
   2982c:	10800204 	addi	r2,r2,8
   29830:	e0bff915 	stw	r2,-28(fp)
        
        tse_system_count++;
   29834:	d0a7b683 	ldbu	r2,-24870(gp)
   29838:	10800044 	addi	r2,r2,1
   2983c:	d0a7b685 	stb	r2,-24870(gp)
        max_mac_system = tse_system_count;
   29840:	d0a7b683 	ldbu	r2,-24870(gp)
   29844:	d0a01005 	stb	r2,-32704(gp)
    for(i = 0; i < loop_end; i++) {
   29848:	e0bffe17 	ldw	r2,-8(fp)
   2984c:	10800044 	addi	r2,r2,1
   29850:	e0bffe15 	stw	r2,-8(fp)
   29854:	e0fffe17 	ldw	r3,-8(fp)
   29858:	e0bffd17 	ldw	r2,-12(fp)
   2985c:	18bdfe16 	blt	r3,r2,29058 <__alt_mem_mcu_subsystem_ram_0+0x78009058>
    }
    
    return SUCCESS;
   29860:	0005883a 	mov	r2,zero
    
}
   29864:	e6ffff04 	addi	sp,fp,-4
   29868:	dfc00217 	ldw	ra,8(sp)
   2986c:	df000117 	ldw	fp,4(sp)
   29870:	dc000017 	ldw	r16,0(sp)
   29874:	dec00304 	addi	sp,sp,12
   29878:	f800283a 	ret

0002987c <alt_tse_sys_enable_mdio_sharing>:
 * @param        number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 *                 ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
   2987c:	defff904 	addi	sp,sp,-28
   29880:	dfc00615 	stw	ra,24(sp)
   29884:	df000515 	stw	fp,20(sp)
   29888:	df000504 	addi	fp,sp,20
   2988c:	e13ffc15 	stw	r4,-16(fp)
   29890:	2805883a 	mov	r2,r5
   29894:	e0bffb05 	stb	r2,-20(fp)
    alt_32 i;
    alt_32 j;
    
    alt_tse_system_mac *psys_mac;
    
    for(i = 0; i < number_of_mac; i++) {
   29898:	e03fff15 	stw	zero,-4(fp)
   2989c:	00003f06 	br	2999c <alt_tse_sys_enable_mdio_sharing+0x120>
        psys_mac = psys_mac_list[i];
   298a0:	e0bfff17 	ldw	r2,-4(fp)
   298a4:	100490ba 	slli	r2,r2,2
   298a8:	e0fffc17 	ldw	r3,-16(fp)
   298ac:	1885883a 	add	r2,r3,r2
   298b0:	10800017 	ldw	r2,0(r2)
   298b4:	e0bffd15 	stw	r2,-12(fp)
        
        if(psys_mac == 0) {
   298b8:	e0bffd17 	ldw	r2,-12(fp)
   298bc:	1000081e 	bne	r2,zero,298e0 <alt_tse_sys_enable_mdio_sharing+0x64>
            tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
   298c0:	010000f4 	movhi	r4,3
   298c4:	210fcf04 	addi	r4,r4,16188
   298c8:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
   298cc:	010000f4 	movhi	r4,3
   298d0:	21103404 	addi	r4,r4,16592
   298d4:	0028a980 	call	28a98 <no_printf>
            return ALTERA_TSE_SYSTEM_DEF_ERROR;
   298d8:	00bfffc4 	movi	r2,-1
   298dc:	00003306 	br	299ac <alt_tse_sys_enable_mdio_sharing+0x130>
        }
        
        for(j = 0; j < max_mac_system; j++) {
   298e0:	e03ffe15 	stw	zero,-8(fp)
   298e4:	00002606 	br	29980 <alt_tse_sys_enable_mdio_sharing+0x104>
            
            if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
   298e8:	e0bffd17 	ldw	r2,-12(fp)
   298ec:	10c00017 	ldw	r3,0(r2)
   298f0:	e0bffe17 	ldw	r2,-8(fp)
   298f4:	11001324 	muli	r4,r2,76
   298f8:	008202b4 	movhi	r2,2058
   298fc:	2085883a 	add	r2,r4,r2
   29900:	108b0417 	ldw	r2,11280(r2)
   29904:	18801b1e 	bne	r3,r2,29974 <alt_tse_sys_enable_mdio_sharing+0xf8>
                if(tse_mac_device[j].tse_multichannel_mac) {
   29908:	e0bffe17 	ldw	r2,-8(fp)
   2990c:	10c01324 	muli	r3,r2,76
   29910:	008202b4 	movhi	r2,2058
   29914:	1885883a 	add	r2,r3,r2
   29918:	108b07c3 	ldbu	r2,11295(r2)
   2991c:	10803fcc 	andi	r2,r2,255
   29920:	10000826 	beq	r2,zero,29944 <alt_tse_sys_enable_mdio_sharing+0xc8>
                    tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
   29924:	010000f4 	movhi	r4,3
   29928:	21104804 	addi	r4,r4,16672
   2992c:	0028a980 	call	28a98 <no_printf>
                    tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
   29930:	010000f4 	movhi	r4,3
   29934:	21105904 	addi	r4,r4,16740
   29938:	0028a980 	call	28a98 <no_printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
   2993c:	00bfffc4 	movi	r2,-1
   29940:	00001a06 	br	299ac <alt_tse_sys_enable_mdio_sharing+0x130>
                }
                
                tse_mac_device[j].tse_mdio_shared = 1;
   29944:	e0bffe17 	ldw	r2,-8(fp)
   29948:	11001324 	muli	r4,r2,76
   2994c:	00c00044 	movi	r3,1
   29950:	008202b4 	movhi	r2,2058
   29954:	2085883a 	add	r2,r4,r2
   29958:	10cb0845 	stb	r3,11297(r2)
                tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
   2995c:	e0bffe17 	ldw	r2,-8(fp)
   29960:	11001324 	muli	r4,r2,76
   29964:	e0fffb03 	ldbu	r3,-20(fp)
   29968:	008202b4 	movhi	r2,2058
   2996c:	2085883a 	add	r2,r4,r2
   29970:	10cb0885 	stb	r3,11298(r2)
        for(j = 0; j < max_mac_system; j++) {
   29974:	e0bffe17 	ldw	r2,-8(fp)
   29978:	10800044 	addi	r2,r2,1
   2997c:	e0bffe15 	stw	r2,-8(fp)
   29980:	d0a01003 	ldbu	r2,-32704(gp)
   29984:	10803fcc 	andi	r2,r2,255
   29988:	e0fffe17 	ldw	r3,-8(fp)
   2998c:	18bfd616 	blt	r3,r2,298e8 <__alt_mem_mcu_subsystem_ram_0+0x780098e8>
    for(i = 0; i < number_of_mac; i++) {
   29990:	e0bfff17 	ldw	r2,-4(fp)
   29994:	10800044 	addi	r2,r2,1
   29998:	e0bfff15 	stw	r2,-4(fp)
   2999c:	e0bffb03 	ldbu	r2,-20(fp)
   299a0:	e0ffff17 	ldw	r3,-4(fp)
   299a4:	18bfbe16 	blt	r3,r2,298a0 <__alt_mem_mcu_subsystem_ram_0+0x780098a0>
            }
        }    
    }
    
    return SUCCESS;
   299a8:	0005883a 	mov	r2,zero
}
   299ac:	e037883a 	mov	sp,fp
   299b0:	dfc00117 	ldw	ra,4(sp)
   299b4:	df000017 	ldw	fp,0(sp)
   299b8:	dec00204 	addi	sp,sp,8
   299bc:	f800283a 	ret

000299c0 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
   299c0:	defffc04 	addi	sp,sp,-16
   299c4:	dfc00315 	stw	ra,12(sp)
   299c8:	df000215 	stw	fp,8(sp)
   299cc:	df000204 	addi	fp,sp,8
   299d0:	e13ffe15 	stw	r4,-8(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
   299d4:	e13ffe17 	ldw	r4,-8(fp)
   299d8:	0029b9c0 	call	29b9c <alt_tse_get_mac_info>
   299dc:	10800317 	ldw	r2,12(r2)
   299e0:	e0bfff15 	stw	r2,-4(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
   299e4:	e13fff17 	ldw	r4,-4(fp)
   299e8:	002cd2c0 	call	2cd2c <alt_tse_phy_get_common_speed>
}
   299ec:	e037883a 	mov	sp,fp
   299f0:	dfc00117 	ldw	ra,4(sp)
   299f4:	df000017 	ldw	fp,0(sp)
   299f8:	dec00204 	addi	sp,sp,8
   299fc:	f800283a 	ret

00029a00 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
   29a00:	defffb04 	addi	sp,sp,-20
   29a04:	dfc00415 	stw	ra,16(sp)
   29a08:	df000315 	stw	fp,12(sp)
   29a0c:	df000304 	addi	fp,sp,12
   29a10:	e13ffe15 	stw	r4,-8(fp)
   29a14:	e17ffd15 	stw	r5,-12(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
   29a18:	e13ffe17 	ldw	r4,-8(fp)
   29a1c:	0029b9c0 	call	29b9c <alt_tse_get_mac_info>
   29a20:	10800317 	ldw	r2,12(r2)
   29a24:	e0bfff15 	stw	r2,-4(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
   29a28:	e17ffd17 	ldw	r5,-12(fp)
   29a2c:	e13fff17 	ldw	r4,-4(fp)
   29a30:	002d04c0 	call	2d04c <alt_tse_phy_set_common_speed>
}
   29a34:	e037883a 	mov	sp,fp
   29a38:	dfc00117 	ldw	ra,4(sp)
   29a3c:	df000017 	ldw	fp,0(sp)
   29a40:	dec00204 	addi	sp,sp,8
   29a44:	f800283a 	ret

00029a48 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
   29a48:	defffd04 	addi	sp,sp,-12
   29a4c:	df000215 	stw	fp,8(sp)
   29a50:	df000204 	addi	fp,sp,8
   29a54:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
   29a58:	e03fff15 	stw	zero,-4(fp)
   29a5c:	00000c06 	br	29a90 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
   29a60:	e0bfff17 	ldw	r2,-4(fp)
   29a64:	10c01324 	muli	r3,r2,76
   29a68:	008202b4 	movhi	r2,2058
   29a6c:	108b0404 	addi	r2,r2,11280
   29a70:	1885883a 	add	r2,r3,r2
   29a74:	e0fffe17 	ldw	r3,-8(fp)
   29a78:	1880021e 	bne	r3,r2,29a84 <alt_tse_get_system_index+0x3c>
            return i;
   29a7c:	e0bfff17 	ldw	r2,-4(fp)
   29a80:	00000806 	br	29aa4 <alt_tse_get_system_index+0x5c>
    for(i = 0; i < max_mac_system; i++) {
   29a84:	e0bfff17 	ldw	r2,-4(fp)
   29a88:	10800044 	addi	r2,r2,1
   29a8c:	e0bfff15 	stw	r2,-4(fp)
   29a90:	d0a01003 	ldbu	r2,-32704(gp)
   29a94:	10803fcc 	andi	r2,r2,255
   29a98:	e0ffff17 	ldw	r3,-4(fp)
   29a9c:	18bff016 	blt	r3,r2,29a60 <__alt_mem_mcu_subsystem_ram_0+0x78009a60>
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
   29aa0:	00bfffc4 	movi	r2,-1
}
   29aa4:	e037883a 	mov	sp,fp
   29aa8:	df000017 	ldw	fp,0(sp)
   29aac:	dec00104 	addi	sp,sp,4
   29ab0:	f800283a 	ret

00029ab4 <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
   29ab4:	defffd04 	addi	sp,sp,-12
   29ab8:	df000215 	stw	fp,8(sp)
   29abc:	df000204 	addi	fp,sp,8
   29ac0:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
   29ac4:	e03fff15 	stw	zero,-4(fp)
   29ac8:	00000c06 	br	29afc <alt_tse_get_mac_group_index+0x48>
        if(pmac_group == pmac_groups[i]) {
   29acc:	e0bfff17 	ldw	r2,-4(fp)
   29ad0:	100690ba 	slli	r3,r2,2
   29ad4:	008202b4 	movhi	r2,2058
   29ad8:	1885883a 	add	r2,r3,r2
   29adc:	108d6c17 	ldw	r2,13744(r2)
   29ae0:	e0fffe17 	ldw	r3,-8(fp)
   29ae4:	1880021e 	bne	r3,r2,29af0 <alt_tse_get_mac_group_index+0x3c>
            return i;
   29ae8:	e0bfff17 	ldw	r2,-4(fp)
   29aec:	00000806 	br	29b10 <alt_tse_get_mac_group_index+0x5c>
    for(i = 0; i < mac_group_count; i++) {
   29af0:	e0bfff17 	ldw	r2,-4(fp)
   29af4:	10800044 	addi	r2,r2,1
   29af8:	e0bfff15 	stw	r2,-4(fp)
   29afc:	d0a7b643 	ldbu	r2,-24871(gp)
   29b00:	10803fcc 	andi	r2,r2,255
   29b04:	e0ffff17 	ldw	r3,-4(fp)
   29b08:	18bff016 	blt	r3,r2,29acc <__alt_mem_mcu_subsystem_ram_0+0x78009acc>
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
   29b0c:	00bfffc4 	movi	r2,-1
}
   29b10:	e037883a 	mov	sp,fp
   29b14:	df000017 	ldw	fp,0(sp)
   29b18:	dec00104 	addi	sp,sp,4
   29b1c:	f800283a 	ret

00029b20 <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
   29b20:	defffd04 	addi	sp,sp,-12
   29b24:	df000215 	stw	fp,8(sp)
   29b28:	df000204 	addi	fp,sp,8
   29b2c:	e13ffe15 	stw	r4,-8(fp)
    alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
   29b30:	e03fff15 	stw	zero,-4(fp)
   29b34:	00000e06 	br	29b70 <alt_tse_get_mac_info_index+0x50>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
   29b38:	e0bffe17 	ldw	r2,-8(fp)
   29b3c:	10c00317 	ldw	r3,12(r2)
   29b40:	e0bfff17 	ldw	r2,-4(fp)
   29b44:	10800044 	addi	r2,r2,1
   29b48:	100490ba 	slli	r2,r2,2
   29b4c:	1885883a 	add	r2,r3,r2
   29b50:	10800017 	ldw	r2,0(r2)
   29b54:	e0fffe17 	ldw	r3,-8(fp)
   29b58:	1880021e 	bne	r3,r2,29b64 <alt_tse_get_mac_info_index+0x44>
            return i;
   29b5c:	e0bfff17 	ldw	r2,-4(fp)
   29b60:	00000a06 	br	29b8c <alt_tse_get_mac_info_index+0x6c>
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
   29b64:	e0bfff17 	ldw	r2,-4(fp)
   29b68:	10800044 	addi	r2,r2,1
   29b6c:	e0bfff15 	stw	r2,-4(fp)
   29b70:	e0bffe17 	ldw	r2,-8(fp)
   29b74:	10800317 	ldw	r2,12(r2)
   29b78:	10800003 	ldbu	r2,0(r2)
   29b7c:	10803fcc 	andi	r2,r2,255
   29b80:	e0ffff17 	ldw	r3,-4(fp)
   29b84:	18bfec16 	blt	r3,r2,29b38 <__alt_mem_mcu_subsystem_ram_0+0x78009b38>
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
   29b88:	00bfffc4 	movi	r2,-1
}
   29b8c:	e037883a 	mov	sp,fp
   29b90:	df000017 	ldw	fp,0(sp)
   29b94:	dec00104 	addi	sp,sp,4
   29b98:	f800283a 	ret

00029b9c <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
   29b9c:	defffa04 	addi	sp,sp,-24
   29ba0:	df000515 	stw	fp,20(sp)
   29ba4:	df000504 	addi	fp,sp,20
   29ba8:	e13ffb15 	stw	r4,-20(fp)
    alt_32 i;
    alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
   29bac:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
   29bb0:	e03ffc15 	stw	zero,-16(fp)
    
    for(i = 0; i < mac_group_count; i++) {
   29bb4:	e03fff15 	stw	zero,-4(fp)
   29bb8:	00002206 	br	29c44 <alt_tse_get_mac_info+0xa8>
        pmac_group = pmac_groups[i];
   29bbc:	e0bfff17 	ldw	r2,-4(fp)
   29bc0:	100690ba 	slli	r3,r2,2
   29bc4:	008202b4 	movhi	r2,2058
   29bc8:	1885883a 	add	r2,r3,r2
   29bcc:	108d6c17 	ldw	r2,13744(r2)
   29bd0:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
   29bd4:	e03ffe15 	stw	zero,-8(fp)
   29bd8:	00001206 	br	29c24 <alt_tse_get_mac_info+0x88>
            pmac_info = pmac_group->pmac_info[j];
   29bdc:	e0fffd17 	ldw	r3,-12(fp)
   29be0:	e0bffe17 	ldw	r2,-8(fp)
   29be4:	10800044 	addi	r2,r2,1
   29be8:	100490ba 	slli	r2,r2,2
   29bec:	1885883a 	add	r2,r3,r2
   29bf0:	10800017 	ldw	r2,0(r2)
   29bf4:	e0bffc15 	stw	r2,-16(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
   29bf8:	e0bffc17 	ldw	r2,-16(fp)
   29bfc:	10800217 	ldw	r2,8(r2)
   29c00:	10800017 	ldw	r2,0(r2)
   29c04:	1007883a 	mov	r3,r2
   29c08:	e0bffb17 	ldw	r2,-20(fp)
   29c0c:	10c0021e 	bne	r2,r3,29c18 <alt_tse_get_mac_info+0x7c>
                return pmac_info;
   29c10:	e0bffc17 	ldw	r2,-16(fp)
   29c14:	00001006 	br	29c58 <alt_tse_get_mac_info+0xbc>
        for(j = 0; j < pmac_group->channel; j++) {
   29c18:	e0bffe17 	ldw	r2,-8(fp)
   29c1c:	10800044 	addi	r2,r2,1
   29c20:	e0bffe15 	stw	r2,-8(fp)
   29c24:	e0bffd17 	ldw	r2,-12(fp)
   29c28:	10800003 	ldbu	r2,0(r2)
   29c2c:	10803fcc 	andi	r2,r2,255
   29c30:	e0fffe17 	ldw	r3,-8(fp)
   29c34:	18bfe916 	blt	r3,r2,29bdc <__alt_mem_mcu_subsystem_ram_0+0x78009bdc>
    for(i = 0; i < mac_group_count; i++) {
   29c38:	e0bfff17 	ldw	r2,-4(fp)
   29c3c:	10800044 	addi	r2,r2,1
   29c40:	e0bfff15 	stw	r2,-4(fp)
   29c44:	d0a7b643 	ldbu	r2,-24871(gp)
   29c48:	10803fcc 	andi	r2,r2,255
   29c4c:	e0ffff17 	ldw	r3,-4(fp)
   29c50:	18bfda16 	blt	r3,r2,29bbc <__alt_mem_mcu_subsystem_ram_0+0x78009bbc>
            }
        }        
    }
    
    return 0;
   29c54:	0005883a 	mov	r2,zero
}
   29c58:	e037883a 	mov	sp,fp
   29c5c:	df000017 	ldw	fp,0(sp)
   29c60:	dec00104 	addi	sp,sp,4
   29c64:	f800283a 	ret

00029c68 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
   29c68:	defffc04 	addi	sp,sp,-16
   29c6c:	df000315 	stw	fp,12(sp)
   29c70:	df000304 	addi	fp,sp,12
   29c74:	e13ffe15 	stw	r4,-8(fp)
   29c78:	2805883a 	mov	r2,r5
   29c7c:	e0bffd05 	stb	r2,-12(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   29c80:	e0bffe17 	ldw	r2,-8(fp)
   29c84:	10800204 	addi	r2,r2,8
   29c88:	10800037 	ldwio	r2,0(r2)
   29c8c:	e0bfff15 	stw	r2,-4(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
   29c90:	e0bffd03 	ldbu	r2,-12(fp)
   29c94:	10800098 	cmpnei	r2,r2,2
   29c98:	1000091e 	bne	r2,zero,29cc0 <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   29c9c:	e0bfff17 	ldw	r2,-4(fp)
   29ca0:	10800214 	ori	r2,r2,8
   29ca4:	e0bfff15 	stw	r2,-4(fp)
    helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   29ca8:	e0ffff17 	ldw	r3,-4(fp)
   29cac:	00bf8034 	movhi	r2,65024
   29cb0:	10bfffc4 	addi	r2,r2,-1
   29cb4:	1884703a 	and	r2,r3,r2
   29cb8:	e0bfff15 	stw	r2,-4(fp)
   29cbc:	00001906 	br	29d24 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
   29cc0:	e0bffd03 	ldbu	r2,-12(fp)
   29cc4:	10800058 	cmpnei	r2,r2,1
   29cc8:	10000a1e 	bne	r2,zero,29cf4 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   29ccc:	e0ffff17 	ldw	r3,-4(fp)
   29cd0:	00bffdc4 	movi	r2,-9
   29cd4:	1884703a 	and	r2,r3,r2
   29cd8:	e0bfff15 	stw	r2,-4(fp)
    helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   29cdc:	e0ffff17 	ldw	r3,-4(fp)
   29ce0:	00bf8034 	movhi	r2,65024
   29ce4:	10bfffc4 	addi	r2,r2,-1
   29ce8:	1884703a 	and	r2,r3,r2
   29cec:	e0bfff15 	stw	r2,-4(fp)
   29cf0:	00000c06 	br	29d24 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
   29cf4:	e0bffd03 	ldbu	r2,-12(fp)
   29cf8:	1000081e 	bne	r2,zero,29d1c <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   29cfc:	e0ffff17 	ldw	r3,-4(fp)
   29d00:	00bffdc4 	movi	r2,-9
   29d04:	1884703a 	and	r2,r3,r2
   29d08:	e0bfff15 	stw	r2,-4(fp)
    helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
   29d0c:	e0bfff17 	ldw	r2,-4(fp)
   29d10:	10808034 	orhi	r2,r2,512
   29d14:	e0bfff15 	stw	r2,-4(fp)
   29d18:	00000206 	br	29d24 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
   29d1c:	00bffd84 	movi	r2,-10
   29d20:	00000506 	br	29d38 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
   29d24:	e0bffe17 	ldw	r2,-8(fp)
   29d28:	10800204 	addi	r2,r2,8
   29d2c:	e0ffff17 	ldw	r3,-4(fp)
   29d30:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   29d34:	0005883a 	mov	r2,zero
}
   29d38:	e037883a 	mov	sp,fp
   29d3c:	df000017 	ldw	fp,0(sp)
   29d40:	dec00104 	addi	sp,sp,4
   29d44:	f800283a 	ret

00029d48 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
   29d48:	defffc04 	addi	sp,sp,-16
   29d4c:	df000315 	stw	fp,12(sp)
   29d50:	df000304 	addi	fp,sp,12
   29d54:	e13ffe15 	stw	r4,-8(fp)
   29d58:	2805883a 	mov	r2,r5
   29d5c:	e0bffd05 	stb	r2,-12(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   29d60:	e0bffe17 	ldw	r2,-8(fp)
   29d64:	10800204 	addi	r2,r2,8
   29d68:	10800037 	ldwio	r2,0(r2)
   29d6c:	e0bfff15 	stw	r2,-4(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
   29d70:	e0bffd03 	ldbu	r2,-12(fp)
   29d74:	1000041e 	bne	r2,zero,29d88 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
   29d78:	e0bfff17 	ldw	r2,-4(fp)
   29d7c:	10810014 	ori	r2,r2,1024
   29d80:	e0bfff15 	stw	r2,-4(fp)
   29d84:	00000a06 	br	29db0 <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
   29d88:	e0bffd03 	ldbu	r2,-12(fp)
   29d8c:	10800058 	cmpnei	r2,r2,1
   29d90:	1000051e 	bne	r2,zero,29da8 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
   29d94:	e0ffff17 	ldw	r3,-4(fp)
   29d98:	00beffc4 	movi	r2,-1025
   29d9c:	1884703a 	and	r2,r3,r2
   29da0:	e0bfff15 	stw	r2,-4(fp)
   29da4:	00000206 	br	29db0 <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
   29da8:	00bffd84 	movi	r2,-10
   29dac:	00000506 	br	29dc4 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
   29db0:	e0bffe17 	ldw	r2,-8(fp)
   29db4:	10800204 	addi	r2,r2,8
   29db8:	e0ffff17 	ldw	r3,-4(fp)
   29dbc:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   29dc0:	0005883a 	mov	r2,zero

}
   29dc4:	e037883a 	mov	sp,fp
   29dc8:	df000017 	ldw	fp,0(sp)
   29dcc:	dec00104 	addi	sp,sp,4
   29dd0:	f800283a 	ret

00029dd4 <getPHYSpeed>:
      (((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
    (((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
    (((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
    ((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
   29dd4:	defff404 	addi	sp,sp,-48
   29dd8:	dfc00b15 	stw	ra,44(sp)
   29ddc:	df000a15 	stw	fp,40(sp)
   29de0:	df000a04 	addi	fp,sp,40
   29de4:	e13ff715 	stw	r4,-36(fp)

    alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   29de8:	00800044 	movi	r2,1
   29dec:	e0bfffc5 	stb	r2,-1(fp)
    alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
   29df0:	00800044 	movi	r2,1
   29df4:	e0bfff85 	stb	r2,-2(fp)
    alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
   29df8:	e0bfff83 	ldbu	r2,-2(fp)
   29dfc:	10c0004c 	andi	r3,r2,1
   29e00:	e0bfffc3 	ldbu	r2,-1(fp)
   29e04:	10800098 	cmpnei	r2,r2,2
   29e08:	1000021e 	bne	r2,zero,29e14 <getPHYSpeed+0x40>
   29e0c:	00800084 	movi	r2,2
   29e10:	00000106 	br	29e18 <getPHYSpeed+0x44>
   29e14:	0005883a 	mov	r2,zero
   29e18:	10c6b03a 	or	r3,r2,r3
   29e1c:	e0bfffc3 	ldbu	r2,-1(fp)
   29e20:	10800058 	cmpnei	r2,r2,1
   29e24:	1000021e 	bne	r2,zero,29e30 <getPHYSpeed+0x5c>
   29e28:	00800104 	movi	r2,4
   29e2c:	00000106 	br	29e34 <getPHYSpeed+0x60>
   29e30:	0005883a 	mov	r2,zero
   29e34:	10c6b03a 	or	r3,r2,r3
   29e38:	e0bfffc3 	ldbu	r2,-1(fp)
   29e3c:	1000021e 	bne	r2,zero,29e48 <getPHYSpeed+0x74>
   29e40:	00800204 	movi	r2,8
   29e44:	00000106 	br	29e4c <getPHYSpeed+0x78>
   29e48:	0005883a 	mov	r2,zero
   29e4c:	10c6b03a 	or	r3,r2,r3
   29e50:	e0bfffc3 	ldbu	r2,-1(fp)
   29e54:	108000d8 	cmpnei	r2,r2,3
   29e58:	1000021e 	bne	r2,zero,29e64 <getPHYSpeed+0x90>
   29e5c:	00800074 	movhi	r2,1
   29e60:	00000106 	br	29e68 <getPHYSpeed+0x94>
   29e64:	0005883a 	mov	r2,zero
   29e68:	10c4b03a 	or	r2,r2,r3
   29e6c:	e0bffe15 	stw	r2,-8(fp)
    
    alt_tse_phy_info *pphy = 0;
   29e70:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
   29e74:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_mac_group *pmac_group = 0;
   29e78:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
   29e7c:	e03ffa15 	stw	zero,-24(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
   29e80:	e03ff9c5 	stb	zero,-25(fp)
    alt_8 mac_group_index = 0;
   29e84:	e03ff985 	stb	zero,-26(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
   29e88:	d0a7b6c3 	ldbu	r2,-24869(gp)
   29e8c:	10803fcc 	andi	r2,r2,255
   29e90:	1000031e 	bne	r2,zero,29ea0 <getPHYSpeed+0xcc>
        alt_tse_phy_init();
   29e94:	002bd800 	call	2bd80 <alt_tse_phy_init>
        is_init = 1;
   29e98:	00800044 	movi	r2,1
   29e9c:	d0a7b6c5 	stb	r2,-24869(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
   29ea0:	e13ff717 	ldw	r4,-36(fp)
   29ea4:	0029b9c0 	call	29b9c <alt_tse_get_mac_info>
   29ea8:	e0bffc15 	stw	r2,-16(fp)
    
    if(pmac_info == 0) {
   29eac:	e0bffc17 	ldw	r2,-16(fp)
   29eb0:	1000481e 	bne	r2,zero,29fd4 <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   29eb4:	00800044 	movi	r2,1
   29eb8:	e0bfffc5 	stb	r2,-1(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   29ebc:	00800044 	movi	r2,1
   29ec0:	e0bfff85 	stb	r2,-2(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
   29ec4:	e0bfff83 	ldbu	r2,-2(fp)
   29ec8:	10c0004c 	andi	r3,r2,1
   29ecc:	e0bfffc3 	ldbu	r2,-1(fp)
   29ed0:	10800098 	cmpnei	r2,r2,2
   29ed4:	1000021e 	bne	r2,zero,29ee0 <getPHYSpeed+0x10c>
   29ed8:	00800084 	movi	r2,2
   29edc:	00000106 	br	29ee4 <getPHYSpeed+0x110>
   29ee0:	0005883a 	mov	r2,zero
   29ee4:	10c6b03a 	or	r3,r2,r3
   29ee8:	e0bfffc3 	ldbu	r2,-1(fp)
   29eec:	10800058 	cmpnei	r2,r2,1
   29ef0:	1000021e 	bne	r2,zero,29efc <getPHYSpeed+0x128>
   29ef4:	00800104 	movi	r2,4
   29ef8:	00000106 	br	29f00 <getPHYSpeed+0x12c>
   29efc:	0005883a 	mov	r2,zero
   29f00:	10c6b03a 	or	r3,r2,r3
   29f04:	e0bfffc3 	ldbu	r2,-1(fp)
   29f08:	1000021e 	bne	r2,zero,29f14 <getPHYSpeed+0x140>
   29f0c:	00800204 	movi	r2,8
   29f10:	00000106 	br	29f18 <getPHYSpeed+0x144>
   29f14:	0005883a 	mov	r2,zero
   29f18:	10c6b03a 	or	r3,r2,r3
   29f1c:	e0bfffc3 	ldbu	r2,-1(fp)
   29f20:	108000d8 	cmpnei	r2,r2,3
   29f24:	1000021e 	bne	r2,zero,29f30 <getPHYSpeed+0x15c>
   29f28:	00800074 	movhi	r2,1
   29f2c:	00000106 	br	29f34 <getPHYSpeed+0x160>
   29f30:	0005883a 	mov	r2,zero
   29f34:	10c4b03a 	or	r2,r2,r3
   29f38:	10802034 	orhi	r2,r2,128
   29f3c:	e0bffe15 	stw	r2,-8(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
   29f40:	e0bfffc3 	ldbu	r2,-1(fp)
   29f44:	108000a0 	cmpeqi	r2,r2,2
   29f48:	10000e1e 	bne	r2,zero,29f84 <getPHYSpeed+0x1b0>
   29f4c:	e0bfffc3 	ldbu	r2,-1(fp)
   29f50:	10800060 	cmpeqi	r2,r2,1
   29f54:	1000081e 	bne	r2,zero,29f78 <getPHYSpeed+0x1a4>
   29f58:	e0bfffc3 	ldbu	r2,-1(fp)
   29f5c:	1000031e 	bne	r2,zero,29f6c <getPHYSpeed+0x198>
   29f60:	008000f4 	movhi	r2,3
   29f64:	10906804 	addi	r2,r2,16800
   29f68:	00000806 	br	29f8c <getPHYSpeed+0x1b8>
   29f6c:	008000f4 	movhi	r2,3
   29f70:	10906904 	addi	r2,r2,16804
   29f74:	00000506 	br	29f8c <getPHYSpeed+0x1b8>
   29f78:	008000f4 	movhi	r2,3
   29f7c:	10906b04 	addi	r2,r2,16812
   29f80:	00000206 	br	29f8c <getPHYSpeed+0x1b8>
   29f84:	008000f4 	movhi	r2,3
   29f88:	10906c04 	addi	r2,r2,16816
   29f8c:	e0ffff83 	ldbu	r3,-2(fp)
   29f90:	18c00058 	cmpnei	r3,r3,1
   29f94:	1800031e 	bne	r3,zero,29fa4 <getPHYSpeed+0x1d0>
   29f98:	00c000f4 	movhi	r3,3
   29f9c:	18d06e04 	addi	r3,r3,16824
   29fa0:	00000206 	br	29fac <getPHYSpeed+0x1d8>
   29fa4:	00c000f4 	movhi	r3,3
   29fa8:	18d07004 	addi	r3,r3,16832
   29fac:	180d883a 	mov	r6,r3
   29fb0:	100b883a 	mov	r5,r2
   29fb4:	010000f4 	movhi	r4,3
   29fb8:	21107204 	addi	r4,r4,16840
   29fbc:	0028a980 	call	28a98 <no_printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
   29fc0:	010000f4 	movhi	r4,3
   29fc4:	21108a04 	addi	r4,r4,16936
   29fc8:	0028a980 	call	28a98 <no_printf>
        return result;
   29fcc:	e0bffe17 	ldw	r2,-8(fp)
   29fd0:	00021906 	br	2a838 <getPHYSpeed+0xa64>
    }
    
    pphy = pmac_info->pphy_info;
   29fd4:	e0bffc17 	ldw	r2,-16(fp)
   29fd8:	10800117 	ldw	r2,4(r2)
   29fdc:	e0bffd15 	stw	r2,-12(fp)
    pmac_group = pmac_info->pmac_group;
   29fe0:	e0bffc17 	ldw	r2,-16(fp)
   29fe4:	10800317 	ldw	r2,12(r2)
   29fe8:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
   29fec:	e0bffc17 	ldw	r2,-16(fp)
   29ff0:	10800217 	ldw	r2,8(r2)
   29ff4:	e0bffa15 	stw	r2,-24(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   29ff8:	e13ffc17 	ldw	r4,-16(fp)
   29ffc:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2a000:	e0bff9c5 	stb	r2,-25(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2a004:	e13ffb17 	ldw	r4,-20(fp)
   2a008:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2a00c:	e0bff985 	stb	r2,-26(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
   2a010:	e0bffb17 	ldw	r2,-20(fp)
   2a014:	10800117 	ldw	r2,4(r2)
   2a018:	10800217 	ldw	r2,8(r2)
   2a01c:	10800303 	ldbu	r2,12(r2)
   2a020:	10803fcc 	andi	r2,r2,255
   2a024:	10005a1e 	bne	r2,zero,2a190 <getPHYSpeed+0x3bc>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   2a028:	00800044 	movi	r2,1
   2a02c:	e0bfffc5 	stb	r2,-1(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   2a030:	00800044 	movi	r2,1
   2a034:	e0bfff85 	stb	r2,-2(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
   2a038:	e0bfff83 	ldbu	r2,-2(fp)
   2a03c:	10c0004c 	andi	r3,r2,1
   2a040:	e0bfffc3 	ldbu	r2,-1(fp)
   2a044:	10800098 	cmpnei	r2,r2,2
   2a048:	1000021e 	bne	r2,zero,2a054 <getPHYSpeed+0x280>
   2a04c:	00800084 	movi	r2,2
   2a050:	00000106 	br	2a058 <getPHYSpeed+0x284>
   2a054:	0005883a 	mov	r2,zero
   2a058:	10c6b03a 	or	r3,r2,r3
   2a05c:	e0bfffc3 	ldbu	r2,-1(fp)
   2a060:	10800058 	cmpnei	r2,r2,1
   2a064:	1000021e 	bne	r2,zero,2a070 <getPHYSpeed+0x29c>
   2a068:	00800104 	movi	r2,4
   2a06c:	00000106 	br	2a074 <getPHYSpeed+0x2a0>
   2a070:	0005883a 	mov	r2,zero
   2a074:	10c6b03a 	or	r3,r2,r3
   2a078:	e0bfffc3 	ldbu	r2,-1(fp)
   2a07c:	1000021e 	bne	r2,zero,2a088 <getPHYSpeed+0x2b4>
   2a080:	00800204 	movi	r2,8
   2a084:	00000106 	br	2a08c <getPHYSpeed+0x2b8>
   2a088:	0005883a 	mov	r2,zero
   2a08c:	10c6b03a 	or	r3,r2,r3
   2a090:	e0bfffc3 	ldbu	r2,-1(fp)
   2a094:	108000d8 	cmpnei	r2,r2,3
   2a098:	1000021e 	bne	r2,zero,2a0a4 <getPHYSpeed+0x2d0>
   2a09c:	00800074 	movhi	r2,1
   2a0a0:	00000106 	br	2a0a8 <getPHYSpeed+0x2d4>
   2a0a4:	0005883a 	mov	r2,zero
   2a0a8:	10c4b03a 	or	r2,r2,r3
   2a0ac:	10801034 	orhi	r2,r2,64
   2a0b0:	e0bffe15 	stw	r2,-8(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
   2a0b4:	010003f4 	movhi	r4,15
   2a0b8:	21109004 	addi	r4,r4,16960
   2a0bc:	0025e400 	call	25e40 <usleep>
        if(psys->tse_phy_cfg) {
   2a0c0:	e0bffa17 	ldw	r2,-24(fp)
   2a0c4:	10801217 	ldw	r2,72(r2)
   2a0c8:	10000d26 	beq	r2,zero,2a100 <getPHYSpeed+0x32c>
            tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
   2a0cc:	e0bff987 	ldb	r2,-26(fp)
   2a0d0:	e0fff9c7 	ldb	r3,-25(fp)
   2a0d4:	180d883a 	mov	r6,r3
   2a0d8:	100b883a 	mov	r5,r2
   2a0dc:	010000f4 	movhi	r4,3
   2a0e0:	21109b04 	addi	r4,r4,17004
   2a0e4:	0028a980 	call	28a98 <no_printf>
            result = psys->tse_phy_cfg(pmac);
   2a0e8:	e0bffa17 	ldw	r2,-24(fp)
   2a0ec:	10801217 	ldw	r2,72(r2)
   2a0f0:	e13ff717 	ldw	r4,-36(fp)
   2a0f4:	103ee83a 	callr	r2
   2a0f8:	e0bffe15 	stw	r2,-8(fp)
   2a0fc:	00002206 	br	2a188 <getPHYSpeed+0x3b4>
        }
        else {
            tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   2a100:	e13ff987 	ldb	r4,-26(fp)
   2a104:	e0bfffc3 	ldbu	r2,-1(fp)
   2a108:	108000a0 	cmpeqi	r2,r2,2
   2a10c:	10000e1e 	bne	r2,zero,2a148 <getPHYSpeed+0x374>
   2a110:	e0bfffc3 	ldbu	r2,-1(fp)
   2a114:	10800060 	cmpeqi	r2,r2,1
   2a118:	1000081e 	bne	r2,zero,2a13c <getPHYSpeed+0x368>
   2a11c:	e0bfffc3 	ldbu	r2,-1(fp)
   2a120:	1000031e 	bne	r2,zero,2a130 <getPHYSpeed+0x35c>
   2a124:	008000f4 	movhi	r2,3
   2a128:	10906804 	addi	r2,r2,16800
   2a12c:	00000806 	br	2a150 <getPHYSpeed+0x37c>
   2a130:	008000f4 	movhi	r2,3
   2a134:	10906904 	addi	r2,r2,16804
   2a138:	00000506 	br	2a150 <getPHYSpeed+0x37c>
   2a13c:	008000f4 	movhi	r2,3
   2a140:	10906b04 	addi	r2,r2,16812
   2a144:	00000206 	br	2a150 <getPHYSpeed+0x37c>
   2a148:	008000f4 	movhi	r2,3
   2a14c:	10906c04 	addi	r2,r2,16816
   2a150:	e0ffff83 	ldbu	r3,-2(fp)
   2a154:	18c00058 	cmpnei	r3,r3,1
   2a158:	1800031e 	bne	r3,zero,2a168 <getPHYSpeed+0x394>
   2a15c:	00c000f4 	movhi	r3,3
   2a160:	18d06e04 	addi	r3,r3,16824
   2a164:	00000206 	br	2a170 <getPHYSpeed+0x39c>
   2a168:	00c000f4 	movhi	r3,3
   2a16c:	18d07004 	addi	r3,r3,16832
   2a170:	180f883a 	mov	r7,r3
   2a174:	100d883a 	mov	r6,r2
   2a178:	200b883a 	mov	r5,r4
   2a17c:	010000f4 	movhi	r4,3
   2a180:	2110ad04 	addi	r4,r4,17076
   2a184:	0028a980 	call	28a98 <no_printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
   2a188:	e0bffe17 	ldw	r2,-8(fp)
   2a18c:	0001aa06 	br	2a838 <getPHYSpeed+0xa64>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
    
        /* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
        np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2a190:	e0bffb17 	ldw	r2,-20(fp)
   2a194:	10800117 	ldw	r2,4(r2)
   2a198:	10800217 	ldw	r2,8(r2)
   2a19c:	10800017 	ldw	r2,0(r2)
   2a1a0:	e0bff815 	stw	r2,-32(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
   2a1a4:	e0bffd17 	ldw	r2,-12(fp)
   2a1a8:	1000491e 	bne	r2,zero,2a2d0 <getPHYSpeed+0x4fc>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   2a1ac:	00800044 	movi	r2,1
   2a1b0:	e0bfffc5 	stb	r2,-1(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   2a1b4:	00800044 	movi	r2,1
   2a1b8:	e0bfff85 	stb	r2,-2(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
   2a1bc:	e0bfff83 	ldbu	r2,-2(fp)
   2a1c0:	10c0004c 	andi	r3,r2,1
   2a1c4:	e0bfffc3 	ldbu	r2,-1(fp)
   2a1c8:	10800098 	cmpnei	r2,r2,2
   2a1cc:	1000021e 	bne	r2,zero,2a1d8 <getPHYSpeed+0x404>
   2a1d0:	00800084 	movi	r2,2
   2a1d4:	00000106 	br	2a1dc <getPHYSpeed+0x408>
   2a1d8:	0005883a 	mov	r2,zero
   2a1dc:	10c6b03a 	or	r3,r2,r3
   2a1e0:	e0bfffc3 	ldbu	r2,-1(fp)
   2a1e4:	10800058 	cmpnei	r2,r2,1
   2a1e8:	1000021e 	bne	r2,zero,2a1f4 <getPHYSpeed+0x420>
   2a1ec:	00800104 	movi	r2,4
   2a1f0:	00000106 	br	2a1f8 <getPHYSpeed+0x424>
   2a1f4:	0005883a 	mov	r2,zero
   2a1f8:	10c6b03a 	or	r3,r2,r3
   2a1fc:	e0bfffc3 	ldbu	r2,-1(fp)
   2a200:	1000021e 	bne	r2,zero,2a20c <getPHYSpeed+0x438>
   2a204:	00800204 	movi	r2,8
   2a208:	00000106 	br	2a210 <getPHYSpeed+0x43c>
   2a20c:	0005883a 	mov	r2,zero
   2a210:	10c6b03a 	or	r3,r2,r3
   2a214:	e0bfffc3 	ldbu	r2,-1(fp)
   2a218:	108000d8 	cmpnei	r2,r2,3
   2a21c:	1000021e 	bne	r2,zero,2a228 <getPHYSpeed+0x454>
   2a220:	00800074 	movhi	r2,1
   2a224:	00000106 	br	2a22c <getPHYSpeed+0x458>
   2a228:	0005883a 	mov	r2,zero
   2a22c:	10c4b03a 	or	r2,r2,r3
   2a230:	10800834 	orhi	r2,r2,32
   2a234:	e0bffe15 	stw	r2,-8(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   2a238:	e13ff987 	ldb	r4,-26(fp)
   2a23c:	e17ff9c7 	ldb	r5,-25(fp)
   2a240:	e0bfffc3 	ldbu	r2,-1(fp)
   2a244:	108000a0 	cmpeqi	r2,r2,2
   2a248:	10000e1e 	bne	r2,zero,2a284 <getPHYSpeed+0x4b0>
   2a24c:	e0bfffc3 	ldbu	r2,-1(fp)
   2a250:	10800060 	cmpeqi	r2,r2,1
   2a254:	1000081e 	bne	r2,zero,2a278 <getPHYSpeed+0x4a4>
   2a258:	e0bfffc3 	ldbu	r2,-1(fp)
   2a25c:	1000031e 	bne	r2,zero,2a26c <getPHYSpeed+0x498>
   2a260:	008000f4 	movhi	r2,3
   2a264:	10906804 	addi	r2,r2,16800
   2a268:	00000806 	br	2a28c <getPHYSpeed+0x4b8>
   2a26c:	008000f4 	movhi	r2,3
   2a270:	10906904 	addi	r2,r2,16804
   2a274:	00000506 	br	2a28c <getPHYSpeed+0x4b8>
   2a278:	008000f4 	movhi	r2,3
   2a27c:	10906b04 	addi	r2,r2,16812
   2a280:	00000206 	br	2a28c <getPHYSpeed+0x4b8>
   2a284:	008000f4 	movhi	r2,3
   2a288:	10906c04 	addi	r2,r2,16816
   2a28c:	e0ffff83 	ldbu	r3,-2(fp)
   2a290:	18c00058 	cmpnei	r3,r3,1
   2a294:	1800031e 	bne	r3,zero,2a2a4 <getPHYSpeed+0x4d0>
   2a298:	00c000f4 	movhi	r3,3
   2a29c:	18d06e04 	addi	r3,r3,16824
   2a2a0:	00000206 	br	2a2ac <getPHYSpeed+0x4d8>
   2a2a4:	00c000f4 	movhi	r3,3
   2a2a8:	18d07004 	addi	r3,r3,16832
   2a2ac:	d8c00015 	stw	r3,0(sp)
   2a2b0:	100f883a 	mov	r7,r2
   2a2b4:	280d883a 	mov	r6,r5
   2a2b8:	200b883a 	mov	r5,r4
   2a2bc:	010000f4 	movhi	r4,3
   2a2c0:	2110bf04 	addi	r4,r4,17148
   2a2c4:	0028a980 	call	28a98 <no_printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
   2a2c8:	e0bffe17 	ldw	r2,-8(fp)
   2a2cc:	00015a06 	br	2a838 <getPHYSpeed+0xa64>
        }

        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
   2a2d0:	e0bffc17 	ldw	r2,-16(fp)
   2a2d4:	10800003 	ldbu	r2,0(r2)
   2a2d8:	10803fcc 	andi	r2,r2,255
   2a2dc:	10800058 	cmpnei	r2,r2,1
   2a2e0:	1000071e 	bne	r2,zero,2a300 <getPHYSpeed+0x52c>
            alt_tse_phy_set_adv_1000(pphy, 0);
   2a2e4:	000b883a 	mov	r5,zero
   2a2e8:	e13ffd17 	ldw	r4,-12(fp)
   2a2ec:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   2a2f0:	01427104 	movi	r5,2500
   2a2f4:	e13ffd17 	ldw	r4,-12(fp)
   2a2f8:	002be8c0 	call	2be8c <alt_tse_phy_restart_an>
   2a2fc:	00000e06 	br	2a338 <getPHYSpeed+0x564>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
   2a300:	e0bffc17 	ldw	r2,-16(fp)
   2a304:	10800003 	ldbu	r2,0(r2)
   2a308:	10803fcc 	andi	r2,r2,255
   2a30c:	10800098 	cmpnei	r2,r2,2
   2a310:	1000091e 	bne	r2,zero,2a338 <getPHYSpeed+0x564>
            alt_tse_phy_set_adv_100(pphy, 0);
   2a314:	000b883a 	mov	r5,zero
   2a318:	e13ffd17 	ldw	r4,-12(fp)
   2a31c:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
   2a320:	000b883a 	mov	r5,zero
   2a324:	e13ffd17 	ldw	r4,-12(fp)
   2a328:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
            alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   2a32c:	01427104 	movi	r5,2500
   2a330:	e13ffd17 	ldw	r4,-12(fp)
   2a334:	002be8c0 	call	2be8c <alt_tse_phy_restart_an>
        }
        
        /* check link connection for this PHY */
        if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
   2a338:	01427104 	movi	r5,2500
   2a33c:	e13ffd17 	ldw	r4,-12(fp)
   2a340:	002c0500 	call	2c050 <alt_tse_phy_check_link>
   2a344:	10bfffd8 	cmpnei	r2,r2,-1
   2a348:	1000491e 	bne	r2,zero,2a470 <getPHYSpeed+0x69c>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   2a34c:	00800044 	movi	r2,1
   2a350:	e0bfffc5 	stb	r2,-1(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   2a354:	00800044 	movi	r2,1
   2a358:	e0bfff85 	stb	r2,-2(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
   2a35c:	e0bfff83 	ldbu	r2,-2(fp)
   2a360:	10c0004c 	andi	r3,r2,1
   2a364:	e0bfffc3 	ldbu	r2,-1(fp)
   2a368:	10800098 	cmpnei	r2,r2,2
   2a36c:	1000021e 	bne	r2,zero,2a378 <getPHYSpeed+0x5a4>
   2a370:	00800084 	movi	r2,2
   2a374:	00000106 	br	2a37c <getPHYSpeed+0x5a8>
   2a378:	0005883a 	mov	r2,zero
   2a37c:	10c6b03a 	or	r3,r2,r3
   2a380:	e0bfffc3 	ldbu	r2,-1(fp)
   2a384:	10800058 	cmpnei	r2,r2,1
   2a388:	1000021e 	bne	r2,zero,2a394 <getPHYSpeed+0x5c0>
   2a38c:	00800104 	movi	r2,4
   2a390:	00000106 	br	2a398 <getPHYSpeed+0x5c4>
   2a394:	0005883a 	mov	r2,zero
   2a398:	10c6b03a 	or	r3,r2,r3
   2a39c:	e0bfffc3 	ldbu	r2,-1(fp)
   2a3a0:	1000021e 	bne	r2,zero,2a3ac <getPHYSpeed+0x5d8>
   2a3a4:	00800204 	movi	r2,8
   2a3a8:	00000106 	br	2a3b0 <getPHYSpeed+0x5dc>
   2a3ac:	0005883a 	mov	r2,zero
   2a3b0:	10c6b03a 	or	r3,r2,r3
   2a3b4:	e0bfffc3 	ldbu	r2,-1(fp)
   2a3b8:	108000d8 	cmpnei	r2,r2,3
   2a3bc:	1000021e 	bne	r2,zero,2a3c8 <getPHYSpeed+0x5f4>
   2a3c0:	00800074 	movhi	r2,1
   2a3c4:	00000106 	br	2a3cc <getPHYSpeed+0x5f8>
   2a3c8:	0005883a 	mov	r2,zero
   2a3cc:	10c4b03a 	or	r2,r2,r3
   2a3d0:	10800234 	orhi	r2,r2,8
   2a3d4:	e0bffe15 	stw	r2,-8(fp)
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   2a3d8:	e13ff987 	ldb	r4,-26(fp)
   2a3dc:	e17ff9c7 	ldb	r5,-25(fp)
   2a3e0:	e0bfffc3 	ldbu	r2,-1(fp)
   2a3e4:	108000a0 	cmpeqi	r2,r2,2
   2a3e8:	10000e1e 	bne	r2,zero,2a424 <getPHYSpeed+0x650>
   2a3ec:	e0bfffc3 	ldbu	r2,-1(fp)
   2a3f0:	10800060 	cmpeqi	r2,r2,1
   2a3f4:	1000081e 	bne	r2,zero,2a418 <getPHYSpeed+0x644>
   2a3f8:	e0bfffc3 	ldbu	r2,-1(fp)
   2a3fc:	1000031e 	bne	r2,zero,2a40c <getPHYSpeed+0x638>
   2a400:	008000f4 	movhi	r2,3
   2a404:	10906804 	addi	r2,r2,16800
   2a408:	00000806 	br	2a42c <getPHYSpeed+0x658>
   2a40c:	008000f4 	movhi	r2,3
   2a410:	10906904 	addi	r2,r2,16804
   2a414:	00000506 	br	2a42c <getPHYSpeed+0x658>
   2a418:	008000f4 	movhi	r2,3
   2a41c:	10906b04 	addi	r2,r2,16812
   2a420:	00000206 	br	2a42c <getPHYSpeed+0x658>
   2a424:	008000f4 	movhi	r2,3
   2a428:	10906c04 	addi	r2,r2,16816
   2a42c:	e0ffff83 	ldbu	r3,-2(fp)
   2a430:	18c00058 	cmpnei	r3,r3,1
   2a434:	1800031e 	bne	r3,zero,2a444 <getPHYSpeed+0x670>
   2a438:	00c000f4 	movhi	r3,3
   2a43c:	18d06e04 	addi	r3,r3,16824
   2a440:	00000206 	br	2a44c <getPHYSpeed+0x678>
   2a444:	00c000f4 	movhi	r3,3
   2a448:	18d07004 	addi	r3,r3,16832
   2a44c:	d8c00015 	stw	r3,0(sp)
   2a450:	100f883a 	mov	r7,r2
   2a454:	280d883a 	mov	r6,r5
   2a458:	200b883a 	mov	r5,r4
   2a45c:	010000f4 	movhi	r4,3
   2a460:	2110d004 	addi	r4,r4,17216
   2a464:	0028a980 	call	28a98 <no_printf>
                                                                             speed == TSE_PHY_SPEED_100 ? "100" :
                                                                             speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                             duplex == 1 ? "Full" : "Half");
            return result;
   2a468:	e0bffe17 	ldw	r2,-8(fp)
   2a46c:	0000f206 	br	2a838 <getPHYSpeed+0xa64>
        }

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
   2a470:	e0bff817 	ldw	r2,-32(fp)
   2a474:	10801004 	addi	r2,r2,64
   2a478:	e0fffd17 	ldw	r3,-12(fp)
   2a47c:	18c00003 	ldbu	r3,0(r3)
   2a480:	18c03fcc 	andi	r3,r3,255
   2a484:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
        #else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
   2a488:	d8000015 	stw	zero,0(sp)
   2a48c:	01c00044 	movi	r7,1
   2a490:	01800384 	movi	r6,14
   2a494:	000b883a 	mov	r5,zero
   2a498:	e13ffd17 	ldw	r4,-12(fp)
   2a49c:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
   2a4a0:	e0bffd17 	ldw	r2,-12(fp)
   2a4a4:	10800517 	ldw	r2,20(r2)
   2a4a8:	10002b1e 	bne	r2,zero,2a558 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
   2a4ac:	e0bff987 	ldb	r2,-26(fp)
   2a4b0:	e0fff9c7 	ldb	r3,-25(fp)
   2a4b4:	180d883a 	mov	r6,r3
   2a4b8:	100b883a 	mov	r5,r2
   2a4bc:	010000f4 	movhi	r4,3
   2a4c0:	2110e404 	addi	r4,r4,17296
   2a4c4:	0028a980 	call	28a98 <no_printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   2a4c8:	00800044 	movi	r2,1
   2a4cc:	e0bfffc5 	stb	r2,-1(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   2a4d0:	00800044 	movi	r2,1
   2a4d4:	e0bfff85 	stb	r2,-2(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
   2a4d8:	e0bfff83 	ldbu	r2,-2(fp)
   2a4dc:	10c0004c 	andi	r3,r2,1
   2a4e0:	e0bfffc3 	ldbu	r2,-1(fp)
   2a4e4:	10800098 	cmpnei	r2,r2,2
   2a4e8:	1000021e 	bne	r2,zero,2a4f4 <getPHYSpeed+0x720>
   2a4ec:	00800084 	movi	r2,2
   2a4f0:	00000106 	br	2a4f8 <getPHYSpeed+0x724>
   2a4f4:	0005883a 	mov	r2,zero
   2a4f8:	10c6b03a 	or	r3,r2,r3
   2a4fc:	e0bfffc3 	ldbu	r2,-1(fp)
   2a500:	10800058 	cmpnei	r2,r2,1
   2a504:	1000021e 	bne	r2,zero,2a510 <getPHYSpeed+0x73c>
   2a508:	00800104 	movi	r2,4
   2a50c:	00000106 	br	2a514 <getPHYSpeed+0x740>
   2a510:	0005883a 	mov	r2,zero
   2a514:	10c6b03a 	or	r3,r2,r3
   2a518:	e0bfffc3 	ldbu	r2,-1(fp)
   2a51c:	1000021e 	bne	r2,zero,2a528 <getPHYSpeed+0x754>
   2a520:	00800204 	movi	r2,8
   2a524:	00000106 	br	2a52c <getPHYSpeed+0x758>
   2a528:	0005883a 	mov	r2,zero
   2a52c:	10c6b03a 	or	r3,r2,r3
   2a530:	e0bfffc3 	ldbu	r2,-1(fp)
   2a534:	108000d8 	cmpnei	r2,r2,3
   2a538:	1000021e 	bne	r2,zero,2a544 <getPHYSpeed+0x770>
   2a53c:	00800074 	movhi	r2,1
   2a540:	00000106 	br	2a548 <getPHYSpeed+0x774>
   2a544:	0005883a 	mov	r2,zero
   2a548:	10c4b03a 	or	r2,r2,r3
   2a54c:	10800134 	orhi	r2,r2,4
   2a550:	e0bffe15 	stw	r2,-8(fp)
   2a554:	00009306 	br	2a7a4 <getPHYSpeed+0x9d0>
        }
        // retrieve duplex information from PHY
        else
        {
            if(pphy->pphy_profile->link_status_read)
   2a558:	e0bffd17 	ldw	r2,-12(fp)
   2a55c:	10800517 	ldw	r2,20(r2)
   2a560:	10801817 	ldw	r2,96(r2)
   2a564:	10002526 	beq	r2,zero,2a5fc <getPHYSpeed+0x828>
            {
                result = pphy->pphy_profile->link_status_read(pmac_group_base);
   2a568:	e0bffd17 	ldw	r2,-12(fp)
   2a56c:	10800517 	ldw	r2,20(r2)
   2a570:	10801817 	ldw	r2,96(r2)
   2a574:	e13ff817 	ldw	r4,-32(fp)
   2a578:	103ee83a 	callr	r2
   2a57c:	e0bffe15 	stw	r2,-8(fp)
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
   2a580:	e0bffe17 	ldw	r2,-8(fp)
   2a584:	1080008c 	andi	r2,r2,2
   2a588:	10000c1e 	bne	r2,zero,2a5bc <getPHYSpeed+0x7e8>
                        (result & 0x04) ? TSE_PHY_SPEED_100  :
   2a58c:	e0bffe17 	ldw	r2,-8(fp)
   2a590:	1080010c 	andi	r2,r2,4
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
   2a594:	1000071e 	bne	r2,zero,2a5b4 <getPHYSpeed+0x7e0>
                        (result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
   2a598:	e0bffe17 	ldw	r2,-8(fp)
   2a59c:	1080020c 	andi	r2,r2,8
                speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
   2a5a0:	10000226 	beq	r2,zero,2a5ac <getPHYSpeed+0x7d8>
   2a5a4:	0005883a 	mov	r2,zero
   2a5a8:	00000506 	br	2a5c0 <getPHYSpeed+0x7ec>
   2a5ac:	008000c4 	movi	r2,3
   2a5b0:	00000306 	br	2a5c0 <getPHYSpeed+0x7ec>
   2a5b4:	00800044 	movi	r2,1
   2a5b8:	00000106 	br	2a5c0 <getPHYSpeed+0x7ec>
   2a5bc:	00800084 	movi	r2,2
   2a5c0:	e0bfffc5 	stb	r2,-1(fp)
                duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
   2a5c4:	e0bffe17 	ldw	r2,-8(fp)
   2a5c8:	1080004c 	andi	r2,r2,1
   2a5cc:	e0bfff85 	stb	r2,-2(fp)
                
                if(result & ALT_TSE_E_INVALID_SPEED)
   2a5d0:	e0bffe17 	ldw	r2,-8(fp)
   2a5d4:	1080006c 	andhi	r2,r2,1
   2a5d8:	10007226 	beq	r2,zero,2a7a4 <getPHYSpeed+0x9d0>
                {
                    tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
   2a5dc:	e0bff987 	ldb	r2,-26(fp)
   2a5e0:	e0fff9c7 	ldb	r3,-25(fp)
   2a5e4:	180d883a 	mov	r6,r3
   2a5e8:	100b883a 	mov	r5,r2
   2a5ec:	010000f4 	movhi	r4,3
   2a5f0:	2110f204 	addi	r4,r4,17352
   2a5f4:	0028a980 	call	28a98 <no_printf>
   2a5f8:	00006a06 	br	2a7a4 <getPHYSpeed+0x9d0>
                }
            }
            else if(pphy->pphy_profile->status_reg_location == 0)
   2a5fc:	e0bffd17 	ldw	r2,-12(fp)
   2a600:	10800517 	ldw	r2,20(r2)
   2a604:	10801583 	ldbu	r2,86(r2)
   2a608:	10803fcc 	andi	r2,r2,255
   2a60c:	10002b1e 	bne	r2,zero,2a6bc <getPHYSpeed+0x8e8>
            {
                tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
   2a610:	e0bff987 	ldb	r2,-26(fp)
   2a614:	e0fff9c7 	ldb	r3,-25(fp)
   2a618:	180d883a 	mov	r6,r3
   2a61c:	100b883a 	mov	r5,r2
   2a620:	010000f4 	movhi	r4,3
   2a624:	2110ff04 	addi	r4,r4,17404
   2a628:	0028a980 	call	28a98 <no_printf>
                speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   2a62c:	00800044 	movi	r2,1
   2a630:	e0bfffc5 	stb	r2,-1(fp)
                duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   2a634:	00800044 	movi	r2,1
   2a638:	e0bfff85 	stb	r2,-2(fp)
                result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
   2a63c:	e0bfff83 	ldbu	r2,-2(fp)
   2a640:	10c0004c 	andi	r3,r2,1
   2a644:	e0bfffc3 	ldbu	r2,-1(fp)
   2a648:	10800098 	cmpnei	r2,r2,2
   2a64c:	1000021e 	bne	r2,zero,2a658 <getPHYSpeed+0x884>
   2a650:	00800084 	movi	r2,2
   2a654:	00000106 	br	2a65c <getPHYSpeed+0x888>
   2a658:	0005883a 	mov	r2,zero
   2a65c:	10c6b03a 	or	r3,r2,r3
   2a660:	e0bfffc3 	ldbu	r2,-1(fp)
   2a664:	10800058 	cmpnei	r2,r2,1
   2a668:	1000021e 	bne	r2,zero,2a674 <getPHYSpeed+0x8a0>
   2a66c:	00800104 	movi	r2,4
   2a670:	00000106 	br	2a678 <getPHYSpeed+0x8a4>
   2a674:	0005883a 	mov	r2,zero
   2a678:	10c6b03a 	or	r3,r2,r3
   2a67c:	e0bfffc3 	ldbu	r2,-1(fp)
   2a680:	1000021e 	bne	r2,zero,2a68c <getPHYSpeed+0x8b8>
   2a684:	00800204 	movi	r2,8
   2a688:	00000106 	br	2a690 <getPHYSpeed+0x8bc>
   2a68c:	0005883a 	mov	r2,zero
   2a690:	10c6b03a 	or	r3,r2,r3
   2a694:	e0bfffc3 	ldbu	r2,-1(fp)
   2a698:	108000d8 	cmpnei	r2,r2,3
   2a69c:	1000021e 	bne	r2,zero,2a6a8 <getPHYSpeed+0x8d4>
   2a6a0:	00800074 	movhi	r2,1
   2a6a4:	00000106 	br	2a6ac <getPHYSpeed+0x8d8>
   2a6a8:	0005883a 	mov	r2,zero
   2a6ac:	10c4b03a 	or	r2,r2,r3
   2a6b0:	108000b4 	orhi	r2,r2,2
   2a6b4:	e0bffe15 	stw	r2,-8(fp)
   2a6b8:	00003a06 	br	2a7a4 <getPHYSpeed+0x9d0>
            }
            else
            {
                /* extract connection speed and duplex information */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
   2a6bc:	e0bffd17 	ldw	r2,-12(fp)
   2a6c0:	10800517 	ldw	r2,20(r2)
   2a6c4:	10801583 	ldbu	r2,86(r2)
   2a6c8:	10c03fcc 	andi	r3,r2,255
   2a6cc:	e0bffd17 	ldw	r2,-12(fp)
   2a6d0:	10800517 	ldw	r2,20(r2)
   2a6d4:	108015c3 	ldbu	r2,87(r2)
   2a6d8:	10803fcc 	andi	r2,r2,255
   2a6dc:	01c00084 	movi	r7,2
   2a6e0:	100d883a 	mov	r6,r2
   2a6e4:	180b883a 	mov	r5,r3
   2a6e8:	e13ffd17 	ldw	r4,-12(fp)
   2a6ec:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2a6f0:	e0bfffc5 	stb	r2,-1(fp)
                duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
   2a6f4:	e0bffd17 	ldw	r2,-12(fp)
   2a6f8:	10800517 	ldw	r2,20(r2)
   2a6fc:	10801583 	ldbu	r2,86(r2)
   2a700:	10c03fcc 	andi	r3,r2,255
   2a704:	e0bffd17 	ldw	r2,-12(fp)
   2a708:	10800517 	ldw	r2,20(r2)
   2a70c:	10801603 	ldbu	r2,88(r2)
   2a710:	10803fcc 	andi	r2,r2,255
   2a714:	01c00044 	movi	r7,1
   2a718:	100d883a 	mov	r6,r2
   2a71c:	180b883a 	mov	r5,r3
   2a720:	e13ffd17 	ldw	r4,-12(fp)
   2a724:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2a728:	e0bfff85 	stb	r2,-2(fp)
                
                result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
   2a72c:	e0bfff83 	ldbu	r2,-2(fp)
   2a730:	10c0004c 	andi	r3,r2,1
   2a734:	e0bfffc3 	ldbu	r2,-1(fp)
   2a738:	10800098 	cmpnei	r2,r2,2
   2a73c:	1000021e 	bne	r2,zero,2a748 <getPHYSpeed+0x974>
   2a740:	00800084 	movi	r2,2
   2a744:	00000106 	br	2a74c <getPHYSpeed+0x978>
   2a748:	0005883a 	mov	r2,zero
   2a74c:	10c6b03a 	or	r3,r2,r3
   2a750:	e0bfffc3 	ldbu	r2,-1(fp)
   2a754:	10800058 	cmpnei	r2,r2,1
   2a758:	1000021e 	bne	r2,zero,2a764 <getPHYSpeed+0x990>
   2a75c:	00800104 	movi	r2,4
   2a760:	00000106 	br	2a768 <getPHYSpeed+0x994>
   2a764:	0005883a 	mov	r2,zero
   2a768:	10c6b03a 	or	r3,r2,r3
   2a76c:	e0bfffc3 	ldbu	r2,-1(fp)
   2a770:	1000021e 	bne	r2,zero,2a77c <getPHYSpeed+0x9a8>
   2a774:	00800204 	movi	r2,8
   2a778:	00000106 	br	2a780 <getPHYSpeed+0x9ac>
   2a77c:	0005883a 	mov	r2,zero
   2a780:	10c6b03a 	or	r3,r2,r3
   2a784:	e0bfffc3 	ldbu	r2,-1(fp)
   2a788:	108000d8 	cmpnei	r2,r2,3
   2a78c:	1000021e 	bne	r2,zero,2a798 <getPHYSpeed+0x9c4>
   2a790:	00800074 	movhi	r2,1
   2a794:	00000106 	br	2a79c <getPHYSpeed+0x9c8>
   2a798:	0005883a 	mov	r2,zero
   2a79c:	10c4b03a 	or	r2,r2,r3
   2a7a0:	e0bffe15 	stw	r2,-8(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   2a7a4:	e13ff987 	ldb	r4,-26(fp)
   2a7a8:	e17ff9c7 	ldb	r5,-25(fp)
   2a7ac:	e0bfffc3 	ldbu	r2,-1(fp)
   2a7b0:	108000a0 	cmpeqi	r2,r2,2
   2a7b4:	10000e1e 	bne	r2,zero,2a7f0 <getPHYSpeed+0xa1c>
   2a7b8:	e0bfffc3 	ldbu	r2,-1(fp)
   2a7bc:	10800060 	cmpeqi	r2,r2,1
   2a7c0:	1000081e 	bne	r2,zero,2a7e4 <getPHYSpeed+0xa10>
   2a7c4:	e0bfffc3 	ldbu	r2,-1(fp)
   2a7c8:	1000031e 	bne	r2,zero,2a7d8 <getPHYSpeed+0xa04>
   2a7cc:	008000f4 	movhi	r2,3
   2a7d0:	10906804 	addi	r2,r2,16800
   2a7d4:	00000806 	br	2a7f8 <getPHYSpeed+0xa24>
   2a7d8:	008000f4 	movhi	r2,3
   2a7dc:	10906904 	addi	r2,r2,16804
   2a7e0:	00000506 	br	2a7f8 <getPHYSpeed+0xa24>
   2a7e4:	008000f4 	movhi	r2,3
   2a7e8:	10906b04 	addi	r2,r2,16812
   2a7ec:	00000206 	br	2a7f8 <getPHYSpeed+0xa24>
   2a7f0:	008000f4 	movhi	r2,3
   2a7f4:	10906c04 	addi	r2,r2,16816
   2a7f8:	e0ffff83 	ldbu	r3,-2(fp)
   2a7fc:	18c00058 	cmpnei	r3,r3,1
   2a800:	1800031e 	bne	r3,zero,2a810 <getPHYSpeed+0xa3c>
   2a804:	00c000f4 	movhi	r3,3
   2a808:	18d06e04 	addi	r3,r3,16824
   2a80c:	00000206 	br	2a818 <getPHYSpeed+0xa44>
   2a810:	00c000f4 	movhi	r3,3
   2a814:	18d07004 	addi	r3,r3,16832
   2a818:	d8c00015 	stw	r3,0(sp)
   2a81c:	100f883a 	mov	r7,r2
   2a820:	280d883a 	mov	r6,r5
   2a824:	200b883a 	mov	r5,r4
   2a828:	010000f4 	movhi	r4,3
   2a82c:	21111604 	addi	r4,r4,17496
   2a830:	0028a980 	call	28a98 <no_printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
   2a834:	e0bffe17 	ldw	r2,-8(fp)
}
   2a838:	e037883a 	mov	sp,fp
   2a83c:	dfc00117 	ldw	ra,4(sp)
   2a840:	df000017 	ldw	fp,0(sp)
   2a844:	dec00204 	addi	sp,sp,8
   2a848:	f800283a 	ret

0002a84c <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
   2a84c:	defffd04 	addi	sp,sp,-12
   2a850:	df000215 	stw	fp,8(sp)
   2a854:	df000204 	addi	fp,sp,8
   2a858:	e13ffe15 	stw	r4,-8(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2a85c:	e0bffe17 	ldw	r2,-8(fp)
   2a860:	10800617 	ldw	r2,24(r2)
   2a864:	10800317 	ldw	r2,12(r2)
   2a868:	10800117 	ldw	r2,4(r2)
   2a86c:	10800217 	ldw	r2,8(r2)
   2a870:	10800017 	ldw	r2,0(r2)
   2a874:	e0bfff15 	stw	r2,-4(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
   2a878:	e0bfff17 	ldw	r2,-4(fp)
   2a87c:	10801004 	addi	r2,r2,64
   2a880:	10800037 	ldwio	r2,0(r2)
}
   2a884:	e037883a 	mov	sp,fp
   2a888:	df000017 	ldw	fp,0(sp)
   2a88c:	dec00104 	addi	sp,sp,4
   2a890:	f800283a 	ret

0002a894 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
   2a894:	defffc04 	addi	sp,sp,-16
   2a898:	df000315 	stw	fp,12(sp)
   2a89c:	df000304 	addi	fp,sp,12
   2a8a0:	e13ffe15 	stw	r4,-8(fp)
   2a8a4:	2805883a 	mov	r2,r5
   2a8a8:	e0bffd05 	stb	r2,-12(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2a8ac:	e0bffe17 	ldw	r2,-8(fp)
   2a8b0:	10800617 	ldw	r2,24(r2)
   2a8b4:	10800317 	ldw	r2,12(r2)
   2a8b8:	10800117 	ldw	r2,4(r2)
   2a8bc:	10800217 	ldw	r2,8(r2)
   2a8c0:	10800017 	ldw	r2,0(r2)
   2a8c4:	e0bfff15 	stw	r2,-4(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
   2a8c8:	e0bfff17 	ldw	r2,-4(fp)
   2a8cc:	10801004 	addi	r2,r2,64
   2a8d0:	e0fffd03 	ldbu	r3,-12(fp)
   2a8d4:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
   2a8d8:	0005883a 	mov	r2,zero
}
   2a8dc:	e037883a 	mov	sp,fp
   2a8e0:	df000017 	ldw	fp,0(sp)
   2a8e4:	dec00104 	addi	sp,sp,4
   2a8e8:	f800283a 	ret

0002a8ec <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
   2a8ec:	defff604 	addi	sp,sp,-40
   2a8f0:	df000915 	stw	fp,36(sp)
   2a8f4:	df000904 	addi	fp,sp,36
   2a8f8:	e13ffb15 	stw	r4,-20(fp)
   2a8fc:	2807883a 	mov	r3,r5
   2a900:	300b883a 	mov	r5,r6
   2a904:	3809883a 	mov	r4,r7
   2a908:	e0800117 	ldw	r2,4(fp)
   2a90c:	e0fffa05 	stb	r3,-24(fp)
   2a910:	2807883a 	mov	r3,r5
   2a914:	e0fff905 	stb	r3,-28(fp)
   2a918:	2007883a 	mov	r3,r4
   2a91c:	e0fff805 	stb	r3,-32(fp)
   2a920:	e0bff70d 	sth	r2,-36(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2a924:	e0bffb17 	ldw	r2,-20(fp)
   2a928:	10800617 	ldw	r2,24(r2)
   2a92c:	10800317 	ldw	r2,12(r2)
   2a930:	10800117 	ldw	r2,4(r2)
   2a934:	10800217 	ldw	r2,8(r2)
   2a938:	10800017 	ldw	r2,0(r2)
   2a93c:	e0bffd15 	stw	r2,-12(fp)
    
    bit_mask = 0x00;
   2a940:	e03fff8d 	sth	zero,-2(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
   2a944:	e03ffe15 	stw	zero,-8(fp)
   2a948:	00000906 	br	2a970 <alt_tse_phy_wr_mdio_reg+0x84>
    {
        bit_mask <<= 1;
   2a94c:	e0bfff8b 	ldhu	r2,-2(fp)
   2a950:	1085883a 	add	r2,r2,r2
   2a954:	e0bfff8d 	sth	r2,-2(fp)
        bit_mask |= 0x01;        
   2a958:	e0bfff8b 	ldhu	r2,-2(fp)
   2a95c:	10800054 	ori	r2,r2,1
   2a960:	e0bfff8d 	sth	r2,-2(fp)
    for(i = 0; i < bit_length; i++)
   2a964:	e0bffe17 	ldw	r2,-8(fp)
   2a968:	10800044 	addi	r2,r2,1
   2a96c:	e0bffe15 	stw	r2,-8(fp)
   2a970:	e0bff803 	ldbu	r2,-32(fp)
   2a974:	e0fffe17 	ldw	r3,-8(fp)
   2a978:	18bff416 	blt	r3,r2,2a94c <__alt_mem_mcu_subsystem_ram_0+0x7800a94c>
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
   2a97c:	e0ffff8b 	ldhu	r3,-2(fp)
   2a980:	e0bff903 	ldbu	r2,-28(fp)
   2a984:	1884983a 	sll	r2,r3,r2
   2a988:	e0bfff8d 	sth	r2,-2(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
   2a98c:	e0bffd17 	ldw	r2,-12(fp)
   2a990:	1080a004 	addi	r2,r2,640
   2a994:	e0fffa03 	ldbu	r3,-24(fp)
   2a998:	180690ba 	slli	r3,r3,2
   2a99c:	10c5883a 	add	r2,r2,r3
   2a9a0:	10800037 	ldwio	r2,0(r2)
   2a9a4:	e0bffc8d 	sth	r2,-14(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
   2a9a8:	e0bfff8b 	ldhu	r2,-2(fp)
   2a9ac:	0084303a 	nor	r2,zero,r2
   2a9b0:	1007883a 	mov	r3,r2
   2a9b4:	e0bffc8b 	ldhu	r2,-14(fp)
   2a9b8:	1884703a 	and	r2,r3,r2
   2a9bc:	e0bffc8d 	sth	r2,-14(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
   2a9c0:	e0fff70b 	ldhu	r3,-36(fp)
   2a9c4:	e0bff903 	ldbu	r2,-28(fp)
   2a9c8:	1884983a 	sll	r2,r3,r2
   2a9cc:	1007883a 	mov	r3,r2
   2a9d0:	e0bfff8b 	ldhu	r2,-2(fp)
   2a9d4:	1884703a 	and	r2,r3,r2
   2a9d8:	1007883a 	mov	r3,r2
   2a9dc:	e0bffc8b 	ldhu	r2,-14(fp)
   2a9e0:	1884b03a 	or	r2,r3,r2
   2a9e4:	e0bffc8d 	sth	r2,-14(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
   2a9e8:	e0bffd17 	ldw	r2,-12(fp)
   2a9ec:	1080a004 	addi	r2,r2,640
   2a9f0:	e0fffa03 	ldbu	r3,-24(fp)
   2a9f4:	180690ba 	slli	r3,r3,2
   2a9f8:	10c5883a 	add	r2,r2,r3
   2a9fc:	e0fffc8b 	ldhu	r3,-14(fp)
   2aa00:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
   2aa04:	0005883a 	mov	r2,zero
    
}
   2aa08:	e037883a 	mov	sp,fp
   2aa0c:	df000017 	ldw	fp,0(sp)
   2aa10:	dec00104 	addi	sp,sp,4
   2aa14:	f800283a 	ret

0002aa18 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
   2aa18:	defff704 	addi	sp,sp,-36
   2aa1c:	df000815 	stw	fp,32(sp)
   2aa20:	df000804 	addi	fp,sp,32
   2aa24:	e13ffb15 	stw	r4,-20(fp)
   2aa28:	2805883a 	mov	r2,r5
   2aa2c:	3009883a 	mov	r4,r6
   2aa30:	3807883a 	mov	r3,r7
   2aa34:	e0bffa05 	stb	r2,-24(fp)
   2aa38:	2005883a 	mov	r2,r4
   2aa3c:	e0bff905 	stb	r2,-28(fp)
   2aa40:	1805883a 	mov	r2,r3
   2aa44:	e0bff805 	stb	r2,-32(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2aa48:	e0bffb17 	ldw	r2,-20(fp)
   2aa4c:	10800617 	ldw	r2,24(r2)
   2aa50:	10800317 	ldw	r2,12(r2)
   2aa54:	10800117 	ldw	r2,4(r2)
   2aa58:	10800217 	ldw	r2,8(r2)
   2aa5c:	10800017 	ldw	r2,0(r2)
   2aa60:	e0bffd15 	stw	r2,-12(fp)
    
    bit_mask = 0x00;
   2aa64:	e03fff15 	stw	zero,-4(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
   2aa68:	e03ffe15 	stw	zero,-8(fp)
   2aa6c:	00000906 	br	2aa94 <alt_tse_phy_rd_mdio_reg+0x7c>
    {
        bit_mask <<= 1;
   2aa70:	e0bfff17 	ldw	r2,-4(fp)
   2aa74:	1085883a 	add	r2,r2,r2
   2aa78:	e0bfff15 	stw	r2,-4(fp)
        bit_mask |= 0x01;        
   2aa7c:	e0bfff17 	ldw	r2,-4(fp)
   2aa80:	10800054 	ori	r2,r2,1
   2aa84:	e0bfff15 	stw	r2,-4(fp)
    for(i = 0; i < bit_length; i++)
   2aa88:	e0bffe17 	ldw	r2,-8(fp)
   2aa8c:	10800044 	addi	r2,r2,1
   2aa90:	e0bffe15 	stw	r2,-8(fp)
   2aa94:	e0bff803 	ldbu	r2,-32(fp)
   2aa98:	e0fffe17 	ldw	r3,-8(fp)
   2aa9c:	18bff416 	blt	r3,r2,2aa70 <__alt_mem_mcu_subsystem_ram_0+0x7800aa70>
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
   2aaa0:	e0bffd17 	ldw	r2,-12(fp)
   2aaa4:	1080a004 	addi	r2,r2,640
   2aaa8:	e0fffa03 	ldbu	r3,-24(fp)
   2aaac:	180690ba 	slli	r3,r3,2
   2aab0:	10c5883a 	add	r2,r2,r3
   2aab4:	10800037 	ldwio	r2,0(r2)
   2aab8:	e0bffc8d 	sth	r2,-14(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
   2aabc:	e0fffc8b 	ldhu	r3,-14(fp)
   2aac0:	e0bff903 	ldbu	r2,-28(fp)
   2aac4:	1885d83a 	sra	r2,r3,r2
   2aac8:	e0bffc8d 	sth	r2,-14(fp)
    
    return (temp_data & bit_mask);
   2aacc:	e0fffc8b 	ldhu	r3,-14(fp)
   2aad0:	e0bfff17 	ldw	r2,-4(fp)
   2aad4:	1884703a 	and	r2,r3,r2
}
   2aad8:	e037883a 	mov	sp,fp
   2aadc:	df000017 	ldw	fp,0(sp)
   2aae0:	dec00104 	addi	sp,sp,4
   2aae4:	f800283a 	ret

0002aae8 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
   2aae8:	deff8104 	addi	sp,sp,-508
   2aaec:	dfc07e15 	stw	ra,504(sp)
   2aaf0:	df007d15 	stw	fp,500(sp)
   2aaf4:	df007d04 	addi	fp,sp,500
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
   2aaf8:	e0bfe704 	addi	r2,fp,-100
   2aafc:	00c01904 	movi	r3,100
   2ab00:	180d883a 	mov	r6,r3
   2ab04:	000b883a 	mov	r5,zero
   2ab08:	1009883a 	mov	r4,r2
   2ab0c:	0015bb00 	call	15bb0 <memset>
   2ab10:	009d9cb4 	movhi	r2,30322
   2ab14:	10985344 	addi	r2,r2,24909
   2ab18:	e0bfe715 	stw	r2,-100(fp)
   2ab1c:	00881b34 	movhi	r2,8300
   2ab20:	109b1944 	addi	r2,r2,27749
   2ab24:	e0bfe815 	stw	r2,-96(fp)
   2ab28:	008c5174 	movhi	r2,12613
   2ab2c:	108e0e04 	addi	r2,r2,14392
   2ab30:	e0bfe915 	stw	r2,-92(fp)
   2ab34:	00800c74 	movhi	r2,49
   2ab38:	108c4c44 	addi	r2,r2,12593
   2ab3c:	e0bfea15 	stw	r2,-88(fp)
   2ab40:	e0bfeb04 	addi	r2,fp,-84
   2ab44:	00c01004 	movi	r3,64
   2ab48:	180d883a 	mov	r6,r3
   2ab4c:	000b883a 	mov	r5,zero
   2ab50:	1009883a 	mov	r4,r2
   2ab54:	0015bb00 	call	15bb0 <memset>
   2ab58:	009410c4 	movi	r2,20547
   2ab5c:	e0bffb15 	stw	r2,-20(fp)
   2ab60:	00800304 	movi	r2,12
   2ab64:	e0bffc05 	stb	r2,-16(fp)
   2ab68:	00800084 	movi	r2,2
   2ab6c:	e0bffc45 	stb	r2,-15(fp)
   2ab70:	00800444 	movi	r2,17
   2ab74:	e0bffc85 	stb	r2,-14(fp)
   2ab78:	00800384 	movi	r2,14
   2ab7c:	e0bffcc5 	stb	r2,-13(fp)
   2ab80:	00800344 	movi	r2,13
   2ab84:	e0bffd05 	stb	r2,-12(fp)
   2ab88:	00800284 	movi	r2,10
   2ab8c:	e0bffd45 	stb	r2,-11(fp)
   2ab90:	008000f4 	movhi	r2,3
   2ab94:	10b53f04 	addi	r2,r2,-11012
   2ab98:	e0bffe15 	stw	r2,-8(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
   2ab9c:	e0bfce04 	addi	r2,fp,-200
   2aba0:	00c01904 	movi	r3,100
   2aba4:	180d883a 	mov	r6,r3
   2aba8:	000b883a 	mov	r5,zero
   2abac:	1009883a 	mov	r4,r2
   2abb0:	0015bb00 	call	15bb0 <memset>
   2abb4:	009d9cb4 	movhi	r2,30322
   2abb8:	10985344 	addi	r2,r2,24909
   2abbc:	e0bfce15 	stw	r2,-200(fp)
   2abc0:	00881b34 	movhi	r2,8300
   2abc4:	109b1944 	addi	r2,r2,27749
   2abc8:	e0bfcf15 	stw	r2,-196(fp)
   2abcc:	00991874 	movhi	r2,25697
   2abd0:	109d5444 	addi	r2,r2,30033
   2abd4:	e0bfd015 	stw	r2,-192(fp)
   2abd8:	00965234 	movhi	r2,22856
   2abdc:	10940804 	addi	r2,r2,20512
   2abe0:	e0bfd115 	stw	r2,-188(fp)
   2abe4:	00914e34 	movhi	r2,17720
   2abe8:	108e0804 	addi	r2,r2,14368
   2abec:	e0bfd215 	stw	r2,-184(fp)
   2abf0:	008d4d34 	movhi	r2,13620
   2abf4:	108c4c44 	addi	r2,r2,12593
   2abf8:	e0bfd315 	stw	r2,-180(fp)
   2abfc:	e03fd415 	stw	zero,-176(fp)
   2ac00:	e03fd515 	stw	zero,-172(fp)
   2ac04:	e03fd615 	stw	zero,-168(fp)
   2ac08:	e03fd715 	stw	zero,-164(fp)
   2ac0c:	e03fd815 	stw	zero,-160(fp)
   2ac10:	e03fd915 	stw	zero,-156(fp)
   2ac14:	e03fda15 	stw	zero,-152(fp)
   2ac18:	e03fdb15 	stw	zero,-148(fp)
   2ac1c:	e03fdc15 	stw	zero,-144(fp)
   2ac20:	e03fdd15 	stw	zero,-140(fp)
   2ac24:	e03fde15 	stw	zero,-136(fp)
   2ac28:	e03fdf15 	stw	zero,-132(fp)
   2ac2c:	e03fe015 	stw	zero,-128(fp)
   2ac30:	e03fe115 	stw	zero,-124(fp)
   2ac34:	009410c4 	movi	r2,20547
   2ac38:	e0bfe215 	stw	r2,-120(fp)
   2ac3c:	00800344 	movi	r2,13
   2ac40:	e0bfe305 	stb	r2,-116(fp)
   2ac44:	00800084 	movi	r2,2
   2ac48:	e0bfe345 	stb	r2,-115(fp)
   2ac4c:	00800444 	movi	r2,17
   2ac50:	e0bfe385 	stb	r2,-114(fp)
   2ac54:	00800384 	movi	r2,14
   2ac58:	e0bfe3c5 	stb	r2,-113(fp)
   2ac5c:	00800344 	movi	r2,13
   2ac60:	e0bfe405 	stb	r2,-112(fp)
   2ac64:	00800284 	movi	r2,10
   2ac68:	e0bfe445 	stb	r2,-111(fp)
   2ac6c:	008000f4 	movhi	r2,3
   2ac70:	10b53f04 	addi	r2,r2,-11012
   2ac74:	e0bfe515 	stw	r2,-108(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
   2ac78:	e0bfb504 	addi	r2,fp,-300
   2ac7c:	00c01904 	movi	r3,100
   2ac80:	180d883a 	mov	r6,r3
   2ac84:	000b883a 	mov	r5,zero
   2ac88:	1009883a 	mov	r4,r2
   2ac8c:	0015bb00 	call	15bb0 <memset>
   2ac90:	009a5d34 	movhi	r2,26996
   2ac94:	10985384 	addi	r2,r2,24910
   2ac98:	e0bfb515 	stw	r2,-300(fp)
   2ac9c:	009b1874 	movhi	r2,27745
   2aca0:	109b9bc4 	addi	r2,r2,28271
   2aca4:	e0bfb615 	stw	r2,-296(fp)
   2aca8:	008e1434 	movhi	r2,14416
   2acac:	10910804 	addi	r2,r2,17440
   2acb0:	e0bfb715 	stw	r2,-292(fp)
   2acb4:	008d4db4 	movhi	r2,13622
   2acb8:	108e0cc4 	addi	r2,r2,14387
   2acbc:	e0bfb815 	stw	r2,-288(fp)
   2acc0:	e03fb915 	stw	zero,-284(fp)
   2acc4:	e0bfba04 	addi	r2,fp,-280
   2acc8:	00c00f04 	movi	r3,60
   2accc:	180d883a 	mov	r6,r3
   2acd0:	000b883a 	mov	r5,zero
   2acd4:	1009883a 	mov	r4,r2
   2acd8:	0015bb00 	call	15bb0 <memset>
   2acdc:	00800234 	movhi	r2,8
   2ace0:	108005c4 	addi	r2,r2,23
   2ace4:	e0bfc915 	stw	r2,-220(fp)
   2ace8:	008001c4 	movi	r2,7
   2acec:	e0bfca05 	stb	r2,-216(fp)
   2acf0:	00800284 	movi	r2,10
   2acf4:	e0bfca45 	stb	r2,-215(fp)
   2acf8:	00800444 	movi	r2,17
   2acfc:	e0bfca85 	stb	r2,-214(fp)
   2ad00:	008000c4 	movi	r2,3
   2ad04:	e0bfcac5 	stb	r2,-213(fp)
   2ad08:	00800044 	movi	r2,1
   2ad0c:	e0bfcb05 	stb	r2,-212(fp)
   2ad10:	00800084 	movi	r2,2
   2ad14:	e0bfcb45 	stb	r2,-211(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
   2ad18:	e0ff9c04 	addi	r3,fp,-400
   2ad1c:	008000f4 	movhi	r2,3
   2ad20:	10912204 	addi	r2,r2,17544
   2ad24:	01001904 	movi	r4,100
   2ad28:	200d883a 	mov	r6,r4
   2ad2c:	100b883a 	mov	r5,r2
   2ad30:	1809883a 	mov	r4,r3
   2ad34:	0015ac00 	call	15ac0 <memcpy>

    /* -------------------------------------- */
    /* Intel PHY on C10LP EVA board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile PEF7071 = {"Intel PEF7071",       /* National DP83848C                                          */
   2ad38:	e0ff8304 	addi	r3,fp,-500
   2ad3c:	008000f4 	movhi	r2,3
   2ad40:	10913b04 	addi	r2,r2,17644
   2ad44:	01001904 	movi	r4,100
   2ad48:	200d883a 	mov	r6,r4
   2ad4c:	100b883a 	mov	r5,r2
   2ad50:	1809883a 	mov	r4,r3
   2ad54:	0015ac00 	call	15ac0 <memcpy>
                           &PEF7071_config,               /* configure PEF7071                                          */
                           &PEF7071_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
   2ad58:	e0bfe704 	addi	r2,fp,-100
   2ad5c:	1009883a 	mov	r4,r2
   2ad60:	0028dfc0 	call	28dfc <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
   2ad64:	e0bfce04 	addi	r2,fp,-200
   2ad68:	1009883a 	mov	r4,r2
   2ad6c:	0028dfc0 	call	28dfc <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
   2ad70:	e0bfb504 	addi	r2,fp,-300
   2ad74:	1009883a 	mov	r4,r2
   2ad78:	0028dfc0 	call	28dfc <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
   2ad7c:	e0bf9c04 	addi	r2,fp,-400
   2ad80:	1009883a 	mov	r4,r2
   2ad84:	0028dfc0 	call	28dfc <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&PEF7071);
   2ad88:	e0bf8304 	addi	r2,fp,-500
   2ad8c:	1009883a 	mov	r4,r2
   2ad90:	0028dfc0 	call	28dfc <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
   2ad94:	d0a7b603 	ldbu	r2,-24872(gp)
   2ad98:	10803fcc 	andi	r2,r2,255
}
   2ad9c:	e037883a 	mov	sp,fp
   2ada0:	dfc00117 	ldw	ra,4(sp)
   2ada4:	df000017 	ldw	fp,0(sp)
   2ada8:	dec00204 	addi	sp,sp,8
   2adac:	f800283a 	ret

0002adb0 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
   2adb0:	defffd04 	addi	sp,sp,-12
   2adb4:	dfc00215 	stw	ra,8(sp)
   2adb8:	df000115 	stw	fp,4(sp)
   2adbc:	df000104 	addi	fp,sp,4
   
    alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
   2adc0:	d0a7b603 	ldbu	r2,-24872(gp)
   2adc4:	10803fcc 	andi	r2,r2,255
   2adc8:	100b883a 	mov	r5,r2
   2adcc:	010000f4 	movhi	r4,3
   2add0:	21115404 	addi	r4,r4,17744
   2add4:	0028a980 	call	28a98 <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
   2add8:	e03fffc5 	stb	zero,-1(fp)
   2addc:	00005d06 	br	2af54 <alt_tse_phy_print_profile+0x1a4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
   2ade0:	e0bfffc7 	ldb	r2,-1(fp)
   2ade4:	100b883a 	mov	r5,r2
   2ade8:	010000f4 	movhi	r4,3
   2adec:	21116304 	addi	r4,r4,17804
   2adf0:	0028a980 	call	28a98 <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
   2adf4:	e0bfffc7 	ldb	r2,-1(fp)
   2adf8:	100690ba 	slli	r3,r2,2
   2adfc:	008202b4 	movhi	r2,2058
   2ae00:	1885883a 	add	r2,r3,r2
   2ae04:	108d7417 	ldw	r2,13776(r2)
   2ae08:	100b883a 	mov	r5,r2
   2ae0c:	010000f4 	movhi	r4,3
   2ae10:	21116804 	addi	r4,r4,17824
   2ae14:	0028a980 	call	28a98 <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
   2ae18:	e0bfffc7 	ldb	r2,-1(fp)
   2ae1c:	100690ba 	slli	r3,r2,2
   2ae20:	008202b4 	movhi	r2,2058
   2ae24:	1885883a 	add	r2,r3,r2
   2ae28:	108d7417 	ldw	r2,13776(r2)
   2ae2c:	10801417 	ldw	r2,80(r2)
   2ae30:	100b883a 	mov	r5,r2
   2ae34:	010000f4 	movhi	r4,3
   2ae38:	21116e04 	addi	r4,r4,17848
   2ae3c:	0028a980 	call	28a98 <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
   2ae40:	e0bfffc7 	ldb	r2,-1(fp)
   2ae44:	100690ba 	slli	r3,r2,2
   2ae48:	008202b4 	movhi	r2,2058
   2ae4c:	1885883a 	add	r2,r3,r2
   2ae50:	108d7417 	ldw	r2,13776(r2)
   2ae54:	10801503 	ldbu	r2,84(r2)
   2ae58:	10803fcc 	andi	r2,r2,255
   2ae5c:	100b883a 	mov	r5,r2
   2ae60:	010000f4 	movhi	r4,3
   2ae64:	21117504 	addi	r4,r4,17876
   2ae68:	0028a980 	call	28a98 <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
   2ae6c:	e0bfffc7 	ldb	r2,-1(fp)
   2ae70:	100690ba 	slli	r3,r2,2
   2ae74:	008202b4 	movhi	r2,2058
   2ae78:	1885883a 	add	r2,r3,r2
   2ae7c:	108d7417 	ldw	r2,13776(r2)
   2ae80:	10801543 	ldbu	r2,85(r2)
   2ae84:	10803fcc 	andi	r2,r2,255
   2ae88:	100b883a 	mov	r5,r2
   2ae8c:	010000f4 	movhi	r4,3
   2ae90:	21117c04 	addi	r4,r4,17904
   2ae94:	0028a980 	call	28a98 <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
   2ae98:	e0bfffc7 	ldb	r2,-1(fp)
   2ae9c:	100690ba 	slli	r3,r2,2
   2aea0:	008202b4 	movhi	r2,2058
   2aea4:	1885883a 	add	r2,r3,r2
   2aea8:	108d7417 	ldw	r2,13776(r2)
   2aeac:	10801583 	ldbu	r2,86(r2)
   2aeb0:	10803fcc 	andi	r2,r2,255
   2aeb4:	100b883a 	mov	r5,r2
   2aeb8:	010000f4 	movhi	r4,3
   2aebc:	21118304 	addi	r4,r4,17932
   2aec0:	0028a980 	call	28a98 <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
   2aec4:	e0bfffc7 	ldb	r2,-1(fp)
   2aec8:	100690ba 	slli	r3,r2,2
   2aecc:	008202b4 	movhi	r2,2058
   2aed0:	1885883a 	add	r2,r3,r2
   2aed4:	108d7417 	ldw	r2,13776(r2)
   2aed8:	108015c3 	ldbu	r2,87(r2)
   2aedc:	10803fcc 	andi	r2,r2,255
   2aee0:	100b883a 	mov	r5,r2
   2aee4:	010000f4 	movhi	r4,3
   2aee8:	21118a04 	addi	r4,r4,17960
   2aeec:	0028a980 	call	28a98 <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
   2aef0:	e0bfffc7 	ldb	r2,-1(fp)
   2aef4:	100690ba 	slli	r3,r2,2
   2aef8:	008202b4 	movhi	r2,2058
   2aefc:	1885883a 	add	r2,r3,r2
   2af00:	108d7417 	ldw	r2,13776(r2)
   2af04:	10801603 	ldbu	r2,88(r2)
   2af08:	10803fcc 	andi	r2,r2,255
   2af0c:	100b883a 	mov	r5,r2
   2af10:	010000f4 	movhi	r4,3
   2af14:	21119004 	addi	r4,r4,17984
   2af18:	0028a980 	call	28a98 <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
   2af1c:	e0bfffc7 	ldb	r2,-1(fp)
   2af20:	100690ba 	slli	r3,r2,2
   2af24:	008202b4 	movhi	r2,2058
   2af28:	1885883a 	add	r2,r3,r2
   2af2c:	108d7417 	ldw	r2,13776(r2)
   2af30:	10801643 	ldbu	r2,89(r2)
   2af34:	10803fcc 	andi	r2,r2,255
   2af38:	100b883a 	mov	r5,r2
   2af3c:	010000f4 	movhi	r4,3
   2af40:	21119604 	addi	r4,r4,18008
   2af44:	0028a980 	call	28a98 <no_printf>
    for(i = 0; i < phy_profile_count; i++)
   2af48:	e0bfffc3 	ldbu	r2,-1(fp)
   2af4c:	10800044 	addi	r2,r2,1
   2af50:	e0bfffc5 	stb	r2,-1(fp)
   2af54:	e0ffffc7 	ldb	r3,-1(fp)
   2af58:	d0a7b603 	ldbu	r2,-24872(gp)
   2af5c:	10803fcc 	andi	r2,r2,255
   2af60:	18bf9f16 	blt	r3,r2,2ade0 <__alt_mem_mcu_subsystem_ram_0+0x7800ade0>
 
    }
    
    return phy_profile_count;
   2af64:	d0a7b603 	ldbu	r2,-24872(gp)
   2af68:	10803fcc 	andi	r2,r2,255
}
   2af6c:	e037883a 	mov	sp,fp
   2af70:	dfc00117 	ldw	ra,4(sp)
   2af74:	df000017 	ldw	fp,0(sp)
   2af78:	dec00204 	addi	sp,sp,8
   2af7c:	f800283a 	ret

0002af80 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
   2af80:	defffa04 	addi	sp,sp,-24
   2af84:	dfc00515 	stw	ra,20(sp)
   2af88:	df000415 	stw	fp,16(sp)
   2af8c:	df000404 	addi	fp,sp,16
    
    alt_8 i;
    alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
   2af90:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
   2af94:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_system_info *psys = 0;
   2af98:	e03ffc15 	stw	zero,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
   2af9c:	d027b645 	stb	zero,-24871(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
   2afa0:	e03fffc5 	stb	zero,-1(fp)
   2afa4:	00019206 	br	2b5f0 <alt_tse_mac_group_init+0x670>
        psys = &tse_mac_device[i];
   2afa8:	e0bfffc7 	ldb	r2,-1(fp)
   2afac:	10c01324 	muli	r3,r2,76
   2afb0:	008202b4 	movhi	r2,2058
   2afb4:	108b0404 	addi	r2,r2,11280
   2afb8:	1885883a 	add	r2,r3,r2
   2afbc:	e0bffc15 	stw	r2,-16(fp)

        if((psys->tse_msgdma_tx != 0) && (psys->tse_msgdma_rx != 0)) {        
   2afc0:	e0bffc17 	ldw	r2,-16(fp)
   2afc4:	10800617 	ldw	r2,24(r2)
   2afc8:	10018626 	beq	r2,zero,2b5e4 <alt_tse_mac_group_init+0x664>
   2afcc:	e0bffc17 	ldw	r2,-16(fp)
   2afd0:	10800717 	ldw	r2,28(r2)
   2afd4:	10018326 	beq	r2,zero,2b5e4 <alt_tse_mac_group_init+0x664>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
   2afd8:	d0a7b643 	ldbu	r2,-24871(gp)
   2afdc:	10c03fcc 	andi	r3,r2,255
   2afe0:	e0bffc17 	ldw	r2,-16(fp)
   2afe4:	10800017 	ldw	r2,0(r2)
   2afe8:	100d883a 	mov	r6,r2
   2afec:	180b883a 	mov	r5,r3
   2aff0:	010000f4 	movhi	r4,3
   2aff4:	21119c04 	addi	r4,r4,18032
   2aff8:	0028a980 	call	28a98 <no_printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
   2affc:	01000904 	movi	r4,36
   2b000:	001525c0 	call	1525c <malloc>
   2b004:	e0bffe15 	stw	r2,-8(fp)
            if(!pmac_group) {
   2b008:	e0bffe17 	ldw	r2,-8(fp)
   2b00c:	1000081e 	bne	r2,zero,2b030 <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
   2b010:	d0a7b643 	ldbu	r2,-24871(gp)
   2b014:	10803fcc 	andi	r2,r2,255
   2b018:	100b883a 	mov	r5,r2
   2b01c:	010000f4 	movhi	r4,3
   2b020:	2111a804 	addi	r4,r4,18080
   2b024:	0028a980 	call	28a98 <no_printf>
                return ALTERA_TSE_MALLOC_FAILED;
   2b028:	00bfffc4 	movi	r2,-1
   2b02c:	00017506 	br	2b604 <alt_tse_mac_group_init+0x684>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
   2b030:	e0bffc17 	ldw	r2,-16(fp)
   2b034:	108003c3 	ldbu	r2,15(r2)
   2b038:	10803fcc 	andi	r2,r2,255
   2b03c:	10001226 	beq	r2,zero,2b088 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
   2b040:	e0bffc17 	ldw	r2,-16(fp)
   2b044:	10c00403 	ldbu	r3,16(r2)
   2b048:	e0bffe17 	ldw	r2,-8(fp)
   2b04c:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
   2b050:	010000f4 	movhi	r4,3
   2b054:	2111b604 	addi	r4,r4,18136
   2b058:	0028a980 	call	28a98 <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
   2b05c:	e0bffe17 	ldw	r2,-8(fp)
   2b060:	10800003 	ldbu	r2,0(r2)
   2b064:	10803fcc 	andi	r2,r2,255
   2b068:	100b883a 	mov	r5,r2
   2b06c:	010000f4 	movhi	r4,3
   2b070:	2111c104 	addi	r4,r4,18180
   2b074:	0028a980 	call	28a98 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
   2b078:	010000f4 	movhi	r4,3
   2b07c:	2111cc04 	addi	r4,r4,18224
   2b080:	0028a980 	call	28a98 <no_printf>
   2b084:	00001f06 	br	2b104 <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
   2b088:	e0bffc17 	ldw	r2,-16(fp)
   2b08c:	10800443 	ldbu	r2,17(r2)
   2b090:	10803fcc 	andi	r2,r2,255
   2b094:	10001226 	beq	r2,zero,2b0e0 <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
   2b098:	e0bffc17 	ldw	r2,-16(fp)
   2b09c:	10c00483 	ldbu	r3,18(r2)
   2b0a0:	e0bffe17 	ldw	r2,-8(fp)
   2b0a4:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
   2b0a8:	010000f4 	movhi	r4,3
   2b0ac:	2111d704 	addi	r4,r4,18268
   2b0b0:	0028a980 	call	28a98 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
   2b0b4:	010000f4 	movhi	r4,3
   2b0b8:	2111cc04 	addi	r4,r4,18224
   2b0bc:	0028a980 	call	28a98 <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
   2b0c0:	e0bffe17 	ldw	r2,-8(fp)
   2b0c4:	10800003 	ldbu	r2,0(r2)
   2b0c8:	10803fcc 	andi	r2,r2,255
   2b0cc:	100b883a 	mov	r5,r2
   2b0d0:	010000f4 	movhi	r4,3
   2b0d4:	2111e204 	addi	r4,r4,18312
   2b0d8:	0028a980 	call	28a98 <no_printf>
   2b0dc:	00000906 	br	2b104 <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
   2b0e0:	e0bffe17 	ldw	r2,-8(fp)
   2b0e4:	00c00044 	movi	r3,1
   2b0e8:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
   2b0ec:	010000f4 	movhi	r4,3
   2b0f0:	2111d704 	addi	r4,r4,18268
   2b0f4:	0028a980 	call	28a98 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
   2b0f8:	010000f4 	movhi	r4,3
   2b0fc:	2111ed04 	addi	r4,r4,18356
   2b100:	0028a980 	call	28a98 <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
   2b104:	e03fff85 	stb	zero,-2(fp)
   2b108:	00012106 	br	2b590 <alt_tse_mac_group_init+0x610>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
   2b10c:	01000404 	movi	r4,16
   2b110:	001525c0 	call	1525c <malloc>
   2b114:	e0bffd15 	stw	r2,-12(fp)
                if(!pmac_info) {
   2b118:	e0bffd17 	ldw	r2,-12(fp)
   2b11c:	10000a1e 	bne	r2,zero,2b148 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
   2b120:	d0a7b643 	ldbu	r2,-24871(gp)
   2b124:	10803fcc 	andi	r2,r2,255
   2b128:	e0ffff87 	ldb	r3,-2(fp)
   2b12c:	180d883a 	mov	r6,r3
   2b130:	100b883a 	mov	r5,r2
   2b134:	010000f4 	movhi	r4,3
   2b138:	2111f804 	addi	r4,r4,18400
   2b13c:	0028a980 	call	28a98 <no_printf>
                    return ALTERA_TSE_MALLOC_FAILED;
   2b140:	00bfffc4 	movi	r2,-1
   2b144:	00012f06 	br	2b604 <alt_tse_mac_group_init+0x684>
                }
                
                pmac_info->pmac_group = pmac_group;
   2b148:	e0bffd17 	ldw	r2,-12(fp)
   2b14c:	e0fffe17 	ldw	r3,-8(fp)
   2b150:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
   2b154:	e0bffd17 	ldw	r2,-12(fp)
   2b158:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
   2b15c:	e0ffffc7 	ldb	r3,-1(fp)
   2b160:	e0bfff87 	ldb	r2,-2(fp)
   2b164:	1885883a 	add	r2,r3,r2
   2b168:	10c01324 	muli	r3,r2,76
   2b16c:	008202b4 	movhi	r2,2058
   2b170:	108b0404 	addi	r2,r2,11280
   2b174:	1887883a 	add	r3,r3,r2
   2b178:	e0bffd17 	ldw	r2,-12(fp)
   2b17c:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_msgdma_tx == 0) || (pmac_info->psys_info->tse_msgdma_rx == 0)){                    
   2b180:	e0bffd17 	ldw	r2,-12(fp)
   2b184:	10800217 	ldw	r2,8(r2)
   2b188:	10800617 	ldw	r2,24(r2)
   2b18c:	10000426 	beq	r2,zero,2b1a0 <alt_tse_mac_group_init+0x220>
   2b190:	e0bffd17 	ldw	r2,-12(fp)
   2b194:	10800217 	ldw	r2,8(r2)
   2b198:	10800717 	ldw	r2,28(r2)
   2b19c:	1000091e 	bne	r2,zero,2b1c4 <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
   2b1a0:	e0ffffc7 	ldb	r3,-1(fp)
   2b1a4:	e0bfff87 	ldb	r2,-2(fp)
   2b1a8:	1885883a 	add	r2,r3,r2
   2b1ac:	100b883a 	mov	r5,r2
   2b1b0:	010000f4 	movhi	r4,3
   2b1b4:	21120a04 	addi	r4,r4,18472
   2b1b8:	0028a980 	call	28a98 <no_printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
   2b1bc:	00bfffc4 	movi	r2,-1
   2b1c0:	00011006 	br	2b604 <alt_tse_mac_group_init+0x684>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
   2b1c4:	e0bffd17 	ldw	r2,-12(fp)
   2b1c8:	10800217 	ldw	r2,8(r2)
   2b1cc:	10800343 	ldbu	r2,13(r2)
   2b1d0:	10803fcc 	andi	r2,r2,255
   2b1d4:	10000d26 	beq	r2,zero,2b20c <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
   2b1d8:	e0bffd17 	ldw	r2,-12(fp)
   2b1dc:	10800217 	ldw	r2,8(r2)
   2b1e0:	10800383 	ldbu	r2,14(r2)
   2b1e4:	10803fcc 	andi	r2,r2,255
   2b1e8:	10000426 	beq	r2,zero,2b1fc <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
   2b1ec:	e0bffd17 	ldw	r2,-12(fp)
   2b1f0:	00c00084 	movi	r3,2
   2b1f4:	10c00005 	stb	r3,0(r2)
   2b1f8:	00000606 	br	2b214 <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
   2b1fc:	e0bffd17 	ldw	r2,-12(fp)
   2b200:	00c00044 	movi	r3,1
   2b204:	10c00005 	stb	r3,0(r2)
   2b208:	00000206 	br	2b214 <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
   2b20c:	e0bffd17 	ldw	r2,-12(fp)
   2b210:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
   2b214:	e0bffd17 	ldw	r2,-12(fp)
   2b218:	10800217 	ldw	r2,8(r2)
   2b21c:	10800443 	ldbu	r2,17(r2)
   2b220:	10803fcc 	andi	r2,r2,255
   2b224:	10006626 	beq	r2,zero,2b3c0 <alt_tse_mac_group_init+0x440>
   2b228:	e0bffd17 	ldw	r2,-12(fp)
   2b22c:	10800217 	ldw	r2,8(r2)
   2b230:	108003c3 	ldbu	r2,15(r2)
   2b234:	10803fcc 	andi	r2,r2,255
   2b238:	1000611e 	bne	r2,zero,2b3c0 <alt_tse_mac_group_init+0x440>
                    tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
   2b23c:	e0ffff87 	ldb	r3,-2(fp)
   2b240:	e0bffd17 	ldw	r2,-12(fp)
   2b244:	10800217 	ldw	r2,8(r2)
   2b248:	10800017 	ldw	r2,0(r2)
   2b24c:	100d883a 	mov	r6,r2
   2b250:	180b883a 	mov	r5,r3
   2b254:	010000f4 	movhi	r4,3
   2b258:	21121904 	addi	r4,r4,18532
   2b25c:	0028a980 	call	28a98 <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
   2b260:	e13fff87 	ldb	r4,-2(fp)
   2b264:	e0ffffc7 	ldb	r3,-1(fp)
   2b268:	e0bfff87 	ldb	r2,-2(fp)
   2b26c:	1885883a 	add	r2,r3,r2
   2b270:	100d883a 	mov	r6,r2
   2b274:	200b883a 	mov	r5,r4
   2b278:	010000f4 	movhi	r4,3
   2b27c:	21122504 	addi	r4,r4,18580
   2b280:	0028a980 	call	28a98 <no_printf>
                    
                    switch(pmac_info->mac_type) {
   2b284:	e0bffd17 	ldw	r2,-12(fp)
   2b288:	10800003 	ldbu	r2,0(r2)
   2b28c:	10803fcc 	andi	r2,r2,255
   2b290:	10c00060 	cmpeqi	r3,r2,1
   2b294:	18000c1e 	bne	r3,zero,2b2c8 <alt_tse_mac_group_init+0x348>
   2b298:	10c000a0 	cmpeqi	r3,r2,2
   2b29c:	1800021e 	bne	r3,zero,2b2a8 <alt_tse_mac_group_init+0x328>
   2b2a0:	10001126 	beq	r2,zero,2b2e8 <alt_tse_mac_group_init+0x368>
   2b2a4:	00001806 	br	2b308 <alt_tse_mac_group_init+0x388>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
   2b2a8:	e0bfff87 	ldb	r2,-2(fp)
   2b2ac:	018000f4 	movhi	r6,3
   2b2b0:	31923404 	addi	r6,r6,18640
   2b2b4:	100b883a 	mov	r5,r2
   2b2b8:	010000f4 	movhi	r4,3
   2b2bc:	21123904 	addi	r4,r4,18660
   2b2c0:	0028a980 	call	28a98 <no_printf>
                            break;
   2b2c4:	00001806 	br	2b328 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
   2b2c8:	e0bfff87 	ldb	r2,-2(fp)
   2b2cc:	018000f4 	movhi	r6,3
   2b2d0:	31924404 	addi	r6,r6,18704
   2b2d4:	100b883a 	mov	r5,r2
   2b2d8:	010000f4 	movhi	r4,3
   2b2dc:	21123904 	addi	r4,r4,18660
   2b2e0:	0028a980 	call	28a98 <no_printf>
                            break;
   2b2e4:	00001006 	br	2b328 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
   2b2e8:	e0bfff87 	ldb	r2,-2(fp)
   2b2ec:	018000f4 	movhi	r6,3
   2b2f0:	31924a04 	addi	r6,r6,18728
   2b2f4:	100b883a 	mov	r5,r2
   2b2f8:	010000f4 	movhi	r4,3
   2b2fc:	21123904 	addi	r4,r4,18660
   2b300:	0028a980 	call	28a98 <no_printf>
                            break;
   2b304:	00000806 	br	2b328 <alt_tse_mac_group_init+0x3a8>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
   2b308:	e0bfff87 	ldb	r2,-2(fp)
   2b30c:	018000f4 	movhi	r6,3
   2b310:	31906904 	addi	r6,r6,16804
   2b314:	100b883a 	mov	r5,r2
   2b318:	010000f4 	movhi	r4,3
   2b31c:	21123904 	addi	r4,r4,18660
   2b320:	0028a980 	call	28a98 <no_printf>
                            break;
   2b324:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
   2b328:	e0bffd17 	ldw	r2,-12(fp)
   2b32c:	10800217 	ldw	r2,8(r2)
   2b330:	108004c3 	ldbu	r2,19(r2)
   2b334:	10803fcc 	andi	r2,r2,255
   2b338:	10008b26 	beq	r2,zero,2b568 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
   2b33c:	e0ffff87 	ldb	r3,-2(fp)
   2b340:	e0bffd17 	ldw	r2,-12(fp)
   2b344:	10800217 	ldw	r2,8(r2)
   2b348:	108004c3 	ldbu	r2,19(r2)
   2b34c:	10803fcc 	andi	r2,r2,255
   2b350:	10000326 	beq	r2,zero,2b360 <alt_tse_mac_group_init+0x3e0>
   2b354:	008000f4 	movhi	r2,3
   2b358:	10925104 	addi	r2,r2,18756
   2b35c:	00000206 	br	2b368 <alt_tse_mac_group_init+0x3e8>
   2b360:	008000f4 	movhi	r2,3
   2b364:	10925204 	addi	r2,r2,18760
   2b368:	100d883a 	mov	r6,r2
   2b36c:	180b883a 	mov	r5,r3
   2b370:	010000f4 	movhi	r4,3
   2b374:	21125304 	addi	r4,r4,18764
   2b378:	0028a980 	call	28a98 <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
   2b37c:	e0ffff87 	ldb	r3,-2(fp)
   2b380:	e0bffd17 	ldw	r2,-12(fp)
   2b384:	10800217 	ldw	r2,8(r2)
   2b388:	10800503 	ldbu	r2,20(r2)
   2b38c:	10803fcc 	andi	r2,r2,255
   2b390:	10000326 	beq	r2,zero,2b3a0 <alt_tse_mac_group_init+0x420>
   2b394:	008000f4 	movhi	r2,3
   2b398:	10925104 	addi	r2,r2,18756
   2b39c:	00000206 	br	2b3a8 <alt_tse_mac_group_init+0x428>
   2b3a0:	008000f4 	movhi	r2,3
   2b3a4:	10925204 	addi	r2,r2,18760
   2b3a8:	100d883a 	mov	r6,r2
   2b3ac:	180b883a 	mov	r5,r3
   2b3b0:	010000f4 	movhi	r4,3
   2b3b4:	21125e04 	addi	r4,r4,18808
   2b3b8:	0028a980 	call	28a98 <no_printf>
                    if(pmac_info->psys_info->tse_pcs_ena) {
   2b3bc:	00006a06 	br	2b568 <alt_tse_mac_group_init+0x5e8>
                    }
                }
                else {
                    /* display only once for all MAC, except shared MDIO MACs */
                    if(j == 0) {
   2b3c0:	e0bfff87 	ldb	r2,-2(fp)
   2b3c4:	1000421e 	bne	r2,zero,2b4d0 <alt_tse_mac_group_init+0x550>
                        switch(pmac_info->mac_type) {
   2b3c8:	e0bffd17 	ldw	r2,-12(fp)
   2b3cc:	10800003 	ldbu	r2,0(r2)
   2b3d0:	10803fcc 	andi	r2,r2,255
   2b3d4:	10c00060 	cmpeqi	r3,r2,1
   2b3d8:	18000a1e 	bne	r3,zero,2b404 <alt_tse_mac_group_init+0x484>
   2b3dc:	10c000a0 	cmpeqi	r3,r2,2
   2b3e0:	1800021e 	bne	r3,zero,2b3ec <alt_tse_mac_group_init+0x46c>
   2b3e4:	10000d26 	beq	r2,zero,2b41c <alt_tse_mac_group_init+0x49c>
   2b3e8:	00001206 	br	2b434 <alt_tse_mac_group_init+0x4b4>
                            case ALTERA_TSE_MACLITE_1000:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
   2b3ec:	014000f4 	movhi	r5,3
   2b3f0:	29523404 	addi	r5,r5,18640
   2b3f4:	010000f4 	movhi	r4,3
   2b3f8:	21126904 	addi	r4,r4,18852
   2b3fc:	0028a980 	call	28a98 <no_printf>
                                break;
   2b400:	00001206 	br	2b44c <alt_tse_mac_group_init+0x4cc>
                            case ALTERA_TSE_MACLITE_10_100:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
   2b404:	014000f4 	movhi	r5,3
   2b408:	29524404 	addi	r5,r5,18704
   2b40c:	010000f4 	movhi	r4,3
   2b410:	21126904 	addi	r4,r4,18852
   2b414:	0028a980 	call	28a98 <no_printf>
                                break;
   2b418:	00000c06 	br	2b44c <alt_tse_mac_group_init+0x4cc>
                            case ALTERA_TSE_FULL_MAC:
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
   2b41c:	014000f4 	movhi	r5,3
   2b420:	29524a04 	addi	r5,r5,18728
   2b424:	010000f4 	movhi	r4,3
   2b428:	21126904 	addi	r4,r4,18852
   2b42c:	0028a980 	call	28a98 <no_printf>
                                break;
   2b430:	00000606 	br	2b44c <alt_tse_mac_group_init+0x4cc>
                            default :
                                tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
   2b434:	014000f4 	movhi	r5,3
   2b438:	29506904 	addi	r5,r5,16804
   2b43c:	010000f4 	movhi	r4,3
   2b440:	21126904 	addi	r4,r4,18852
   2b444:	0028a980 	call	28a98 <no_printf>
                                    break;
   2b448:	0001883a 	nop
                }
                        
                        if(pmac_info->psys_info->tse_pcs_ena) {
   2b44c:	e0bffd17 	ldw	r2,-12(fp)
   2b450:	10800217 	ldw	r2,8(r2)
   2b454:	108004c3 	ldbu	r2,19(r2)
   2b458:	10803fcc 	andi	r2,r2,255
   2b45c:	10001c26 	beq	r2,zero,2b4d0 <alt_tse_mac_group_init+0x550>
                            tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
   2b460:	e0bffd17 	ldw	r2,-12(fp)
   2b464:	10800217 	ldw	r2,8(r2)
   2b468:	108004c3 	ldbu	r2,19(r2)
   2b46c:	10803fcc 	andi	r2,r2,255
   2b470:	10000326 	beq	r2,zero,2b480 <alt_tse_mac_group_init+0x500>
   2b474:	008000f4 	movhi	r2,3
   2b478:	10925104 	addi	r2,r2,18756
   2b47c:	00000206 	br	2b488 <alt_tse_mac_group_init+0x508>
   2b480:	008000f4 	movhi	r2,3
   2b484:	10925204 	addi	r2,r2,18760
   2b488:	100b883a 	mov	r5,r2
   2b48c:	010000f4 	movhi	r4,3
   2b490:	21127404 	addi	r4,r4,18896
   2b494:	0028a980 	call	28a98 <no_printf>
                            tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                            
   2b498:	e0bffd17 	ldw	r2,-12(fp)
   2b49c:	10800217 	ldw	r2,8(r2)
   2b4a0:	10800503 	ldbu	r2,20(r2)
   2b4a4:	10803fcc 	andi	r2,r2,255
   2b4a8:	10000326 	beq	r2,zero,2b4b8 <alt_tse_mac_group_init+0x538>
   2b4ac:	008000f4 	movhi	r2,3
   2b4b0:	10925104 	addi	r2,r2,18756
   2b4b4:	00000206 	br	2b4c0 <alt_tse_mac_group_init+0x540>
   2b4b8:	008000f4 	movhi	r2,3
   2b4bc:	10925204 	addi	r2,r2,18760
   2b4c0:	100b883a 	mov	r5,r2
   2b4c4:	010000f4 	movhi	r4,3
   2b4c8:	21127f04 	addi	r4,r4,18940
   2b4cc:	0028a980 	call	28a98 <no_printf>
                        }
                    }
                    
                    if(pmac_info->psys_info->tse_multichannel_mac) {
   2b4d0:	e0bffd17 	ldw	r2,-12(fp)
   2b4d4:	10800217 	ldw	r2,8(r2)
   2b4d8:	108003c3 	ldbu	r2,15(r2)
   2b4dc:	10803fcc 	andi	r2,r2,255
   2b4e0:	10001326 	beq	r2,zero,2b530 <alt_tse_mac_group_init+0x5b0>
                        tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
   2b4e4:	e0ffff87 	ldb	r3,-2(fp)
   2b4e8:	e0bffd17 	ldw	r2,-12(fp)
   2b4ec:	10800217 	ldw	r2,8(r2)
   2b4f0:	10800017 	ldw	r2,0(r2)
   2b4f4:	100d883a 	mov	r6,r2
   2b4f8:	180b883a 	mov	r5,r3
   2b4fc:	010000f4 	movhi	r4,3
   2b500:	21128a04 	addi	r4,r4,18984
   2b504:	0028a980 	call	28a98 <no_printf>
                        tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
   2b508:	e13fff87 	ldb	r4,-2(fp)
   2b50c:	e0ffffc7 	ldb	r3,-1(fp)
   2b510:	e0bfff87 	ldb	r2,-2(fp)
   2b514:	1885883a 	add	r2,r3,r2
   2b518:	100d883a 	mov	r6,r2
   2b51c:	200b883a 	mov	r5,r4
   2b520:	010000f4 	movhi	r4,3
   2b524:	21129604 	addi	r4,r4,19032
   2b528:	0028a980 	call	28a98 <no_printf>
   2b52c:	00000e06 	br	2b568 <alt_tse_mac_group_init+0x5e8>
                    }                
                    else {
                        tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
   2b530:	e0bffd17 	ldw	r2,-12(fp)
   2b534:	10800217 	ldw	r2,8(r2)
   2b538:	10800017 	ldw	r2,0(r2)
   2b53c:	100b883a 	mov	r5,r2
   2b540:	010000f4 	movhi	r4,3
   2b544:	2112a504 	addi	r4,r4,19092
   2b548:	0028a980 	call	28a98 <no_printf>
                        tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
   2b54c:	e0ffffc7 	ldb	r3,-1(fp)
   2b550:	e0bfff87 	ldb	r2,-2(fp)
   2b554:	1885883a 	add	r2,r3,r2
   2b558:	100b883a 	mov	r5,r2
   2b55c:	010000f4 	movhi	r4,3
   2b560:	2112b104 	addi	r4,r4,19140
   2b564:	0028a980 	call	28a98 <no_printf>
                    }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
   2b568:	e0bfff87 	ldb	r2,-2(fp)
   2b56c:	e0fffe17 	ldw	r3,-8(fp)
   2b570:	10800044 	addi	r2,r2,1
   2b574:	100490ba 	slli	r2,r2,2
   2b578:	1885883a 	add	r2,r3,r2
   2b57c:	e0fffd17 	ldw	r3,-12(fp)
   2b580:	10c00015 	stw	r3,0(r2)
            for(j = 0; j < pmac_group->channel; j++) {
   2b584:	e0bfff83 	ldbu	r2,-2(fp)
   2b588:	10800044 	addi	r2,r2,1
   2b58c:	e0bfff85 	stb	r2,-2(fp)
   2b590:	e0ffff87 	ldb	r3,-2(fp)
   2b594:	e0bffe17 	ldw	r2,-8(fp)
   2b598:	10800003 	ldbu	r2,0(r2)
   2b59c:	10803fcc 	andi	r2,r2,255
   2b5a0:	18beda16 	blt	r3,r2,2b10c <__alt_mem_mcu_subsystem_ram_0+0x7800b10c>
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
   2b5a4:	d0a7b643 	ldbu	r2,-24871(gp)
   2b5a8:	10803fcc 	andi	r2,r2,255
   2b5ac:	100890ba 	slli	r4,r2,2
   2b5b0:	e0fffe17 	ldw	r3,-8(fp)
   2b5b4:	008202b4 	movhi	r2,2058
   2b5b8:	2085883a 	add	r2,r4,r2
   2b5bc:	10cd6c15 	stw	r3,13744(r2)
            
            mac_group_count++;
   2b5c0:	d0a7b643 	ldbu	r2,-24871(gp)
   2b5c4:	10800044 	addi	r2,r2,1
   2b5c8:	d0a7b645 	stb	r2,-24871(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
   2b5cc:	e0bffe17 	ldw	r2,-8(fp)
   2b5d0:	10c00003 	ldbu	r3,0(r2)
   2b5d4:	e0bfffc3 	ldbu	r2,-1(fp)
   2b5d8:	1885883a 	add	r2,r3,r2
   2b5dc:	10bfffc4 	addi	r2,r2,-1
   2b5e0:	e0bfffc5 	stb	r2,-1(fp)
    for(i = 0; i < max_mac_system; i++) {
   2b5e4:	e0bfffc3 	ldbu	r2,-1(fp)
   2b5e8:	10800044 	addi	r2,r2,1
   2b5ec:	e0bfffc5 	stb	r2,-1(fp)
   2b5f0:	e0ffffc7 	ldb	r3,-1(fp)
   2b5f4:	d0a01003 	ldbu	r2,-32704(gp)
   2b5f8:	10803fcc 	andi	r2,r2,255
   2b5fc:	18be6a16 	blt	r3,r2,2afa8 <__alt_mem_mcu_subsystem_ram_0+0x7800afa8>
                        
        }
    }
    return SUCCESS;
   2b600:	0005883a 	mov	r2,zero
}
   2b604:	e037883a 	mov	sp,fp
   2b608:	dfc00117 	ldw	ra,4(sp)
   2b60c:	df000017 	ldw	fp,0(sp)
   2b610:	dec00204 	addi	sp,sp,8
   2b614:	f800283a 	ret

0002b618 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
   2b618:	deffed04 	addi	sp,sp,-76
   2b61c:	dfc01215 	stw	ra,72(sp)
   2b620:	df001115 	stw	fp,68(sp)
   2b624:	df001104 	addi	fp,sp,68
   2b628:	e13ff015 	stw	r4,-64(fp)
    
    alt_32 phyid; 
    alt_32 phyid2 = 0;
   2b62c:	e03ffa15 	stw	zero,-24(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
   2b630:	e03ffc15 	stw	zero,-16(fp)
    
    alt_8 phy_info_count = 0;
   2b634:	e03ffbc5 	stb	zero,-17(fp)
    
    alt_tse_phy_info *pphy = 0;
   2b638:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
   2b63c:	e03ff815 	stw	zero,-32(fp)
    alt_tse_system_info *psys = 0;
   2b640:	e03ff715 	stw	zero,-36(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2b644:	e0bff017 	ldw	r2,-64(fp)
   2b648:	10800117 	ldw	r2,4(r2)
   2b64c:	10800217 	ldw	r2,8(r2)
   2b650:	10800017 	ldw	r2,0(r2)
   2b654:	e0bff615 	stw	r2,-40(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
   2b658:	e0bff617 	ldw	r2,-40(fp)
   2b65c:	10801004 	addi	r2,r2,64
   2b660:	10800037 	ldwio	r2,0(r2)
   2b664:	e0bff515 	stw	r2,-44(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2b668:	e13ff017 	ldw	r4,-64(fp)
   2b66c:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2b670:	e0bff4c5 	stb	r2,-45(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
   2b674:	e03fffc5 	stb	zero,-1(fp)
   2b678:	0000c206 	br	2b984 <alt_tse_mac_get_phy+0x36c>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
   2b67c:	e0bff617 	ldw	r2,-40(fp)
   2b680:	10801004 	addi	r2,r2,64
   2b684:	e0ffffc3 	ldbu	r3,-1(fp)
   2b688:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
   2b68c:	e0bff617 	ldw	r2,-40(fp)
   2b690:	1080a204 	addi	r2,r2,648
   2b694:	10800037 	ldwio	r2,0(r2)
   2b698:	e0bff315 	stw	r2,-52(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
   2b69c:	e0bff617 	ldw	r2,-40(fp)
   2b6a0:	1080a304 	addi	r2,r2,652
   2b6a4:	10800037 	ldwio	r2,0(r2)
   2b6a8:	e0bffa15 	stw	r2,-24(fp)
        
        /* PHY found */
        if (phyid != phyid2)
   2b6ac:	e0fff317 	ldw	r3,-52(fp)
   2b6b0:	e0bffa17 	ldw	r2,-24(fp)
   2b6b4:	1880b026 	beq	r3,r2,2b978 <alt_tse_mac_get_phy+0x360>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
   2b6b8:	01000704 	movi	r4,28
   2b6bc:	001525c0 	call	1525c <malloc>
   2b6c0:	e0bff915 	stw	r2,-28(fp)
            if(!pphy) {
   2b6c4:	e0bff917 	ldw	r2,-28(fp)
   2b6c8:	1000091e 	bne	r2,zero,2b6f0 <alt_tse_mac_get_phy+0xd8>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
   2b6cc:	e0bff4c7 	ldb	r2,-45(fp)
   2b6d0:	e0fffbc7 	ldb	r3,-17(fp)
   2b6d4:	180d883a 	mov	r6,r3
   2b6d8:	100b883a 	mov	r5,r2
   2b6dc:	010000f4 	movhi	r4,3
   2b6e0:	2112c004 	addi	r4,r4,19200
   2b6e4:	0028a980 	call	28a98 <no_printf>
                return ALTERA_TSE_MALLOC_FAILED;
   2b6e8:	00bfffc4 	movi	r2,-1
   2b6ec:	0000c506 	br	2ba04 <alt_tse_mac_get_phy+0x3ec>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
   2b6f0:	e0bff917 	ldw	r2,-28(fp)
   2b6f4:	e0ffffc3 	ldbu	r3,-1(fp)
   2b6f8:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
   2b6fc:	e0bff317 	ldw	r2,-52(fp)
   2b700:	100691ba 	slli	r3,r2,6
   2b704:	e0bffa17 	ldw	r2,-24(fp)
   2b708:	1005d2ba 	srai	r2,r2,10
   2b70c:	10800fcc 	andi	r2,r2,63
   2b710:	1884b03a 	or	r2,r3,r2
   2b714:	e0bff215 	stw	r2,-56(fp)
            model_number = (phyid2 >> 4) & 0x3f;
   2b718:	e0bffa17 	ldw	r2,-24(fp)
   2b71c:	1005d13a 	srai	r2,r2,4
   2b720:	10800fcc 	andi	r2,r2,63
   2b724:	e0bff1c5 	stb	r2,-57(fp)
            revision_number = phyid2 & 0x0f;
   2b728:	e0bffa17 	ldw	r2,-24(fp)
   2b72c:	108003cc 	andi	r2,r2,15
   2b730:	e0bff185 	stb	r2,-58(fp)
            
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
   2b734:	e03ffdc5 	stb	zero,-9(fp)
            for(i = 0; i < phy_profile_count; i++) {
   2b738:	e03ffe15 	stw	zero,-8(fp)
   2b73c:	00002c06 	br	2b7f0 <alt_tse_mac_get_phy+0x1d8>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
   2b740:	e0bffe17 	ldw	r2,-8(fp)
   2b744:	100690ba 	slli	r3,r2,2
   2b748:	008202b4 	movhi	r2,2058
   2b74c:	1885883a 	add	r2,r3,r2
   2b750:	108d7417 	ldw	r2,13776(r2)
   2b754:	10801417 	ldw	r2,80(r2)
   2b758:	e0fff217 	ldw	r3,-56(fp)
   2b75c:	1880211e 	bne	r3,r2,2b7e4 <alt_tse_mac_get_phy+0x1cc>
   2b760:	e0bffe17 	ldw	r2,-8(fp)
   2b764:	100690ba 	slli	r3,r2,2
   2b768:	008202b4 	movhi	r2,2058
   2b76c:	1885883a 	add	r2,r3,r2
   2b770:	108d7417 	ldw	r2,13776(r2)
   2b774:	10801503 	ldbu	r2,84(r2)
   2b778:	e0fff1c3 	ldbu	r3,-57(fp)
   2b77c:	10803fcc 	andi	r2,r2,255
   2b780:	1880181e 	bne	r3,r2,2b7e4 <alt_tse_mac_get_phy+0x1cc>
                {
                    pphy->pphy_profile = pphy_profiles[i];
   2b784:	e0bffe17 	ldw	r2,-8(fp)
   2b788:	100690ba 	slli	r3,r2,2
   2b78c:	008202b4 	movhi	r2,2058
   2b790:	1885883a 	add	r2,r3,r2
   2b794:	10cd7417 	ldw	r3,13776(r2)
   2b798:	e0bff917 	ldw	r2,-28(fp)
   2b79c:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
   2b7a0:	e0bffe17 	ldw	r2,-8(fp)
   2b7a4:	100690ba 	slli	r3,r2,2
   2b7a8:	008202b4 	movhi	r2,2058
   2b7ac:	1885883a 	add	r2,r3,r2
   2b7b0:	108d7417 	ldw	r2,13776(r2)
   2b7b4:	1009883a 	mov	r4,r2
   2b7b8:	e0bfffc3 	ldbu	r2,-1(fp)
   2b7bc:	e0fff4c7 	ldb	r3,-45(fp)
   2b7c0:	180f883a 	mov	r7,r3
   2b7c4:	100d883a 	mov	r6,r2
   2b7c8:	200b883a 	mov	r5,r4
   2b7cc:	010000f4 	movhi	r4,3
   2b7d0:	2112cf04 	addi	r4,r4,19260
   2b7d4:	0028a980 	call	28a98 <no_printf>
                    is_phy_in_profile = 1;
   2b7d8:	00800044 	movi	r2,1
   2b7dc:	e0bffdc5 	stb	r2,-9(fp)
                    break;
   2b7e0:	00000706 	br	2b800 <alt_tse_mac_get_phy+0x1e8>
            for(i = 0; i < phy_profile_count; i++) {
   2b7e4:	e0bffe17 	ldw	r2,-8(fp)
   2b7e8:	10800044 	addi	r2,r2,1
   2b7ec:	e0bffe15 	stw	r2,-8(fp)
   2b7f0:	d0a7b603 	ldbu	r2,-24872(gp)
   2b7f4:	10803fcc 	andi	r2,r2,255
   2b7f8:	e0fffe17 	ldw	r3,-8(fp)
   2b7fc:	18bfd016 	blt	r3,r2,2b740 <__alt_mem_mcu_subsystem_ram_0+0x7800b740>
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
   2b800:	e0bffdc3 	ldbu	r2,-9(fp)
   2b804:	10000f1e 	bne	r2,zero,2b844 <alt_tse_mac_get_phy+0x22c>
                pphy->pphy_profile = 0;
   2b808:	e0bff917 	ldw	r2,-28(fp)
   2b80c:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
   2b810:	e0bfffc3 	ldbu	r2,-1(fp)
   2b814:	e0fff4c7 	ldb	r3,-45(fp)
   2b818:	180d883a 	mov	r6,r3
   2b81c:	100b883a 	mov	r5,r2
   2b820:	010000f4 	movhi	r4,3
   2b824:	2112df04 	addi	r4,r4,19324
   2b828:	0028a980 	call	28a98 <no_printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
   2b82c:	010000f4 	movhi	r4,3
   2b830:	2112f004 	addi	r4,r4,19392
   2b834:	0028a980 	call	28a98 <no_printf>
                return_value++;
   2b838:	e0bffc17 	ldw	r2,-16(fp)
   2b83c:	10800044 	addi	r2,r2,1
   2b840:	e0bffc15 	stw	r2,-16(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
   2b844:	e0bff217 	ldw	r2,-56(fp)
   2b848:	100b883a 	mov	r5,r2
   2b84c:	010000f4 	movhi	r4,3
   2b850:	2112fe04 	addi	r4,r4,19448
   2b854:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
   2b858:	e0bff1c3 	ldbu	r2,-57(fp)
   2b85c:	100b883a 	mov	r5,r2
   2b860:	010000f4 	movhi	r4,3
   2b864:	21130904 	addi	r4,r4,19492
   2b868:	0028a980 	call	28a98 <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
   2b86c:	e0bff183 	ldbu	r2,-58(fp)
   2b870:	100b883a 	mov	r5,r2
   2b874:	010000f4 	movhi	r4,3
   2b878:	21131404 	addi	r4,r4,19536
   2b87c:	0028a980 	call	28a98 <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
   2b880:	e17ff917 	ldw	r5,-28(fp)
   2b884:	e13ff017 	ldw	r4,-64(fp)
   2b888:	002ba180 	call	2ba18 <alt_tse_mac_associate_phy>
   2b88c:	1000341e 	bne	r2,zero,2b960 <alt_tse_mac_get_phy+0x348>
                
                pmac_info = pphy->pmac_info;
   2b890:	e0bff917 	ldw	r2,-28(fp)
   2b894:	10800617 	ldw	r2,24(r2)
   2b898:	e0bff815 	stw	r2,-32(fp)
                psys = pmac_info->psys_info;
   2b89c:	e0bff817 	ldw	r2,-32(fp)
   2b8a0:	10800217 	ldw	r2,8(r2)
   2b8a4:	e0bff715 	stw	r2,-36(fp)
                
                /* Disable PHY loopback to allow Auto-Negotiation completed */
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
   2b8a8:	d8000015 	stw	zero,0(sp)
   2b8ac:	01c00044 	movi	r7,1
   2b8b0:	01800384 	movi	r6,14
   2b8b4:	000b883a 	mov	r5,zero
   2b8b8:	e13ff917 	ldw	r4,-28(fp)
   2b8bc:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
                
                /* Reset auto-negotiation advertisement */
                alt_tse_phy_set_adv_1000(pphy, 1);
   2b8c0:	01400044 	movi	r5,1
   2b8c4:	e13ff917 	ldw	r4,-28(fp)
   2b8c8:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
                alt_tse_phy_set_adv_100(pphy, 1);
   2b8cc:	01400044 	movi	r5,1
   2b8d0:	e13ff917 	ldw	r4,-28(fp)
   2b8d4:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
                alt_tse_phy_set_adv_10(pphy, 1);
   2b8d8:	01400044 	movi	r5,1
   2b8dc:	e13ff917 	ldw	r4,-28(fp)
   2b8e0:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
                                
                /* check link connection for this PHY */
                alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
   2b8e4:	0149c404 	movi	r5,10000
   2b8e8:	e13ff917 	ldw	r4,-28(fp)
   2b8ec:	002be8c0 	call	2be8c <alt_tse_phy_restart_an>
                
                /* Perform additional setting if there is any */
                /* Profile specific */
                if(pphy->pphy_profile) {
   2b8f0:	e0bff917 	ldw	r2,-28(fp)
   2b8f4:	10800517 	ldw	r2,20(r2)
   2b8f8:	10000f26 	beq	r2,zero,2b938 <alt_tse_mac_get_phy+0x320>
                    if(pphy->pphy_profile->phy_cfg) {
   2b8fc:	e0bff917 	ldw	r2,-28(fp)
   2b900:	10800517 	ldw	r2,20(r2)
   2b904:	10801717 	ldw	r2,92(r2)
   2b908:	10000b26 	beq	r2,zero,2b938 <alt_tse_mac_get_phy+0x320>
                        tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
   2b90c:	e0bff917 	ldw	r2,-28(fp)
   2b910:	10800517 	ldw	r2,20(r2)
   2b914:	100b883a 	mov	r5,r2
   2b918:	010000f4 	movhi	r4,3
   2b91c:	21131f04 	addi	r4,r4,19580
   2b920:	0028a980 	call	28a98 <no_printf>
                        pphy->pphy_profile->phy_cfg(pmac_group_base);
   2b924:	e0bff917 	ldw	r2,-28(fp)
   2b928:	10800517 	ldw	r2,20(r2)
   2b92c:	10801717 	ldw	r2,92(r2)
   2b930:	e13ff617 	ldw	r4,-40(fp)
   2b934:	103ee83a 	callr	r2
                    }
                }
                
                /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
                /* Individual PHY specific */
                if(psys->tse_phy_cfg) {
   2b938:	e0bff717 	ldw	r2,-36(fp)
   2b93c:	10801217 	ldw	r2,72(r2)
   2b940:	10000726 	beq	r2,zero,2b960 <alt_tse_mac_get_phy+0x348>
                    tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
   2b944:	010000f4 	movhi	r4,3
   2b948:	21132d04 	addi	r4,r4,19636
   2b94c:	0028a980 	call	28a98 <no_printf>
                    psys->tse_phy_cfg(pmac_group_base);
   2b950:	e0bff717 	ldw	r2,-36(fp)
   2b954:	10801217 	ldw	r2,72(r2)
   2b958:	e13ff617 	ldw	r4,-40(fp)
   2b95c:	103ee83a 	callr	r2
                }
            }
            
            tse_dprintf(6, "\n");
   2b960:	010000f4 	movhi	r4,3
   2b964:	21133b04 	addi	r4,r4,19692
   2b968:	0028a980 	call	28a98 <no_printf>
                
            phy_info_count++;
   2b96c:	e0bffbc3 	ldbu	r2,-17(fp)
   2b970:	10800044 	addi	r2,r2,1
   2b974:	e0bffbc5 	stb	r2,-17(fp)
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
   2b978:	e0bfffc3 	ldbu	r2,-1(fp)
   2b97c:	10800044 	addi	r2,r2,1
   2b980:	e0bfffc5 	stb	r2,-1(fp)
   2b984:	e0bfffc3 	ldbu	r2,-1(fp)
   2b988:	10800830 	cmpltui	r2,r2,32
   2b98c:	103f3b1e 	bne	r2,zero,2b67c <__alt_mem_mcu_subsystem_ram_0+0x7800b67c>
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
   2b990:	e0bff017 	ldw	r2,-64(fp)
   2b994:	10800003 	ldbu	r2,0(r2)
   2b998:	10c03fcc 	andi	r3,r2,255
   2b99c:	e0bffbc7 	ldb	r2,-17(fp)
   2b9a0:	18801326 	beq	r3,r2,2b9f0 <alt_tse_mac_get_phy+0x3d8>
        if(phy_info_count == 0) {
   2b9a4:	e0bffbc7 	ldb	r2,-17(fp)
   2b9a8:	1000061e 	bne	r2,zero,2b9c4 <alt_tse_mac_get_phy+0x3ac>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
   2b9ac:	e0bff4c7 	ldb	r2,-45(fp)
   2b9b0:	100b883a 	mov	r5,r2
   2b9b4:	010000f4 	movhi	r4,3
   2b9b8:	21133c04 	addi	r4,r4,19696
   2b9bc:	0028a980 	call	28a98 <no_printf>
   2b9c0:	00000b06 	br	2b9f0 <alt_tse_mac_get_phy+0x3d8>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
   2b9c4:	e0fff4c7 	ldb	r3,-45(fp)
   2b9c8:	e13ffbc7 	ldb	r4,-17(fp)
   2b9cc:	e0bff017 	ldw	r2,-64(fp)
   2b9d0:	10800003 	ldbu	r2,0(r2)
   2b9d4:	10803fcc 	andi	r2,r2,255
   2b9d8:	100f883a 	mov	r7,r2
   2b9dc:	200d883a 	mov	r6,r4
   2b9e0:	180b883a 	mov	r5,r3
   2b9e4:	010000f4 	movhi	r4,3
   2b9e8:	21134804 	addi	r4,r4,19744
   2b9ec:	0028a980 	call	28a98 <no_printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2b9f0:	e0bff617 	ldw	r2,-40(fp)
   2b9f4:	10801004 	addi	r2,r2,64
   2b9f8:	e0fff517 	ldw	r3,-44(fp)
   2b9fc:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
   2ba00:	e0bffc17 	ldw	r2,-16(fp)
}
   2ba04:	e037883a 	mov	sp,fp
   2ba08:	dfc00117 	ldw	ra,4(sp)
   2ba0c:	df000017 	ldw	fp,0(sp)
   2ba10:	dec00204 	addi	sp,sp,8
   2ba14:	f800283a 	ret

0002ba18 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
   2ba18:	defff604 	addi	sp,sp,-40
   2ba1c:	dfc00915 	stw	ra,36(sp)
   2ba20:	df000815 	stw	fp,32(sp)
   2ba24:	df000804 	addi	fp,sp,32
   2ba28:	e13ff915 	stw	r4,-28(fp)
   2ba2c:	e17ff815 	stw	r5,-32(fp)
    
    alt_32 i;
    alt_32 return_value = TSE_PHY_MAP_SUCCESS;
   2ba30:	e03ffe15 	stw	zero,-8(fp)
    
    alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
   2ba34:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_mac_info *pmac_info = 0;
   2ba38:	e03ffb15 	stw	zero,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
   2ba3c:	e03ffac5 	stb	zero,-21(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2ba40:	e13ff917 	ldw	r4,-28(fp)
   2ba44:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2ba48:	e0bffa85 	stb	r2,-22(fp)
    alt_8 sys_info_index = 0;
   2ba4c:	e03ffa45 	stb	zero,-23(fp)
    
    is_mapped = 0;
   2ba50:	e03ffdc5 	stb	zero,-9(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
   2ba54:	e03fff15 	stw	zero,-4(fp)
   2ba58:	00002b06 	br	2bb08 <alt_tse_mac_associate_phy+0xf0>
        pmac_info = pmac_group->pmac_info[i];
   2ba5c:	e0fff917 	ldw	r3,-28(fp)
   2ba60:	e0bfff17 	ldw	r2,-4(fp)
   2ba64:	10800044 	addi	r2,r2,1
   2ba68:	100490ba 	slli	r2,r2,2
   2ba6c:	1885883a 	add	r2,r3,r2
   2ba70:	10800017 	ldw	r2,0(r2)
   2ba74:	e0bffb15 	stw	r2,-20(fp)
        psys = pmac_info->psys_info;
   2ba78:	e0bffb17 	ldw	r2,-20(fp)
   2ba7c:	10800217 	ldw	r2,8(r2)
   2ba80:	e0bffc15 	stw	r2,-16(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
   2ba84:	e0bffc17 	ldw	r2,-16(fp)
   2ba88:	10c01117 	ldw	r3,68(r2)
   2ba8c:	e0bff817 	ldw	r2,-32(fp)
   2ba90:	10800003 	ldbu	r2,0(r2)
   2ba94:	10803fcc 	andi	r2,r2,255
   2ba98:	1880181e 	bne	r3,r2,2bafc <alt_tse_mac_associate_phy+0xe4>
            mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2ba9c:	e13ffb17 	ldw	r4,-20(fp)
   2baa0:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2baa4:	e0bffac5 	stb	r2,-21(fp)
            sys_info_index = alt_tse_get_system_index(psys);
   2baa8:	e13ffc17 	ldw	r4,-16(fp)
   2baac:	0029a480 	call	29a48 <alt_tse_get_system_index>
   2bab0:	e0bffa45 	stb	r2,-23(fp)
            
            pmac_info->pphy_info = pphy;
   2bab4:	e0bffb17 	ldw	r2,-20(fp)
   2bab8:	e0fff817 	ldw	r3,-32(fp)
   2babc:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
   2bac0:	e0bff817 	ldw	r2,-32(fp)
   2bac4:	e0fffb17 	ldw	r3,-20(fp)
   2bac8:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
   2bacc:	e0bffa87 	ldb	r2,-22(fp)
   2bad0:	e0fffac7 	ldb	r3,-21(fp)
   2bad4:	e13ffa47 	ldb	r4,-23(fp)
   2bad8:	200f883a 	mov	r7,r4
   2badc:	180d883a 	mov	r6,r3
   2bae0:	100b883a 	mov	r5,r2
   2bae4:	010000f4 	movhi	r4,3
   2bae8:	21136704 	addi	r4,r4,19868
   2baec:	0028a980 	call	28a98 <no_printf>
            is_mapped = 1;
   2baf0:	00800044 	movi	r2,1
   2baf4:	e0bffdc5 	stb	r2,-9(fp)
            break;
   2baf8:	00000806 	br	2bb1c <alt_tse_mac_associate_phy+0x104>
    for(i = 0; i < pmac_group->channel; i++) {
   2bafc:	e0bfff17 	ldw	r2,-4(fp)
   2bb00:	10800044 	addi	r2,r2,1
   2bb04:	e0bfff15 	stw	r2,-4(fp)
   2bb08:	e0bff917 	ldw	r2,-28(fp)
   2bb0c:	10800003 	ldbu	r2,0(r2)
   2bb10:	10803fcc 	andi	r2,r2,255
   2bb14:	e0ffff17 	ldw	r3,-4(fp)
   2bb18:	18bfd016 	blt	r3,r2,2ba5c <__alt_mem_mcu_subsystem_ram_0+0x7800ba5c>
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
   2bb1c:	e0bffdc3 	ldbu	r2,-9(fp)
   2bb20:	10003c1e 	bne	r2,zero,2bc14 <alt_tse_mac_associate_phy+0x1fc>
        for(i = 0; i < pmac_group->channel; i++) {
   2bb24:	e03fff15 	stw	zero,-4(fp)
   2bb28:	00003506 	br	2bc00 <alt_tse_mac_associate_phy+0x1e8>
            pmac_info = pmac_group->pmac_info[i];
   2bb2c:	e0fff917 	ldw	r3,-28(fp)
   2bb30:	e0bfff17 	ldw	r2,-4(fp)
   2bb34:	10800044 	addi	r2,r2,1
   2bb38:	100490ba 	slli	r2,r2,2
   2bb3c:	1885883a 	add	r2,r3,r2
   2bb40:	10800017 	ldw	r2,0(r2)
   2bb44:	e0bffb15 	stw	r2,-20(fp)
            psys = pmac_info->psys_info;
   2bb48:	e0bffb17 	ldw	r2,-20(fp)
   2bb4c:	10800217 	ldw	r2,8(r2)
   2bb50:	e0bffc15 	stw	r2,-16(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_msgdma_tx == 0) || (psys->tse_msgdma_rx == 0)){
   2bb54:	e0bffc17 	ldw	r2,-16(fp)
   2bb58:	10800617 	ldw	r2,24(r2)
   2bb5c:	10002426 	beq	r2,zero,2bbf0 <alt_tse_mac_associate_phy+0x1d8>
   2bb60:	e0bffc17 	ldw	r2,-16(fp)
   2bb64:	10800717 	ldw	r2,28(r2)
   2bb68:	10002126 	beq	r2,zero,2bbf0 <alt_tse_mac_associate_phy+0x1d8>
                continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
   2bb6c:	e0bffc17 	ldw	r2,-16(fp)
   2bb70:	10801117 	ldw	r2,68(r2)
   2bb74:	10bfffd8 	cmpnei	r2,r2,-1
   2bb78:	10001e1e 	bne	r2,zero,2bbf4 <alt_tse_mac_associate_phy+0x1dc>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2bb7c:	e13ffb17 	ldw	r4,-20(fp)
   2bb80:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2bb84:	e0bffac5 	stb	r2,-21(fp)
                sys_info_index = alt_tse_get_system_index(psys);
   2bb88:	e13ffc17 	ldw	r4,-16(fp)
   2bb8c:	0029a480 	call	29a48 <alt_tse_get_system_index>
   2bb90:	e0bffa45 	stb	r2,-23(fp)
                
                pmac_info->pphy_info = pphy;
   2bb94:	e0bffb17 	ldw	r2,-20(fp)
   2bb98:	e0fff817 	ldw	r3,-32(fp)
   2bb9c:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
   2bba0:	e0bff817 	ldw	r2,-32(fp)
   2bba4:	e0fffb17 	ldw	r3,-20(fp)
   2bba8:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
   2bbac:	e0bff817 	ldw	r2,-32(fp)
   2bbb0:	10800003 	ldbu	r2,0(r2)
   2bbb4:	10c03fcc 	andi	r3,r2,255
   2bbb8:	e0bffc17 	ldw	r2,-16(fp)
   2bbbc:	10c01115 	stw	r3,68(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
   2bbc0:	e0bffa87 	ldb	r2,-22(fp)
   2bbc4:	e0fffac7 	ldb	r3,-21(fp)
   2bbc8:	e13ffa47 	ldb	r4,-23(fp)
   2bbcc:	200f883a 	mov	r7,r4
   2bbd0:	180d883a 	mov	r6,r3
   2bbd4:	100b883a 	mov	r5,r2
   2bbd8:	010000f4 	movhi	r4,3
   2bbdc:	21137704 	addi	r4,r4,19932
   2bbe0:	0028a980 	call	28a98 <no_printf>
                is_mapped = 1;
   2bbe4:	00800044 	movi	r2,1
   2bbe8:	e0bffdc5 	stb	r2,-9(fp)
                break;
   2bbec:	00000906 	br	2bc14 <alt_tse_mac_associate_phy+0x1fc>
                continue;
   2bbf0:	0001883a 	nop
        for(i = 0; i < pmac_group->channel; i++) {
   2bbf4:	e0bfff17 	ldw	r2,-4(fp)
   2bbf8:	10800044 	addi	r2,r2,1
   2bbfc:	e0bfff15 	stw	r2,-4(fp)
   2bc00:	e0bff917 	ldw	r2,-28(fp)
   2bc04:	10800003 	ldbu	r2,0(r2)
   2bc08:	10803fcc 	andi	r2,r2,255
   2bc0c:	e0ffff17 	ldw	r3,-4(fp)
   2bc10:	18bfc616 	blt	r3,r2,2bb2c <__alt_mem_mcu_subsystem_ram_0+0x7800bb2c>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
   2bc14:	e0bffdc3 	ldbu	r2,-9(fp)
   2bc18:	1000091e 	bne	r2,zero,2bc40 <alt_tse_mac_associate_phy+0x228>
        pphy->pmac_info = 0;
   2bc1c:	e0bff817 	ldw	r2,-32(fp)
   2bc20:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
   2bc24:	e0bffa87 	ldb	r2,-22(fp)
   2bc28:	100b883a 	mov	r5,r2
   2bc2c:	010000f4 	movhi	r4,3
   2bc30:	21138804 	addi	r4,r4,20000
   2bc34:	0028a980 	call	28a98 <no_printf>
        return_value = TSE_PHY_MAP_ERROR;
   2bc38:	00bfffc4 	movi	r2,-1
   2bc3c:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return return_value;
   2bc40:	e0bffe17 	ldw	r2,-8(fp)
}
   2bc44:	e037883a 	mov	sp,fp
   2bc48:	dfc00117 	ldw	ra,4(sp)
   2bc4c:	df000017 	ldw	fp,0(sp)
   2bc50:	dec00204 	addi	sp,sp,8
   2bc54:	f800283a 	ret

0002bc58 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
   2bc58:	defff804 	addi	sp,sp,-32
   2bc5c:	dfc00715 	stw	ra,28(sp)
   2bc60:	df000615 	stw	fp,24(sp)
   2bc64:	df000604 	addi	fp,sp,24
   2bc68:	e13ffa15 	stw	r4,-24(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
   2bc6c:	e0bffa17 	ldw	r2,-24(fp)
   2bc70:	10800217 	ldw	r2,8(r2)
   2bc74:	e0bfff15 	stw	r2,-4(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
   2bc78:	e0bfff17 	ldw	r2,-4(fp)
   2bc7c:	10800017 	ldw	r2,0(r2)
   2bc80:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2bc84:	e0bffa17 	ldw	r2,-24(fp)
   2bc88:	10800317 	ldw	r2,12(r2)
   2bc8c:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2bc90:	e13ffa17 	ldw	r4,-24(fp)
   2bc94:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2bc98:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2bc9c:	e13ffd17 	ldw	r4,-12(fp)
   2bca0:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2bca4:	e0bffc85 	stb	r2,-14(fp)

    if(psys->tse_pcs_ena) {
   2bca8:	e0bfff17 	ldw	r2,-4(fp)
   2bcac:	108004c3 	ldbu	r2,19(r2)
   2bcb0:	10803fcc 	andi	r2,r2,255
   2bcb4:	10002c26 	beq	r2,zero,2bd68 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
   2bcb8:	e0bffc87 	ldb	r2,-14(fp)
   2bcbc:	e0fffcc7 	ldb	r3,-13(fp)
   2bcc0:	180d883a 	mov	r6,r3
   2bcc4:	100b883a 	mov	r5,r2
   2bcc8:	010000f4 	movhi	r4,3
   2bccc:	2113b904 	addi	r4,r4,20196
   2bcd0:	0028a980 	call	28a98 <no_printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
   2bcd4:	e0bffe17 	ldw	r2,-8(fp)
   2bcd8:	10808004 	addi	r2,r2,512
   2bcdc:	10801404 	addi	r2,r2,80
   2bce0:	10800037 	ldwio	r2,0(r2)
   2bce4:	e0bffb15 	stw	r2,-20(fp)
        
        if(psys->tse_pcs_sgmii) {
   2bce8:	e0bfff17 	ldw	r2,-4(fp)
   2bcec:	10800503 	ldbu	r2,20(r2)
   2bcf0:	10803fcc 	andi	r2,r2,255
   2bcf4:	10000e26 	beq	r2,zero,2bd30 <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
   2bcf8:	e0bffc87 	ldb	r2,-14(fp)
   2bcfc:	e0fffcc7 	ldb	r3,-13(fp)
   2bd00:	180d883a 	mov	r6,r3
   2bd04:	100b883a 	mov	r5,r2
   2bd08:	010000f4 	movhi	r4,3
   2bd0c:	2113c704 	addi	r4,r4,20252
   2bd10:	0028a980 	call	28a98 <no_printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
   2bd14:	e0bffe17 	ldw	r2,-8(fp)
   2bd18:	10808004 	addi	r2,r2,512
   2bd1c:	10801404 	addi	r2,r2,80
   2bd20:	e0fffb17 	ldw	r3,-20(fp)
   2bd24:	18c000d4 	ori	r3,r3,3
   2bd28:	10c00035 	stwio	r3,0(r2)
   2bd2c:	00000e06 	br	2bd68 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
   2bd30:	e0bffc87 	ldb	r2,-14(fp)
   2bd34:	e0fffcc7 	ldb	r3,-13(fp)
   2bd38:	180d883a 	mov	r6,r3
   2bd3c:	100b883a 	mov	r5,r2
   2bd40:	010000f4 	movhi	r4,3
   2bd44:	2113d304 	addi	r4,r4,20300
   2bd48:	0028a980 	call	28a98 <no_printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
   2bd4c:	e0bffe17 	ldw	r2,-8(fp)
   2bd50:	10808004 	addi	r2,r2,512
   2bd54:	10801404 	addi	r2,r2,80
   2bd58:	e13ffb17 	ldw	r4,-20(fp)
   2bd5c:	00ffff04 	movi	r3,-4
   2bd60:	20c6703a 	and	r3,r4,r3
   2bd64:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
   2bd68:	0005883a 	mov	r2,zero
}
   2bd6c:	e037883a 	mov	sp,fp
   2bd70:	dfc00117 	ldw	ra,4(sp)
   2bd74:	df000017 	ldw	fp,0(sp)
   2bd78:	dec00204 	addi	sp,sp,8
   2bd7c:	f800283a 	ret

0002bd80 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
   2bd80:	defffb04 	addi	sp,sp,-20
   2bd84:	dfc00415 	stw	ra,16(sp)
   2bd88:	df000315 	stw	fp,12(sp)
   2bd8c:	df000304 	addi	fp,sp,12
    alt_8 i = 0;
   2bd90:	e03fffc5 	stb	zero,-1(fp)
    alt_8 j = 0;
   2bd94:	e03fff85 	stb	zero,-2(fp)
    
    alt_tse_mac_group *pmac_group = 0;
   2bd98:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
   2bd9c:	e03ffd15 	stw	zero,-12(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
   2bda0:	002aae80 	call	2aae8 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
   2bda4:	002adb00 	call	2adb0 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
   2bda8:	002af800 	call	2af80 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
   2bdac:	e03fffc5 	stb	zero,-1(fp)
   2bdb0:	00002c06 	br	2be64 <alt_tse_phy_init+0xe4>
        pmac_group = pmac_groups[i];
   2bdb4:	e0bfffc7 	ldb	r2,-1(fp)
   2bdb8:	100690ba 	slli	r3,r2,2
   2bdbc:	008202b4 	movhi	r2,2058
   2bdc0:	1885883a 	add	r2,r3,r2
   2bdc4:	108d6c17 	ldw	r2,13744(r2)
   2bdc8:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
   2bdcc:	e0bffe17 	ldw	r2,-8(fp)
   2bdd0:	10800117 	ldw	r2,4(r2)
   2bdd4:	10800217 	ldw	r2,8(r2)
   2bdd8:	10800303 	ldbu	r2,12(r2)
   2bddc:	10803fcc 	andi	r2,r2,255
   2bde0:	10000326 	beq	r2,zero,2bdf0 <alt_tse_phy_init+0x70>
            
            /* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
   2bde4:	e13ffe17 	ldw	r4,-8(fp)
   2bde8:	002b6180 	call	2b618 <alt_tse_mac_get_phy>
   2bdec:	00000706 	br	2be0c <alt_tse_phy_init+0x8c>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
   2bdf0:	e0bfffc7 	ldb	r2,-1(fp)
   2bdf4:	e0ffff87 	ldb	r3,-2(fp)
   2bdf8:	180d883a 	mov	r6,r3
   2bdfc:	100b883a 	mov	r5,r2
   2be00:	010000f4 	movhi	r4,3
   2be04:	2113df04 	addi	r4,r4,20348
   2be08:	0028a980 	call	28a98 <no_printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
   2be0c:	e03fff85 	stb	zero,-2(fp)
   2be10:	00000c06 	br	2be44 <alt_tse_phy_init+0xc4>
            pmac_info = pmac_group->pmac_info[j];
   2be14:	e0bfff87 	ldb	r2,-2(fp)
   2be18:	e0fffe17 	ldw	r3,-8(fp)
   2be1c:	10800044 	addi	r2,r2,1
   2be20:	100490ba 	slli	r2,r2,2
   2be24:	1885883a 	add	r2,r3,r2
   2be28:	10800017 	ldw	r2,0(r2)
   2be2c:	e0bffd15 	stw	r2,-12(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
   2be30:	e13ffd17 	ldw	r4,-12(fp)
   2be34:	002bc580 	call	2bc58 <alt_tse_phy_cfg_pcs>
        for(j = 0; j < pmac_group->channel; j++) {
   2be38:	e0bfff83 	ldbu	r2,-2(fp)
   2be3c:	10800044 	addi	r2,r2,1
   2be40:	e0bfff85 	stb	r2,-2(fp)
   2be44:	e0ffff87 	ldb	r3,-2(fp)
   2be48:	e0bffe17 	ldw	r2,-8(fp)
   2be4c:	10800003 	ldbu	r2,0(r2)
   2be50:	10803fcc 	andi	r2,r2,255
   2be54:	18bfef16 	blt	r3,r2,2be14 <__alt_mem_mcu_subsystem_ram_0+0x7800be14>
    for(i = 0; i < mac_group_count; i++) {
   2be58:	e0bfffc3 	ldbu	r2,-1(fp)
   2be5c:	10800044 	addi	r2,r2,1
   2be60:	e0bfffc5 	stb	r2,-1(fp)
   2be64:	e0ffffc7 	ldb	r3,-1(fp)
   2be68:	d0a7b643 	ldbu	r2,-24871(gp)
   2be6c:	10803fcc 	andi	r2,r2,255
   2be70:	18bfd016 	blt	r3,r2,2bdb4 <__alt_mem_mcu_subsystem_ram_0+0x7800bdb4>
        }
    }
                
    return SUCCESS;
   2be74:	0005883a 	mov	r2,zero
}
   2be78:	e037883a 	mov	sp,fp
   2be7c:	dfc00117 	ldw	ra,4(sp)
   2be80:	df000017 	ldw	fp,0(sp)
   2be84:	dec00204 	addi	sp,sp,8
   2be88:	f800283a 	ret

0002be8c <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
   2be8c:	defff704 	addi	sp,sp,-36
   2be90:	dfc00815 	stw	ra,32(sp)
   2be94:	df000715 	stw	fp,28(sp)
   2be98:	df000704 	addi	fp,sp,28
   2be9c:	e13ffb15 	stw	r4,-20(fp)
   2bea0:	e17ffa15 	stw	r5,-24(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2bea4:	e0bffb17 	ldw	r2,-20(fp)
   2bea8:	10800617 	ldw	r2,24(r2)
   2beac:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2beb0:	e0bffe17 	ldw	r2,-8(fp)
   2beb4:	10800317 	ldw	r2,12(r2)
   2beb8:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2bebc:	e13ffe17 	ldw	r4,-8(fp)
   2bec0:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2bec4:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2bec8:	e13ffd17 	ldw	r4,-12(fp)
   2becc:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2bed0:	e0bffc85 	stb	r2,-14(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2bed4:	e13ffb17 	ldw	r4,-20(fp)
   2bed8:	002a84c0 	call	2a84c <alt_tse_phy_rd_mdio_addr>
   2bedc:	e0bffc45 	stb	r2,-15(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2bee0:	e0bffb17 	ldw	r2,-20(fp)
   2bee4:	10800003 	ldbu	r2,0(r2)
   2bee8:	10803fcc 	andi	r2,r2,255
   2beec:	100b883a 	mov	r5,r2
   2bef0:	e13ffb17 	ldw	r4,-20(fp)
   2bef4:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
   2bef8:	01c00044 	movi	r7,1
   2befc:	018000c4 	movi	r6,3
   2bf00:	01400044 	movi	r5,1
   2bf04:	e13ffb17 	ldw	r4,-20(fp)
   2bf08:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2bf0c:	10000d1e 	bne	r2,zero,2bf44 <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
   2bf10:	e0bffc87 	ldb	r2,-14(fp)
   2bf14:	e0fffcc7 	ldb	r3,-13(fp)
   2bf18:	180d883a 	mov	r6,r3
   2bf1c:	100b883a 	mov	r5,r2
   2bf20:	010000f4 	movhi	r4,3
   2bf24:	2113f504 	addi	r4,r4,20436
   2bf28:	0028a980 	call	28a98 <no_printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2bf2c:	e0bffc43 	ldbu	r2,-15(fp)
   2bf30:	100b883a 	mov	r5,r2
   2bf34:	e13ffb17 	ldw	r4,-20(fp)
   2bf38:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
   2bf3c:	00bfff84 	movi	r2,-2
   2bf40:	00003e06 	br	2c03c <alt_tse_phy_restart_an+0x1b0>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
   2bf44:	00800044 	movi	r2,1
   2bf48:	d8800015 	stw	r2,0(sp)
   2bf4c:	01c00044 	movi	r7,1
   2bf50:	01800304 	movi	r6,12
   2bf54:	000b883a 	mov	r5,zero
   2bf58:	e13ffb17 	ldw	r4,-20(fp)
   2bf5c:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
   2bf60:	00800044 	movi	r2,1
   2bf64:	d8800015 	stw	r2,0(sp)
   2bf68:	01c00044 	movi	r7,1
   2bf6c:	01800244 	movi	r6,9
   2bf70:	000b883a 	mov	r5,zero
   2bf74:	e13ffb17 	ldw	r4,-20(fp)
   2bf78:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
   2bf7c:	e0bffc87 	ldb	r2,-14(fp)
   2bf80:	e0fffcc7 	ldb	r3,-13(fp)
   2bf84:	180d883a 	mov	r6,r3
   2bf88:	100b883a 	mov	r5,r2
   2bf8c:	010000f4 	movhi	r4,3
   2bf90:	21140504 	addi	r4,r4,20500
   2bf94:	0028a980 	call	28a98 <no_printf>
    
    alt_32 timeout = 0;
   2bf98:	e03fff15 	stw	zero,-4(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
   2bf9c:	00001506 	br	2bff4 <alt_tse_phy_restart_an+0x168>
        if(timeout++ > timeout_threshold) {
   2bfa0:	e0bfff17 	ldw	r2,-4(fp)
   2bfa4:	10c00044 	addi	r3,r2,1
   2bfa8:	e0ffff15 	stw	r3,-4(fp)
   2bfac:	1007883a 	mov	r3,r2
   2bfb0:	e0bffa17 	ldw	r2,-24(fp)
   2bfb4:	10c00d2e 	bgeu	r2,r3,2bfec <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
   2bfb8:	e0bffc87 	ldb	r2,-14(fp)
   2bfbc:	e0fffcc7 	ldb	r3,-13(fp)
   2bfc0:	180d883a 	mov	r6,r3
   2bfc4:	100b883a 	mov	r5,r2
   2bfc8:	010000f4 	movhi	r4,3
   2bfcc:	21141704 	addi	r4,r4,20572
   2bfd0:	0028a980 	call	28a98 <no_printf>
           
           /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2bfd4:	e0bffc43 	ldbu	r2,-15(fp)
   2bfd8:	100b883a 	mov	r5,r2
   2bfdc:	e13ffb17 	ldw	r4,-20(fp)
   2bfe0:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
           
           return TSE_PHY_AN_NOT_COMPLETE;
   2bfe4:	00bfffc4 	movi	r2,-1
   2bfe8:	00001406 	br	2c03c <alt_tse_phy_restart_an+0x1b0>
        }
        usleep(1000);
   2bfec:	0100fa04 	movi	r4,1000
   2bff0:	0025e400 	call	25e40 <usleep>
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
   2bff4:	01c00044 	movi	r7,1
   2bff8:	01800144 	movi	r6,5
   2bffc:	01400044 	movi	r5,1
   2c000:	e13ffb17 	ldw	r4,-20(fp)
   2c004:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c008:	103fe526 	beq	r2,zero,2bfa0 <__alt_mem_mcu_subsystem_ram_0+0x7800bfa0>
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
   2c00c:	e0bffc87 	ldb	r2,-14(fp)
   2c010:	e0fffcc7 	ldb	r3,-13(fp)
   2c014:	180d883a 	mov	r6,r3
   2c018:	100b883a 	mov	r5,r2
   2c01c:	010000f4 	movhi	r4,3
   2c020:	21142304 	addi	r4,r4,20620
   2c024:	0028a980 	call	28a98 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2c028:	e0bffc43 	ldbu	r2,-15(fp)
   2c02c:	100b883a 	mov	r5,r2
   2c030:	e13ffb17 	ldw	r4,-20(fp)
   2c034:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
   2c038:	0005883a 	mov	r2,zero
}
   2c03c:	e037883a 	mov	sp,fp
   2c040:	dfc00117 	ldw	ra,4(sp)
   2c044:	df000017 	ldw	fp,0(sp)
   2c048:	dec00204 	addi	sp,sp,8
   2c04c:	f800283a 	ret

0002c050 <alt_tse_phy_check_link>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold)
{
   2c050:	defff804 	addi	sp,sp,-32
   2c054:	dfc00715 	stw	ra,28(sp)
   2c058:	df000615 	stw	fp,24(sp)
   2c05c:	df000604 	addi	fp,sp,24
   2c060:	e13ffb15 	stw	r4,-20(fp)
   2c064:	e17ffa15 	stw	r5,-24(fp)
    alt_32 timeout=0;
   2c068:	e03fff15 	stw	zero,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2c06c:	e0bffb17 	ldw	r2,-20(fp)
   2c070:	10800617 	ldw	r2,24(r2)
   2c074:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2c078:	e0bffe17 	ldw	r2,-8(fp)
   2c07c:	10800317 	ldw	r2,12(r2)
   2c080:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2c084:	e13ffe17 	ldw	r4,-8(fp)
   2c088:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2c08c:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
   2c090:	e13ffd17 	ldw	r4,-12(fp)
   2c094:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2c098:	e0bffc85 	stb	r2,-14(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2c09c:	e13ffb17 	ldw	r4,-20(fp)
   2c0a0:	002a84c0 	call	2a84c <alt_tse_phy_rd_mdio_addr>
   2c0a4:	e0bffc45 	stb	r2,-15(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2c0a8:	e0bffb17 	ldw	r2,-20(fp)
   2c0ac:	10800003 	ldbu	r2,0(r2)
   2c0b0:	10803fcc 	andi	r2,r2,255
   2c0b4:	100b883a 	mov	r5,r2
   2c0b8:	e13ffb17 	ldw	r4,-20(fp)
   2c0bc:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
   2c0c0:	e0bffc87 	ldb	r2,-14(fp)
   2c0c4:	e0fffcc7 	ldb	r3,-13(fp)
   2c0c8:	180d883a 	mov	r6,r3
   2c0cc:	100b883a 	mov	r5,r2
   2c0d0:	010000f4 	movhi	r4,3
   2c0d4:	21142f04 	addi	r4,r4,20668
   2c0d8:	0028a980 	call	28a98 <no_printf>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
   2c0dc:	00002106 	br	2c164 <alt_tse_phy_check_link+0x114>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) )
    {                 
        if (timeout++ > timeout_threshold) 
   2c0e0:	e0bfff17 	ldw	r2,-4(fp)
   2c0e4:	10c00044 	addi	r3,r2,1
   2c0e8:	e0ffff15 	stw	r3,-4(fp)
   2c0ec:	1007883a 	mov	r3,r2
   2c0f0:	e0bffa17 	ldw	r2,-24(fp)
   2c0f4:	10c0192e 	bgeu	r2,r3,2c15c <alt_tse_phy_check_link+0x10c>
        {    
          tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
   2c0f8:	e0bffc87 	ldb	r2,-14(fp)
   2c0fc:	e0fffcc7 	ldb	r3,-13(fp)
   2c100:	180d883a 	mov	r6,r3
   2c104:	100b883a 	mov	r5,r2
   2c108:	010000f4 	movhi	r4,3
   2c10c:	21143a04 	addi	r4,r4,20712
   2c110:	0028a980 	call	28a98 <no_printf>
          /* restart Auto-Negotiation */
          /* if Auto-Negotiation still cannot complete, then go to next PHY */
          if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE)
   2c114:	e17ffa17 	ldw	r5,-24(fp)
   2c118:	e13ffb17 	ldw	r4,-20(fp)
   2c11c:	002be8c0 	call	2be8c <alt_tse_phy_restart_an>
   2c120:	10bfffd8 	cmpnei	r2,r2,-1
   2c124:	10000d1e 	bne	r2,zero,2c15c <alt_tse_phy_check_link+0x10c>
          {
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
   2c128:	e0bffc87 	ldb	r2,-14(fp)
   2c12c:	e0fffcc7 	ldb	r3,-13(fp)
   2c130:	180d883a 	mov	r6,r3
   2c134:	100b883a 	mov	r5,r2
   2c138:	010000f4 	movhi	r4,3
   2c13c:	21144e04 	addi	r4,r4,20792
   2c140:	0028a980 	call	28a98 <no_printf>
            
            /* Restore previous MDIO address */
            alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2c144:	e0bffc43 	ldbu	r2,-15(fp)
   2c148:	100b883a 	mov	r5,r2
   2c14c:	e13ffb17 	ldw	r4,-20(fp)
   2c150:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
            return TSE_PHY_AN_NOT_COMPLETE;
   2c154:	00bfffc4 	movi	r2,-1
   2c158:	00001a06 	br	2c1c4 <alt_tse_phy_check_link+0x174>
          } 
        }   
        usleep(1000);        
   2c15c:	0100fa04 	movi	r4,1000
   2c160:	0025e400 	call	25e40 <usleep>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
   2c164:	01c00044 	movi	r7,1
   2c168:	01800384 	movi	r6,14
   2c16c:	000b883a 	mov	r5,zero
   2c170:	e13ffb17 	ldw	r4,-20(fp)
   2c174:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c178:	103fd91e 	bne	r2,zero,2c0e0 <__alt_mem_mcu_subsystem_ram_0+0x7800c0e0>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) )
   2c17c:	01c00044 	movi	r7,1
   2c180:	01800144 	movi	r6,5
   2c184:	01400044 	movi	r5,1
   2c188:	e13ffb17 	ldw	r4,-20(fp)
   2c18c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
    while( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
   2c190:	103fd326 	beq	r2,zero,2c0e0 <__alt_mem_mcu_subsystem_ram_0+0x7800c0e0>
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
   2c194:	e0bffc87 	ldb	r2,-14(fp)
   2c198:	e0fffcc7 	ldb	r3,-13(fp)
   2c19c:	180d883a 	mov	r6,r3
   2c1a0:	100b883a 	mov	r5,r2
   2c1a4:	010000f4 	movhi	r4,3
   2c1a8:	21145b04 	addi	r4,r4,20844
   2c1ac:	0028a980 	call	28a98 <no_printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2c1b0:	e0bffc43 	ldbu	r2,-15(fp)
   2c1b4:	100b883a 	mov	r5,r2
   2c1b8:	e13ffb17 	ldw	r4,-20(fp)
   2c1bc:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
   2c1c0:	0005883a 	mov	r2,zero
}
   2c1c4:	e037883a 	mov	sp,fp
   2c1c8:	dfc00117 	ldw	ra,4(sp)
   2c1cc:	df000017 	ldw	fp,0(sp)
   2c1d0:	dec00204 	addi	sp,sp,8
   2c1d4:	f800283a 	ret

0002c1d8 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
   2c1d8:	defff904 	addi	sp,sp,-28
   2c1dc:	dfc00615 	stw	ra,24(sp)
   2c1e0:	df000515 	stw	fp,20(sp)
   2c1e4:	df000504 	addi	fp,sp,20
   2c1e8:	e13ffb15 	stw	r4,-20(fp)
    alt_32 return_value = TSE_PHY_AN_COMPLETE;
   2c1ec:	e03fff15 	stw	zero,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2c1f0:	e0bffb17 	ldw	r2,-20(fp)
   2c1f4:	10800617 	ldw	r2,24(r2)
   2c1f8:	e0bffe15 	stw	r2,-8(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2c1fc:	e0bffe17 	ldw	r2,-8(fp)
   2c200:	10800317 	ldw	r2,12(r2)
   2c204:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2c208:	e13ffe17 	ldw	r4,-8(fp)
   2c20c:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2c210:	e0bffcc5 	stb	r2,-13(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
   2c214:	e13ffd17 	ldw	r4,-12(fp)
   2c218:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2c21c:	e0bffc85 	stb	r2,-14(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2c220:	e13ffb17 	ldw	r4,-20(fp)
   2c224:	002a84c0 	call	2a84c <alt_tse_phy_rd_mdio_addr>
   2c228:	e0bffc45 	stb	r2,-15(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2c22c:	e0bffb17 	ldw	r2,-20(fp)
   2c230:	10800003 	ldbu	r2,0(r2)
   2c234:	10803fcc 	andi	r2,r2,255
   2c238:	100b883a 	mov	r5,r2
   2c23c:	e13ffb17 	ldw	r4,-20(fp)
   2c240:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
   2c244:	01c00044 	movi	r7,1
   2c248:	018000c4 	movi	r6,3
   2c24c:	01400044 	movi	r5,1
   2c250:	e13ffb17 	ldw	r4,-20(fp)
   2c254:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c258:	10000d1e 	bne	r2,zero,2c290 <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
   2c25c:	e0bffc87 	ldb	r2,-14(fp)
   2c260:	e0fffcc7 	ldb	r3,-13(fp)
   2c264:	180d883a 	mov	r6,r3
   2c268:	100b883a 	mov	r5,r2
   2c26c:	010000f4 	movhi	r4,3
   2c270:	2113f504 	addi	r4,r4,20436
   2c274:	0028a980 	call	28a98 <no_printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2c278:	e0bffc43 	ldbu	r2,-15(fp)
   2c27c:	100b883a 	mov	r5,r2
   2c280:	e13ffb17 	ldw	r4,-20(fp)
   2c284:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
   2c288:	00bfff84 	movi	r2,-2
   2c28c:	00013206 	br	2c758 <alt_tse_phy_get_cap+0x580>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   2c290:	01427104 	movi	r5,2500
   2c294:	e13ffb17 	ldw	r4,-20(fp)
   2c298:	002be8c0 	call	2be8c <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
   2c29c:	01c00044 	movi	r7,1
   2c2a0:	01800144 	movi	r6,5
   2c2a4:	01400044 	movi	r5,1
   2c2a8:	e13ffb17 	ldw	r4,-20(fp)
   2c2ac:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c2b0:	1000021e 	bne	r2,zero,2c2bc <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
   2c2b4:	00bfffc4 	movi	r2,-1
   2c2b8:	e0bfff15 	stw	r2,-4(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
   2c2bc:	01c00044 	movi	r7,1
   2c2c0:	018003c4 	movi	r6,15
   2c2c4:	014003c4 	movi	r5,15
   2c2c8:	e13ffb17 	ldw	r4,-20(fp)
   2c2cc:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c2d0:	1007883a 	mov	r3,r2
   2c2d4:	e0bffb17 	ldw	r2,-20(fp)
   2c2d8:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
   2c2dc:	01c00044 	movi	r7,1
   2c2e0:	01800384 	movi	r6,14
   2c2e4:	014003c4 	movi	r5,15
   2c2e8:	e13ffb17 	ldw	r4,-20(fp)
   2c2ec:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c2f0:	1007883a 	mov	r3,r2
   2c2f4:	e0bffb17 	ldw	r2,-20(fp)
   2c2f8:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
   2c2fc:	01c00044 	movi	r7,1
   2c300:	01800344 	movi	r6,13
   2c304:	014003c4 	movi	r5,15
   2c308:	e13ffb17 	ldw	r4,-20(fp)
   2c30c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c310:	1007883a 	mov	r3,r2
   2c314:	e0bffb17 	ldw	r2,-20(fp)
   2c318:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
   2c31c:	01c00044 	movi	r7,1
   2c320:	01800304 	movi	r6,12
   2c324:	014003c4 	movi	r5,15
   2c328:	e13ffb17 	ldw	r4,-20(fp)
   2c32c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c330:	1007883a 	mov	r3,r2
   2c334:	e0bffb17 	ldw	r2,-20(fp)
   2c338:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
   2c33c:	01c00044 	movi	r7,1
   2c340:	018003c4 	movi	r6,15
   2c344:	01400044 	movi	r5,1
   2c348:	e13ffb17 	ldw	r4,-20(fp)
   2c34c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c350:	1007883a 	mov	r3,r2
   2c354:	e0bffb17 	ldw	r2,-20(fp)
   2c358:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
   2c35c:	01c00044 	movi	r7,1
   2c360:	01800384 	movi	r6,14
   2c364:	01400044 	movi	r5,1
   2c368:	e13ffb17 	ldw	r4,-20(fp)
   2c36c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c370:	1007883a 	mov	r3,r2
   2c374:	e0bffb17 	ldw	r2,-20(fp)
   2c378:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
   2c37c:	01c00044 	movi	r7,1
   2c380:	01800344 	movi	r6,13
   2c384:	01400044 	movi	r5,1
   2c388:	e13ffb17 	ldw	r4,-20(fp)
   2c38c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c390:	1007883a 	mov	r3,r2
   2c394:	e0bffb17 	ldw	r2,-20(fp)
   2c398:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
   2c39c:	01c00044 	movi	r7,1
   2c3a0:	01800284 	movi	r6,10
   2c3a4:	01400044 	movi	r5,1
   2c3a8:	e13ffb17 	ldw	r4,-20(fp)
   2c3ac:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c3b0:	1007883a 	mov	r3,r2
   2c3b4:	e0bffb17 	ldw	r2,-20(fp)
   2c3b8:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
   2c3bc:	01c00044 	movi	r7,1
   2c3c0:	01800244 	movi	r6,9
   2c3c4:	01400044 	movi	r5,1
   2c3c8:	e13ffb17 	ldw	r4,-20(fp)
   2c3cc:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c3d0:	1007883a 	mov	r3,r2
   2c3d4:	e0bffb17 	ldw	r2,-20(fp)
   2c3d8:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
   2c3dc:	01c00044 	movi	r7,1
   2c3e0:	01800304 	movi	r6,12
   2c3e4:	01400044 	movi	r5,1
   2c3e8:	e13ffb17 	ldw	r4,-20(fp)
   2c3ec:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c3f0:	1007883a 	mov	r3,r2
   2c3f4:	e0bffb17 	ldw	r2,-20(fp)
   2c3f8:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
   2c3fc:	01c00044 	movi	r7,1
   2c400:	018002c4 	movi	r6,11
   2c404:	01400044 	movi	r5,1
   2c408:	e13ffb17 	ldw	r4,-20(fp)
   2c40c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c410:	1007883a 	mov	r3,r2
   2c414:	e0bffb17 	ldw	r2,-20(fp)
   2c418:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
   2c41c:	01c00044 	movi	r7,1
   2c420:	018002c4 	movi	r6,11
   2c424:	01400284 	movi	r5,10
   2c428:	e13ffb17 	ldw	r4,-20(fp)
   2c42c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c430:	1007883a 	mov	r3,r2
   2c434:	e0bffb17 	ldw	r2,-20(fp)
   2c438:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
   2c43c:	01c00044 	movi	r7,1
   2c440:	01800284 	movi	r6,10
   2c444:	01400284 	movi	r5,10
   2c448:	e13ffb17 	ldw	r4,-20(fp)
   2c44c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c450:	1007883a 	mov	r3,r2
   2c454:	e0bffb17 	ldw	r2,-20(fp)
   2c458:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
   2c45c:	01c00044 	movi	r7,1
   2c460:	01800244 	movi	r6,9
   2c464:	01400144 	movi	r5,5
   2c468:	e13ffb17 	ldw	r4,-20(fp)
   2c46c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c470:	1007883a 	mov	r3,r2
   2c474:	e0bffb17 	ldw	r2,-20(fp)
   2c478:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
   2c47c:	01c00044 	movi	r7,1
   2c480:	01800204 	movi	r6,8
   2c484:	01400144 	movi	r5,5
   2c488:	e13ffb17 	ldw	r4,-20(fp)
   2c48c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c490:	1007883a 	mov	r3,r2
   2c494:	e0bffb17 	ldw	r2,-20(fp)
   2c498:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
   2c49c:	01c00044 	movi	r7,1
   2c4a0:	018001c4 	movi	r6,7
   2c4a4:	01400144 	movi	r5,5
   2c4a8:	e13ffb17 	ldw	r4,-20(fp)
   2c4ac:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c4b0:	1007883a 	mov	r3,r2
   2c4b4:	e0bffb17 	ldw	r2,-20(fp)
   2c4b8:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
   2c4bc:	01c00044 	movi	r7,1
   2c4c0:	01800184 	movi	r6,6
   2c4c4:	01400144 	movi	r5,5
   2c4c8:	e13ffb17 	ldw	r4,-20(fp)
   2c4cc:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c4d0:	1007883a 	mov	r3,r2
   2c4d4:	e0bffb17 	ldw	r2,-20(fp)
   2c4d8:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
   2c4dc:	01c00044 	movi	r7,1
   2c4e0:	01800144 	movi	r6,5
   2c4e4:	01400144 	movi	r5,5
   2c4e8:	e13ffb17 	ldw	r4,-20(fp)
   2c4ec:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c4f0:	1007883a 	mov	r3,r2
   2c4f4:	e0bffb17 	ldw	r2,-20(fp)
   2c4f8:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
   2c4fc:	e0bffc87 	ldb	r2,-14(fp)
   2c500:	e0fffcc7 	ldb	r3,-13(fp)
   2c504:	180d883a 	mov	r6,r3
   2c508:	100b883a 	mov	r5,r2
   2c50c:	010000f4 	movhi	r4,3
   2c510:	21146604 	addi	r4,r4,20888
   2c514:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
   2c518:	e0bffb17 	ldw	r2,-20(fp)
   2c51c:	10800043 	ldbu	r2,1(r2)
   2c520:	10803fcc 	andi	r2,r2,255
   2c524:	100b883a 	mov	r5,r2
   2c528:	010000f4 	movhi	r4,3
   2c52c:	21147104 	addi	r4,r4,20932
   2c530:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
   2c534:	e0bffb17 	ldw	r2,-20(fp)
   2c538:	10800083 	ldbu	r2,2(r2)
   2c53c:	10803fcc 	andi	r2,r2,255
   2c540:	100b883a 	mov	r5,r2
   2c544:	010000f4 	movhi	r4,3
   2c548:	21147b04 	addi	r4,r4,20972
   2c54c:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
   2c550:	e0bffb17 	ldw	r2,-20(fp)
   2c554:	108000c3 	ldbu	r2,3(r2)
   2c558:	10803fcc 	andi	r2,r2,255
   2c55c:	100b883a 	mov	r5,r2
   2c560:	010000f4 	movhi	r4,3
   2c564:	21148504 	addi	r4,r4,21012
   2c568:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
   2c56c:	e0bffb17 	ldw	r2,-20(fp)
   2c570:	10800103 	ldbu	r2,4(r2)
   2c574:	10803fcc 	andi	r2,r2,255
   2c578:	100b883a 	mov	r5,r2
   2c57c:	010000f4 	movhi	r4,3
   2c580:	21148f04 	addi	r4,r4,21052
   2c584:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
   2c588:	e0bffb17 	ldw	r2,-20(fp)
   2c58c:	10800143 	ldbu	r2,5(r2)
   2c590:	10803fcc 	andi	r2,r2,255
   2c594:	100b883a 	mov	r5,r2
   2c598:	010000f4 	movhi	r4,3
   2c59c:	21149904 	addi	r4,r4,21092
   2c5a0:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
   2c5a4:	e0bffb17 	ldw	r2,-20(fp)
   2c5a8:	10800183 	ldbu	r2,6(r2)
   2c5ac:	10803fcc 	andi	r2,r2,255
   2c5b0:	100b883a 	mov	r5,r2
   2c5b4:	010000f4 	movhi	r4,3
   2c5b8:	2114a304 	addi	r4,r4,21132
   2c5bc:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
   2c5c0:	e0bffb17 	ldw	r2,-20(fp)
   2c5c4:	108001c3 	ldbu	r2,7(r2)
   2c5c8:	10803fcc 	andi	r2,r2,255
   2c5cc:	100b883a 	mov	r5,r2
   2c5d0:	010000f4 	movhi	r4,3
   2c5d4:	2114ad04 	addi	r4,r4,21172
   2c5d8:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
   2c5dc:	e0bffb17 	ldw	r2,-20(fp)
   2c5e0:	10800203 	ldbu	r2,8(r2)
   2c5e4:	10803fcc 	andi	r2,r2,255
   2c5e8:	100b883a 	mov	r5,r2
   2c5ec:	010000f4 	movhi	r4,3
   2c5f0:	2114b704 	addi	r4,r4,21212
   2c5f4:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
   2c5f8:	e0bffb17 	ldw	r2,-20(fp)
   2c5fc:	10800243 	ldbu	r2,9(r2)
   2c600:	10803fcc 	andi	r2,r2,255
   2c604:	100b883a 	mov	r5,r2
   2c608:	010000f4 	movhi	r4,3
   2c60c:	2114c104 	addi	r4,r4,21252
   2c610:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
   2c614:	e0bffb17 	ldw	r2,-20(fp)
   2c618:	10800283 	ldbu	r2,10(r2)
   2c61c:	10803fcc 	andi	r2,r2,255
   2c620:	100b883a 	mov	r5,r2
   2c624:	010000f4 	movhi	r4,3
   2c628:	2114cb04 	addi	r4,r4,21292
   2c62c:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
   2c630:	e0bffb17 	ldw	r2,-20(fp)
   2c634:	108002c3 	ldbu	r2,11(r2)
   2c638:	10803fcc 	andi	r2,r2,255
   2c63c:	100b883a 	mov	r5,r2
   2c640:	010000f4 	movhi	r4,3
   2c644:	2114d504 	addi	r4,r4,21332
   2c648:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "\n");
   2c64c:	010000f4 	movhi	r4,3
   2c650:	21133b04 	addi	r4,r4,19692
   2c654:	0028a980 	call	28a98 <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
   2c658:	e0bffc87 	ldb	r2,-14(fp)
   2c65c:	e0fffcc7 	ldb	r3,-13(fp)
   2c660:	180d883a 	mov	r6,r3
   2c664:	100b883a 	mov	r5,r2
   2c668:	010000f4 	movhi	r4,3
   2c66c:	2114df04 	addi	r4,r4,21372
   2c670:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
   2c674:	e0bffb17 	ldw	r2,-20(fp)
   2c678:	10800303 	ldbu	r2,12(r2)
   2c67c:	10803fcc 	andi	r2,r2,255
   2c680:	100b883a 	mov	r5,r2
   2c684:	010000f4 	movhi	r4,3
   2c688:	21148504 	addi	r4,r4,21012
   2c68c:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
   2c690:	e0bffb17 	ldw	r2,-20(fp)
   2c694:	10800343 	ldbu	r2,13(r2)
   2c698:	10803fcc 	andi	r2,r2,255
   2c69c:	100b883a 	mov	r5,r2
   2c6a0:	010000f4 	movhi	r4,3
   2c6a4:	21148f04 	addi	r4,r4,21052
   2c6a8:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
   2c6ac:	e0bffb17 	ldw	r2,-20(fp)
   2c6b0:	10800383 	ldbu	r2,14(r2)
   2c6b4:	10803fcc 	andi	r2,r2,255
   2c6b8:	100b883a 	mov	r5,r2
   2c6bc:	010000f4 	movhi	r4,3
   2c6c0:	21149904 	addi	r4,r4,21092
   2c6c4:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
   2c6c8:	e0bffb17 	ldw	r2,-20(fp)
   2c6cc:	108003c3 	ldbu	r2,15(r2)
   2c6d0:	10803fcc 	andi	r2,r2,255
   2c6d4:	100b883a 	mov	r5,r2
   2c6d8:	010000f4 	movhi	r4,3
   2c6dc:	2114ec04 	addi	r4,r4,21424
   2c6e0:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
   2c6e4:	e0bffb17 	ldw	r2,-20(fp)
   2c6e8:	10800403 	ldbu	r2,16(r2)
   2c6ec:	10803fcc 	andi	r2,r2,255
   2c6f0:	100b883a 	mov	r5,r2
   2c6f4:	010000f4 	movhi	r4,3
   2c6f8:	2114f604 	addi	r4,r4,21464
   2c6fc:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
   2c700:	e0bffb17 	ldw	r2,-20(fp)
   2c704:	10800443 	ldbu	r2,17(r2)
   2c708:	10803fcc 	andi	r2,r2,255
   2c70c:	100b883a 	mov	r5,r2
   2c710:	010000f4 	movhi	r4,3
   2c714:	21150004 	addi	r4,r4,21504
   2c718:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
   2c71c:	e0bffb17 	ldw	r2,-20(fp)
   2c720:	10800483 	ldbu	r2,18(r2)
   2c724:	10803fcc 	andi	r2,r2,255
   2c728:	100b883a 	mov	r5,r2
   2c72c:	010000f4 	movhi	r4,3
   2c730:	21150a04 	addi	r4,r4,21544
   2c734:	0028a980 	call	28a98 <no_printf>
    tse_dprintf(6, "\n");
   2c738:	010000f4 	movhi	r4,3
   2c73c:	21133b04 	addi	r4,r4,19692
   2c740:	0028a980 	call	28a98 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2c744:	e0bffc43 	ldbu	r2,-15(fp)
   2c748:	100b883a 	mov	r5,r2
   2c74c:	e13ffb17 	ldw	r4,-20(fp)
   2c750:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
   2c754:	e0bfff17 	ldw	r2,-4(fp)
    
}
   2c758:	e037883a 	mov	sp,fp
   2c75c:	dfc00117 	ldw	ra,4(sp)
   2c760:	df000017 	ldw	fp,0(sp)
   2c764:	dec00204 	addi	sp,sp,8
   2c768:	f800283a 	ret

0002c76c <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
   2c76c:	defff804 	addi	sp,sp,-32
   2c770:	dfc00715 	stw	ra,28(sp)
   2c774:	df000615 	stw	fp,24(sp)
   2c778:	df000604 	addi	fp,sp,24
   2c77c:	e13ffc15 	stw	r4,-16(fp)
   2c780:	2805883a 	mov	r2,r5
   2c784:	e0bffb05 	stb	r2,-20(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2c788:	e0bffc17 	ldw	r2,-16(fp)
   2c78c:	10800617 	ldw	r2,24(r2)
   2c790:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2c794:	e0bfff17 	ldw	r2,-4(fp)
   2c798:	10800317 	ldw	r2,12(r2)
   2c79c:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2c7a0:	e13fff17 	ldw	r4,-4(fp)
   2c7a4:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2c7a8:	e0bffdc5 	stb	r2,-9(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2c7ac:	e13ffe17 	ldw	r4,-8(fp)
   2c7b0:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2c7b4:	e0bffd85 	stb	r2,-10(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2c7b8:	e13ffc17 	ldw	r4,-16(fp)
   2c7bc:	002a84c0 	call	2a84c <alt_tse_phy_rd_mdio_addr>
   2c7c0:	e0bffd45 	stb	r2,-11(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2c7c4:	e0bffc17 	ldw	r2,-16(fp)
   2c7c8:	10800003 	ldbu	r2,0(r2)
   2c7cc:	10803fcc 	andi	r2,r2,255
   2c7d0:	100b883a 	mov	r5,r2
   2c7d4:	e13ffc17 	ldw	r4,-16(fp)
   2c7d8:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
   2c7dc:	e0bffb03 	ldbu	r2,-20(fp)
   2c7e0:	10002d26 	beq	r2,zero,2c898 <alt_tse_phy_set_adv_1000+0x12c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
   2c7e4:	01c00044 	movi	r7,1
   2c7e8:	01800344 	movi	r6,13
   2c7ec:	014003c4 	movi	r5,15
   2c7f0:	e13ffc17 	ldw	r4,-16(fp)
   2c7f4:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c7f8:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
   2c7fc:	e0bffd03 	ldbu	r2,-12(fp)
   2c800:	d8800015 	stw	r2,0(sp)
   2c804:	01c00044 	movi	r7,1
   2c808:	01800244 	movi	r6,9
   2c80c:	01400244 	movi	r5,9
   2c810:	e13ffc17 	ldw	r4,-16(fp)
   2c814:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2c818:	e0bffd87 	ldb	r2,-10(fp)
   2c81c:	e0fffdc7 	ldb	r3,-9(fp)
   2c820:	e13ffd03 	ldbu	r4,-12(fp)
   2c824:	200f883a 	mov	r7,r4
   2c828:	180d883a 	mov	r6,r3
   2c82c:	100b883a 	mov	r5,r2
   2c830:	010000f4 	movhi	r4,3
   2c834:	21151404 	addi	r4,r4,21584
   2c838:	0028a980 	call	28a98 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
   2c83c:	01c00044 	movi	r7,1
   2c840:	01800304 	movi	r6,12
   2c844:	014003c4 	movi	r5,15
   2c848:	e13ffc17 	ldw	r4,-16(fp)
   2c84c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c850:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
   2c854:	e0bffd03 	ldbu	r2,-12(fp)
   2c858:	d8800015 	stw	r2,0(sp)
   2c85c:	01c00044 	movi	r7,1
   2c860:	01800204 	movi	r6,8
   2c864:	01400244 	movi	r5,9
   2c868:	e13ffc17 	ldw	r4,-16(fp)
   2c86c:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2c870:	e0bffd87 	ldb	r2,-10(fp)
   2c874:	e0fffdc7 	ldb	r3,-9(fp)
   2c878:	e13ffd03 	ldbu	r4,-12(fp)
   2c87c:	200f883a 	mov	r7,r4
   2c880:	180d883a 	mov	r6,r3
   2c884:	100b883a 	mov	r5,r2
   2c888:	010000f4 	movhi	r4,3
   2c88c:	21152704 	addi	r4,r4,21660
   2c890:	0028a980 	call	28a98 <no_printf>
   2c894:	00001c06 	br	2c908 <alt_tse_phy_set_adv_1000+0x19c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
   2c898:	d8000015 	stw	zero,0(sp)
   2c89c:	01c00044 	movi	r7,1
   2c8a0:	01800244 	movi	r6,9
   2c8a4:	01400244 	movi	r5,9
   2c8a8:	e13ffc17 	ldw	r4,-16(fp)
   2c8ac:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2c8b0:	e0bffd87 	ldb	r2,-10(fp)
   2c8b4:	e0fffdc7 	ldb	r3,-9(fp)
   2c8b8:	000f883a 	mov	r7,zero
   2c8bc:	180d883a 	mov	r6,r3
   2c8c0:	100b883a 	mov	r5,r2
   2c8c4:	010000f4 	movhi	r4,3
   2c8c8:	21151404 	addi	r4,r4,21584
   2c8cc:	0028a980 	call	28a98 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
   2c8d0:	d8000015 	stw	zero,0(sp)
   2c8d4:	01c00044 	movi	r7,1
   2c8d8:	01800204 	movi	r6,8
   2c8dc:	01400244 	movi	r5,9
   2c8e0:	e13ffc17 	ldw	r4,-16(fp)
   2c8e4:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2c8e8:	e0bffd87 	ldb	r2,-10(fp)
   2c8ec:	e0fffdc7 	ldb	r3,-9(fp)
   2c8f0:	000f883a 	mov	r7,zero
   2c8f4:	180d883a 	mov	r6,r3
   2c8f8:	100b883a 	mov	r5,r2
   2c8fc:	010000f4 	movhi	r4,3
   2c900:	21153a04 	addi	r4,r4,21736
   2c904:	0028a980 	call	28a98 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
   2c908:	e0bffd43 	ldbu	r2,-11(fp)
   2c90c:	100b883a 	mov	r5,r2
   2c910:	e13ffc17 	ldw	r4,-16(fp)
   2c914:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
   2c918:	0005883a 	mov	r2,zero
}
   2c91c:	e037883a 	mov	sp,fp
   2c920:	dfc00117 	ldw	ra,4(sp)
   2c924:	df000017 	ldw	fp,0(sp)
   2c928:	dec00204 	addi	sp,sp,8
   2c92c:	f800283a 	ret

0002c930 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
   2c930:	defff804 	addi	sp,sp,-32
   2c934:	dfc00715 	stw	ra,28(sp)
   2c938:	df000615 	stw	fp,24(sp)
   2c93c:	df000604 	addi	fp,sp,24
   2c940:	e13ffc15 	stw	r4,-16(fp)
   2c944:	2805883a 	mov	r2,r5
   2c948:	e0bffb05 	stb	r2,-20(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2c94c:	e0bffc17 	ldw	r2,-16(fp)
   2c950:	10800617 	ldw	r2,24(r2)
   2c954:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2c958:	e0bfff17 	ldw	r2,-4(fp)
   2c95c:	10800317 	ldw	r2,12(r2)
   2c960:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2c964:	e13fff17 	ldw	r4,-4(fp)
   2c968:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2c96c:	e0bffdc5 	stb	r2,-9(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2c970:	e13ffe17 	ldw	r4,-8(fp)
   2c974:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2c978:	e0bffd85 	stb	r2,-10(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2c97c:	e13ffc17 	ldw	r4,-16(fp)
   2c980:	002a84c0 	call	2a84c <alt_tse_phy_rd_mdio_addr>
   2c984:	e0bffd45 	stb	r2,-11(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2c988:	e0bffc17 	ldw	r2,-16(fp)
   2c98c:	10800003 	ldbu	r2,0(r2)
   2c990:	10803fcc 	andi	r2,r2,255
   2c994:	100b883a 	mov	r5,r2
   2c998:	e13ffc17 	ldw	r4,-16(fp)
   2c99c:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
   2c9a0:	e0bffb03 	ldbu	r2,-20(fp)
   2c9a4:	10004326 	beq	r2,zero,2cab4 <alt_tse_phy_set_adv_100+0x184>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
   2c9a8:	01c00044 	movi	r7,1
   2c9ac:	018003c4 	movi	r6,15
   2c9b0:	01400044 	movi	r5,1
   2c9b4:	e13ffc17 	ldw	r4,-16(fp)
   2c9b8:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2c9bc:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
   2c9c0:	e0bffd03 	ldbu	r2,-12(fp)
   2c9c4:	d8800015 	stw	r2,0(sp)
   2c9c8:	01c00044 	movi	r7,1
   2c9cc:	01800244 	movi	r6,9
   2c9d0:	01400104 	movi	r5,4
   2c9d4:	e13ffc17 	ldw	r4,-16(fp)
   2c9d8:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
   2c9dc:	e0bffd87 	ldb	r2,-10(fp)
   2c9e0:	e0fffdc7 	ldb	r3,-9(fp)
   2c9e4:	e13ffd03 	ldbu	r4,-12(fp)
   2c9e8:	200f883a 	mov	r7,r4
   2c9ec:	180d883a 	mov	r6,r3
   2c9f0:	100b883a 	mov	r5,r2
   2c9f4:	010000f4 	movhi	r4,3
   2c9f8:	21154c04 	addi	r4,r4,21808
   2c9fc:	0028a980 	call	28a98 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
   2ca00:	01c00044 	movi	r7,1
   2ca04:	01800384 	movi	r6,14
   2ca08:	01400044 	movi	r5,1
   2ca0c:	e13ffc17 	ldw	r4,-16(fp)
   2ca10:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2ca14:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
   2ca18:	e0bffd03 	ldbu	r2,-12(fp)
   2ca1c:	d8800015 	stw	r2,0(sp)
   2ca20:	01c00044 	movi	r7,1
   2ca24:	01800204 	movi	r6,8
   2ca28:	01400104 	movi	r5,4
   2ca2c:	e13ffc17 	ldw	r4,-16(fp)
   2ca30:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2ca34:	e0bffd87 	ldb	r2,-10(fp)
   2ca38:	e0fffdc7 	ldb	r3,-9(fp)
   2ca3c:	e13ffd03 	ldbu	r4,-12(fp)
   2ca40:	200f883a 	mov	r7,r4
   2ca44:	180d883a 	mov	r6,r3
   2ca48:	100b883a 	mov	r5,r2
   2ca4c:	010000f4 	movhi	r4,3
   2ca50:	21155c04 	addi	r4,r4,21872
   2ca54:	0028a980 	call	28a98 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
   2ca58:	01c00044 	movi	r7,1
   2ca5c:	01800344 	movi	r6,13
   2ca60:	01400044 	movi	r5,1
   2ca64:	e13ffc17 	ldw	r4,-16(fp)
   2ca68:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2ca6c:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
   2ca70:	e0bffd03 	ldbu	r2,-12(fp)
   2ca74:	d8800015 	stw	r2,0(sp)
   2ca78:	01c00044 	movi	r7,1
   2ca7c:	018001c4 	movi	r6,7
   2ca80:	01400104 	movi	r5,4
   2ca84:	e13ffc17 	ldw	r4,-16(fp)
   2ca88:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2ca8c:	e0bffd87 	ldb	r2,-10(fp)
   2ca90:	e0fffdc7 	ldb	r3,-9(fp)
   2ca94:	e13ffd03 	ldbu	r4,-12(fp)
   2ca98:	200f883a 	mov	r7,r4
   2ca9c:	180d883a 	mov	r6,r3
   2caa0:	100b883a 	mov	r5,r2
   2caa4:	010000f4 	movhi	r4,3
   2caa8:	21156f04 	addi	r4,r4,21948
   2caac:	0028a980 	call	28a98 <no_printf>
   2cab0:	00002a06 	br	2cb5c <alt_tse_phy_set_adv_100+0x22c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
   2cab4:	d8000015 	stw	zero,0(sp)
   2cab8:	01c00044 	movi	r7,1
   2cabc:	01800244 	movi	r6,9
   2cac0:	01400104 	movi	r5,4
   2cac4:	e13ffc17 	ldw	r4,-16(fp)
   2cac8:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
   2cacc:	e0bffd87 	ldb	r2,-10(fp)
   2cad0:	e0fffdc7 	ldb	r3,-9(fp)
   2cad4:	000f883a 	mov	r7,zero
   2cad8:	180d883a 	mov	r6,r3
   2cadc:	100b883a 	mov	r5,r2
   2cae0:	010000f4 	movhi	r4,3
   2cae4:	21154c04 	addi	r4,r4,21808
   2cae8:	0028a980 	call	28a98 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
   2caec:	d8000015 	stw	zero,0(sp)
   2caf0:	01c00044 	movi	r7,1
   2caf4:	01800204 	movi	r6,8
   2caf8:	01400104 	movi	r5,4
   2cafc:	e13ffc17 	ldw	r4,-16(fp)
   2cb00:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2cb04:	e0bffd87 	ldb	r2,-10(fp)
   2cb08:	e0fffdc7 	ldb	r3,-9(fp)
   2cb0c:	000f883a 	mov	r7,zero
   2cb10:	180d883a 	mov	r6,r3
   2cb14:	100b883a 	mov	r5,r2
   2cb18:	010000f4 	movhi	r4,3
   2cb1c:	21155c04 	addi	r4,r4,21872
   2cb20:	0028a980 	call	28a98 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
   2cb24:	d8000015 	stw	zero,0(sp)
   2cb28:	01c00044 	movi	r7,1
   2cb2c:	018001c4 	movi	r6,7
   2cb30:	01400104 	movi	r5,4
   2cb34:	e13ffc17 	ldw	r4,-16(fp)
   2cb38:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2cb3c:	e0bffd87 	ldb	r2,-10(fp)
   2cb40:	e0fffdc7 	ldb	r3,-9(fp)
   2cb44:	000f883a 	mov	r7,zero
   2cb48:	180d883a 	mov	r6,r3
   2cb4c:	100b883a 	mov	r5,r2
   2cb50:	010000f4 	movhi	r4,3
   2cb54:	21156f04 	addi	r4,r4,21948
   2cb58:	0028a980 	call	28a98 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
   2cb5c:	e0bffd43 	ldbu	r2,-11(fp)
   2cb60:	100b883a 	mov	r5,r2
   2cb64:	e13ffc17 	ldw	r4,-16(fp)
   2cb68:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
   2cb6c:	0005883a 	mov	r2,zero
}
   2cb70:	e037883a 	mov	sp,fp
   2cb74:	dfc00117 	ldw	ra,4(sp)
   2cb78:	df000017 	ldw	fp,0(sp)
   2cb7c:	dec00204 	addi	sp,sp,8
   2cb80:	f800283a 	ret

0002cb84 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
   2cb84:	defff504 	addi	sp,sp,-44
   2cb88:	dfc00a15 	stw	ra,40(sp)
   2cb8c:	df000915 	stw	fp,36(sp)
   2cb90:	df000904 	addi	fp,sp,36
   2cb94:	e13ff915 	stw	r4,-28(fp)
   2cb98:	2805883a 	mov	r2,r5
   2cb9c:	e0bff805 	stb	r2,-32(fp)
    alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2cba0:	e0bff917 	ldw	r2,-28(fp)
   2cba4:	10800617 	ldw	r2,24(r2)
   2cba8:	e0bfff15 	stw	r2,-4(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2cbac:	e0bfff17 	ldw	r2,-4(fp)
   2cbb0:	10800317 	ldw	r2,12(r2)
   2cbb4:	e0bffe15 	stw	r2,-8(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2cbb8:	e13fff17 	ldw	r4,-4(fp)
   2cbbc:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2cbc0:	e0bffd15 	stw	r2,-12(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2cbc4:	e13ffe17 	ldw	r4,-8(fp)
   2cbc8:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2cbcc:	e0bffc15 	stw	r2,-16(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2cbd0:	e13ff917 	ldw	r4,-28(fp)
   2cbd4:	002a84c0 	call	2a84c <alt_tse_phy_rd_mdio_addr>
   2cbd8:	e0bffb15 	stw	r2,-20(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2cbdc:	e0bff917 	ldw	r2,-28(fp)
   2cbe0:	10800003 	ldbu	r2,0(r2)
   2cbe4:	10803fcc 	andi	r2,r2,255
   2cbe8:	100b883a 	mov	r5,r2
   2cbec:	e13ff917 	ldw	r4,-28(fp)
   2cbf0:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
   2cbf4:	e0bff803 	ldbu	r2,-32(fp)
   2cbf8:	10002926 	beq	r2,zero,2cca0 <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
   2cbfc:	01c00044 	movi	r7,1
   2cc00:	01800304 	movi	r6,12
   2cc04:	01400044 	movi	r5,1
   2cc08:	e13ff917 	ldw	r4,-28(fp)
   2cc0c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2cc10:	e0bffac5 	stb	r2,-21(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
   2cc14:	e0bffac3 	ldbu	r2,-21(fp)
   2cc18:	d8800015 	stw	r2,0(sp)
   2cc1c:	01c00044 	movi	r7,1
   2cc20:	01800184 	movi	r6,6
   2cc24:	01400104 	movi	r5,4
   2cc28:	e13ff917 	ldw	r4,-28(fp)
   2cc2c:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2cc30:	e0bffac3 	ldbu	r2,-21(fp)
   2cc34:	100f883a 	mov	r7,r2
   2cc38:	e1bffd17 	ldw	r6,-12(fp)
   2cc3c:	e17ffc17 	ldw	r5,-16(fp)
   2cc40:	010000f4 	movhi	r4,3
   2cc44:	21158204 	addi	r4,r4,22024
   2cc48:	0028a980 	call	28a98 <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
   2cc4c:	01c00044 	movi	r7,1
   2cc50:	018002c4 	movi	r6,11
   2cc54:	01400044 	movi	r5,1
   2cc58:	e13ff917 	ldw	r4,-28(fp)
   2cc5c:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2cc60:	e0bffac5 	stb	r2,-21(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
   2cc64:	e0bffac3 	ldbu	r2,-21(fp)
   2cc68:	d8800015 	stw	r2,0(sp)
   2cc6c:	01c00044 	movi	r7,1
   2cc70:	01800144 	movi	r6,5
   2cc74:	01400104 	movi	r5,4
   2cc78:	e13ff917 	ldw	r4,-28(fp)
   2cc7c:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2cc80:	e0bffac3 	ldbu	r2,-21(fp)
   2cc84:	100f883a 	mov	r7,r2
   2cc88:	e1bffd17 	ldw	r6,-12(fp)
   2cc8c:	e17ffc17 	ldw	r5,-16(fp)
   2cc90:	010000f4 	movhi	r4,3
   2cc94:	21159504 	addi	r4,r4,22100
   2cc98:	0028a980 	call	28a98 <no_printf>
   2cc9c:	00001806 	br	2cd00 <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
   2cca0:	d8000015 	stw	zero,0(sp)
   2cca4:	01c00044 	movi	r7,1
   2cca8:	01800184 	movi	r6,6
   2ccac:	01400104 	movi	r5,4
   2ccb0:	e13ff917 	ldw	r4,-28(fp)
   2ccb4:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2ccb8:	000f883a 	mov	r7,zero
   2ccbc:	e1bffd17 	ldw	r6,-12(fp)
   2ccc0:	e17ffc17 	ldw	r5,-16(fp)
   2ccc4:	010000f4 	movhi	r4,3
   2ccc8:	21158204 	addi	r4,r4,22024
   2cccc:	0028a980 	call	28a98 <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
   2ccd0:	d8000015 	stw	zero,0(sp)
   2ccd4:	01c00044 	movi	r7,1
   2ccd8:	01800144 	movi	r6,5
   2ccdc:	01400104 	movi	r5,4
   2cce0:	e13ff917 	ldw	r4,-28(fp)
   2cce4:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2cce8:	000f883a 	mov	r7,zero
   2ccec:	e1bffd17 	ldw	r6,-12(fp)
   2ccf0:	e17ffc17 	ldw	r5,-16(fp)
   2ccf4:	010000f4 	movhi	r4,3
   2ccf8:	21159504 	addi	r4,r4,22100
   2ccfc:	0028a980 	call	28a98 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2cd00:	e0bffb17 	ldw	r2,-20(fp)
   2cd04:	10803fcc 	andi	r2,r2,255
   2cd08:	100b883a 	mov	r5,r2
   2cd0c:	e13ff917 	ldw	r4,-28(fp)
   2cd10:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
   2cd14:	0005883a 	mov	r2,zero
}
   2cd18:	e037883a 	mov	sp,fp
   2cd1c:	dfc00117 	ldw	ra,4(sp)
   2cd20:	df000017 	ldw	fp,0(sp)
   2cd24:	dec00204 	addi	sp,sp,8
   2cd28:	f800283a 	ret

0002cd2c <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
   2cd2c:	defff604 	addi	sp,sp,-40
   2cd30:	dfc00915 	stw	ra,36(sp)
   2cd34:	df000815 	stw	fp,32(sp)
   2cd38:	df000804 	addi	fp,sp,32
   2cd3c:	e13ff815 	stw	r4,-32(fp)
    
    alt_32 i;
    alt_u8 common_1000 = 1;
   2cd40:	00800044 	movi	r2,1
   2cd44:	e0bffec5 	stb	r2,-5(fp)
    alt_u8 common_100 = 1;
   2cd48:	00800044 	movi	r2,1
   2cd4c:	e0bffe85 	stb	r2,-6(fp)
    alt_u8 common_10 = 1;
   2cd50:	00800044 	movi	r2,1
   2cd54:	e0bffe45 	stb	r2,-7(fp)
    
    alt_32 common_speed;
    
    alt_u8 none_an_complete = 1;
   2cd58:	00800044 	movi	r2,1
   2cd5c:	e0bffcc5 	stb	r2,-13(fp)
    
    alt_tse_mac_info *pmac_info = 0;
   2cd60:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_phy_info *pphy = 0;
   2cd64:	e03ffa15 	stw	zero,-24(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2cd68:	e13ff817 	ldw	r4,-32(fp)
   2cd6c:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2cd70:	e0bff9c5 	stb	r2,-25(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
   2cd74:	e03fff15 	stw	zero,-4(fp)
   2cd78:	00001b06 	br	2cde8 <alt_tse_phy_get_common_speed+0xbc>
        pmac_info = pmac_group->pmac_info[i];
   2cd7c:	e0fff817 	ldw	r3,-32(fp)
   2cd80:	e0bfff17 	ldw	r2,-4(fp)
   2cd84:	10800044 	addi	r2,r2,1
   2cd88:	100490ba 	slli	r2,r2,2
   2cd8c:	1885883a 	add	r2,r3,r2
   2cd90:	10800017 	ldw	r2,0(r2)
   2cd94:	e0bffb15 	stw	r2,-20(fp)
        pphy = pmac_info->pphy_info;
   2cd98:	e0bffb17 	ldw	r2,-20(fp)
   2cd9c:	10800117 	ldw	r2,4(r2)
   2cda0:	e0bffa15 	stw	r2,-24(fp)
        
        /* run only if PHY connected */
        if(pphy) {
   2cda4:	e0bffa17 	ldw	r2,-24(fp)
   2cda8:	10000926 	beq	r2,zero,2cdd0 <alt_tse_phy_get_common_speed+0xa4>
            alt_tse_phy_set_adv_1000(pphy, 1);
   2cdac:	01400044 	movi	r5,1
   2cdb0:	e13ffa17 	ldw	r4,-24(fp)
   2cdb4:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
   2cdb8:	01400044 	movi	r5,1
   2cdbc:	e13ffa17 	ldw	r4,-24(fp)
   2cdc0:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2cdc4:	01400044 	movi	r5,1
   2cdc8:	e13ffa17 	ldw	r4,-24(fp)
   2cdcc:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
   2cdd0:	010000f4 	movhi	r4,3
   2cdd4:	21133b04 	addi	r4,r4,19692
   2cdd8:	0028a980 	call	28a98 <no_printf>
    for(i = 0; i < pmac_group->channel; i++) {
   2cddc:	e0bfff17 	ldw	r2,-4(fp)
   2cde0:	10800044 	addi	r2,r2,1
   2cde4:	e0bfff15 	stw	r2,-4(fp)
   2cde8:	e0bff817 	ldw	r2,-32(fp)
   2cdec:	10800003 	ldbu	r2,0(r2)
   2cdf0:	10803fcc 	andi	r2,r2,255
   2cdf4:	e0ffff17 	ldw	r3,-4(fp)
   2cdf8:	18bfe016 	blt	r3,r2,2cd7c <__alt_mem_mcu_subsystem_ram_0+0x7800cd7c>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
   2cdfc:	e03fff15 	stw	zero,-4(fp)
   2ce00:	00005506 	br	2cf58 <alt_tse_phy_get_common_speed+0x22c>

        pmac_info = pmac_group->pmac_info[i];
   2ce04:	e0fff817 	ldw	r3,-32(fp)
   2ce08:	e0bfff17 	ldw	r2,-4(fp)
   2ce0c:	10800044 	addi	r2,r2,1
   2ce10:	100490ba 	slli	r2,r2,2
   2ce14:	1885883a 	add	r2,r3,r2
   2ce18:	10800017 	ldw	r2,0(r2)
   2ce1c:	e0bffb15 	stw	r2,-20(fp)
        pphy = pmac_info->pphy_info;
   2ce20:	e0bffb17 	ldw	r2,-20(fp)
   2ce24:	10800117 	ldw	r2,4(r2)
   2ce28:	e0bffa15 	stw	r2,-24(fp)
        
        /* if no PHY connected */
        if(!pphy) {
   2ce2c:	e0bffa17 	ldw	r2,-24(fp)
   2ce30:	10004326 	beq	r2,zero,2cf40 <alt_tse_phy_get_common_speed+0x214>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
   2ce34:	e13ffa17 	ldw	r4,-24(fp)
   2ce38:	002c1d80 	call	2c1d8 <alt_tse_phy_get_cap>
   2ce3c:	1000421e 	bne	r2,zero,2cf48 <alt_tse_phy_get_common_speed+0x21c>
            continue;
        }
        
        none_an_complete = 0;
   2ce40:	e03ffcc5 	stb	zero,-13(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
   2ce44:	e0bffb17 	ldw	r2,-20(fp)
   2ce48:	10800003 	ldbu	r2,0(r2)
   2ce4c:	10803fcc 	andi	r2,r2,255
   2ce50:	10800058 	cmpnei	r2,r2,1
   2ce54:	1000021e 	bne	r2,zero,2ce60 <alt_tse_phy_get_common_speed+0x134>
            common_1000 = 0;
   2ce58:	e03ffec5 	stb	zero,-5(fp)
   2ce5c:	00000706 	br	2ce7c <alt_tse_phy_get_common_speed+0x150>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
   2ce60:	e0bffb17 	ldw	r2,-20(fp)
   2ce64:	10800003 	ldbu	r2,0(r2)
   2ce68:	10803fcc 	andi	r2,r2,255
   2ce6c:	10800098 	cmpnei	r2,r2,2
   2ce70:	1000021e 	bne	r2,zero,2ce7c <alt_tse_phy_get_common_speed+0x150>
            common_100 = 0;
   2ce74:	e03ffe85 	stb	zero,-6(fp)
            common_10 = 0;            
   2ce78:	e03ffe45 	stb	zero,-7(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
   2ce7c:	e0bffa17 	ldw	r2,-24(fp)
   2ce80:	10c000c3 	ldbu	r3,3(r2)
   2ce84:	e0bffa17 	ldw	r2,-24(fp)
   2ce88:	10800303 	ldbu	r2,12(r2)
   2ce8c:	1884703a 	and	r2,r3,r2
   2ce90:	1007883a 	mov	r3,r2
   2ce94:	e0bffec3 	ldbu	r2,-5(fp)
   2ce98:	10c4703a 	and	r2,r2,r3
   2ce9c:	e0bffec5 	stb	r2,-5(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
   2cea0:	e0bffa17 	ldw	r2,-24(fp)
   2cea4:	10c00183 	ldbu	r3,6(r2)
   2cea8:	e0bffa17 	ldw	r2,-24(fp)
   2ceac:	108003c3 	ldbu	r2,15(r2)
   2ceb0:	1884703a 	and	r2,r3,r2
   2ceb4:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
   2ceb8:	e0bffa17 	ldw	r2,-24(fp)
   2cebc:	10c001c3 	ldbu	r3,7(r2)
   2cec0:	e0bffa17 	ldw	r2,-24(fp)
   2cec4:	10800403 	ldbu	r2,16(r2)
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
   2cec8:	1884703a 	and	r2,r3,r2
   2cecc:	2084b03a 	or	r2,r4,r2
   2ced0:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
   2ced4:	e0bffa17 	ldw	r2,-24(fp)
   2ced8:	10c00143 	ldbu	r3,5(r2)
   2cedc:	e0bffa17 	ldw	r2,-24(fp)
   2cee0:	10800383 	ldbu	r2,14(r2)
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
   2cee4:	1884703a 	and	r2,r3,r2
   2cee8:	2084b03a 	or	r2,r4,r2
   2ceec:	1007883a 	mov	r3,r2
   2cef0:	e0bffe83 	ldbu	r2,-6(fp)
   2cef4:	10c4703a 	and	r2,r2,r3
   2cef8:	e0bffe85 	stb	r2,-6(fp)
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
   2cefc:	e0bffa17 	ldw	r2,-24(fp)
   2cf00:	10c00283 	ldbu	r3,10(r2)
   2cf04:	e0bffa17 	ldw	r2,-24(fp)
   2cf08:	10800443 	ldbu	r2,17(r2)
   2cf0c:	1884703a 	and	r2,r3,r2
   2cf10:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
   2cf14:	e0bffa17 	ldw	r2,-24(fp)
   2cf18:	10c002c3 	ldbu	r3,11(r2)
   2cf1c:	e0bffa17 	ldw	r2,-24(fp)
   2cf20:	10800483 	ldbu	r2,18(r2)
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
   2cf24:	1884703a 	and	r2,r3,r2
   2cf28:	2084b03a 	or	r2,r4,r2
   2cf2c:	1007883a 	mov	r3,r2
   2cf30:	e0bffe43 	ldbu	r2,-7(fp)
   2cf34:	10c4703a 	and	r2,r2,r3
   2cf38:	e0bffe45 	stb	r2,-7(fp)
   2cf3c:	00000306 	br	2cf4c <alt_tse_phy_get_common_speed+0x220>
            continue;
   2cf40:	0001883a 	nop
   2cf44:	00000106 	br	2cf4c <alt_tse_phy_get_common_speed+0x220>
            continue;
   2cf48:	0001883a 	nop
    for(i = 0; i < pmac_group->channel; i++) {
   2cf4c:	e0bfff17 	ldw	r2,-4(fp)
   2cf50:	10800044 	addi	r2,r2,1
   2cf54:	e0bfff15 	stw	r2,-4(fp)
   2cf58:	e0bff817 	ldw	r2,-32(fp)
   2cf5c:	10800003 	ldbu	r2,0(r2)
   2cf60:	10803fcc 	andi	r2,r2,255
   2cf64:	e0ffff17 	ldw	r3,-4(fp)
   2cf68:	18bfa616 	blt	r3,r2,2ce04 <__alt_mem_mcu_subsystem_ram_0+0x7800ce04>

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
   2cf6c:	e0bffcc3 	ldbu	r2,-13(fp)
   2cf70:	10800058 	cmpnei	r2,r2,1
   2cf74:	1000081e 	bne	r2,zero,2cf98 <alt_tse_phy_get_common_speed+0x26c>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
   2cf78:	00bfffc4 	movi	r2,-1
   2cf7c:	e0bffd15 	stw	r2,-12(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
   2cf80:	e0bff9c7 	ldb	r2,-25(fp)
   2cf84:	100b883a 	mov	r5,r2
   2cf88:	010000f4 	movhi	r4,3
   2cf8c:	2115a804 	addi	r4,r4,22176
   2cf90:	0028a980 	call	28a98 <no_printf>
   2cf94:	00002706 	br	2d034 <alt_tse_phy_get_common_speed+0x308>
    }
    else if(common_1000) {
   2cf98:	e0bffec3 	ldbu	r2,-5(fp)
   2cf9c:	10000926 	beq	r2,zero,2cfc4 <alt_tse_phy_get_common_speed+0x298>
        common_speed = TSE_PHY_SPEED_1000;
   2cfa0:	00800084 	movi	r2,2
   2cfa4:	e0bffd15 	stw	r2,-12(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
   2cfa8:	e0bff9c7 	ldb	r2,-25(fp)
   2cfac:	0180fa04 	movi	r6,1000
   2cfb0:	100b883a 	mov	r5,r2
   2cfb4:	010000f4 	movhi	r4,3
   2cfb8:	2115ba04 	addi	r4,r4,22248
   2cfbc:	0028a980 	call	28a98 <no_printf>
   2cfc0:	00001c06 	br	2d034 <alt_tse_phy_get_common_speed+0x308>
    }
    else if(common_100) {
   2cfc4:	e0bffe83 	ldbu	r2,-6(fp)
   2cfc8:	10000926 	beq	r2,zero,2cff0 <alt_tse_phy_get_common_speed+0x2c4>
        common_speed = TSE_PHY_SPEED_100;
   2cfcc:	00800044 	movi	r2,1
   2cfd0:	e0bffd15 	stw	r2,-12(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
   2cfd4:	e0bff9c7 	ldb	r2,-25(fp)
   2cfd8:	01801904 	movi	r6,100
   2cfdc:	100b883a 	mov	r5,r2
   2cfe0:	010000f4 	movhi	r4,3
   2cfe4:	2115ba04 	addi	r4,r4,22248
   2cfe8:	0028a980 	call	28a98 <no_printf>
   2cfec:	00001106 	br	2d034 <alt_tse_phy_get_common_speed+0x308>
    }
    else if(common_10) {
   2cff0:	e0bffe43 	ldbu	r2,-7(fp)
   2cff4:	10000826 	beq	r2,zero,2d018 <alt_tse_phy_get_common_speed+0x2ec>
        common_speed = TSE_PHY_SPEED_10;
   2cff8:	e03ffd15 	stw	zero,-12(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
   2cffc:	e0bff9c7 	ldb	r2,-25(fp)
   2d000:	01800284 	movi	r6,10
   2d004:	100b883a 	mov	r5,r2
   2d008:	010000f4 	movhi	r4,3
   2d00c:	2115ba04 	addi	r4,r4,22248
   2d010:	0028a980 	call	28a98 <no_printf>
   2d014:	00000706 	br	2d034 <alt_tse_phy_get_common_speed+0x308>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
   2d018:	00bfffc4 	movi	r2,-1
   2d01c:	e0bffd15 	stw	r2,-12(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
   2d020:	e0bff9c7 	ldb	r2,-25(fp)
   2d024:	100b883a 	mov	r5,r2
   2d028:	010000f4 	movhi	r4,3
   2d02c:	2115c704 	addi	r4,r4,22300
   2d030:	0028a980 	call	28a98 <no_printf>

    return common_speed;
   2d034:	e0bffd17 	ldw	r2,-12(fp)
}
   2d038:	e037883a 	mov	sp,fp
   2d03c:	dfc00117 	ldw	ra,4(sp)
   2d040:	df000017 	ldw	fp,0(sp)
   2d044:	dec00204 	addi	sp,sp,8
   2d048:	f800283a 	ret

0002d04c <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
   2d04c:	defff004 	addi	sp,sp,-64
   2d050:	dfc00f15 	stw	ra,60(sp)
   2d054:	df000e15 	stw	fp,56(sp)
   2d058:	dc400d15 	stw	r17,52(sp)
   2d05c:	dc000c15 	stw	r16,48(sp)
   2d060:	df000e04 	addi	fp,sp,56
   2d064:	e13ff415 	stw	r4,-48(fp)
   2d068:	e17ff315 	stw	r5,-52(fp)
    alt_u8 speed;
    alt_u8 duplex;
    
    alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
   2d06c:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
   2d070:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_system_info *psys = 0;
   2d074:	e03ff915 	stw	zero,-28(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
   2d078:	e03ff8c5 	stb	zero,-29(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2d07c:	e13ff417 	ldw	r4,-48(fp)
   2d080:	0029ab40 	call	29ab4 <alt_tse_get_mac_group_index>
   2d084:	e0bff885 	stb	r2,-30(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2d088:	e0bff417 	ldw	r2,-48(fp)
   2d08c:	10800117 	ldw	r2,4(r2)
   2d090:	10800217 	ldw	r2,8(r2)
   2d094:	10800017 	ldw	r2,0(r2)
   2d098:	e0bff715 	stw	r2,-36(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
   2d09c:	e0bff717 	ldw	r2,-36(fp)
   2d0a0:	10801004 	addi	r2,r2,64
   2d0a4:	10800037 	ldwio	r2,0(r2)
   2d0a8:	e0bff615 	stw	r2,-40(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
   2d0ac:	e0bff317 	ldw	r2,-52(fp)
   2d0b0:	10000316 	blt	r2,zero,2d0c0 <alt_tse_phy_set_common_speed+0x74>
   2d0b4:	e0bff317 	ldw	r2,-52(fp)
   2d0b8:	108000d0 	cmplti	r2,r2,3
   2d0bc:	10000c1e 	bne	r2,zero,2d0f0 <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
   2d0c0:	e0bff887 	ldb	r2,-30(fp)
   2d0c4:	e1bff317 	ldw	r6,-52(fp)
   2d0c8:	100b883a 	mov	r5,r2
   2d0cc:	010000f4 	movhi	r4,3
   2d0d0:	2115d404 	addi	r4,r4,22352
   2d0d4:	0028a980 	call	28a98 <no_printf>
        /* Restore previous MDIO address */
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2d0d8:	e0bff717 	ldw	r2,-36(fp)
   2d0dc:	10801004 	addi	r2,r2,64
   2d0e0:	e0fff617 	ldw	r3,-40(fp)
   2d0e4:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
   2d0e8:	00bfffc4 	movi	r2,-1
   2d0ec:	0000fc06 	br	2d4e0 <alt_tse_phy_set_common_speed+0x494>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
   2d0f0:	e03ffd15 	stw	zero,-12(fp)
   2d0f4:	0000da06 	br	2d460 <alt_tse_phy_set_common_speed+0x414>
        pmac_info = pmac_group->pmac_info[i];
   2d0f8:	e0fff417 	ldw	r3,-48(fp)
   2d0fc:	e0bffd17 	ldw	r2,-12(fp)
   2d100:	10800044 	addi	r2,r2,1
   2d104:	100490ba 	slli	r2,r2,2
   2d108:	1885883a 	add	r2,r3,r2
   2d10c:	10800017 	ldw	r2,0(r2)
   2d110:	e0bffa15 	stw	r2,-24(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2d114:	e13ffa17 	ldw	r4,-24(fp)
   2d118:	0029b200 	call	29b20 <alt_tse_get_mac_info_index>
   2d11c:	e0bff8c5 	stb	r2,-29(fp)

        pphy = pmac_info->pphy_info;
   2d120:	e0bffa17 	ldw	r2,-24(fp)
   2d124:	10800117 	ldw	r2,4(r2)
   2d128:	e0bffb15 	stw	r2,-20(fp)
        
        /* if no PHY connected */
        if(!pphy) {
   2d12c:	e0bffb17 	ldw	r2,-20(fp)
   2d130:	1000c726 	beq	r2,zero,2d450 <alt_tse_phy_set_common_speed+0x404>
            continue;
        }
        
        psys = pmac_info->psys_info; 
   2d134:	e0bffa17 	ldw	r2,-24(fp)
   2d138:	10800217 	ldw	r2,8(r2)
   2d13c:	e0bff915 	stw	r2,-28(fp)
            
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2d140:	e0bffb17 	ldw	r2,-20(fp)
   2d144:	10800003 	ldbu	r2,0(r2)
   2d148:	10803fcc 	andi	r2,r2,255
   2d14c:	100b883a 	mov	r5,r2
   2d150:	e13ffb17 	ldw	r4,-20(fp)
   2d154:	002a8940 	call	2a894 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2d158:	e0bffb17 	ldw	r2,-20(fp)
   2d15c:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
   2d160:	10803fcc 	andi	r2,r2,255
   2d164:	10000c1e 	bne	r2,zero,2d198 <alt_tse_phy_set_common_speed+0x14c>
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2d168:	e0bffb17 	ldw	r2,-20(fp)
   2d16c:	10800103 	ldbu	r2,4(r2)
   2d170:	10803fcc 	andi	r2,r2,255
   2d174:	1000081e 	bne	r2,zero,2d198 <alt_tse_phy_set_common_speed+0x14c>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
   2d178:	e0bffb17 	ldw	r2,-20(fp)
   2d17c:	10800043 	ldbu	r2,1(r2)
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2d180:	10803fcc 	andi	r2,r2,255
   2d184:	1000041e 	bne	r2,zero,2d198 <alt_tse_phy_set_common_speed+0x14c>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
   2d188:	e0bffb17 	ldw	r2,-20(fp)
   2d18c:	10800083 	ldbu	r2,2(r2)
   2d190:	10803fcc 	andi	r2,r2,255
   2d194:	10000226 	beq	r2,zero,2d1a0 <alt_tse_phy_set_common_speed+0x154>
   2d198:	00800044 	movi	r2,1
   2d19c:	00000106 	br	2d1a4 <alt_tse_phy_set_common_speed+0x158>
   2d1a0:	0005883a 	mov	r2,zero
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2d1a4:	e0bff5c5 	stb	r2,-41(fp)
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
   2d1a8:	e0bff5c3 	ldbu	r2,-41(fp)
   2d1ac:	1000101e 	bne	r2,zero,2d1f0 <alt_tse_phy_set_common_speed+0x1a4>
   2d1b0:	e0bff317 	ldw	r2,-52(fp)
   2d1b4:	10800098 	cmpnei	r2,r2,2
   2d1b8:	10000d1e 	bne	r2,zero,2d1f0 <alt_tse_phy_set_common_speed+0x1a4>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
   2d1bc:	e0bff887 	ldb	r2,-30(fp)
   2d1c0:	e0fff8c7 	ldb	r3,-29(fp)
   2d1c4:	180d883a 	mov	r6,r3
   2d1c8:	100b883a 	mov	r5,r2
   2d1cc:	010000f4 	movhi	r4,3
   2d1d0:	2115e804 	addi	r4,r4,22432
   2d1d4:	0028a980 	call	28a98 <no_printf>
            /* Restore previous MDIO address */
            IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2d1d8:	e0bff717 	ldw	r2,-36(fp)
   2d1dc:	10801004 	addi	r2,r2,64
   2d1e0:	e0fff617 	ldw	r3,-40(fp)
   2d1e4:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
   2d1e8:	00bfffc4 	movi	r2,-1
   2d1ec:	0000bc06 	br	2d4e0 <alt_tse_phy_set_common_speed+0x494>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
   2d1f0:	01c00044 	movi	r7,1
   2d1f4:	018000c4 	movi	r6,3
   2d1f8:	01400044 	movi	r5,1
   2d1fc:	e13ffb17 	ldw	r4,-20(fp)
   2d200:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2d204:	1000141e 	bne	r2,zero,2d258 <alt_tse_phy_set_common_speed+0x20c>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
   2d208:	e0bff5c3 	ldbu	r2,-41(fp)
   2d20c:	10000926 	beq	r2,zero,2d234 <alt_tse_phy_set_common_speed+0x1e8>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
   2d210:	e0bff317 	ldw	r2,-52(fp)
   2d214:	1005d07a 	srai	r2,r2,1
   2d218:	10bfffcc 	andi	r2,r2,65535
   2d21c:	d8800015 	stw	r2,0(sp)
   2d220:	01c00044 	movi	r7,1
   2d224:	01800184 	movi	r6,6
   2d228:	000b883a 	mov	r5,zero
   2d22c:	e13ffb17 	ldw	r4,-20(fp)
   2d230:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
   2d234:	e0bff317 	ldw	r2,-52(fp)
   2d238:	10bfffcc 	andi	r2,r2,65535
   2d23c:	d8800015 	stw	r2,0(sp)
   2d240:	01c00044 	movi	r7,1
   2d244:	01800344 	movi	r6,13
   2d248:	000b883a 	mov	r5,zero
   2d24c:	e13ffb17 	ldw	r4,-20(fp)
   2d250:	002a8ec0 	call	2a8ec <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
   2d254:	00007f06 	br	2d454 <alt_tse_phy_set_common_speed+0x408>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
   2d258:	e0bff317 	ldw	r2,-52(fp)
   2d25c:	10800098 	cmpnei	r2,r2,2
   2d260:	10000a1e 	bne	r2,zero,2d28c <alt_tse_phy_set_common_speed+0x240>
            alt_tse_phy_set_adv_1000(pphy, 1);
   2d264:	01400044 	movi	r5,1
   2d268:	e13ffb17 	ldw	r4,-20(fp)
   2d26c:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
   2d270:	01400044 	movi	r5,1
   2d274:	e13ffb17 	ldw	r4,-20(fp)
   2d278:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2d27c:	01400044 	movi	r5,1
   2d280:	e13ffb17 	ldw	r4,-20(fp)
   2d284:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
   2d288:	00002206 	br	2d314 <alt_tse_phy_set_common_speed+0x2c8>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
   2d28c:	e0bff317 	ldw	r2,-52(fp)
   2d290:	10800058 	cmpnei	r2,r2,1
   2d294:	10000a1e 	bne	r2,zero,2d2c0 <alt_tse_phy_set_common_speed+0x274>
            alt_tse_phy_set_adv_1000(pphy, 0);
   2d298:	000b883a 	mov	r5,zero
   2d29c:	e13ffb17 	ldw	r4,-20(fp)
   2d2a0:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
   2d2a4:	01400044 	movi	r5,1
   2d2a8:	e13ffb17 	ldw	r4,-20(fp)
   2d2ac:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2d2b0:	01400044 	movi	r5,1
   2d2b4:	e13ffb17 	ldw	r4,-20(fp)
   2d2b8:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
   2d2bc:	00001506 	br	2d314 <alt_tse_phy_set_common_speed+0x2c8>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
   2d2c0:	e0bff317 	ldw	r2,-52(fp)
   2d2c4:	10000a1e 	bne	r2,zero,2d2f0 <alt_tse_phy_set_common_speed+0x2a4>
            alt_tse_phy_set_adv_1000(pphy, 0);
   2d2c8:	000b883a 	mov	r5,zero
   2d2cc:	e13ffb17 	ldw	r4,-20(fp)
   2d2d0:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
   2d2d4:	000b883a 	mov	r5,zero
   2d2d8:	e13ffb17 	ldw	r4,-20(fp)
   2d2dc:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2d2e0:	01400044 	movi	r5,1
   2d2e4:	e13ffb17 	ldw	r4,-20(fp)
   2d2e8:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
   2d2ec:	00000906 	br	2d314 <alt_tse_phy_set_common_speed+0x2c8>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
   2d2f0:	000b883a 	mov	r5,zero
   2d2f4:	e13ffb17 	ldw	r4,-20(fp)
   2d2f8:	002c76c0 	call	2c76c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
   2d2fc:	000b883a 	mov	r5,zero
   2d300:	e13ffb17 	ldw	r4,-20(fp)
   2d304:	002c9300 	call	2c930 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
   2d308:	000b883a 	mov	r5,zero
   2d30c:	e13ffb17 	ldw	r4,-20(fp)
   2d310:	002cb840 	call	2cb84 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
   2d314:	01c00044 	movi	r7,1
   2d318:	01800144 	movi	r6,5
   2d31c:	01400044 	movi	r5,1
   2d320:	e13ffb17 	ldw	r4,-20(fp)
   2d324:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2d328:	10800058 	cmpnei	r2,r2,1
   2d32c:	10003a1e 	bne	r2,zero,2d418 <alt_tse_phy_set_common_speed+0x3cc>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
   2d330:	e0bff5c3 	ldbu	r2,-41(fp)
   2d334:	10000f26 	beq	r2,zero,2d374 <alt_tse_phy_set_common_speed+0x328>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
   2d338:	e0bffb17 	ldw	r2,-20(fp)
   2d33c:	10800517 	ldw	r2,20(r2)
   2d340:	10801583 	ldbu	r2,86(r2)
   2d344:	10c03fcc 	andi	r3,r2,255
   2d348:	e0bffb17 	ldw	r2,-20(fp)
   2d34c:	10800517 	ldw	r2,20(r2)
   2d350:	108015c3 	ldbu	r2,87(r2)
   2d354:	10803fcc 	andi	r2,r2,255
   2d358:	01c00084 	movi	r7,2
   2d35c:	100d883a 	mov	r6,r2
   2d360:	180b883a 	mov	r5,r3
   2d364:	e13ffb17 	ldw	r4,-20(fp)
   2d368:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2d36c:	e0bffcc5 	stb	r2,-13(fp)
   2d370:	00000e06 	br	2d3ac <alt_tse_phy_set_common_speed+0x360>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
   2d374:	e0bffb17 	ldw	r2,-20(fp)
   2d378:	10800517 	ldw	r2,20(r2)
   2d37c:	10801583 	ldbu	r2,86(r2)
   2d380:	10c03fcc 	andi	r3,r2,255
   2d384:	e0bffb17 	ldw	r2,-20(fp)
   2d388:	10800517 	ldw	r2,20(r2)
   2d38c:	108015c3 	ldbu	r2,87(r2)
   2d390:	10803fcc 	andi	r2,r2,255
   2d394:	01c00044 	movi	r7,1
   2d398:	100d883a 	mov	r6,r2
   2d39c:	180b883a 	mov	r5,r3
   2d3a0:	e13ffb17 	ldw	r4,-20(fp)
   2d3a4:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2d3a8:	e0bffcc5 	stb	r2,-13(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
   2d3ac:	e0bffcc3 	ldbu	r2,-13(fp)
   2d3b0:	e0fff317 	ldw	r3,-52(fp)
   2d3b4:	18800326 	beq	r3,r2,2d3c4 <alt_tse_phy_set_common_speed+0x378>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   2d3b8:	01427104 	movi	r5,2500
   2d3bc:	e13ffb17 	ldw	r4,-20(fp)
   2d3c0:	002be8c0 	call	2be8c <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
   2d3c4:	e0bffb17 	ldw	r2,-20(fp)
   2d3c8:	10800517 	ldw	r2,20(r2)
   2d3cc:	10801583 	ldbu	r2,86(r2)
   2d3d0:	10c03fcc 	andi	r3,r2,255
   2d3d4:	e0bffb17 	ldw	r2,-20(fp)
   2d3d8:	10800517 	ldw	r2,20(r2)
   2d3dc:	10801603 	ldbu	r2,88(r2)
   2d3e0:	10803fcc 	andi	r2,r2,255
   2d3e4:	01c00044 	movi	r7,1
   2d3e8:	100d883a 	mov	r6,r2
   2d3ec:	180b883a 	mov	r5,r3
   2d3f0:	e13ffb17 	ldw	r4,-20(fp)
   2d3f4:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2d3f8:	e0bff585 	stb	r2,-42(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
   2d3fc:	e0bff917 	ldw	r2,-28(fp)
   2d400:	10800017 	ldw	r2,0(r2)
   2d404:	1007883a 	mov	r3,r2
   2d408:	e0bff583 	ldbu	r2,-42(fp)
   2d40c:	100b883a 	mov	r5,r2
   2d410:	1809883a 	mov	r4,r3
   2d414:	0029d480 	call	29d48 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
   2d418:	e43ff887 	ldb	r16,-30(fp)
   2d41c:	e47ff8c7 	ldb	r17,-29(fp)
   2d420:	01c00404 	movi	r7,16
   2d424:	000d883a 	mov	r6,zero
   2d428:	01400044 	movi	r5,1
   2d42c:	e13ffb17 	ldw	r4,-20(fp)
   2d430:	002aa180 	call	2aa18 <alt_tse_phy_rd_mdio_reg>
   2d434:	100f883a 	mov	r7,r2
   2d438:	880d883a 	mov	r6,r17
   2d43c:	800b883a 	mov	r5,r16
   2d440:	010000f4 	movhi	r4,3
   2d444:	2115ff04 	addi	r4,r4,22524
   2d448:	0028a980 	call	28a98 <no_printf>
   2d44c:	00000106 	br	2d454 <alt_tse_phy_set_common_speed+0x408>
            continue;
   2d450:	0001883a 	nop
    for(i = 0; i < pmac_group->channel; i++) {
   2d454:	e0bffd17 	ldw	r2,-12(fp)
   2d458:	10800044 	addi	r2,r2,1
   2d45c:	e0bffd15 	stw	r2,-12(fp)
   2d460:	e0bff417 	ldw	r2,-48(fp)
   2d464:	10800003 	ldbu	r2,0(r2)
   2d468:	10803fcc 	andi	r2,r2,255
   2d46c:	e0fffd17 	ldw	r3,-12(fp)
   2d470:	18bf2116 	blt	r3,r2,2d0f8 <__alt_mem_mcu_subsystem_ram_0+0x7800d0f8>
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
   2d474:	e0fff887 	ldb	r3,-30(fp)
   2d478:	e0bff317 	ldw	r2,-52(fp)
   2d47c:	108000a0 	cmpeqi	r2,r2,2
   2d480:	1000071e 	bne	r2,zero,2d4a0 <alt_tse_phy_set_common_speed+0x454>
   2d484:	e0bff317 	ldw	r2,-52(fp)
   2d488:	10800058 	cmpnei	r2,r2,1
   2d48c:	1000021e 	bne	r2,zero,2d498 <alt_tse_phy_set_common_speed+0x44c>
   2d490:	00801904 	movi	r2,100
   2d494:	00000306 	br	2d4a4 <alt_tse_phy_set_common_speed+0x458>
   2d498:	00800284 	movi	r2,10
   2d49c:	00000106 	br	2d4a4 <alt_tse_phy_set_common_speed+0x458>
   2d4a0:	0080fa04 	movi	r2,1000
   2d4a4:	100d883a 	mov	r6,r2
   2d4a8:	180b883a 	mov	r5,r3
   2d4ac:	010000f4 	movhi	r4,3
   2d4b0:	21160b04 	addi	r4,r4,22572
   2d4b4:	0028a980 	call	28a98 <no_printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
   2d4b8:	e0bff317 	ldw	r2,-52(fp)
   2d4bc:	10803fcc 	andi	r2,r2,255
   2d4c0:	100b883a 	mov	r5,r2
   2d4c4:	e13ff717 	ldw	r4,-36(fp)
   2d4c8:	0029c680 	call	29c68 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2d4cc:	e0bff717 	ldw	r2,-36(fp)
   2d4d0:	10801004 	addi	r2,r2,64
   2d4d4:	e0fff617 	ldw	r3,-40(fp)
   2d4d8:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
   2d4dc:	e0bff317 	ldw	r2,-52(fp)
}
   2d4e0:	e6fffe04 	addi	sp,fp,-8
   2d4e4:	dfc00317 	ldw	ra,12(sp)
   2d4e8:	df000217 	ldw	fp,8(sp)
   2d4ec:	dc400117 	ldw	r17,4(sp)
   2d4f0:	dc000017 	ldw	r16,0(sp)
   2d4f4:	dec00404 	addi	sp,sp,16
   2d4f8:	f800283a 	ret

0002d4fc <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
   2d4fc:	defffc04 	addi	sp,sp,-16
   2d500:	dfc00315 	stw	ra,12(sp)
   2d504:	df000215 	stw	fp,8(sp)
   2d508:	df000204 	addi	fp,sp,8
   2d50c:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
   2d510:	e0bffe17 	ldw	r2,-8(fp)
   2d514:	1080a104 	addi	r2,r2,644
   2d518:	10800037 	ldwio	r2,0(r2)
   2d51c:	1080080c 	andi	r2,r2,32
   2d520:	1000161e 	bne	r2,zero,2d57c <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
   2d524:	010000f4 	movhi	r4,3
   2d528:	21161c04 	addi	r4,r4,22640
   2d52c:	0028a980 	call	28a98 <no_printf>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
   2d530:	e0bffe17 	ldw	r2,-8(fp)
   2d534:	1080a004 	addi	r2,r2,640
   2d538:	10801004 	addi	r2,r2,64
   2d53c:	00c01e04 	movi	r3,120
   2d540:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
   2d544:	010000f4 	movhi	r4,3
   2d548:	21162504 	addi	r4,r4,22676
   2d54c:	0028a980 	call	28a98 <no_printf>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2d550:	e0bffe17 	ldw	r2,-8(fp)
   2d554:	1080a004 	addi	r2,r2,640
   2d558:	10800037 	ldwio	r2,0(r2)
   2d55c:	e0bfff8d 	sth	r2,-2(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
   2d560:	e0bffe17 	ldw	r2,-8(fp)
   2d564:	1080a004 	addi	r2,r2,640
   2d568:	e13fff8b 	ldhu	r4,-2(fp)
   2d56c:	00e00004 	movi	r3,-32768
   2d570:	20c6b03a 	or	r3,r4,r3
   2d574:	18ffffcc 	andi	r3,r3,65535
   2d578:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
   2d57c:	0005883a 	mov	r2,zero
}
   2d580:	e037883a 	mov	sp,fp
   2d584:	dfc00117 	ldw	ra,4(sp)
   2d588:	df000017 	ldw	fp,0(sp)
   2d58c:	dec00204 	addi	sp,sp,8
   2d590:	f800283a 	ret

0002d594 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
   2d594:	defffc04 	addi	sp,sp,-16
   2d598:	dfc00315 	stw	ra,12(sp)
   2d59c:	df000215 	stw	fp,8(sp)
   2d5a0:	df000204 	addi	fp,sp,8
   2d5a4:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
   2d5a8:	e0bffe17 	ldw	r2,-8(fp)
   2d5ac:	1080bb04 	addi	r2,r2,748
   2d5b0:	10800037 	ldwio	r2,0(r2)
   2d5b4:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
   2d5b8:	e0ffff8b 	ldhu	r3,-2(fp)
   2d5bc:	00bffc04 	movi	r2,-16
   2d5c0:	1884703a 	and	r2,r3,r2
   2d5c4:	e0bfff8d 	sth	r2,-2(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
   2d5c8:	010000f4 	movhi	r4,3
   2d5cc:	21162b04 	addi	r4,r4,22700
   2d5d0:	0028a980 	call	28a98 <no_printf>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
   2d5d4:	e0bffe17 	ldw	r2,-8(fp)
   2d5d8:	1080bb04 	addi	r2,r2,748
   2d5dc:	e0ffff8b 	ldhu	r3,-2(fp)
   2d5e0:	18c003d4 	ori	r3,r3,15
   2d5e4:	18ffffcc 	andi	r3,r3,65535
   2d5e8:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
   2d5ec:	010000f4 	movhi	r4,3
   2d5f0:	21163704 	addi	r4,r4,22748
   2d5f4:	0028a980 	call	28a98 <no_printf>
    dat = IORD(&pmac->mdio1.reg14, 0); 
   2d5f8:	e0bffe17 	ldw	r2,-8(fp)
   2d5fc:	1080b404 	addi	r2,r2,720
   2d600:	10800037 	ldwio	r2,0(r2)
   2d604:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
   2d608:	e0ffff8b 	ldhu	r3,-2(fp)
   2d60c:	00bfdf44 	movi	r2,-131
   2d610:	1884703a 	and	r2,r3,r2
   2d614:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
   2d618:	e0bffe17 	ldw	r2,-8(fp)
   2d61c:	1080b404 	addi	r2,r2,720
   2d620:	e0ffff8b 	ldhu	r3,-2(fp)
   2d624:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
   2d628:	010000f4 	movhi	r4,3
   2d62c:	21162504 	addi	r4,r4,22676
   2d630:	0028a980 	call	28a98 <no_printf>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2d634:	e0bffe17 	ldw	r2,-8(fp)
   2d638:	1080a004 	addi	r2,r2,640
   2d63c:	10800037 	ldwio	r2,0(r2)
   2d640:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
   2d644:	e0bffe17 	ldw	r2,-8(fp)
   2d648:	1080a004 	addi	r2,r2,640
   2d64c:	e13fff8b 	ldhu	r4,-2(fp)
   2d650:	00e00004 	movi	r3,-32768
   2d654:	20c6b03a 	or	r3,r4,r3
   2d658:	18ffffcc 	andi	r3,r3,65535
   2d65c:	10c00035 	stwio	r3,0(r2)
    
    return 1;
   2d660:	00800044 	movi	r2,1
}
   2d664:	e037883a 	mov	sp,fp
   2d668:	dfc00117 	ldw	ra,4(sp)
   2d66c:	df000017 	ldw	fp,0(sp)
   2d670:	dec00204 	addi	sp,sp,8
   2d674:	f800283a 	ret

0002d678 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
   2d678:	defffc04 	addi	sp,sp,-16
   2d67c:	dfc00315 	stw	ra,12(sp)
   2d680:	df000215 	stw	fp,8(sp)
   2d684:	df000204 	addi	fp,sp,8
   2d688:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
   2d68c:	e0bffe17 	ldw	r2,-8(fp)
   2d690:	1080bb04 	addi	r2,r2,748
   2d694:	10800037 	ldwio	r2,0(r2)
   2d698:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
   2d69c:	e0ffff8b 	ldhu	r3,-2(fp)
   2d6a0:	00bffc04 	movi	r2,-16
   2d6a4:	1884703a 	and	r2,r3,r2
   2d6a8:	e0bfff8d 	sth	r2,-2(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
   2d6ac:	010000f4 	movhi	r4,3
   2d6b0:	21164104 	addi	r4,r4,22788
   2d6b4:	0028a980 	call	28a98 <no_printf>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
   2d6b8:	e0bffe17 	ldw	r2,-8(fp)
   2d6bc:	1080bb04 	addi	r2,r2,748
   2d6c0:	e0ffff8b 	ldhu	r3,-2(fp)
   2d6c4:	18c00114 	ori	r3,r3,4
   2d6c8:	18ffffcc 	andi	r3,r3,65535
   2d6cc:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
   2d6d0:	010000f4 	movhi	r4,3
   2d6d4:	21163704 	addi	r4,r4,22748
   2d6d8:	0028a980 	call	28a98 <no_printf>
    dat = IORD(&pmac->mdio1.reg14, 0); 
   2d6dc:	e0bffe17 	ldw	r2,-8(fp)
   2d6e0:	1080b404 	addi	r2,r2,720
   2d6e4:	10800037 	ldwio	r2,0(r2)
   2d6e8:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
   2d6ec:	e0ffff8b 	ldhu	r3,-2(fp)
   2d6f0:	00bfdf44 	movi	r2,-131
   2d6f4:	1884703a 	and	r2,r3,r2
   2d6f8:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
   2d6fc:	e0bffe17 	ldw	r2,-8(fp)
   2d700:	1080b404 	addi	r2,r2,720
   2d704:	e0ffff8b 	ldhu	r3,-2(fp)
   2d708:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
   2d70c:	010000f4 	movhi	r4,3
   2d710:	21162504 	addi	r4,r4,22676
   2d714:	0028a980 	call	28a98 <no_printf>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2d718:	e0bffe17 	ldw	r2,-8(fp)
   2d71c:	1080a004 	addi	r2,r2,640
   2d720:	10800037 	ldwio	r2,0(r2)
   2d724:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
   2d728:	e0bffe17 	ldw	r2,-8(fp)
   2d72c:	1080a004 	addi	r2,r2,640
   2d730:	e13fff8b 	ldhu	r4,-2(fp)
   2d734:	00e00004 	movi	r3,-32768
   2d738:	20c6b03a 	or	r3,r4,r3
   2d73c:	18ffffcc 	andi	r3,r3,65535
   2d740:	10c00035 	stwio	r3,0(r2)
    
    return 1;
   2d744:	00800044 	movi	r2,1
}
   2d748:	e037883a 	mov	sp,fp
   2d74c:	dfc00117 	ldw	ra,4(sp)
   2d750:	df000017 	ldw	fp,0(sp)
   2d754:	dec00204 	addi	sp,sp,8
   2d758:	f800283a 	ret

0002d75c <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
   2d75c:	defffc04 	addi	sp,sp,-16
   2d760:	dfc00315 	stw	ra,12(sp)
   2d764:	df000215 	stw	fp,8(sp)
   2d768:	df000204 	addi	fp,sp,8
   2d76c:	e13ffe15 	stw	r4,-8(fp)
    
    alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
   2d770:	e0bffe17 	ldw	r2,-8(fp)
   2d774:	1080bb04 	addi	r2,r2,748
   2d778:	10800037 	ldwio	r2,0(r2)
   2d77c:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0xfff0;
   2d780:	e0ffff8b 	ldhu	r3,-2(fp)
   2d784:	00bffc04 	movi	r2,-16
   2d788:	1884703a 	and	r2,r3,r2
   2d78c:	e0bfff8d 	sth	r2,-2(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
   2d790:	010000f4 	movhi	r4,3
   2d794:	21165604 	addi	r4,r4,22872
   2d798:	0028a980 	call	28a98 <no_printf>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
   2d79c:	e0bffe17 	ldw	r2,-8(fp)
   2d7a0:	1080bb04 	addi	r2,r2,748
   2d7a4:	e0ffff8b 	ldhu	r3,-2(fp)
   2d7a8:	18c002d4 	ori	r3,r3,11
   2d7ac:	18ffffcc 	andi	r3,r3,65535
   2d7b0:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
   2d7b4:	010000f4 	movhi	r4,3
   2d7b8:	21166604 	addi	r4,r4,22936
   2d7bc:	0028a980 	call	28a98 <no_printf>
    dat = IORD(&pmac->mdio1.reg14, 0);
   2d7c0:	e0bffe17 	ldw	r2,-8(fp)
   2d7c4:	1080b404 	addi	r2,r2,720
   2d7c8:	10800037 	ldwio	r2,0(r2)
   2d7cc:	e0bfff8d 	sth	r2,-2(fp)
    dat &= ~0x82;
   2d7d0:	e0ffff8b 	ldhu	r3,-2(fp)
   2d7d4:	00bfdf44 	movi	r2,-131
   2d7d8:	1884703a 	and	r2,r3,r2
   2d7dc:	e0bfff8d 	sth	r2,-2(fp)
    dat |= 0x82;
   2d7e0:	e0bfff8b 	ldhu	r2,-2(fp)
   2d7e4:	10802094 	ori	r2,r2,130
   2d7e8:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
   2d7ec:	e0bffe17 	ldw	r2,-8(fp)
   2d7f0:	1080b404 	addi	r2,r2,720
   2d7f4:	e0ffff8b 	ldhu	r3,-2(fp)
   2d7f8:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
   2d7fc:	010000f4 	movhi	r4,3
   2d800:	21162504 	addi	r4,r4,22676
   2d804:	0028a980 	call	28a98 <no_printf>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2d808:	e0bffe17 	ldw	r2,-8(fp)
   2d80c:	1080a004 	addi	r2,r2,640
   2d810:	10800037 	ldwio	r2,0(r2)
   2d814:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
   2d818:	e0bffe17 	ldw	r2,-8(fp)
   2d81c:	1080a004 	addi	r2,r2,640
   2d820:	e13fff8b 	ldhu	r4,-2(fp)
   2d824:	00e00004 	movi	r3,-32768
   2d828:	20c6b03a 	or	r3,r4,r3
   2d82c:	18ffffcc 	andi	r3,r3,65535
   2d830:	10c00035 	stwio	r3,0(r2)
    
    return 1;
   2d834:	00800044 	movi	r2,1
    
}
   2d838:	e037883a 	mov	sp,fp
   2d83c:	dfc00117 	ldw	ra,4(sp)
   2d840:	df000017 	ldw	fp,0(sp)
   2d844:	dec00204 	addi	sp,sp,8
   2d848:	f800283a 	ret

0002d84c <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
   2d84c:	defffc04 	addi	sp,sp,-16
   2d850:	df000315 	stw	fp,12(sp)
   2d854:	df000304 	addi	fp,sp,12
   2d858:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 link_status = 0;
   2d85c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
   2d860:	e0bffd17 	ldw	r2,-12(fp)
   2d864:	1080b004 	addi	r2,r2,704
   2d868:	10800037 	ldwio	r2,0(r2)
   2d86c:	e0bffe15 	stw	r2,-8(fp)
    
    /* If speed == 10 Mbps */
    if(reg_status & 0x2) {
   2d870:	e0bffe17 	ldw	r2,-8(fp)
   2d874:	1080008c 	andi	r2,r2,2
   2d878:	10000426 	beq	r2,zero,2d88c <DP83848C_link_status_read+0x40>
        link_status |= 0x8;
   2d87c:	e0bfff17 	ldw	r2,-4(fp)
   2d880:	10800214 	ori	r2,r2,8
   2d884:	e0bfff15 	stw	r2,-4(fp)
   2d888:	00000306 	br	2d898 <DP83848C_link_status_read+0x4c>
    }
    /* Else speed = 100 Mbps */
    else {
        link_status |= 0x4;
   2d88c:	e0bfff17 	ldw	r2,-4(fp)
   2d890:	10800114 	ori	r2,r2,4
   2d894:	e0bfff15 	stw	r2,-4(fp)
    }
    
    /* If duplex == Full */
    if(reg_status & 0x4) {
   2d898:	e0bffe17 	ldw	r2,-8(fp)
   2d89c:	1080010c 	andi	r2,r2,4
   2d8a0:	10000326 	beq	r2,zero,2d8b0 <DP83848C_link_status_read+0x64>
        link_status |= 0x1;
   2d8a4:	e0bfff17 	ldw	r2,-4(fp)
   2d8a8:	10800054 	ori	r2,r2,1
   2d8ac:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return link_status;
   2d8b0:	e0bfff17 	ldw	r2,-4(fp)
}
   2d8b4:	e037883a 	mov	sp,fp
   2d8b8:	df000017 	ldw	fp,0(sp)
   2d8bc:	dec00104 	addi	sp,sp,4
   2d8c0:	f800283a 	ret

0002d8c4 <PEF7071_config>:
/* @Function Description: Additional configuration for PEF7071 Phy
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 PEF7071_config(np_tse_mac *pmac)
{  
   2d8c4:	defffd04 	addi	sp,sp,-12
   2d8c8:	df000215 	stw	fp,8(sp)
   2d8cc:	df000204 	addi	fp,sp,8
   2d8d0:	e13ffe15 	stw	r4,-8(fp)
    alt_u16 dat;
        
    dat = IORD(&pmac->mdio1.reg14, 0);
   2d8d4:	e0bffe17 	ldw	r2,-8(fp)
   2d8d8:	1080b404 	addi	r2,r2,720
   2d8dc:	10800037 	ldwio	r2,0(r2)
   2d8e0:	e0bfff8d 	sth	r2,-2(fp)
    dat &= 0x3FFF;
   2d8e4:	e0bfff8b 	ldhu	r2,-2(fp)
   2d8e8:	108fffcc 	andi	r2,r2,16383
   2d8ec:	e0bfff8d 	sth	r2,-2(fp)
    dat |= 0x0100;
   2d8f0:	e0bfff8b 	ldhu	r2,-2(fp)
   2d8f4:	10804014 	ori	r2,r2,256
   2d8f8:	e0bfff8d 	sth	r2,-2(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
   2d8fc:	e0bffe17 	ldw	r2,-8(fp)
   2d900:	1080b404 	addi	r2,r2,720
   2d904:	e0ffff8b 	ldhu	r3,-2(fp)
   2d908:	10c00035 	stwio	r3,0(r2)
    
    return 0;
   2d90c:	0005883a 	mov	r2,zero
    
}
   2d910:	e037883a 	mov	sp,fp
   2d914:	df000017 	ldw	fp,0(sp)
   2d918:	dec00104 	addi	sp,sp,4
   2d91c:	f800283a 	ret

0002d920 <PEF7071_link_status_read>:
/* @Function Description: Read link status from PHY specific status register of PEF7071
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 PEF7071_link_status_read(np_tse_mac *pmac)
{
   2d920:	defffc04 	addi	sp,sp,-16
   2d924:	df000315 	stw	fp,12(sp)
   2d928:	df000304 	addi	fp,sp,12
   2d92c:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 link_status = 0;
   2d930:	e03fff15 	stw	zero,-4(fp)
    alt_u32 reg18 = IORD(&pmac->mdio1.reg18, 0);
   2d934:	e0bffd17 	ldw	r2,-12(fp)
   2d938:	1080b804 	addi	r2,r2,736
   2d93c:	10800037 	ldwio	r2,0(r2)
   2d940:	e0bffe15 	stw	r2,-8(fp)
        
    if ((reg18 & 0x3)==0) { link_status |= 0x8; }  /* If speed == 10 Mbps */
   2d944:	e0bffe17 	ldw	r2,-8(fp)
   2d948:	108000cc 	andi	r2,r2,3
   2d94c:	1000031e 	bne	r2,zero,2d95c <PEF7071_link_status_read+0x3c>
   2d950:	e0bfff17 	ldw	r2,-4(fp)
   2d954:	10800214 	ori	r2,r2,8
   2d958:	e0bfff15 	stw	r2,-4(fp)
    if ((reg18 & 0x3)==1) { link_status |= 0x4; }  /* Else speed = 100 Mbps */
   2d95c:	e0bffe17 	ldw	r2,-8(fp)
   2d960:	108000cc 	andi	r2,r2,3
   2d964:	10800058 	cmpnei	r2,r2,1
   2d968:	1000031e 	bne	r2,zero,2d978 <PEF7071_link_status_read+0x58>
   2d96c:	e0bfff17 	ldw	r2,-4(fp)
   2d970:	10800114 	ori	r2,r2,4
   2d974:	e0bfff15 	stw	r2,-4(fp)
    if ((reg18 & 0x3)==2) { link_status |= 0x2; }  /* Else speed = 1000 Mbps */    
   2d978:	e0bffe17 	ldw	r2,-8(fp)
   2d97c:	108000cc 	andi	r2,r2,3
   2d980:	10800098 	cmpnei	r2,r2,2
   2d984:	1000031e 	bne	r2,zero,2d994 <PEF7071_link_status_read+0x74>
   2d988:	e0bfff17 	ldw	r2,-4(fp)
   2d98c:	10800094 	ori	r2,r2,2
   2d990:	e0bfff15 	stw	r2,-4(fp)
        
    /* If duplex == Full */
    if(reg18 & 0x8) {
   2d994:	e0bffe17 	ldw	r2,-8(fp)
   2d998:	1080020c 	andi	r2,r2,8
   2d99c:	10000326 	beq	r2,zero,2d9ac <PEF7071_link_status_read+0x8c>
        link_status |= 0x1;
   2d9a0:	e0bfff17 	ldw	r2,-4(fp)
   2d9a4:	10800054 	ori	r2,r2,1
   2d9a8:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return link_status;
   2d9ac:	e0bfff17 	ldw	r2,-4(fp)
}
   2d9b0:	e037883a 	mov	sp,fp
   2d9b4:	df000017 	ldw	fp,0(sp)
   2d9b8:	dec00104 	addi	sp,sp,4
   2d9bc:	f800283a 	ret

0002d9c0 <alt_qspi_controller2_lock>:
  * -EINVAL -> Invalid arguments
  * -ETIME  -> Time out and skipping the looping after 0.7 sec.
  * -ENOLCK -> Sectors lock failed.
**/
int alt_qspi_controller2_lock(alt_flash_dev *flash_info, alt_u32 sectors_to_lock)
{
   2d9c0:	defff804 	addi	sp,sp,-32
   2d9c4:	dfc00715 	stw	ra,28(sp)
   2d9c8:	df000615 	stw	fp,24(sp)
   2d9cc:	df000604 	addi	fp,sp,24
   2d9d0:	e13ffb15 	stw	r4,-20(fp)
   2d9d4:	e17ffa15 	stw	r5,-24(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
   2d9d8:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller2_dev* qspi_flash_info = NULL;
   2d9dc:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 result = 0;
   2d9e0:	e03ffd15 	stw	zero,-12(fp)
    alt_32 status = 0;
   2d9e4:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
   2d9e8:	e0bffb17 	ldw	r2,-20(fp)
   2d9ec:	1000021e 	bne	r2,zero,2d9f8 <alt_qspi_controller2_lock+0x38>
    {
        return -EINVAL;
   2d9f0:	00bffa84 	movi	r2,-22
   2d9f4:	00002c06 	br	2daa8 <alt_qspi_controller2_lock+0xe8>
    }

    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   2d9f8:	e0bffb17 	ldw	r2,-20(fp)
   2d9fc:	e0bffe15 	stw	r2,-8(fp)

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
   2da00:	e0bffa17 	ldw	r2,-24(fp)
   2da04:	1004923a 	slli	r2,r2,8
   2da08:	e0bfff15 	stw	r2,-4(fp)

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_PROTECT_CMD;
   2da0c:	e0bfff17 	ldw	r2,-4(fp)
   2da10:	108000d4 	ori	r2,r2,3
   2da14:	e0bfff15 	stw	r2,-4(fp)

    /* write sector protect command to QSPI_MEM_OP register to protect sectors */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
   2da18:	e0bffe17 	ldw	r2,-8(fp)
   2da1c:	10803017 	ldw	r2,192(r2)
   2da20:	10800304 	addi	r2,r2,12
   2da24:	1007883a 	mov	r3,r2
   2da28:	e0bfff17 	ldw	r2,-4(fp)
   2da2c:	18800035 	stwio	r2,0(r3)
    
    /* poll write in progress to make sure no operation is in progress */
    status = alt_qspi_poll_for_write_in_progress(qspi_flash_info);
   2da30:	e13ffe17 	ldw	r4,-8(fp)
   2da34:	002e4ac0 	call	2e4ac <alt_qspi_poll_for_write_in_progress>
   2da38:	e0bffc15 	stw	r2,-16(fp)
    if(status != 0)
   2da3c:	e0bffc17 	ldw	r2,-16(fp)
   2da40:	10000226 	beq	r2,zero,2da4c <alt_qspi_controller2_lock+0x8c>
    {
        return status;
   2da44:	e0bffc17 	ldw	r2,-16(fp)
   2da48:	00001706 	br	2daa8 <alt_qspi_controller2_lock+0xe8>
    }

    status = IORD_ALTERA_QSPI_CONTROLLER2_STATUS(qspi_flash_info->csr_base);
   2da4c:	e0bffe17 	ldw	r2,-8(fp)
   2da50:	10803017 	ldw	r2,192(r2)
   2da54:	10800037 	ldwio	r2,0(r2)
   2da58:	e0bffc15 	stw	r2,-16(fp)
    result |= (status >> 2) & 0x07; /* extract out BP3 - BP0 */
   2da5c:	e0bffc17 	ldw	r2,-16(fp)
   2da60:	1005d0ba 	srai	r2,r2,2
   2da64:	108001cc 	andi	r2,r2,7
   2da68:	e0fffd17 	ldw	r3,-12(fp)
   2da6c:	1884b03a 	or	r2,r3,r2
   2da70:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 3) & 0x08; /* extract out BP4 */
   2da74:	e0bffc17 	ldw	r2,-16(fp)
   2da78:	1005d0fa 	srai	r2,r2,3
   2da7c:	1080020c 	andi	r2,r2,8
   2da80:	e0fffd17 	ldw	r3,-12(fp)
   2da84:	1884b03a 	or	r2,r3,r2
   2da88:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 1) & 0x10; /* extract out TOP/BOTTOM bit */
   2da8c:	e0bffc17 	ldw	r2,-16(fp)
   2da90:	1005d07a 	srai	r2,r2,1
   2da94:	1080040c 	andi	r2,r2,16
   2da98:	e0fffd17 	ldw	r3,-12(fp)
   2da9c:	1884b03a 	or	r2,r3,r2
   2daa0:	e0bffd15 	stw	r2,-12(fp)
    if(result != sectors_to_lock)
    {
        /*return -ENOLCK;*/
    }

    return 0;
   2daa4:	0005883a 	mov	r2,zero
}
   2daa8:	e037883a 	mov	sp,fp
   2daac:	dfc00117 	ldw	ra,4(sp)
   2dab0:	df000017 	ldw	fp,0(sp)
   2dab4:	dec00204 	addi	sp,sp,8
   2dab8:	f800283a 	ret

0002dabc <alt_qspi_controller2_get_info>:
(
    alt_flash_fd *fd, /** flash device descriptor */
    flash_region **info, /** pointer to flash_region will be stored here */
    int *number_of_regions /** number of regions will be stored here */
)
{
   2dabc:	defffb04 	addi	sp,sp,-20
   2dac0:	df000415 	stw	fp,16(sp)
   2dac4:	df000404 	addi	fp,sp,16
   2dac8:	e13ffe15 	stw	r4,-8(fp)
   2dacc:	e17ffd15 	stw	r5,-12(fp)
   2dad0:	e1bffc15 	stw	r6,-16(fp)
    alt_flash_dev* flash = NULL;
   2dad4:	e03fff15 	stw	zero,-4(fp)
    
    /* return -EINVAL if fd,info and number_of_regions are NULL */
    if(NULL == fd || NULL == info || NULL == number_of_regions)
   2dad8:	e0bffe17 	ldw	r2,-8(fp)
   2dadc:	10000426 	beq	r2,zero,2daf0 <alt_qspi_controller2_get_info+0x34>
   2dae0:	e0bffd17 	ldw	r2,-12(fp)
   2dae4:	10000226 	beq	r2,zero,2daf0 <alt_qspi_controller2_get_info+0x34>
   2dae8:	e0bffc17 	ldw	r2,-16(fp)
   2daec:	1000021e 	bne	r2,zero,2daf8 <alt_qspi_controller2_get_info+0x3c>
    {
        return -EINVAL;
   2daf0:	00bffa84 	movi	r2,-22
   2daf4:	00001006 	br	2db38 <alt_qspi_controller2_get_info+0x7c>
    }

    flash = (alt_flash_dev*)fd;
   2daf8:	e0bffe17 	ldw	r2,-8(fp)
   2dafc:	e0bfff15 	stw	r2,-4(fp)

    *number_of_regions = flash->number_of_regions;
   2db00:	e0bfff17 	ldw	r2,-4(fp)
   2db04:	10c00c17 	ldw	r3,48(r2)
   2db08:	e0bffc17 	ldw	r2,-16(fp)
   2db0c:	10c00015 	stw	r3,0(r2)

    if (!flash->number_of_regions)
   2db10:	e0bfff17 	ldw	r2,-4(fp)
   2db14:	10800c17 	ldw	r2,48(r2)
   2db18:	1000021e 	bne	r2,zero,2db24 <alt_qspi_controller2_get_info+0x68>
    {
      return -EIO;
   2db1c:	00bffec4 	movi	r2,-5
   2db20:	00000506 	br	2db38 <alt_qspi_controller2_get_info+0x7c>
    }
    else
    {
      *info = &flash->region_info[0];
   2db24:	e0bfff17 	ldw	r2,-4(fp)
   2db28:	10c00d04 	addi	r3,r2,52
   2db2c:	e0bffd17 	ldw	r2,-12(fp)
   2db30:	10c00015 	stw	r3,0(r2)
    }

    return 0;
   2db34:	0005883a 	mov	r2,zero
}
   2db38:	e037883a 	mov	sp,fp
   2db3c:	df000017 	ldw	fp,0(sp)
   2db40:	dec00104 	addi	sp,sp,4
   2db44:	f800283a 	ret

0002db48 <alt_qspi_controller2_erase_block>:
  * 0 -> success
  * -EINVAL -> Invalid arguments
  * -EIO -> write failed, sector might be protected 
**/
int alt_qspi_controller2_erase_block(alt_flash_dev *flash_info, int block_offset)
{
   2db48:	defff804 	addi	sp,sp,-32
   2db4c:	dfc00715 	stw	ra,28(sp)
   2db50:	df000615 	stw	fp,24(sp)
   2db54:	df000604 	addi	fp,sp,24
   2db58:	e13ffb15 	stw	r4,-20(fp)
   2db5c:	e17ffa15 	stw	r5,-24(fp)
    alt_32 ret_code = 0;
   2db60:	e03fff15 	stw	zero,-4(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
   2db64:	e03ffe15 	stw	zero,-8(fp)
    alt_qspi_controller2_dev* qspi_flash_info = NULL;
   2db68:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 sector_number = 0; 
   2db6c:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info)
   2db70:	e0bffb17 	ldw	r2,-20(fp)
   2db74:	1000021e 	bne	r2,zero,2db80 <alt_qspi_controller2_erase_block+0x38>
    {
        return -EINVAL;
   2db78:	00bffa84 	movi	r2,-22
   2db7c:	00004906 	br	2dca4 <alt_qspi_controller2_erase_block+0x15c>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   2db80:	e0bffb17 	ldw	r2,-20(fp)
   2db84:	e0bffd15 	stw	r2,-12(fp)
    /* 
     * Sanity checks that block_offset is within the flash memory span and that the 
     * block offset is sector aligned.
     *
     */
    if((block_offset < 0) 
   2db88:	e0bffa17 	ldw	r2,-24(fp)
   2db8c:	10000a16 	blt	r2,zero,2dbb8 <alt_qspi_controller2_erase_block+0x70>
        || (block_offset >= qspi_flash_info->size_in_bytes)
   2db90:	e0bffd17 	ldw	r2,-12(fp)
   2db94:	10803117 	ldw	r2,196(r2)
   2db98:	e0fffa17 	ldw	r3,-24(fp)
   2db9c:	1880062e 	bgeu	r3,r2,2dbb8 <alt_qspi_controller2_erase_block+0x70>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0)
   2dba0:	e0bffd17 	ldw	r2,-12(fp)
   2dba4:	10803417 	ldw	r2,208(r2)
   2dba8:	10ffffc4 	addi	r3,r2,-1
   2dbac:	e0bffa17 	ldw	r2,-24(fp)
   2dbb0:	1884703a 	and	r2,r3,r2
   2dbb4:	10000226 	beq	r2,zero,2dbc0 <alt_qspi_controller2_erase_block+0x78>
    {
        return -EINVAL;
   2dbb8:	00bffa84 	movi	r2,-22
   2dbbc:	00003906 	br	2dca4 <alt_qspi_controller2_erase_block+0x15c>
    }
    
    alt_qspi_poll_for_write_in_progress(qspi_flash_info);     
   2dbc0:	e13ffd17 	ldw	r4,-12(fp)
   2dbc4:	002e4ac0 	call	2e4ac <alt_qspi_poll_for_write_in_progress>

    /* calculate current sector/block number */
    sector_number = (block_offset/(qspi_flash_info->sector_size));
   2dbc8:	e0fffa17 	ldw	r3,-24(fp)
   2dbcc:	e0bffd17 	ldw	r2,-12(fp)
   2dbd0:	10803417 	ldw	r2,208(r2)
   2dbd4:	100b883a 	mov	r5,r2
   2dbd8:	1809883a 	mov	r4,r3
   2dbdc:	0012a540 	call	12a54 <__udivsi3>
   2dbe0:	e0bffc15 	stw	r2,-16(fp)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
   2dbe4:	e0bffc17 	ldw	r2,-16(fp)
   2dbe8:	1006923a 	slli	r3,r2,8
   2dbec:	00804034 	movhi	r2,256
   2dbf0:	10bfc004 	addi	r2,r2,-256
   2dbf4:	1884703a 	and	r2,r3,r2
   2dbf8:	e0bffe15 	stw	r2,-8(fp)
    
     /* write enable command */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_WRITE_ENABLE_CMD;
   2dbfc:	e0bffe17 	ldw	r2,-8(fp)
   2dc00:	10800114 	ori	r2,r2,4
   2dc04:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to EPCQ_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
   2dc08:	e0bffd17 	ldw	r2,-12(fp)
   2dc0c:	10803017 	ldw	r2,192(r2)
   2dc10:	10800304 	addi	r2,r2,12
   2dc14:	1007883a 	mov	r3,r2
   2dc18:	e0bffe17 	ldw	r2,-8(fp)
   2dc1c:	18800035 	stwio	r2,0(r3)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
   2dc20:	e0bffc17 	ldw	r2,-16(fp)
   2dc24:	1006923a 	slli	r3,r2,8
   2dc28:	00804034 	movhi	r2,256
   2dc2c:	10bfc004 	addi	r2,r2,-256
   2dc30:	1884703a 	and	r2,r3,r2
   2dc34:	e0bffe15 	stw	r2,-8(fp)

    /* sector erase commands 0b10 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_ERASE_CMD;
   2dc38:	e0bffe17 	ldw	r2,-8(fp)
   2dc3c:	10800094 	ori	r2,r2,2
   2dc40:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to QSPI_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
   2dc44:	e0bffd17 	ldw	r2,-12(fp)
   2dc48:	10803017 	ldw	r2,192(r2)
   2dc4c:	10800304 	addi	r2,r2,12
   2dc50:	1007883a 	mov	r3,r2
   2dc54:	e0bffe17 	ldw	r2,-8(fp)
   2dc58:	18800035 	stwio	r2,0(r3)
    
    alt_qspi_poll_for_write_in_progress(qspi_flash_info);      
   2dc5c:	e13ffd17 	ldw	r4,-12(fp)
   2dc60:	002e4ac0 	call	2e4ac <alt_qspi_poll_for_write_in_progress>
    
    /* check whether erase triggered a illegal erase interrupt  */
    if((IORD_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base) &
   2dc64:	e0bffd17 	ldw	r2,-12(fp)
   2dc68:	10803017 	ldw	r2,192(r2)
   2dc6c:	10800404 	addi	r2,r2,16
   2dc70:	10800037 	ldwio	r2,0(r2)
   2dc74:	1080004c 	andi	r2,r2,1
   2dc78:	10800058 	cmpnei	r2,r2,1
   2dc7c:	1000081e 	bne	r2,zero,2dca0 <alt_qspi_controller2_erase_block+0x158>
                    ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_MASK) ==
                            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_ACTIVE)
    {
        /* clear register */
        /* QSPI_ISR access is write one to clear (W1C) */
        IOWR_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base,
   2dc80:	e0bffd17 	ldw	r2,-12(fp)
   2dc84:	10803017 	ldw	r2,192(r2)
   2dc88:	10800404 	addi	r2,r2,16
   2dc8c:	1007883a 	mov	r3,r2
   2dc90:	00800044 	movi	r2,1
   2dc94:	18800035 	stwio	r2,0(r3)
            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_MASK );
        return -EIO; /* erase failed, sector might be protected */
   2dc98:	00bffec4 	movi	r2,-5
   2dc9c:	00000106 	br	2dca4 <alt_qspi_controller2_erase_block+0x15c>
    }

    return ret_code;
   2dca0:	e0bfff17 	ldw	r2,-4(fp)
}
   2dca4:	e037883a 	mov	sp,fp
   2dca8:	dfc00117 	ldw	ra,4(sp)
   2dcac:	df000017 	ldw	fp,0(sp)
   2dcb0:	dec00204 	addi	sp,sp,8
   2dcb4:	f800283a 	ret

0002dcb8 <alt_qspi_controller2_write_block>:
    int block_offset, /** sector/block offset in byte addressing */
    int data_offset, /** offset of write from base address */
    const void *data, /** data to be written */
    int length /** bytes of data to be written, >0 */
)
{
   2dcb8:	defff304 	addi	sp,sp,-52
   2dcbc:	dfc00c15 	stw	ra,48(sp)
   2dcc0:	df000b15 	stw	fp,44(sp)
   2dcc4:	df000b04 	addi	fp,sp,44
   2dcc8:	e13ff815 	stw	r4,-32(fp)
   2dccc:	e17ff715 	stw	r5,-36(fp)
   2dcd0:	e1bff615 	stw	r6,-40(fp)
   2dcd4:	e1fff515 	stw	r7,-44(fp)
    alt_u32 buffer_offset = 0; /** offset into data buffer to get write data */
   2dcd8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 remaining_length = length; /** length left to write */
   2dcdc:	e0800217 	ldw	r2,8(fp)
   2dce0:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 write_offset = data_offset; /** offset into flash to write too */
   2dce4:	e0bff617 	ldw	r2,-40(fp)
   2dce8:	e0bffd15 	stw	r2,-12(fp)

    
    alt_qspi_controller2_dev *qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   2dcec:	e0bff817 	ldw	r2,-32(fp)
   2dcf0:	e0bffa15 	stw	r2,-24(fp)
    /* 
     * Sanity checks that data offset is not larger then a sector, that block offset is 
     * sector aligned and within the valid flash memory range and a write doesn't spill into 
     * the adjacent flash sector.
     */
    if(block_offset < 0
   2dcf4:	e0bff717 	ldw	r2,-36(fp)
   2dcf8:	10001e16 	blt	r2,zero,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || data_offset < 0
   2dcfc:	e0bff617 	ldw	r2,-40(fp)
   2dd00:	10001c16 	blt	r2,zero,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || NULL == flash_info
   2dd04:	e0bff817 	ldw	r2,-32(fp)
   2dd08:	10001a26 	beq	r2,zero,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || NULL == data
   2dd0c:	e0bff517 	ldw	r2,-44(fp)
   2dd10:	10001826 	beq	r2,zero,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || data_offset >= qspi_flash_info->size_in_bytes
   2dd14:	e0bffa17 	ldw	r2,-24(fp)
   2dd18:	10803117 	ldw	r2,196(r2)
   2dd1c:	e0fff617 	ldw	r3,-40(fp)
   2dd20:	1880142e 	bgeu	r3,r2,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || block_offset >= qspi_flash_info->size_in_bytes
   2dd24:	e0bffa17 	ldw	r2,-24(fp)
   2dd28:	10803117 	ldw	r2,196(r2)
   2dd2c:	e0fff717 	ldw	r3,-36(fp)
   2dd30:	1880102e 	bgeu	r3,r2,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || length > (qspi_flash_info->sector_size - (data_offset - block_offset))
   2dd34:	e0bffa17 	ldw	r2,-24(fp)
   2dd38:	10803417 	ldw	r2,208(r2)
   2dd3c:	e13ff617 	ldw	r4,-40(fp)
   2dd40:	e0fff717 	ldw	r3,-36(fp)
   2dd44:	20c7c83a 	sub	r3,r4,r3
   2dd48:	10c7c83a 	sub	r3,r2,r3
   2dd4c:	e0800217 	ldw	r2,8(fp)
   2dd50:	18800836 	bltu	r3,r2,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || length < 0
   2dd54:	e0800217 	ldw	r2,8(fp)
   2dd58:	10000616 	blt	r2,zero,2dd74 <alt_qspi_controller2_write_block+0xbc>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0) 
   2dd5c:	e0bffa17 	ldw	r2,-24(fp)
   2dd60:	10803417 	ldw	r2,208(r2)
   2dd64:	10ffffc4 	addi	r3,r2,-1
   2dd68:	e0bff717 	ldw	r2,-36(fp)
   2dd6c:	1884703a 	and	r2,r3,r2
   2dd70:	10006426 	beq	r2,zero,2df04 <alt_qspi_controller2_write_block+0x24c>
    {
        return -EINVAL;
   2dd74:	00bffa84 	movi	r2,-22
   2dd78:	00006506 	br	2df10 <alt_qspi_controller2_write_block+0x258>
     * We need to make sure that we pad the first few bytes so they're word aligned if they are
     * not already.
     */
    while (remaining_length > 0)
    {
        alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
   2dd7c:	00bfffc4 	movi	r2,-1
   2dd80:	e0bff915 	stw	r2,-28(fp)
        alt_u32 padding = 0; /** bytes to pad the next word that is written */
   2dd84:	e03ffc15 	stw	zero,-16(fp)
        alt_u32 bytes_to_copy = sizeof(alt_u32); /** number of bytes from source to copy */
   2dd88:	00800104 	movi	r2,4
   2dd8c:	e0bffb15 	stw	r2,-20(fp)

        /*
         * we need to make sure the write is word aligned
         * this should only be true at most 1 time
         */
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
   2dd90:	e0bffd17 	ldw	r2,-12(fp)
   2dd94:	108000cc 	andi	r2,r2,3
   2dd98:	10001526 	beq	r2,zero,2ddf0 <alt_qspi_controller2_write_block+0x138>
        {
            /*
             * data is not word aligned
             * calculate padding bytes need to add before start of a data offset
             */
            padding = write_offset & (sizeof(alt_u32) - 1);
   2dd9c:	e0bffd17 	ldw	r2,-12(fp)
   2dda0:	108000cc 	andi	r2,r2,3
   2dda4:	e0bffc15 	stw	r2,-16(fp)

            /* update variables to account for padding being added */
            bytes_to_copy -= padding;
   2dda8:	e0fffb17 	ldw	r3,-20(fp)
   2ddac:	e0bffc17 	ldw	r2,-16(fp)
   2ddb0:	1885c83a 	sub	r2,r3,r2
   2ddb4:	e0bffb15 	stw	r2,-20(fp)

            if(bytes_to_copy > remaining_length)
   2ddb8:	e0bffb17 	ldw	r2,-20(fp)
   2ddbc:	e0fffe17 	ldw	r3,-8(fp)
   2ddc0:	1880022e 	bgeu	r3,r2,2ddcc <alt_qspi_controller2_write_block+0x114>
            {
                bytes_to_copy = remaining_length;
   2ddc4:	e0bffe17 	ldw	r2,-8(fp)
   2ddc8:	e0bffb15 	stw	r2,-20(fp)
            }

            write_offset = write_offset - padding;
   2ddcc:	e0fffd17 	ldw	r3,-12(fp)
   2ddd0:	e0bffc17 	ldw	r2,-16(fp)
   2ddd4:	1885c83a 	sub	r2,r3,r2
   2ddd8:	e0bffd15 	stw	r2,-12(fp)
            if(0 != (write_offset & (sizeof(alt_u32) - 1)))
   2dddc:	e0bffd17 	ldw	r2,-12(fp)
   2dde0:	108000cc 	andi	r2,r2,3
   2dde4:	10000726 	beq	r2,zero,2de04 <alt_qspi_controller2_write_block+0x14c>
            {
                return -EINVAL;
   2dde8:	00bffa84 	movi	r2,-22
   2ddec:	00004806 	br	2df10 <alt_qspi_controller2_write_block+0x258>
            }
        }
        else
        {
            if(bytes_to_copy > remaining_length)
   2ddf0:	e0bffb17 	ldw	r2,-20(fp)
   2ddf4:	e0fffe17 	ldw	r3,-8(fp)
   2ddf8:	1880022e 	bgeu	r3,r2,2de04 <alt_qspi_controller2_write_block+0x14c>
            {
                bytes_to_copy = remaining_length;
   2ddfc:	e0bffe17 	ldw	r2,-8(fp)
   2de00:	e0bffb15 	stw	r2,-20(fp)
            }
        }

        /* prepare the word to be written */
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
   2de04:	e0fff904 	addi	r3,fp,-28
   2de08:	e0bffc17 	ldw	r2,-16(fp)
   2de0c:	1889883a 	add	r4,r3,r2
   2de10:	e0fff517 	ldw	r3,-44(fp)
   2de14:	e0bfff17 	ldw	r2,-4(fp)
   2de18:	1885883a 	add	r2,r3,r2
   2de1c:	e1bffb17 	ldw	r6,-20(fp)
   2de20:	100b883a 	mov	r5,r2
   2de24:	0015ac00 	call	15ac0 <memcpy>

        /* update offset and length variables */
        buffer_offset += bytes_to_copy;
   2de28:	e0ffff17 	ldw	r3,-4(fp)
   2de2c:	e0bffb17 	ldw	r2,-20(fp)
   2de30:	1885883a 	add	r2,r3,r2
   2de34:	e0bfff15 	stw	r2,-4(fp)
        remaining_length -= bytes_to_copy;
   2de38:	e0fffe17 	ldw	r3,-8(fp)
   2de3c:	e0bffb17 	ldw	r2,-20(fp)
   2de40:	1885c83a 	sub	r2,r3,r2
   2de44:	e0bffe15 	stw	r2,-8(fp)
           
        /* write to flash 32 bits at a time */
        IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
   2de48:	e0bffa17 	ldw	r2,-24(fp)
   2de4c:	10c02e17 	ldw	r3,184(r2)
   2de50:	e0bffd17 	ldw	r2,-12(fp)
   2de54:	1885883a 	add	r2,r3,r2
   2de58:	e0fff917 	ldw	r3,-28(fp)
   2de5c:	10c00035 	stwio	r3,0(r2)
        alt_qspi_poll_for_write_in_progress(qspi_flash_info); 
   2de60:	e13ffa17 	ldw	r4,-24(fp)
   2de64:	002e4ac0 	call	2e4ac <alt_qspi_poll_for_write_in_progress>
        if (IORD_32DIRECT(qspi_flash_info->data_base, write_offset) != word_to_write)
   2de68:	e0bffa17 	ldw	r2,-24(fp)
   2de6c:	10c02e17 	ldw	r3,184(r2)
   2de70:	e0bffd17 	ldw	r2,-12(fp)
   2de74:	1885883a 	add	r2,r3,r2
   2de78:	10800037 	ldwio	r2,0(r2)
   2de7c:	1007883a 	mov	r3,r2
   2de80:	e0bff917 	ldw	r2,-28(fp)
   2de84:	18800d26 	beq	r3,r2,2debc <alt_qspi_controller2_write_block+0x204>
        {
            IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
   2de88:	e0bffa17 	ldw	r2,-24(fp)
   2de8c:	10c02e17 	ldw	r3,184(r2)
   2de90:	e0bffd17 	ldw	r2,-12(fp)
   2de94:	1885883a 	add	r2,r3,r2
   2de98:	e0fff917 	ldw	r3,-28(fp)
   2de9c:	10c00035 	stwio	r3,0(r2)
            alt_qspi_poll_for_write_in_progress(qspi_flash_info); 
   2dea0:	e13ffa17 	ldw	r4,-24(fp)
   2dea4:	002e4ac0 	call	2e4ac <alt_qspi_poll_for_write_in_progress>
            IORD_32DIRECT(qspi_flash_info->data_base, write_offset);
   2dea8:	e0bffa17 	ldw	r2,-24(fp)
   2deac:	10c02e17 	ldw	r3,184(r2)
   2deb0:	e0bffd17 	ldw	r2,-12(fp)
   2deb4:	1885883a 	add	r2,r3,r2
   2deb8:	10800037 	ldwio	r2,0(r2)
        }
              
        /* check whether write triggered a illegal write interrupt */
        if((IORD_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base) &
   2debc:	e0bffa17 	ldw	r2,-24(fp)
   2dec0:	10803017 	ldw	r2,192(r2)
   2dec4:	10800404 	addi	r2,r2,16
   2dec8:	10800037 	ldwio	r2,0(r2)
   2decc:	1080008c 	andi	r2,r2,2
   2ded0:	10800098 	cmpnei	r2,r2,2
   2ded4:	1000081e 	bne	r2,zero,2def8 <alt_qspi_controller2_write_block+0x240>
                ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_MASK) ==
                        ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_ACTIVE)
        {
            /* clear register */
            IOWR_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base,
   2ded8:	e0bffa17 	ldw	r2,-24(fp)
   2dedc:	10803017 	ldw	r2,192(r2)
   2dee0:	10800404 	addi	r2,r2,16
   2dee4:	1007883a 	mov	r3,r2
   2dee8:	00800084 	movi	r2,2
   2deec:	18800035 	stwio	r2,0(r3)
            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_MASK );
            return -EIO; /** write failed, sector might be protected */
   2def0:	00bffec4 	movi	r2,-5
   2def4:	00000606 	br	2df10 <alt_qspi_controller2_write_block+0x258>
        }

        /* update current offset */
        write_offset = write_offset + sizeof(alt_u32);
   2def8:	e0bffd17 	ldw	r2,-12(fp)
   2defc:	10800104 	addi	r2,r2,4
   2df00:	e0bffd15 	stw	r2,-12(fp)
    while (remaining_length > 0)
   2df04:	e0bffe17 	ldw	r2,-8(fp)
   2df08:	103f9c1e 	bne	r2,zero,2dd7c <__alt_mem_mcu_subsystem_ram_0+0x7800dd7c>
    }

    return 0;
   2df0c:	0005883a 	mov	r2,zero
}
   2df10:	e037883a 	mov	sp,fp
   2df14:	dfc00117 	ldw	ra,4(sp)
   2df18:	df000017 	ldw	fp,0(sp)
   2df1c:	dec00204 	addi	sp,sp,8
   2df20:	f800283a 	ret

0002df24 <alt_qspi_controller2_write>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of write from base address */
    const void *src_addr, /** source buffer */
    int length /** size of writing */
)
{
   2df24:	defff004 	addi	sp,sp,-64
   2df28:	dfc00f15 	stw	ra,60(sp)
   2df2c:	df000e15 	stw	fp,56(sp)
   2df30:	df000e04 	addi	fp,sp,56
   2df34:	e13ff615 	stw	r4,-40(fp)
   2df38:	e17ff515 	stw	r5,-44(fp)
   2df3c:	e1bff415 	stw	r6,-48(fp)
   2df40:	e1fff315 	stw	r7,-52(fp)
    alt_32 ret_code = 0;
   2df44:	e03fff15 	stw	zero,-4(fp)

    alt_qspi_controller2_dev *qspi_flash_info = NULL;
   2df48:	e03ff915 	stw	zero,-28(fp)

    alt_u32 write_offset = offset; /** address of next byte to write */
   2df4c:	e0bff517 	ldw	r2,-44(fp)
   2df50:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 remaining_length = length; /** length of write data left to be written */
   2df54:	e0bff317 	ldw	r2,-52(fp)
   2df58:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
   2df5c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 i = 0;
   2df60:	e03ffb15 	stw	zero,-20(fp)

    /* return -EINVAL if flash_info and src_addr are NULL */
    if(NULL == flash_info || NULL == src_addr)
   2df64:	e0bff617 	ldw	r2,-40(fp)
   2df68:	10000226 	beq	r2,zero,2df74 <alt_qspi_controller2_write+0x50>
   2df6c:	e0bff417 	ldw	r2,-48(fp)
   2df70:	1000021e 	bne	r2,zero,2df7c <alt_qspi_controller2_write+0x58>
    {
        return -EINVAL;
   2df74:	00bffa84 	movi	r2,-22
   2df78:	00005f06 	br	2e0f8 <alt_qspi_controller2_write+0x1d4>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   2df7c:	e0bff617 	ldw	r2,-40(fp)
   2df80:	e0bff915 	stw	r2,-28(fp)
    
    /* make sure the write parameters are within the bounds of the flash */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
   2df84:	e0bff517 	ldw	r2,-44(fp)
   2df88:	e0fff317 	ldw	r3,-52(fp)
   2df8c:	180d883a 	mov	r6,r3
   2df90:	100b883a 	mov	r5,r2
   2df94:	e13ff917 	ldw	r4,-28(fp)
   2df98:	002e4100 	call	2e410 <alt_qspi_validate_read_write_arguments>
   2df9c:	e0bfff15 	stw	r2,-4(fp)

    if(0 != ret_code)
   2dfa0:	e0bfff17 	ldw	r2,-4(fp)
   2dfa4:	10000226 	beq	r2,zero,2dfb0 <alt_qspi_controller2_write+0x8c>
    {
        return ret_code;
   2dfa8:	e0bfff17 	ldw	r2,-4(fp)
   2dfac:	00005206 	br	2e0f8 <alt_qspi_controller2_write+0x1d4>

    /*
     * This loop erases and writes data one sector at a time. We check for write completion 
     * before starting the next sector.
     */
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
   2dfb0:	e0fff517 	ldw	r3,-44(fp)
   2dfb4:	e0bff917 	ldw	r2,-28(fp)
   2dfb8:	10803417 	ldw	r2,208(r2)
   2dfbc:	100b883a 	mov	r5,r2
   2dfc0:	1809883a 	mov	r4,r3
   2dfc4:	0012a540 	call	12a54 <__udivsi3>
   2dfc8:	e0bffb15 	stw	r2,-20(fp)
   2dfcc:	00004306 	br	2e0dc <alt_qspi_controller2_write+0x1b8>
    {
        alt_u32 block_offset = 0; /** block offset in byte addressing */
   2dfd0:	e03ff815 	stw	zero,-32(fp)
        alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
   2dfd4:	e03ffa15 	stw	zero,-24(fp)
        alt_u32 length_to_write = 0; /** length to write to current sector */
   2dfd8:	e03ff715 	stw	zero,-36(fp)

        if(0 >= remaining_length)
   2dfdc:	e0bffd17 	ldw	r2,-12(fp)
   2dfe0:	10004326 	beq	r2,zero,2e0f0 <alt_qspi_controller2_write+0x1cc>
        {
            break; /* out of data to write */
        }

        /* calculate current sector/block offset in byte addressing */
        block_offset = write_offset & ~(qspi_flash_info->sector_size - 1);
   2dfe4:	e0bff917 	ldw	r2,-28(fp)
   2dfe8:	10803417 	ldw	r2,208(r2)
   2dfec:	0085c83a 	sub	r2,zero,r2
   2dff0:	e0fffe17 	ldw	r3,-8(fp)
   2dff4:	1884703a 	and	r2,r3,r2
   2dff8:	e0bff815 	stw	r2,-32(fp)
           
        /* calculate offset into sector/block if there is one */
        if(block_offset != write_offset)
   2dffc:	e0fff817 	ldw	r3,-32(fp)
   2e000:	e0bffe17 	ldw	r2,-8(fp)
   2e004:	18800426 	beq	r3,r2,2e018 <alt_qspi_controller2_write+0xf4>
        {
            offset_within_current_sector = write_offset - block_offset;
   2e008:	e0fffe17 	ldw	r3,-8(fp)
   2e00c:	e0bff817 	ldw	r2,-32(fp)
   2e010:	1885c83a 	sub	r2,r3,r2
   2e014:	e0bffa15 	stw	r2,-24(fp)
        }

        /* erase sector */
        ret_code = alt_qspi_controller2_erase_block(flash_info, block_offset);
   2e018:	e0bff817 	ldw	r2,-32(fp)
   2e01c:	100b883a 	mov	r5,r2
   2e020:	e13ff617 	ldw	r4,-40(fp)
   2e024:	002db480 	call	2db48 <alt_qspi_controller2_erase_block>
   2e028:	e0bfff15 	stw	r2,-4(fp)

        if(0 != ret_code)
   2e02c:	e0bfff17 	ldw	r2,-4(fp)
   2e030:	10000226 	beq	r2,zero,2e03c <alt_qspi_controller2_write+0x118>
        {
            return ret_code;
   2e034:	e0bfff17 	ldw	r2,-4(fp)
   2e038:	00002f06 	br	2e0f8 <alt_qspi_controller2_write+0x1d4>
        }

        /* calculate the byte size of data to be written in a sector */
        length_to_write = MIN(qspi_flash_info->sector_size - offset_within_current_sector, 
   2e03c:	e0bff917 	ldw	r2,-28(fp)
   2e040:	10c03417 	ldw	r3,208(r2)
   2e044:	e0bffa17 	ldw	r2,-24(fp)
   2e048:	1887c83a 	sub	r3,r3,r2
   2e04c:	e0bffd17 	ldw	r2,-12(fp)
   2e050:	1880012e 	bgeu	r3,r2,2e058 <alt_qspi_controller2_write+0x134>
   2e054:	1805883a 	mov	r2,r3
   2e058:	e0bff715 	stw	r2,-36(fp)
                remaining_length);

        /* write data to erased block */
        ret_code = alt_qspi_controller2_write_block(flash_info, block_offset, write_offset,
   2e05c:	e13ff817 	ldw	r4,-32(fp)
   2e060:	e17ffe17 	ldw	r5,-8(fp)
   2e064:	e0fff417 	ldw	r3,-48(fp)
   2e068:	e0bffc17 	ldw	r2,-16(fp)
   2e06c:	1887883a 	add	r3,r3,r2
   2e070:	e0bff717 	ldw	r2,-36(fp)
   2e074:	d8800015 	stw	r2,0(sp)
   2e078:	180f883a 	mov	r7,r3
   2e07c:	280d883a 	mov	r6,r5
   2e080:	200b883a 	mov	r5,r4
   2e084:	e13ff617 	ldw	r4,-40(fp)
   2e088:	002dcb80 	call	2dcb8 <alt_qspi_controller2_write_block>
   2e08c:	e0bfff15 	stw	r2,-4(fp)
            src_addr + buffer_offset, length_to_write);


        if(0 != ret_code)
   2e090:	e0bfff17 	ldw	r2,-4(fp)
   2e094:	10000226 	beq	r2,zero,2e0a0 <alt_qspi_controller2_write+0x17c>
        {
            return ret_code;
   2e098:	e0bfff17 	ldw	r2,-4(fp)
   2e09c:	00001606 	br	2e0f8 <alt_qspi_controller2_write+0x1d4>
        }

        /* update remaining length and buffer_offset pointer */
        remaining_length -= length_to_write;
   2e0a0:	e0fffd17 	ldw	r3,-12(fp)
   2e0a4:	e0bff717 	ldw	r2,-36(fp)
   2e0a8:	1885c83a 	sub	r2,r3,r2
   2e0ac:	e0bffd15 	stw	r2,-12(fp)
        buffer_offset += length_to_write;
   2e0b0:	e0fffc17 	ldw	r3,-16(fp)
   2e0b4:	e0bff717 	ldw	r2,-36(fp)
   2e0b8:	1885883a 	add	r2,r3,r2
   2e0bc:	e0bffc15 	stw	r2,-16(fp)
        write_offset += length_to_write; 
   2e0c0:	e0fffe17 	ldw	r3,-8(fp)
   2e0c4:	e0bff717 	ldw	r2,-36(fp)
   2e0c8:	1885883a 	add	r2,r3,r2
   2e0cc:	e0bffe15 	stw	r2,-8(fp)
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
   2e0d0:	e0bffb17 	ldw	r2,-20(fp)
   2e0d4:	10800044 	addi	r2,r2,1
   2e0d8:	e0bffb15 	stw	r2,-20(fp)
   2e0dc:	e0bff917 	ldw	r2,-28(fp)
   2e0e0:	10803317 	ldw	r2,204(r2)
   2e0e4:	e0fffb17 	ldw	r3,-20(fp)
   2e0e8:	18bfb936 	bltu	r3,r2,2dfd0 <__alt_mem_mcu_subsystem_ram_0+0x7800dfd0>
   2e0ec:	00000106 	br	2e0f4 <alt_qspi_controller2_write+0x1d0>
            break; /* out of data to write */
   2e0f0:	0001883a 	nop
    }

    return ret_code;
   2e0f4:	e0bfff17 	ldw	r2,-4(fp)
}
   2e0f8:	e037883a 	mov	sp,fp
   2e0fc:	dfc00117 	ldw	ra,4(sp)
   2e100:	df000017 	ldw	fp,0(sp)
   2e104:	dec00204 	addi	sp,sp,8
   2e108:	f800283a 	ret

0002e10c <alt_qspi_controller2_read>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of read from base address */
    void *dest_addr, /** destination buffer */
    int length /** size of read */
)
{
   2e10c:	defff804 	addi	sp,sp,-32
   2e110:	dfc00715 	stw	ra,28(sp)
   2e114:	df000615 	stw	fp,24(sp)
   2e118:	df000604 	addi	fp,sp,24
   2e11c:	e13ffd15 	stw	r4,-12(fp)
   2e120:	e17ffc15 	stw	r5,-16(fp)
   2e124:	e1bffb15 	stw	r6,-20(fp)
   2e128:	e1fffa15 	stw	r7,-24(fp)
    alt_32 ret_code = 0;
   2e12c:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller2_dev *qspi_flash_info = NULL;
   2e130:	e03ffe15 	stw	zero,-8(fp)
    
    /* return -EINVAL if flash_info and dest_addr are NULL */
    if(NULL == flash_info || NULL == dest_addr)
   2e134:	e0bffd17 	ldw	r2,-12(fp)
   2e138:	10000226 	beq	r2,zero,2e144 <alt_qspi_controller2_read+0x38>
   2e13c:	e0bffb17 	ldw	r2,-20(fp)
   2e140:	1000021e 	bne	r2,zero,2e14c <alt_qspi_controller2_read+0x40>
    {
        return -EINVAL;
   2e144:	00bffa84 	movi	r2,-22
   2e148:	00001606 	br	2e1a4 <alt_qspi_controller2_read+0x98>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   2e14c:	e0bffd17 	ldw	r2,-12(fp)
   2e150:	e0bffe15 	stw	r2,-8(fp)

    /* validate arguments */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
   2e154:	e0bffc17 	ldw	r2,-16(fp)
   2e158:	e0fffa17 	ldw	r3,-24(fp)
   2e15c:	180d883a 	mov	r6,r3
   2e160:	100b883a 	mov	r5,r2
   2e164:	e13ffe17 	ldw	r4,-8(fp)
   2e168:	002e4100 	call	2e410 <alt_qspi_validate_read_write_arguments>
   2e16c:	e0bfff15 	stw	r2,-4(fp)

    /* copy data from flash to destination address */
    if(0 == ret_code)
   2e170:	e0bfff17 	ldw	r2,-4(fp)
   2e174:	10000a1e 	bne	r2,zero,2e1a0 <alt_qspi_controller2_read+0x94>
    {
        memcpy(dest_addr, (alt_u8*)qspi_flash_info->data_base + offset, length);
   2e178:	e0bffe17 	ldw	r2,-8(fp)
   2e17c:	10c02e17 	ldw	r3,184(r2)
   2e180:	e0bffc17 	ldw	r2,-16(fp)
   2e184:	1885883a 	add	r2,r3,r2
   2e188:	1007883a 	mov	r3,r2
   2e18c:	e0bffa17 	ldw	r2,-24(fp)
   2e190:	100d883a 	mov	r6,r2
   2e194:	180b883a 	mov	r5,r3
   2e198:	e13ffb17 	ldw	r4,-20(fp)
   2e19c:	0015ac00 	call	15ac0 <memcpy>
    }

    return ret_code;
   2e1a0:	e0bfff17 	ldw	r2,-4(fp)
}
   2e1a4:	e037883a 	mov	sp,fp
   2e1a8:	dfc00117 	ldw	ra,4(sp)
   2e1ac:	df000017 	ldw	fp,0(sp)
   2e1b0:	dec00204 	addi	sp,sp,8
   2e1b4:	f800283a 	ret

0002e1b8 <altera_qspi_controller2_init>:
 * 0 -> success
 * -EINVAL -> Invalid arguments.
 * -ENODEV -> System is configured incorrectly.
**/
alt_32 altera_qspi_controller2_init(alt_qspi_controller2_dev *flash)
{
   2e1b8:	defffa04 	addi	sp,sp,-24
   2e1bc:	dfc00515 	stw	ra,20(sp)
   2e1c0:	df000415 	stw	fp,16(sp)
   2e1c4:	df000404 	addi	fp,sp,16
   2e1c8:	e13ffc15 	stw	r4,-16(fp)
    alt_u32 silicon_id = 0;
   2e1cc:	e03fff15 	stw	zero,-4(fp)
    alt_u32 size_in_bytes = 0;
   2e1d0:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 number_of_sectors = 0;
   2e1d4:	e03ffe15 	stw	zero,-8(fp)

    /* return -EINVAL if flash is NULL */
    if(NULL == flash)
   2e1d8:	e0bffc17 	ldw	r2,-16(fp)
   2e1dc:	1000021e 	bne	r2,zero,2e1e8 <altera_qspi_controller2_init+0x30>
    {
        return -EINVAL;
   2e1e0:	00bffa84 	movi	r2,-22
   2e1e4:	00008506 	br	2e3fc <altera_qspi_controller2_init+0x244>
    }
    
    /* return -ENODEV if CSR slave is not attached */
    if(NULL == (void *)flash->csr_base)
   2e1e8:	e0bffc17 	ldw	r2,-16(fp)
   2e1ec:	10803017 	ldw	r2,192(r2)
   2e1f0:	1000021e 	bne	r2,zero,2e1fc <altera_qspi_controller2_init+0x44>
    {
        return -ENODEV;
   2e1f4:	00bffb44 	movi	r2,-19
   2e1f8:	00008006 	br	2e3fc <altera_qspi_controller2_init+0x244>
     *
     * In both cases, we can determine the number of sectors, which we can use
     * to calculate a size. We compare that size to the system.h value to make sure
     * the QSPI soft IP was configured correctly.
     */
    if(0 == flash->is_epcs)
   2e1fc:	e0bffc17 	ldw	r2,-16(fp)
   2e200:	10803217 	ldw	r2,200(r2)
   2e204:	1000381e 	bne	r2,zero,2e2e8 <altera_qspi_controller2_init+0x130>
    {
        /* If we're an EPCQ or QSPI, we read QSPI_RD_RDID for the silicon ID */
        silicon_id = IORD_ALTERA_QSPI_CONTROLLER2_RDID(flash->csr_base);
   2e208:	e0bffc17 	ldw	r2,-16(fp)
   2e20c:	10803017 	ldw	r2,192(r2)
   2e210:	10800204 	addi	r2,r2,8
   2e214:	10800037 	ldwio	r2,0(r2)
   2e218:	e0bfff15 	stw	r2,-4(fp)
        silicon_id >>= 16;
   2e21c:	e0bfff17 	ldw	r2,-4(fp)
   2e220:	1004d43a 	srli	r2,r2,16
   2e224:	e0bfff15 	stw	r2,-4(fp)
        silicon_id &=  ALTERA_QSPI_CONTROLLER2_RDID_MASK;
   2e228:	e0bfff17 	ldw	r2,-4(fp)
   2e22c:	10803fcc 	andi	r2,r2,255
   2e230:	e0bfff15 	stw	r2,-4(fp)

        /* Determine which EPCQ/QSPI device so we can figure out the number of sectors */
        /*EPCQ and QSPI share the same ID for the same capacity*/
        switch(silicon_id)
   2e234:	e0bfff17 	ldw	r2,-4(fp)
   2e238:	10bffac4 	addi	r2,r2,-21
   2e23c:	10c00368 	cmpgeui	r3,r2,13
   2e240:	1800271e 	bne	r3,zero,2e2e0 <altera_qspi_controller2_init+0x128>
   2e244:	100690ba 	slli	r3,r2,2
   2e248:	008000f4 	movhi	r2,3
   2e24c:	1885883a 	add	r2,r3,r2
   2e250:	10b89617 	ldw	r2,-7592(r2)
   2e254:	1000683a 	jmp	r2
   2e258:	0002e28c 	andi	zero,zero,2954
   2e25c:	0002e298 	cmpnei	zero,zero,2954
   2e260:	0002e2a4 	muli	zero,zero,2954
   2e264:	0002e2b0 	cmpltui	zero,zero,2954
   2e268:	0002e2bc 	xorhi	zero,zero,2954
   2e26c:	0002e2e0 	cmpeqi	zero,zero,2955
   2e270:	0002e2e0 	cmpeqi	zero,zero,2955
   2e274:	0002e2e0 	cmpeqi	zero,zero,2955
   2e278:	0002e2e0 	cmpeqi	zero,zero,2955
   2e27c:	0002e2e0 	cmpeqi	zero,zero,2955
   2e280:	0002e2e0 	cmpeqi	zero,zero,2955
   2e284:	0002e2c8 	cmpgei	zero,zero,2955
   2e288:	0002e2d4 	movui	zero,2955
        {
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI16:
            {
                number_of_sectors = 32;
   2e28c:	00800804 	movi	r2,32
   2e290:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e294:	00002e06 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI32:
            {
                number_of_sectors = 64;
   2e298:	00801004 	movi	r2,64
   2e29c:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e2a0:	00002b06 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI64:
            {
                number_of_sectors = 128;
   2e2a4:	00802004 	movi	r2,128
   2e2a8:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e2ac:	00002806 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI128:
            {
                number_of_sectors = 256;
   2e2b0:	00804004 	movi	r2,256
   2e2b4:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e2b8:	00002506 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI256:
            {
                number_of_sectors = 512;
   2e2bc:	00808004 	movi	r2,512
   2e2c0:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e2c4:	00002206 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI512:
            {
                number_of_sectors = 1024;
   2e2c8:	00810004 	movi	r2,1024
   2e2cc:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e2d0:	00001f06 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI1024:
            {
                number_of_sectors = 2048;
   2e2d4:	00820004 	movi	r2,2048
   2e2d8:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e2dc:	00001c06 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            default:
            {
                return -ENODEV;
   2e2e0:	00bffb44 	movi	r2,-19
   2e2e4:	00004506 	br	2e3fc <altera_qspi_controller2_init+0x244>
            }
        }
    }
    else {
        /* If we're an EPCS, we read QSPI_RD_SID for the silicon ID */
        silicon_id = IORD_ALTERA_QSPI_CONTROLLER2_SID(flash->csr_base);
   2e2e8:	e0bffc17 	ldw	r2,-16(fp)
   2e2ec:	10803017 	ldw	r2,192(r2)
   2e2f0:	10800104 	addi	r2,r2,4
   2e2f4:	10800037 	ldwio	r2,0(r2)
   2e2f8:	e0bfff15 	stw	r2,-4(fp)
        silicon_id &= ALTERA_QSPI_CONTROLLER2_SID_MASK;
   2e2fc:	e0bfff17 	ldw	r2,-4(fp)
   2e300:	10803fcc 	andi	r2,r2,255
   2e304:	e0bfff15 	stw	r2,-4(fp)

        /* Determine which EPCS device so we can figure out various properties */
        switch(silicon_id)
   2e308:	e0bfff17 	ldw	r2,-4(fp)
   2e30c:	10c005a0 	cmpeqi	r3,r2,22
   2e310:	1800071e 	bne	r3,zero,2e330 <altera_qspi_controller2_init+0x178>
   2e314:	10c00620 	cmpeqi	r3,r2,24
   2e318:	1800081e 	bne	r3,zero,2e33c <altera_qspi_controller2_init+0x184>
   2e31c:	10800520 	cmpeqi	r2,r2,20
   2e320:	10000926 	beq	r2,zero,2e348 <altera_qspi_controller2_init+0x190>
        {
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS16:
            {
                number_of_sectors = 32;
   2e324:	00800804 	movi	r2,32
   2e328:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e32c:	00000806 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS64:
            {
                number_of_sectors = 128;
   2e330:	00802004 	movi	r2,128
   2e334:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e338:	00000506 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS128:
            {
                number_of_sectors = 256;
   2e33c:	00804004 	movi	r2,256
   2e340:	e0bffe15 	stw	r2,-8(fp)
                break;
   2e344:	00000206 	br	2e350 <altera_qspi_controller2_init+0x198>
            }
            default:
            {
                return -ENODEV;
   2e348:	00bffb44 	movi	r2,-19
   2e34c:	00002b06 	br	2e3fc <altera_qspi_controller2_init+0x244>
            }
        }
    }

    /* Calculate size of flash based on number of sectors */
    size_in_bytes = number_of_sectors * flash->sector_size;
   2e350:	e0bffc17 	ldw	r2,-16(fp)
   2e354:	10803417 	ldw	r2,208(r2)
   2e358:	e0fffe17 	ldw	r3,-8(fp)
   2e35c:	1885383a 	mul	r2,r3,r2
   2e360:	e0bffd15 	stw	r2,-12(fp)
    /*
     * Make sure calculated size is the same size given in system.h
     * Also check number of sectors is the same number given in system.h
     * Otherwise the QSPI IP was not configured correctly
     */
    if(    size_in_bytes != flash->size_in_bytes ||
   2e364:	e0bffc17 	ldw	r2,-16(fp)
   2e368:	10803117 	ldw	r2,196(r2)
   2e36c:	e0fffd17 	ldw	r3,-12(fp)
   2e370:	1880041e 	bne	r3,r2,2e384 <altera_qspi_controller2_init+0x1cc>
            number_of_sectors != flash->number_of_sectors)
   2e374:	e0bffc17 	ldw	r2,-16(fp)
   2e378:	10803317 	ldw	r2,204(r2)
    if(    size_in_bytes != flash->size_in_bytes ||
   2e37c:	e0fffe17 	ldw	r3,-8(fp)
   2e380:	18800426 	beq	r3,r2,2e394 <altera_qspi_controller2_init+0x1dc>
    {
        flash->dev.number_of_regions = 0;
   2e384:	e0bffc17 	ldw	r2,-16(fp)
   2e388:	10000c15 	stw	zero,48(r2)
        return -ENODEV;
   2e38c:	00bffb44 	movi	r2,-19
   2e390:	00001a06 	br	2e3fc <altera_qspi_controller2_init+0x244>
    }
    else
    {
        flash->silicon_id = silicon_id;
   2e394:	e0bffc17 	ldw	r2,-16(fp)
   2e398:	e0ffff17 	ldw	r3,-4(fp)
   2e39c:	10c03615 	stw	r3,216(r2)
        flash->number_of_sectors = number_of_sectors;
   2e3a0:	e0bffc17 	ldw	r2,-16(fp)
   2e3a4:	e0fffe17 	ldw	r3,-8(fp)
   2e3a8:	10c03315 	stw	r3,204(r2)

        /*
         * populate fields of region_info required to conform to HAL API
         * create 1 region that composed of "number_of_sectors" blocks
         */
        flash->dev.number_of_regions = 1;
   2e3ac:	e0bffc17 	ldw	r2,-16(fp)
   2e3b0:	00c00044 	movi	r3,1
   2e3b4:	10c00c15 	stw	r3,48(r2)
        flash->dev.region_info[0].offset = 0;
   2e3b8:	e0bffc17 	ldw	r2,-16(fp)
   2e3bc:	10000d15 	stw	zero,52(r2)
        flash->dev.region_info[0].region_size = size_in_bytes;
   2e3c0:	e0fffd17 	ldw	r3,-12(fp)
   2e3c4:	e0bffc17 	ldw	r2,-16(fp)
   2e3c8:	10c00e15 	stw	r3,56(r2)
        flash->dev.region_info[0].number_of_blocks = number_of_sectors;
   2e3cc:	e0fffe17 	ldw	r3,-8(fp)
   2e3d0:	e0bffc17 	ldw	r2,-16(fp)
   2e3d4:	10c00f15 	stw	r3,60(r2)
        flash->dev.region_info[0].block_size = flash->sector_size;
   2e3d8:	e0bffc17 	ldw	r2,-16(fp)
   2e3dc:	10803417 	ldw	r2,208(r2)
   2e3e0:	1007883a 	mov	r3,r2
   2e3e4:	e0bffc17 	ldw	r2,-16(fp)
   2e3e8:	10c01015 	stw	r3,64(r2)
    /*
     * Register this device as a valid flash device type
     *
     * Only register the device if it's configured correctly.
     */
        alt_flash_device_register(&(flash->dev));
   2e3ec:	e0bffc17 	ldw	r2,-16(fp)
   2e3f0:	1009883a 	mov	r4,r2
   2e3f4:	0030ab80 	call	30ab8 <alt_flash_device_register>


    return 0;
   2e3f8:	0005883a 	mov	r2,zero
}
   2e3fc:	e037883a 	mov	sp,fp
   2e400:	dfc00117 	ldw	ra,4(sp)
   2e404:	df000017 	ldw	fp,0(sp)
   2e408:	dec00204 	addi	sp,sp,8
   2e40c:	f800283a 	ret

0002e410 <alt_qspi_validate_read_write_arguments>:
(
        alt_qspi_controller2_dev *flash_info, /** device info */
        alt_u32 offset, /** offset of read/write */
        alt_u32 length /** length of read/write */
)
{
   2e410:	defff904 	addi	sp,sp,-28
   2e414:	df000615 	stw	fp,24(sp)
   2e418:	df000604 	addi	fp,sp,24
   2e41c:	e13ffc15 	stw	r4,-16(fp)
   2e420:	e17ffb15 	stw	r5,-20(fp)
   2e424:	e1bffa15 	stw	r6,-24(fp)
    alt_qspi_controller2_dev *qspi_flash_info = NULL;
   2e428:	e03fff15 	stw	zero,-4(fp)
    alt_u32 start_address = 0;
   2e42c:	e03ffe15 	stw	zero,-8(fp)
    alt_32 end_address = 0;
   2e430:	e03ffd15 	stw	zero,-12(fp)
    
  /* return -EINVAL if flash_info is NULL */
   if(NULL == flash_info)
   2e434:	e0bffc17 	ldw	r2,-16(fp)
   2e438:	1000021e 	bne	r2,zero,2e444 <alt_qspi_validate_read_write_arguments+0x34>
   {
        return -EINVAL;
   2e43c:	00bffa84 	movi	r2,-22
   2e440:	00001606 	br	2e49c <alt_qspi_validate_read_write_arguments+0x8c>
   }
    
  qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   2e444:	e0bffc17 	ldw	r2,-16(fp)
   2e448:	e0bfff15 	stw	r2,-4(fp)

  start_address = qspi_flash_info->data_base + offset; /** first address of read or write */
   2e44c:	e0bfff17 	ldw	r2,-4(fp)
   2e450:	10802e17 	ldw	r2,184(r2)
   2e454:	e0fffb17 	ldw	r3,-20(fp)
   2e458:	1885883a 	add	r2,r3,r2
   2e45c:	e0bffe15 	stw	r2,-8(fp)
  end_address = start_address + length; /** last address of read or write (not inclusive) */
   2e460:	e0fffe17 	ldw	r3,-8(fp)
   2e464:	e0bffa17 	ldw	r2,-24(fp)
   2e468:	1885883a 	add	r2,r3,r2
   2e46c:	e0bffd15 	stw	r2,-12(fp)

  /* make sure start and end address is less then the end address of the flash */
  if(
          start_address >= qspi_flash_info->data_end ||
   2e470:	e0bfff17 	ldw	r2,-4(fp)
   2e474:	10802f17 	ldw	r2,188(r2)
  if(
   2e478:	e0fffe17 	ldw	r3,-8(fp)
   2e47c:	1880042e 	bgeu	r3,r2,2e490 <alt_qspi_validate_read_write_arguments+0x80>
          end_address > qspi_flash_info->data_end ||
   2e480:	e0bfff17 	ldw	r2,-4(fp)
   2e484:	10c02f17 	ldw	r3,188(r2)
   2e488:	e0bffd17 	ldw	r2,-12(fp)
          offset < 0 ||
   2e48c:	1880022e 	bgeu	r3,r2,2e498 <alt_qspi_validate_read_write_arguments+0x88>
          length < 0
  )
  {
      return -EINVAL;
   2e490:	00bffa84 	movi	r2,-22
   2e494:	00000106 	br	2e49c <alt_qspi_validate_read_write_arguments+0x8c>
  }

  return 0;
   2e498:	0005883a 	mov	r2,zero
}
   2e49c:	e037883a 	mov	sp,fp
   2e4a0:	df000017 	ldw	fp,0(sp)
   2e4a4:	dec00104 	addi	sp,sp,4
   2e4a8:	f800283a 	ret

0002e4ac <alt_qspi_poll_for_write_in_progress>:
 * 0 -> success
 * -EINVAL -> Invalid arguments
 * -ETIME  -> Time out and skipping the looping after 0.7 sec.
 */
alt_32 static alt_qspi_poll_for_write_in_progress(alt_qspi_controller2_dev* qspi_flash_info)
{  
   2e4ac:	defffc04 	addi	sp,sp,-16
   2e4b0:	df000315 	stw	fp,12(sp)
   2e4b4:	df000304 	addi	fp,sp,12
   2e4b8:	e13ffd15 	stw	r4,-12(fp)
    /* we'll want to implement timeout if a timeout value is specified */
#if ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE > 0
    alt_u32 timeout = ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE;
   2e4bc:	008002f4 	movhi	r2,11
   2e4c0:	10ab9804 	addi	r2,r2,-20896
   2e4c4:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 counter = 0;
   2e4c8:	e03fff8d 	sth	zero,-2(fp)
#endif

    /* return -EINVAL if qspi_flash_info is NULL */
    if(NULL == qspi_flash_info)
   2e4cc:	e0bffd17 	ldw	r2,-12(fp)
   2e4d0:	10000a1e 	bne	r2,zero,2e4fc <alt_qspi_poll_for_write_in_progress+0x50>
    {
        return -EINVAL;
   2e4d4:	00bffa84 	movi	r2,-22
   2e4d8:	00000f06 	br	2e518 <alt_qspi_poll_for_write_in_progress+0x6c>
            ALTERA_QSPI_CONTROLLER2_STATUS_WIP_MASK) ==
            ALTERA_QSPI_CONTROLLER2_STATUS_WIP_BUSY)
    {
        if (counter > (ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE>>1)) alt_busy_sleep(2); /* delay 2us */
#if ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE > 0
        if(timeout <= counter )
   2e4dc:	e0ffff8b 	ldhu	r3,-2(fp)
   2e4e0:	e0bffe17 	ldw	r2,-8(fp)
   2e4e4:	18800236 	bltu	r3,r2,2e4f0 <alt_qspi_poll_for_write_in_progress+0x44>
        {
            return -ETIME;
   2e4e8:	00bff084 	movi	r2,-62
   2e4ec:	00000a06 	br	2e518 <alt_qspi_poll_for_write_in_progress+0x6c>
        }
        
        counter++;
   2e4f0:	e0bfff8b 	ldhu	r2,-2(fp)
   2e4f4:	10800044 	addi	r2,r2,1
   2e4f8:	e0bfff8d 	sth	r2,-2(fp)
    while((IORD_ALTERA_QSPI_CONTROLLER2_STATUS(qspi_flash_info->csr_base) &
   2e4fc:	e0bffd17 	ldw	r2,-12(fp)
   2e500:	10803017 	ldw	r2,192(r2)
   2e504:	10800037 	ldwio	r2,0(r2)
   2e508:	1080004c 	andi	r2,r2,1
   2e50c:	10800060 	cmpeqi	r2,r2,1
   2e510:	103ff21e 	bne	r2,zero,2e4dc <__alt_mem_mcu_subsystem_ram_0+0x7800e4dc>
#endif

    }

    return 0;
   2e514:	0005883a 	mov	r2,zero
}
   2e518:	e037883a 	mov	sp,fp
   2e51c:	df000017 	ldw	fp,0(sp)
   2e520:	dec00104 	addi	sp,sp,4
   2e524:	f800283a 	ret

0002e528 <alt_get_errno>:
{
   2e528:	defffe04 	addi	sp,sp,-8
   2e52c:	dfc00115 	stw	ra,4(sp)
   2e530:	df000015 	stw	fp,0(sp)
   2e534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e538:	d0a00c17 	ldw	r2,-32720(gp)
   2e53c:	10000326 	beq	r2,zero,2e54c <alt_get_errno+0x24>
   2e540:	d0a00c17 	ldw	r2,-32720(gp)
   2e544:	103ee83a 	callr	r2
   2e548:	00000106 	br	2e550 <alt_get_errno+0x28>
   2e54c:	d0a7ae04 	addi	r2,gp,-24904
}
   2e550:	e037883a 	mov	sp,fp
   2e554:	dfc00117 	ldw	ra,4(sp)
   2e558:	df000017 	ldw	fp,0(sp)
   2e55c:	dec00204 	addi	sp,sp,8
   2e560:	f800283a 	ret

0002e564 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
   2e564:	defffc04 	addi	sp,sp,-16
   2e568:	df000315 	stw	fp,12(sp)
   2e56c:	df000304 	addi	fp,sp,12
   2e570:	e13fff15 	stw	r4,-4(fp)
   2e574:	e17ffe15 	stw	r5,-8(fp)
   2e578:	e1bffd15 	stw	r6,-12(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   2e57c:	e0bfff17 	ldw	r2,-4(fp)
   2e580:	10800037 	ldwio	r2,0(r2)
   2e584:	1080010c 	andi	r2,r2,4
   2e588:	10000226 	beq	r2,zero,2e594 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
   2e58c:	00bff904 	movi	r2,-28
   2e590:	00001506 	br	2e5e8 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
   2e594:	e0bffd17 	ldw	r2,-12(fp)
   2e598:	10800017 	ldw	r2,0(r2)
   2e59c:	1007883a 	mov	r3,r2
   2e5a0:	e0bffe17 	ldw	r2,-8(fp)
   2e5a4:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
   2e5a8:	e0bffe17 	ldw	r2,-8(fp)
   2e5ac:	10800104 	addi	r2,r2,4
   2e5b0:	e0fffd17 	ldw	r3,-12(fp)
   2e5b4:	18c00117 	ldw	r3,4(r3)
   2e5b8:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
   2e5bc:	e0bffe17 	ldw	r2,-8(fp)
   2e5c0:	10800204 	addi	r2,r2,8
   2e5c4:	e0fffd17 	ldw	r3,-12(fp)
   2e5c8:	18c00217 	ldw	r3,8(r3)
   2e5cc:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
   2e5d0:	e0bffe17 	ldw	r2,-8(fp)
   2e5d4:	10800304 	addi	r2,r2,12
   2e5d8:	e0fffd17 	ldw	r3,-12(fp)
   2e5dc:	18c00317 	ldw	r3,12(r3)
   2e5e0:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
   2e5e4:	0005883a 	mov	r2,zero
}
   2e5e8:	e037883a 	mov	sp,fp
   2e5ec:	df000017 	ldw	fp,0(sp)
   2e5f0:	dec00104 	addi	sp,sp,4
   2e5f4:	f800283a 	ret

0002e5f8 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
   2e5f8:	defffc04 	addi	sp,sp,-16
   2e5fc:	df000315 	stw	fp,12(sp)
   2e600:	df000304 	addi	fp,sp,12
   2e604:	e13fff15 	stw	r4,-4(fp)
   2e608:	e17ffe15 	stw	r5,-8(fp)
   2e60c:	e1bffd15 	stw	r6,-12(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
   2e610:	e0bfff17 	ldw	r2,-4(fp)
   2e614:	10800037 	ldwio	r2,0(r2)
   2e618:	1080010c 	andi	r2,r2,4
   2e61c:	10000226 	beq	r2,zero,2e628 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
   2e620:	00bff904 	movi	r2,-28
   2e624:	00003b06 	br	2e714 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
   2e628:	e0bffd17 	ldw	r2,-12(fp)
   2e62c:	10800017 	ldw	r2,0(r2)
   2e630:	1007883a 	mov	r3,r2
   2e634:	e0bffe17 	ldw	r2,-8(fp)
   2e638:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
   2e63c:	e0bffe17 	ldw	r2,-8(fp)
   2e640:	10800104 	addi	r2,r2,4
   2e644:	e0fffd17 	ldw	r3,-12(fp)
   2e648:	18c00117 	ldw	r3,4(r3)
   2e64c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
   2e650:	e0bffe17 	ldw	r2,-8(fp)
   2e654:	10800204 	addi	r2,r2,8
   2e658:	e0fffd17 	ldw	r3,-12(fp)
   2e65c:	18c00217 	ldw	r3,8(r3)
   2e660:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
   2e664:	e0bffe17 	ldw	r2,-8(fp)
   2e668:	10800304 	addi	r2,r2,12
   2e66c:	e0fffd17 	ldw	r3,-12(fp)
   2e670:	18c0030b 	ldhu	r3,12(r3)
   2e674:	18ffffcc 	andi	r3,r3,65535
   2e678:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
   2e67c:	e0bffe17 	ldw	r2,-8(fp)
   2e680:	10800384 	addi	r2,r2,14
   2e684:	e0fffd17 	ldw	r3,-12(fp)
   2e688:	18c00383 	ldbu	r3,14(r3)
   2e68c:	18c03fcc 	andi	r3,r3,255
   2e690:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
   2e694:	e0bffe17 	ldw	r2,-8(fp)
   2e698:	108003c4 	addi	r2,r2,15
   2e69c:	e0fffd17 	ldw	r3,-12(fp)
   2e6a0:	18c003c3 	ldbu	r3,15(r3)
   2e6a4:	18c03fcc 	andi	r3,r3,255
   2e6a8:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
   2e6ac:	e0bffe17 	ldw	r2,-8(fp)
   2e6b0:	10800404 	addi	r2,r2,16
   2e6b4:	e0fffd17 	ldw	r3,-12(fp)
   2e6b8:	18c0040b 	ldhu	r3,16(r3)
   2e6bc:	18ffffcc 	andi	r3,r3,65535
   2e6c0:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
   2e6c4:	e0bffe17 	ldw	r2,-8(fp)
   2e6c8:	10800484 	addi	r2,r2,18
   2e6cc:	e0fffd17 	ldw	r3,-12(fp)
   2e6d0:	18c0048b 	ldhu	r3,18(r3)
   2e6d4:	18ffffcc 	andi	r3,r3,65535
   2e6d8:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
   2e6dc:	e0bffe17 	ldw	r2,-8(fp)
   2e6e0:	10800504 	addi	r2,r2,20
   2e6e4:	0007883a 	mov	r3,zero
   2e6e8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
   2e6ec:	e0bffe17 	ldw	r2,-8(fp)
   2e6f0:	10800604 	addi	r2,r2,24
   2e6f4:	0007883a 	mov	r3,zero
   2e6f8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
   2e6fc:	e0bffe17 	ldw	r2,-8(fp)
   2e700:	10800704 	addi	r2,r2,28
   2e704:	e0fffd17 	ldw	r3,-12(fp)
   2e708:	18c00717 	ldw	r3,28(r3)
   2e70c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
   2e710:	0005883a 	mov	r2,zero
}
   2e714:	e037883a 	mov	sp,fp
   2e718:	df000017 	ldw	fp,0(sp)
   2e71c:	dec00104 	addi	sp,sp,4
   2e720:	f800283a 	ret

0002e724 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
   2e724:	defff804 	addi	sp,sp,-32
   2e728:	dfc00715 	stw	ra,28(sp)
   2e72c:	df000615 	stw	fp,24(sp)
   2e730:	df000604 	addi	fp,sp,24
   2e734:	e13ffa15 	stw	r4,-24(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
   2e738:	e0bffa17 	ldw	r2,-24(fp)
   2e73c:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
   2e740:	e0bfff17 	ldw	r2,-4(fp)
   2e744:	10801783 	ldbu	r2,94(r2)
   2e748:	10803fcc 	andi	r2,r2,255
   2e74c:	10001126 	beq	r2,zero,2e794 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
   2e750:	e0bfff17 	ldw	r2,-4(fp)
   2e754:	10800617 	ldw	r2,24(r2)
   2e758:	10800037 	ldwio	r2,0(r2)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
   2e75c:	1007883a 	mov	r3,r2
        temporary_control = 
   2e760:	00bffdc4 	movi	r2,-9
   2e764:	1884703a 	and	r2,r3,r2
   2e768:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
   2e76c:	e0bfff17 	ldw	r2,-4(fp)
   2e770:	10800617 	ldw	r2,24(r2)
   2e774:	e0fffe17 	ldw	r3,-8(fp)
   2e778:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
   2e77c:	e0bfff17 	ldw	r2,-4(fp)
   2e780:	10800617 	ldw	r2,24(r2)
   2e784:	10800404 	addi	r2,r2,16
   2e788:	00c00044 	movi	r3,1
   2e78c:	10c00035 	stwio	r3,0(r2)
   2e790:	00001106 	br	2e7d8 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   2e794:	e0bfff17 	ldw	r2,-4(fp)
   2e798:	10800317 	ldw	r2,12(r2)
   2e79c:	10800104 	addi	r2,r2,4
   2e7a0:	10800037 	ldwio	r2,0(r2)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
   2e7a4:	1007883a 	mov	r3,r2
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   2e7a8:	00bffbc4 	movi	r2,-17
   2e7ac:	1884703a 	and	r2,r3,r2
   2e7b0:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   2e7b4:	e0bfff17 	ldw	r2,-4(fp)
   2e7b8:	10800317 	ldw	r2,12(r2)
   2e7bc:	10800104 	addi	r2,r2,4
   2e7c0:	e0fffe17 	ldw	r3,-8(fp)
   2e7c4:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
   2e7c8:	e0bfff17 	ldw	r2,-4(fp)
   2e7cc:	10800317 	ldw	r2,12(r2)
   2e7d0:	00c08004 	movi	r3,512
   2e7d4:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   2e7d8:	e0bfff17 	ldw	r2,-4(fp)
   2e7dc:	10800b17 	ldw	r2,44(r2)
   2e7e0:	10001226 	beq	r2,zero,2e82c <alt_msgdma_irq+0x108>
  NIOS2_READ_STATUS (context);
   2e7e4:	0005303a 	rdctl	r2,status
   2e7e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e7ec:	e0fffb17 	ldw	r3,-20(fp)
   2e7f0:	00bfff84 	movi	r2,-2
   2e7f4:	1884703a 	and	r2,r3,r2
   2e7f8:	1001703a 	wrctl	status,r2
  return context;
   2e7fc:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2e800:	e0bffd15 	stw	r2,-12(fp)
        dev->callback (dev->callback_context);
   2e804:	e0bfff17 	ldw	r2,-4(fp)
   2e808:	10800b17 	ldw	r2,44(r2)
   2e80c:	e0ffff17 	ldw	r3,-4(fp)
   2e810:	18c00c17 	ldw	r3,48(r3)
   2e814:	1809883a 	mov	r4,r3
   2e818:	103ee83a 	callr	r2
   2e81c:	e0bffd17 	ldw	r2,-12(fp)
   2e820:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2e824:	e0bffc17 	ldw	r2,-16(fp)
   2e828:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
   2e82c:	e0bfff17 	ldw	r2,-4(fp)
   2e830:	10801783 	ldbu	r2,94(r2)
   2e834:	10803fcc 	andi	r2,r2,255
   2e838:	10000a26 	beq	r2,zero,2e864 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
   2e83c:	e0bfff17 	ldw	r2,-4(fp)
   2e840:	10800617 	ldw	r2,24(r2)
   2e844:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
   2e848:	10800214 	ori	r2,r2,8
        temporary_control = 
   2e84c:	e0bffe15 	stw	r2,-8(fp)
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
   2e850:	e0bfff17 	ldw	r2,-4(fp)
   2e854:	10800617 	ldw	r2,24(r2)
   2e858:	e0fffe17 	ldw	r3,-8(fp)
   2e85c:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
   2e860:	00000c06 	br	2e894 <alt_msgdma_irq+0x170>
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
   2e864:	e0bfff17 	ldw	r2,-4(fp)
   2e868:	10800317 	ldw	r2,12(r2)
   2e86c:	10800104 	addi	r2,r2,4
   2e870:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
   2e874:	10800414 	ori	r2,r2,16
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
   2e878:	e0bffe15 	stw	r2,-8(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   2e87c:	e0bfff17 	ldw	r2,-4(fp)
   2e880:	10800317 	ldw	r2,12(r2)
   2e884:	10800104 	addi	r2,r2,4
   2e888:	e0fffe17 	ldw	r3,-8(fp)
   2e88c:	10c00035 	stwio	r3,0(r2)
    return;
   2e890:	0001883a 	nop
}
   2e894:	e037883a 	mov	sp,fp
   2e898:	dfc00117 	ldw	ra,4(sp)
   2e89c:	df000017 	ldw	fp,0(sp)
   2e8a0:	dec00204 	addi	sp,sp,8
   2e8a4:	f800283a 	ret

0002e8a8 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
   2e8a8:	defffb04 	addi	sp,sp,-20
   2e8ac:	df000415 	stw	fp,16(sp)
   2e8b0:	df000404 	addi	fp,sp,16
   2e8b4:	e13fff15 	stw	r4,-4(fp)
   2e8b8:	e17ffe15 	stw	r5,-8(fp)
   2e8bc:	e1bffd15 	stw	r6,-12(fp)
   2e8c0:	e1fffc15 	stw	r7,-16(fp)
    if(dev->max_byte < length ||
   2e8c4:	e0bfff17 	ldw	r2,-4(fp)
   2e8c8:	10c01217 	ldw	r3,72(r2)
   2e8cc:	e0800117 	ldw	r2,4(fp)
   2e8d0:	18800436 	bltu	r3,r2,2e8e4 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
   2e8d4:	e0bfff17 	ldw	r2,-4(fp)
   2e8d8:	10801703 	ldbu	r2,92(r2)
    if(dev->max_byte < length ||
   2e8dc:	10803fcc 	andi	r2,r2,255
   2e8e0:	10000226 	beq	r2,zero,2e8ec <alt_msgdma_construct_standard_descriptor+0x44>
      )
    {
        return -EINVAL;
   2e8e4:	00bffa84 	movi	r2,-22
   2e8e8:	00000e06 	br	2e924 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
   2e8ec:	e0bffe17 	ldw	r2,-8(fp)
   2e8f0:	e0fffd17 	ldw	r3,-12(fp)
   2e8f4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
   2e8f8:	e0bffe17 	ldw	r2,-8(fp)
   2e8fc:	e0fffc17 	ldw	r3,-16(fp)
   2e900:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   2e904:	e0bffe17 	ldw	r2,-8(fp)
   2e908:	e0c00117 	ldw	r3,4(fp)
   2e90c:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   2e910:	e0800217 	ldw	r2,8(fp)
   2e914:	10e00034 	orhi	r3,r2,32768
   2e918:	e0bffe17 	ldw	r2,-8(fp)
   2e91c:	10c00315 	stw	r3,12(r2)
    
    return 0;
   2e920:	0005883a 	mov	r2,zero
}
   2e924:	e037883a 	mov	sp,fp
   2e928:	df000017 	ldw	fp,0(sp)
   2e92c:	dec00104 	addi	sp,sp,4
   2e930:	f800283a 	ret

0002e934 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   2e934:	defff604 	addi	sp,sp,-40
   2e938:	df000915 	stw	fp,36(sp)
   2e93c:	df000904 	addi	fp,sp,36
   2e940:	e13fff15 	stw	r4,-4(fp)
   2e944:	e17ffe15 	stw	r5,-8(fp)
   2e948:	e1bffd15 	stw	r6,-12(fp)
   2e94c:	e1fffc15 	stw	r7,-16(fp)
   2e950:	e1800317 	ldw	r6,12(fp)
   2e954:	e1400417 	ldw	r5,16(fp)
   2e958:	e1000517 	ldw	r4,20(fp)
   2e95c:	e0c00617 	ldw	r3,24(fp)
   2e960:	e0800717 	ldw	r2,28(fp)
   2e964:	e1bffb0d 	sth	r6,-20(fp)
   2e968:	e17ffa05 	stb	r5,-24(fp)
   2e96c:	e13ff905 	stb	r4,-28(fp)
   2e970:	e0fff80d 	sth	r3,-32(fp)
   2e974:	e0bff70d 	sth	r2,-36(fp)
    if(dev->max_byte < length ||
   2e978:	e0bfff17 	ldw	r2,-4(fp)
   2e97c:	10c01217 	ldw	r3,72(r2)
   2e980:	e0800117 	ldw	r2,4(fp)
   2e984:	18801936 	bltu	r3,r2,2e9ec <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
   2e988:	e13fff17 	ldw	r4,-4(fp)
   2e98c:	20801317 	ldw	r2,76(r4)
   2e990:	20c01417 	ldw	r3,80(r4)
   2e994:	e13ff80b 	ldhu	r4,-32(fp)
   2e998:	213fffcc 	andi	r4,r4,65535
   2e99c:	2015883a 	mov	r10,r4
   2e9a0:	0017883a 	mov	r11,zero
    if(dev->max_byte < length ||
   2e9a4:	1ac01136 	bltu	r3,r11,2e9ec <alt_msgdma_construct_extended_descriptor+0xb8>
   2e9a8:	58c0011e 	bne	r11,r3,2e9b0 <alt_msgdma_construct_extended_descriptor+0x7c>
   2e9ac:	12800f36 	bltu	r2,r10,2e9ec <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
   2e9b0:	e13fff17 	ldw	r4,-4(fp)
   2e9b4:	20801317 	ldw	r2,76(r4)
   2e9b8:	20c01417 	ldw	r3,80(r4)
   2e9bc:	e13ff70b 	ldhu	r4,-36(fp)
   2e9c0:	213fffcc 	andi	r4,r4,65535
   2e9c4:	2011883a 	mov	r8,r4
   2e9c8:	0013883a 	mov	r9,zero
       dev->max_stride < read_stride ||
   2e9cc:	1a400736 	bltu	r3,r9,2e9ec <alt_msgdma_construct_extended_descriptor+0xb8>
   2e9d0:	48c0011e 	bne	r9,r3,2e9d8 <alt_msgdma_construct_extended_descriptor+0xa4>
   2e9d4:	12000536 	bltu	r2,r8,2e9ec <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->enhanced_features != 1 
   2e9d8:	e0bfff17 	ldw	r2,-4(fp)
   2e9dc:	10801703 	ldbu	r2,92(r2)
       dev->max_stride < write_stride ||
   2e9e0:	10803fcc 	andi	r2,r2,255
   2e9e4:	10800060 	cmpeqi	r2,r2,1
   2e9e8:	1000021e 	bne	r2,zero,2e9f4 <alt_msgdma_construct_extended_descriptor+0xc0>
      )
    {
        return -EINVAL;
   2e9ec:	00bffa84 	movi	r2,-22
   2e9f0:	00002106 	br	2ea78 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
   2e9f4:	e0bffe17 	ldw	r2,-8(fp)
   2e9f8:	e0fffd17 	ldw	r3,-12(fp)
   2e9fc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
   2ea00:	e0bffe17 	ldw	r2,-8(fp)
   2ea04:	e0fffc17 	ldw	r3,-16(fp)
   2ea08:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   2ea0c:	e0bffe17 	ldw	r2,-8(fp)
   2ea10:	e0c00117 	ldw	r3,4(fp)
   2ea14:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
   2ea18:	e0bffe17 	ldw	r2,-8(fp)
   2ea1c:	e0fffb0b 	ldhu	r3,-20(fp)
   2ea20:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
   2ea24:	e0bffe17 	ldw	r2,-8(fp)
   2ea28:	e0fffa03 	ldbu	r3,-24(fp)
   2ea2c:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
   2ea30:	e0bffe17 	ldw	r2,-8(fp)
   2ea34:	e0fff903 	ldbu	r3,-28(fp)
   2ea38:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
   2ea3c:	e0bffe17 	ldw	r2,-8(fp)
   2ea40:	e0fff80b 	ldhu	r3,-32(fp)
   2ea44:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
   2ea48:	e0bffe17 	ldw	r2,-8(fp)
   2ea4c:	e0fff70b 	ldhu	r3,-36(fp)
   2ea50:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
   2ea54:	e0bffe17 	ldw	r2,-8(fp)
   2ea58:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
   2ea5c:	e0bffe17 	ldw	r2,-8(fp)
   2ea60:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   2ea64:	e0800217 	ldw	r2,8(fp)
   2ea68:	10e00034 	orhi	r3,r2,32768
   2ea6c:	e0bffe17 	ldw	r2,-8(fp)
   2ea70:	10c00715 	stw	r3,28(r2)

  return 0 ;
   2ea74:	0005883a 	mov	r2,zero

}
   2ea78:	e037883a 	mov	sp,fp
   2ea7c:	df000017 	ldw	fp,0(sp)
   2ea80:	dec00104 	addi	sp,sp,4
   2ea84:	f800283a 	ret

0002ea88 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
   2ea88:	defff004 	addi	sp,sp,-64
   2ea8c:	dfc00f15 	stw	ra,60(sp)
   2ea90:	df000e15 	stw	fp,56(sp)
   2ea94:	df000e04 	addi	fp,sp,56
   2ea98:	e13ff415 	stw	r4,-48(fp)
   2ea9c:	e17ff315 	stw	r5,-52(fp)
   2eaa0:	e1bff215 	stw	r6,-56(fp)
    alt_u32 control = 0;
   2eaa4:	e03ffe15 	stw	zero,-8(fp)
    alt_irq_context context = 0;
   2eaa8:	e03ffd15 	stw	zero,-12(fp)
    alt_u16 counter = 0;
   2eaac:	e03fff8d 	sth	zero,-2(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2eab0:	e0bff417 	ldw	r2,-48(fp)
   2eab4:	10800317 	ldw	r2,12(r2)
   2eab8:	10800204 	addi	r2,r2,8
   2eabc:	10800037 	ldwio	r2,0(r2)
    alt_u32 fifo_read_fill_level = (
   2eac0:	10bfffcc 	andi	r2,r2,65535
   2eac4:	e0bffc15 	stw	r2,-16(fp)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2eac8:	e0bff417 	ldw	r2,-48(fp)
   2eacc:	10800317 	ldw	r2,12(r2)
   2ead0:	10800204 	addi	r2,r2,8
   2ead4:	10800037 	ldwio	r2,0(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
   2ead8:	1004d43a 	srli	r2,r2,16
    alt_u32 fifo_write_fill_level = (
   2eadc:	10bfffcc 	andi	r2,r2,65535
   2eae0:	e0bffb15 	stw	r2,-20(fp)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   2eae4:	e0bff417 	ldw	r2,-48(fp)
   2eae8:	10800917 	ldw	r2,36(r2)
   2eaec:	e0fffb17 	ldw	r3,-20(fp)
   2eaf0:	1880042e 	bgeu	r3,r2,2eb04 <alt_msgdma_descriptor_async_transfer+0x7c>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
   2eaf4:	e0bff417 	ldw	r2,-48(fp)
   2eaf8:	10800917 	ldw	r2,36(r2)
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   2eafc:	e0fffc17 	ldw	r3,-16(fp)
   2eb00:	18800236 	bltu	r3,r2,2eb0c <alt_msgdma_descriptor_async_transfer+0x84>
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
   2eb04:	00bff904 	movi	r2,-28
   2eb08:	00008f06 	br	2ed48 <alt_msgdma_descriptor_async_transfer+0x2c0>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
   2eb0c:	00800804 	movi	r2,32
   2eb10:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
   2eb14:	0005303a 	rdctl	r2,status
   2eb18:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eb1c:	e0fff917 	ldw	r3,-28(fp)
   2eb20:	00bfff84 	movi	r2,-2
   2eb24:	1884703a 	and	r2,r3,r2
   2eb28:	1001703a 	wrctl	status,r2
  return context;
   2eb2c:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
   2eb30:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   2eb34:	e0bff417 	ldw	r2,-48(fp)
   2eb38:	10800317 	ldw	r2,12(r2)
   2eb3c:	10800104 	addi	r2,r2,4
   2eb40:	e0fffe17 	ldw	r3,-8(fp)
   2eb44:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   2eb48:	e0bff417 	ldw	r2,-48(fp)
   2eb4c:	10800317 	ldw	r2,12(r2)
   2eb50:	e0fff417 	ldw	r3,-48(fp)
   2eb54:	18c00317 	ldw	r3,12(r3)
   2eb58:	18c00037 	ldwio	r3,0(r3)
   2eb5c:	10c00035 	stwio	r3,0(r2)
   2eb60:	e0bffd17 	ldw	r2,-12(fp)
   2eb64:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   2eb68:	e0bffa17 	ldw	r2,-24(fp)
   2eb6c:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
   2eb70:	e0bff317 	ldw	r2,-52(fp)
   2eb74:	10001a26 	beq	r2,zero,2ebe0 <alt_msgdma_descriptor_async_transfer+0x158>
   2eb78:	e0bff217 	ldw	r2,-56(fp)
   2eb7c:	1000181e 	bne	r2,zero,2ebe0 <alt_msgdma_descriptor_async_transfer+0x158>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
   2eb80:	00000d06 	br	2ebb8 <alt_msgdma_descriptor_async_transfer+0x130>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
   2eb84:	01000044 	movi	r4,1
   2eb88:	003063c0 	call	3063c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2eb8c:	e0bfff8b 	ldhu	r2,-2(fp)
   2eb90:	1084e230 	cmpltui	r2,r2,5000
   2eb94:	1000051e 	bne	r2,zero,2ebac <alt_msgdma_descriptor_async_transfer+0x124>
            {
                alt_printf("time out after 5 msec while waiting" 
   2eb98:	010000f4 	movhi	r4,3
   2eb9c:	21167004 	addi	r4,r4,22976
   2eba0:	00259a40 	call	259a4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
   2eba4:	00bff084 	movi	r2,-62
   2eba8:	00006706 	br	2ed48 <alt_msgdma_descriptor_async_transfer+0x2c0>
            }
            counter++; 
   2ebac:	e0bfff8b 	ldhu	r2,-2(fp)
   2ebb0:	10800044 	addi	r2,r2,1
   2ebb4:	e0bfff8d 	sth	r2,-2(fp)
        while(0 != alt_msgdma_write_standard_descriptor (
   2ebb8:	e0bff417 	ldw	r2,-48(fp)
   2ebbc:	10c00317 	ldw	r3,12(r2)
   2ebc0:	e0bff417 	ldw	r2,-48(fp)
   2ebc4:	10800417 	ldw	r2,16(r2)
   2ebc8:	e1bff317 	ldw	r6,-52(fp)
   2ebcc:	100b883a 	mov	r5,r2
   2ebd0:	1809883a 	mov	r4,r3
   2ebd4:	002e5640 	call	2e564 <alt_msgdma_write_standard_descriptor>
   2ebd8:	103fea1e 	bne	r2,zero,2eb84 <__alt_mem_mcu_subsystem_ram_0+0x7800eb84>
    if (NULL != standard_desc && NULL == extended_desc)
   2ebdc:	00001f06 	br	2ec5c <alt_msgdma_descriptor_async_transfer+0x1d4>
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
   2ebe0:	e0bff317 	ldw	r2,-52(fp)
   2ebe4:	10001b1e 	bne	r2,zero,2ec54 <alt_msgdma_descriptor_async_transfer+0x1cc>
   2ebe8:	e0bff217 	ldw	r2,-56(fp)
   2ebec:	10001926 	beq	r2,zero,2ec54 <alt_msgdma_descriptor_async_transfer+0x1cc>
    {
        counter = 0; /* reset counter */
   2ebf0:	e03fff8d 	sth	zero,-2(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
   2ebf4:	00000d06 	br	2ec2c <alt_msgdma_descriptor_async_transfer+0x1a4>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
   2ebf8:	01000044 	movi	r4,1
   2ebfc:	003063c0 	call	3063c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2ec00:	e0bfff8b 	ldhu	r2,-2(fp)
   2ec04:	1084e230 	cmpltui	r2,r2,5000
   2ec08:	1000051e 	bne	r2,zero,2ec20 <alt_msgdma_descriptor_async_transfer+0x198>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
   2ec0c:	010000f4 	movhi	r4,3
   2ec10:	21168604 	addi	r4,r4,23064
   2ec14:	00259a40 	call	259a4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
   2ec18:	00bff084 	movi	r2,-62
   2ec1c:	00004a06 	br	2ed48 <alt_msgdma_descriptor_async_transfer+0x2c0>
            }
            counter++; 
   2ec20:	e0bfff8b 	ldhu	r2,-2(fp)
   2ec24:	10800044 	addi	r2,r2,1
   2ec28:	e0bfff8d 	sth	r2,-2(fp)
        while(0 != alt_msgdma_write_extended_descriptor (
   2ec2c:	e0bff417 	ldw	r2,-48(fp)
   2ec30:	10c00317 	ldw	r3,12(r2)
   2ec34:	e0bff417 	ldw	r2,-48(fp)
   2ec38:	10800417 	ldw	r2,16(r2)
   2ec3c:	e1bff217 	ldw	r6,-56(fp)
   2ec40:	100b883a 	mov	r5,r2
   2ec44:	1809883a 	mov	r4,r3
   2ec48:	002e5f80 	call	2e5f8 <alt_msgdma_write_extended_descriptor>
   2ec4c:	103fea1e 	bne	r2,zero,2ebf8 <__alt_mem_mcu_subsystem_ram_0+0x7800ebf8>
    else if (NULL == standard_desc && NULL != extended_desc)
   2ec50:	00000206 	br	2ec5c <alt_msgdma_descriptor_async_transfer+0x1d4>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
   2ec54:	00bfffc4 	movi	r2,-1
   2ec58:	00003b06 	br	2ed48 <alt_msgdma_descriptor_async_transfer+0x2c0>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
   2ec5c:	e0bff417 	ldw	r2,-48(fp)
   2ec60:	10800b17 	ldw	r2,44(r2)
   2ec64:	10001c26 	beq	r2,zero,2ecd8 <alt_msgdma_descriptor_async_transfer+0x250>
    {

        control |= (dev->control |
   2ec68:	e0bff417 	ldw	r2,-48(fp)
   2ec6c:	10c00d17 	ldw	r3,52(r2)
   2ec70:	e0bffe17 	ldw	r2,-8(fp)
   2ec74:	1884b03a 	or	r2,r3,r2
   2ec78:	10800514 	ori	r2,r2,20
   2ec7c:	e0bffe15 	stw	r2,-8(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   2ec80:	e0fffe17 	ldw	r3,-8(fp)
   2ec84:	00bff7c4 	movi	r2,-33
   2ec88:	1884703a 	and	r2,r3,r2
   2ec8c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
   2ec90:	0005303a 	rdctl	r2,status
   2ec94:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ec98:	e0fff717 	ldw	r3,-36(fp)
   2ec9c:	00bfff84 	movi	r2,-2
   2eca0:	1884703a 	and	r2,r3,r2
   2eca4:	1001703a 	wrctl	status,r2
  return context;
   2eca8:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
   2ecac:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   2ecb0:	e0bff417 	ldw	r2,-48(fp)
   2ecb4:	10800317 	ldw	r2,12(r2)
   2ecb8:	10800104 	addi	r2,r2,4
   2ecbc:	e0fffe17 	ldw	r3,-8(fp)
   2ecc0:	10c00035 	stwio	r3,0(r2)
   2ecc4:	e0bffd17 	ldw	r2,-12(fp)
   2ecc8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   2eccc:	e0bff817 	ldw	r2,-32(fp)
   2ecd0:	1001703a 	wrctl	status,r2
   2ecd4:	00001b06 	br	2ed44 <alt_msgdma_descriptor_async_transfer+0x2bc>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
   2ecd8:	e0bff417 	ldw	r2,-48(fp)
   2ecdc:	10c00d17 	ldw	r3,52(r2)
   2ece0:	e0bffe17 	ldw	r2,-8(fp)
   2ece4:	1884b03a 	or	r2,r3,r2
   2ece8:	10800114 	ori	r2,r2,4
   2ecec:	e0bffe15 	stw	r2,-8(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
   2ecf0:	e0fffe17 	ldw	r3,-8(fp)
   2ecf4:	00bff3c4 	movi	r2,-49
   2ecf8:	1884703a 	and	r2,r3,r2
   2ecfc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
   2ed00:	0005303a 	rdctl	r2,status
   2ed04:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ed08:	e0fff517 	ldw	r3,-44(fp)
   2ed0c:	00bfff84 	movi	r2,-2
   2ed10:	1884703a 	and	r2,r3,r2
   2ed14:	1001703a 	wrctl	status,r2
  return context;
   2ed18:	e0bff517 	ldw	r2,-44(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
   2ed1c:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   2ed20:	e0bff417 	ldw	r2,-48(fp)
   2ed24:	10800317 	ldw	r2,12(r2)
   2ed28:	10800104 	addi	r2,r2,4
   2ed2c:	e0fffe17 	ldw	r3,-8(fp)
   2ed30:	10c00035 	stwio	r3,0(r2)
   2ed34:	e0bffd17 	ldw	r2,-12(fp)
   2ed38:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   2ed3c:	e0bff617 	ldw	r2,-40(fp)
   2ed40:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
   2ed44:	0005883a 	mov	r2,zero
}
   2ed48:	e037883a 	mov	sp,fp
   2ed4c:	dfc00117 	ldw	ra,4(sp)
   2ed50:	df000017 	ldw	fp,0(sp)
   2ed54:	dec00204 	addi	sp,sp,8
   2ed58:	f800283a 	ret

0002ed5c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
   2ed5c:	defff004 	addi	sp,sp,-64
   2ed60:	dfc00f15 	stw	ra,60(sp)
   2ed64:	df000e15 	stw	fp,56(sp)
   2ed68:	df000e04 	addi	fp,sp,56
   2ed6c:	e13ff415 	stw	r4,-48(fp)
   2ed70:	e17ff315 	stw	r5,-52(fp)
   2ed74:	e1bff215 	stw	r6,-56(fp)
    alt_u32 control=0;
   2ed78:	e03ffb15 	stw	zero,-20(fp)
    alt_irq_context context=0;
   2ed7c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 csr_status = 0;
   2ed80:	e03fff15 	stw	zero,-4(fp)
    alt_u16 counter = 0;
   2ed84:	e03ffe8d 	sth	zero,-6(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2ed88:	e0bff417 	ldw	r2,-48(fp)
   2ed8c:	10800317 	ldw	r2,12(r2)
   2ed90:	10800204 	addi	r2,r2,8
   2ed94:	10800037 	ldwio	r2,0(r2)
    alt_u32 fifo_read_fill_level = (
   2ed98:	10bfffcc 	andi	r2,r2,65535
   2ed9c:	e0bffd15 	stw	r2,-12(fp)
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2eda0:	e0bff417 	ldw	r2,-48(fp)
   2eda4:	10800317 	ldw	r2,12(r2)
   2eda8:	10800204 	addi	r2,r2,8
   2edac:	10800037 	ldwio	r2,0(r2)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
   2edb0:	1004d43a 	srli	r2,r2,16
    alt_u32 fifo_write_fill_level = (
   2edb4:	10bfffcc 	andi	r2,r2,65535
   2edb8:	e0bffc15 	stw	r2,-16(fp)
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
   2edbc:	00807804 	movi	r2,480
   2edc0:	e0bff915 	stw	r2,-28(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   2edc4:	00001a06 	br	2ee30 <alt_msgdma_descriptor_sync_transfer+0xd4>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
   2edc8:	01000044 	movi	r4,1
   2edcc:	003063c0 	call	3063c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2edd0:	e0bffe8b 	ldhu	r2,-6(fp)
   2edd4:	1084e230 	cmpltui	r2,r2,5000
   2edd8:	1000051e 	bne	r2,zero,2edf0 <alt_msgdma_descriptor_sync_transfer+0x94>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
   2eddc:	010000f4 	movhi	r4,3
   2ede0:	21169c04 	addi	r4,r4,23152
   2ede4:	00259a40 	call	259a4 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
   2ede8:	00bff084 	movi	r2,-62
   2edec:	0000b606 	br	2f0c8 <alt_msgdma_descriptor_sync_transfer+0x36c>
        }
        counter++;  
   2edf0:	e0bffe8b 	ldhu	r2,-6(fp)
   2edf4:	10800044 	addi	r2,r2,1
   2edf8:	e0bffe8d 	sth	r2,-6(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2edfc:	e0bff417 	ldw	r2,-48(fp)
   2ee00:	10800317 	ldw	r2,12(r2)
   2ee04:	10800204 	addi	r2,r2,8
   2ee08:	10800037 	ldwio	r2,0(r2)
        fifo_read_fill_level = (
   2ee0c:	10bfffcc 	andi	r2,r2,65535
   2ee10:	e0bffd15 	stw	r2,-12(fp)
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
   2ee14:	e0bff417 	ldw	r2,-48(fp)
   2ee18:	10800317 	ldw	r2,12(r2)
   2ee1c:	10800204 	addi	r2,r2,8
   2ee20:	10800037 	ldwio	r2,0(r2)
            ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
   2ee24:	1004d43a 	srli	r2,r2,16
        fifo_write_fill_level = (
   2ee28:	10bfffcc 	andi	r2,r2,65535
   2ee2c:	e0bffc15 	stw	r2,-16(fp)
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   2ee30:	e0bff417 	ldw	r2,-48(fp)
   2ee34:	10800917 	ldw	r2,36(r2)
   2ee38:	e0fffc17 	ldw	r3,-16(fp)
   2ee3c:	18bfe22e 	bgeu	r3,r2,2edc8 <__alt_mem_mcu_subsystem_ram_0+0x7800edc8>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
   2ee40:	e0bff417 	ldw	r2,-48(fp)
   2ee44:	10800917 	ldw	r2,36(r2)
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
   2ee48:	e0fffd17 	ldw	r3,-12(fp)
   2ee4c:	18bfde2e 	bgeu	r3,r2,2edc8 <__alt_mem_mcu_subsystem_ram_0+0x7800edc8>
  NIOS2_READ_STATUS (context);
   2ee50:	0005303a 	rdctl	r2,status
   2ee54:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ee58:	e0fff817 	ldw	r3,-32(fp)
   2ee5c:	00bfff84 	movi	r2,-2
   2ee60:	1884703a 	and	r2,r3,r2
   2ee64:	1001703a 	wrctl	status,r2
  return context;
   2ee68:	e0bff817 	ldw	r2,-32(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
   2ee6c:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
   2ee70:	e0bff417 	ldw	r2,-48(fp)
   2ee74:	10800317 	ldw	r2,12(r2)
   2ee78:	10800104 	addi	r2,r2,4
   2ee7c:	00c00804 	movi	r3,32
   2ee80:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   2ee84:	e0bff417 	ldw	r2,-48(fp)
   2ee88:	10800317 	ldw	r2,12(r2)
   2ee8c:	e0fff417 	ldw	r3,-48(fp)
   2ee90:	18c00317 	ldw	r3,12(r3)
   2ee94:	18c00037 	ldwio	r3,0(r3)
   2ee98:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
   2ee9c:	e0bff317 	ldw	r2,-52(fp)
   2eea0:	10001b26 	beq	r2,zero,2ef10 <alt_msgdma_descriptor_sync_transfer+0x1b4>
   2eea4:	e0bff217 	ldw	r2,-56(fp)
   2eea8:	1000191e 	bne	r2,zero,2ef10 <alt_msgdma_descriptor_sync_transfer+0x1b4>
    {
        counter = 0; /* reset counter */
   2eeac:	e03ffe8d 	sth	zero,-6(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
   2eeb0:	00000d06 	br	2eee8 <alt_msgdma_descriptor_sync_transfer+0x18c>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
   2eeb4:	01000044 	movi	r4,1
   2eeb8:	003063c0 	call	3063c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2eebc:	e0bffe8b 	ldhu	r2,-6(fp)
   2eec0:	1084e230 	cmpltui	r2,r2,5000
   2eec4:	1000051e 	bne	r2,zero,2eedc <alt_msgdma_descriptor_sync_transfer+0x180>
            {
                alt_printf("time out after 5 msec while writing standard" 
   2eec8:	010000f4 	movhi	r4,3
   2eecc:	2116b004 	addi	r4,r4,23232
   2eed0:	00259a40 	call	259a4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
   2eed4:	00bff084 	movi	r2,-62
   2eed8:	00007b06 	br	2f0c8 <alt_msgdma_descriptor_sync_transfer+0x36c>
            }
            counter++;    
   2eedc:	e0bffe8b 	ldhu	r2,-6(fp)
   2eee0:	10800044 	addi	r2,r2,1
   2eee4:	e0bffe8d 	sth	r2,-6(fp)
        while(0 != alt_msgdma_write_standard_descriptor (
   2eee8:	e0bff417 	ldw	r2,-48(fp)
   2eeec:	10c00317 	ldw	r3,12(r2)
   2eef0:	e0bff417 	ldw	r2,-48(fp)
   2eef4:	10800417 	ldw	r2,16(r2)
   2eef8:	e1bff317 	ldw	r6,-52(fp)
   2eefc:	100b883a 	mov	r5,r2
   2ef00:	1809883a 	mov	r4,r3
   2ef04:	002e5640 	call	2e564 <alt_msgdma_write_standard_descriptor>
   2ef08:	103fea1e 	bne	r2,zero,2eeb4 <__alt_mem_mcu_subsystem_ram_0+0x7800eeb4>
    if (NULL != standard_desc && NULL == extended_desc)
   2ef0c:	00001f06 	br	2ef8c <alt_msgdma_descriptor_sync_transfer+0x230>
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
   2ef10:	e0bff317 	ldw	r2,-52(fp)
   2ef14:	10001b1e 	bne	r2,zero,2ef84 <alt_msgdma_descriptor_sync_transfer+0x228>
   2ef18:	e0bff217 	ldw	r2,-56(fp)
   2ef1c:	10001926 	beq	r2,zero,2ef84 <alt_msgdma_descriptor_sync_transfer+0x228>
    {
        counter = 0; /* reset counter */
   2ef20:	e03ffe8d 	sth	zero,-6(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
   2ef24:	00000d06 	br	2ef5c <alt_msgdma_descriptor_sync_transfer+0x200>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
   2ef28:	01000044 	movi	r4,1
   2ef2c:	003063c0 	call	3063c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2ef30:	e0bffe8b 	ldhu	r2,-6(fp)
   2ef34:	1084e230 	cmpltui	r2,r2,5000
   2ef38:	1000051e 	bne	r2,zero,2ef50 <alt_msgdma_descriptor_sync_transfer+0x1f4>
            {
                alt_printf("time out after 5 msec while writing extended" 
   2ef3c:	010000f4 	movhi	r4,3
   2ef40:	2116c104 	addi	r4,r4,23300
   2ef44:	00259a40 	call	259a4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
   2ef48:	00bff084 	movi	r2,-62
   2ef4c:	00005e06 	br	2f0c8 <alt_msgdma_descriptor_sync_transfer+0x36c>
            }
            counter++;
   2ef50:	e0bffe8b 	ldhu	r2,-6(fp)
   2ef54:	10800044 	addi	r2,r2,1
   2ef58:	e0bffe8d 	sth	r2,-6(fp)
        while(0 != alt_msgdma_write_extended_descriptor (
   2ef5c:	e0bff417 	ldw	r2,-48(fp)
   2ef60:	10c00317 	ldw	r3,12(r2)
   2ef64:	e0bff417 	ldw	r2,-48(fp)
   2ef68:	10800417 	ldw	r2,16(r2)
   2ef6c:	e1bff217 	ldw	r6,-56(fp)
   2ef70:	100b883a 	mov	r5,r2
   2ef74:	1809883a 	mov	r4,r3
   2ef78:	002e5f80 	call	2e5f8 <alt_msgdma_write_extended_descriptor>
   2ef7c:	103fea1e 	bne	r2,zero,2ef28 <__alt_mem_mcu_subsystem_ram_0+0x7800ef28>
    else if (NULL == standard_desc && NULL != extended_desc)
   2ef80:	00000206 	br	2ef8c <alt_msgdma_descriptor_sync_transfer+0x230>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
   2ef84:	00bfffc4 	movi	r2,-1
   2ef88:	00004f06 	br	2f0c8 <alt_msgdma_descriptor_sync_transfer+0x36c>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
   2ef8c:	e0bff417 	ldw	r2,-48(fp)
   2ef90:	10800317 	ldw	r2,12(r2)
   2ef94:	10800104 	addi	r2,r2,4
   2ef98:	e0fff417 	ldw	r3,-48(fp)
   2ef9c:	19000d17 	ldw	r4,52(r3)
   2efa0:	00fff2c4 	movi	r3,-53
   2efa4:	20c6703a 	and	r3,r4,r3
   2efa8:	18c00114 	ori	r3,r3,4
   2efac:	10c00035 	stwio	r3,0(r2)
   2efb0:	e0bffa17 	ldw	r2,-24(fp)
   2efb4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   2efb8:	e0bff717 	ldw	r2,-36(fp)
   2efbc:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
   2efc0:	e03ffe8d 	sth	zero,-6(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
   2efc4:	e0bff417 	ldw	r2,-48(fp)
   2efc8:	10800317 	ldw	r2,12(r2)
   2efcc:	10800037 	ldwio	r2,0(r2)
   2efd0:	e0bfff15 	stw	r2,-4(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
   2efd4:	00001106 	br	2f01c <alt_msgdma_descriptor_sync_transfer+0x2c0>
    {
        alt_busy_sleep(1); /* delay 1us */
   2efd8:	01000044 	movi	r4,1
   2efdc:	003063c0 	call	3063c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
   2efe0:	e0bffe8b 	ldhu	r2,-6(fp)
   2efe4:	1084e230 	cmpltui	r2,r2,5000
   2efe8:	1000051e 	bne	r2,zero,2f000 <alt_msgdma_descriptor_sync_transfer+0x2a4>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
   2efec:	010000f4 	movhi	r4,3
   2eff0:	2116d204 	addi	r4,r4,23368
   2eff4:	00259a40 	call	259a4 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
   2eff8:	00bff084 	movi	r2,-62
   2effc:	00003206 	br	2f0c8 <alt_msgdma_descriptor_sync_transfer+0x36c>
        }
        counter++;
   2f000:	e0bffe8b 	ldhu	r2,-6(fp)
   2f004:	10800044 	addi	r2,r2,1
   2f008:	e0bffe8d 	sth	r2,-6(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
   2f00c:	e0bff417 	ldw	r2,-48(fp)
   2f010:	10800317 	ldw	r2,12(r2)
   2f014:	10800037 	ldwio	r2,0(r2)
   2f018:	e0bfff15 	stw	r2,-4(fp)
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
   2f01c:	e0ffff17 	ldw	r3,-4(fp)
   2f020:	e0bff917 	ldw	r2,-28(fp)
   2f024:	1884703a 	and	r2,r3,r2
   2f028:	1000031e 	bne	r2,zero,2f038 <alt_msgdma_descriptor_sync_transfer+0x2dc>
   2f02c:	e0bfff17 	ldw	r2,-4(fp)
   2f030:	1080004c 	andi	r2,r2,1
   2f034:	103fe81e 	bne	r2,zero,2efd8 <__alt_mem_mcu_subsystem_ram_0+0x7800efd8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
   2f038:	e0ffff17 	ldw	r3,-4(fp)
   2f03c:	e0bff917 	ldw	r2,-28(fp)
   2f040:	1884703a 	and	r2,r3,r2
   2f044:	10000226 	beq	r2,zero,2f050 <alt_msgdma_descriptor_sync_transfer+0x2f4>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
   2f048:	e0bff917 	ldw	r2,-28(fp)
   2f04c:	00001e06 	br	2f0c8 <alt_msgdma_descriptor_sync_transfer+0x36c>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
   2f050:	e0bff417 	ldw	r2,-48(fp)
   2f054:	10800317 	ldw	r2,12(r2)
   2f058:	10800104 	addi	r2,r2,4
   2f05c:	10800037 	ldwio	r2,0(r2)
   2f060:	10800814 	ori	r2,r2,32
   2f064:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_READ_STATUS (context);
   2f068:	0005303a 	rdctl	r2,status
   2f06c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f070:	e0fff517 	ldw	r3,-44(fp)
   2f074:	00bfff84 	movi	r2,-2
   2f078:	1884703a 	and	r2,r3,r2
   2f07c:	1001703a 	wrctl	status,r2
  return context;
   2f080:	e0bff517 	ldw	r2,-44(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
   2f084:	e0bffa15 	stw	r2,-24(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
   2f088:	e0bff417 	ldw	r2,-48(fp)
   2f08c:	10800317 	ldw	r2,12(r2)
   2f090:	10800104 	addi	r2,r2,4
   2f094:	e0fffb17 	ldw	r3,-20(fp)
   2f098:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
   2f09c:	e0bff417 	ldw	r2,-48(fp)
   2f0a0:	10800317 	ldw	r2,12(r2)
   2f0a4:	e0fff417 	ldw	r3,-48(fp)
   2f0a8:	18c00317 	ldw	r3,12(r3)
   2f0ac:	18c00037 	ldwio	r3,0(r3)
   2f0b0:	10c00035 	stwio	r3,0(r2)
   2f0b4:	e0bffa17 	ldw	r2,-24(fp)
   2f0b8:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   2f0bc:	e0bff617 	ldw	r2,-40(fp)
   2f0c0:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
   2f0c4:	0005883a 	mov	r2,zero

}
   2f0c8:	e037883a 	mov	sp,fp
   2f0cc:	dfc00117 	ldw	ra,4(sp)
   2f0d0:	df000017 	ldw	fp,0(sp)
   2f0d4:	dec00204 	addi	sp,sp,8
   2f0d8:	f800283a 	ret

0002f0dc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
   2f0dc:	defff804 	addi	sp,sp,-32
   2f0e0:	dfc00715 	stw	ra,28(sp)
   2f0e4:	df000615 	stw	fp,24(sp)
   2f0e8:	df000604 	addi	fp,sp,24
   2f0ec:	e13fff15 	stw	r4,-4(fp)
   2f0f0:	e17ffe15 	stw	r5,-8(fp)
   2f0f4:	e1bffd15 	stw	r6,-12(fp)
   2f0f8:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
   2f0fc:	e0800217 	ldw	r2,8(fp)
   2f100:	d8800115 	stw	r2,4(sp)
   2f104:	e0bffc17 	ldw	r2,-16(fp)
   2f108:	d8800015 	stw	r2,0(sp)
   2f10c:	e1fffd17 	ldw	r7,-12(fp)
   2f110:	000d883a 	mov	r6,zero
   2f114:	e17ffe17 	ldw	r5,-8(fp)
   2f118:	e13fff17 	ldw	r4,-4(fp)
   2f11c:	002e8a80 	call	2e8a8 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
   2f120:	e037883a 	mov	sp,fp
   2f124:	dfc00117 	ldw	ra,4(sp)
   2f128:	df000017 	ldw	fp,0(sp)
   2f12c:	dec00204 	addi	sp,sp,8
   2f130:	f800283a 	ret

0002f134 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
   2f134:	defff804 	addi	sp,sp,-32
   2f138:	dfc00715 	stw	ra,28(sp)
   2f13c:	df000615 	stw	fp,24(sp)
   2f140:	df000604 	addi	fp,sp,24
   2f144:	e13fff15 	stw	r4,-4(fp)
   2f148:	e17ffe15 	stw	r5,-8(fp)
   2f14c:	e1bffd15 	stw	r6,-12(fp)
   2f150:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
   2f154:	e0800217 	ldw	r2,8(fp)
   2f158:	d8800115 	stw	r2,4(sp)
   2f15c:	e0bffc17 	ldw	r2,-16(fp)
   2f160:	d8800015 	stw	r2,0(sp)
   2f164:	000f883a 	mov	r7,zero
   2f168:	e1bffd17 	ldw	r6,-12(fp)
   2f16c:	e17ffe17 	ldw	r5,-8(fp)
   2f170:	e13fff17 	ldw	r4,-4(fp)
   2f174:	002e8a80 	call	2e8a8 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
   2f178:	e037883a 	mov	sp,fp
   2f17c:	dfc00117 	ldw	ra,4(sp)
   2f180:	df000017 	ldw	fp,0(sp)
   2f184:	dec00204 	addi	sp,sp,8
   2f188:	f800283a 	ret

0002f18c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
   2f18c:	defff804 	addi	sp,sp,-32
   2f190:	dfc00715 	stw	ra,28(sp)
   2f194:	df000615 	stw	fp,24(sp)
   2f198:	df000604 	addi	fp,sp,24
   2f19c:	e13fff15 	stw	r4,-4(fp)
   2f1a0:	e17ffe15 	stw	r5,-8(fp)
   2f1a4:	e1bffd15 	stw	r6,-12(fp)
   2f1a8:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
   2f1ac:	e0800317 	ldw	r2,12(fp)
   2f1b0:	d8800115 	stw	r2,4(sp)
   2f1b4:	e0800217 	ldw	r2,8(fp)
   2f1b8:	d8800015 	stw	r2,0(sp)
   2f1bc:	e1fffc17 	ldw	r7,-16(fp)
   2f1c0:	e1bffd17 	ldw	r6,-12(fp)
   2f1c4:	e17ffe17 	ldw	r5,-8(fp)
   2f1c8:	e13fff17 	ldw	r4,-4(fp)
   2f1cc:	002e8a80 	call	2e8a8 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
   2f1d0:	e037883a 	mov	sp,fp
   2f1d4:	dfc00117 	ldw	ra,4(sp)
   2f1d8:	df000017 	ldw	fp,0(sp)
   2f1dc:	dec00204 	addi	sp,sp,8
   2f1e0:	f800283a 	ret

0002f1e4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
   2f1e4:	defff004 	addi	sp,sp,-64
   2f1e8:	dfc00f15 	stw	ra,60(sp)
   2f1ec:	df000e15 	stw	fp,56(sp)
   2f1f0:	df000e04 	addi	fp,sp,56
   2f1f4:	e13fff15 	stw	r4,-4(fp)
   2f1f8:	e17ffe15 	stw	r5,-8(fp)
   2f1fc:	e1bffd15 	stw	r6,-12(fp)
   2f200:	e1fffc15 	stw	r7,-16(fp)
   2f204:	e1000317 	ldw	r4,12(fp)
   2f208:	e0c00417 	ldw	r3,16(fp)
   2f20c:	e0800517 	ldw	r2,20(fp)
   2f210:	e13ffb0d 	sth	r4,-20(fp)
   2f214:	e0fffa05 	stb	r3,-24(fp)
   2f218:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
   2f21c:	e0bffb0b 	ldhu	r2,-20(fp)
   2f220:	e0fffa03 	ldbu	r3,-24(fp)
   2f224:	e13ff90b 	ldhu	r4,-28(fp)
   2f228:	d9000615 	stw	r4,24(sp)
   2f22c:	d8000515 	stw	zero,20(sp)
   2f230:	d8c00415 	stw	r3,16(sp)
   2f234:	d8000315 	stw	zero,12(sp)
   2f238:	d8800215 	stw	r2,8(sp)
   2f23c:	e0800217 	ldw	r2,8(fp)
   2f240:	d8800115 	stw	r2,4(sp)
   2f244:	e0bffc17 	ldw	r2,-16(fp)
   2f248:	d8800015 	stw	r2,0(sp)
   2f24c:	e1fffd17 	ldw	r7,-12(fp)
   2f250:	000d883a 	mov	r6,zero
   2f254:	e17ffe17 	ldw	r5,-8(fp)
   2f258:	e13fff17 	ldw	r4,-4(fp)
   2f25c:	002e9340 	call	2e934 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
   2f260:	e037883a 	mov	sp,fp
   2f264:	dfc00117 	ldw	ra,4(sp)
   2f268:	df000017 	ldw	fp,0(sp)
   2f26c:	dec00204 	addi	sp,sp,8
   2f270:	f800283a 	ret

0002f274 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
   2f274:	defff004 	addi	sp,sp,-64
   2f278:	dfc00f15 	stw	ra,60(sp)
   2f27c:	df000e15 	stw	fp,56(sp)
   2f280:	df000e04 	addi	fp,sp,56
   2f284:	e13fff15 	stw	r4,-4(fp)
   2f288:	e17ffe15 	stw	r5,-8(fp)
   2f28c:	e1bffd15 	stw	r6,-12(fp)
   2f290:	e1fffc15 	stw	r7,-16(fp)
   2f294:	e1000317 	ldw	r4,12(fp)
   2f298:	e0c00417 	ldw	r3,16(fp)
   2f29c:	e0800517 	ldw	r2,20(fp)
   2f2a0:	e13ffb0d 	sth	r4,-20(fp)
   2f2a4:	e0fffa05 	stb	r3,-24(fp)
   2f2a8:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
   2f2ac:	e0bffb0b 	ldhu	r2,-20(fp)
   2f2b0:	e0fffa03 	ldbu	r3,-24(fp)
   2f2b4:	e13ff90b 	ldhu	r4,-28(fp)
   2f2b8:	d8000615 	stw	zero,24(sp)
   2f2bc:	d9000515 	stw	r4,20(sp)
   2f2c0:	d8000415 	stw	zero,16(sp)
   2f2c4:	d8c00315 	stw	r3,12(sp)
   2f2c8:	d8800215 	stw	r2,8(sp)
   2f2cc:	e0800217 	ldw	r2,8(fp)
   2f2d0:	d8800115 	stw	r2,4(sp)
   2f2d4:	e0bffc17 	ldw	r2,-16(fp)
   2f2d8:	d8800015 	stw	r2,0(sp)
   2f2dc:	000f883a 	mov	r7,zero
   2f2e0:	e1bffd17 	ldw	r6,-12(fp)
   2f2e4:	e17ffe17 	ldw	r5,-8(fp)
   2f2e8:	e13fff17 	ldw	r4,-4(fp)
   2f2ec:	002e9340 	call	2e934 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
   2f2f0:	e037883a 	mov	sp,fp
   2f2f4:	dfc00117 	ldw	ra,4(sp)
   2f2f8:	df000017 	ldw	fp,0(sp)
   2f2fc:	dec00204 	addi	sp,sp,8
   2f300:	f800283a 	ret

0002f304 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   2f304:	deffee04 	addi	sp,sp,-72
   2f308:	dfc01115 	stw	ra,68(sp)
   2f30c:	df001015 	stw	fp,64(sp)
   2f310:	df001004 	addi	fp,sp,64
   2f314:	e13fff15 	stw	r4,-4(fp)
   2f318:	e17ffe15 	stw	r5,-8(fp)
   2f31c:	e1bffd15 	stw	r6,-12(fp)
   2f320:	e1fffc15 	stw	r7,-16(fp)
   2f324:	e1800417 	ldw	r6,16(fp)
   2f328:	e1400517 	ldw	r5,20(fp)
   2f32c:	e1000617 	ldw	r4,24(fp)
   2f330:	e0c00717 	ldw	r3,28(fp)
   2f334:	e0800817 	ldw	r2,32(fp)
   2f338:	e1bffb0d 	sth	r6,-20(fp)
   2f33c:	e17ffa05 	stb	r5,-24(fp)
   2f340:	e13ff905 	stb	r4,-28(fp)
   2f344:	e0fff80d 	sth	r3,-32(fp)
   2f348:	e0bff70d 	sth	r2,-36(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
   2f34c:	e0bffb0b 	ldhu	r2,-20(fp)
   2f350:	e0fffa03 	ldbu	r3,-24(fp)
   2f354:	e13ff903 	ldbu	r4,-28(fp)
   2f358:	e17ff80b 	ldhu	r5,-32(fp)
   2f35c:	e1bff70b 	ldhu	r6,-36(fp)
   2f360:	d9800615 	stw	r6,24(sp)
   2f364:	d9400515 	stw	r5,20(sp)
   2f368:	d9000415 	stw	r4,16(sp)
   2f36c:	d8c00315 	stw	r3,12(sp)
   2f370:	d8800215 	stw	r2,8(sp)
   2f374:	e0800317 	ldw	r2,12(fp)
   2f378:	d8800115 	stw	r2,4(sp)
   2f37c:	e0800217 	ldw	r2,8(fp)
   2f380:	d8800015 	stw	r2,0(sp)
   2f384:	e1fffc17 	ldw	r7,-16(fp)
   2f388:	e1bffd17 	ldw	r6,-12(fp)
   2f38c:	e17ffe17 	ldw	r5,-8(fp)
   2f390:	e13fff17 	ldw	r4,-4(fp)
   2f394:	002e9340 	call	2e934 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
   2f398:	e037883a 	mov	sp,fp
   2f39c:	dfc00117 	ldw	ra,4(sp)
   2f3a0:	df000017 	ldw	fp,0(sp)
   2f3a4:	dec00204 	addi	sp,sp,8
   2f3a8:	f800283a 	ret

0002f3ac <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
   2f3ac:	defffb04 	addi	sp,sp,-20
   2f3b0:	df000415 	stw	fp,16(sp)
   2f3b4:	df000404 	addi	fp,sp,16
   2f3b8:	e13fff15 	stw	r4,-4(fp)
   2f3bc:	e17ffe15 	stw	r5,-8(fp)
   2f3c0:	e1bffd15 	stw	r6,-12(fp)
   2f3c4:	e1fffc15 	stw	r7,-16(fp)
    if(dev->max_byte < length ||
   2f3c8:	e0bfff17 	ldw	r2,-4(fp)
   2f3cc:	10c01217 	ldw	r3,72(r2)
   2f3d0:	e0800117 	ldw	r2,4(fp)
   2f3d4:	18800436 	bltu	r3,r2,2f3e8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
   2f3d8:	e0bfff17 	ldw	r2,-4(fp)
   2f3dc:	10801703 	ldbu	r2,92(r2)
    if(dev->max_byte < length ||
   2f3e0:	10803fcc 	andi	r2,r2,255
   2f3e4:	10000226 	beq	r2,zero,2f3f0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
      )
    {
        return -EINVAL;
   2f3e8:	00bffa84 	movi	r2,-22
   2f3ec:	00001406 	br	2f440 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
   2f3f0:	e0bffe17 	ldw	r2,-8(fp)
   2f3f4:	e0fffd17 	ldw	r3,-12(fp)
   2f3f8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
   2f3fc:	e0bffe17 	ldw	r2,-8(fp)
   2f400:	e0fffc17 	ldw	r3,-16(fp)
   2f404:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   2f408:	e0bffe17 	ldw	r2,-8(fp)
   2f40c:	e0c00117 	ldw	r3,4(fp)
   2f410:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
   2f414:	e0fffe17 	ldw	r3,-8(fp)
   2f418:	e0bffe17 	ldw	r2,-8(fp)
   2f41c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   2f420:	e0c00217 	ldw	r3,8(fp)
   2f424:	00900034 	movhi	r2,16384
   2f428:	10bfffc4 	addi	r2,r2,-1
   2f42c:	1884703a 	and	r2,r3,r2
   2f430:	10e00034 	orhi	r3,r2,32768
    descriptor->control = (control 
   2f434:	e0bffe17 	ldw	r2,-8(fp)
   2f438:	10c00715 	stw	r3,28(r2)
    
    return 0;
   2f43c:	0005883a 	mov	r2,zero
}
   2f440:	e037883a 	mov	sp,fp
   2f444:	df000017 	ldw	fp,0(sp)
   2f448:	dec00104 	addi	sp,sp,4
   2f44c:	f800283a 	ret

0002f450 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   2f450:	defff404 	addi	sp,sp,-48
   2f454:	df000b15 	stw	fp,44(sp)
   2f458:	df000b04 	addi	fp,sp,44
   2f45c:	e13ffd15 	stw	r4,-12(fp)
   2f460:	e17ffc15 	stw	r5,-16(fp)
   2f464:	e1bffb15 	stw	r6,-20(fp)
   2f468:	e1fffa15 	stw	r7,-24(fp)
   2f46c:	e1800517 	ldw	r6,20(fp)
   2f470:	e1400617 	ldw	r5,24(fp)
   2f474:	e1000717 	ldw	r4,28(fp)
   2f478:	e0c00817 	ldw	r3,32(fp)
   2f47c:	e0800917 	ldw	r2,36(fp)
   2f480:	e1bff90d 	sth	r6,-28(fp)
   2f484:	e17ff805 	stb	r5,-32(fp)
   2f488:	e13ff705 	stb	r4,-36(fp)
   2f48c:	e0fff60d 	sth	r3,-40(fp)
   2f490:	e0bff50d 	sth	r2,-44(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
   2f494:	e0bffd17 	ldw	r2,-12(fp)
   2f498:	10c01217 	ldw	r3,72(r2)
   2f49c:	e0800317 	ldw	r2,12(fp)
   2f4a0:	18801936 	bltu	r3,r2,2f508 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
   2f4a4:	e13ffd17 	ldw	r4,-12(fp)
   2f4a8:	20801317 	ldw	r2,76(r4)
   2f4ac:	20c01417 	ldw	r3,80(r4)
   2f4b0:	e13ff60b 	ldhu	r4,-40(fp)
   2f4b4:	213fffcc 	andi	r4,r4,65535
   2f4b8:	2015883a 	mov	r10,r4
   2f4bc:	0017883a 	mov	r11,zero
    if(dev->max_byte < length ||
   2f4c0:	1ac01136 	bltu	r3,r11,2f508 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
   2f4c4:	58c0011e 	bne	r11,r3,2f4cc <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
   2f4c8:	12800f36 	bltu	r2,r10,2f508 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
   2f4cc:	e13ffd17 	ldw	r4,-12(fp)
   2f4d0:	20801317 	ldw	r2,76(r4)
   2f4d4:	20c01417 	ldw	r3,80(r4)
   2f4d8:	e13ff50b 	ldhu	r4,-44(fp)
   2f4dc:	213fffcc 	andi	r4,r4,65535
   2f4e0:	2011883a 	mov	r8,r4
   2f4e4:	0013883a 	mov	r9,zero
       dev->max_stride < read_stride ||
   2f4e8:	1a400736 	bltu	r3,r9,2f508 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
   2f4ec:	48c0011e 	bne	r9,r3,2f4f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
   2f4f0:	12000536 	bltu	r2,r8,2f508 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->enhanced_features != 1 
   2f4f4:	e0bffd17 	ldw	r2,-12(fp)
   2f4f8:	10801703 	ldbu	r2,92(r2)
       dev->max_stride < write_stride ||
   2f4fc:	10803fcc 	andi	r2,r2,255
   2f500:	10800060 	cmpeqi	r2,r2,1
   2f504:	1000021e 	bne	r2,zero,2f510 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
      )
    {
        return -EINVAL;
   2f508:	00bffa84 	movi	r2,-22
   2f50c:	00003106 	br	2f5d4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
   2f510:	e0bffc17 	ldw	r2,-16(fp)
   2f514:	e0fffb17 	ldw	r3,-20(fp)
   2f518:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
   2f51c:	e0bffc17 	ldw	r2,-16(fp)
   2f520:	e0fffa17 	ldw	r3,-24(fp)
   2f524:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
   2f528:	e0bffc17 	ldw	r2,-16(fp)
   2f52c:	e0c00117 	ldw	r3,4(fp)
   2f530:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
   2f534:	e0bffc17 	ldw	r2,-16(fp)
   2f538:	e0c00217 	ldw	r3,8(fp)
   2f53c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
   2f540:	e0bffc17 	ldw	r2,-16(fp)
   2f544:	e0c00317 	ldw	r3,12(fp)
   2f548:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
   2f54c:	e0bffc17 	ldw	r2,-16(fp)
   2f550:	e0fff90b 	ldhu	r3,-28(fp)
   2f554:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
   2f558:	e0bffc17 	ldw	r2,-16(fp)
   2f55c:	e0fff803 	ldbu	r3,-32(fp)
   2f560:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
   2f564:	e0bffc17 	ldw	r2,-16(fp)
   2f568:	e0fff703 	ldbu	r3,-36(fp)
   2f56c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
   2f570:	e0bffc17 	ldw	r2,-16(fp)
   2f574:	e0fff60b 	ldhu	r3,-40(fp)
   2f578:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
   2f57c:	e0bffc17 	ldw	r2,-16(fp)
   2f580:	e0fff50b 	ldhu	r3,-44(fp)
   2f584:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
   2f588:	e0bffc17 	ldw	r2,-16(fp)
   2f58c:	1019883a 	mov	r12,r2
   2f590:	001b883a 	mov	r13,zero
   2f594:	e33ffe15 	stw	r12,-8(fp)
   2f598:	e37fff15 	stw	r13,-4(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
   2f59c:	e0fffe17 	ldw	r3,-8(fp)
   2f5a0:	e0bffc17 	ldw	r2,-16(fp)
   2f5a4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
   2f5a8:	e0ffff17 	ldw	r3,-4(fp)
   2f5ac:	e0bffc17 	ldw	r2,-16(fp)
   2f5b0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
   2f5b4:	e0c00417 	ldw	r3,16(fp)
   2f5b8:	00900034 	movhi	r2,16384
   2f5bc:	10bfffc4 	addi	r2,r2,-1
   2f5c0:	1884703a 	and	r2,r3,r2
   2f5c4:	10e00034 	orhi	r3,r2,32768
    descriptor->control = (control 
   2f5c8:	e0bffc17 	ldw	r2,-16(fp)
   2f5cc:	10c00f15 	stw	r3,60(r2)

  return 0 ;
   2f5d0:	0005883a 	mov	r2,zero
}
   2f5d4:	e037883a 	mov	sp,fp
   2f5d8:	df000017 	ldw	fp,0(sp)
   2f5dc:	dec00104 	addi	sp,sp,4
   2f5e0:	f800283a 	ret

0002f5e4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
   2f5e4:	defff804 	addi	sp,sp,-32
   2f5e8:	dfc00715 	stw	ra,28(sp)
   2f5ec:	df000615 	stw	fp,24(sp)
   2f5f0:	df000604 	addi	fp,sp,24
   2f5f4:	e13fff15 	stw	r4,-4(fp)
   2f5f8:	e17ffe15 	stw	r5,-8(fp)
   2f5fc:	e1bffd15 	stw	r6,-12(fp)
   2f600:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
   2f604:	e0800317 	ldw	r2,12(fp)
   2f608:	d8800115 	stw	r2,4(sp)
   2f60c:	e0800217 	ldw	r2,8(fp)
   2f610:	d8800015 	stw	r2,0(sp)
   2f614:	e1fffc17 	ldw	r7,-16(fp)
   2f618:	e1bffd17 	ldw	r6,-12(fp)
   2f61c:	e17ffe17 	ldw	r5,-8(fp)
   2f620:	e13fff17 	ldw	r4,-4(fp)
   2f624:	002f3ac0 	call	2f3ac <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
   2f628:	e037883a 	mov	sp,fp
   2f62c:	dfc00117 	ldw	ra,4(sp)
   2f630:	df000017 	ldw	fp,0(sp)
   2f634:	dec00204 	addi	sp,sp,8
   2f638:	f800283a 	ret

0002f63c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
   2f63c:	defff804 	addi	sp,sp,-32
   2f640:	dfc00715 	stw	ra,28(sp)
   2f644:	df000615 	stw	fp,24(sp)
   2f648:	df000604 	addi	fp,sp,24
   2f64c:	e13fff15 	stw	r4,-4(fp)
   2f650:	e17ffe15 	stw	r5,-8(fp)
   2f654:	e1bffd15 	stw	r6,-12(fp)
   2f658:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
   2f65c:	e0800217 	ldw	r2,8(fp)
   2f660:	d8800115 	stw	r2,4(sp)
   2f664:	e0bffc17 	ldw	r2,-16(fp)
   2f668:	d8800015 	stw	r2,0(sp)
   2f66c:	e1fffd17 	ldw	r7,-12(fp)
   2f670:	000d883a 	mov	r6,zero
   2f674:	e17ffe17 	ldw	r5,-8(fp)
   2f678:	e13fff17 	ldw	r4,-4(fp)
   2f67c:	002f3ac0 	call	2f3ac <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
   2f680:	e037883a 	mov	sp,fp
   2f684:	dfc00117 	ldw	ra,4(sp)
   2f688:	df000017 	ldw	fp,0(sp)
   2f68c:	dec00204 	addi	sp,sp,8
   2f690:	f800283a 	ret

0002f694 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
   2f694:	defff804 	addi	sp,sp,-32
   2f698:	dfc00715 	stw	ra,28(sp)
   2f69c:	df000615 	stw	fp,24(sp)
   2f6a0:	df000604 	addi	fp,sp,24
   2f6a4:	e13fff15 	stw	r4,-4(fp)
   2f6a8:	e17ffe15 	stw	r5,-8(fp)
   2f6ac:	e1bffd15 	stw	r6,-12(fp)
   2f6b0:	e1fffc15 	stw	r7,-16(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
   2f6b4:	e0800217 	ldw	r2,8(fp)
   2f6b8:	d8800115 	stw	r2,4(sp)
   2f6bc:	e0bffc17 	ldw	r2,-16(fp)
   2f6c0:	d8800015 	stw	r2,0(sp)
   2f6c4:	000f883a 	mov	r7,zero
   2f6c8:	e1bffd17 	ldw	r6,-12(fp)
   2f6cc:	e17ffe17 	ldw	r5,-8(fp)
   2f6d0:	e13fff17 	ldw	r4,-4(fp)
   2f6d4:	002f3ac0 	call	2f3ac <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
   2f6d8:	e037883a 	mov	sp,fp
   2f6dc:	dfc00117 	ldw	ra,4(sp)
   2f6e0:	df000017 	ldw	fp,0(sp)
   2f6e4:	dec00204 	addi	sp,sp,8
   2f6e8:	f800283a 	ret

0002f6ec <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
   2f6ec:	deffee04 	addi	sp,sp,-72
   2f6f0:	dfc01115 	stw	ra,68(sp)
   2f6f4:	df001015 	stw	fp,64(sp)
   2f6f8:	df001004 	addi	fp,sp,64
   2f6fc:	e13fff15 	stw	r4,-4(fp)
   2f700:	e17ffe15 	stw	r5,-8(fp)
   2f704:	e1bffd15 	stw	r6,-12(fp)
   2f708:	e1fffc15 	stw	r7,-16(fp)
   2f70c:	e1000417 	ldw	r4,16(fp)
   2f710:	e0c00517 	ldw	r3,20(fp)
   2f714:	e0800617 	ldw	r2,24(fp)
   2f718:	e13ffb0d 	sth	r4,-20(fp)
   2f71c:	e0fffa05 	stb	r3,-24(fp)
   2f720:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
   2f724:	e0bffb0b 	ldhu	r2,-20(fp)
   2f728:	e0fffa03 	ldbu	r3,-24(fp)
   2f72c:	e13ff90b 	ldhu	r4,-28(fp)
   2f730:	d9000815 	stw	r4,32(sp)
   2f734:	d8000715 	stw	zero,28(sp)
   2f738:	d8c00615 	stw	r3,24(sp)
   2f73c:	d8000515 	stw	zero,20(sp)
   2f740:	d8800415 	stw	r2,16(sp)
   2f744:	e0800317 	ldw	r2,12(fp)
   2f748:	d8800315 	stw	r2,12(sp)
   2f74c:	e0800217 	ldw	r2,8(fp)
   2f750:	d8800215 	stw	r2,8(sp)
   2f754:	e0bffc17 	ldw	r2,-16(fp)
   2f758:	d8800115 	stw	r2,4(sp)
   2f75c:	e0bffd17 	ldw	r2,-12(fp)
   2f760:	d8800015 	stw	r2,0(sp)
   2f764:	000f883a 	mov	r7,zero
   2f768:	000d883a 	mov	r6,zero
   2f76c:	e17ffe17 	ldw	r5,-8(fp)
   2f770:	e13fff17 	ldw	r4,-4(fp)
   2f774:	002f4500 	call	2f450 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
   2f778:	e037883a 	mov	sp,fp
   2f77c:	dfc00117 	ldw	ra,4(sp)
   2f780:	df000017 	ldw	fp,0(sp)
   2f784:	dec00204 	addi	sp,sp,8
   2f788:	f800283a 	ret

0002f78c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
   2f78c:	deffee04 	addi	sp,sp,-72
   2f790:	dfc01115 	stw	ra,68(sp)
   2f794:	df001015 	stw	fp,64(sp)
   2f798:	df001004 	addi	fp,sp,64
   2f79c:	e13fff15 	stw	r4,-4(fp)
   2f7a0:	e17ffe15 	stw	r5,-8(fp)
   2f7a4:	e1bffd15 	stw	r6,-12(fp)
   2f7a8:	e1fffc15 	stw	r7,-16(fp)
   2f7ac:	e1000417 	ldw	r4,16(fp)
   2f7b0:	e0c00517 	ldw	r3,20(fp)
   2f7b4:	e0800617 	ldw	r2,24(fp)
   2f7b8:	e13ffb0d 	sth	r4,-20(fp)
   2f7bc:	e0fffa05 	stb	r3,-24(fp)
   2f7c0:	e0bff90d 	sth	r2,-28(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
   2f7c4:	e0bffb0b 	ldhu	r2,-20(fp)
   2f7c8:	e0fffa03 	ldbu	r3,-24(fp)
   2f7cc:	e13ff90b 	ldhu	r4,-28(fp)
   2f7d0:	d8000815 	stw	zero,32(sp)
   2f7d4:	d9000715 	stw	r4,28(sp)
   2f7d8:	d8000615 	stw	zero,24(sp)
   2f7dc:	d8c00515 	stw	r3,20(sp)
   2f7e0:	d8800415 	stw	r2,16(sp)
   2f7e4:	e0800317 	ldw	r2,12(fp)
   2f7e8:	d8800315 	stw	r2,12(sp)
   2f7ec:	e0800217 	ldw	r2,8(fp)
   2f7f0:	d8800215 	stw	r2,8(sp)
   2f7f4:	d8000115 	stw	zero,4(sp)
   2f7f8:	d8000015 	stw	zero,0(sp)
   2f7fc:	e1fffc17 	ldw	r7,-16(fp)
   2f800:	e1bffd17 	ldw	r6,-12(fp)
   2f804:	e17ffe17 	ldw	r5,-8(fp)
   2f808:	e13fff17 	ldw	r4,-4(fp)
   2f80c:	002f4500 	call	2f450 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
   2f810:	e037883a 	mov	sp,fp
   2f814:	dfc00117 	ldw	ra,4(sp)
   2f818:	df000017 	ldw	fp,0(sp)
   2f81c:	dec00204 	addi	sp,sp,8
   2f820:	f800283a 	ret

0002f824 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
   2f824:	deffec04 	addi	sp,sp,-80
   2f828:	dfc01315 	stw	ra,76(sp)
   2f82c:	df001215 	stw	fp,72(sp)
   2f830:	df001204 	addi	fp,sp,72
   2f834:	e13fff15 	stw	r4,-4(fp)
   2f838:	e17ffe15 	stw	r5,-8(fp)
   2f83c:	e1bffd15 	stw	r6,-12(fp)
   2f840:	e1fffc15 	stw	r7,-16(fp)
   2f844:	e1800617 	ldw	r6,24(fp)
   2f848:	e1400717 	ldw	r5,28(fp)
   2f84c:	e1000817 	ldw	r4,32(fp)
   2f850:	e0c00917 	ldw	r3,36(fp)
   2f854:	e0800a17 	ldw	r2,40(fp)
   2f858:	e1bffb0d 	sth	r6,-20(fp)
   2f85c:	e17ffa05 	stb	r5,-24(fp)
   2f860:	e13ff905 	stb	r4,-28(fp)
   2f864:	e0fff80d 	sth	r3,-32(fp)
   2f868:	e0bff70d 	sth	r2,-36(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
   2f86c:	e0bffb0b 	ldhu	r2,-20(fp)
   2f870:	e0fffa03 	ldbu	r3,-24(fp)
   2f874:	e13ff903 	ldbu	r4,-28(fp)
   2f878:	e17ff80b 	ldhu	r5,-32(fp)
   2f87c:	e1bff70b 	ldhu	r6,-36(fp)
   2f880:	d9800815 	stw	r6,32(sp)
   2f884:	d9400715 	stw	r5,28(sp)
   2f888:	d9000615 	stw	r4,24(sp)
   2f88c:	d8c00515 	stw	r3,20(sp)
   2f890:	d8800415 	stw	r2,16(sp)
   2f894:	e0800517 	ldw	r2,20(fp)
   2f898:	d8800315 	stw	r2,12(sp)
   2f89c:	e0800417 	ldw	r2,16(fp)
   2f8a0:	d8800215 	stw	r2,8(sp)
   2f8a4:	e0800317 	ldw	r2,12(fp)
   2f8a8:	d8800115 	stw	r2,4(sp)
   2f8ac:	e0800217 	ldw	r2,8(fp)
   2f8b0:	d8800015 	stw	r2,0(sp)
   2f8b4:	e1fffc17 	ldw	r7,-16(fp)
   2f8b8:	e1bffd17 	ldw	r6,-12(fp)
   2f8bc:	e17ffe17 	ldw	r5,-8(fp)
   2f8c0:	e13fff17 	ldw	r4,-4(fp)
   2f8c4:	002f4500 	call	2f450 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
   2f8c8:	e037883a 	mov	sp,fp
   2f8cc:	dfc00117 	ldw	ra,4(sp)
   2f8d0:	df000017 	ldw	fp,0(sp)
   2f8d4:	dec00204 	addi	sp,sp,8
   2f8d8:	f800283a 	ret

0002f8dc <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
   2f8dc:	defffc04 	addi	sp,sp,-16
   2f8e0:	df000315 	stw	fp,12(sp)
   2f8e4:	df000304 	addi	fp,sp,12
   2f8e8:	e13ffe15 	stw	r4,-8(fp)
   2f8ec:	e17ffd15 	stw	r5,-12(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
   2f8f0:	e0bffd17 	ldw	r2,-12(fp)
   2f8f4:	1000021e 	bne	r2,zero,2f900 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
   2f8f8:	00bffa84 	movi	r2,-22
   2f8fc:	00002f06 	br	2f9bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
   2f900:	e0bffd17 	ldw	r2,-12(fp)
   2f904:	10c00317 	ldw	r3,12(r2)
   2f908:	e0bffd17 	ldw	r2,-12(fp)
   2f90c:	18800226 	beq	r3,r2,2f918 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
   2f910:	00bffa84 	movi	r2,-22
   2f914:	00002906 	br	2f9bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
   2f918:	e0bffe17 	ldw	r2,-8(fp)
   2f91c:	10800017 	ldw	r2,0(r2)
   2f920:	1000051e 	bne	r2,zero,2f938 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
   2f924:	e0bffe17 	ldw	r2,-8(fp)
   2f928:	e0fffd17 	ldw	r3,-12(fp)
   2f92c:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
   2f930:	0005883a 	mov	r2,zero
   2f934:	00002106 	br	2f9bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
   2f938:	e0bffe17 	ldw	r2,-8(fp)
   2f93c:	10800017 	ldw	r2,0(r2)
   2f940:	e0fffd17 	ldw	r3,-12(fp)
   2f944:	1880021e 	bne	r3,r2,2f950 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
   2f948:	00bffa84 	movi	r2,-22
   2f94c:	00001b06 	br	2f9bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
   2f950:	e0bffe17 	ldw	r2,-8(fp)
   2f954:	10800017 	ldw	r2,0(r2)
   2f958:	e0bfff15 	stw	r2,-4(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
   2f95c:	00000906 	br	2f984 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
   2f960:	e0bfff17 	ldw	r2,-4(fp)
   2f964:	10c00317 	ldw	r3,12(r2)
   2f968:	e0bffd17 	ldw	r2,-12(fp)
   2f96c:	1880021e 	bne	r3,r2,2f978 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
   2f970:	00bffa84 	movi	r2,-22
   2f974:	00001106 	br	2f9bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
   2f978:	e0bfff17 	ldw	r2,-4(fp)
   2f97c:	10800317 	ldw	r2,12(r2)
        last_descr_ptr = 
   2f980:	e0bfff15 	stw	r2,-4(fp)
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
   2f984:	e0bfff17 	ldw	r2,-4(fp)
   2f988:	10800317 	ldw	r2,12(r2)
   2f98c:	e0fffe17 	ldw	r3,-8(fp)
   2f990:	18c00017 	ldw	r3,0(r3)
   2f994:	10fff21e 	bne	r2,r3,2f960 <__alt_mem_mcu_subsystem_ram_0+0x7800f960>
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
   2f998:	e0fffd17 	ldw	r3,-12(fp)
   2f99c:	e0bfff17 	ldw	r2,-4(fp)
   2f9a0:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
   2f9a4:	e0bffe17 	ldw	r2,-8(fp)
   2f9a8:	10800017 	ldw	r2,0(r2)
   2f9ac:	1007883a 	mov	r3,r2
   2f9b0:	e0bffd17 	ldw	r2,-12(fp)
   2f9b4:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
   2f9b8:	0005883a 	mov	r2,zero
}
   2f9bc:	e037883a 	mov	sp,fp
   2f9c0:	df000017 	ldw	fp,0(sp)
   2f9c4:	dec00104 	addi	sp,sp,4
   2f9c8:	f800283a 	ret

0002f9cc <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
   2f9cc:	defff804 	addi	sp,sp,-32
   2f9d0:	df000715 	stw	fp,28(sp)
   2f9d4:	df000704 	addi	fp,sp,28
   2f9d8:	e13ffa15 	stw	r4,-24(fp)
   2f9dc:	e17ff915 	stw	r5,-28(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
   2f9e0:	e13ff917 	ldw	r4,-28(fp)
   2f9e4:	2000021e 	bne	r4,zero,2f9f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
   2f9e8:	00bffa84 	movi	r2,-22
   2f9ec:	00005906 	br	2fb54 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
   2f9f0:	e13ff917 	ldw	r4,-28(fp)
   2f9f4:	2015883a 	mov	r10,r4
   2f9f8:	0017883a 	mov	r11,zero
   2f9fc:	e2bffb15 	stw	r10,-20(fp)
   2fa00:	e2fffc15 	stw	r11,-16(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
   2fa04:	e13ff917 	ldw	r4,-28(fp)
   2fa08:	21400317 	ldw	r5,12(r4)
   2fa0c:	e13ffb17 	ldw	r4,-20(fp)
   2fa10:	2900041e 	bne	r5,r4,2fa24 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
   2fa14:	e13ff917 	ldw	r4,-28(fp)
   2fa18:	21400b17 	ldw	r5,44(r4)
   2fa1c:	e13ffc17 	ldw	r4,-16(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
   2fa20:	29000226 	beq	r5,r4,2fa2c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
   2fa24:	00bffa84 	movi	r2,-22
   2fa28:	00004a06 	br	2fb54 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
   2fa2c:	e13ffa17 	ldw	r4,-24(fp)
   2fa30:	21000017 	ldw	r4,0(r4)
   2fa34:	2000051e 	bne	r4,zero,2fa4c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
   2fa38:	e0bffa17 	ldw	r2,-24(fp)
   2fa3c:	e0fff917 	ldw	r3,-28(fp)
   2fa40:	10c00015 	stw	r3,0(r2)
        return 0;
   2fa44:	0005883a 	mov	r2,zero
   2fa48:	00004206 	br	2fb54 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
   2fa4c:	e13ffa17 	ldw	r4,-24(fp)
   2fa50:	21000017 	ldw	r4,0(r4)
   2fa54:	e17ff917 	ldw	r5,-28(fp)
   2fa58:	2900021e 	bne	r5,r4,2fa64 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
   2fa5c:	00bffa84 	movi	r2,-22
   2fa60:	00003c06 	br	2fb54 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
   2fa64:	e13ffa17 	ldw	r4,-24(fp)
   2fa68:	21000017 	ldw	r4,0(r4)
   2fa6c:	e13fff15 	stw	r4,-4(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
   2fa70:	e13ffa17 	ldw	r4,-24(fp)
   2fa74:	21000017 	ldw	r4,0(r4)
   2fa78:	2011883a 	mov	r8,r4
   2fa7c:	0013883a 	mov	r9,zero
   2fa80:	e23ffd15 	stw	r8,-12(fp)
   2fa84:	e27ffe15 	stw	r9,-8(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   2fa88:	00001806 	br	2faec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
   2fa8c:	e13ff917 	ldw	r4,-28(fp)
   2fa90:	200d883a 	mov	r6,r4
   2fa94:	000f883a 	mov	r7,zero
   2fa98:	e1bffb15 	stw	r6,-20(fp)
   2fa9c:	e1fffc15 	stw	r7,-16(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
   2faa0:	e13fff17 	ldw	r4,-4(fp)
   2faa4:	21400317 	ldw	r5,12(r4)
   2faa8:	e13ffb17 	ldw	r4,-20(fp)
   2faac:	2900061e 	bne	r5,r4,2fac8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
   2fab0:	e13fff17 	ldw	r4,-4(fp)
   2fab4:	21400b17 	ldw	r5,44(r4)
   2fab8:	e13ffc17 	ldw	r4,-16(fp)
   2fabc:	2900021e 	bne	r5,r4,2fac8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
   2fac0:	00bffa84 	movi	r2,-22
   2fac4:	00002306 	br	2fb54 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
   2fac8:	e13fff17 	ldw	r4,-4(fp)
   2facc:	21000317 	ldw	r4,12(r4)
   2fad0:	e13ffb15 	stw	r4,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
   2fad4:	e13fff17 	ldw	r4,-4(fp)
   2fad8:	21000b17 	ldw	r4,44(r4)
   2fadc:	e13ffc15 	stw	r4,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
   2fae0:	e13ffb17 	ldw	r4,-20(fp)
   2fae4:	e17ffc17 	ldw	r5,-16(fp)
        last_descr_ptr = 
   2fae8:	e13fff15 	stw	r4,-4(fp)
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   2faec:	e13fff17 	ldw	r4,-4(fp)
   2faf0:	21400317 	ldw	r5,12(r4)
   2faf4:	e13ffd17 	ldw	r4,-12(fp)
   2faf8:	293fe41e 	bne	r5,r4,2fa8c <__alt_mem_mcu_subsystem_ram_0+0x7800fa8c>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
   2fafc:	e13fff17 	ldw	r4,-4(fp)
   2fb00:	21400b17 	ldw	r5,44(r4)
   2fb04:	e13ffe17 	ldw	r4,-8(fp)
   2fb08:	293fe01e 	bne	r5,r4,2fa8c <__alt_mem_mcu_subsystem_ram_0+0x7800fa8c>
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
   2fb0c:	e13ff917 	ldw	r4,-28(fp)
   2fb10:	2005883a 	mov	r2,r4
   2fb14:	0007883a 	mov	r3,zero
   2fb18:	e0bffb15 	stw	r2,-20(fp)
   2fb1c:	e0fffc15 	stw	r3,-16(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
   2fb20:	e0fffb17 	ldw	r3,-20(fp)
   2fb24:	e0bfff17 	ldw	r2,-4(fp)
   2fb28:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
   2fb2c:	e0fffc17 	ldw	r3,-16(fp)
   2fb30:	e0bfff17 	ldw	r2,-4(fp)
   2fb34:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
   2fb38:	e0fffd17 	ldw	r3,-12(fp)
   2fb3c:	e0bff917 	ldw	r2,-28(fp)
   2fb40:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
   2fb44:	e0fffe17 	ldw	r3,-8(fp)
   2fb48:	e0bff917 	ldw	r2,-28(fp)
   2fb4c:	10c00b15 	stw	r3,44(r2)
    return 0;
   2fb50:	0005883a 	mov	r2,zero
}
   2fb54:	e037883a 	mov	sp,fp
   2fb58:	df000017 	ldw	fp,0(sp)
   2fb5c:	dec00104 	addi	sp,sp,4
   2fb60:	f800283a 	ret

0002fb64 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
   2fb64:	defff804 	addi	sp,sp,-32
   2fb68:	dfc00715 	stw	ra,28(sp)
   2fb6c:	df000615 	stw	fp,24(sp)
   2fb70:	df000604 	addi	fp,sp,24
   2fb74:	e13ffc15 	stw	r4,-16(fp)
   2fb78:	2805883a 	mov	r2,r5
   2fb7c:	3007883a 	mov	r3,r6
   2fb80:	e0bffb05 	stb	r2,-20(fp)
   2fb84:	1805883a 	mov	r2,r3
   2fb88:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 descriptor_control_field = 0;
   2fb8c:	e03ffd15 	stw	zero,-12(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
   2fb90:	e03ffe15 	stw	zero,-8(fp)
    
    if (list == NULL)
   2fb94:	e0bffc17 	ldw	r2,-16(fp)
   2fb98:	1000021e 	bne	r2,zero,2fba4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x40>
    {
        return -EINVAL;  /* this list cannot be empty */
   2fb9c:	00bffa84 	movi	r2,-22
   2fba0:	00002f06 	br	2fc60 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xfc>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
   2fba4:	e0bffc17 	ldw	r2,-16(fp)
   2fba8:	e0bfff15 	stw	r2,-4(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
   2fbac:	00000d06 	br	2fbe4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x80>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
   2fbb0:	e0bfff17 	ldw	r2,-4(fp)
   2fbb4:	10800717 	ldw	r2,28(r2)
   2fbb8:	e0bffd15 	stw	r2,-12(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   2fbbc:	e0bffd17 	ldw	r2,-12(fp)
   2fbc0:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
   2fbc4:	e0bfff17 	ldw	r2,-4(fp)
   2fbc8:	10c00715 	stw	r3,28(r2)
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
   2fbcc:	e0bfff17 	ldw	r2,-4(fp)
   2fbd0:	10800317 	ldw	r2,12(r2)
        last_descr_ptr = 
   2fbd4:	e0bfff15 	stw	r2,-4(fp)
            
        descriptor_count++;
   2fbd8:	e0bffe17 	ldw	r2,-8(fp)
   2fbdc:	10800044 	addi	r2,r2,1
   2fbe0:	e0bffe15 	stw	r2,-8(fp)
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
   2fbe4:	e0bfff17 	ldw	r2,-4(fp)
   2fbe8:	10c00317 	ldw	r3,12(r2)
   2fbec:	e0bffc17 	ldw	r2,-16(fp)
   2fbf0:	18bfef1e 	bne	r3,r2,2fbb0 <__alt_mem_mcu_subsystem_ram_0+0x7800fbb0>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
   2fbf4:	e0bfff17 	ldw	r2,-4(fp)
   2fbf8:	10800717 	ldw	r2,28(r2)
   2fbfc:	e0bffd15 	stw	r2,-12(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
   2fc00:	e0bffb03 	ldbu	r2,-20(fp)
   2fc04:	10000726 	beq	r2,zero,2fc24 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc0>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
   2fc08:	e0fffd17 	ldw	r3,-12(fp)
   2fc0c:	00b00034 	movhi	r2,49152
   2fc10:	10bfffc4 	addi	r2,r2,-1
   2fc14:	1886703a 	and	r3,r3,r2
        last_descr_ptr->control = descriptor_control_field 
   2fc18:	e0bfff17 	ldw	r2,-4(fp)
   2fc1c:	10c00715 	stw	r3,28(r2)
   2fc20:	00000406 	br	2fc34 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xd0>
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
   2fc24:	e0bffd17 	ldw	r2,-12(fp)
   2fc28:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
   2fc2c:	e0bfff17 	ldw	r2,-4(fp)
   2fc30:	10c00715 	stw	r3,28(r2)
    }
    
    descriptor_count++;
   2fc34:	e0bffe17 	ldw	r2,-8(fp)
   2fc38:	10800044 	addi	r2,r2,1
   2fc3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (dcache_flush_desc_list)
   2fc40:	e0bffa03 	ldbu	r2,-24(fp)
   2fc44:	10000526 	beq	r2,zero,2fc5c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
   2fc48:	e0bffe17 	ldw	r2,-8(fp)
   2fc4c:	1004917a 	slli	r2,r2,5
   2fc50:	100b883a 	mov	r5,r2
   2fc54:	e13ffc17 	ldw	r4,-16(fp)
   2fc58:	00250200 	call	25020 <alt_dcache_flush>
    }
    
    return 0;
   2fc5c:	0005883a 	mov	r2,zero
}
   2fc60:	e037883a 	mov	sp,fp
   2fc64:	dfc00117 	ldw	ra,4(sp)
   2fc68:	df000017 	ldw	fp,0(sp)
   2fc6c:	dec00204 	addi	sp,sp,8
   2fc70:	f800283a 	ret

0002fc74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
   2fc74:	defff404 	addi	sp,sp,-48
   2fc78:	dfc00b15 	stw	ra,44(sp)
   2fc7c:	df000a15 	stw	fp,40(sp)
   2fc80:	df000a04 	addi	fp,sp,40
   2fc84:	e13ff815 	stw	r4,-32(fp)
   2fc88:	2809883a 	mov	r4,r5
   2fc8c:	300b883a 	mov	r5,r6
   2fc90:	e13ff705 	stb	r4,-36(fp)
   2fc94:	2809883a 	mov	r4,r5
   2fc98:	e13ff605 	stb	r4,-40(fp)
    alt_u32 descriptor_control_field = 0;
   2fc9c:	e03ffd15 	stw	zero,-12(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
   2fca0:	e03ffe15 	stw	zero,-8(fp)
    
    if (list == NULL)
   2fca4:	e13ff817 	ldw	r4,-32(fp)
   2fca8:	2000021e 	bne	r4,zero,2fcb4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
    {
        return -EINVAL;  /* this list cannot be empty */
   2fcac:	00bffa84 	movi	r2,-22
   2fcb0:	00003e06 	br	2fdac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x138>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
   2fcb4:	e13ff817 	ldw	r4,-32(fp)
   2fcb8:	e13fff15 	stw	r4,-4(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
   2fcbc:	e13ff817 	ldw	r4,-32(fp)
   2fcc0:	2005883a 	mov	r2,r4
   2fcc4:	0007883a 	mov	r3,zero
   2fcc8:	e0bffb15 	stw	r2,-20(fp)
   2fccc:	e0fffc15 	stw	r3,-16(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   2fcd0:	00001306 	br	2fd20 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
   2fcd4:	e0bfff17 	ldw	r2,-4(fp)
   2fcd8:	10800f17 	ldw	r2,60(r2)
   2fcdc:	e0bffd15 	stw	r2,-12(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
   2fce0:	e0bffd17 	ldw	r2,-12(fp)
   2fce4:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
   2fce8:	e0bfff17 	ldw	r2,-4(fp)
   2fcec:	10c00f15 	stw	r3,60(r2)
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
   2fcf0:	e0bfff17 	ldw	r2,-4(fp)
   2fcf4:	10800317 	ldw	r2,12(r2)
   2fcf8:	e0bff915 	stw	r2,-28(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
   2fcfc:	e0bfff17 	ldw	r2,-4(fp)
   2fd00:	10800b17 	ldw	r2,44(r2)
   2fd04:	e0bffa15 	stw	r2,-24(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
   2fd08:	e0bff917 	ldw	r2,-28(fp)
   2fd0c:	e0fffa17 	ldw	r3,-24(fp)
        last_descr_ptr = 
   2fd10:	e0bfff15 	stw	r2,-4(fp)
        descriptor_count++;            
   2fd14:	e0bffe17 	ldw	r2,-8(fp)
   2fd18:	10800044 	addi	r2,r2,1
   2fd1c:	e0bffe15 	stw	r2,-8(fp)
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
   2fd20:	e0bfff17 	ldw	r2,-4(fp)
   2fd24:	10c00317 	ldw	r3,12(r2)
   2fd28:	e0bffb17 	ldw	r2,-20(fp)
   2fd2c:	18bfe91e 	bne	r3,r2,2fcd4 <__alt_mem_mcu_subsystem_ram_0+0x7800fcd4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
   2fd30:	e0bfff17 	ldw	r2,-4(fp)
   2fd34:	10c00b17 	ldw	r3,44(r2)
   2fd38:	e0bffc17 	ldw	r2,-16(fp)
   2fd3c:	18bfe51e 	bne	r3,r2,2fcd4 <__alt_mem_mcu_subsystem_ram_0+0x7800fcd4>
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
   2fd40:	e0bfff17 	ldw	r2,-4(fp)
   2fd44:	10800f17 	ldw	r2,60(r2)
   2fd48:	e0bffd15 	stw	r2,-12(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
   2fd4c:	e0bff703 	ldbu	r2,-36(fp)
   2fd50:	10000726 	beq	r2,zero,2fd70 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xfc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
   2fd54:	e0fffd17 	ldw	r3,-12(fp)
   2fd58:	00b00034 	movhi	r2,49152
   2fd5c:	10bfffc4 	addi	r2,r2,-1
   2fd60:	1886703a 	and	r3,r3,r2
        last_descr_ptr->control = descriptor_control_field 
   2fd64:	e0bfff17 	ldw	r2,-4(fp)
   2fd68:	10c00f15 	stw	r3,60(r2)
   2fd6c:	00000406 	br	2fd80 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x10c>
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
   2fd70:	e0bffd17 	ldw	r2,-12(fp)
   2fd74:	10d00034 	orhi	r3,r2,16384
        last_descr_ptr->control = descriptor_control_field 
   2fd78:	e0bfff17 	ldw	r2,-4(fp)
   2fd7c:	10c00f15 	stw	r3,60(r2)
    }
    
    descriptor_count++;
   2fd80:	e0bffe17 	ldw	r2,-8(fp)
   2fd84:	10800044 	addi	r2,r2,1
   2fd88:	e0bffe15 	stw	r2,-8(fp)
    
    if (dcache_flush_desc_list)
   2fd8c:	e0bff603 	ldbu	r2,-40(fp)
   2fd90:	10000526 	beq	r2,zero,2fda8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x134>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
   2fd94:	e0bffe17 	ldw	r2,-8(fp)
   2fd98:	100491ba 	slli	r2,r2,6
   2fd9c:	100b883a 	mov	r5,r2
   2fda0:	e13ff817 	ldw	r4,-32(fp)
   2fda4:	00250200 	call	25020 <alt_dcache_flush>
    }
    
    return 0;
   2fda8:	0005883a 	mov	r2,zero
}
   2fdac:	e037883a 	mov	sp,fp
   2fdb0:	dfc00117 	ldw	ra,4(sp)
   2fdb4:	df000017 	ldw	fp,0(sp)
   2fdb8:	dec00204 	addi	sp,sp,8
   2fdbc:	f800283a 	ret

0002fdc0 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
   2fdc0:	deffef04 	addi	sp,sp,-68
   2fdc4:	df001015 	stw	fp,64(sp)
   2fdc8:	df001004 	addi	fp,sp,64
   2fdcc:	e13ff415 	stw	r4,-48(fp)
   2fdd0:	e17ff215 	stw	r5,-56(fp)
   2fdd4:	e1bff315 	stw	r6,-52(fp)
   2fdd8:	3807883a 	mov	r3,r7
   2fddc:	e0800117 	ldw	r2,4(fp)
   2fde0:	e0fff105 	stb	r3,-60(fp)
   2fde4:	e0bff005 	stb	r2,-64(fp)
    alt_u32 prefetcher_ctl = 0;
   2fde8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 dispatcher_ctl = 0;
   2fdec:	e03ffe15 	stw	zero,-8(fp)
    alt_irq_context context = 0;
   2fdf0:	e03ffd15 	stw	zero,-12(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
   2fdf4:	e0bff217 	ldw	r2,-56(fp)
   2fdf8:	e0bff515 	stw	r2,-44(fp)
   2fdfc:	e0bff317 	ldw	r2,-52(fp)
   2fe00:	e0bff615 	stw	r2,-40(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
   2fe04:	e0bff417 	ldw	r2,-48(fp)
   2fe08:	10800617 	ldw	r2,24(r2)
   2fe0c:	10800037 	ldwio	r2,0(r2)
   2fe10:	e0bfff15 	stw	r2,-4(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
   2fe14:	e0bfff17 	ldw	r2,-4(fp)
   2fe18:	1080004c 	andi	r2,r2,1
   2fe1c:	10000226 	beq	r2,zero,2fe28 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
   2fe20:	00bffc04 	movi	r2,-16
   2fe24:	00009206 	br	30070 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
   2fe28:	00800804 	movi	r2,32
   2fe2c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_READ_STATUS (context);
   2fe30:	0005303a 	rdctl	r2,status
   2fe34:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fe38:	e0fffb17 	ldw	r3,-20(fp)
   2fe3c:	00bfff84 	movi	r2,-2
   2fe40:	1884703a 	and	r2,r3,r2
   2fe44:	1001703a 	wrctl	status,r2
  return context;
   2fe48:	e0bffb17 	ldw	r2,-20(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
   2fe4c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   2fe50:	e0bff417 	ldw	r2,-48(fp)
   2fe54:	10800317 	ldw	r2,12(r2)
   2fe58:	10800104 	addi	r2,r2,4
   2fe5c:	e0fffe17 	ldw	r3,-8(fp)
   2fe60:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
   2fe64:	e0bff417 	ldw	r2,-48(fp)
   2fe68:	10800317 	ldw	r2,12(r2)
   2fe6c:	e0fff417 	ldw	r3,-48(fp)
   2fe70:	18c00317 	ldw	r3,12(r3)
   2fe74:	18c00037 	ldwio	r3,0(r3)
   2fe78:	10c00035 	stwio	r3,0(r2)
   2fe7c:	e0bffd17 	ldw	r2,-12(fp)
   2fe80:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2fe84:	e0bffc17 	ldw	r2,-16(fp)
   2fe88:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
   2fe8c:	e0bff417 	ldw	r2,-48(fp)
   2fe90:	10800b17 	ldw	r2,44(r2)
   2fe94:	10002326 	beq	r2,zero,2ff24 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
   2fe98:	e0bff417 	ldw	r2,-48(fp)
   2fe9c:	10c00d17 	ldw	r3,52(r2)
   2fea0:	e0bffe17 	ldw	r2,-8(fp)
   2fea4:	1884b03a 	or	r2,r3,r2
   2fea8:	10800514 	ori	r2,r2,20
   2feac:	e0bffe15 	stw	r2,-8(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
   2feb0:	e0fffe17 	ldw	r3,-8(fp)
   2feb4:	00bff7c4 	movi	r2,-33
   2feb8:	1884703a 	and	r2,r3,r2
   2febc:	e0bffe15 	stw	r2,-8(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
   2fec0:	e0bfff17 	ldw	r2,-4(fp)
   2fec4:	10800214 	ori	r2,r2,8
   2fec8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   2fecc:	0005303a 	rdctl	r2,status
   2fed0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fed4:	e0fff917 	ldw	r3,-28(fp)
   2fed8:	00bfff84 	movi	r2,-2
   2fedc:	1884703a 	and	r2,r3,r2
   2fee0:	1001703a 	wrctl	status,r2
  return context;
   2fee4:	e0bff917 	ldw	r2,-28(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
   2fee8:	e0bffd15 	stw	r2,-12(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   2feec:	e0bff417 	ldw	r2,-48(fp)
   2fef0:	10800317 	ldw	r2,12(r2)
   2fef4:	10800104 	addi	r2,r2,4
   2fef8:	e0fffe17 	ldw	r3,-8(fp)
   2fefc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   2ff00:	e0bff417 	ldw	r2,-48(fp)
   2ff04:	10800617 	ldw	r2,24(r2)
   2ff08:	e0ffff17 	ldw	r3,-4(fp)
   2ff0c:	10c00035 	stwio	r3,0(r2)
   2ff10:	e0bffd17 	ldw	r2,-12(fp)
   2ff14:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   2ff18:	e0bffa17 	ldw	r2,-24(fp)
   2ff1c:	1001703a 	wrctl	status,r2
   2ff20:	00002306 	br	2ffb0 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
   2ff24:	e0bff417 	ldw	r2,-48(fp)
   2ff28:	10c00d17 	ldw	r3,52(r2)
   2ff2c:	e0bffe17 	ldw	r2,-8(fp)
   2ff30:	1884b03a 	or	r2,r3,r2
   2ff34:	10800114 	ori	r2,r2,4
   2ff38:	e0bffe15 	stw	r2,-8(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
   2ff3c:	e0fffe17 	ldw	r3,-8(fp)
   2ff40:	00bff3c4 	movi	r2,-49
   2ff44:	1884703a 	and	r2,r3,r2
   2ff48:	e0bffe15 	stw	r2,-8(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
   2ff4c:	e0ffff17 	ldw	r3,-4(fp)
   2ff50:	00bffdc4 	movi	r2,-9
   2ff54:	1884703a 	and	r2,r3,r2
   2ff58:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   2ff5c:	0005303a 	rdctl	r2,status
   2ff60:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ff64:	e0fff717 	ldw	r3,-36(fp)
   2ff68:	00bfff84 	movi	r2,-2
   2ff6c:	1884703a 	and	r2,r3,r2
   2ff70:	1001703a 	wrctl	status,r2
  return context;
   2ff74:	e0bff717 	ldw	r2,-36(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
   2ff78:	e0bffd15 	stw	r2,-12(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
   2ff7c:	e0bff417 	ldw	r2,-48(fp)
   2ff80:	10800317 	ldw	r2,12(r2)
   2ff84:	10800104 	addi	r2,r2,4
   2ff88:	e0fffe17 	ldw	r3,-8(fp)
   2ff8c:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   2ff90:	e0bff417 	ldw	r2,-48(fp)
   2ff94:	10800617 	ldw	r2,24(r2)
   2ff98:	e0ffff17 	ldw	r3,-4(fp)
   2ff9c:	10c00035 	stwio	r3,0(r2)
   2ffa0:	e0bffd17 	ldw	r2,-12(fp)
   2ffa4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   2ffa8:	e0bff817 	ldw	r2,-32(fp)
   2ffac:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
   2ffb0:	e0bff417 	ldw	r2,-48(fp)
   2ffb4:	10800617 	ldw	r2,24(r2)
   2ffb8:	10800104 	addi	r2,r2,4
   2ffbc:	e0fff517 	ldw	r3,-44(fp)
   2ffc0:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
   2ffc4:	e0bff417 	ldw	r2,-48(fp)
   2ffc8:	10800617 	ldw	r2,24(r2)
   2ffcc:	10800204 	addi	r2,r2,8
   2ffd0:	e0fff617 	ldw	r3,-40(fp)
   2ffd4:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
   2ffd8:	e0bff103 	ldbu	r2,-60(fp)
   2ffdc:	10000426 	beq	r2,zero,2fff0 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
   2ffe0:	e0bfff17 	ldw	r2,-4(fp)
   2ffe4:	10800414 	ori	r2,r2,16
   2ffe8:	e0bfff15 	stw	r2,-4(fp)
   2ffec:	00000406 	br	30000 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
   2fff0:	e0ffff17 	ldw	r3,-4(fp)
   2fff4:	00bffbc4 	movi	r2,-17
   2fff8:	1884703a 	and	r2,r3,r2
   2fffc:	e0bfff15 	stw	r2,-4(fp)
     }
     
     /* set poll-en */
     if (poll_en){
   30000:	e0bff003 	ldbu	r2,-64(fp)
   30004:	10000e26 	beq	r2,zero,30040 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
   30008:	e0bfff17 	ldw	r2,-4(fp)
   3000c:	10800094 	ori	r2,r2,2
   30010:	e0bfff15 	stw	r2,-4(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
   30014:	e0bff417 	ldw	r2,-48(fp)
   30018:	10800617 	ldw	r2,24(r2)
   3001c:	10800304 	addi	r2,r2,12
   30020:	10800037 	ldwio	r2,0(r2)
   30024:	10000a1e 	bne	r2,zero,30050 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
   30028:	e0bff417 	ldw	r2,-48(fp)
   3002c:	10800617 	ldw	r2,24(r2)
   30030:	10800304 	addi	r2,r2,12
   30034:	00c03fc4 	movi	r3,255
   30038:	10c00035 	stwio	r3,0(r2)
   3003c:	00000406 	br	30050 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
   30040:	e0ffff17 	ldw	r3,-4(fp)
   30044:	00bfff44 	movi	r2,-3
   30048:	1884703a 	and	r2,r3,r2
   3004c:	e0bfff15 	stw	r2,-4(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
   30050:	e0bfff17 	ldw	r2,-4(fp)
   30054:	10800054 	ori	r2,r2,1
   30058:	e0bfff15 	stw	r2,-4(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
   3005c:	e0bff417 	ldw	r2,-48(fp)
   30060:	10800617 	ldw	r2,24(r2)
   30064:	e0ffff17 	ldw	r3,-4(fp)
   30068:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
   3006c:	0005883a 	mov	r2,zero
}
   30070:	e037883a 	mov	sp,fp
   30074:	df000017 	ldw	fp,0(sp)
   30078:	dec00104 	addi	sp,sp,4
   3007c:	f800283a 	ret

00030080 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
   30080:	defff504 	addi	sp,sp,-44
   30084:	dfc00a15 	stw	ra,40(sp)
   30088:	df000915 	stw	fp,36(sp)
   3008c:	dc400815 	stw	r17,32(sp)
   30090:	dc000715 	stw	r16,28(sp)
   30094:	df000904 	addi	fp,sp,36
   30098:	e13ffd15 	stw	r4,-12(fp)
   3009c:	e17ffc15 	stw	r5,-16(fp)
   300a0:	3009883a 	mov	r4,r6
   300a4:	380b883a 	mov	r5,r7
   300a8:	e0c00217 	ldw	r3,8(fp)
   300ac:	e0800317 	ldw	r2,12(fp)
   300b0:	e13ffb05 	stb	r4,-20(fp)
   300b4:	2809883a 	mov	r4,r5
   300b8:	e13ffa05 	stb	r4,-24(fp)
   300bc:	e0fff905 	stb	r3,-28(fp)
   300c0:	e0bff805 	stb	r2,-32(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   300c4:	e0bff903 	ldbu	r2,-28(fp)
   300c8:	e0fff803 	ldbu	r3,-32(fp)
   300cc:	180d883a 	mov	r6,r3
   300d0:	100b883a 	mov	r5,r2
   300d4:	e13ffc17 	ldw	r4,-16(fp)
   300d8:	002fb640 	call	2fb64 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
   300dc:	10000226 	beq	r2,zero,300e8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x68>
    {
        return -EINVAL;
   300e0:	00bffa84 	movi	r2,-22
   300e4:	00000b06 	br	30114 <alt_msgdma_start_prefetcher_with_std_desc_list+0x94>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
   300e8:	e0bffc17 	ldw	r2,-16(fp)
   300ec:	1021883a 	mov	r16,r2
   300f0:	0023883a 	mov	r17,zero
   300f4:	e0fffb03 	ldbu	r3,-20(fp)
   300f8:	e0bffa03 	ldbu	r2,-24(fp)
   300fc:	d8800015 	stw	r2,0(sp)
   30100:	180f883a 	mov	r7,r3
   30104:	800b883a 	mov	r5,r16
   30108:	880d883a 	mov	r6,r17
   3010c:	e13ffd17 	ldw	r4,-12(fp)
   30110:	002fdc00 	call	2fdc0 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
   30114:	e6fffe04 	addi	sp,fp,-8
   30118:	dfc00317 	ldw	ra,12(sp)
   3011c:	df000217 	ldw	fp,8(sp)
   30120:	dc400117 	ldw	r17,4(sp)
   30124:	dc000017 	ldw	r16,0(sp)
   30128:	dec00404 	addi	sp,sp,16
   3012c:	f800283a 	ret

00030130 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
   30130:	defff504 	addi	sp,sp,-44
   30134:	dfc00a15 	stw	ra,40(sp)
   30138:	df000915 	stw	fp,36(sp)
   3013c:	dc400815 	stw	r17,32(sp)
   30140:	dc000715 	stw	r16,28(sp)
   30144:	df000904 	addi	fp,sp,36
   30148:	e13ffd15 	stw	r4,-12(fp)
   3014c:	e17ffc15 	stw	r5,-16(fp)
   30150:	3009883a 	mov	r4,r6
   30154:	380b883a 	mov	r5,r7
   30158:	e0c00217 	ldw	r3,8(fp)
   3015c:	e0800317 	ldw	r2,12(fp)
   30160:	e13ffb05 	stb	r4,-20(fp)
   30164:	2809883a 	mov	r4,r5
   30168:	e13ffa05 	stb	r4,-24(fp)
   3016c:	e0fff905 	stb	r3,-28(fp)
   30170:	e0bff805 	stb	r2,-32(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
   30174:	e0bff903 	ldbu	r2,-28(fp)
   30178:	e0fff803 	ldbu	r3,-32(fp)
   3017c:	180d883a 	mov	r6,r3
   30180:	100b883a 	mov	r5,r2
   30184:	e13ffc17 	ldw	r4,-16(fp)
   30188:	002fc740 	call	2fc74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
   3018c:	10000226 	beq	r2,zero,30198 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x68>
    {
        return -EINVAL;
   30190:	00bffa84 	movi	r2,-22
   30194:	00000b06 	br	301c4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x94>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
   30198:	e0bffc17 	ldw	r2,-16(fp)
   3019c:	1021883a 	mov	r16,r2
   301a0:	0023883a 	mov	r17,zero
   301a4:	e0fffb03 	ldbu	r3,-20(fp)
   301a8:	e0bffa03 	ldbu	r2,-24(fp)
   301ac:	d8800015 	stw	r2,0(sp)
   301b0:	180f883a 	mov	r7,r3
   301b4:	800b883a 	mov	r5,r16
   301b8:	880d883a 	mov	r6,r17
   301bc:	e13ffd17 	ldw	r4,-12(fp)
   301c0:	002fdc00 	call	2fdc0 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
   301c4:	e6fffe04 	addi	sp,fp,-8
   301c8:	dfc00317 	ldw	ra,12(sp)
   301cc:	df000217 	ldw	fp,8(sp)
   301d0:	dc400117 	ldw	r17,4(sp)
   301d4:	dc000017 	ldw	r16,0(sp)
   301d8:	dec00404 	addi	sp,sp,16
   301dc:	f800283a 	ret

000301e0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
   301e0:	defffc04 	addi	sp,sp,-16
   301e4:	dfc00315 	stw	ra,12(sp)
   301e8:	df000215 	stw	fp,8(sp)
   301ec:	df000204 	addi	fp,sp,8
   301f0:	e13ffe15 	stw	r4,-8(fp)
    alt_msgdma_dev* dev = NULL;
   301f4:	e03fff15 	stw	zero,-4(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
   301f8:	d1601104 	addi	r5,gp,-32700
   301fc:	e13ffe17 	ldw	r4,-8(fp)
   30200:	003089c0 	call	3089c <alt_find_dev>
   30204:	e0bfff15 	stw	r2,-4(fp)

    if (NULL == dev)
   30208:	e0bfff17 	ldw	r2,-4(fp)
   3020c:	1000041e 	bne	r2,zero,30220 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
   30210:	002e5280 	call	2e528 <alt_get_errno>
   30214:	1007883a 	mov	r3,r2
   30218:	008004c4 	movi	r2,19
   3021c:	18800015 	stw	r2,0(r3)
    }

    return dev;
   30220:	e0bfff17 	ldw	r2,-4(fp)
}
   30224:	e037883a 	mov	sp,fp
   30228:	dfc00117 	ldw	ra,4(sp)
   3022c:	df000017 	ldw	fp,0(sp)
   30230:	dec00204 	addi	sp,sp,8
   30234:	f800283a 	ret

00030238 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   30238:	defff804 	addi	sp,sp,-32
   3023c:	dfc00715 	stw	ra,28(sp)
   30240:	df000615 	stw	fp,24(sp)
   30244:	df000604 	addi	fp,sp,24
   30248:	e13ffd15 	stw	r4,-12(fp)
   3024c:	e17ffc15 	stw	r5,-16(fp)
   30250:	e1bffb15 	stw	r6,-20(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
   30254:	e0bffd17 	ldw	r2,-12(fp)
   30258:	10801783 	ldbu	r2,94(r2)
   3025c:	10803fcc 	andi	r2,r2,255
   30260:	10000a26 	beq	r2,zero,3028c <alt_msgdma_init+0x54>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
   30264:	e0bffd17 	ldw	r2,-12(fp)
   30268:	10800617 	ldw	r2,24(r2)
   3026c:	00c00104 	movi	r3,4
   30270:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
   30274:	0001883a 	nop
   30278:	e0bffd17 	ldw	r2,-12(fp)
   3027c:	10800617 	ldw	r2,24(r2)
   30280:	10800037 	ldwio	r2,0(r2)
   30284:	1080010c 	andi	r2,r2,4
   30288:	103ffb1e 	bne	r2,zero,30278 <__alt_mem_mcu_subsystem_ram_0+0x78010278>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
   3028c:	e0bffd17 	ldw	r2,-12(fp)
   30290:	10800317 	ldw	r2,12(r2)
   30294:	10800104 	addi	r2,r2,4
   30298:	00c00084 	movi	r3,2
   3029c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
   302a0:	0001883a 	nop
   302a4:	e0bffd17 	ldw	r2,-12(fp)
   302a8:	10800317 	ldw	r2,12(r2)
   302ac:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
   302b0:	1080100c 	andi	r2,r2,64
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
   302b4:	103ffb1e 	bne	r2,zero,302a4 <__alt_mem_mcu_subsystem_ram_0+0x780102a4>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   302b8:	e0bffd17 	ldw	r2,-12(fp)
   302bc:	10800317 	ldw	r2,12(r2)
   302c0:	10800104 	addi	r2,r2,4
   302c4:	10800037 	ldwio	r2,0(r2)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
   302c8:	1007883a 	mov	r3,r2
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
   302cc:	00bffbc4 	movi	r2,-17
   302d0:	1884703a 	and	r2,r3,r2
   302d4:	e0bfff15 	stw	r2,-4(fp)
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
   302d8:	e0bfff17 	ldw	r2,-4(fp)
   302dc:	10800814 	ori	r2,r2,32
   302e0:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
   302e4:	e0bffd17 	ldw	r2,-12(fp)
   302e8:	10800317 	ldw	r2,12(r2)
   302ec:	10800104 	addi	r2,r2,4
   302f0:	e0ffff17 	ldw	r3,-4(fp)
   302f4:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
   302f8:	e0bffd17 	ldw	r2,-12(fp)
   302fc:	10800317 	ldw	r2,12(r2)
   30300:	e0fffd17 	ldw	r3,-12(fp)
   30304:	18c00317 	ldw	r3,12(r3)
   30308:	18c00037 	ldwio	r3,0(r3)
   3030c:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
   30310:	e0bffd17 	ldw	r2,-12(fp)
   30314:	10801783 	ldbu	r2,94(r2)
   30318:	10803fcc 	andi	r2,r2,255
   3031c:	10000826 	beq	r2,zero,30340 <alt_msgdma_init+0x108>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
   30320:	e0bffd17 	ldw	r2,-12(fp)
   30324:	10800617 	ldw	r2,24(r2)
   30328:	10800404 	addi	r2,r2,16
   3032c:	e0fffd17 	ldw	r3,-12(fp)
   30330:	18c00617 	ldw	r3,24(r3)
   30334:	18c00404 	addi	r3,r3,16
   30338:	18c00037 	ldwio	r3,0(r3)
   3033c:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
   30340:	d1601104 	addi	r5,gp,-32700
   30344:	e13ffd17 	ldw	r4,-12(fp)
   30348:	00251340 	call	25134 <alt_dev_llist_insert>
   3034c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   30350:	e0bffe15 	stw	r2,-8(fp)
            
    if (!error)
   30354:	e0bffe17 	ldw	r2,-8(fp)
   30358:	1000081e 	bne	r2,zero,3037c <alt_msgdma_init+0x144>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
   3035c:	d8000015 	stw	zero,0(sp)
   30360:	e1fffd17 	ldw	r7,-12(fp)
   30364:	018000f4 	movhi	r6,3
   30368:	31b9c904 	addi	r6,r6,-6364
   3036c:	e17ffb17 	ldw	r5,-20(fp)
   30370:	e13ffc17 	ldw	r4,-16(fp)
   30374:	00253400 	call	25340 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
   30378:	00000406 	br	3038c <alt_msgdma_init+0x154>
        alt_printf("failed to create semaphores\n");
   3037c:	010000f4 	movhi	r4,3
   30380:	2116e404 	addi	r4,r4,23440
   30384:	00259a40 	call	259a4 <alt_printf>
    return;
   30388:	0001883a 	nop

}
   3038c:	e037883a 	mov	sp,fp
   30390:	dfc00117 	ldw	ra,4(sp)
   30394:	df000017 	ldw	fp,0(sp)
   30398:	dec00204 	addi	sp,sp,8
   3039c:	f800283a 	ret

000303a0 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
   303a0:	defffb04 	addi	sp,sp,-20
   303a4:	df000415 	stw	fp,16(sp)
   303a8:	df000404 	addi	fp,sp,16
   303ac:	e13fff15 	stw	r4,-4(fp)
   303b0:	e17ffe15 	stw	r5,-8(fp)
   303b4:	e1bffd15 	stw	r6,-12(fp)
   303b8:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
   303bc:	e0bfff17 	ldw	r2,-4(fp)
   303c0:	e0fffe17 	ldw	r3,-8(fp)
   303c4:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
   303c8:	e0bfff17 	ldw	r2,-4(fp)
   303cc:	e0fffc17 	ldw	r3,-16(fp)
   303d0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
   303d4:	e0bfff17 	ldw	r2,-4(fp)
   303d8:	e0fffd17 	ldw	r3,-12(fp)
   303dc:	10c00d15 	stw	r3,52(r2)

    return ;
   303e0:	0001883a 	nop
}
   303e4:	e037883a 	mov	sp,fp
   303e8:	df000017 	ldw	fp,0(sp)
   303ec:	dec00104 	addi	sp,sp,4
   303f0:	f800283a 	ret

000303f4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
   303f4:	defffc04 	addi	sp,sp,-16
   303f8:	dfc00315 	stw	ra,12(sp)
   303fc:	df000215 	stw	fp,8(sp)
   30400:	df000204 	addi	fp,sp,8
   30404:	e13fff15 	stw	r4,-4(fp)
   30408:	e17ffe15 	stw	r5,-8(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
   3040c:	000d883a 	mov	r6,zero
   30410:	e17ffe17 	ldw	r5,-8(fp)
   30414:	e13fff17 	ldw	r4,-4(fp)
   30418:	002ea880 	call	2ea88 <alt_msgdma_descriptor_async_transfer>

}
   3041c:	e037883a 	mov	sp,fp
   30420:	dfc00117 	ldw	ra,4(sp)
   30424:	df000017 	ldw	fp,0(sp)
   30428:	dec00204 	addi	sp,sp,8
   3042c:	f800283a 	ret

00030430 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
   30430:	defffc04 	addi	sp,sp,-16
   30434:	dfc00315 	stw	ra,12(sp)
   30438:	df000215 	stw	fp,8(sp)
   3043c:	df000204 	addi	fp,sp,8
   30440:	e13fff15 	stw	r4,-4(fp)
   30444:	e17ffe15 	stw	r5,-8(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
   30448:	e1bffe17 	ldw	r6,-8(fp)
   3044c:	000b883a 	mov	r5,zero
   30450:	e13fff17 	ldw	r4,-4(fp)
   30454:	002ea880 	call	2ea88 <alt_msgdma_descriptor_async_transfer>
}
   30458:	e037883a 	mov	sp,fp
   3045c:	dfc00117 	ldw	ra,4(sp)
   30460:	df000017 	ldw	fp,0(sp)
   30464:	dec00204 	addi	sp,sp,8
   30468:	f800283a 	ret

0003046c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
   3046c:	defffc04 	addi	sp,sp,-16
   30470:	dfc00315 	stw	ra,12(sp)
   30474:	df000215 	stw	fp,8(sp)
   30478:	df000204 	addi	fp,sp,8
   3047c:	e13fff15 	stw	r4,-4(fp)
   30480:	e17ffe15 	stw	r5,-8(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
   30484:	000d883a 	mov	r6,zero
   30488:	e17ffe17 	ldw	r5,-8(fp)
   3048c:	e13fff17 	ldw	r4,-4(fp)
   30490:	002ed5c0 	call	2ed5c <alt_msgdma_descriptor_sync_transfer>
}
   30494:	e037883a 	mov	sp,fp
   30498:	dfc00117 	ldw	ra,4(sp)
   3049c:	df000017 	ldw	fp,0(sp)
   304a0:	dec00204 	addi	sp,sp,8
   304a4:	f800283a 	ret

000304a8 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
   304a8:	defffc04 	addi	sp,sp,-16
   304ac:	dfc00315 	stw	ra,12(sp)
   304b0:	df000215 	stw	fp,8(sp)
   304b4:	df000204 	addi	fp,sp,8
   304b8:	e13fff15 	stw	r4,-4(fp)
   304bc:	e17ffe15 	stw	r5,-8(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
   304c0:	e1bffe17 	ldw	r6,-8(fp)
   304c4:	000b883a 	mov	r5,zero
   304c8:	e13fff17 	ldw	r4,-4(fp)
   304cc:	002ed5c0 	call	2ed5c <alt_msgdma_descriptor_sync_transfer>
}
   304d0:	e037883a 	mov	sp,fp
   304d4:	dfc00117 	ldw	ra,4(sp)
   304d8:	df000017 	ldw	fp,0(sp)
   304dc:	dec00204 	addi	sp,sp,8
   304e0:	f800283a 	ret

000304e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   304e4:	defff404 	addi	sp,sp,-48
   304e8:	df000b15 	stw	fp,44(sp)
   304ec:	df000b04 	addi	fp,sp,44
   304f0:	e13ff815 	stw	r4,-32(fp)
   304f4:	e17ff715 	stw	r5,-36(fp)
   304f8:	e1bff615 	stw	r6,-40(fp)
   304fc:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   30500:	e03ffe15 	stw	zero,-8(fp)
   30504:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   30508:	d0a7b817 	ldw	r2,-24864(gp)
  
  if (alt_ticks_per_second ())
   3050c:	10004626 	beq	r2,zero,30628 <alt_alarm_start+0x144>
  {
    if (alarm)
   30510:	e0bff817 	ldw	r2,-32(fp)
   30514:	10004226 	beq	r2,zero,30620 <alt_alarm_start+0x13c>
    {
      alarm->callback = callback;
   30518:	e0bff817 	ldw	r2,-32(fp)
   3051c:	e0fff617 	ldw	r3,-40(fp)
   30520:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   30524:	e0bff817 	ldw	r2,-32(fp)
   30528:	e0fff517 	ldw	r3,-44(fp)
   3052c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   30530:	0005303a 	rdctl	r2,status
   30534:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30538:	e0fff917 	ldw	r3,-28(fp)
   3053c:	00bfff84 	movi	r2,-2
   30540:	1884703a 	and	r2,r3,r2
   30544:	1001703a 	wrctl	status,r2
  return context;
   30548:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   3054c:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   30550:	d0a7b917 	ldw	r2,-24860(gp)
   30554:	d0e7ba17 	ldw	r3,-24856(gp)
      
      current_nticks = alt_nticks();
   30558:	e0bffe15 	stw	r2,-8(fp)
   3055c:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   30560:	e0bff717 	ldw	r2,-36(fp)
   30564:	1011883a 	mov	r8,r2
   30568:	0013883a 	mov	r9,zero
   3056c:	e13ffe17 	ldw	r4,-8(fp)
   30570:	e17fff17 	ldw	r5,-4(fp)
   30574:	4105883a 	add	r2,r8,r4
   30578:	120d803a 	cmpltu	r6,r2,r8
   3057c:	4947883a 	add	r3,r9,r5
   30580:	30c9883a 	add	r4,r6,r3
   30584:	2007883a 	mov	r3,r4
   30588:	1009883a 	mov	r4,r2
   3058c:	180b883a 	mov	r5,r3
   30590:	01800044 	movi	r6,1
   30594:	000f883a 	mov	r7,zero
   30598:	2185883a 	add	r2,r4,r6
   3059c:	1111803a 	cmpltu	r8,r2,r4
   305a0:	29c7883a 	add	r3,r5,r7
   305a4:	40c9883a 	add	r4,r8,r3
   305a8:	2007883a 	mov	r3,r4
   305ac:	1009883a 	mov	r4,r2
   305b0:	180b883a 	mov	r5,r3
   305b4:	e0bff817 	ldw	r2,-32(fp)
   305b8:	11000215 	stw	r4,8(r2)
   305bc:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   305c0:	e0bff817 	ldw	r2,-32(fp)
   305c4:	d0e01504 	addi	r3,gp,-32684
   305c8:	e0fffb15 	stw	r3,-20(fp)
   305cc:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
   305d0:	e0bffa17 	ldw	r2,-24(fp)
   305d4:	e0fffb17 	ldw	r3,-20(fp)
   305d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   305dc:	e0bffb17 	ldw	r2,-20(fp)
   305e0:	10c00017 	ldw	r3,0(r2)
   305e4:	e0bffa17 	ldw	r2,-24(fp)
   305e8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   305ec:	e0bffb17 	ldw	r2,-20(fp)
   305f0:	10800017 	ldw	r2,0(r2)
   305f4:	e0fffa17 	ldw	r3,-24(fp)
   305f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   305fc:	e0bffb17 	ldw	r2,-20(fp)
   30600:	e0fffa17 	ldw	r3,-24(fp)
   30604:	10c00015 	stw	r3,0(r2)
   30608:	e0bffd17 	ldw	r2,-12(fp)
   3060c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   30610:	e0bffc17 	ldw	r2,-16(fp)
   30614:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   30618:	0005883a 	mov	r2,zero
   3061c:	00000306 	br	3062c <alt_alarm_start+0x148>
    }
    else
    {
      return -EINVAL;
   30620:	00bffa84 	movi	r2,-22
   30624:	00000106 	br	3062c <alt_alarm_start+0x148>
    }
  }
  else
  {
    return -ENOTSUP;
   30628:	00bfde84 	movi	r2,-134
  }
}
   3062c:	e037883a 	mov	sp,fp
   30630:	df000017 	ldw	fp,0(sp)
   30634:	dec00104 	addi	sp,sp,4
   30638:	f800283a 	ret

0003063c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   3063c:	defffa04 	addi	sp,sp,-24
   30640:	dfc00515 	stw	ra,20(sp)
   30644:	df000415 	stw	fp,16(sp)
   30648:	df000404 	addi	fp,sp,16
   3064c:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   30650:	008000c4 	movi	r2,3
   30654:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   30658:	e0fffe17 	ldw	r3,-8(fp)
   3065c:	008003f4 	movhi	r2,15
   30660:	10909004 	addi	r2,r2,16960
   30664:	1885383a 	mul	r2,r3,r2
   30668:	100b883a 	mov	r5,r2
   3066c:	0101dcf4 	movhi	r4,1907
   30670:	21165004 	addi	r4,r4,22848
   30674:	0012a540 	call	12a54 <__udivsi3>
  big_loops = us / (INT_MAX/
   30678:	100b883a 	mov	r5,r2
   3067c:	01200034 	movhi	r4,32768
   30680:	213fffc4 	addi	r4,r4,-1
   30684:	0012a540 	call	12a54 <__udivsi3>
   30688:	100b883a 	mov	r5,r2
   3068c:	e13ffc17 	ldw	r4,-16(fp)
   30690:	0012a540 	call	12a54 <__udivsi3>
   30694:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   30698:	e0bffd17 	ldw	r2,-12(fp)
   3069c:	10002a26 	beq	r2,zero,30748 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   306a0:	e03fff15 	stw	zero,-4(fp)
   306a4:	00001706 	br	30704 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   306a8:	00a00034 	movhi	r2,32768
   306ac:	10bfffc4 	addi	r2,r2,-1
   306b0:	10bfffc4 	addi	r2,r2,-1
   306b4:	103ffe1e 	bne	r2,zero,306b0 <__alt_mem_mcu_subsystem_ram_0+0x780106b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   306b8:	e0fffe17 	ldw	r3,-8(fp)
   306bc:	008003f4 	movhi	r2,15
   306c0:	10909004 	addi	r2,r2,16960
   306c4:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
   306c8:	100b883a 	mov	r5,r2
   306cc:	0101dcf4 	movhi	r4,1907
   306d0:	21165004 	addi	r4,r4,22848
   306d4:	0012a540 	call	12a54 <__udivsi3>
   306d8:	100b883a 	mov	r5,r2
   306dc:	01200034 	movhi	r4,32768
   306e0:	213fffc4 	addi	r4,r4,-1
   306e4:	0012a540 	call	12a54 <__udivsi3>
   306e8:	1007883a 	mov	r3,r2
   306ec:	e0bffc17 	ldw	r2,-16(fp)
   306f0:	10c5c83a 	sub	r2,r2,r3
   306f4:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   306f8:	e0bfff17 	ldw	r2,-4(fp)
   306fc:	10800044 	addi	r2,r2,1
   30700:	e0bfff15 	stw	r2,-4(fp)
   30704:	e0ffff17 	ldw	r3,-4(fp)
   30708:	e0bffd17 	ldw	r2,-12(fp)
   3070c:	18bfe616 	blt	r3,r2,306a8 <__alt_mem_mcu_subsystem_ram_0+0x780106a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   30710:	e0fffe17 	ldw	r3,-8(fp)
   30714:	008003f4 	movhi	r2,15
   30718:	10909004 	addi	r2,r2,16960
   3071c:	1885383a 	mul	r2,r3,r2
   30720:	100b883a 	mov	r5,r2
   30724:	0101dcf4 	movhi	r4,1907
   30728:	21165004 	addi	r4,r4,22848
   3072c:	0012a540 	call	12a54 <__udivsi3>
   30730:	1007883a 	mov	r3,r2
   30734:	e0bffc17 	ldw	r2,-16(fp)
   30738:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   3073c:	10bfffc4 	addi	r2,r2,-1
   30740:	103ffe1e 	bne	r2,zero,3073c <__alt_mem_mcu_subsystem_ram_0+0x7801073c>
   30744:	00000d06 	br	3077c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   30748:	e0fffe17 	ldw	r3,-8(fp)
   3074c:	008003f4 	movhi	r2,15
   30750:	10909004 	addi	r2,r2,16960
   30754:	1885383a 	mul	r2,r3,r2
   30758:	100b883a 	mov	r5,r2
   3075c:	0101dcf4 	movhi	r4,1907
   30760:	21165004 	addi	r4,r4,22848
   30764:	0012a540 	call	12a54 <__udivsi3>
   30768:	1007883a 	mov	r3,r2
   3076c:	e0bffc17 	ldw	r2,-16(fp)
   30770:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   30774:	10bfffc4 	addi	r2,r2,-1
   30778:	00bffe16 	blt	zero,r2,30774 <__alt_mem_mcu_subsystem_ram_0+0x78010774>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   3077c:	0005883a 	mov	r2,zero
}
   30780:	e037883a 	mov	sp,fp
   30784:	dfc00117 	ldw	ra,4(sp)
   30788:	df000017 	ldw	fp,0(sp)
   3078c:	dec00204 	addi	sp,sp,8
   30790:	f800283a 	ret

00030794 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   30794:	defffe04 	addi	sp,sp,-8
   30798:	df000115 	stw	fp,4(sp)
   3079c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   307a0:	e03fff15 	stw	zero,-4(fp)
   307a4:	00000506 	br	307bc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   307a8:	e0bfff17 	ldw	r2,-4(fp)
   307ac:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   307b0:	e0bfff17 	ldw	r2,-4(fp)
   307b4:	10800804 	addi	r2,r2,32
   307b8:	e0bfff15 	stw	r2,-4(fp)
   307bc:	e0bfff17 	ldw	r2,-4(fp)
   307c0:	10820030 	cmpltui	r2,r2,2048
   307c4:	103ff81e 	bne	r2,zero,307a8 <__alt_mem_mcu_subsystem_ram_0+0x780107a8>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   307c8:	0001883a 	nop
   307cc:	e037883a 	mov	sp,fp
   307d0:	df000017 	ldw	fp,0(sp)
   307d4:	dec00104 	addi	sp,sp,4
   307d8:	f800283a 	ret

000307dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   307dc:	defffd04 	addi	sp,sp,-12
   307e0:	dfc00215 	stw	ra,8(sp)
   307e4:	df000115 	stw	fp,4(sp)
   307e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   307ec:	008000f4 	movhi	r2,3
   307f0:	1085a204 	addi	r2,r2,5768
   307f4:	e0bfff15 	stw	r2,-4(fp)
   307f8:	00000606 	br	30814 <_do_ctors+0x38>
        (*ctor) (); 
   307fc:	e0bfff17 	ldw	r2,-4(fp)
   30800:	10800017 	ldw	r2,0(r2)
   30804:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   30808:	e0bfff17 	ldw	r2,-4(fp)
   3080c:	10bfff04 	addi	r2,r2,-4
   30810:	e0bfff15 	stw	r2,-4(fp)
   30814:	e0ffff17 	ldw	r3,-4(fp)
   30818:	008000f4 	movhi	r2,3
   3081c:	1085a304 	addi	r2,r2,5772
   30820:	18bff62e 	bgeu	r3,r2,307fc <__alt_mem_mcu_subsystem_ram_0+0x780107fc>
}
   30824:	0001883a 	nop
   30828:	e037883a 	mov	sp,fp
   3082c:	dfc00117 	ldw	ra,4(sp)
   30830:	df000017 	ldw	fp,0(sp)
   30834:	dec00204 	addi	sp,sp,8
   30838:	f800283a 	ret

0003083c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3083c:	defffd04 	addi	sp,sp,-12
   30840:	dfc00215 	stw	ra,8(sp)
   30844:	df000115 	stw	fp,4(sp)
   30848:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3084c:	008000f4 	movhi	r2,3
   30850:	1085a204 	addi	r2,r2,5768
   30854:	e0bfff15 	stw	r2,-4(fp)
   30858:	00000606 	br	30874 <_do_dtors+0x38>
        (*dtor) (); 
   3085c:	e0bfff17 	ldw	r2,-4(fp)
   30860:	10800017 	ldw	r2,0(r2)
   30864:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   30868:	e0bfff17 	ldw	r2,-4(fp)
   3086c:	10bfff04 	addi	r2,r2,-4
   30870:	e0bfff15 	stw	r2,-4(fp)
   30874:	e0ffff17 	ldw	r3,-4(fp)
   30878:	008000f4 	movhi	r2,3
   3087c:	1085a304 	addi	r2,r2,5772
   30880:	18bff62e 	bgeu	r3,r2,3085c <__alt_mem_mcu_subsystem_ram_0+0x7801085c>
}
   30884:	0001883a 	nop
   30888:	e037883a 	mov	sp,fp
   3088c:	dfc00117 	ldw	ra,4(sp)
   30890:	df000017 	ldw	fp,0(sp)
   30894:	dec00204 	addi	sp,sp,8
   30898:	f800283a 	ret

0003089c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3089c:	defffa04 	addi	sp,sp,-24
   308a0:	df000515 	stw	fp,20(sp)
   308a4:	df000504 	addi	fp,sp,20
   308a8:	e13ffc15 	stw	r4,-16(fp)
   308ac:	e17ffb15 	stw	r5,-20(fp)
    alt_dev* next = (alt_dev*) llist->next;
   308b0:	e0bffb17 	ldw	r2,-20(fp)
   308b4:	10800017 	ldw	r2,0(r2)
   308b8:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
   308bc:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
   308c0:	0080fa04 	movi	r2,1000
   308c4:	e0bffd15 	stw	r2,-12(fp)
    
    if (llist == NULL) { return NULL; }
   308c8:	e0bffb17 	ldw	r2,-20(fp)
   308cc:	1000431e 	bne	r2,zero,309dc <alt_find_dev+0x140>
   308d0:	0005883a 	mov	r2,zero
   308d4:	00004506 	br	309ec <alt_find_dev+0x150>
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    {
        len=0;
   308d8:	e03ffe15 	stw	zero,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   308dc:	00001306 	br	3092c <alt_find_dev+0x90>
        {
            if (next->name[len] != name[len]) { break; }
   308e0:	e0bfff17 	ldw	r2,-4(fp)
   308e4:	10c00217 	ldw	r3,8(r2)
   308e8:	e0bffe17 	ldw	r2,-8(fp)
   308ec:	1885883a 	add	r2,r3,r2
   308f0:	11000003 	ldbu	r4,0(r2)
   308f4:	e0bffe17 	ldw	r2,-8(fp)
   308f8:	e0fffc17 	ldw	r3,-16(fp)
   308fc:	1885883a 	add	r2,r3,r2
   30900:	10800003 	ldbu	r2,0(r2)
   30904:	20c03fcc 	andi	r3,r4,255
   30908:	18c0201c 	xori	r3,r3,128
   3090c:	18ffe004 	addi	r3,r3,-128
   30910:	10803fcc 	andi	r2,r2,255
   30914:	1080201c 	xori	r2,r2,128
   30918:	10bfe004 	addi	r2,r2,-128
   3091c:	1880181e 	bne	r3,r2,30980 <alt_find_dev+0xe4>
            len++;
   30920:	e0bffe17 	ldw	r2,-8(fp)
   30924:	10800044 	addi	r2,r2,1
   30928:	e0bffe15 	stw	r2,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   3092c:	e0bffe17 	ldw	r2,-8(fp)
   30930:	e0fffc17 	ldw	r3,-16(fp)
   30934:	1885883a 	add	r2,r3,r2
   30938:	10800003 	ldbu	r2,0(r2)
   3093c:	10803fcc 	andi	r2,r2,255
   30940:	1080201c 	xori	r2,r2,128
   30944:	10bfe004 	addi	r2,r2,-128
   30948:	10000e26 	beq	r2,zero,30984 <alt_find_dev+0xe8>
   3094c:	e0bfff17 	ldw	r2,-4(fp)
   30950:	10c00217 	ldw	r3,8(r2)
   30954:	e0bffe17 	ldw	r2,-8(fp)
   30958:	1885883a 	add	r2,r3,r2
   3095c:	10800003 	ldbu	r2,0(r2)
   30960:	10803fcc 	andi	r2,r2,255
   30964:	1080201c 	xori	r2,r2,128
   30968:	10bfe004 	addi	r2,r2,-128
   3096c:	10000526 	beq	r2,zero,30984 <alt_find_dev+0xe8>
   30970:	e0fffe17 	ldw	r3,-8(fp)
   30974:	e0bffd17 	ldw	r2,-12(fp)
   30978:	18bfd916 	blt	r3,r2,308e0 <__alt_mem_mcu_subsystem_ram_0+0x780108e0>
   3097c:	00000106 	br	30984 <alt_find_dev+0xe8>
            if (next->name[len] != name[len]) { break; }
   30980:	0001883a 	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
   30984:	e0bffe17 	ldw	r2,-8(fp)
   30988:	e0fffc17 	ldw	r3,-16(fp)
   3098c:	1885883a 	add	r2,r3,r2
   30990:	10800003 	ldbu	r2,0(r2)
   30994:	10803fcc 	andi	r2,r2,255
   30998:	1080201c 	xori	r2,r2,128
   3099c:	10bfe004 	addi	r2,r2,-128
   309a0:	10000b1e 	bne	r2,zero,309d0 <alt_find_dev+0x134>
   309a4:	e0bfff17 	ldw	r2,-4(fp)
   309a8:	10c00217 	ldw	r3,8(r2)
   309ac:	e0bffe17 	ldw	r2,-8(fp)
   309b0:	1885883a 	add	r2,r3,r2
   309b4:	10800003 	ldbu	r2,0(r2)
   309b8:	10803fcc 	andi	r2,r2,255
   309bc:	1080201c 	xori	r2,r2,128
   309c0:	10bfe004 	addi	r2,r2,-128
   309c4:	1000021e 	bne	r2,zero,309d0 <alt_find_dev+0x134>
   309c8:	e0bfff17 	ldw	r2,-4(fp)
   309cc:	00000706 	br	309ec <alt_find_dev+0x150>

        next = (alt_dev*) next->llist.next;
   309d0:	e0bfff17 	ldw	r2,-4(fp)
   309d4:	10800017 	ldw	r2,0(r2)
   309d8:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) llist)
   309dc:	e0ffff17 	ldw	r3,-4(fp)
   309e0:	e0bffb17 	ldw	r2,-20(fp)
   309e4:	18bfbc1e 	bne	r3,r2,308d8 <__alt_mem_mcu_subsystem_ram_0+0x780108d8>
    }
  
    /* No match found */
  
    return NULL;
   309e8:	0005883a 	mov	r2,zero
}
   309ec:	e037883a 	mov	sp,fp
   309f0:	df000017 	ldw	fp,0(sp)
   309f4:	dec00104 	addi	sp,sp,4
   309f8:	f800283a 	ret

000309fc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   309fc:	defffc04 	addi	sp,sp,-16
   30a00:	dfc00315 	stw	ra,12(sp)
   30a04:	df000215 	stw	fp,8(sp)
   30a08:	df000204 	addi	fp,sp,8
   30a0c:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   30a10:	d1601304 	addi	r5,gp,-32692
   30a14:	e13ffe17 	ldw	r4,-8(fp)
   30a18:	003089c0 	call	3089c <alt_find_dev>
   30a1c:	e0bfff15 	stw	r2,-4(fp)

  if ((dev) && dev->open)
   30a20:	e0bfff17 	ldw	r2,-4(fp)
   30a24:	10000926 	beq	r2,zero,30a4c <alt_flash_open_dev+0x50>
   30a28:	e0bfff17 	ldw	r2,-4(fp)
   30a2c:	10800317 	ldw	r2,12(r2)
   30a30:	10000626 	beq	r2,zero,30a4c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   30a34:	e0bfff17 	ldw	r2,-4(fp)
   30a38:	10800317 	ldw	r2,12(r2)
   30a3c:	e17ffe17 	ldw	r5,-8(fp)
   30a40:	e13fff17 	ldw	r4,-4(fp)
   30a44:	103ee83a 	callr	r2
   30a48:	00000106 	br	30a50 <alt_flash_open_dev+0x54>
  }

  return dev;
   30a4c:	e0bfff17 	ldw	r2,-4(fp)
}
   30a50:	e037883a 	mov	sp,fp
   30a54:	dfc00117 	ldw	ra,4(sp)
   30a58:	df000017 	ldw	fp,0(sp)
   30a5c:	dec00204 	addi	sp,sp,8
   30a60:	f800283a 	ret

00030a64 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   30a64:	defffd04 	addi	sp,sp,-12
   30a68:	dfc00215 	stw	ra,8(sp)
   30a6c:	df000115 	stw	fp,4(sp)
   30a70:	df000104 	addi	fp,sp,4
   30a74:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   30a78:	e0bfff17 	ldw	r2,-4(fp)
   30a7c:	10000826 	beq	r2,zero,30aa0 <alt_flash_close_dev+0x3c>
   30a80:	e0bfff17 	ldw	r2,-4(fp)
   30a84:	10800417 	ldw	r2,16(r2)
   30a88:	10000526 	beq	r2,zero,30aa0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   30a8c:	e0bfff17 	ldw	r2,-4(fp)
   30a90:	10800417 	ldw	r2,16(r2)
   30a94:	e13fff17 	ldw	r4,-4(fp)
   30a98:	103ee83a 	callr	r2
  }
  return;
   30a9c:	0001883a 	nop
   30aa0:	0001883a 	nop
}
   30aa4:	e037883a 	mov	sp,fp
   30aa8:	dfc00117 	ldw	ra,4(sp)
   30aac:	df000017 	ldw	fp,0(sp)
   30ab0:	dec00204 	addi	sp,sp,8
   30ab4:	f800283a 	ret

00030ab8 <alt_flash_device_register>:

int alt_flash_device_register( alt_flash_fd* fd)
{
   30ab8:	defffd04 	addi	sp,sp,-12
   30abc:	dfc00215 	stw	ra,8(sp)
   30ac0:	df000115 	stw	fp,4(sp)
   30ac4:	df000104 	addi	fp,sp,4
   30ac8:	e13fff15 	stw	r4,-4(fp)
  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   30acc:	d1601304 	addi	r5,gp,-32692
   30ad0:	e13fff17 	ldw	r4,-4(fp)
   30ad4:	00251340 	call	25134 <alt_dev_llist_insert>
}
   30ad8:	e037883a 	mov	sp,fp
   30adc:	dfc00117 	ldw	ra,4(sp)
   30ae0:	df000017 	ldw	fp,0(sp)
   30ae4:	dec00204 	addi	sp,sp,8
   30ae8:	f800283a 	ret

00030aec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   30aec:	defffb04 	addi	sp,sp,-20
   30af0:	df000415 	stw	fp,16(sp)
   30af4:	df000404 	addi	fp,sp,16
   30af8:	e13ffd15 	stw	r4,-12(fp)
   30afc:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   30b00:	e0bffc17 	ldw	r2,-16(fp)
   30b04:	10840070 	cmpltui	r2,r2,4097
   30b08:	1000021e 	bne	r2,zero,30b14 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   30b0c:	00840004 	movi	r2,4096
   30b10:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   30b14:	e0fffd17 	ldw	r3,-12(fp)
   30b18:	e0bffc17 	ldw	r2,-16(fp)
   30b1c:	1885883a 	add	r2,r3,r2
   30b20:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   30b24:	e0bffd17 	ldw	r2,-12(fp)
   30b28:	e0bfff15 	stw	r2,-4(fp)
   30b2c:	00000506 	br	30b44 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   30b30:	e0bfff17 	ldw	r2,-4(fp)
   30b34:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   30b38:	e0bfff17 	ldw	r2,-4(fp)
   30b3c:	10800804 	addi	r2,r2,32
   30b40:	e0bfff15 	stw	r2,-4(fp)
   30b44:	e0ffff17 	ldw	r3,-4(fp)
   30b48:	e0bffe17 	ldw	r2,-8(fp)
   30b4c:	18bff836 	bltu	r3,r2,30b30 <__alt_mem_mcu_subsystem_ram_0+0x78010b30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   30b50:	e0bffd17 	ldw	r2,-12(fp)
   30b54:	108007cc 	andi	r2,r2,31
   30b58:	10000226 	beq	r2,zero,30b64 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   30b5c:	e0bfff17 	ldw	r2,-4(fp)
   30b60:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   30b64:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   30b68:	0001883a 	nop
   30b6c:	e037883a 	mov	sp,fp
   30b70:	df000017 	ldw	fp,0(sp)
   30b74:	dec00104 	addi	sp,sp,4
   30b78:	f800283a 	ret

00030b7c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   30b7c:	defffe04 	addi	sp,sp,-8
   30b80:	df000115 	stw	fp,4(sp)
   30b84:	df000104 	addi	fp,sp,4
   30b88:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   30b8c:	e0bfff17 	ldw	r2,-4(fp)
   30b90:	10bffe84 	addi	r2,r2,-6
   30b94:	10c00428 	cmpgeui	r3,r2,16
   30b98:	1800191e 	bne	r3,zero,30c00 <alt_exception_cause_generated_bad_addr+0x84>
   30b9c:	100690ba 	slli	r3,r2,2
   30ba0:	008000f4 	movhi	r2,3
   30ba4:	1885883a 	add	r2,r3,r2
   30ba8:	1082ec17 	ldw	r2,2992(r2)
   30bac:	1000683a 	jmp	r2
   30bb0:	00030bf0 	cmpltui	zero,zero,3119
   30bb4:	00030bf0 	cmpltui	zero,zero,3119
   30bb8:	00030c00 	call	30c0 <open_socket+0xe8>
   30bbc:	00030c00 	call	30c0 <open_socket+0xe8>
   30bc0:	00030c00 	call	30c0 <open_socket+0xe8>
   30bc4:	00030bf0 	cmpltui	zero,zero,3119
   30bc8:	00030bf8 	rdprs	zero,zero,3119
   30bcc:	00030c00 	call	30c0 <open_socket+0xe8>
   30bd0:	00030bf0 	cmpltui	zero,zero,3119
   30bd4:	00030bf0 	cmpltui	zero,zero,3119
   30bd8:	00030c00 	call	30c0 <open_socket+0xe8>
   30bdc:	00030bf0 	cmpltui	zero,zero,3119
   30be0:	00030bf8 	rdprs	zero,zero,3119
   30be4:	00030c00 	call	30c0 <open_socket+0xe8>
   30be8:	00030c00 	call	30c0 <open_socket+0xe8>
   30bec:	00030bf0 	cmpltui	zero,zero,3119
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   30bf0:	00800044 	movi	r2,1
   30bf4:	00000306 	br	30c04 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   30bf8:	0005883a 	mov	r2,zero
   30bfc:	00000106 	br	30c04 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   30c00:	0005883a 	mov	r2,zero
  }
}
   30c04:	e037883a 	mov	sp,fp
   30c08:	df000017 	ldw	fp,0(sp)
   30c0c:	dec00104 	addi	sp,sp,4
   30c10:	f800283a 	ret

00030c14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   30c14:	defff904 	addi	sp,sp,-28
   30c18:	dfc00615 	stw	ra,24(sp)
   30c1c:	df000515 	stw	fp,20(sp)
   30c20:	df000504 	addi	fp,sp,20
   30c24:	e13ffe15 	stw	r4,-8(fp)
   30c28:	e17ffd15 	stw	r5,-12(fp)
   30c2c:	e1bffc15 	stw	r6,-16(fp)
   30c30:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   30c34:	e1bffb17 	ldw	r6,-20(fp)
   30c38:	e17ffc17 	ldw	r5,-16(fp)
   30c3c:	e13ffd17 	ldw	r4,-12(fp)
   30c40:	0030e340 	call	30e34 <open>
   30c44:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   30c48:	e0bfff17 	ldw	r2,-4(fp)
   30c4c:	10001716 	blt	r2,zero,30cac <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   30c50:	e0bfff17 	ldw	r2,-4(fp)
   30c54:	10c00324 	muli	r3,r2,12
   30c58:	008000f4 	movhi	r2,3
   30c5c:	1885883a 	add	r2,r3,r2
   30c60:	10d97817 	ldw	r3,26080(r2)
   30c64:	e0bffe17 	ldw	r2,-8(fp)
   30c68:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   30c6c:	e0bfff17 	ldw	r2,-4(fp)
   30c70:	10c00324 	muli	r3,r2,12
   30c74:	008000f4 	movhi	r2,3
   30c78:	1885883a 	add	r2,r3,r2
   30c7c:	10d97917 	ldw	r3,26084(r2)
   30c80:	e0bffe17 	ldw	r2,-8(fp)
   30c84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   30c88:	e0bfff17 	ldw	r2,-4(fp)
   30c8c:	10c00324 	muli	r3,r2,12
   30c90:	008000f4 	movhi	r2,3
   30c94:	1885883a 	add	r2,r3,r2
   30c98:	10d97a17 	ldw	r3,26088(r2)
   30c9c:	e0bffe17 	ldw	r2,-8(fp)
   30ca0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   30ca4:	e13fff17 	ldw	r4,-4(fp)
   30ca8:	0025d380 	call	25d38 <alt_release_fd>
  }
} 
   30cac:	0001883a 	nop
   30cb0:	e037883a 	mov	sp,fp
   30cb4:	dfc00117 	ldw	ra,4(sp)
   30cb8:	df000017 	ldw	fp,0(sp)
   30cbc:	dec00204 	addi	sp,sp,8
   30cc0:	f800283a 	ret

00030cc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   30cc4:	defffb04 	addi	sp,sp,-20
   30cc8:	dfc00415 	stw	ra,16(sp)
   30ccc:	df000315 	stw	fp,12(sp)
   30cd0:	df000304 	addi	fp,sp,12
   30cd4:	e13fff15 	stw	r4,-4(fp)
   30cd8:	e17ffe15 	stw	r5,-8(fp)
   30cdc:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   30ce0:	01c07fc4 	movi	r7,511
   30ce4:	01800044 	movi	r6,1
   30ce8:	e17fff17 	ldw	r5,-4(fp)
   30cec:	010000f4 	movhi	r4,3
   30cf0:	21197b04 	addi	r4,r4,26092
   30cf4:	0030c140 	call	30c14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   30cf8:	01c07fc4 	movi	r7,511
   30cfc:	000d883a 	mov	r6,zero
   30d00:	e17ffe17 	ldw	r5,-8(fp)
   30d04:	010000f4 	movhi	r4,3
   30d08:	21197804 	addi	r4,r4,26080
   30d0c:	0030c140 	call	30c14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   30d10:	01c07fc4 	movi	r7,511
   30d14:	01800044 	movi	r6,1
   30d18:	e17ffd17 	ldw	r5,-12(fp)
   30d1c:	010000f4 	movhi	r4,3
   30d20:	21197e04 	addi	r4,r4,26104
   30d24:	0030c140 	call	30c14 <alt_open_fd>
}  
   30d28:	0001883a 	nop
   30d2c:	e037883a 	mov	sp,fp
   30d30:	dfc00117 	ldw	ra,4(sp)
   30d34:	df000017 	ldw	fp,0(sp)
   30d38:	dec00204 	addi	sp,sp,8
   30d3c:	f800283a 	ret

00030d40 <alt_get_errno>:
{
   30d40:	defffe04 	addi	sp,sp,-8
   30d44:	dfc00115 	stw	ra,4(sp)
   30d48:	df000015 	stw	fp,0(sp)
   30d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30d50:	d0a00c17 	ldw	r2,-32720(gp)
   30d54:	10000326 	beq	r2,zero,30d64 <alt_get_errno+0x24>
   30d58:	d0a00c17 	ldw	r2,-32720(gp)
   30d5c:	103ee83a 	callr	r2
   30d60:	00000106 	br	30d68 <alt_get_errno+0x28>
   30d64:	d0a7ae04 	addi	r2,gp,-24904
}
   30d68:	e037883a 	mov	sp,fp
   30d6c:	dfc00117 	ldw	ra,4(sp)
   30d70:	df000017 	ldw	fp,0(sp)
   30d74:	dec00204 	addi	sp,sp,8
   30d78:	f800283a 	ret

00030d7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   30d7c:	defffd04 	addi	sp,sp,-12
   30d80:	df000215 	stw	fp,8(sp)
   30d84:	df000204 	addi	fp,sp,8
   30d88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   30d8c:	e0bffe17 	ldw	r2,-8(fp)
   30d90:	10800217 	ldw	r2,8(r2)
   30d94:	10d00034 	orhi	r3,r2,16384
   30d98:	e0bffe17 	ldw	r2,-8(fp)
   30d9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   30da0:	e03fff15 	stw	zero,-4(fp)
   30da4:	00001a06 	br	30e10 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30da8:	e0bfff17 	ldw	r2,-4(fp)
   30dac:	10c00324 	muli	r3,r2,12
   30db0:	008000f4 	movhi	r2,3
   30db4:	1885883a 	add	r2,r3,r2
   30db8:	10d97817 	ldw	r3,26080(r2)
   30dbc:	e0bffe17 	ldw	r2,-8(fp)
   30dc0:	10800017 	ldw	r2,0(r2)
   30dc4:	18800f1e 	bne	r3,r2,30e04 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30dc8:	e0bfff17 	ldw	r2,-4(fp)
   30dcc:	10c00324 	muli	r3,r2,12
   30dd0:	008000f4 	movhi	r2,3
   30dd4:	1885883a 	add	r2,r3,r2
   30dd8:	10997a17 	ldw	r2,26088(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   30ddc:	1000090e 	bge	r2,zero,30e04 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   30de0:	e0bfff17 	ldw	r2,-4(fp)
   30de4:	10c00324 	muli	r3,r2,12
   30de8:	008000f4 	movhi	r2,3
   30dec:	10997804 	addi	r2,r2,26080
   30df0:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30df4:	e0fffe17 	ldw	r3,-8(fp)
   30df8:	18800226 	beq	r3,r2,30e04 <alt_file_locked+0x88>
    {
      return -EACCES;
   30dfc:	00bffcc4 	movi	r2,-13
   30e00:	00000806 	br	30e24 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   30e04:	e0bfff17 	ldw	r2,-4(fp)
   30e08:	10800044 	addi	r2,r2,1
   30e0c:	e0bfff15 	stw	r2,-4(fp)
   30e10:	d0a00b17 	ldw	r2,-32724(gp)
   30e14:	1007883a 	mov	r3,r2
   30e18:	e0bfff17 	ldw	r2,-4(fp)
   30e1c:	18bfe22e 	bgeu	r3,r2,30da8 <__alt_mem_mcu_subsystem_ram_0+0x78010da8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   30e20:	0005883a 	mov	r2,zero
}
   30e24:	e037883a 	mov	sp,fp
   30e28:	df000017 	ldw	fp,0(sp)
   30e2c:	dec00104 	addi	sp,sp,4
   30e30:	f800283a 	ret

00030e34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   30e34:	defff604 	addi	sp,sp,-40
   30e38:	dfc00915 	stw	ra,36(sp)
   30e3c:	df000815 	stw	fp,32(sp)
   30e40:	df000804 	addi	fp,sp,32
   30e44:	e13ffa15 	stw	r4,-24(fp)
   30e48:	e17ff915 	stw	r5,-28(fp)
   30e4c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   30e50:	00bfffc4 	movi	r2,-1
   30e54:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   30e58:	00bffb44 	movi	r2,-19
   30e5c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   30e60:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   30e64:	d1600904 	addi	r5,gp,-32732
   30e68:	e13ffa17 	ldw	r4,-24(fp)
   30e6c:	003089c0 	call	3089c <alt_find_dev>
   30e70:	e0bfff15 	stw	r2,-4(fp)
   30e74:	e0bfff17 	ldw	r2,-4(fp)
   30e78:	1000051e 	bne	r2,zero,30e90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   30e7c:	e13ffa17 	ldw	r4,-24(fp)
   30e80:	00311740 	call	31174 <alt_find_file>
   30e84:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   30e88:	00800044 	movi	r2,1
   30e8c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   30e90:	e0bfff17 	ldw	r2,-4(fp)
   30e94:	10002926 	beq	r2,zero,30f3c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   30e98:	e13fff17 	ldw	r4,-4(fp)
   30e9c:	00312f80 	call	312f8 <alt_get_fd>
   30ea0:	e0bffe15 	stw	r2,-8(fp)
   30ea4:	e0bffe17 	ldw	r2,-8(fp)
   30ea8:	1000030e 	bge	r2,zero,30eb8 <open+0x84>
    {
      status = index;
   30eac:	e0bffe17 	ldw	r2,-8(fp)
   30eb0:	e0bffd15 	stw	r2,-12(fp)
   30eb4:	00002306 	br	30f44 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   30eb8:	e0bffe17 	ldw	r2,-8(fp)
   30ebc:	10c00324 	muli	r3,r2,12
   30ec0:	008000f4 	movhi	r2,3
   30ec4:	10997804 	addi	r2,r2,26080
   30ec8:	1885883a 	add	r2,r3,r2
   30ecc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   30ed0:	e0fff917 	ldw	r3,-28(fp)
   30ed4:	00900034 	movhi	r2,16384
   30ed8:	10bfffc4 	addi	r2,r2,-1
   30edc:	1886703a 	and	r3,r3,r2
   30ee0:	e0bffb17 	ldw	r2,-20(fp)
   30ee4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30ee8:	e0bffc17 	ldw	r2,-16(fp)
   30eec:	1000051e 	bne	r2,zero,30f04 <open+0xd0>
   30ef0:	e13ffb17 	ldw	r4,-20(fp)
   30ef4:	0030d7c0 	call	30d7c <alt_file_locked>
   30ef8:	e0bffd15 	stw	r2,-12(fp)
   30efc:	e0bffd17 	ldw	r2,-12(fp)
   30f00:	10001016 	blt	r2,zero,30f44 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   30f04:	e0bfff17 	ldw	r2,-4(fp)
   30f08:	10800317 	ldw	r2,12(r2)
   30f0c:	10000826 	beq	r2,zero,30f30 <open+0xfc>
   30f10:	e0bfff17 	ldw	r2,-4(fp)
   30f14:	10800317 	ldw	r2,12(r2)
   30f18:	e1fff817 	ldw	r7,-32(fp)
   30f1c:	e1bff917 	ldw	r6,-28(fp)
   30f20:	e17ffa17 	ldw	r5,-24(fp)
   30f24:	e13ffb17 	ldw	r4,-20(fp)
   30f28:	103ee83a 	callr	r2
   30f2c:	00000106 	br	30f34 <open+0x100>
   30f30:	0005883a 	mov	r2,zero
   30f34:	e0bffd15 	stw	r2,-12(fp)
   30f38:	00000206 	br	30f44 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   30f3c:	00bffb44 	movi	r2,-19
   30f40:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   30f44:	e0bffd17 	ldw	r2,-12(fp)
   30f48:	1000090e 	bge	r2,zero,30f70 <open+0x13c>
  {
    alt_release_fd (index);  
   30f4c:	e13ffe17 	ldw	r4,-8(fp)
   30f50:	0025d380 	call	25d38 <alt_release_fd>
    ALT_ERRNO = -status;
   30f54:	0030d400 	call	30d40 <alt_get_errno>
   30f58:	1007883a 	mov	r3,r2
   30f5c:	e0bffd17 	ldw	r2,-12(fp)
   30f60:	0085c83a 	sub	r2,zero,r2
   30f64:	18800015 	stw	r2,0(r3)
    return -1;
   30f68:	00bfffc4 	movi	r2,-1
   30f6c:	00000106 	br	30f74 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   30f70:	e0bffe17 	ldw	r2,-8(fp)
}
   30f74:	e037883a 	mov	sp,fp
   30f78:	dfc00117 	ldw	ra,4(sp)
   30f7c:	df000017 	ldw	fp,0(sp)
   30f80:	dec00204 	addi	sp,sp,8
   30f84:	f800283a 	ret

00030f88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   30f88:	defffa04 	addi	sp,sp,-24
   30f8c:	df000515 	stw	fp,20(sp)
   30f90:	df000504 	addi	fp,sp,20
   30f94:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   30f98:	0005303a 	rdctl	r2,status
   30f9c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30fa0:	e0fffc17 	ldw	r3,-16(fp)
   30fa4:	00bfff84 	movi	r2,-2
   30fa8:	1884703a 	and	r2,r3,r2
   30fac:	1001703a 	wrctl	status,r2
  return context;
   30fb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30fb4:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   30fb8:	e0bffb17 	ldw	r2,-20(fp)
   30fbc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   30fc0:	e0bffd17 	ldw	r2,-12(fp)
   30fc4:	10800017 	ldw	r2,0(r2)
   30fc8:	e0fffd17 	ldw	r3,-12(fp)
   30fcc:	18c00117 	ldw	r3,4(r3)
   30fd0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   30fd4:	e0bffd17 	ldw	r2,-12(fp)
   30fd8:	10800117 	ldw	r2,4(r2)
   30fdc:	e0fffd17 	ldw	r3,-12(fp)
   30fe0:	18c00017 	ldw	r3,0(r3)
   30fe4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   30fe8:	e0bffd17 	ldw	r2,-12(fp)
   30fec:	e0fffd17 	ldw	r3,-12(fp)
   30ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   30ff4:	e0bffd17 	ldw	r2,-12(fp)
   30ff8:	e0fffd17 	ldw	r3,-12(fp)
   30ffc:	10c00015 	stw	r3,0(r2)
   31000:	e0bfff17 	ldw	r2,-4(fp)
   31004:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   31008:	e0bffe17 	ldw	r2,-8(fp)
   3100c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   31010:	0001883a 	nop
   31014:	e037883a 	mov	sp,fp
   31018:	df000017 	ldw	fp,0(sp)
   3101c:	dec00104 	addi	sp,sp,4
   31020:	f800283a 	ret

00031024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31024:	defff904 	addi	sp,sp,-28
   31028:	dfc00615 	stw	ra,24(sp)
   3102c:	df000515 	stw	fp,20(sp)
   31030:	dc400415 	stw	r17,16(sp)
   31034:	dc000315 	stw	r16,12(sp)
   31038:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3103c:	d0a01517 	ldw	r2,-32684(gp)
   31040:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31044:	d127b917 	ldw	r4,-24860(gp)
   31048:	d167ba17 	ldw	r5,-24856(gp)
   3104c:	01800044 	movi	r6,1
   31050:	000f883a 	mov	r7,zero
   31054:	2185883a 	add	r2,r4,r6
   31058:	1111803a 	cmpltu	r8,r2,r4
   3105c:	29c7883a 	add	r3,r5,r7
   31060:	40c9883a 	add	r4,r8,r3
   31064:	2007883a 	mov	r3,r4
   31068:	1009883a 	mov	r4,r2
   3106c:	180b883a 	mov	r5,r3
   31070:	d127b915 	stw	r4,-24860(gp)
   31074:	d167ba15 	stw	r5,-24856(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31078:	00002906 	br	31120 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   3107c:	e0bffd17 	ldw	r2,-12(fp)
   31080:	10800017 	ldw	r2,0(r2)
   31084:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   31088:	e13ffd17 	ldw	r4,-12(fp)
   3108c:	20800217 	ldw	r2,8(r4)
   31090:	20c00317 	ldw	r3,12(r4)
   31094:	d127b917 	ldw	r4,-24860(gp)
   31098:	d167ba17 	ldw	r5,-24856(gp)
   3109c:	28c01e36 	bltu	r5,r3,31118 <alt_tick+0xf4>
   310a0:	1940011e 	bne	r3,r5,310a8 <alt_tick+0x84>
   310a4:	20801c36 	bltu	r4,r2,31118 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   310a8:	e0bffd17 	ldw	r2,-12(fp)
   310ac:	10800417 	ldw	r2,16(r2)
   310b0:	e0fffd17 	ldw	r3,-12(fp)
   310b4:	18c00517 	ldw	r3,20(r3)
   310b8:	1809883a 	mov	r4,r3
   310bc:	103ee83a 	callr	r2
   310c0:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   310c4:	e0bffb17 	ldw	r2,-20(fp)
   310c8:	1000031e 	bne	r2,zero,310d8 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   310cc:	e13ffd17 	ldw	r4,-12(fp)
   310d0:	0030f880 	call	30f88 <alt_alarm_stop>
   310d4:	00001006 	br	31118 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   310d8:	e0bffd17 	ldw	r2,-12(fp)
   310dc:	11000217 	ldw	r4,8(r2)
   310e0:	11400317 	ldw	r5,12(r2)
   310e4:	e0bffb17 	ldw	r2,-20(fp)
   310e8:	1021883a 	mov	r16,r2
   310ec:	0023883a 	mov	r17,zero
   310f0:	2405883a 	add	r2,r4,r16
   310f4:	110d803a 	cmpltu	r6,r2,r4
   310f8:	2c47883a 	add	r3,r5,r17
   310fc:	30c9883a 	add	r4,r6,r3
   31100:	2007883a 	mov	r3,r4
   31104:	1009883a 	mov	r4,r2
   31108:	180b883a 	mov	r5,r3
   3110c:	e0bffd17 	ldw	r2,-12(fp)
   31110:	11000215 	stw	r4,8(r2)
   31114:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   31118:	e0bffc17 	ldw	r2,-16(fp)
   3111c:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   31120:	e0fffd17 	ldw	r3,-12(fp)
   31124:	d0a01504 	addi	r2,gp,-32684
   31128:	18bfd41e 	bne	r3,r2,3107c <__alt_mem_mcu_subsystem_ram_0+0x7801107c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3112c:	0001883a 	nop
}
   31130:	0001883a 	nop
   31134:	e6fffe04 	addi	sp,fp,-8
   31138:	dfc00317 	ldw	ra,12(sp)
   3113c:	df000217 	ldw	fp,8(sp)
   31140:	dc400117 	ldw	r17,4(sp)
   31144:	dc000017 	ldw	r16,0(sp)
   31148:	dec00404 	addi	sp,sp,16
   3114c:	f800283a 	ret

00031150 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   31150:	deffff04 	addi	sp,sp,-4
   31154:	df000015 	stw	fp,0(sp)
   31158:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3115c:	000170fa 	wrctl	ienable,zero
}
   31160:	0001883a 	nop
   31164:	e037883a 	mov	sp,fp
   31168:	df000017 	ldw	fp,0(sp)
   3116c:	dec00104 	addi	sp,sp,4
   31170:	f800283a 	ret

00031174 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   31174:	defffb04 	addi	sp,sp,-20
   31178:	df000415 	stw	fp,16(sp)
   3117c:	df000404 	addi	fp,sp,16
   31180:	e13ffc15 	stw	r4,-16(fp)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
   31184:	d0a00717 	ldw	r2,-32740(gp)
   31188:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
   3118c:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
   31190:	0080fa04 	movi	r2,1000
   31194:	e0bffd15 	stw	r2,-12(fp)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
   31198:	00004f06 	br	312d8 <alt_find_file+0x164>
    {
        len=0;
   3119c:	e03ffe15 	stw	zero,-8(fp)
        while (len < MAX_STRING_LENGTH)    
   311a0:	00004306 	br	312b0 <alt_find_file+0x13c>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
   311a4:	e0bfff17 	ldw	r2,-4(fp)
   311a8:	10c00217 	ldw	r3,8(r2)
   311ac:	e0bffe17 	ldw	r2,-8(fp)
   311b0:	1885883a 	add	r2,r3,r2
   311b4:	10800003 	ldbu	r2,0(r2)
   311b8:	10803fcc 	andi	r2,r2,255
   311bc:	1080201c 	xori	r2,r2,128
   311c0:	10bfe004 	addi	r2,r2,-128
   311c4:	10800bd8 	cmpnei	r2,r2,47
   311c8:	10000a1e 	bne	r2,zero,311f4 <alt_find_file+0x80>
   311cc:	e0bfff17 	ldw	r2,-4(fp)
   311d0:	10c00217 	ldw	r3,8(r2)
   311d4:	e0bffe17 	ldw	r2,-8(fp)
   311d8:	10800044 	addi	r2,r2,1
   311dc:	1885883a 	add	r2,r3,r2
   311e0:	10800003 	ldbu	r2,0(r2)
   311e4:	10803fcc 	andi	r2,r2,255
   311e8:	1080201c 	xori	r2,r2,128
   311ec:	10bfe004 	addi	r2,r2,-128
   311f0:	10000926 	beq	r2,zero,31218 <alt_find_file+0xa4>
   311f4:	e0bfff17 	ldw	r2,-4(fp)
   311f8:	10c00217 	ldw	r3,8(r2)
   311fc:	e0bffe17 	ldw	r2,-8(fp)
   31200:	1885883a 	add	r2,r3,r2
   31204:	10800003 	ldbu	r2,0(r2)
   31208:	10803fcc 	andi	r2,r2,255
   3120c:	1080201c 	xori	r2,r2,128
   31210:	10bfe004 	addi	r2,r2,-128
   31214:	1000131e 	bne	r2,zero,31264 <alt_find_file+0xf0>
            { 
                if ((name[len]== '/') || (name[len] == 0))
   31218:	e0bffe17 	ldw	r2,-8(fp)
   3121c:	e0fffc17 	ldw	r3,-16(fp)
   31220:	1885883a 	add	r2,r3,r2
   31224:	10800003 	ldbu	r2,0(r2)
   31228:	10803fcc 	andi	r2,r2,255
   3122c:	1080201c 	xori	r2,r2,128
   31230:	10bfe004 	addi	r2,r2,-128
   31234:	10800be0 	cmpeqi	r2,r2,47
   31238:	1000081e 	bne	r2,zero,3125c <alt_find_file+0xe8>
   3123c:	e0bffe17 	ldw	r2,-8(fp)
   31240:	e0fffc17 	ldw	r3,-16(fp)
   31244:	1885883a 	add	r2,r3,r2
   31248:	10800003 	ldbu	r2,0(r2)
   3124c:	10803fcc 	andi	r2,r2,255
   31250:	1080201c 	xori	r2,r2,128
   31254:	10bfe004 	addi	r2,r2,-128
   31258:	1000191e 	bne	r2,zero,312c0 <alt_find_file+0x14c>
                {
                    return next;
   3125c:	e0bfff17 	ldw	r2,-4(fp)
   31260:	00002106 	br	312e8 <alt_find_file+0x174>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
   31264:	e0bfff17 	ldw	r2,-4(fp)
   31268:	10c00217 	ldw	r3,8(r2)
   3126c:	e0bffe17 	ldw	r2,-8(fp)
   31270:	1885883a 	add	r2,r3,r2
   31274:	11000003 	ldbu	r4,0(r2)
   31278:	e0bffe17 	ldw	r2,-8(fp)
   3127c:	e0fffc17 	ldw	r3,-16(fp)
   31280:	1885883a 	add	r2,r3,r2
   31284:	10800003 	ldbu	r2,0(r2)
   31288:	20c03fcc 	andi	r3,r4,255
   3128c:	18c0201c 	xori	r3,r3,128
   31290:	18ffe004 	addi	r3,r3,-128
   31294:	10803fcc 	andi	r2,r2,255
   31298:	1080201c 	xori	r2,r2,128
   3129c:	10bfe004 	addi	r2,r2,-128
   312a0:	1880091e 	bne	r3,r2,312c8 <alt_find_file+0x154>
            len++;
   312a4:	e0bffe17 	ldw	r2,-8(fp)
   312a8:	10800044 	addi	r2,r2,1
   312ac:	e0bffe15 	stw	r2,-8(fp)
        while (len < MAX_STRING_LENGTH)    
   312b0:	e0fffe17 	ldw	r3,-8(fp)
   312b4:	e0bffd17 	ldw	r2,-12(fp)
   312b8:	18bfba16 	blt	r3,r2,311a4 <__alt_mem_mcu_subsystem_ram_0+0x780111a4>
   312bc:	00000306 	br	312cc <alt_find_file+0x158>
                break;
   312c0:	0001883a 	nop
   312c4:	00000106 	br	312cc <alt_find_file+0x158>
            if (next->name[len]!=name[len]) { break; }
   312c8:	0001883a 	nop
        }  
        
        next = (alt_dev*) next->llist.next;
   312cc:	e0bfff17 	ldw	r2,-4(fp)
   312d0:	10800017 	ldw	r2,0(r2)
   312d4:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) &alt_fs_list)
   312d8:	e0ffff17 	ldw	r3,-4(fp)
   312dc:	d0a00704 	addi	r2,gp,-32740
   312e0:	18bfae1e 	bne	r3,r2,3119c <__alt_mem_mcu_subsystem_ram_0+0x7801119c>
    }
  
    /* No match found */
  
    return NULL;     
   312e4:	0005883a 	mov	r2,zero
}
   312e8:	e037883a 	mov	sp,fp
   312ec:	df000017 	ldw	fp,0(sp)
   312f0:	dec00104 	addi	sp,sp,4
   312f4:	f800283a 	ret

000312f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   312f8:	defffc04 	addi	sp,sp,-16
   312fc:	df000315 	stw	fp,12(sp)
   31300:	df000304 	addi	fp,sp,12
   31304:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   31308:	00bffa04 	movi	r2,-24
   3130c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   31310:	e03fff15 	stw	zero,-4(fp)
   31314:	00001706 	br	31374 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   31318:	e0bfff17 	ldw	r2,-4(fp)
   3131c:	10c00324 	muli	r3,r2,12
   31320:	008000f4 	movhi	r2,3
   31324:	1885883a 	add	r2,r3,r2
   31328:	10997817 	ldw	r2,26080(r2)
   3132c:	10000e1e 	bne	r2,zero,31368 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   31330:	e0bfff17 	ldw	r2,-4(fp)
   31334:	11000324 	muli	r4,r2,12
   31338:	e0fffd17 	ldw	r3,-12(fp)
   3133c:	008000f4 	movhi	r2,3
   31340:	2085883a 	add	r2,r4,r2
   31344:	10d97815 	stw	r3,26080(r2)
      if (i > alt_max_fd)
   31348:	d0e00b17 	ldw	r3,-32724(gp)
   3134c:	e0bfff17 	ldw	r2,-4(fp)
   31350:	1880020e 	bge	r3,r2,3135c <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   31354:	e0bfff17 	ldw	r2,-4(fp)
   31358:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   3135c:	e0bfff17 	ldw	r2,-4(fp)
   31360:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   31364:	00000706 	br	31384 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   31368:	e0bfff17 	ldw	r2,-4(fp)
   3136c:	10800044 	addi	r2,r2,1
   31370:	e0bfff15 	stw	r2,-4(fp)
   31374:	e0bfff17 	ldw	r2,-4(fp)
   31378:	10800810 	cmplti	r2,r2,32
   3137c:	103fe61e 	bne	r2,zero,31318 <__alt_mem_mcu_subsystem_ram_0+0x78011318>
    }
  }

 alt_get_fd_exit:
   31380:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   31384:	e0bffe17 	ldw	r2,-8(fp)
}
   31388:	e037883a 	mov	sp,fp
   3138c:	df000017 	ldw	fp,0(sp)
   31390:	dec00104 	addi	sp,sp,4
   31394:	f800283a 	ret

00031398 <atexit>:
   31398:	200b883a 	mov	r5,r4
   3139c:	000f883a 	mov	r7,zero
   313a0:	000d883a 	mov	r6,zero
   313a4:	0009883a 	mov	r4,zero
   313a8:	00313e01 	jmpi	313e0 <__register_exitproc>

000313ac <exit>:
   313ac:	defffe04 	addi	sp,sp,-8
   313b0:	000b883a 	mov	r5,zero
   313b4:	dc000015 	stw	r16,0(sp)
   313b8:	dfc00115 	stw	ra,4(sp)
   313bc:	2021883a 	mov	r16,r4
   313c0:	00314ec0 	call	314ec <__call_exitprocs>
   313c4:	008000f4 	movhi	r2,3
   313c8:	111e6517 	ldw	r4,31124(r2)
   313cc:	20800f17 	ldw	r2,60(r4)
   313d0:	10000126 	beq	r2,zero,313d8 <exit+0x2c>
   313d4:	103ee83a 	callr	r2
   313d8:	8009883a 	mov	r4,r16
   313dc:	00316580 	call	31658 <_exit>

000313e0 <__register_exitproc>:
   313e0:	defffa04 	addi	sp,sp,-24
   313e4:	008000f4 	movhi	r2,3
   313e8:	dc000315 	stw	r16,12(sp)
   313ec:	141e6517 	ldw	r16,31124(r2)
   313f0:	dc400415 	stw	r17,16(sp)
   313f4:	dfc00515 	stw	ra,20(sp)
   313f8:	80c05217 	ldw	r3,328(r16)
   313fc:	2023883a 	mov	r17,r4
   31400:	18003526 	beq	r3,zero,314d8 <__register_exitproc+0xf8>
   31404:	18800117 	ldw	r2,4(r3)
   31408:	11000808 	cmpgei	r4,r2,32
   3140c:	20000d1e 	bne	r4,zero,31444 <__register_exitproc+0x64>
   31410:	12400044 	addi	r9,r2,1
   31414:	8800211e 	bne	r17,zero,3149c <__register_exitproc+0xbc>
   31418:	10800084 	addi	r2,r2,2
   3141c:	100890ba 	slli	r4,r2,2
   31420:	1a400115 	stw	r9,4(r3)
   31424:	0005883a 	mov	r2,zero
   31428:	1907883a 	add	r3,r3,r4
   3142c:	19400015 	stw	r5,0(r3)
   31430:	dfc00517 	ldw	ra,20(sp)
   31434:	dc400417 	ldw	r17,16(sp)
   31438:	dc000317 	ldw	r16,12(sp)
   3143c:	dec00604 	addi	sp,sp,24
   31440:	f800283a 	ret
   31444:	00800074 	movhi	r2,1
   31448:	10949704 	addi	r2,r2,21084
   3144c:	10002526 	beq	r2,zero,314e4 <__register_exitproc+0x104>
   31450:	01006404 	movi	r4,400
   31454:	d9c00215 	stw	r7,8(sp)
   31458:	d9800115 	stw	r6,4(sp)
   3145c:	d9400015 	stw	r5,0(sp)
   31460:	001525c0 	call	1525c <malloc>
   31464:	1007883a 	mov	r3,r2
   31468:	10001e26 	beq	r2,zero,314e4 <__register_exitproc+0x104>
   3146c:	80805217 	ldw	r2,328(r16)
   31470:	18000115 	stw	zero,4(r3)
   31474:	02400044 	movi	r9,1
   31478:	18800015 	stw	r2,0(r3)
   3147c:	80c05215 	stw	r3,328(r16)
   31480:	18006215 	stw	zero,392(r3)
   31484:	18006315 	stw	zero,396(r3)
   31488:	0005883a 	mov	r2,zero
   3148c:	d9c00217 	ldw	r7,8(sp)
   31490:	d9800117 	ldw	r6,4(sp)
   31494:	d9400017 	ldw	r5,0(sp)
   31498:	883fdf26 	beq	r17,zero,31418 <__alt_mem_mcu_subsystem_ram_0+0x78011418>
   3149c:	100890ba 	slli	r4,r2,2
   314a0:	02000044 	movi	r8,1
   314a4:	4090983a 	sll	r8,r8,r2
   314a8:	1909883a 	add	r4,r3,r4
   314ac:	21802215 	stw	r6,136(r4)
   314b0:	19806217 	ldw	r6,392(r3)
   314b4:	8c400098 	cmpnei	r17,r17,2
   314b8:	320cb03a 	or	r6,r6,r8
   314bc:	19806215 	stw	r6,392(r3)
   314c0:	21c04215 	stw	r7,264(r4)
   314c4:	883fd41e 	bne	r17,zero,31418 <__alt_mem_mcu_subsystem_ram_0+0x78011418>
   314c8:	19006317 	ldw	r4,396(r3)
   314cc:	2210b03a 	or	r8,r4,r8
   314d0:	1a006315 	stw	r8,396(r3)
   314d4:	003fd006 	br	31418 <__alt_mem_mcu_subsystem_ram_0+0x78011418>
   314d8:	80c05304 	addi	r3,r16,332
   314dc:	80c05215 	stw	r3,328(r16)
   314e0:	003fc806 	br	31404 <__alt_mem_mcu_subsystem_ram_0+0x78011404>
   314e4:	00bfffc4 	movi	r2,-1
   314e8:	003fd106 	br	31430 <__alt_mem_mcu_subsystem_ram_0+0x78011430>

000314ec <__call_exitprocs>:
   314ec:	defff404 	addi	sp,sp,-48
   314f0:	008000f4 	movhi	r2,3
   314f4:	dd400715 	stw	r21,28(sp)
   314f8:	155e6517 	ldw	r21,31124(r2)
   314fc:	dd000615 	stw	r20,24(sp)
   31500:	05000074 	movhi	r20,1
   31504:	a8805204 	addi	r2,r21,328
   31508:	df000a15 	stw	fp,40(sp)
   3150c:	dcc00515 	stw	r19,20(sp)
   31510:	dfc00b15 	stw	ra,44(sp)
   31514:	ddc00915 	stw	r23,36(sp)
   31518:	dd800815 	stw	r22,32(sp)
   3151c:	dc800415 	stw	r18,16(sp)
   31520:	dc400315 	stw	r17,12(sp)
   31524:	dc000215 	stw	r16,8(sp)
   31528:	d9000115 	stw	r4,4(sp)
   3152c:	2839883a 	mov	fp,r5
   31530:	d8800015 	stw	r2,0(sp)
   31534:	04c00044 	movi	r19,1
   31538:	a5149b04 	addi	r20,r20,21100
   3153c:	ac805217 	ldw	r18,328(r21)
   31540:	90001826 	beq	r18,zero,315a4 <__call_exitprocs+0xb8>
   31544:	ddc00017 	ldw	r23,0(sp)
   31548:	94000117 	ldw	r16,4(r18)
   3154c:	847fffc4 	addi	r17,r16,-1
   31550:	88000a16 	blt	r17,zero,3157c <__call_exitprocs+0x90>
   31554:	84000044 	addi	r16,r16,1
   31558:	802090ba 	slli	r16,r16,2
   3155c:	9421883a 	add	r16,r18,r16
   31560:	e0001c26 	beq	fp,zero,315d4 <__call_exitprocs+0xe8>
   31564:	80804017 	ldw	r2,256(r16)
   31568:	17001a26 	beq	r2,fp,315d4 <__call_exitprocs+0xe8>
   3156c:	8c7fffc4 	addi	r17,r17,-1
   31570:	88bfffd8 	cmpnei	r2,r17,-1
   31574:	843fff04 	addi	r16,r16,-4
   31578:	103ff91e 	bne	r2,zero,31560 <__alt_mem_mcu_subsystem_ram_0+0x78011560>
   3157c:	a0000926 	beq	r20,zero,315a4 <__call_exitprocs+0xb8>
   31580:	90c00117 	ldw	r3,4(r18)
   31584:	90800017 	ldw	r2,0(r18)
   31588:	18002d1e 	bne	r3,zero,31640 <__call_exitprocs+0x154>
   3158c:	10002c26 	beq	r2,zero,31640 <__call_exitprocs+0x154>
   31590:	9009883a 	mov	r4,r18
   31594:	b8800015 	stw	r2,0(r23)
   31598:	001526c0 	call	1526c <free>
   3159c:	bc800017 	ldw	r18,0(r23)
   315a0:	903fe91e 	bne	r18,zero,31548 <__alt_mem_mcu_subsystem_ram_0+0x78011548>
   315a4:	dfc00b17 	ldw	ra,44(sp)
   315a8:	df000a17 	ldw	fp,40(sp)
   315ac:	ddc00917 	ldw	r23,36(sp)
   315b0:	dd800817 	ldw	r22,32(sp)
   315b4:	dd400717 	ldw	r21,28(sp)
   315b8:	dd000617 	ldw	r20,24(sp)
   315bc:	dcc00517 	ldw	r19,20(sp)
   315c0:	dc800417 	ldw	r18,16(sp)
   315c4:	dc400317 	ldw	r17,12(sp)
   315c8:	dc000217 	ldw	r16,8(sp)
   315cc:	dec00c04 	addi	sp,sp,48
   315d0:	f800283a 	ret
   315d4:	90800117 	ldw	r2,4(r18)
   315d8:	80c00017 	ldw	r3,0(r16)
   315dc:	10bfffc4 	addi	r2,r2,-1
   315e0:	14400d26 	beq	r2,r17,31618 <__call_exitprocs+0x12c>
   315e4:	80000015 	stw	zero,0(r16)
   315e8:	183fe026 	beq	r3,zero,3156c <__alt_mem_mcu_subsystem_ram_0+0x7801156c>
   315ec:	9c4c983a 	sll	r6,r19,r17
   315f0:	90806217 	ldw	r2,392(r18)
   315f4:	95800117 	ldw	r22,4(r18)
   315f8:	3084703a 	and	r2,r6,r2
   315fc:	1000081e 	bne	r2,zero,31620 <__call_exitprocs+0x134>
   31600:	183ee83a 	callr	r3
   31604:	90800117 	ldw	r2,4(r18)
   31608:	15bfcc1e 	bne	r2,r22,3153c <__alt_mem_mcu_subsystem_ram_0+0x7801153c>
   3160c:	b8800017 	ldw	r2,0(r23)
   31610:	14bfd626 	beq	r2,r18,3156c <__alt_mem_mcu_subsystem_ram_0+0x7801156c>
   31614:	003fc906 	br	3153c <__alt_mem_mcu_subsystem_ram_0+0x7801153c>
   31618:	94400115 	stw	r17,4(r18)
   3161c:	003ff206 	br	315e8 <__alt_mem_mcu_subsystem_ram_0+0x780115e8>
   31620:	90806317 	ldw	r2,396(r18)
   31624:	81002017 	ldw	r4,128(r16)
   31628:	308c703a 	and	r6,r6,r2
   3162c:	3000081e 	bne	r6,zero,31650 <__call_exitprocs+0x164>
   31630:	200b883a 	mov	r5,r4
   31634:	d9000117 	ldw	r4,4(sp)
   31638:	183ee83a 	callr	r3
   3163c:	003ff106 	br	31604 <__alt_mem_mcu_subsystem_ram_0+0x78011604>
   31640:	902f883a 	mov	r23,r18
   31644:	1025883a 	mov	r18,r2
   31648:	903fbf1e 	bne	r18,zero,31548 <__alt_mem_mcu_subsystem_ram_0+0x78011548>
   3164c:	003fd506 	br	315a4 <__alt_mem_mcu_subsystem_ram_0+0x780115a4>
   31650:	183ee83a 	callr	r3
   31654:	003feb06 	br	31604 <__alt_mem_mcu_subsystem_ram_0+0x78011604>

00031658 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   31658:	defffd04 	addi	sp,sp,-12
   3165c:	df000215 	stw	fp,8(sp)
   31660:	df000204 	addi	fp,sp,8
   31664:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   31668:	0001883a 	nop
   3166c:	e0bffe17 	ldw	r2,-8(fp)
   31670:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   31674:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   31678:	10000226 	beq	r2,zero,31684 <_exit+0x2c>
    ALT_SIM_FAIL();
   3167c:	002af070 	cmpltui	zero,zero,43969
   31680:	00000106 	br	31688 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   31684:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   31688:	003fff06 	br	31688 <__alt_mem_mcu_subsystem_ram_0+0x78011688>
